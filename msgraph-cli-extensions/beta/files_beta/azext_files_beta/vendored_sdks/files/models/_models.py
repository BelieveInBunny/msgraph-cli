# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CollectionOfColumnDefinition(msrest.serialization.Model):
    """Collection of columnDefinition.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphColumnDefinition]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphColumnDefinition]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfColumnDefinition, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfColumnDefinition0(msrest.serialization.Model):
    """Collection of columnDefinition.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphColumnDefinition]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphColumnDefinition]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfColumnDefinition0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfColumnLink(msrest.serialization.Model):
    """Collection of columnLink.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphColumnLink]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphColumnLink]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfColumnLink, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfColumnLink0(msrest.serialization.Model):
    """Collection of columnLink.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphColumnLink]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphColumnLink]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfColumnLink0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfContentType(msrest.serialization.Model):
    """Collection of contentType.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphContentType]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphContentType]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfContentType, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfContentType0(msrest.serialization.Model):
    """Collection of contentType.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphContentType]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphContentType]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfContentType0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDrive(msrest.serialization.Model):
    """Collection of drive.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphDrive]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDrive]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDrive, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDrive0(msrest.serialization.Model):
    """Collection of drive.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphDrive]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDrive]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDrive0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDrive1(msrest.serialization.Model):
    """Collection of drive.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphDrive]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDrive]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDrive1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDriveItem(msrest.serialization.Model):
    """Collection of driveItem.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphDriveItem]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDriveItem]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDriveItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDriveItem0(msrest.serialization.Model):
    """Collection of driveItem.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphDriveItem]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDriveItem]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDriveItem0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDriveItem1(msrest.serialization.Model):
    """Collection of driveItem.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphDriveItem]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDriveItem]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDriveItem1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDriveItem2(msrest.serialization.Model):
    """Collection of driveItem.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphDriveItem]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDriveItem]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDriveItem2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDriveItem3(msrest.serialization.Model):
    """Collection of driveItem.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphDriveItem]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDriveItem]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDriveItem3, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfItemActivityOld(msrest.serialization.Model):
    """Collection of itemActivityOLD.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphItemActivityOld]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphItemActivityOld]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfItemActivityOld, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfItemActivityOld0(msrest.serialization.Model):
    """Collection of itemActivityOLD.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphItemActivityOld]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphItemActivityOld]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfItemActivityOld0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfItemActivityOld1(msrest.serialization.Model):
    """Collection of itemActivityOLD.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphItemActivityOld]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphItemActivityOld]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfItemActivityOld1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfItemActivityOld2(msrest.serialization.Model):
    """Collection of itemActivityOLD.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphItemActivityOld]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphItemActivityOld]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfItemActivityOld2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfItemActivityOld3(msrest.serialization.Model):
    """Collection of itemActivityOLD.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphItemActivityOld]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphItemActivityOld]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfItemActivityOld3, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfItemActivityOld4(msrest.serialization.Model):
    """Collection of itemActivityOLD.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphItemActivityOld]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphItemActivityOld]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfItemActivityOld4, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfItemActivityOld5(msrest.serialization.Model):
    """Collection of itemActivityOLD.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphItemActivityOld]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphItemActivityOld]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfItemActivityOld5, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfItemActivityOld6(msrest.serialization.Model):
    """Collection of itemActivityOLD.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphItemActivityOld]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphItemActivityOld]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfItemActivityOld6, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfItemActivityOld7(msrest.serialization.Model):
    """Collection of itemActivityOLD.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphItemActivityOld]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphItemActivityOld]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfItemActivityOld7, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfListItem(msrest.serialization.Model):
    """Collection of listItem.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphListItem]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphListItem]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfListItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfListItem0(msrest.serialization.Model):
    """Collection of listItem.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphListItem]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphListItem]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfListItem0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfListItemVersion(msrest.serialization.Model):
    """Collection of listItemVersion.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphListItemVersion]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphListItemVersion]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfListItemVersion, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfListItemVersion0(msrest.serialization.Model):
    """Collection of listItemVersion.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphListItemVersion]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphListItemVersion]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfListItemVersion0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfListItemVersion1(msrest.serialization.Model):
    """Collection of listItemVersion.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphListItemVersion]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphListItemVersion]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfListItemVersion1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfListItemVersion2(msrest.serialization.Model):
    """Collection of listItemVersion.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphListItemVersion]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphListItemVersion]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfListItemVersion2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfListItemVersion3(msrest.serialization.Model):
    """Collection of listItemVersion.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphListItemVersion]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphListItemVersion]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfListItemVersion3, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfListItemVersion4(msrest.serialization.Model):
    """Collection of listItemVersion.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphListItemVersion]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphListItemVersion]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfListItemVersion4, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSharedDriveItem(msrest.serialization.Model):
    """Collection of sharedDriveItem.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphSharedDriveItem]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSharedDriveItem]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSharedDriveItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSubscription(msrest.serialization.Model):
    """Collection of subscription.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphSubscription]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSubscription]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSubscription, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSubscription0(msrest.serialization.Model):
    """Collection of subscription.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~files.models.MicrosoftGraphSubscription]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSubscription]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSubscription0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)


class MicrosoftGraphAccessReviewInstance(MicrosoftGraphEntity):
    """accessReviewInstance.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param scope: accessReviewScope.
    :type scope: ~files.models.MicrosoftGraphAccessReviewScope
    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param status:
    :type status: str
    :param decisions:
    :type decisions: list[~files.models.MicrosoftGraphAccessReviewInstanceDecisionItem]
    :param definition: accessReviewScheduleDefinition.
    :type definition: ~files.models.MicrosoftGraphAccessReviewScheduleDefinition
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'scope': {'key': 'scope', 'type': 'MicrosoftGraphAccessReviewScope'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'decisions': {'key': 'decisions', 'type': '[MicrosoftGraphAccessReviewInstanceDecisionItem]'},
        'definition': {'key': 'definition', 'type': 'MicrosoftGraphAccessReviewScheduleDefinition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAccessReviewInstance, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.end_date_time = kwargs.get('end_date_time', None)
        self.scope = kwargs.get('scope', None)
        self.start_date_time = kwargs.get('start_date_time', None)
        self.status = kwargs.get('status', None)
        self.decisions = kwargs.get('decisions', None)
        self.definition = kwargs.get('definition', None)


class MicrosoftGraphAccessReviewInstanceDecisionItem(MicrosoftGraphEntity):
    """accessReviewInstanceDecisionItem.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param access_review_id:
    :type access_review_id: str
    :param applied_by: userIdentity.
    :type applied_by: ~files.models.MicrosoftGraphUserIdentity
    :param applied_date_time:
    :type applied_date_time: ~datetime.datetime
    :param apply_result:
    :type apply_result: str
    :param decision:
    :type decision: str
    :param justification:
    :type justification: str
    :param recommendation:
    :type recommendation: str
    :param reviewed_by: userIdentity.
    :type reviewed_by: ~files.models.MicrosoftGraphUserIdentity
    :param reviewed_date_time:
    :type reviewed_date_time: ~datetime.datetime
    :param target: accessReviewInstanceDecisionItemTarget.
    :type target: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'access_review_id': {'key': 'accessReviewId', 'type': 'str'},
        'applied_by': {'key': 'appliedBy', 'type': 'MicrosoftGraphUserIdentity'},
        'applied_date_time': {'key': 'appliedDateTime', 'type': 'iso-8601'},
        'apply_result': {'key': 'applyResult', 'type': 'str'},
        'decision': {'key': 'decision', 'type': 'str'},
        'justification': {'key': 'justification', 'type': 'str'},
        'recommendation': {'key': 'recommendation', 'type': 'str'},
        'reviewed_by': {'key': 'reviewedBy', 'type': 'MicrosoftGraphUserIdentity'},
        'reviewed_date_time': {'key': 'reviewedDateTime', 'type': 'iso-8601'},
        'target': {'key': 'target', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAccessReviewInstanceDecisionItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.access_review_id = kwargs.get('access_review_id', None)
        self.applied_by = kwargs.get('applied_by', None)
        self.applied_date_time = kwargs.get('applied_date_time', None)
        self.apply_result = kwargs.get('apply_result', None)
        self.decision = kwargs.get('decision', None)
        self.justification = kwargs.get('justification', None)
        self.recommendation = kwargs.get('recommendation', None)
        self.reviewed_by = kwargs.get('reviewed_by', None)
        self.reviewed_date_time = kwargs.get('reviewed_date_time', None)
        self.target = kwargs.get('target', None)


class MicrosoftGraphAccessReviewScope(msrest.serialization.Model):
    """accessReviewScope.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param query:
    :type query: str
    :param query_type:
    :type query_type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'query': {'key': 'query', 'type': 'str'},
        'query_type': {'key': 'queryType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAccessReviewScope, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.query = kwargs.get('query', None)
        self.query_type = kwargs.get('query_type', None)


class MicrosoftGraphAccessReviewReviewerScope(MicrosoftGraphAccessReviewScope):
    """accessReviewReviewerScope.

    :param query:
    :type query: str
    :param query_type:
    :type query_type: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param query_root:
    :type query_root: str
    """

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'query_type': {'key': 'queryType', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'query_root': {'key': 'queryRoot', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAccessReviewReviewerScope, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.query_root = kwargs.get('query_root', None)


class MicrosoftGraphAccessReviewScheduleDefinition(MicrosoftGraphEntity):
    """accessReviewScheduleDefinition.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_by: userIdentity.
    :type created_by: ~files.models.MicrosoftGraphUserIdentity
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param description_for_admins:
    :type description_for_admins: str
    :param description_for_reviewers:
    :type description_for_reviewers: str
    :param display_name:
    :type display_name: str
    :param instance_enumeration_scope: accessReviewScope.
    :type instance_enumeration_scope: ~files.models.MicrosoftGraphAccessReviewScope
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param reviewers:
    :type reviewers: list[~files.models.MicrosoftGraphAccessReviewReviewerScope]
    :param scope: accessReviewScope.
    :type scope: ~files.models.MicrosoftGraphAccessReviewScope
    :param settings: accessReviewScheduleSettings.
    :type settings: ~files.models.MicrosoftGraphAccessReviewScheduleSettings
    :param status:
    :type status: str
    :param instances:
    :type instances: list[~files.models.MicrosoftGraphAccessReviewInstance]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphUserIdentity'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description_for_admins': {'key': 'descriptionForAdmins', 'type': 'str'},
        'description_for_reviewers': {'key': 'descriptionForReviewers', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'instance_enumeration_scope': {'key': 'instanceEnumerationScope', 'type': 'MicrosoftGraphAccessReviewScope'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'reviewers': {'key': 'reviewers', 'type': '[MicrosoftGraphAccessReviewReviewerScope]'},
        'scope': {'key': 'scope', 'type': 'MicrosoftGraphAccessReviewScope'},
        'settings': {'key': 'settings', 'type': 'MicrosoftGraphAccessReviewScheduleSettings'},
        'status': {'key': 'status', 'type': 'str'},
        'instances': {'key': 'instances', 'type': '[MicrosoftGraphAccessReviewInstance]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAccessReviewScheduleDefinition, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.description_for_admins = kwargs.get('description_for_admins', None)
        self.description_for_reviewers = kwargs.get('description_for_reviewers', None)
        self.display_name = kwargs.get('display_name', None)
        self.instance_enumeration_scope = kwargs.get('instance_enumeration_scope', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.reviewers = kwargs.get('reviewers', None)
        self.scope = kwargs.get('scope', None)
        self.settings = kwargs.get('settings', None)
        self.status = kwargs.get('status', None)
        self.instances = kwargs.get('instances', None)


class MicrosoftGraphAccessReviewScheduleSettings(msrest.serialization.Model):
    """accessReviewScheduleSettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param apply_actions:
    :type apply_actions: list[dict[str, object]]
    :param auto_apply_decisions_enabled:
    :type auto_apply_decisions_enabled: bool
    :param default_decision:
    :type default_decision: str
    :param default_decision_enabled:
    :type default_decision_enabled: bool
    :param instance_duration_in_days:
    :type instance_duration_in_days: int
    :param justification_required_on_approval:
    :type justification_required_on_approval: bool
    :param mail_notifications_enabled:
    :type mail_notifications_enabled: bool
    :param recommendations_enabled:
    :type recommendations_enabled: bool
    :param recurrence: patternedRecurrence.
    :type recurrence: ~files.models.MicrosoftGraphPatternedRecurrence
    :param reminder_notifications_enabled:
    :type reminder_notifications_enabled: bool
    """

    _validation = {
        'instance_duration_in_days': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'apply_actions': {'key': 'applyActions', 'type': '[{object}]'},
        'auto_apply_decisions_enabled': {'key': 'autoApplyDecisionsEnabled', 'type': 'bool'},
        'default_decision': {'key': 'defaultDecision', 'type': 'str'},
        'default_decision_enabled': {'key': 'defaultDecisionEnabled', 'type': 'bool'},
        'instance_duration_in_days': {'key': 'instanceDurationInDays', 'type': 'int'},
        'justification_required_on_approval': {'key': 'justificationRequiredOnApproval', 'type': 'bool'},
        'mail_notifications_enabled': {'key': 'mailNotificationsEnabled', 'type': 'bool'},
        'recommendations_enabled': {'key': 'recommendationsEnabled', 'type': 'bool'},
        'recurrence': {'key': 'recurrence', 'type': 'MicrosoftGraphPatternedRecurrence'},
        'reminder_notifications_enabled': {'key': 'reminderNotificationsEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAccessReviewScheduleSettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.apply_actions = kwargs.get('apply_actions', None)
        self.auto_apply_decisions_enabled = kwargs.get('auto_apply_decisions_enabled', None)
        self.default_decision = kwargs.get('default_decision', None)
        self.default_decision_enabled = kwargs.get('default_decision_enabled', None)
        self.instance_duration_in_days = kwargs.get('instance_duration_in_days', None)
        self.justification_required_on_approval = kwargs.get('justification_required_on_approval', None)
        self.mail_notifications_enabled = kwargs.get('mail_notifications_enabled', None)
        self.recommendations_enabled = kwargs.get('recommendations_enabled', None)
        self.recurrence = kwargs.get('recurrence', None)
        self.reminder_notifications_enabled = kwargs.get('reminder_notifications_enabled', None)


class MicrosoftGraphActivityHistoryItem(MicrosoftGraphEntity):
    """activityHistoryItem.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param active_duration_seconds: Optional. The duration of active user engagement. if not
     supplied, this is calculated from the startedDateTime and lastActiveDateTime.
    :type active_duration_seconds: int
    :param created_date_time: Set by the server. DateTime in UTC when the object was created on the
     server.
    :type created_date_time: ~datetime.datetime
    :param expiration_date_time: Optional. UTC DateTime when the historyItem will undergo hard-
     delete. Can be set by the client.
    :type expiration_date_time: ~datetime.datetime
    :param last_active_date_time: Optional. UTC DateTime when the historyItem (activity session)
     was last understood as active or finished - if null, historyItem status should be Ongoing.
    :type last_active_date_time: ~datetime.datetime
    :param last_modified_date_time: Set by the server. DateTime in UTC when the object was modified
     on the server.
    :type last_modified_date_time: ~datetime.datetime
    :param started_date_time: Required. UTC DateTime when the historyItem (activity session) was
     started. Required for timeline history.
    :type started_date_time: ~datetime.datetime
    :param status:  Possible values include: "active", "updated", "deleted", "ignored",
     "unknownFutureValue".
    :type status: str or ~files.models.MicrosoftGraphStatus
    :param user_timezone: Optional. The timezone in which the user's device used to generate the
     activity was located at activity creation time. Values supplied as Olson IDs in order to
     support cross-platform representation.
    :type user_timezone: str
    :param activity: userActivity.
    :type activity: ~files.models.MicrosoftGraphUserActivity
    """

    _validation = {
        'active_duration_seconds': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'active_duration_seconds': {'key': 'activeDurationSeconds', 'type': 'int'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'last_active_date_time': {'key': 'lastActiveDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'started_date_time': {'key': 'startedDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'user_timezone': {'key': 'userTimezone', 'type': 'str'},
        'activity': {'key': 'activity', 'type': 'MicrosoftGraphUserActivity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphActivityHistoryItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.active_duration_seconds = kwargs.get('active_duration_seconds', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.last_active_date_time = kwargs.get('last_active_date_time', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.started_date_time = kwargs.get('started_date_time', None)
        self.status = kwargs.get('status', None)
        self.user_timezone = kwargs.get('user_timezone', None)
        self.activity = kwargs.get('activity', None)


class MicrosoftGraphActivityStatistics(MicrosoftGraphEntity):
    """activityStatistics.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param activity:  Possible values include: "Email", "Meeting", "Focus", "Chat", "Call".
    :type activity: str or ~files.models.MicrosoftGraphAnalyticsActivityType
    :param duration:
    :type duration: ~datetime.timedelta
    :param end_date:
    :type end_date: ~datetime.date
    :param start_date:
    :type start_date: ~datetime.date
    :param time_zone_used:
    :type time_zone_used: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'activity': {'key': 'activity', 'type': 'str'},
        'duration': {'key': 'duration', 'type': 'duration'},
        'end_date': {'key': 'endDate', 'type': 'date'},
        'start_date': {'key': 'startDate', 'type': 'date'},
        'time_zone_used': {'key': 'timeZoneUsed', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphActivityStatistics, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.activity = kwargs.get('activity', None)
        self.duration = kwargs.get('duration', None)
        self.end_date = kwargs.get('end_date', None)
        self.start_date = kwargs.get('start_date', None)
        self.time_zone_used = kwargs.get('time_zone_used', None)


class MicrosoftGraphAgreementAcceptance(MicrosoftGraphEntity):
    """agreementAcceptance.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param agreement_file_id:
    :type agreement_file_id: str
    :param agreement_id:
    :type agreement_id: str
    :param device_display_name:
    :type device_display_name: str
    :param device_id:
    :type device_id: str
    :param device_os_type:
    :type device_os_type: str
    :param device_os_version:
    :type device_os_version: str
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param recorded_date_time:
    :type recorded_date_time: ~datetime.datetime
    :param state:  Possible values include: "accepted", "declined", "unknownFutureValue".
    :type state: str or ~files.models.MicrosoftGraphAgreementAcceptanceState
    :param user_display_name:
    :type user_display_name: str
    :param user_email:
    :type user_email: str
    :param user_id:
    :type user_id: str
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'agreement_file_id': {'key': 'agreementFileId', 'type': 'str'},
        'agreement_id': {'key': 'agreementId', 'type': 'str'},
        'device_display_name': {'key': 'deviceDisplayName', 'type': 'str'},
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'device_os_type': {'key': 'deviceOSType', 'type': 'str'},
        'device_os_version': {'key': 'deviceOSVersion', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'recorded_date_time': {'key': 'recordedDateTime', 'type': 'iso-8601'},
        'state': {'key': 'state', 'type': 'str'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_email': {'key': 'userEmail', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAgreementAcceptance, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.agreement_file_id = kwargs.get('agreement_file_id', None)
        self.agreement_id = kwargs.get('agreement_id', None)
        self.device_display_name = kwargs.get('device_display_name', None)
        self.device_id = kwargs.get('device_id', None)
        self.device_os_type = kwargs.get('device_os_type', None)
        self.device_os_version = kwargs.get('device_os_version', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.recorded_date_time = kwargs.get('recorded_date_time', None)
        self.state = kwargs.get('state', None)
        self.user_display_name = kwargs.get('user_display_name', None)
        self.user_email = kwargs.get('user_email', None)
        self.user_id = kwargs.get('user_id', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class MicrosoftGraphAlbum(msrest.serialization.Model):
    """album.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param cover_image_item_id:
    :type cover_image_item_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'cover_image_item_id': {'key': 'coverImageItemId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAlbum, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.cover_image_item_id = kwargs.get('cover_image_item_id', None)


class MicrosoftGraphAlternativeSecurityId(msrest.serialization.Model):
    """alternativeSecurityId.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param identity_provider: For internal use only.
    :type identity_provider: str
    :param key: For internal use only.
    :type key: bytes
    :param type: For internal use only.
    :type type: int
    """

    _validation = {
        'type': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'identity_provider': {'key': 'identityProvider', 'type': 'str'},
        'key': {'key': 'key', 'type': 'base64'},
        'type': {'key': 'type', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAlternativeSecurityId, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.identity_provider = kwargs.get('identity_provider', None)
        self.key = kwargs.get('key', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphAppConsentRequest(MicrosoftGraphEntity):
    """appConsentRequest.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_display_name:
    :type app_display_name: str
    :param app_id:
    :type app_id: str
    :param consent_type:
    :type consent_type: str
    :param pending_scopes:
    :type pending_scopes: list[~files.models.MicrosoftGraphAppConsentRequestScope]
    :param user_consent_requests:
    :type user_consent_requests: list[~files.models.MicrosoftGraphUserConsentRequest]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'consent_type': {'key': 'consentType', 'type': 'str'},
        'pending_scopes': {'key': 'pendingScopes', 'type': '[MicrosoftGraphAppConsentRequestScope]'},
        'user_consent_requests': {'key': 'userConsentRequests', 'type': '[MicrosoftGraphUserConsentRequest]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAppConsentRequest, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_display_name = kwargs.get('app_display_name', None)
        self.app_id = kwargs.get('app_id', None)
        self.consent_type = kwargs.get('consent_type', None)
        self.pending_scopes = kwargs.get('pending_scopes', None)
        self.user_consent_requests = kwargs.get('user_consent_requests', None)


class MicrosoftGraphAppConsentRequestScope(msrest.serialization.Model):
    """appConsentRequestScope.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAppConsentRequestScope, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)


class MicrosoftGraphAppLogCollectionRequest(MicrosoftGraphEntity):
    """AppLogCollectionRequest Entity.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_date_time: Time at which the upload log request reached a terminal state.
    :type completed_date_time: ~datetime.datetime
    :param custom_log_folders: List of log folders.
    :type custom_log_folders: list[str]
    :param error_message: Error message if any during the upload process.
    :type error_message: str
    :param status:  Possible values include: "pending", "completed", "failed".
    :type status: str or ~files.models.MicrosoftGraphAppLogUploadState
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_date_time': {'key': 'completedDateTime', 'type': 'iso-8601'},
        'custom_log_folders': {'key': 'customLogFolders', 'type': '[str]'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAppLogCollectionRequest, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.completed_date_time = kwargs.get('completed_date_time', None)
        self.custom_log_folders = kwargs.get('custom_log_folders', None)
        self.error_message = kwargs.get('error_message', None)
        self.status = kwargs.get('status', None)


class MicrosoftGraphAppRoleAssignment(MicrosoftGraphEntity):
    """appRoleAssignment.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_role_id: The identifier (id) for the app role which is assigned to the principal.
     This app role must be exposed in the appRoles property on the resource application's service
     principal (resourceId). If the resource application has not declared any app roles, a default
     app role ID of 00000000-0000-0000-0000-000000000000 can be specified to signal that the
     principal is assigned to the resource app without any specific app roles. Required on create.
     Does not support $filter.
    :type app_role_id: str
    :param creation_timestamp: The time when the app role assignment was created.The Timestamp type
     represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
     Does not support $filter.
    :type creation_timestamp: ~datetime.datetime
    :param principal_display_name: The display name of the user, group, or service principal that
     was granted the app role assignment. Read-only. Supports $filter (eq and startswith).
    :type principal_display_name: str
    :param principal_id: The unique identifier (id) for the user, group or service principal being
     granted the app role. Required on create. Does not support $filter.
    :type principal_id: str
    :param principal_type: The type of the assigned principal. This can either be 'User', 'Group'
     or 'ServicePrincipal'. Read-only. Does not support $filter.
    :type principal_type: str
    :param resource_display_name: The display name of the resource app's service principal to which
     the assignment is made. Does not support $filter.
    :type resource_display_name: str
    :param resource_id: The unique identifier (id) for the resource service principal for which the
     assignment is made. Required on create. Supports $filter (eq only).
    :type resource_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_role_id': {'key': 'appRoleId', 'type': 'str'},
        'creation_timestamp': {'key': 'creationTimestamp', 'type': 'iso-8601'},
        'principal_display_name': {'key': 'principalDisplayName', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'principal_type': {'key': 'principalType', 'type': 'str'},
        'resource_display_name': {'key': 'resourceDisplayName', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAppRoleAssignment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_role_id = kwargs.get('app_role_id', None)
        self.creation_timestamp = kwargs.get('creation_timestamp', None)
        self.principal_display_name = kwargs.get('principal_display_name', None)
        self.principal_id = kwargs.get('principal_id', None)
        self.principal_type = kwargs.get('principal_type', None)
        self.resource_display_name = kwargs.get('resource_display_name', None)
        self.resource_id = kwargs.get('resource_id', None)


class MicrosoftGraphApproval(MicrosoftGraphEntity):
    """approval.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_steps:
    :type completed_steps: list[~files.models.MicrosoftGraphApprovalStep]
    :param pending_steps:
    :type pending_steps: list[~files.models.MicrosoftGraphApprovalStep]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_steps': {'key': 'completedSteps', 'type': '[MicrosoftGraphApprovalStep]'},
        'pending_steps': {'key': 'pendingSteps', 'type': '[MicrosoftGraphApprovalStep]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphApproval, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.completed_steps = kwargs.get('completed_steps', None)
        self.pending_steps = kwargs.get('pending_steps', None)


class MicrosoftGraphApprovalStep(MicrosoftGraphEntity):
    """approvalStep.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param justification:
    :type justification: str
    :param reviewed_by: identity.
    :type reviewed_by: ~files.models.MicrosoftGraphIdentity
    :param reviewed_date_time:
    :type reviewed_date_time: ~datetime.datetime
    :param review_result:
    :type review_result: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'justification': {'key': 'justification', 'type': 'str'},
        'reviewed_by': {'key': 'reviewedBy', 'type': 'MicrosoftGraphIdentity'},
        'reviewed_date_time': {'key': 'reviewedDateTime', 'type': 'iso-8601'},
        'review_result': {'key': 'reviewResult', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphApprovalStep, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.justification = kwargs.get('justification', None)
        self.reviewed_by = kwargs.get('reviewed_by', None)
        self.reviewed_date_time = kwargs.get('reviewed_date_time', None)
        self.review_result = kwargs.get('review_result', None)


class MicrosoftGraphAssignedLabel(msrest.serialization.Model):
    """assignedLabel.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The display name of the label. Read-only.
    :type display_name: str
    :param label_id: The unique identifier of the label.
    :type label_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'label_id': {'key': 'labelId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAssignedLabel, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.label_id = kwargs.get('label_id', None)


class MicrosoftGraphAssignedLicense(msrest.serialization.Model):
    """assignedLicense.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param disabled_plans: A collection of the unique identifiers for plans that have been
     disabled.
    :type disabled_plans: list[str]
    :param sku_id: The unique identifier for the SKU.
    :type sku_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'disabled_plans': {'key': 'disabledPlans', 'type': '[str]'},
        'sku_id': {'key': 'skuId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAssignedLicense, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.disabled_plans = kwargs.get('disabled_plans', None)
        self.sku_id = kwargs.get('sku_id', None)


class MicrosoftGraphAssignedPlan(msrest.serialization.Model):
    """assignedPlan.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param assigned_date_time: The date and time at which the plan was assigned; for example:
     2013-01-02T19:32:30Z. The Timestamp type represents date and time information using ISO 8601
     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type assigned_date_time: ~datetime.datetime
    :param capability_status: For example, 'Enabled'.
    :type capability_status: str
    :param service: The name of the service; for example, 'Exchange'.
    :type service: str
    :param service_plan_id: A GUID that identifies the service plan.
    :type service_plan_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'assigned_date_time': {'key': 'assignedDateTime', 'type': 'iso-8601'},
        'capability_status': {'key': 'capabilityStatus', 'type': 'str'},
        'service': {'key': 'service', 'type': 'str'},
        'service_plan_id': {'key': 'servicePlanId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAssignedPlan, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.assigned_date_time = kwargs.get('assigned_date_time', None)
        self.capability_status = kwargs.get('capability_status', None)
        self.service = kwargs.get('service', None)
        self.service_plan_id = kwargs.get('service_plan_id', None)


class MicrosoftGraphAttachment(MicrosoftGraphEntity):
    """attachment.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content_type: The MIME type.
    :type content_type: str
    :param is_inline: true if the attachment is an inline attachment; otherwise, false.
    :type is_inline: bool
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The attachment's file name.
    :type name: str
    :param size: The length of the attachment in bytes.
    :type size: int
    """

    _validation = {
        'size': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'is_inline': {'key': 'isInline', 'type': 'bool'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'size': {'key': 'size', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAttachment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content_type = kwargs.get('content_type', None)
        self.is_inline = kwargs.get('is_inline', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.name = kwargs.get('name', None)
        self.size = kwargs.get('size', None)


class MicrosoftGraphRecipient(msrest.serialization.Model):
    """recipient.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param email_address: emailAddress.
    :type email_address: ~files.models.MicrosoftGraphEmailAddress
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'email_address': {'key': 'emailAddress', 'type': 'MicrosoftGraphEmailAddress'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphRecipient, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.email_address = kwargs.get('email_address', None)


class MicrosoftGraphAttendeeBase(MicrosoftGraphRecipient):
    """attendeeBase.

    :param email_address: emailAddress.
    :type email_address: ~files.models.MicrosoftGraphEmailAddress
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:  Possible values include: "required", "optional", "resource".
    :type type: str or ~files.models.MicrosoftGraphAttendeeType
    """

    _attribute_map = {
        'email_address': {'key': 'emailAddress', 'type': 'MicrosoftGraphEmailAddress'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAttendeeBase, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphAttendee(MicrosoftGraphAttendeeBase):
    """attendee.

    :param email_address: emailAddress.
    :type email_address: ~files.models.MicrosoftGraphEmailAddress
    :param type:  Possible values include: "required", "optional", "resource".
    :type type: str or ~files.models.MicrosoftGraphAttendeeType
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param proposed_new_time: timeSlot.
    :type proposed_new_time: ~files.models.MicrosoftGraphTimeSlot
    :param status: responseStatus.
    :type status: ~files.models.MicrosoftGraphResponseStatus
    """

    _attribute_map = {
        'email_address': {'key': 'emailAddress', 'type': 'MicrosoftGraphEmailAddress'},
        'type': {'key': 'type', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'proposed_new_time': {'key': 'proposedNewTime', 'type': 'MicrosoftGraphTimeSlot'},
        'status': {'key': 'status', 'type': 'MicrosoftGraphResponseStatus'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAttendee, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.proposed_new_time = kwargs.get('proposed_new_time', None)
        self.status = kwargs.get('status', None)


class MicrosoftGraphAudio(msrest.serialization.Model):
    """audio.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param album: The title of the album for this audio file.
    :type album: str
    :param album_artist: The artist named on the album for the audio file.
    :type album_artist: str
    :param artist: The performing artist for the audio file.
    :type artist: str
    :param bitrate: Bitrate expressed in kbps.
    :type bitrate: long
    :param composers: The name of the composer of the audio file.
    :type composers: str
    :param copyright: Copyright information for the audio file.
    :type copyright: str
    :param disc: The number of the disc this audio file came from.
    :type disc: int
    :param disc_count: The total number of discs in this album.
    :type disc_count: int
    :param duration: Duration of the audio file, expressed in milliseconds.
    :type duration: long
    :param genre: The genre of this audio file.
    :type genre: str
    :param has_drm: Indicates if the file is protected with digital rights management.
    :type has_drm: bool
    :param is_variable_bitrate: Indicates if the file is encoded with a variable bitrate.
    :type is_variable_bitrate: bool
    :param title: The title of the audio file.
    :type title: str
    :param track: The number of the track on the original disc for this audio file.
    :type track: int
    :param track_count: The total number of tracks on the original disc for this audio file.
    :type track_count: int
    :param year: The year the audio file was recorded.
    :type year: int
    """

    _validation = {
        'disc': {'maximum': 32767, 'minimum': -32768},
        'disc_count': {'maximum': 32767, 'minimum': -32768},
        'track': {'maximum': 2147483647, 'minimum': -2147483648},
        'track_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'year': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'album': {'key': 'album', 'type': 'str'},
        'album_artist': {'key': 'albumArtist', 'type': 'str'},
        'artist': {'key': 'artist', 'type': 'str'},
        'bitrate': {'key': 'bitrate', 'type': 'long'},
        'composers': {'key': 'composers', 'type': 'str'},
        'copyright': {'key': 'copyright', 'type': 'str'},
        'disc': {'key': 'disc', 'type': 'int'},
        'disc_count': {'key': 'discCount', 'type': 'int'},
        'duration': {'key': 'duration', 'type': 'long'},
        'genre': {'key': 'genre', 'type': 'str'},
        'has_drm': {'key': 'hasDrm', 'type': 'bool'},
        'is_variable_bitrate': {'key': 'isVariableBitrate', 'type': 'bool'},
        'title': {'key': 'title', 'type': 'str'},
        'track': {'key': 'track', 'type': 'int'},
        'track_count': {'key': 'trackCount', 'type': 'int'},
        'year': {'key': 'year', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAudio, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.album = kwargs.get('album', None)
        self.album_artist = kwargs.get('album_artist', None)
        self.artist = kwargs.get('artist', None)
        self.bitrate = kwargs.get('bitrate', None)
        self.composers = kwargs.get('composers', None)
        self.copyright = kwargs.get('copyright', None)
        self.disc = kwargs.get('disc', None)
        self.disc_count = kwargs.get('disc_count', None)
        self.duration = kwargs.get('duration', None)
        self.genre = kwargs.get('genre', None)
        self.has_drm = kwargs.get('has_drm', None)
        self.is_variable_bitrate = kwargs.get('is_variable_bitrate', None)
        self.title = kwargs.get('title', None)
        self.track = kwargs.get('track', None)
        self.track_count = kwargs.get('track_count', None)
        self.year = kwargs.get('year', None)


class MicrosoftGraphAudioConferencing(msrest.serialization.Model):
    """audioConferencing.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param conference_id:
    :type conference_id: str
    :param dialin_url: A URL to the externally-accessible web page that contains dial-in
     information.
    :type dialin_url: str
    :param toll_free_number: The toll-free number that connects to the Audio Conference Provider.
    :type toll_free_number: str
    :param toll_number: The toll number that connects to the Audio Conference Provider.
    :type toll_number: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'conference_id': {'key': 'conferenceId', 'type': 'str'},
        'dialin_url': {'key': 'dialinUrl', 'type': 'str'},
        'toll_free_number': {'key': 'tollFreeNumber', 'type': 'str'},
        'toll_number': {'key': 'tollNumber', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAudioConferencing, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.conference_id = kwargs.get('conference_id', None)
        self.dialin_url = kwargs.get('dialin_url', None)
        self.toll_free_number = kwargs.get('toll_free_number', None)
        self.toll_number = kwargs.get('toll_number', None)


class MicrosoftGraphAuthentication(MicrosoftGraphEntity):
    """authentication.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param email_methods:
    :type email_methods: list[~files.models.MicrosoftGraphEmailAuthenticationMethod]
    :param fido2_methods:
    :type fido2_methods: list[~files.models.MicrosoftGraphFido2AuthenticationMethod]
    :param methods:
    :type methods: list[~files.models.MicrosoftGraphAuthenticationMethod]
    :param microsoft_authenticator_methods:
    :type microsoft_authenticator_methods:
     list[~files.models.MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod]
    :param oath_methods:
    :type oath_methods: list[~files.models.MicrosoftGraphSoftwareOathAuthenticationMethod]
    :param operations:
    :type operations: list[~files.models.MicrosoftGraphLongRunningOperation]
    :param passwordless_microsoft_authenticator_methods:
    :type passwordless_microsoft_authenticator_methods:
     list[~files.models.MicrosoftGraphPasswordlessMicrosoftAuthenticatorAuthenticationMethod]
    :param password_methods:
    :type password_methods: list[~files.models.MicrosoftGraphPasswordAuthenticationMethod]
    :param phone_methods:
    :type phone_methods: list[~files.models.MicrosoftGraphPhoneAuthenticationMethod]
    :param security_question_methods:
    :type security_question_methods:
     list[~files.models.MicrosoftGraphSecurityQuestionAuthenticationMethod]
    :param temporary_access_pass_methods:
    :type temporary_access_pass_methods:
     list[~files.models.MicrosoftGraphTemporaryAccessPassAuthenticationMethod]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'email_methods': {'key': 'emailMethods', 'type': '[MicrosoftGraphEmailAuthenticationMethod]'},
        'fido2_methods': {'key': 'fido2Methods', 'type': '[MicrosoftGraphFido2AuthenticationMethod]'},
        'methods': {'key': 'methods', 'type': '[MicrosoftGraphAuthenticationMethod]'},
        'microsoft_authenticator_methods': {'key': 'microsoftAuthenticatorMethods', 'type': '[MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod]'},
        'oath_methods': {'key': 'oathMethods', 'type': '[MicrosoftGraphSoftwareOathAuthenticationMethod]'},
        'operations': {'key': 'operations', 'type': '[MicrosoftGraphLongRunningOperation]'},
        'passwordless_microsoft_authenticator_methods': {'key': 'passwordlessMicrosoftAuthenticatorMethods', 'type': '[MicrosoftGraphPasswordlessMicrosoftAuthenticatorAuthenticationMethod]'},
        'password_methods': {'key': 'passwordMethods', 'type': '[MicrosoftGraphPasswordAuthenticationMethod]'},
        'phone_methods': {'key': 'phoneMethods', 'type': '[MicrosoftGraphPhoneAuthenticationMethod]'},
        'security_question_methods': {'key': 'securityQuestionMethods', 'type': '[MicrosoftGraphSecurityQuestionAuthenticationMethod]'},
        'temporary_access_pass_methods': {'key': 'temporaryAccessPassMethods', 'type': '[MicrosoftGraphTemporaryAccessPassAuthenticationMethod]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAuthentication, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.email_methods = kwargs.get('email_methods', None)
        self.fido2_methods = kwargs.get('fido2_methods', None)
        self.methods = kwargs.get('methods', None)
        self.microsoft_authenticator_methods = kwargs.get('microsoft_authenticator_methods', None)
        self.oath_methods = kwargs.get('oath_methods', None)
        self.operations = kwargs.get('operations', None)
        self.passwordless_microsoft_authenticator_methods = kwargs.get('passwordless_microsoft_authenticator_methods', None)
        self.password_methods = kwargs.get('password_methods', None)
        self.phone_methods = kwargs.get('phone_methods', None)
        self.security_question_methods = kwargs.get('security_question_methods', None)
        self.temporary_access_pass_methods = kwargs.get('temporary_access_pass_methods', None)


class MicrosoftGraphAuthenticationMethod(MicrosoftGraphEntity):
    """authenticationMethod.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAuthenticationMethod, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphAutoLabeling(msrest.serialization.Model):
    """autoLabeling.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param message:
    :type message: str
    :param sensitive_type_ids:
    :type sensitive_type_ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'message': {'key': 'message', 'type': 'str'},
        'sensitive_type_ids': {'key': 'sensitiveTypeIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAutoLabeling, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.message = kwargs.get('message', None)
        self.sensitive_type_ids = kwargs.get('sensitive_type_ids', None)


class MicrosoftGraphAutomaticRepliesSetting(msrest.serialization.Model):
    """automaticRepliesSetting.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param external_audience:  Possible values include: "none", "contactsOnly", "all".
    :type external_audience: str or ~files.models.MicrosoftGraphExternalAudienceScope
    :param external_reply_message: The automatic reply to send to the specified external audience,
     if Status is AlwaysEnabled or Scheduled.
    :type external_reply_message: str
    :param internal_reply_message: The automatic reply to send to the audience internal to the
     signed-in user's organization, if Status is AlwaysEnabled or Scheduled.
    :type internal_reply_message: str
    :param scheduled_end_date_time: dateTimeTimeZone.
    :type scheduled_end_date_time: ~files.models.MicrosoftGraphDateTimeZone
    :param scheduled_start_date_time: dateTimeTimeZone.
    :type scheduled_start_date_time: ~files.models.MicrosoftGraphDateTimeZone
    :param status:  Possible values include: "disabled", "alwaysEnabled", "scheduled".
    :type status: str or ~files.models.MicrosoftGraphAutomaticRepliesStatus
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'external_audience': {'key': 'externalAudience', 'type': 'str'},
        'external_reply_message': {'key': 'externalReplyMessage', 'type': 'str'},
        'internal_reply_message': {'key': 'internalReplyMessage', 'type': 'str'},
        'scheduled_end_date_time': {'key': 'scheduledEndDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'scheduled_start_date_time': {'key': 'scheduledStartDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAutomaticRepliesSetting, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.external_audience = kwargs.get('external_audience', None)
        self.external_reply_message = kwargs.get('external_reply_message', None)
        self.internal_reply_message = kwargs.get('internal_reply_message', None)
        self.scheduled_end_date_time = kwargs.get('scheduled_end_date_time', None)
        self.scheduled_start_date_time = kwargs.get('scheduled_start_date_time', None)
        self.status = kwargs.get('status', None)


class MicrosoftGraphBaseItem(MicrosoftGraphEntity):
    """baseItem.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~files.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~files.models.MicrosoftGraphUser
    :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
    :type drive_id: str
    :param drive_type: Identifies the type of drive. See [drive][] resource for values.
    :type drive_type: str
    :param id_parent_reference_id: Unique identifier of the item in the drive. Read-only.
    :type id_parent_reference_id: str
    :param name_parent_reference_name: The name of the item being referenced. Read-only.
    :type name_parent_reference_name: str
    :param path: Path that can be used to navigate to the item. Read-only.
    :type path: str
    :param share_id: A unique identifier for a shared resource that can be accessed via the
     [Shares][] API.
    :type share_id: str
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param site_id:
    :type site_id: str
    :param application_last_modified_by_application: identity.
    :type application_last_modified_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_last_modified_by_device: identity.
    :type device_last_modified_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_last_modified_by_user: identity.
    :type user_last_modified_by_user: ~files.models.MicrosoftGraphIdentity
    :param application_created_by_application: identity.
    :type application_created_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_created_by_device: identity.
    :type device_created_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_created_by_user: identity.
    :type user_created_by_user: ~files.models.MicrosoftGraphIdentity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'drive_id': {'key': 'parentReference.driveId', 'type': 'str'},
        'drive_type': {'key': 'parentReference.driveType', 'type': 'str'},
        'id_parent_reference_id': {'key': 'parentReference.id', 'type': 'str'},
        'name_parent_reference_name': {'key': 'parentReference.name', 'type': 'str'},
        'path': {'key': 'parentReference.path', 'type': 'str'},
        'share_id': {'key': 'parentReference.shareId', 'type': 'str'},
        'sharepoint_ids': {'key': 'parentReference.sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'site_id': {'key': 'parentReference.siteId', 'type': 'str'},
        'application_last_modified_by_application': {'key': 'lastModifiedBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_last_modified_by_device': {'key': 'lastModifiedBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_last_modified_by_user': {'key': 'lastModifiedBy.user', 'type': 'MicrosoftGraphIdentity'},
        'application_created_by_application': {'key': 'createdBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_created_by_device': {'key': 'createdBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_created_by_user': {'key': 'createdBy.user', 'type': 'MicrosoftGraphIdentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphBaseItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.description = kwargs.get('description', None)
        self.e_tag = kwargs.get('e_tag', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.name = kwargs.get('name', None)
        self.web_url = kwargs.get('web_url', None)
        self.created_by_user = kwargs.get('created_by_user', None)
        self.last_modified_by_user = kwargs.get('last_modified_by_user', None)
        self.drive_id = kwargs.get('drive_id', None)
        self.drive_type = kwargs.get('drive_type', None)
        self.id_parent_reference_id = kwargs.get('id_parent_reference_id', None)
        self.name_parent_reference_name = kwargs.get('name_parent_reference_name', None)
        self.path = kwargs.get('path', None)
        self.share_id = kwargs.get('share_id', None)
        self.sharepoint_ids = kwargs.get('sharepoint_ids', None)
        self.site_id = kwargs.get('site_id', None)
        self.application_last_modified_by_application = kwargs.get('application_last_modified_by_application', None)
        self.device_last_modified_by_device = kwargs.get('device_last_modified_by_device', None)
        self.user_last_modified_by_user = kwargs.get('user_last_modified_by_user', None)
        self.application_created_by_application = kwargs.get('application_created_by_application', None)
        self.device_created_by_device = kwargs.get('device_created_by_device', None)
        self.user_created_by_user = kwargs.get('user_created_by_user', None)


class MicrosoftGraphBaseItemVersion(MicrosoftGraphEntity):
    """baseItemVersion.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_modified_date_time: Date and time the version was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param publication: publicationFacet.
    :type publication: ~files.models.MicrosoftGraphPublicationFacet
    :param application: identity.
    :type application: ~files.models.MicrosoftGraphIdentity
    :param device: identity.
    :type device: ~files.models.MicrosoftGraphIdentity
    :param user: identity.
    :type user: ~files.models.MicrosoftGraphIdentity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'publication': {'key': 'publication', 'type': 'MicrosoftGraphPublicationFacet'},
        'application': {'key': 'lastModifiedBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device': {'key': 'lastModifiedBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user': {'key': 'lastModifiedBy.user', 'type': 'MicrosoftGraphIdentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphBaseItemVersion, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.publication = kwargs.get('publication', None)
        self.application = kwargs.get('application', None)
        self.device = kwargs.get('device', None)
        self.user = kwargs.get('user', None)


class MicrosoftGraphBundle(msrest.serialization.Model):
    """bundle.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param album: album.
    :type album: ~files.models.MicrosoftGraphAlbum
    :param child_count:
    :type child_count: int
    """

    _validation = {
        'child_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'album': {'key': 'album', 'type': 'MicrosoftGraphAlbum'},
        'child_count': {'key': 'childCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphBundle, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.album = kwargs.get('album', None)
        self.child_count = kwargs.get('child_count', None)


class MicrosoftGraphCalculatedColumn(msrest.serialization.Model):
    """calculatedColumn.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param format: For dateTime output types, the format of the value. Must be one of dateOnly or
     dateTime.
    :type format: str
    :param formula: The formula used to compute the value for this column.
    :type formula: str
    :param output_type: The output type used to format values in this column. Must be one of
     boolean, currency, dateTime, number, or text.
    :type output_type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'format': {'key': 'format', 'type': 'str'},
        'formula': {'key': 'formula', 'type': 'str'},
        'output_type': {'key': 'outputType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCalculatedColumn, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.format = kwargs.get('format', None)
        self.formula = kwargs.get('formula', None)
        self.output_type = kwargs.get('output_type', None)


class MicrosoftGraphCalendar(MicrosoftGraphEntity):
    """calendar.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allowed_online_meeting_providers: Represent the online meeting service providers that
     can be used to create online meetings in this calendar. Possible values are: unknown,
     skypeForBusiness, skypeForConsumer, teamsForBusiness.
    :type allowed_online_meeting_providers: list[str or
     ~files.models.MicrosoftGraphOnlineMeetingProviderType]
    :param calendar_group_id:
    :type calendar_group_id: str
    :param can_edit: True if the user can write to the calendar, false otherwise. This property is
     true for the user who created the calendar. This property is also true for a user who has been
     shared a calendar and granted write access.
    :type can_edit: bool
    :param can_share: True if the user has the permission to share the calendar, false otherwise.
     Only the user who created the calendar can share it.
    :type can_share: bool
    :param can_view_private_items: True if the user can read calendar items that have been marked
     private, false otherwise.
    :type can_view_private_items: bool
    :param change_key: Identifies the version of the calendar object. Every time the calendar is
     changed, changeKey changes as well. This allows Exchange to apply changes to the correct
     version of the object. Read-only.
    :type change_key: str
    :param color:  Possible values include: "lightBlue", "lightGreen", "auto", "lightOrange",
     "lightGray", "lightYellow", "lightTeal", "lightPink", "lightBrown", "lightRed", "maxColor".
    :type color: str or ~files.models.MicrosoftGraphCalendarColor
    :param default_online_meeting_provider:  Possible values include: "unknown",
     "skypeForBusiness", "skypeForConsumer", "teamsForBusiness".
    :type default_online_meeting_provider: str or
     ~files.models.MicrosoftGraphOnlineMeetingProviderType
    :param hex_color:
    :type hex_color: str
    :param is_default_calendar:
    :type is_default_calendar: bool
    :param is_removable: Indicates whether this user calendar can be deleted from the user mailbox.
    :type is_removable: bool
    :param is_shared:
    :type is_shared: bool
    :param is_shared_with_me:
    :type is_shared_with_me: bool
    :param is_tallying_responses: Indicates whether this user calendar supports tracking of meeting
     responses. Only meeting invites sent from users' primary calendars support tracking of meeting
     responses.
    :type is_tallying_responses: bool
    :param name: The calendar name.
    :type name: str
    :param owner: emailAddress.
    :type owner: ~files.models.MicrosoftGraphEmailAddress
    :param calendar_permissions: The permissions of the users with whom the calendar is shared.
    :type calendar_permissions: list[~files.models.MicrosoftGraphCalendarPermission]
    :param calendar_view: The calendar view for the calendar. Navigation property. Read-only.
    :type calendar_view: list[~files.models.MicrosoftGraphEvent]
    :param events: The events in the calendar. Navigation property. Read-only.
    :type events: list[~files.models.MicrosoftGraphEvent]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the calendar. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~files.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the calendar. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~files.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'allowed_online_meeting_providers': {'key': 'allowedOnlineMeetingProviders', 'type': '[str]'},
        'calendar_group_id': {'key': 'calendarGroupId', 'type': 'str'},
        'can_edit': {'key': 'canEdit', 'type': 'bool'},
        'can_share': {'key': 'canShare', 'type': 'bool'},
        'can_view_private_items': {'key': 'canViewPrivateItems', 'type': 'bool'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'color': {'key': 'color', 'type': 'str'},
        'default_online_meeting_provider': {'key': 'defaultOnlineMeetingProvider', 'type': 'str'},
        'hex_color': {'key': 'hexColor', 'type': 'str'},
        'is_default_calendar': {'key': 'isDefaultCalendar', 'type': 'bool'},
        'is_removable': {'key': 'isRemovable', 'type': 'bool'},
        'is_shared': {'key': 'isShared', 'type': 'bool'},
        'is_shared_with_me': {'key': 'isSharedWithMe', 'type': 'bool'},
        'is_tallying_responses': {'key': 'isTallyingResponses', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'owner': {'key': 'owner', 'type': 'MicrosoftGraphEmailAddress'},
        'calendar_permissions': {'key': 'calendarPermissions', 'type': '[MicrosoftGraphCalendarPermission]'},
        'calendar_view': {'key': 'calendarView', 'type': '[MicrosoftGraphEvent]'},
        'events': {'key': 'events', 'type': '[MicrosoftGraphEvent]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCalendar, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allowed_online_meeting_providers = kwargs.get('allowed_online_meeting_providers', None)
        self.calendar_group_id = kwargs.get('calendar_group_id', None)
        self.can_edit = kwargs.get('can_edit', None)
        self.can_share = kwargs.get('can_share', None)
        self.can_view_private_items = kwargs.get('can_view_private_items', None)
        self.change_key = kwargs.get('change_key', None)
        self.color = kwargs.get('color', None)
        self.default_online_meeting_provider = kwargs.get('default_online_meeting_provider', None)
        self.hex_color = kwargs.get('hex_color', None)
        self.is_default_calendar = kwargs.get('is_default_calendar', None)
        self.is_removable = kwargs.get('is_removable', None)
        self.is_shared = kwargs.get('is_shared', None)
        self.is_shared_with_me = kwargs.get('is_shared_with_me', None)
        self.is_tallying_responses = kwargs.get('is_tallying_responses', None)
        self.name = kwargs.get('name', None)
        self.owner = kwargs.get('owner', None)
        self.calendar_permissions = kwargs.get('calendar_permissions', None)
        self.calendar_view = kwargs.get('calendar_view', None)
        self.events = kwargs.get('events', None)
        self.multi_value_extended_properties = kwargs.get('multi_value_extended_properties', None)
        self.single_value_extended_properties = kwargs.get('single_value_extended_properties', None)


class MicrosoftGraphCalendarGroup(MicrosoftGraphEntity):
    """calendarGroup.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param change_key: Identifies the version of the calendar group. Every time the calendar group
     is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct
     version of the object. Read-only.
    :type change_key: str
    :param class_id: The class identifier. Read-only.
    :type class_id: str
    :param name: The group name.
    :type name: str
    :param calendars: The calendars in the calendar group. Navigation property. Read-only.
     Nullable.
    :type calendars: list[~files.models.MicrosoftGraphCalendar]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'class_id': {'key': 'classId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'calendars': {'key': 'calendars', 'type': '[MicrosoftGraphCalendar]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCalendarGroup, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.change_key = kwargs.get('change_key', None)
        self.class_id = kwargs.get('class_id', None)
        self.name = kwargs.get('name', None)
        self.calendars = kwargs.get('calendars', None)


class MicrosoftGraphCalendarPermission(MicrosoftGraphEntity):
    """calendarPermission.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allowed_roles: List of allowed sharing or delegating permission levels for the calendar.
     Possible values are: none, freeBusyRead, limitedRead, read, write,
     delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.
    :type allowed_roles: list[str or ~files.models.MicrosoftGraphCalendarRoleType]
    :param email_address: emailAddress.
    :type email_address: ~files.models.MicrosoftGraphEmailAddress
    :param is_inside_organization: True if the user in context (sharee or delegate) is inside the
     same organization as the calendar owner.
    :type is_inside_organization: bool
    :param is_removable: True if the user can be removed from the list of sharees or delegates for
     the specified calendar, false otherwise. The 'My organization' user determines the permissions
     other people within your organization have to the given calendar. You cannot remove 'My
     organization' as a sharee to a calendar.
    :type is_removable: bool
    :param role:  Possible values include: "none", "freeBusyRead", "limitedRead", "read", "write",
     "delegateWithoutPrivateEventAccess", "delegateWithPrivateEventAccess", "custom".
    :type role: str or ~files.models.MicrosoftGraphCalendarRoleType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'allowed_roles': {'key': 'allowedRoles', 'type': '[str]'},
        'email_address': {'key': 'emailAddress', 'type': 'MicrosoftGraphEmailAddress'},
        'is_inside_organization': {'key': 'isInsideOrganization', 'type': 'bool'},
        'is_removable': {'key': 'isRemovable', 'type': 'bool'},
        'role': {'key': 'role', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCalendarPermission, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allowed_roles = kwargs.get('allowed_roles', None)
        self.email_address = kwargs.get('email_address', None)
        self.is_inside_organization = kwargs.get('is_inside_organization', None)
        self.is_removable = kwargs.get('is_removable', None)
        self.role = kwargs.get('role', None)


class MicrosoftGraphChangeTrackedEntity(MicrosoftGraphEntity):
    """changeTrackedEntity.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChangeTrackedEntity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class MicrosoftGraphChannel(MicrosoftGraphEntity):
    """channel.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: Read only. Timestamp at which the channel was created.
    :type created_date_time: ~datetime.datetime
    :param description: Optional textual description for the channel.
    :type description: str
    :param display_name: Channel name as it will appear to the user in Microsoft Teams.
    :type display_name: str
    :param email: The email address for sending messages to the channel. Read-only.
    :type email: str
    :param is_favorite_by_default: Indicates whether the channel should automatically be marked
     'favorite' for all members of the team. Can only be set programmatically with Create team.
     Default: false.
    :type is_favorite_by_default: bool
    :param membership_type:  Possible values include: "standard", "private", "unknownFutureValue".
    :type membership_type: str or ~files.models.MicrosoftGraphChannelMembershipType
    :param moderation_settings: channelModerationSettings.
    :type moderation_settings: ~files.models.MicrosoftGraphChannelModerationSettings
    :param web_url: A hyperlink that will go to the channel in Microsoft Teams. This is the URL
     that you get when you right-click a channel in Microsoft Teams and select Get link to channel.
     This URL should be treated as an opaque blob, and not parsed. Read-only.
    :type web_url: str
    :param files_folder: driveItem.
    :type files_folder: ~files.models.MicrosoftGraphDriveItem
    :param members:
    :type members: list[~files.models.MicrosoftGraphConversationMember]
    :param messages: A collection of all the messages in the channel. A navigation property.
     Nullable.
    :type messages: list[~files.models.MicrosoftGraphChatMessage]
    :param tabs: A collection of all the tabs in the channel. A navigation property.
    :type tabs: list[~files.models.MicrosoftGraphTeamsTab]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'is_favorite_by_default': {'key': 'isFavoriteByDefault', 'type': 'bool'},
        'membership_type': {'key': 'membershipType', 'type': 'str'},
        'moderation_settings': {'key': 'moderationSettings', 'type': 'MicrosoftGraphChannelModerationSettings'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'files_folder': {'key': 'filesFolder', 'type': 'MicrosoftGraphDriveItem'},
        'members': {'key': 'members', 'type': '[MicrosoftGraphConversationMember]'},
        'messages': {'key': 'messages', 'type': '[MicrosoftGraphChatMessage]'},
        'tabs': {'key': 'tabs', 'type': '[MicrosoftGraphTeamsTab]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChannel, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.email = kwargs.get('email', None)
        self.is_favorite_by_default = kwargs.get('is_favorite_by_default', None)
        self.membership_type = kwargs.get('membership_type', None)
        self.moderation_settings = kwargs.get('moderation_settings', None)
        self.web_url = kwargs.get('web_url', None)
        self.files_folder = kwargs.get('files_folder', None)
        self.members = kwargs.get('members', None)
        self.messages = kwargs.get('messages', None)
        self.tabs = kwargs.get('tabs', None)


class MicrosoftGraphChannelIdentity(msrest.serialization.Model):
    """channelIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param channel_id:
    :type channel_id: str
    :param team_id:
    :type team_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'channel_id': {'key': 'channelId', 'type': 'str'},
        'team_id': {'key': 'teamId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChannelIdentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.channel_id = kwargs.get('channel_id', None)
        self.team_id = kwargs.get('team_id', None)


class MicrosoftGraphChannelModerationSettings(msrest.serialization.Model):
    """channelModerationSettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_new_message_from_bots:
    :type allow_new_message_from_bots: bool
    :param allow_new_message_from_connectors:
    :type allow_new_message_from_connectors: bool
    :param reply_restriction:  Possible values include: "everyone", "authorAndModerators",
     "unknownFutureValue".
    :type reply_restriction: str or ~files.models.MicrosoftGraphReplyRestriction
    :param user_new_message_restriction:  Possible values include: "everyone",
     "everyoneExceptGuests", "moderators", "unknownFutureValue".
    :type user_new_message_restriction: str or
     ~files.models.MicrosoftGraphUserNewMessageRestriction
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_new_message_from_bots': {'key': 'allowNewMessageFromBots', 'type': 'bool'},
        'allow_new_message_from_connectors': {'key': 'allowNewMessageFromConnectors', 'type': 'bool'},
        'reply_restriction': {'key': 'replyRestriction', 'type': 'str'},
        'user_new_message_restriction': {'key': 'userNewMessageRestriction', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChannelModerationSettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allow_new_message_from_bots = kwargs.get('allow_new_message_from_bots', None)
        self.allow_new_message_from_connectors = kwargs.get('allow_new_message_from_connectors', None)
        self.reply_restriction = kwargs.get('reply_restriction', None)
        self.user_new_message_restriction = kwargs.get('user_new_message_restriction', None)


class MicrosoftGraphChat(MicrosoftGraphEntity):
    """chat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_updated_date_time:
    :type last_updated_date_time: ~datetime.datetime
    :param topic:
    :type topic: str
    :param installed_apps:
    :type installed_apps: list[~files.models.MicrosoftGraphTeamsAppInstallation]
    :param members:
    :type members: list[~files.models.MicrosoftGraphConversationMember]
    :param messages:
    :type messages: list[~files.models.MicrosoftGraphChatMessage]
    :param tabs:
    :type tabs: list[~files.models.MicrosoftGraphTeamsTab]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'topic': {'key': 'topic', 'type': 'str'},
        'installed_apps': {'key': 'installedApps', 'type': '[MicrosoftGraphTeamsAppInstallation]'},
        'members': {'key': 'members', 'type': '[MicrosoftGraphConversationMember]'},
        'messages': {'key': 'messages', 'type': '[MicrosoftGraphChatMessage]'},
        'tabs': {'key': 'tabs', 'type': '[MicrosoftGraphTeamsTab]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.last_updated_date_time = kwargs.get('last_updated_date_time', None)
        self.topic = kwargs.get('topic', None)
        self.installed_apps = kwargs.get('installed_apps', None)
        self.members = kwargs.get('members', None)
        self.messages = kwargs.get('messages', None)
        self.tabs = kwargs.get('tabs', None)


class MicrosoftGraphChatInfo(msrest.serialization.Model):
    """chatInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param message_id: The unique identifier of a message in a Microsoft Teams channel.
    :type message_id: str
    :param reply_chain_message_id: The ID of the reply message.
    :type reply_chain_message_id: str
    :param thread_id: The unique identifier for a thread in Microsoft Teams.
    :type thread_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'message_id': {'key': 'messageId', 'type': 'str'},
        'reply_chain_message_id': {'key': 'replyChainMessageId', 'type': 'str'},
        'thread_id': {'key': 'threadId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChatInfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.message_id = kwargs.get('message_id', None)
        self.reply_chain_message_id = kwargs.get('reply_chain_message_id', None)
        self.thread_id = kwargs.get('thread_id', None)


class MicrosoftGraphChatMessage(MicrosoftGraphEntity):
    """chatMessage.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param attachments: Attached files. Attachments are currently read-only – sending attachments
     is not supported.
    :type attachments: list[~files.models.MicrosoftGraphChatMessageAttachment]
    :param body: itemBody.
    :type body: ~files.models.MicrosoftGraphItemBody
    :param channel_identity: channelIdentity.
    :type channel_identity: ~files.models.MicrosoftGraphChannelIdentity
    :param chat_id:
    :type chat_id: str
    :param created_date_time: Read only. Timestamp of when the chat message was created.
    :type created_date_time: ~datetime.datetime
    :param deleted_date_time: Read only. Timestamp at which the chat message was deleted, or null
     if not deleted.
    :type deleted_date_time: ~datetime.datetime
    :param etag: Read-only. Version number of the chat message.
    :type etag: str
    :param from_property: identitySet.
    :type from_property: ~files.models.MicrosoftGraphIdentitySet
    :param importance:  Possible values include: "normal", "high", "urgent".
    :type importance: str or ~files.models.MicrosoftGraphChatMessageImportance
    :param last_edited_date_time: Read only. Timestamp when edits to the chat message were made.
     Triggers an 'Edited' flag in the Microsoft Teams UI. If no edits are made the value is null.
    :type last_edited_date_time: ~datetime.datetime
    :param last_modified_date_time: Read only. Timestamp when the chat message is created (initial
     setting) or edited, including when a reaction is added or removed.
    :type last_modified_date_time: ~datetime.datetime
    :param locale: Locale of the chat message set by the client.
    :type locale: str
    :param mentions: List of entities mentioned in the chat message. Currently supports user, bot,
     team, channel.
    :type mentions: list[~files.models.MicrosoftGraphChatMessageMention]
    :param message_type:  Possible values include: "message", "chatEvent", "typing".
    :type message_type: str or ~files.models.MicrosoftGraphChatMessageType
    :param policy_violation: chatMessagePolicyViolation.
    :type policy_violation: ~files.models.MicrosoftGraphChatMessagePolicyViolation
    :param reactions:
    :type reactions: list[~files.models.MicrosoftGraphChatMessageReaction]
    :param reply_to_id: Read-only. Id of the parent chat message or root chat message of the
     thread. (Only applies to chat messages in channels not chats).
    :type reply_to_id: str
    :param subject: The subject of the chat message, in plaintext.
    :type subject: str
    :param summary: Summary text of the chat message that could be used for push notifications and
     summary views or fall back views. Only applies to channel chat messages, not chat messages in a
     chat.
    :type summary: str
    :param web_url:
    :type web_url: str
    :param hosted_contents:
    :type hosted_contents: list[~files.models.MicrosoftGraphChatMessageHostedContent]
    :param replies:
    :type replies: list[~files.models.MicrosoftGraphChatMessage]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'attachments': {'key': 'attachments', 'type': '[MicrosoftGraphChatMessageAttachment]'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'channel_identity': {'key': 'channelIdentity', 'type': 'MicrosoftGraphChannelIdentity'},
        'chat_id': {'key': 'chatId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'etag': {'key': 'etag', 'type': 'str'},
        'from_property': {'key': 'from', 'type': 'MicrosoftGraphIdentitySet'},
        'importance': {'key': 'importance', 'type': 'str'},
        'last_edited_date_time': {'key': 'lastEditedDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'locale': {'key': 'locale', 'type': 'str'},
        'mentions': {'key': 'mentions', 'type': '[MicrosoftGraphChatMessageMention]'},
        'message_type': {'key': 'messageType', 'type': 'str'},
        'policy_violation': {'key': 'policyViolation', 'type': 'MicrosoftGraphChatMessagePolicyViolation'},
        'reactions': {'key': 'reactions', 'type': '[MicrosoftGraphChatMessageReaction]'},
        'reply_to_id': {'key': 'replyToId', 'type': 'str'},
        'subject': {'key': 'subject', 'type': 'str'},
        'summary': {'key': 'summary', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'hosted_contents': {'key': 'hostedContents', 'type': '[MicrosoftGraphChatMessageHostedContent]'},
        'replies': {'key': 'replies', 'type': '[MicrosoftGraphChatMessage]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChatMessage, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.attachments = kwargs.get('attachments', None)
        self.body = kwargs.get('body', None)
        self.channel_identity = kwargs.get('channel_identity', None)
        self.chat_id = kwargs.get('chat_id', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.deleted_date_time = kwargs.get('deleted_date_time', None)
        self.etag = kwargs.get('etag', None)
        self.from_property = kwargs.get('from_property', None)
        self.importance = kwargs.get('importance', None)
        self.last_edited_date_time = kwargs.get('last_edited_date_time', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.locale = kwargs.get('locale', None)
        self.mentions = kwargs.get('mentions', None)
        self.message_type = kwargs.get('message_type', None)
        self.policy_violation = kwargs.get('policy_violation', None)
        self.reactions = kwargs.get('reactions', None)
        self.reply_to_id = kwargs.get('reply_to_id', None)
        self.subject = kwargs.get('subject', None)
        self.summary = kwargs.get('summary', None)
        self.web_url = kwargs.get('web_url', None)
        self.hosted_contents = kwargs.get('hosted_contents', None)
        self.replies = kwargs.get('replies', None)


class MicrosoftGraphChatMessageAttachment(msrest.serialization.Model):
    """chatMessageAttachment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content: The content of the attachment. If the attachment is a rich card, set the
     property to the rich card object. This property and contentUrl are mutually exclusive.
    :type content: str
    :param content_type: The media type of the content attachment. It can have the following
     values: reference: Attachment is a link to another file. Populate the contentURL with the link
     to the object.file: Raw file attachment. Populate the contenturl field with the base64 encoding
     of the file in data: format.image/: Image type with the type of the image specified ex:
     image/png, image/jpeg, image/gif. Populate the contentUrl field with the base64 encoding of the
     file in data: format.video/: Video type with the format specified. Ex: video/mp4. Populate the
     contentUrl field with the base64 encoding of the file in data: format.audio/: Audio type with
     the format specified. Ex: audio/wmw. Populate the contentUrl field with the base64 encoding of
     the file in data: format.application/card type: Rich card attachment type with the card type
     specifying the exact card format to use. Set content with the json format of the card.
     Supported values for card type include:application/vnd.microsoft.card.adaptive: A rich card
     that can contain any combination of text, speech, images,,buttons, and input fields. Set the
     content property to,an AdaptiveCard object.application/vnd.microsoft.card.animation: A rich
     card that plays animation. Set the content property,to an
     AnimationCardobject.application/vnd.microsoft.card.audio: A rich card that plays audio files.
     Set the content property,to an AudioCard object.application/vnd.microsoft.card.video: A rich
     card that plays videos. Set the content property,to a VideoCard
     object.application/vnd.microsoft.card.hero: A Hero card. Set the content property to a HeroCard
     object.application/vnd.microsoft.card.thumbnail: A Thumbnail card. Set the content property to
     a ThumbnailCard object.application/vnd.microsoft.com.card.receipt: A Receipt card. Set the
     content property to a ReceiptCard object.application/vnd.microsoft.com.card.signin: A user Sign
     In card. Set the content property to a SignInCard object.
    :type content_type: str
    :param content_url: URL for the content of the attachment. Supported protocols: http, https,
     file and data.
    :type content_url: str
    :param id: Read-only. Unique id of the attachment.
    :type id: str
    :param name: Name of the attachment.
    :type name: str
    :param thumbnail_url: URL to a thumbnail image that the channel can use if it supports using an
     alternative, smaller form of content or contentUrl. For example, if you set contentType to
     application/word and set contentUrl to the location of the Word document, you might include a
     thumbnail image that represents the document. The channel could display the thumbnail image
     instead of the document. When the user clicks the image, the channel would open the document.
    :type thumbnail_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'content_url': {'key': 'contentUrl', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'thumbnail_url': {'key': 'thumbnailUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChatMessageAttachment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content = kwargs.get('content', None)
        self.content_type = kwargs.get('content_type', None)
        self.content_url = kwargs.get('content_url', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.thumbnail_url = kwargs.get('thumbnail_url', None)


class MicrosoftGraphChatMessageHostedContent(MicrosoftGraphEntity):
    """chatMessageHostedContent.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content_bytes:
    :type content_bytes: bytes
    :param content_type:
    :type content_type: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'content_bytes': {'key': 'contentBytes', 'type': 'base64'},
        'content_type': {'key': 'contentType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChatMessageHostedContent, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content_bytes = kwargs.get('content_bytes', None)
        self.content_type = kwargs.get('content_type', None)


class MicrosoftGraphChatMessageMention(msrest.serialization.Model):
    """chatMessageMention.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Index of an entity being mentioned in the specified chatMessage. Matches the {index}
     value in the corresponding :code:`<at id='{index}'>` tag in the message body.
    :type id: int
    :param mentioned: identitySet.
    :type mentioned: ~files.models.MicrosoftGraphIdentitySet
    :param mention_text: String used to represent the mention. For example, a user's display name,
     a team name.
    :type mention_text: str
    """

    _validation = {
        'id': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'int'},
        'mentioned': {'key': 'mentioned', 'type': 'MicrosoftGraphIdentitySet'},
        'mention_text': {'key': 'mentionText', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChatMessageMention, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)
        self.mentioned = kwargs.get('mentioned', None)
        self.mention_text = kwargs.get('mention_text', None)


class MicrosoftGraphChatMessagePolicyViolation(msrest.serialization.Model):
    """chatMessagePolicyViolation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param dlp_action:  Possible values include: "none", "notifySender", "blockAccess",
     "blockAccessExternal".
    :type dlp_action: str or ~files.models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes
    :param justification_text: Justification text provided by the sender of the message when
     overriding a policy violation.
    :type justification_text: str
    :param policy_tip: chatMessagePolicyViolationPolicyTip.
    :type policy_tip: ~files.models.MicrosoftGraphChatMessagePolicyViolationPolicyTip
    :param user_action:  Possible values include: "none", "override", "reportFalsePositive".
    :type user_action: str or ~files.models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes
    :param verdict_details:  Possible values include: "none", "allowFalsePositiveOverride",
     "allowOverrideWithoutJustification", "allowOverrideWithJustification".
    :type verdict_details: str or
     ~files.models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'dlp_action': {'key': 'dlpAction', 'type': 'str'},
        'justification_text': {'key': 'justificationText', 'type': 'str'},
        'policy_tip': {'key': 'policyTip', 'type': 'MicrosoftGraphChatMessagePolicyViolationPolicyTip'},
        'user_action': {'key': 'userAction', 'type': 'str'},
        'verdict_details': {'key': 'verdictDetails', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChatMessagePolicyViolation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.dlp_action = kwargs.get('dlp_action', None)
        self.justification_text = kwargs.get('justification_text', None)
        self.policy_tip = kwargs.get('policy_tip', None)
        self.user_action = kwargs.get('user_action', None)
        self.verdict_details = kwargs.get('verdict_details', None)


class MicrosoftGraphChatMessagePolicyViolationPolicyTip(msrest.serialization.Model):
    """chatMessagePolicyViolationPolicyTip.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param compliance_url: The URL a user can visit to read about the data loss prevention policies
     for the organization. (ie, policies about what users shouldn't say in chats).
    :type compliance_url: str
    :param general_text: Explanatory text shown to the sender of the message.
    :type general_text: str
    :param matched_condition_descriptions: The list of improper data in the message that was
     detected by the data loss prevention app. Each DLP app defines its own conditions, examples
     include 'Credit Card Number' and 'Social Security Number'.
    :type matched_condition_descriptions: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'compliance_url': {'key': 'complianceUrl', 'type': 'str'},
        'general_text': {'key': 'generalText', 'type': 'str'},
        'matched_condition_descriptions': {'key': 'matchedConditionDescriptions', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChatMessagePolicyViolationPolicyTip, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.compliance_url = kwargs.get('compliance_url', None)
        self.general_text = kwargs.get('general_text', None)
        self.matched_condition_descriptions = kwargs.get('matched_condition_descriptions', None)


class MicrosoftGraphChatMessageReaction(msrest.serialization.Model):
    """chatMessageReaction.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param reaction_type:
    :type reaction_type: str
    :param user: identitySet.
    :type user: ~files.models.MicrosoftGraphIdentitySet
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'reaction_type': {'key': 'reactionType', 'type': 'str'},
        'user': {'key': 'user', 'type': 'MicrosoftGraphIdentitySet'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChatMessageReaction, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.reaction_type = kwargs.get('reaction_type', None)
        self.user = kwargs.get('user', None)


class MicrosoftGraphChoiceColumn(msrest.serialization.Model):
    """choiceColumn.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_text_entry: If true, allows custom values that aren't in the configured choices.
    :type allow_text_entry: bool
    :param choices: The list of values available for this column.
    :type choices: list[str]
    :param display_as: How the choices are to be presented in the UX. Must be one of checkBoxes,
     dropDownMenu, or radioButtons.
    :type display_as: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_text_entry': {'key': 'allowTextEntry', 'type': 'bool'},
        'choices': {'key': 'choices', 'type': '[str]'},
        'display_as': {'key': 'displayAs', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChoiceColumn, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allow_text_entry = kwargs.get('allow_text_entry', None)
        self.choices = kwargs.get('choices', None)
        self.display_as = kwargs.get('display_as', None)


class MicrosoftGraphColumnDefinition(MicrosoftGraphEntity):
    """columnDefinition.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param boolean: booleanColumn.
    :type boolean: dict[str, object]
    :param calculated: calculatedColumn.
    :type calculated: ~files.models.MicrosoftGraphCalculatedColumn
    :param choice: choiceColumn.
    :type choice: ~files.models.MicrosoftGraphChoiceColumn
    :param column_group: For site columns, the name of the group this column belongs to. Helps
     organize related columns.
    :type column_group: str
    :param date_time: dateTimeColumn.
    :type date_time: ~files.models.MicrosoftGraphDateTimeColumn
    :param default_value: defaultColumnValue.
    :type default_value: ~files.models.MicrosoftGraphDefaultColumnValue
    :param description: The user-facing description of the column.
    :type description: str
    :param display_name: The user-facing name of the column.
    :type display_name: str
    :param enforce_unique_values: If true, no two list items may have the same value for this
     column.
    :type enforce_unique_values: bool
    :param geolocation: geolocationColumn.
    :type geolocation: dict[str, object]
    :param hidden: Specifies whether the column is displayed in the user interface.
    :type hidden: bool
    :param indexed: Specifies whether the column values can used for sorting and searching.
    :type indexed: bool
    :param lookup: lookupColumn.
    :type lookup: ~files.models.MicrosoftGraphLookupColumn
    :param name: The API-facing name of the column as it appears in the [fields][] on a
     [listItem][]. For the user-facing name, see displayName.
    :type name: str
    :param number: numberColumn.
    :type number: ~files.models.MicrosoftGraphNumberColumn
    :param person_or_group: personOrGroupColumn.
    :type person_or_group: ~files.models.MicrosoftGraphPersonOrGroupColumn
    :param read_only: Specifies whether the column values can be modified.
    :type read_only: bool
    :param required: Specifies whether the column value is not optional.
    :type required: bool
    :param text: textColumn.
    :type text: ~files.models.MicrosoftGraphTextColumn
    :param locale: Specifies the locale from which to infer the currency symbol.
    :type locale: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'boolean': {'key': 'boolean', 'type': '{object}'},
        'calculated': {'key': 'calculated', 'type': 'MicrosoftGraphCalculatedColumn'},
        'choice': {'key': 'choice', 'type': 'MicrosoftGraphChoiceColumn'},
        'column_group': {'key': 'columnGroup', 'type': 'str'},
        'date_time': {'key': 'dateTime', 'type': 'MicrosoftGraphDateTimeColumn'},
        'default_value': {'key': 'defaultValue', 'type': 'MicrosoftGraphDefaultColumnValue'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'enforce_unique_values': {'key': 'enforceUniqueValues', 'type': 'bool'},
        'geolocation': {'key': 'geolocation', 'type': '{object}'},
        'hidden': {'key': 'hidden', 'type': 'bool'},
        'indexed': {'key': 'indexed', 'type': 'bool'},
        'lookup': {'key': 'lookup', 'type': 'MicrosoftGraphLookupColumn'},
        'name': {'key': 'name', 'type': 'str'},
        'number': {'key': 'number', 'type': 'MicrosoftGraphNumberColumn'},
        'person_or_group': {'key': 'personOrGroup', 'type': 'MicrosoftGraphPersonOrGroupColumn'},
        'read_only': {'key': 'readOnly', 'type': 'bool'},
        'required': {'key': 'required', 'type': 'bool'},
        'text': {'key': 'text', 'type': 'MicrosoftGraphTextColumn'},
        'locale': {'key': 'currency.locale', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphColumnDefinition, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.boolean = kwargs.get('boolean', None)
        self.calculated = kwargs.get('calculated', None)
        self.choice = kwargs.get('choice', None)
        self.column_group = kwargs.get('column_group', None)
        self.date_time = kwargs.get('date_time', None)
        self.default_value = kwargs.get('default_value', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.enforce_unique_values = kwargs.get('enforce_unique_values', None)
        self.geolocation = kwargs.get('geolocation', None)
        self.hidden = kwargs.get('hidden', None)
        self.indexed = kwargs.get('indexed', None)
        self.lookup = kwargs.get('lookup', None)
        self.name = kwargs.get('name', None)
        self.number = kwargs.get('number', None)
        self.person_or_group = kwargs.get('person_or_group', None)
        self.read_only = kwargs.get('read_only', None)
        self.required = kwargs.get('required', None)
        self.text = kwargs.get('text', None)
        self.locale = kwargs.get('locale', None)


class MicrosoftGraphColumnLink(MicrosoftGraphEntity):
    """columnLink.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: The name of the column  in this content type.
    :type name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphColumnLink, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)


class MicrosoftGraphCommand(MicrosoftGraphEntity):
    """command.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_service_name:
    :type app_service_name: str
    :param error:
    :type error: str
    :param package_family_name:
    :type package_family_name: str
    :param payload: payloadRequest.
    :type payload: dict[str, object]
    :param permission_ticket:
    :type permission_ticket: str
    :param post_back_uri:
    :type post_back_uri: str
    :param status:
    :type status: str
    :param type:
    :type type: str
    :param responsepayload: payloadResponse.
    :type responsepayload: ~files.models.MicrosoftGraphPayloadResponse
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_service_name': {'key': 'appServiceName', 'type': 'str'},
        'error': {'key': 'error', 'type': 'str'},
        'package_family_name': {'key': 'packageFamilyName', 'type': 'str'},
        'payload': {'key': 'payload', 'type': '{object}'},
        'permission_ticket': {'key': 'permissionTicket', 'type': 'str'},
        'post_back_uri': {'key': 'postBackUri', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'responsepayload': {'key': 'responsepayload', 'type': 'MicrosoftGraphPayloadResponse'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCommand, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_service_name = kwargs.get('app_service_name', None)
        self.error = kwargs.get('error', None)
        self.package_family_name = kwargs.get('package_family_name', None)
        self.payload = kwargs.get('payload', None)
        self.permission_ticket = kwargs.get('permission_ticket', None)
        self.post_back_uri = kwargs.get('post_back_uri', None)
        self.status = kwargs.get('status', None)
        self.type = kwargs.get('type', None)
        self.responsepayload = kwargs.get('responsepayload', None)


class MicrosoftGraphCommentAction(msrest.serialization.Model):
    """commentAction.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_reply: If true, this activity was a reply to an existing comment thread.
    :type is_reply: bool
    :param parent_author: identitySet.
    :type parent_author: ~files.models.MicrosoftGraphIdentitySet
    :param participants: The identities of the users participating in this comment thread.
    :type participants: list[~files.models.MicrosoftGraphIdentitySet]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_reply': {'key': 'isReply', 'type': 'bool'},
        'parent_author': {'key': 'parentAuthor', 'type': 'MicrosoftGraphIdentitySet'},
        'participants': {'key': 'participants', 'type': '[MicrosoftGraphIdentitySet]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCommentAction, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_reply = kwargs.get('is_reply', None)
        self.parent_author = kwargs.get('parent_author', None)
        self.participants = kwargs.get('participants', None)


class MicrosoftGraphCompanyDetail(msrest.serialization.Model):
    """companyDetail.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: physicalAddress.
    :type address: ~files.models.MicrosoftGraphPhysicalAddress
    :param department:
    :type department: str
    :param display_name:
    :type display_name: str
    :param office_location:
    :type office_location: str
    :param pronunciation:
    :type pronunciation: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'MicrosoftGraphPhysicalAddress'},
        'department': {'key': 'department', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'office_location': {'key': 'officeLocation', 'type': 'str'},
        'pronunciation': {'key': 'pronunciation', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCompanyDetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.department = kwargs.get('department', None)
        self.display_name = kwargs.get('display_name', None)
        self.office_location = kwargs.get('office_location', None)
        self.pronunciation = kwargs.get('pronunciation', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphConfigurationManagerClientEnabledFeatures(msrest.serialization.Model):
    """configuration Manager client enabled features.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param compliance_policy: Whether compliance policy is managed by Intune.
    :type compliance_policy: bool
    :param device_configuration: Whether device configuration is managed by Intune.
    :type device_configuration: bool
    :param endpoint_protection: Whether Endpoint Protection is managed by Intune.
    :type endpoint_protection: bool
    :param inventory: Whether inventory is managed by Intune.
    :type inventory: bool
    :param modern_apps: Whether modern application is managed by Intune.
    :type modern_apps: bool
    :param office_apps: Whether Office application is managed by Intune.
    :type office_apps: bool
    :param resource_access: Whether resource access is managed by Intune.
    :type resource_access: bool
    :param windows_update_for_business: Whether Windows Update for Business is managed by Intune.
    :type windows_update_for_business: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'compliance_policy': {'key': 'compliancePolicy', 'type': 'bool'},
        'device_configuration': {'key': 'deviceConfiguration', 'type': 'bool'},
        'endpoint_protection': {'key': 'endpointProtection', 'type': 'bool'},
        'inventory': {'key': 'inventory', 'type': 'bool'},
        'modern_apps': {'key': 'modernApps', 'type': 'bool'},
        'office_apps': {'key': 'officeApps', 'type': 'bool'},
        'resource_access': {'key': 'resourceAccess', 'type': 'bool'},
        'windows_update_for_business': {'key': 'windowsUpdateForBusiness', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConfigurationManagerClientEnabledFeatures, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.compliance_policy = kwargs.get('compliance_policy', None)
        self.device_configuration = kwargs.get('device_configuration', None)
        self.endpoint_protection = kwargs.get('endpoint_protection', None)
        self.inventory = kwargs.get('inventory', None)
        self.modern_apps = kwargs.get('modern_apps', None)
        self.office_apps = kwargs.get('office_apps', None)
        self.resource_access = kwargs.get('resource_access', None)
        self.windows_update_for_business = kwargs.get('windows_update_for_business', None)


class MicrosoftGraphConfigurationManagerClientHealthState(msrest.serialization.Model):
    """Configuration manager client health state.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error_code: Error code for failed state.
    :type error_code: int
    :param last_sync_date_time: Datetime for last sync with configuration manager management point.
    :type last_sync_date_time: ~datetime.datetime
    :param state:  Possible values include: "unknown", "installed", "healthy", "installFailed",
     "updateFailed", "communicationError".
    :type state: str or ~files.models.MicrosoftGraphConfigurationManagerClientState
    """

    _validation = {
        'error_code': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error_code': {'key': 'errorCode', 'type': 'int'},
        'last_sync_date_time': {'key': 'lastSyncDateTime', 'type': 'iso-8601'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConfigurationManagerClientHealthState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.error_code = kwargs.get('error_code', None)
        self.last_sync_date_time = kwargs.get('last_sync_date_time', None)
        self.state = kwargs.get('state', None)


class MicrosoftGraphConfigurationManagerClientInformation(msrest.serialization.Model):
    """Configuration Manager client information synced from SCCM.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param client_identifier: Configuration Manager Client Id from SCCM.
    :type client_identifier: str
    :param is_blocked: Configuration Manager Client blocked status from SCCM.
    :type is_blocked: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'client_identifier': {'key': 'clientIdentifier', 'type': 'str'},
        'is_blocked': {'key': 'isBlocked', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConfigurationManagerClientInformation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.client_identifier = kwargs.get('client_identifier', None)
        self.is_blocked = kwargs.get('is_blocked', None)


class MicrosoftGraphOutlookItem(MicrosoftGraphEntity):
    """outlookItem.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOutlookItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.categories = kwargs.get('categories', None)
        self.change_key = kwargs.get('change_key', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class MicrosoftGraphContact(MicrosoftGraphOutlookItem):
    """contact.

    :param id: Read-only.
    :type id: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param assistant_name: The name of the contact's assistant.
    :type assistant_name: str
    :param birthday: The contact's birthday. The Timestamp type represents date and time
     information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
     1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type birthday: ~datetime.datetime
    :param children: The names of the contact's children.
    :type children: list[str]
    :param company_name: The name of the contact's company.
    :type company_name: str
    :param department: The contact's department.
    :type department: str
    :param display_name: The contact's display name. You can specify the display name in a create
     or update operation. Note that later updates to other properties may cause an automatically
     generated value to overwrite the displayName value you have specified. To preserve a pre-
     existing value, always include it as displayName in an update operation.
    :type display_name: str
    :param email_addresses: The contact's email addresses.
    :type email_addresses: list[~files.models.MicrosoftGraphTypedEmailAddress]
    :param file_as: The name the contact is filed under.
    :type file_as: str
    :param flag: followupFlag.
    :type flag: ~files.models.MicrosoftGraphFollowupFlag
    :param gender:
    :type gender: str
    :param generation: The contact's generation.
    :type generation: str
    :param given_name: The contact's given name.
    :type given_name: str
    :param im_addresses: The contact's instant messaging (IM) addresses.
    :type im_addresses: list[str]
    :param initials: The contact's initials.
    :type initials: str
    :param is_favorite:
    :type is_favorite: bool
    :param job_title: The contact’s job title.
    :type job_title: str
    :param manager: The name of the contact's manager.
    :type manager: str
    :param middle_name: The contact's middle name.
    :type middle_name: str
    :param nick_name: The contact's nickname.
    :type nick_name: str
    :param office_location: The location of the contact's office.
    :type office_location: str
    :param parent_folder_id: The ID of the contact's parent folder.
    :type parent_folder_id: str
    :param personal_notes: The user's notes about the contact.
    :type personal_notes: str
    :param phones:
    :type phones: list[~files.models.MicrosoftGraphPhone]
    :param postal_addresses:
    :type postal_addresses: list[~files.models.MicrosoftGraphPhysicalAddress]
    :param profession: The contact's profession.
    :type profession: str
    :param spouse_name: The name of the contact's spouse/partner.
    :type spouse_name: str
    :param surname: The contact's surname.
    :type surname: str
    :param title: The contact's title.
    :type title: str
    :param websites:
    :type websites: list[~files.models.MicrosoftGraphWebsite]
    :param wedding_anniversary:
    :type wedding_anniversary: ~datetime.date
    :param yomi_company_name: The phonetic Japanese company name of the contact.
    :type yomi_company_name: str
    :param yomi_given_name: The phonetic Japanese given name (first name) of the contact.
    :type yomi_given_name: str
    :param yomi_surname: The phonetic Japanese surname (last name)  of the contact.
    :type yomi_surname: str
    :param extensions: The collection of open extensions defined for the contact. Read-only.
     Nullable.
    :type extensions: list[~files.models.MicrosoftGraphExtension]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the contact. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~files.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param photo: profilePhoto.
    :type photo: ~files.models.MicrosoftGraphProfilePhoto
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the contact. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~files.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'assistant_name': {'key': 'assistantName', 'type': 'str'},
        'birthday': {'key': 'birthday', 'type': 'iso-8601'},
        'children': {'key': 'children', 'type': '[str]'},
        'company_name': {'key': 'companyName', 'type': 'str'},
        'department': {'key': 'department', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email_addresses': {'key': 'emailAddresses', 'type': '[MicrosoftGraphTypedEmailAddress]'},
        'file_as': {'key': 'fileAs', 'type': 'str'},
        'flag': {'key': 'flag', 'type': 'MicrosoftGraphFollowupFlag'},
        'gender': {'key': 'gender', 'type': 'str'},
        'generation': {'key': 'generation', 'type': 'str'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'im_addresses': {'key': 'imAddresses', 'type': '[str]'},
        'initials': {'key': 'initials', 'type': 'str'},
        'is_favorite': {'key': 'isFavorite', 'type': 'bool'},
        'job_title': {'key': 'jobTitle', 'type': 'str'},
        'manager': {'key': 'manager', 'type': 'str'},
        'middle_name': {'key': 'middleName', 'type': 'str'},
        'nick_name': {'key': 'nickName', 'type': 'str'},
        'office_location': {'key': 'officeLocation', 'type': 'str'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'personal_notes': {'key': 'personalNotes', 'type': 'str'},
        'phones': {'key': 'phones', 'type': '[MicrosoftGraphPhone]'},
        'postal_addresses': {'key': 'postalAddresses', 'type': '[MicrosoftGraphPhysicalAddress]'},
        'profession': {'key': 'profession', 'type': 'str'},
        'spouse_name': {'key': 'spouseName', 'type': 'str'},
        'surname': {'key': 'surname', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'websites': {'key': 'websites', 'type': '[MicrosoftGraphWebsite]'},
        'wedding_anniversary': {'key': 'weddingAnniversary', 'type': 'date'},
        'yomi_company_name': {'key': 'yomiCompanyName', 'type': 'str'},
        'yomi_given_name': {'key': 'yomiGivenName', 'type': 'str'},
        'yomi_surname': {'key': 'yomiSurname', 'type': 'str'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphExtension]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'photo': {'key': 'photo', 'type': 'MicrosoftGraphProfilePhoto'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphContact, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.assistant_name = kwargs.get('assistant_name', None)
        self.birthday = kwargs.get('birthday', None)
        self.children = kwargs.get('children', None)
        self.company_name = kwargs.get('company_name', None)
        self.department = kwargs.get('department', None)
        self.display_name = kwargs.get('display_name', None)
        self.email_addresses = kwargs.get('email_addresses', None)
        self.file_as = kwargs.get('file_as', None)
        self.flag = kwargs.get('flag', None)
        self.gender = kwargs.get('gender', None)
        self.generation = kwargs.get('generation', None)
        self.given_name = kwargs.get('given_name', None)
        self.im_addresses = kwargs.get('im_addresses', None)
        self.initials = kwargs.get('initials', None)
        self.is_favorite = kwargs.get('is_favorite', None)
        self.job_title = kwargs.get('job_title', None)
        self.manager = kwargs.get('manager', None)
        self.middle_name = kwargs.get('middle_name', None)
        self.nick_name = kwargs.get('nick_name', None)
        self.office_location = kwargs.get('office_location', None)
        self.parent_folder_id = kwargs.get('parent_folder_id', None)
        self.personal_notes = kwargs.get('personal_notes', None)
        self.phones = kwargs.get('phones', None)
        self.postal_addresses = kwargs.get('postal_addresses', None)
        self.profession = kwargs.get('profession', None)
        self.spouse_name = kwargs.get('spouse_name', None)
        self.surname = kwargs.get('surname', None)
        self.title = kwargs.get('title', None)
        self.websites = kwargs.get('websites', None)
        self.wedding_anniversary = kwargs.get('wedding_anniversary', None)
        self.yomi_company_name = kwargs.get('yomi_company_name', None)
        self.yomi_given_name = kwargs.get('yomi_given_name', None)
        self.yomi_surname = kwargs.get('yomi_surname', None)
        self.extensions = kwargs.get('extensions', None)
        self.multi_value_extended_properties = kwargs.get('multi_value_extended_properties', None)
        self.photo = kwargs.get('photo', None)
        self.single_value_extended_properties = kwargs.get('single_value_extended_properties', None)


class MicrosoftGraphContactFolder(MicrosoftGraphEntity):
    """contactFolder.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The folder's display name.
    :type display_name: str
    :param parent_folder_id: The ID of the folder's parent folder.
    :type parent_folder_id: str
    :param well_known_name:
    :type well_known_name: str
    :param child_folders: The collection of child folders in the folder. Navigation property. Read-
     only. Nullable.
    :type child_folders: list[~files.models.MicrosoftGraphContactFolder]
    :param contacts: The contacts in the folder. Navigation property. Read-only. Nullable.
    :type contacts: list[~files.models.MicrosoftGraphContact]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the contactFolder. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~files.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the contactFolder. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~files.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'well_known_name': {'key': 'wellKnownName', 'type': 'str'},
        'child_folders': {'key': 'childFolders', 'type': '[MicrosoftGraphContactFolder]'},
        'contacts': {'key': 'contacts', 'type': '[MicrosoftGraphContact]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphContactFolder, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.parent_folder_id = kwargs.get('parent_folder_id', None)
        self.well_known_name = kwargs.get('well_known_name', None)
        self.child_folders = kwargs.get('child_folders', None)
        self.contacts = kwargs.get('contacts', None)
        self.multi_value_extended_properties = kwargs.get('multi_value_extended_properties', None)
        self.single_value_extended_properties = kwargs.get('single_value_extended_properties', None)


class MicrosoftGraphContentType(MicrosoftGraphEntity):
    """contentType.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description: The descriptive text for the item.
    :type description: str
    :param group: The name of the group this content type belongs to. Helps organize related
     content types.
    :type group: str
    :param hidden: Indicates whether the content type is hidden in the list's 'New' menu.
    :type hidden: bool
    :param name: The name of the content type.
    :type name: str
    :param order: contentTypeOrder.
    :type order: ~files.models.MicrosoftGraphContentTypeOrder
    :param parent_id: The unique identifier of the content type.
    :type parent_id: str
    :param read_only: If true, the content type cannot be modified unless this value is first set
     to false.
    :type read_only: bool
    :param sealed: If true, the content type cannot be modified by users or through push-down
     operations. Only site collection administrators can seal or unseal content types.
    :type sealed: bool
    :param column_links: The collection of columns that are required by this content type.
    :type column_links: list[~files.models.MicrosoftGraphColumnLink]
    :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
    :type drive_id: str
    :param drive_type: Identifies the type of drive. See [drive][] resource for values.
    :type drive_type: str
    :param id_inherited_from_id: Unique identifier of the item in the drive. Read-only.
    :type id_inherited_from_id: str
    :param name_inherited_from_name: The name of the item being referenced. Read-only.
    :type name_inherited_from_name: str
    :param path: Path that can be used to navigate to the item. Read-only.
    :type path: str
    :param share_id: A unique identifier for a shared resource that can be accessed via the
     [Shares][] API.
    :type share_id: str
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param site_id:
    :type site_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'group': {'key': 'group', 'type': 'str'},
        'hidden': {'key': 'hidden', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'order': {'key': 'order', 'type': 'MicrosoftGraphContentTypeOrder'},
        'parent_id': {'key': 'parentId', 'type': 'str'},
        'read_only': {'key': 'readOnly', 'type': 'bool'},
        'sealed': {'key': 'sealed', 'type': 'bool'},
        'column_links': {'key': 'columnLinks', 'type': '[MicrosoftGraphColumnLink]'},
        'drive_id': {'key': 'inheritedFrom.driveId', 'type': 'str'},
        'drive_type': {'key': 'inheritedFrom.driveType', 'type': 'str'},
        'id_inherited_from_id': {'key': 'inheritedFrom.id', 'type': 'str'},
        'name_inherited_from_name': {'key': 'inheritedFrom.name', 'type': 'str'},
        'path': {'key': 'inheritedFrom.path', 'type': 'str'},
        'share_id': {'key': 'inheritedFrom.shareId', 'type': 'str'},
        'sharepoint_ids': {'key': 'inheritedFrom.sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'site_id': {'key': 'inheritedFrom.siteId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphContentType, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.group = kwargs.get('group', None)
        self.hidden = kwargs.get('hidden', None)
        self.name = kwargs.get('name', None)
        self.order = kwargs.get('order', None)
        self.parent_id = kwargs.get('parent_id', None)
        self.read_only = kwargs.get('read_only', None)
        self.sealed = kwargs.get('sealed', None)
        self.column_links = kwargs.get('column_links', None)
        self.drive_id = kwargs.get('drive_id', None)
        self.drive_type = kwargs.get('drive_type', None)
        self.id_inherited_from_id = kwargs.get('id_inherited_from_id', None)
        self.name_inherited_from_name = kwargs.get('name_inherited_from_name', None)
        self.path = kwargs.get('path', None)
        self.share_id = kwargs.get('share_id', None)
        self.sharepoint_ids = kwargs.get('sharepoint_ids', None)
        self.site_id = kwargs.get('site_id', None)


class MicrosoftGraphContentTypeInfo(msrest.serialization.Model):
    """contentTypeInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: The id of the content type.
    :type id: str
    :param name: The name of the content type.
    :type name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphContentTypeInfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)


class MicrosoftGraphContentTypeOrder(msrest.serialization.Model):
    """contentTypeOrder.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param default: Whether this is the default Content Type.
    :type default: bool
    :param position: Specifies the position in which the Content Type appears in the selection UI.
    :type position: int
    """

    _validation = {
        'position': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'default': {'key': 'default', 'type': 'bool'},
        'position': {'key': 'position', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphContentTypeOrder, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.default = kwargs.get('default', None)
        self.position = kwargs.get('position', None)


class MicrosoftGraphConversation(MicrosoftGraphEntity):
    """conversation.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param has_attachments: Indicates whether any of the posts within this Conversation has at
     least one attachment.
    :type has_attachments: bool
    :param last_delivered_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_delivered_date_time: ~datetime.datetime
    :param preview: A short summary from the body of the latest post in this converstaion.
    :type preview: str
    :param topic: The topic of the conversation. This property can be set when the conversation is
     created, but it cannot be updated.
    :type topic: str
    :param unique_senders: All the users that sent a message to this Conversation.
    :type unique_senders: list[str]
    :param threads: A collection of all the conversation threads in the conversation. A navigation
     property. Read-only. Nullable.
    :type threads: list[~files.models.MicrosoftGraphConversationThread]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'last_delivered_date_time': {'key': 'lastDeliveredDateTime', 'type': 'iso-8601'},
        'preview': {'key': 'preview', 'type': 'str'},
        'topic': {'key': 'topic', 'type': 'str'},
        'unique_senders': {'key': 'uniqueSenders', 'type': '[str]'},
        'threads': {'key': 'threads', 'type': '[MicrosoftGraphConversationThread]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConversation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.has_attachments = kwargs.get('has_attachments', None)
        self.last_delivered_date_time = kwargs.get('last_delivered_date_time', None)
        self.preview = kwargs.get('preview', None)
        self.topic = kwargs.get('topic', None)
        self.unique_senders = kwargs.get('unique_senders', None)
        self.threads = kwargs.get('threads', None)


class MicrosoftGraphConversationMember(MicrosoftGraphEntity):
    """conversationMember.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The display name of the user.
    :type display_name: str
    :param roles: The roles for that user.
    :type roles: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'roles': {'key': 'roles', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConversationMember, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.roles = kwargs.get('roles', None)


class MicrosoftGraphConversationThread(MicrosoftGraphEntity):
    """conversationThread.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param cc_recipients: The Cc: recipients for the thread.
    :type cc_recipients: list[~files.models.MicrosoftGraphRecipient]
    :param has_attachments: Indicates whether any of the posts within this thread has at least one
     attachment.
    :type has_attachments: bool
    :param is_locked: Indicates if the thread is locked.
    :type is_locked: bool
    :param last_delivered_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_delivered_date_time: ~datetime.datetime
    :param preview: A short summary from the body of the latest post in this conversation.
    :type preview: str
    :param topic: The topic of the conversation. This property can be set when the conversation is
     created, but it cannot be updated.
    :type topic: str
    :param to_recipients: The To: recipients for the thread.
    :type to_recipients: list[~files.models.MicrosoftGraphRecipient]
    :param unique_senders: All the users that sent a message to this thread.
    :type unique_senders: list[str]
    :param posts: Read-only. Nullable.
    :type posts: list[~files.models.MicrosoftGraphPost]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'cc_recipients': {'key': 'ccRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'is_locked': {'key': 'isLocked', 'type': 'bool'},
        'last_delivered_date_time': {'key': 'lastDeliveredDateTime', 'type': 'iso-8601'},
        'preview': {'key': 'preview', 'type': 'str'},
        'topic': {'key': 'topic', 'type': 'str'},
        'to_recipients': {'key': 'toRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'unique_senders': {'key': 'uniqueSenders', 'type': '[str]'},
        'posts': {'key': 'posts', 'type': '[MicrosoftGraphPost]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConversationThread, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.cc_recipients = kwargs.get('cc_recipients', None)
        self.has_attachments = kwargs.get('has_attachments', None)
        self.is_locked = kwargs.get('is_locked', None)
        self.last_delivered_date_time = kwargs.get('last_delivered_date_time', None)
        self.preview = kwargs.get('preview', None)
        self.topic = kwargs.get('topic', None)
        self.to_recipients = kwargs.get('to_recipients', None)
        self.unique_senders = kwargs.get('unique_senders', None)
        self.posts = kwargs.get('posts', None)


class MicrosoftGraphCurrencyColumn(msrest.serialization.Model):
    """currencyColumn.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param locale: Specifies the locale from which to infer the currency symbol.
    :type locale: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'locale': {'key': 'locale', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCurrencyColumn, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.locale = kwargs.get('locale', None)


class MicrosoftGraphDataLossPreventionPolicy(MicrosoftGraphEntity):
    """dataLossPreventionPolicy.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name:
    :type name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDataLossPreventionPolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)


class MicrosoftGraphDateTimeColumn(msrest.serialization.Model):
    """dateTimeColumn.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_as: How the value should be presented in the UX. Must be one of default,
     friendly, or standard. See below for more details. If unspecified, treated as default.
    :type display_as: str
    :param format: Indicates whether the value should be presented as a date only or a date and
     time. Must be one of dateOnly or dateTime.
    :type format: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_as': {'key': 'displayAs', 'type': 'str'},
        'format': {'key': 'format', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDateTimeColumn, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_as = kwargs.get('display_as', None)
        self.format = kwargs.get('format', None)


class MicrosoftGraphDateTimeZone(msrest.serialization.Model):
    """dateTimeTimeZone.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param date_time: A single point of time in a combined date and time representation
     ({date}T{time}; for example, 2017-08-29T04:00:00.0000000).
    :type date_time: str
    :param time_zone: Represents a time zone, for example, 'Pacific Standard Time'. See below for
     more possible values.
    :type time_zone: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'date_time': {'key': 'dateTime', 'type': 'str'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDateTimeZone, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.date_time = kwargs.get('date_time', None)
        self.time_zone = kwargs.get('time_zone', None)


class MicrosoftGraphDefaultColumnValue(msrest.serialization.Model):
    """defaultColumnValue.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param formula: The formula used to compute the default value for this column.
    :type formula: str
    :param value: The direct value to use as the default value for this column.
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'formula': {'key': 'formula', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDefaultColumnValue, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.formula = kwargs.get('formula', None)
        self.value = kwargs.get('value', None)


class MicrosoftGraphDeleteAction(msrest.serialization.Model):
    """deleteAction.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: The name of the item that was deleted.
    :type name: str
    :param object_type: File or Folder, depending on the type of the deleted item.
    :type object_type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeleteAction, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)
        self.object_type = kwargs.get('object_type', None)


class MicrosoftGraphDeleted(msrest.serialization.Model):
    """deleted.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param state: Represents the state of the deleted item.
    :type state: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeleted, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.state = kwargs.get('state', None)


class MicrosoftGraphDetectedApp(MicrosoftGraphEntity):
    """A managed or unmanaged app that is installed on a managed device. Unmanaged apps will only appear for devices marked as corporate owned.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param device_count: The number of devices that have installed this application.
    :type device_count: int
    :param display_name: Name of the discovered application. Read-only.
    :type display_name: str
    :param size_in_byte: Discovered application size in bytes. Read-only.
    :type size_in_byte: long
    :param version: Version of the discovered application. Read-only.
    :type version: str
    :param managed_devices: The devices that have the discovered application installed.
    :type managed_devices: list[~files.models.MicrosoftGraphManagedDevice]
    """

    _validation = {
        'device_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'device_count': {'key': 'deviceCount', 'type': 'int'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'size_in_byte': {'key': 'sizeInByte', 'type': 'long'},
        'version': {'key': 'version', 'type': 'str'},
        'managed_devices': {'key': 'managedDevices', 'type': '[MicrosoftGraphManagedDevice]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDetectedApp, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.device_count = kwargs.get('device_count', None)
        self.display_name = kwargs.get('display_name', None)
        self.size_in_byte = kwargs.get('size_in_byte', None)
        self.version = kwargs.get('version', None)
        self.managed_devices = kwargs.get('managed_devices', None)


class MicrosoftGraphDirectoryObject(MicrosoftGraphEntity):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDirectoryObject, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.deleted_date_time = kwargs.get('deleted_date_time', None)


class MicrosoftGraphDevice(MicrosoftGraphDirectoryObject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_enabled: true if the account is enabled; otherwise, false. Required.
    :type account_enabled: bool
    :param alternative_security_ids: For internal use only. Not nullable.
    :type alternative_security_ids: list[~files.models.MicrosoftGraphAlternativeSecurityId]
    :param approximate_last_sign_in_date_time: The timestamp type represents date and time
     information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
     1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type approximate_last_sign_in_date_time: ~datetime.datetime
    :param compliance_expiration_date_time: The timestamp when the device is no longer deemed
     compliant. The timestamp type represents date and time information using ISO 8601 format and is
     always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this:
     '2014-01-01T00:00:00Z'. Read-only.
    :type compliance_expiration_date_time: ~datetime.datetime
    :param device_category:
    :type device_category: str
    :param device_id: Unique identifier set by Azure Device Registration Service at the time of
     registration.
    :type device_id: str
    :param device_metadata: For internal use only. Set to null.
    :type device_metadata: str
    :param device_ownership:
    :type device_ownership: str
    :param device_version: For internal use only.
    :type device_version: int
    :param display_name: The display name for the device. Required.
    :type display_name: str
    :param domain_name:
    :type domain_name: str
    :param enrollment_profile_name:
    :type enrollment_profile_name: str
    :param enrollment_type:
    :type enrollment_type: str
    :param extension_attributes: onPremisesExtensionAttributes.
    :type extension_attributes: ~files.models.MicrosoftGraphOnPremisesExtensionAttributes
    :param is_compliant: true if the device complies with Mobile Device Management (MDM) policies;
     otherwise, false. Read-only. This can only be updated by Intune for any device OS type or by an
     approved MDM app for Windows OS devices.
    :type is_compliant: bool
    :param is_managed: true if the device is managed by a Mobile Device Management (MDM) app;
     otherwise, false. This can only be updated by Intune for any device OS type or by an approved
     MDM app for Windows OS devices.
    :type is_managed: bool
    :param is_rooted:
    :type is_rooted: bool
    :param management_type:
    :type management_type: str
    :param on_premises_last_sync_date_time: The last time at which the object was synced with the
     on-premises directory. The Timestamp type represents date and time information using ISO 8601
     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z' Read-only.
    :type on_premises_last_sync_date_time: ~datetime.datetime
    :param on_premises_sync_enabled: true if this object is synced from an on-premises directory;
     false if this object was originally synced from an on-premises directory but is no longer
     synced; null if this object has never been synced from an on-premises directory (default).
     Read-only.
    :type on_premises_sync_enabled: bool
    :param operating_system: The type of operating system on the device. Required.
    :type operating_system: str
    :param operating_system_version: The version of the operating system on the device. Required.
    :type operating_system_version: str
    :param physical_ids: For internal use only. Not nullable.
    :type physical_ids: list[str]
    :param profile_type: The profile type of the device. Possible values:RegisteredDevice
     (default)SecureVMPrinterSharedIoT.
    :type profile_type: str
    :param registration_date_time:
    :type registration_date_time: ~datetime.datetime
    :param system_labels: List of labels applied to the device by the system.
    :type system_labels: list[str]
    :param trust_type: Type of trust for the joined device. Read-only. Possible values: Workplace -
     indicates bring your own personal devicesAzureAd - Cloud only joined devicesServerAd - on-
     premises domain joined devices joined to Azure AD. For more details, see Introduction to device
     management in Azure Active Directory.
    :type trust_type: str
    :param kind:
    :type kind: str
    :param manufacturer: Manufacturer of the device. Read-only.
    :type manufacturer: str
    :param model: Model of the device. Read-only.
    :type model: str
    :param name:
    :type name: str
    :param platform:
    :type platform: str
    :param status:
    :type status: str
    :param member_of: Groups that this group is a member of. HTTP Methods: GET (supported for all
     groups). Read-only. Nullable.
    :type member_of: list[~files.models.MicrosoftGraphDirectoryObject]
    :param registered_owners: The user that cloud joined the device or registered their personal
     device. The registered owner is set at the time of registration. Currently, there can be only
     one owner. Read-only. Nullable.
    :type registered_owners: list[~files.models.MicrosoftGraphDirectoryObject]
    :param registered_users: Collection of registered users of the device. For cloud joined devices
     and registered personal devices, registered users are set to the same value as registered
     owners at the time of registration. Read-only. Nullable.
    :type registered_users: list[~files.models.MicrosoftGraphDirectoryObject]
    :param transitive_member_of:
    :type transitive_member_of: list[~files.models.MicrosoftGraphDirectoryObject]
    :param extensions: The collection of open extensions defined for the device. Read-only.
     Nullable.
    :type extensions: list[~files.models.MicrosoftGraphExtension]
    :param commands:
    :type commands: list[~files.models.MicrosoftGraphCommand]
    """

    _validation = {
        'device_version': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_enabled': {'key': 'accountEnabled', 'type': 'bool'},
        'alternative_security_ids': {'key': 'alternativeSecurityIds', 'type': '[MicrosoftGraphAlternativeSecurityId]'},
        'approximate_last_sign_in_date_time': {'key': 'approximateLastSignInDateTime', 'type': 'iso-8601'},
        'compliance_expiration_date_time': {'key': 'complianceExpirationDateTime', 'type': 'iso-8601'},
        'device_category': {'key': 'deviceCategory', 'type': 'str'},
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'device_metadata': {'key': 'deviceMetadata', 'type': 'str'},
        'device_ownership': {'key': 'deviceOwnership', 'type': 'str'},
        'device_version': {'key': 'deviceVersion', 'type': 'int'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'domain_name': {'key': 'domainName', 'type': 'str'},
        'enrollment_profile_name': {'key': 'enrollmentProfileName', 'type': 'str'},
        'enrollment_type': {'key': 'enrollmentType', 'type': 'str'},
        'extension_attributes': {'key': 'extensionAttributes', 'type': 'MicrosoftGraphOnPremisesExtensionAttributes'},
        'is_compliant': {'key': 'isCompliant', 'type': 'bool'},
        'is_managed': {'key': 'isManaged', 'type': 'bool'},
        'is_rooted': {'key': 'isRooted', 'type': 'bool'},
        'management_type': {'key': 'managementType', 'type': 'str'},
        'on_premises_last_sync_date_time': {'key': 'onPremisesLastSyncDateTime', 'type': 'iso-8601'},
        'on_premises_sync_enabled': {'key': 'onPremisesSyncEnabled', 'type': 'bool'},
        'operating_system': {'key': 'operatingSystem', 'type': 'str'},
        'operating_system_version': {'key': 'operatingSystemVersion', 'type': 'str'},
        'physical_ids': {'key': 'physicalIds', 'type': '[str]'},
        'profile_type': {'key': 'profileType', 'type': 'str'},
        'registration_date_time': {'key': 'registrationDateTime', 'type': 'iso-8601'},
        'system_labels': {'key': 'systemLabels', 'type': '[str]'},
        'trust_type': {'key': 'trustType', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'platform': {'key': 'platform', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'member_of': {'key': 'memberOf', 'type': '[MicrosoftGraphDirectoryObject]'},
        'registered_owners': {'key': 'registeredOwners', 'type': '[MicrosoftGraphDirectoryObject]'},
        'registered_users': {'key': 'registeredUsers', 'type': '[MicrosoftGraphDirectoryObject]'},
        'transitive_member_of': {'key': 'transitiveMemberOf', 'type': '[MicrosoftGraphDirectoryObject]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphExtension]'},
        'commands': {'key': 'commands', 'type': '[MicrosoftGraphCommand]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDevice, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.account_enabled = kwargs.get('account_enabled', None)
        self.alternative_security_ids = kwargs.get('alternative_security_ids', None)
        self.approximate_last_sign_in_date_time = kwargs.get('approximate_last_sign_in_date_time', None)
        self.compliance_expiration_date_time = kwargs.get('compliance_expiration_date_time', None)
        self.device_category = kwargs.get('device_category', None)
        self.device_id = kwargs.get('device_id', None)
        self.device_metadata = kwargs.get('device_metadata', None)
        self.device_ownership = kwargs.get('device_ownership', None)
        self.device_version = kwargs.get('device_version', None)
        self.display_name = kwargs.get('display_name', None)
        self.domain_name = kwargs.get('domain_name', None)
        self.enrollment_profile_name = kwargs.get('enrollment_profile_name', None)
        self.enrollment_type = kwargs.get('enrollment_type', None)
        self.extension_attributes = kwargs.get('extension_attributes', None)
        self.is_compliant = kwargs.get('is_compliant', None)
        self.is_managed = kwargs.get('is_managed', None)
        self.is_rooted = kwargs.get('is_rooted', None)
        self.management_type = kwargs.get('management_type', None)
        self.on_premises_last_sync_date_time = kwargs.get('on_premises_last_sync_date_time', None)
        self.on_premises_sync_enabled = kwargs.get('on_premises_sync_enabled', None)
        self.operating_system = kwargs.get('operating_system', None)
        self.operating_system_version = kwargs.get('operating_system_version', None)
        self.physical_ids = kwargs.get('physical_ids', None)
        self.profile_type = kwargs.get('profile_type', None)
        self.registration_date_time = kwargs.get('registration_date_time', None)
        self.system_labels = kwargs.get('system_labels', None)
        self.trust_type = kwargs.get('trust_type', None)
        self.kind = kwargs.get('kind', None)
        self.manufacturer = kwargs.get('manufacturer', None)
        self.model = kwargs.get('model', None)
        self.name = kwargs.get('name', None)
        self.platform = kwargs.get('platform', None)
        self.status = kwargs.get('status', None)
        self.member_of = kwargs.get('member_of', None)
        self.registered_owners = kwargs.get('registered_owners', None)
        self.registered_users = kwargs.get('registered_users', None)
        self.transitive_member_of = kwargs.get('transitive_member_of', None)
        self.extensions = kwargs.get('extensions', None)
        self.commands = kwargs.get('commands', None)


class MicrosoftGraphDeviceActionResult(msrest.serialization.Model):
    """Device action result.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param action_name: Action name.
    :type action_name: str
    :param action_state:  Possible values include: "none", "pending", "canceled", "active", "done",
     "failed", "notSupported".
    :type action_state: str or ~files.models.MicrosoftGraphActionState
    :param last_updated_date_time: Time the action state was last updated.
    :type last_updated_date_time: ~datetime.datetime
    :param start_date_time: Time the action was initiated.
    :type start_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'action_name': {'key': 'actionName', 'type': 'str'},
        'action_state': {'key': 'actionState', 'type': 'str'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceActionResult, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.action_name = kwargs.get('action_name', None)
        self.action_state = kwargs.get('action_state', None)
        self.last_updated_date_time = kwargs.get('last_updated_date_time', None)
        self.start_date_time = kwargs.get('start_date_time', None)


class MicrosoftGraphDeviceAndAppManagementAssignmentTarget(msrest.serialization.Model):
    """Base type for assignment targets.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param device_and_app_management_assignment_filter_id: The Id of the filter for the target
     assignment.
    :type device_and_app_management_assignment_filter_id: str
    :param device_and_app_management_assignment_filter_type:  Possible values include: "none",
     "include".
    :type device_and_app_management_assignment_filter_type: str or
     ~files.models.MicrosoftGraphDeviceAndAppManagementAssignmentFilterType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'device_and_app_management_assignment_filter_id': {'key': 'deviceAndAppManagementAssignmentFilterId', 'type': 'str'},
        'device_and_app_management_assignment_filter_type': {'key': 'deviceAndAppManagementAssignmentFilterType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceAndAppManagementAssignmentTarget, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.device_and_app_management_assignment_filter_id = kwargs.get('device_and_app_management_assignment_filter_id', None)
        self.device_and_app_management_assignment_filter_type = kwargs.get('device_and_app_management_assignment_filter_type', None)


class MicrosoftGraphDeviceCategory(MicrosoftGraphEntity):
    """Device categories provides a way to organize your devices. Using device categories, company administrators can define their own categories that make sense to their company. These categories can then be applied to a device in the Intune Azure console or selected by a user during device enrollment. You can filter reports and create dynamic Azure Active Directory device groups based on device categories.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description: Optional description for the device category.
    :type description: str
    :param display_name: Display name for the device category.
    :type display_name: str
    :param role_scope_tag_ids: Optional role scope tags for the device category.
    :type role_scope_tag_ids: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'role_scope_tag_ids': {'key': 'roleScopeTagIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceCategory, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.role_scope_tag_ids = kwargs.get('role_scope_tag_ids', None)


class MicrosoftGraphDeviceCompliancePolicySettingState(msrest.serialization.Model):
    """Device Compilance Policy Setting State for a given device.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param current_value: Current value of setting on device.
    :type current_value: str
    :param error_code: Error code for the setting.
    :type error_code: long
    :param error_description: Error description.
    :type error_description: str
    :param instance_display_name: Name of setting instance that is being reported.
    :type instance_display_name: str
    :param setting: The setting that is being reported.
    :type setting: str
    :param setting_instance_id: SettingInstanceId.
    :type setting_instance_id: str
    :param setting_name: Localized/user friendly setting name that is being reported.
    :type setting_name: str
    :param sources: Contributing policies.
    :type sources: list[~files.models.MicrosoftGraphSettingSource]
    :param state:  Possible values include: "unknown", "notApplicable", "compliant", "remediated",
     "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~files.models.MicrosoftGraphComplianceStatus
    :param user_email: UserEmail.
    :type user_email: str
    :param user_id: UserId.
    :type user_id: str
    :param user_name: UserName.
    :type user_name: str
    :param user_principal_name: UserPrincipalName.
    :type user_principal_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'current_value': {'key': 'currentValue', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'long'},
        'error_description': {'key': 'errorDescription', 'type': 'str'},
        'instance_display_name': {'key': 'instanceDisplayName', 'type': 'str'},
        'setting': {'key': 'setting', 'type': 'str'},
        'setting_instance_id': {'key': 'settingInstanceId', 'type': 'str'},
        'setting_name': {'key': 'settingName', 'type': 'str'},
        'sources': {'key': 'sources', 'type': '[MicrosoftGraphSettingSource]'},
        'state': {'key': 'state', 'type': 'str'},
        'user_email': {'key': 'userEmail', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceCompliancePolicySettingState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.current_value = kwargs.get('current_value', None)
        self.error_code = kwargs.get('error_code', None)
        self.error_description = kwargs.get('error_description', None)
        self.instance_display_name = kwargs.get('instance_display_name', None)
        self.setting = kwargs.get('setting', None)
        self.setting_instance_id = kwargs.get('setting_instance_id', None)
        self.setting_name = kwargs.get('setting_name', None)
        self.sources = kwargs.get('sources', None)
        self.state = kwargs.get('state', None)
        self.user_email = kwargs.get('user_email', None)
        self.user_id = kwargs.get('user_id', None)
        self.user_name = kwargs.get('user_name', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class MicrosoftGraphDeviceCompliancePolicyState(MicrosoftGraphEntity):
    """Device Compliance Policy State for a given device.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The name of the policy for this policyBase.
    :type display_name: str
    :param platform_type:  Possible values include: "android", "androidForWork", "iOS", "macOS",
     "windowsPhone81", "windows81AndLater", "windows10AndLater", "androidWorkProfile",
     "windows10XProfile", "all".
    :type platform_type: str or ~files.models.MicrosoftGraphPolicyPlatformType
    :param setting_count: Count of how many setting a policy holds.
    :type setting_count: int
    :param setting_states:
    :type setting_states: list[~files.models.MicrosoftGraphDeviceCompliancePolicySettingState]
    :param state:  Possible values include: "unknown", "notApplicable", "compliant", "remediated",
     "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~files.models.MicrosoftGraphComplianceStatus
    :param user_id: User unique identifier, must be Guid.
    :type user_id: str
    :param user_principal_name: User Principal Name.
    :type user_principal_name: str
    :param version: The version of the policy.
    :type version: int
    """

    _validation = {
        'setting_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'version': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'platform_type': {'key': 'platformType', 'type': 'str'},
        'setting_count': {'key': 'settingCount', 'type': 'int'},
        'setting_states': {'key': 'settingStates', 'type': '[MicrosoftGraphDeviceCompliancePolicySettingState]'},
        'state': {'key': 'state', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceCompliancePolicyState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.platform_type = kwargs.get('platform_type', None)
        self.setting_count = kwargs.get('setting_count', None)
        self.setting_states = kwargs.get('setting_states', None)
        self.state = kwargs.get('state', None)
        self.user_id = kwargs.get('user_id', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphDeviceConfigurationSettingState(msrest.serialization.Model):
    """Device Configuration Setting State for a given device.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param current_value: Current value of setting on device.
    :type current_value: str
    :param error_code: Error code for the setting.
    :type error_code: long
    :param error_description: Error description.
    :type error_description: str
    :param instance_display_name: Name of setting instance that is being reported.
    :type instance_display_name: str
    :param setting: The setting that is being reported.
    :type setting: str
    :param setting_instance_id: SettingInstanceId.
    :type setting_instance_id: str
    :param setting_name: Localized/user friendly setting name that is being reported.
    :type setting_name: str
    :param sources: Contributing policies.
    :type sources: list[~files.models.MicrosoftGraphSettingSource]
    :param state:  Possible values include: "unknown", "notApplicable", "compliant", "remediated",
     "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~files.models.MicrosoftGraphComplianceStatus
    :param user_email: UserEmail.
    :type user_email: str
    :param user_id: UserId.
    :type user_id: str
    :param user_name: UserName.
    :type user_name: str
    :param user_principal_name: UserPrincipalName.
    :type user_principal_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'current_value': {'key': 'currentValue', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'long'},
        'error_description': {'key': 'errorDescription', 'type': 'str'},
        'instance_display_name': {'key': 'instanceDisplayName', 'type': 'str'},
        'setting': {'key': 'setting', 'type': 'str'},
        'setting_instance_id': {'key': 'settingInstanceId', 'type': 'str'},
        'setting_name': {'key': 'settingName', 'type': 'str'},
        'sources': {'key': 'sources', 'type': '[MicrosoftGraphSettingSource]'},
        'state': {'key': 'state', 'type': 'str'},
        'user_email': {'key': 'userEmail', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceConfigurationSettingState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.current_value = kwargs.get('current_value', None)
        self.error_code = kwargs.get('error_code', None)
        self.error_description = kwargs.get('error_description', None)
        self.instance_display_name = kwargs.get('instance_display_name', None)
        self.setting = kwargs.get('setting', None)
        self.setting_instance_id = kwargs.get('setting_instance_id', None)
        self.setting_name = kwargs.get('setting_name', None)
        self.sources = kwargs.get('sources', None)
        self.state = kwargs.get('state', None)
        self.user_email = kwargs.get('user_email', None)
        self.user_id = kwargs.get('user_id', None)
        self.user_name = kwargs.get('user_name', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class MicrosoftGraphDeviceConfigurationState(MicrosoftGraphEntity):
    """Device Configuration State for a given device.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The name of the policy for this policyBase.
    :type display_name: str
    :param platform_type:  Possible values include: "android", "androidForWork", "iOS", "macOS",
     "windowsPhone81", "windows81AndLater", "windows10AndLater", "androidWorkProfile",
     "windows10XProfile", "all".
    :type platform_type: str or ~files.models.MicrosoftGraphPolicyPlatformType
    :param setting_count: Count of how many setting a policy holds.
    :type setting_count: int
    :param setting_states:
    :type setting_states: list[~files.models.MicrosoftGraphDeviceConfigurationSettingState]
    :param state:  Possible values include: "unknown", "notApplicable", "compliant", "remediated",
     "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~files.models.MicrosoftGraphComplianceStatus
    :param user_id: User unique identifier, must be Guid.
    :type user_id: str
    :param user_principal_name: User Principal Name.
    :type user_principal_name: str
    :param version: The version of the policy.
    :type version: int
    """

    _validation = {
        'setting_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'version': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'platform_type': {'key': 'platformType', 'type': 'str'},
        'setting_count': {'key': 'settingCount', 'type': 'int'},
        'setting_states': {'key': 'settingStates', 'type': '[MicrosoftGraphDeviceConfigurationSettingState]'},
        'state': {'key': 'state', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceConfigurationState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.platform_type = kwargs.get('platform_type', None)
        self.setting_count = kwargs.get('setting_count', None)
        self.setting_states = kwargs.get('setting_states', None)
        self.state = kwargs.get('state', None)
        self.user_id = kwargs.get('user_id', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphDeviceEnrollmentConfiguration(MicrosoftGraphEntity):
    """The Base Class of Device Enrollment Configuration.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: Not yet documented.
    :type created_date_time: ~datetime.datetime
    :param description: Not yet documented.
    :type description: str
    :param display_name: Not yet documented.
    :type display_name: str
    :param last_modified_date_time: Not yet documented.
    :type last_modified_date_time: ~datetime.datetime
    :param priority: Not yet documented.
    :type priority: int
    :param role_scope_tag_ids: Optional role scope tags for the enrollment restrictions.
    :type role_scope_tag_ids: list[str]
    :param version: Not yet documented.
    :type version: int
    :param assignments: The list of group assignments for the device configuration profile.
    :type assignments: list[~files.models.MicrosoftGraphEnrollmentConfigurationAssignment]
    """

    _validation = {
        'priority': {'maximum': 2147483647, 'minimum': -2147483648},
        'version': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'priority': {'key': 'priority', 'type': 'int'},
        'role_scope_tag_ids': {'key': 'roleScopeTagIds', 'type': '[str]'},
        'version': {'key': 'version', 'type': 'int'},
        'assignments': {'key': 'assignments', 'type': '[MicrosoftGraphEnrollmentConfigurationAssignment]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceEnrollmentConfiguration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.priority = kwargs.get('priority', None)
        self.role_scope_tag_ids = kwargs.get('role_scope_tag_ids', None)
        self.version = kwargs.get('version', None)
        self.assignments = kwargs.get('assignments', None)


class MicrosoftGraphDeviceHealthAttestationState(msrest.serialization.Model):
    """deviceHealthAttestationState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param attestation_identity_key: TWhen an Attestation Identity Key (AIK) is present on a
     device, it indicates that the device has an endorsement key (EK) certificate.
    :type attestation_identity_key: str
    :param bit_locker_status: On or Off of BitLocker Drive Encryption.
    :type bit_locker_status: str
    :param boot_app_security_version: The security version number of the Boot Application.
    :type boot_app_security_version: str
    :param boot_debugging: When bootDebugging is enabled, the device is used in development and
     testing.
    :type boot_debugging: str
    :param boot_manager_security_version: The security version number of the Boot Application.
    :type boot_manager_security_version: str
    :param boot_manager_version: The version of the Boot Manager.
    :type boot_manager_version: str
    :param boot_revision_list_info: The Boot Revision List that was loaded during initial boot on
     the attested device.
    :type boot_revision_list_info: str
    :param code_integrity: When code integrity is enabled, code execution is restricted to
     integrity verified code.
    :type code_integrity: str
    :param code_integrity_check_version: The version of the Boot Manager.
    :type code_integrity_check_version: str
    :param code_integrity_policy: The Code Integrity policy that is controlling the security of the
     boot environment.
    :type code_integrity_policy: str
    :param content_namespace_url: The DHA report version. (Namespace version).
    :type content_namespace_url: str
    :param content_version: The HealthAttestation state schema version.
    :type content_version: str
    :param data_excution_policy: DEP Policy defines a set of hardware and software technologies
     that perform additional checks on memory.
    :type data_excution_policy: str
    :param device_health_attestation_status: The DHA report version. (Namespace version).
    :type device_health_attestation_status: str
    :param early_launch_anti_malware_driver_protection: ELAM provides protection for the computers
     in your network when they start up.
    :type early_launch_anti_malware_driver_protection: str
    :param health_attestation_supported_status: This attribute indicates if DHA is supported for
     the device.
    :type health_attestation_supported_status: str
    :param health_status_mismatch_info: This attribute appears if DHA-Service detects an integrity
     issue.
    :type health_status_mismatch_info: str
    :param issued_date_time: The DateTime when device was evaluated or issued to MDM.
    :type issued_date_time: ~datetime.datetime
    :param last_update_date_time: The Timestamp of the last update.
    :type last_update_date_time: str
    :param operating_system_kernel_debugging: When operatingSystemKernelDebugging is enabled, the
     device is used in development and testing.
    :type operating_system_kernel_debugging: str
    :param operating_system_rev_list_info: The Operating System Revision List that was loaded
     during initial boot on the attested device.
    :type operating_system_rev_list_info: str
    :param pcr0: The measurement that is captured in PCR[0].
    :type pcr0: str
    :param pcr_hash_algorithm: Informational attribute that identifies the HASH algorithm that was
     used by TPM.
    :type pcr_hash_algorithm: str
    :param reset_count: The number of times a PC device has hibernated or resumed.
    :type reset_count: long
    :param restart_count: The number of times a PC device has rebooted.
    :type restart_count: long
    :param safe_mode: Safe mode is a troubleshooting option for Windows that starts your computer
     in a limited state.
    :type safe_mode: str
    :param secure_boot: When Secure Boot is enabled, the core components must have the correct
     cryptographic signatures.
    :type secure_boot: str
    :param secure_boot_configuration_policy_finger_print: Fingerprint of the Custom Secure Boot
     Configuration Policy.
    :type secure_boot_configuration_policy_finger_print: str
    :param test_signing: When test signing is allowed, the device does not enforce signature
     validation during boot.
    :type test_signing: str
    :param tpm_version: The security version number of the Boot Application.
    :type tpm_version: str
    :param virtual_secure_mode: VSM is a container that protects high value assets from a
     compromised kernel.
    :type virtual_secure_mode: str
    :param windows_pe: Operating system running with limited services that is used to prepare a
     computer for Windows.
    :type windows_pe: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'attestation_identity_key': {'key': 'attestationIdentityKey', 'type': 'str'},
        'bit_locker_status': {'key': 'bitLockerStatus', 'type': 'str'},
        'boot_app_security_version': {'key': 'bootAppSecurityVersion', 'type': 'str'},
        'boot_debugging': {'key': 'bootDebugging', 'type': 'str'},
        'boot_manager_security_version': {'key': 'bootManagerSecurityVersion', 'type': 'str'},
        'boot_manager_version': {'key': 'bootManagerVersion', 'type': 'str'},
        'boot_revision_list_info': {'key': 'bootRevisionListInfo', 'type': 'str'},
        'code_integrity': {'key': 'codeIntegrity', 'type': 'str'},
        'code_integrity_check_version': {'key': 'codeIntegrityCheckVersion', 'type': 'str'},
        'code_integrity_policy': {'key': 'codeIntegrityPolicy', 'type': 'str'},
        'content_namespace_url': {'key': 'contentNamespaceUrl', 'type': 'str'},
        'content_version': {'key': 'contentVersion', 'type': 'str'},
        'data_excution_policy': {'key': 'dataExcutionPolicy', 'type': 'str'},
        'device_health_attestation_status': {'key': 'deviceHealthAttestationStatus', 'type': 'str'},
        'early_launch_anti_malware_driver_protection': {'key': 'earlyLaunchAntiMalwareDriverProtection', 'type': 'str'},
        'health_attestation_supported_status': {'key': 'healthAttestationSupportedStatus', 'type': 'str'},
        'health_status_mismatch_info': {'key': 'healthStatusMismatchInfo', 'type': 'str'},
        'issued_date_time': {'key': 'issuedDateTime', 'type': 'iso-8601'},
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'str'},
        'operating_system_kernel_debugging': {'key': 'operatingSystemKernelDebugging', 'type': 'str'},
        'operating_system_rev_list_info': {'key': 'operatingSystemRevListInfo', 'type': 'str'},
        'pcr0': {'key': 'pcr0', 'type': 'str'},
        'pcr_hash_algorithm': {'key': 'pcrHashAlgorithm', 'type': 'str'},
        'reset_count': {'key': 'resetCount', 'type': 'long'},
        'restart_count': {'key': 'restartCount', 'type': 'long'},
        'safe_mode': {'key': 'safeMode', 'type': 'str'},
        'secure_boot': {'key': 'secureBoot', 'type': 'str'},
        'secure_boot_configuration_policy_finger_print': {'key': 'secureBootConfigurationPolicyFingerPrint', 'type': 'str'},
        'test_signing': {'key': 'testSigning', 'type': 'str'},
        'tpm_version': {'key': 'tpmVersion', 'type': 'str'},
        'virtual_secure_mode': {'key': 'virtualSecureMode', 'type': 'str'},
        'windows_pe': {'key': 'windowsPE', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceHealthAttestationState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.attestation_identity_key = kwargs.get('attestation_identity_key', None)
        self.bit_locker_status = kwargs.get('bit_locker_status', None)
        self.boot_app_security_version = kwargs.get('boot_app_security_version', None)
        self.boot_debugging = kwargs.get('boot_debugging', None)
        self.boot_manager_security_version = kwargs.get('boot_manager_security_version', None)
        self.boot_manager_version = kwargs.get('boot_manager_version', None)
        self.boot_revision_list_info = kwargs.get('boot_revision_list_info', None)
        self.code_integrity = kwargs.get('code_integrity', None)
        self.code_integrity_check_version = kwargs.get('code_integrity_check_version', None)
        self.code_integrity_policy = kwargs.get('code_integrity_policy', None)
        self.content_namespace_url = kwargs.get('content_namespace_url', None)
        self.content_version = kwargs.get('content_version', None)
        self.data_excution_policy = kwargs.get('data_excution_policy', None)
        self.device_health_attestation_status = kwargs.get('device_health_attestation_status', None)
        self.early_launch_anti_malware_driver_protection = kwargs.get('early_launch_anti_malware_driver_protection', None)
        self.health_attestation_supported_status = kwargs.get('health_attestation_supported_status', None)
        self.health_status_mismatch_info = kwargs.get('health_status_mismatch_info', None)
        self.issued_date_time = kwargs.get('issued_date_time', None)
        self.last_update_date_time = kwargs.get('last_update_date_time', None)
        self.operating_system_kernel_debugging = kwargs.get('operating_system_kernel_debugging', None)
        self.operating_system_rev_list_info = kwargs.get('operating_system_rev_list_info', None)
        self.pcr0 = kwargs.get('pcr0', None)
        self.pcr_hash_algorithm = kwargs.get('pcr_hash_algorithm', None)
        self.reset_count = kwargs.get('reset_count', None)
        self.restart_count = kwargs.get('restart_count', None)
        self.safe_mode = kwargs.get('safe_mode', None)
        self.secure_boot = kwargs.get('secure_boot', None)
        self.secure_boot_configuration_policy_finger_print = kwargs.get('secure_boot_configuration_policy_finger_print', None)
        self.test_signing = kwargs.get('test_signing', None)
        self.tpm_version = kwargs.get('tpm_version', None)
        self.virtual_secure_mode = kwargs.get('virtual_secure_mode', None)
        self.windows_pe = kwargs.get('windows_pe', None)


class MicrosoftGraphDeviceKey(msrest.serialization.Model):
    """deviceKey.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param device_id:
    :type device_id: str
    :param key_material:
    :type key_material: bytes
    :param key_type:
    :type key_type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'key_material': {'key': 'keyMaterial', 'type': 'base64'},
        'key_type': {'key': 'keyType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceKey, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.device_id = kwargs.get('device_id', None)
        self.key_material = kwargs.get('key_material', None)
        self.key_type = kwargs.get('key_type', None)


class MicrosoftGraphDeviceLogCollectionResponse(MicrosoftGraphEntity):
    """Windows Log Collection request entity.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error_code: The error code, if any. Valid values -9.22337203685478E+18 to
     9.22337203685478E+18.
    :type error_code: long
    :param expiration_date_time_utc: The DateTime of the expiration of the logs.
    :type expiration_date_time_utc: ~datetime.datetime
    :param initiated_by_user_principal_name: The UPN for who initiated the request.
    :type initiated_by_user_principal_name: str
    :param managed_device_id: The device Id.
    :type managed_device_id: str
    :param received_date_time_utc: The DateTime the request was received.
    :type received_date_time_utc: ~datetime.datetime
    :param requested_date_time_utc: The DateTime of the request.
    :type requested_date_time_utc: ~datetime.datetime
    :param size: The size of the logs. Valid values -1.79769313486232E+308 to
     1.79769313486232E+308.
    :type size: float
    :param status: The status of the log collection request.
    :type status: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'error_code': {'key': 'errorCode', 'type': 'long'},
        'expiration_date_time_utc': {'key': 'expirationDateTimeUTC', 'type': 'iso-8601'},
        'initiated_by_user_principal_name': {'key': 'initiatedByUserPrincipalName', 'type': 'str'},
        'managed_device_id': {'key': 'managedDeviceId', 'type': 'str'},
        'received_date_time_utc': {'key': 'receivedDateTimeUTC', 'type': 'iso-8601'},
        'requested_date_time_utc': {'key': 'requestedDateTimeUTC', 'type': 'iso-8601'},
        'size': {'key': 'size', 'type': 'float'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceLogCollectionResponse, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.error_code = kwargs.get('error_code', None)
        self.expiration_date_time_utc = kwargs.get('expiration_date_time_utc', None)
        self.initiated_by_user_principal_name = kwargs.get('initiated_by_user_principal_name', None)
        self.managed_device_id = kwargs.get('managed_device_id', None)
        self.received_date_time_utc = kwargs.get('received_date_time_utc', None)
        self.requested_date_time_utc = kwargs.get('requested_date_time_utc', None)
        self.size = kwargs.get('size', None)
        self.status = kwargs.get('status', None)


class MicrosoftGraphDeviceManagementTroubleshootingErrorDetails(msrest.serialization.Model):
    """Object containing detailed information about the error and its remediation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param context:
    :type context: str
    :param failure:
    :type failure: str
    :param failure_details: The detailed description of what went wrong.
    :type failure_details: str
    :param remediation: The detailed description of how to remediate this issue.
    :type remediation: str
    :param resources: Links to helpful documentation about this failure.
    :type resources: list[~files.models.MicrosoftGraphDeviceManagementTroubleshootingErrorResource]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'context': {'key': 'context', 'type': 'str'},
        'failure': {'key': 'failure', 'type': 'str'},
        'failure_details': {'key': 'failureDetails', 'type': 'str'},
        'remediation': {'key': 'remediation', 'type': 'str'},
        'resources': {'key': 'resources', 'type': '[MicrosoftGraphDeviceManagementTroubleshootingErrorResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceManagementTroubleshootingErrorDetails, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.context = kwargs.get('context', None)
        self.failure = kwargs.get('failure', None)
        self.failure_details = kwargs.get('failure_details', None)
        self.remediation = kwargs.get('remediation', None)
        self.resources = kwargs.get('resources', None)


class MicrosoftGraphDeviceManagementTroubleshootingErrorResource(msrest.serialization.Model):
    """Object representing a link to troubleshooting information, the link could be to the Azure Portal or a Microsoft doc.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param link: The link to the web resource. Can contain any of the following formatters:
     {{UPN}}, {{DeviceGUID}}, {{UserGUID}}.
    :type link: str
    :param text:
    :type text: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'link': {'key': 'link', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceManagementTroubleshootingErrorResource, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.link = kwargs.get('link', None)
        self.text = kwargs.get('text', None)


class MicrosoftGraphDeviceManagementTroubleshootingEvent(MicrosoftGraphEntity):
    """Event representing an general failure.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param additional_information: A set of string key and string value pairs which provides
     additional information on the Troubleshooting event.
    :type additional_information: list[~files.models.MicrosoftGraphKeyValuePair]
    :param correlation_id: Id used for tracing the failure in the service.
    :type correlation_id: str
    :param event_date_time: Time when the event occurred .
    :type event_date_time: ~datetime.datetime
    :param event_name: Event Name corresponding to the Troubleshooting Event. It is an Optional
     field.
    :type event_name: str
    :param troubleshooting_error_details: Object containing detailed information about the error
     and its remediation.
    :type troubleshooting_error_details:
     ~files.models.MicrosoftGraphDeviceManagementTroubleshootingErrorDetails
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'additional_information': {'key': 'additionalInformation', 'type': '[MicrosoftGraphKeyValuePair]'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'event_date_time': {'key': 'eventDateTime', 'type': 'iso-8601'},
        'event_name': {'key': 'eventName', 'type': 'str'},
        'troubleshooting_error_details': {'key': 'troubleshootingErrorDetails', 'type': 'MicrosoftGraphDeviceManagementTroubleshootingErrorDetails'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceManagementTroubleshootingEvent, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_information = kwargs.get('additional_information', None)
        self.correlation_id = kwargs.get('correlation_id', None)
        self.event_date_time = kwargs.get('event_date_time', None)
        self.event_name = kwargs.get('event_name', None)
        self.troubleshooting_error_details = kwargs.get('troubleshooting_error_details', None)


class MicrosoftGraphDirectorySetting(MicrosoftGraphEntity):
    """directorySetting.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param template_id:
    :type template_id: str
    :param values:
    :type values: list[~files.models.MicrosoftGraphSettingValue]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'template_id': {'key': 'templateId', 'type': 'str'},
        'values': {'key': 'values', 'type': '[MicrosoftGraphSettingValue]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDirectorySetting, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.template_id = kwargs.get('template_id', None)
        self.values = kwargs.get('values', None)


class MicrosoftGraphDrive(MicrosoftGraphBaseItem):
    """drive.

    :param id: Read-only.
    :type id: str
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~files.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~files.models.MicrosoftGraphUser
    :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
    :type drive_id: str
    :param id_parent_reference_id: Unique identifier of the item in the drive. Read-only.
    :type id_parent_reference_id: str
    :param name_parent_reference_name: The name of the item being referenced. Read-only.
    :type name_parent_reference_name: str
    :param path: Path that can be used to navigate to the item. Read-only.
    :type path: str
    :param share_id: A unique identifier for a shared resource that can be accessed via the
     [Shares][] API.
    :type share_id: str
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param site_id:
    :type site_id: str
    :param application_last_modified_by_application: identity.
    :type application_last_modified_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_last_modified_by_device: identity.
    :type device_last_modified_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_last_modified_by_user: identity.
    :type user_last_modified_by_user: ~files.models.MicrosoftGraphIdentity
    :param application_created_by_application: identity.
    :type application_created_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_created_by_device: identity.
    :type device_created_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_created_by_user: identity.
    :type user_created_by_user: ~files.models.MicrosoftGraphIdentity
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param drive_type: Describes the type of drive represented by this resource. OneDrive personal
     drives will return personal. OneDrive for Business will return business. SharePoint document
     libraries will return documentLibrary. Read-only.
    :type drive_type: str
    :param share_point_ids: sharepointIds.
    :type share_point_ids: ~files.models.MicrosoftGraphSharepointIds
    :param system: systemFacet.
    :type system: dict[str, object]
    :param activities:
    :type activities: list[~files.models.MicrosoftGraphItemActivityOld]
    :param bundles:
    :type bundles: list[~files.models.MicrosoftGraphDriveItem]
    :param following: The list of items the user is following. Only in OneDrive for Business.
    :type following: list[~files.models.MicrosoftGraphDriveItem]
    :param items: All items contained in the drive. Read-only. Nullable.
    :type items: list[~files.models.MicrosoftGraphDriveItem]
    :param root: driveItem.
    :type root: ~files.models.MicrosoftGraphDriveItem
    :param special: Collection of common folders available in OneDrive. Read-only. Nullable.
    :type special: list[~files.models.MicrosoftGraphDriveItem]
    :param id_list_id: Read-only.
    :type id_list_id: str
    :param created_date_time_list_created_date_time: Date and time of item creation. Read-only.
    :type created_date_time_list_created_date_time: ~datetime.datetime
    :param description_list_description: Provides a user-visible description of the item. Optional.
    :type description_list_description: str
    :param e_tag_list_e_tag: ETag for the item. Read-only.
    :type e_tag_list_e_tag: str
    :param last_modified_date_time_list_last_modified_date_time: Date and time the item was last
     modified. Read-only.
    :type last_modified_date_time_list_last_modified_date_time: ~datetime.datetime
    :param name_list_name: The name of the item. Read-write.
    :type name_list_name: str
    :param web_url_list_web_url: URL that displays the resource in the browser. Read-only.
    :type web_url_list_web_url: str
    :param created_by_user_list_created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user_list_created_by_user: ~files.models.MicrosoftGraphUser
    :param last_modified_by_user_list_last_modified_by_user: Represents an Azure Active Directory
     user object.
    :type last_modified_by_user_list_last_modified_by_user: ~files.models.MicrosoftGraphUser
    :param drive_id_list_parent_reference_drive_id: Unique identifier of the drive instance that
     contains the item. Read-only.
    :type drive_id_list_parent_reference_drive_id: str
    :param drive_type_list_parent_reference_drive_type: Identifies the type of drive. See [drive][]
     resource for values.
    :type drive_type_list_parent_reference_drive_type: str
    :param id_list_parent_reference_id: Unique identifier of the item in the drive. Read-only.
    :type id_list_parent_reference_id: str
    :param name_list_parent_reference_name: The name of the item being referenced. Read-only.
    :type name_list_parent_reference_name: str
    :param path_list_parent_reference_path: Path that can be used to navigate to the item. Read-
     only.
    :type path_list_parent_reference_path: str
    :param share_id_list_parent_reference_share_id: A unique identifier for a shared resource that
     can be accessed via the [Shares][] API.
    :type share_id_list_parent_reference_share_id: str
    :param sharepoint_ids_list_parent_reference_sharepoint_ids: sharepointIds.
    :type sharepoint_ids_list_parent_reference_sharepoint_ids:
     ~files.models.MicrosoftGraphSharepointIds
    :param site_id_list_parent_reference_site_id:
    :type site_id_list_parent_reference_site_id: str
    :param application_list_last_modified_by_application: identity.
    :type application_list_last_modified_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_list_last_modified_by_device: identity.
    :type device_list_last_modified_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_list_last_modified_by_user: identity.
    :type user_list_last_modified_by_user: ~files.models.MicrosoftGraphIdentity
    :param application_list_created_by_application: identity.
    :type application_list_created_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_list_created_by_device: identity.
    :type device_list_created_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_list_created_by_user: identity.
    :type user_list_created_by_user: ~files.models.MicrosoftGraphIdentity
    :param display_name: The displayable title of the list.
    :type display_name: str
    :param list: listInfo.
    :type list: ~files.models.MicrosoftGraphListInfo
    :param sharepoint_ids_list_sharepoint_ids: sharepointIds.
    :type sharepoint_ids_list_sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param system_list_system: systemFacet.
    :type system_list_system: dict[str, object]
    :param activities_list_activities:
    :type activities_list_activities: list[~files.models.MicrosoftGraphItemActivityOld]
    :param columns: The collection of field definitions for this list.
    :type columns: list[~files.models.MicrosoftGraphColumnDefinition]
    :param content_types: The collection of content types present in this list.
    :type content_types: list[~files.models.MicrosoftGraphContentType]
    :param drive: drive.
    :type drive: ~files.models.MicrosoftGraphDrive
    :param items_list_items: All items contained in the list.
    :type items_list_items: list[~files.models.MicrosoftGraphListItem]
    :param subscriptions: The set of subscriptions on the list.
    :type subscriptions: list[~files.models.MicrosoftGraphSubscription]
    :param deleted: Total space consumed by files in the recycle bin, in bytes. Read-only.
    :type deleted: long
    :param remaining: Total space remaining before reaching the quota limit, in bytes. Read-only.
    :type remaining: long
    :param state: Enumeration value that indicates the state of the storage space. Read-only.
    :type state: str
    :param storage_plan_information: storagePlanInformation.
    :type storage_plan_information: ~files.models.MicrosoftGraphStoragePlanInformation
    :param total: Total allowed storage space, in bytes. Read-only.
    :type total: long
    :param used: Total space used, in bytes. Read-only.
    :type used: long
    :param application_owner_application: identity.
    :type application_owner_application: ~files.models.MicrosoftGraphIdentity
    :param device_owner_device: identity.
    :type device_owner_device: ~files.models.MicrosoftGraphIdentity
    :param user_owner_user: identity.
    :type user_owner_user: ~files.models.MicrosoftGraphIdentity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'drive_id': {'key': 'parentReference.driveId', 'type': 'str'},
        'id_parent_reference_id': {'key': 'parentReference.id', 'type': 'str'},
        'name_parent_reference_name': {'key': 'parentReference.name', 'type': 'str'},
        'path': {'key': 'parentReference.path', 'type': 'str'},
        'share_id': {'key': 'parentReference.shareId', 'type': 'str'},
        'sharepoint_ids': {'key': 'parentReference.sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'site_id': {'key': 'parentReference.siteId', 'type': 'str'},
        'application_last_modified_by_application': {'key': 'lastModifiedBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_last_modified_by_device': {'key': 'lastModifiedBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_last_modified_by_user': {'key': 'lastModifiedBy.user', 'type': 'MicrosoftGraphIdentity'},
        'application_created_by_application': {'key': 'createdBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_created_by_device': {'key': 'createdBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_created_by_user': {'key': 'createdBy.user', 'type': 'MicrosoftGraphIdentity'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'drive_type': {'key': 'driveType', 'type': 'str'},
        'share_point_ids': {'key': 'sharePointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'system': {'key': 'system', 'type': '{object}'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphItemActivityOld]'},
        'bundles': {'key': 'bundles', 'type': '[MicrosoftGraphDriveItem]'},
        'following': {'key': 'following', 'type': '[MicrosoftGraphDriveItem]'},
        'items': {'key': 'items', 'type': '[MicrosoftGraphDriveItem]'},
        'root': {'key': 'root', 'type': 'MicrosoftGraphDriveItem'},
        'special': {'key': 'special', 'type': '[MicrosoftGraphDriveItem]'},
        'id_list_id': {'key': 'list.id', 'type': 'str'},
        'created_date_time_list_created_date_time': {'key': 'list.createdDateTime', 'type': 'iso-8601'},
        'description_list_description': {'key': 'list.description', 'type': 'str'},
        'e_tag_list_e_tag': {'key': 'list.eTag', 'type': 'str'},
        'last_modified_date_time_list_last_modified_date_time': {'key': 'list.lastModifiedDateTime', 'type': 'iso-8601'},
        'name_list_name': {'key': 'list.name', 'type': 'str'},
        'web_url_list_web_url': {'key': 'list.webUrl', 'type': 'str'},
        'created_by_user_list_created_by_user': {'key': 'list.createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user_list_last_modified_by_user': {'key': 'list.lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'drive_id_list_parent_reference_drive_id': {'key': 'list.parentReference.driveId', 'type': 'str'},
        'drive_type_list_parent_reference_drive_type': {'key': 'list.parentReference.driveType', 'type': 'str'},
        'id_list_parent_reference_id': {'key': 'list.parentReference.id', 'type': 'str'},
        'name_list_parent_reference_name': {'key': 'list.parentReference.name', 'type': 'str'},
        'path_list_parent_reference_path': {'key': 'list.parentReference.path', 'type': 'str'},
        'share_id_list_parent_reference_share_id': {'key': 'list.parentReference.shareId', 'type': 'str'},
        'sharepoint_ids_list_parent_reference_sharepoint_ids': {'key': 'list.parentReference.sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'site_id_list_parent_reference_site_id': {'key': 'list.parentReference.siteId', 'type': 'str'},
        'application_list_last_modified_by_application': {'key': 'list.lastModifiedBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_list_last_modified_by_device': {'key': 'list.lastModifiedBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_list_last_modified_by_user': {'key': 'list.lastModifiedBy.user', 'type': 'MicrosoftGraphIdentity'},
        'application_list_created_by_application': {'key': 'list.createdBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_list_created_by_device': {'key': 'list.createdBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_list_created_by_user': {'key': 'list.createdBy.user', 'type': 'MicrosoftGraphIdentity'},
        'display_name': {'key': 'list.displayName', 'type': 'str'},
        'list': {'key': 'list.list', 'type': 'MicrosoftGraphListInfo'},
        'sharepoint_ids_list_sharepoint_ids': {'key': 'list.sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'system_list_system': {'key': 'list.system', 'type': '{object}'},
        'activities_list_activities': {'key': 'list.activities', 'type': '[MicrosoftGraphItemActivityOld]'},
        'columns': {'key': 'list.columns', 'type': '[MicrosoftGraphColumnDefinition]'},
        'content_types': {'key': 'list.contentTypes', 'type': '[MicrosoftGraphContentType]'},
        'drive': {'key': 'list.drive', 'type': 'MicrosoftGraphDrive'},
        'items_list_items': {'key': 'list.items', 'type': '[MicrosoftGraphListItem]'},
        'subscriptions': {'key': 'list.subscriptions', 'type': '[MicrosoftGraphSubscription]'},
        'deleted': {'key': 'quota.deleted', 'type': 'long'},
        'remaining': {'key': 'quota.remaining', 'type': 'long'},
        'state': {'key': 'quota.state', 'type': 'str'},
        'storage_plan_information': {'key': 'quota.storagePlanInformation', 'type': 'MicrosoftGraphStoragePlanInformation'},
        'total': {'key': 'quota.total', 'type': 'long'},
        'used': {'key': 'quota.used', 'type': 'long'},
        'application_owner_application': {'key': 'owner.application', 'type': 'MicrosoftGraphIdentity'},
        'device_owner_device': {'key': 'owner.device', 'type': 'MicrosoftGraphIdentity'},
        'user_owner_user': {'key': 'owner.user', 'type': 'MicrosoftGraphIdentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDrive, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.drive_type = kwargs.get('drive_type', None)
        self.share_point_ids = kwargs.get('share_point_ids', None)
        self.system = kwargs.get('system', None)
        self.activities = kwargs.get('activities', None)
        self.bundles = kwargs.get('bundles', None)
        self.following = kwargs.get('following', None)
        self.items = kwargs.get('items', None)
        self.root = kwargs.get('root', None)
        self.special = kwargs.get('special', None)
        self.id_list_id = kwargs.get('id_list_id', None)
        self.created_date_time_list_created_date_time = kwargs.get('created_date_time_list_created_date_time', None)
        self.description_list_description = kwargs.get('description_list_description', None)
        self.e_tag_list_e_tag = kwargs.get('e_tag_list_e_tag', None)
        self.last_modified_date_time_list_last_modified_date_time = kwargs.get('last_modified_date_time_list_last_modified_date_time', None)
        self.name_list_name = kwargs.get('name_list_name', None)
        self.web_url_list_web_url = kwargs.get('web_url_list_web_url', None)
        self.created_by_user_list_created_by_user = kwargs.get('created_by_user_list_created_by_user', None)
        self.last_modified_by_user_list_last_modified_by_user = kwargs.get('last_modified_by_user_list_last_modified_by_user', None)
        self.drive_id_list_parent_reference_drive_id = kwargs.get('drive_id_list_parent_reference_drive_id', None)
        self.drive_type_list_parent_reference_drive_type = kwargs.get('drive_type_list_parent_reference_drive_type', None)
        self.id_list_parent_reference_id = kwargs.get('id_list_parent_reference_id', None)
        self.name_list_parent_reference_name = kwargs.get('name_list_parent_reference_name', None)
        self.path_list_parent_reference_path = kwargs.get('path_list_parent_reference_path', None)
        self.share_id_list_parent_reference_share_id = kwargs.get('share_id_list_parent_reference_share_id', None)
        self.sharepoint_ids_list_parent_reference_sharepoint_ids = kwargs.get('sharepoint_ids_list_parent_reference_sharepoint_ids', None)
        self.site_id_list_parent_reference_site_id = kwargs.get('site_id_list_parent_reference_site_id', None)
        self.application_list_last_modified_by_application = kwargs.get('application_list_last_modified_by_application', None)
        self.device_list_last_modified_by_device = kwargs.get('device_list_last_modified_by_device', None)
        self.user_list_last_modified_by_user = kwargs.get('user_list_last_modified_by_user', None)
        self.application_list_created_by_application = kwargs.get('application_list_created_by_application', None)
        self.device_list_created_by_device = kwargs.get('device_list_created_by_device', None)
        self.user_list_created_by_user = kwargs.get('user_list_created_by_user', None)
        self.display_name = kwargs.get('display_name', None)
        self.list = kwargs.get('list', None)
        self.sharepoint_ids_list_sharepoint_ids = kwargs.get('sharepoint_ids_list_sharepoint_ids', None)
        self.system_list_system = kwargs.get('system_list_system', None)
        self.activities_list_activities = kwargs.get('activities_list_activities', None)
        self.columns = kwargs.get('columns', None)
        self.content_types = kwargs.get('content_types', None)
        self.drive = kwargs.get('drive', None)
        self.items_list_items = kwargs.get('items_list_items', None)
        self.subscriptions = kwargs.get('subscriptions', None)
        self.deleted = kwargs.get('deleted', None)
        self.remaining = kwargs.get('remaining', None)
        self.state = kwargs.get('state', None)
        self.storage_plan_information = kwargs.get('storage_plan_information', None)
        self.total = kwargs.get('total', None)
        self.used = kwargs.get('used', None)
        self.application_owner_application = kwargs.get('application_owner_application', None)
        self.device_owner_device = kwargs.get('device_owner_device', None)
        self.user_owner_user = kwargs.get('user_owner_user', None)


class MicrosoftGraphDriveItem(MicrosoftGraphBaseItem):
    """driveItem.

    :param id: Read-only.
    :type id: str
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~files.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~files.models.MicrosoftGraphUser
    :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
    :type drive_id: str
    :param drive_type: Identifies the type of drive. See [drive][] resource for values.
    :type drive_type: str
    :param id_parent_reference_id: Unique identifier of the item in the drive. Read-only.
    :type id_parent_reference_id: str
    :param name_parent_reference_name: The name of the item being referenced. Read-only.
    :type name_parent_reference_name: str
    :param path: Path that can be used to navigate to the item. Read-only.
    :type path: str
    :param share_id: A unique identifier for a shared resource that can be accessed via the
     [Shares][] API.
    :type share_id: str
    :param site_id:
    :type site_id: str
    :param application_last_modified_by_application: identity.
    :type application_last_modified_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_last_modified_by_device: identity.
    :type device_last_modified_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_last_modified_by_user: identity.
    :type user_last_modified_by_user: ~files.models.MicrosoftGraphIdentity
    :param application_created_by_application: identity.
    :type application_created_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_created_by_device: identity.
    :type device_created_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_created_by_user: identity.
    :type user_created_by_user: ~files.models.MicrosoftGraphIdentity
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param audio: audio.
    :type audio: ~files.models.MicrosoftGraphAudio
    :param content: The content stream, if the item represents a file.
    :type content: bytes
    :param c_tag: An eTag for the content of the item. This eTag is not changed if only the
     metadata is changed. Note This property is not returned if the item is a folder. Read-only.
    :type c_tag: str
    :param file_system_info: fileSystemInfo.
    :type file_system_info: ~files.models.MicrosoftGraphFileSystemInfo
    :param image: image.
    :type image: ~files.models.MicrosoftGraphImage
    :param location: geoCoordinates.
    :type location: ~files.models.MicrosoftGraphGeoCoordinates
    :param photo: photo.
    :type photo: ~files.models.MicrosoftGraphPhoto
    :param publication: publicationFacet.
    :type publication: ~files.models.MicrosoftGraphPublicationFacet
    :param root: root.
    :type root: dict[str, object]
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param size: Size of the item in bytes. Read-only.
    :type size: long
    :param video: video.
    :type video: ~files.models.MicrosoftGraphVideo
    :param web_dav_url: WebDAV compatible URL for the item.
    :type web_dav_url: str
    :param activities: The list of recent activities that took place on this item.
    :type activities: list[~files.models.MicrosoftGraphItemActivityOld]
    :param analytics: itemAnalytics.
    :type analytics: ~files.models.MicrosoftGraphItemAnalytics
    :param children: Collection containing Item objects for the immediate children of Item. Only
     items representing folders have children. Read-only. Nullable.
    :type children: list[~files.models.MicrosoftGraphDriveItem]
    :param list_item: listItem.
    :type list_item: ~files.models.MicrosoftGraphListItem
    :param permissions: The set of permissions for the item. Read-only. Nullable.
    :type permissions: list[~files.models.MicrosoftGraphPermission]
    :param subscriptions: The set of subscriptions on the item. Only supported on the root of a
     drive.
    :type subscriptions: list[~files.models.MicrosoftGraphSubscription]
    :param thumbnails: Collection containing [ThumbnailSet][] objects associated with the item. For
     more info, see [getting thumbnails][]. Read-only. Nullable.
    :type thumbnails: list[~files.models.MicrosoftGraphThumbnailSet]
    :param versions: The list of previous versions of the item. For more info, see [getting
     previous versions][]. Read-only. Nullable.
    :type versions: list[~files.models.MicrosoftGraphDriveItemVersion]
    :param id_workbook_id: Read-only.
    :type id_workbook_id: str
    :param application: workbookApplication.
    :type application: ~files.models.MicrosoftGraphWorkbookApplication
    :param comments:
    :type comments: list[~files.models.MicrosoftGraphWorkbookComment]
    :param functions: workbookFunctions.
    :type functions: ~files.models.MicrosoftGraphWorkbookFunctions
    :param names: Represents a collection of workbook scoped named items (named ranges and
     constants). Read-only.
    :type names: list[~files.models.MicrosoftGraphWorkbookNamedItem]
    :param operations: The status of workbook operations. Getting an operation collection is not
     supported, but you can get the status of a long-running operation if the Location header is
     returned in the response. Read-only.
    :type operations: list[~files.models.MicrosoftGraphWorkbookOperation]
    :param tables: Represents a collection of tables associated with the workbook. Read-only.
    :type tables: list[~files.models.MicrosoftGraphWorkbookTable]
    :param worksheets: Represents a collection of worksheets associated with the workbook. Read-
     only.
    :type worksheets: list[~files.models.MicrosoftGraphWorkbookWorksheet]
    :param name_special_folder_name: The unique identifier for this item in the /drive/special
     collection.
    :type name_special_folder_name: str
    :param owner: identitySet.
    :type owner: ~files.models.MicrosoftGraphIdentitySet
    :param scope: Indicates the scope of how the item is shared: anonymous, organization, or users.
     Read-only.
    :type scope: str
    :param shared_by: identitySet.
    :type shared_by: ~files.models.MicrosoftGraphIdentitySet
    :param shared_date_time: The UTC date and time when the item was shared. Read-only.
    :type shared_date_time: ~datetime.datetime
    :param on_click_telemetry_url: A callback URL that can be used to record telemetry information.
     The application should issue a GET on this URL if the user interacts with this item to improve
     the quality of results.
    :type on_click_telemetry_url: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time_remote_item_created_date_time: Date and time of item creation. Read-
     only.
    :type created_date_time_remote_item_created_date_time: ~datetime.datetime
    :param file: file.
    :type file: ~files.models.MicrosoftGraphFile
    :param file_system_info_remote_item_file_system_info: fileSystemInfo.
    :type file_system_info_remote_item_file_system_info: ~files.models.MicrosoftGraphFileSystemInfo
    :param folder: folder.
    :type folder: ~files.models.MicrosoftGraphFolder
    :param id_remote_item_id: Unique identifier for the remote item in its drive. Read-only.
    :type id_remote_item_id: str
    :param image_remote_item_image: image.
    :type image_remote_item_image: ~files.models.MicrosoftGraphImage
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time_remote_item_last_modified_date_time: Date and time the item was
     last modified. Read-only.
    :type last_modified_date_time_remote_item_last_modified_date_time: ~datetime.datetime
    :param name_remote_item_name: Optional. Filename of the remote item. Read-only.
    :type name_remote_item_name: str
    :param package: package.
    :type package: ~files.models.MicrosoftGraphPackage
    :param parent_reference: itemReference.
    :type parent_reference: ~files.models.MicrosoftGraphItemReference
    :param shared: shared.
    :type shared: ~files.models.MicrosoftGraphShared
    :param sharepoint_ids_remote_item_sharepoint_ids: sharepointIds.
    :type sharepoint_ids_remote_item_sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param size_remote_item_size: Size of the remote item. Read-only.
    :type size_remote_item_size: long
    :param special_folder: specialFolder.
    :type special_folder: ~files.models.MicrosoftGraphSpecialFolder
    :param video_remote_item_video: video.
    :type video_remote_item_video: ~files.models.MicrosoftGraphVideo
    :param web_dav_url_remote_item_web_dav_url: DAV compatible URL for the item.
    :type web_dav_url_remote_item_web_dav_url: str
    :param web_url_remote_item_web_url: URL that displays the resource in the browser. Read-only.
    :type web_url_remote_item_web_url: str
    :param queued_date_time: Date and time the pending binary operation was queued in UTC time.
     Read-only.
    :type queued_date_time: ~datetime.datetime
    :param type: A string indicating the type of package. While oneNote is the only currently
     defined value, you should expect other package types to be returned and handle them
     accordingly.
    :type type: str
    :param child_count_folder_child_count: Number of children contained immediately within this
     container.
    :type child_count_folder_child_count: int
    :param view: folderView.
    :type view: ~files.models.MicrosoftGraphFolderView
    :param hashes: hashes.
    :type hashes: ~files.models.MicrosoftGraphHashes
    :param mime_type: The MIME type for the file. This is determined by logic on the server and
     might not be the value provided when the file was uploaded. Read-only.
    :type mime_type: str
    :param processing_metadata:
    :type processing_metadata: bool
    :param state: Represents the state of the deleted item.
    :type state: str
    :param album: album.
    :type album: ~files.models.MicrosoftGraphAlbum
    :param child_count_bundle_child_count:
    :type child_count_bundle_child_count: int
    """

    _validation = {
        'child_count_folder_child_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'child_count_bundle_child_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'drive_id': {'key': 'parentReference.driveId', 'type': 'str'},
        'drive_type': {'key': 'parentReference.driveType', 'type': 'str'},
        'id_parent_reference_id': {'key': 'parentReference.id', 'type': 'str'},
        'name_parent_reference_name': {'key': 'parentReference.name', 'type': 'str'},
        'path': {'key': 'parentReference.path', 'type': 'str'},
        'share_id': {'key': 'parentReference.shareId', 'type': 'str'},
        'site_id': {'key': 'parentReference.siteId', 'type': 'str'},
        'application_last_modified_by_application': {'key': 'lastModifiedBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_last_modified_by_device': {'key': 'lastModifiedBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_last_modified_by_user': {'key': 'lastModifiedBy.user', 'type': 'MicrosoftGraphIdentity'},
        'application_created_by_application': {'key': 'createdBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_created_by_device': {'key': 'createdBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_created_by_user': {'key': 'createdBy.user', 'type': 'MicrosoftGraphIdentity'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'audio': {'key': 'audio', 'type': 'MicrosoftGraphAudio'},
        'content': {'key': 'content', 'type': 'base64'},
        'c_tag': {'key': 'cTag', 'type': 'str'},
        'file_system_info': {'key': 'fileSystemInfo', 'type': 'MicrosoftGraphFileSystemInfo'},
        'image': {'key': 'image', 'type': 'MicrosoftGraphImage'},
        'location': {'key': 'location', 'type': 'MicrosoftGraphGeoCoordinates'},
        'photo': {'key': 'photo', 'type': 'MicrosoftGraphPhoto'},
        'publication': {'key': 'publication', 'type': 'MicrosoftGraphPublicationFacet'},
        'root': {'key': 'root', 'type': '{object}'},
        'sharepoint_ids': {'key': 'sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'size': {'key': 'size', 'type': 'long'},
        'video': {'key': 'video', 'type': 'MicrosoftGraphVideo'},
        'web_dav_url': {'key': 'webDavUrl', 'type': 'str'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphItemActivityOld]'},
        'analytics': {'key': 'analytics', 'type': 'MicrosoftGraphItemAnalytics'},
        'children': {'key': 'children', 'type': '[MicrosoftGraphDriveItem]'},
        'list_item': {'key': 'listItem', 'type': 'MicrosoftGraphListItem'},
        'permissions': {'key': 'permissions', 'type': '[MicrosoftGraphPermission]'},
        'subscriptions': {'key': 'subscriptions', 'type': '[MicrosoftGraphSubscription]'},
        'thumbnails': {'key': 'thumbnails', 'type': '[MicrosoftGraphThumbnailSet]'},
        'versions': {'key': 'versions', 'type': '[MicrosoftGraphDriveItemVersion]'},
        'id_workbook_id': {'key': 'workbook.id', 'type': 'str'},
        'application': {'key': 'workbook.application', 'type': 'MicrosoftGraphWorkbookApplication'},
        'comments': {'key': 'workbook.comments', 'type': '[MicrosoftGraphWorkbookComment]'},
        'functions': {'key': 'workbook.functions', 'type': 'MicrosoftGraphWorkbookFunctions'},
        'names': {'key': 'workbook.names', 'type': '[MicrosoftGraphWorkbookNamedItem]'},
        'operations': {'key': 'workbook.operations', 'type': '[MicrosoftGraphWorkbookOperation]'},
        'tables': {'key': 'workbook.tables', 'type': '[MicrosoftGraphWorkbookTable]'},
        'worksheets': {'key': 'workbook.worksheets', 'type': '[MicrosoftGraphWorkbookWorksheet]'},
        'name_special_folder_name': {'key': 'specialFolder.name', 'type': 'str'},
        'owner': {'key': 'shared.owner', 'type': 'MicrosoftGraphIdentitySet'},
        'scope': {'key': 'shared.scope', 'type': 'str'},
        'shared_by': {'key': 'shared.sharedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'shared_date_time': {'key': 'shared.sharedDateTime', 'type': 'iso-8601'},
        'on_click_telemetry_url': {'key': 'searchResult.onClickTelemetryUrl', 'type': 'str'},
        'created_by': {'key': 'remoteItem.createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time_remote_item_created_date_time': {'key': 'remoteItem.createdDateTime', 'type': 'iso-8601'},
        'file': {'key': 'remoteItem.file', 'type': 'MicrosoftGraphFile'},
        'file_system_info_remote_item_file_system_info': {'key': 'remoteItem.fileSystemInfo', 'type': 'MicrosoftGraphFileSystemInfo'},
        'folder': {'key': 'remoteItem.folder', 'type': 'MicrosoftGraphFolder'},
        'id_remote_item_id': {'key': 'remoteItem.id', 'type': 'str'},
        'image_remote_item_image': {'key': 'remoteItem.image', 'type': 'MicrosoftGraphImage'},
        'last_modified_by': {'key': 'remoteItem.lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time_remote_item_last_modified_date_time': {'key': 'remoteItem.lastModifiedDateTime', 'type': 'iso-8601'},
        'name_remote_item_name': {'key': 'remoteItem.name', 'type': 'str'},
        'package': {'key': 'remoteItem.package', 'type': 'MicrosoftGraphPackage'},
        'parent_reference': {'key': 'remoteItem.parentReference', 'type': 'MicrosoftGraphItemReference'},
        'shared': {'key': 'remoteItem.shared', 'type': 'MicrosoftGraphShared'},
        'sharepoint_ids_remote_item_sharepoint_ids': {'key': 'remoteItem.sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'size_remote_item_size': {'key': 'remoteItem.size', 'type': 'long'},
        'special_folder': {'key': 'remoteItem.specialFolder', 'type': 'MicrosoftGraphSpecialFolder'},
        'video_remote_item_video': {'key': 'remoteItem.video', 'type': 'MicrosoftGraphVideo'},
        'web_dav_url_remote_item_web_dav_url': {'key': 'remoteItem.webDavUrl', 'type': 'str'},
        'web_url_remote_item_web_url': {'key': 'remoteItem.webUrl', 'type': 'str'},
        'queued_date_time': {'key': 'pendingOperations.pendingContentUpdate.queuedDateTime', 'type': 'iso-8601'},
        'type': {'key': 'package.type', 'type': 'str'},
        'child_count_folder_child_count': {'key': 'folder.childCount', 'type': 'int'},
        'view': {'key': 'folder.view', 'type': 'MicrosoftGraphFolderView'},
        'hashes': {'key': 'file.hashes', 'type': 'MicrosoftGraphHashes'},
        'mime_type': {'key': 'file.mimeType', 'type': 'str'},
        'processing_metadata': {'key': 'file.processingMetadata', 'type': 'bool'},
        'state': {'key': 'deleted.state', 'type': 'str'},
        'album': {'key': 'bundle.album', 'type': 'MicrosoftGraphAlbum'},
        'child_count_bundle_child_count': {'key': 'bundle.childCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDriveItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.audio = kwargs.get('audio', None)
        self.content = kwargs.get('content', None)
        self.c_tag = kwargs.get('c_tag', None)
        self.file_system_info = kwargs.get('file_system_info', None)
        self.image = kwargs.get('image', None)
        self.location = kwargs.get('location', None)
        self.photo = kwargs.get('photo', None)
        self.publication = kwargs.get('publication', None)
        self.root = kwargs.get('root', None)
        self.sharepoint_ids = kwargs.get('sharepoint_ids', None)
        self.size = kwargs.get('size', None)
        self.video = kwargs.get('video', None)
        self.web_dav_url = kwargs.get('web_dav_url', None)
        self.activities = kwargs.get('activities', None)
        self.analytics = kwargs.get('analytics', None)
        self.children = kwargs.get('children', None)
        self.list_item = kwargs.get('list_item', None)
        self.permissions = kwargs.get('permissions', None)
        self.subscriptions = kwargs.get('subscriptions', None)
        self.thumbnails = kwargs.get('thumbnails', None)
        self.versions = kwargs.get('versions', None)
        self.id_workbook_id = kwargs.get('id_workbook_id', None)
        self.application = kwargs.get('application', None)
        self.comments = kwargs.get('comments', None)
        self.functions = kwargs.get('functions', None)
        self.names = kwargs.get('names', None)
        self.operations = kwargs.get('operations', None)
        self.tables = kwargs.get('tables', None)
        self.worksheets = kwargs.get('worksheets', None)
        self.name_special_folder_name = kwargs.get('name_special_folder_name', None)
        self.owner = kwargs.get('owner', None)
        self.scope = kwargs.get('scope', None)
        self.shared_by = kwargs.get('shared_by', None)
        self.shared_date_time = kwargs.get('shared_date_time', None)
        self.on_click_telemetry_url = kwargs.get('on_click_telemetry_url', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_date_time_remote_item_created_date_time = kwargs.get('created_date_time_remote_item_created_date_time', None)
        self.file = kwargs.get('file', None)
        self.file_system_info_remote_item_file_system_info = kwargs.get('file_system_info_remote_item_file_system_info', None)
        self.folder = kwargs.get('folder', None)
        self.id_remote_item_id = kwargs.get('id_remote_item_id', None)
        self.image_remote_item_image = kwargs.get('image_remote_item_image', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.last_modified_date_time_remote_item_last_modified_date_time = kwargs.get('last_modified_date_time_remote_item_last_modified_date_time', None)
        self.name_remote_item_name = kwargs.get('name_remote_item_name', None)
        self.package = kwargs.get('package', None)
        self.parent_reference = kwargs.get('parent_reference', None)
        self.shared = kwargs.get('shared', None)
        self.sharepoint_ids_remote_item_sharepoint_ids = kwargs.get('sharepoint_ids_remote_item_sharepoint_ids', None)
        self.size_remote_item_size = kwargs.get('size_remote_item_size', None)
        self.special_folder = kwargs.get('special_folder', None)
        self.video_remote_item_video = kwargs.get('video_remote_item_video', None)
        self.web_dav_url_remote_item_web_dav_url = kwargs.get('web_dav_url_remote_item_web_dav_url', None)
        self.web_url_remote_item_web_url = kwargs.get('web_url_remote_item_web_url', None)
        self.queued_date_time = kwargs.get('queued_date_time', None)
        self.type = kwargs.get('type', None)
        self.child_count_folder_child_count = kwargs.get('child_count_folder_child_count', None)
        self.view = kwargs.get('view', None)
        self.hashes = kwargs.get('hashes', None)
        self.mime_type = kwargs.get('mime_type', None)
        self.processing_metadata = kwargs.get('processing_metadata', None)
        self.state = kwargs.get('state', None)
        self.album = kwargs.get('album', None)
        self.child_count_bundle_child_count = kwargs.get('child_count_bundle_child_count', None)


class MicrosoftGraphDriveItemVersion(MicrosoftGraphBaseItemVersion):
    """driveItemVersion.

    :param id: Read-only.
    :type id: str
    :param last_modified_date_time: Date and time the version was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param publication: publicationFacet.
    :type publication: ~files.models.MicrosoftGraphPublicationFacet
    :param application: identity.
    :type application: ~files.models.MicrosoftGraphIdentity
    :param device: identity.
    :type device: ~files.models.MicrosoftGraphIdentity
    :param user: identity.
    :type user: ~files.models.MicrosoftGraphIdentity
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content: The content stream for this version of the item.
    :type content: bytes
    :param size: Indicates the size of the content stream for this version of the item.
    :type size: long
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'publication': {'key': 'publication', 'type': 'MicrosoftGraphPublicationFacet'},
        'application': {'key': 'lastModifiedBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device': {'key': 'lastModifiedBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user': {'key': 'lastModifiedBy.user', 'type': 'MicrosoftGraphIdentity'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'base64'},
        'size': {'key': 'size', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDriveItemVersion, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content = kwargs.get('content', None)
        self.size = kwargs.get('size', None)


class MicrosoftGraphDriveRecipient(msrest.serialization.Model):
    """driveRecipient.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param alias: The alias of the domain object, for cases where an email address is unavailable
     (e.g. security groups).
    :type alias: str
    :param email: The email address for the recipient, if the recipient has an associated email
     address.
    :type email: str
    :param object_id: The unique identifier for the recipient in the directory.
    :type object_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'alias': {'key': 'alias', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'object_id': {'key': 'objectId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDriveRecipient, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.alias = kwargs.get('alias', None)
        self.email = kwargs.get('email', None)
        self.object_id = kwargs.get('object_id', None)


class MicrosoftGraphItemFacet(MicrosoftGraphEntity):
    """itemFacet.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemFacet, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allowed_audiences = kwargs.get('allowed_audiences', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.inference = kwargs.get('inference', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.source = kwargs.get('source', None)


class MicrosoftGraphEducationalActivity(MicrosoftGraphItemFacet):
    """educationalActivity.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completion_month_year:
    :type completion_month_year: ~datetime.date
    :param end_month_year:
    :type end_month_year: ~datetime.date
    :param institution: institutionData.
    :type institution: ~files.models.MicrosoftGraphInstitutionData
    :param program: educationalActivityDetail.
    :type program: ~files.models.MicrosoftGraphEducationalActivityDetail
    :param start_month_year:
    :type start_month_year: ~datetime.date
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'completion_month_year': {'key': 'completionMonthYear', 'type': 'date'},
        'end_month_year': {'key': 'endMonthYear', 'type': 'date'},
        'institution': {'key': 'institution', 'type': 'MicrosoftGraphInstitutionData'},
        'program': {'key': 'program', 'type': 'MicrosoftGraphEducationalActivityDetail'},
        'start_month_year': {'key': 'startMonthYear', 'type': 'date'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEducationalActivity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.completion_month_year = kwargs.get('completion_month_year', None)
        self.end_month_year = kwargs.get('end_month_year', None)
        self.institution = kwargs.get('institution', None)
        self.program = kwargs.get('program', None)
        self.start_month_year = kwargs.get('start_month_year', None)


class MicrosoftGraphEducationalActivityDetail(msrest.serialization.Model):
    """educationalActivityDetail.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param abbreviation:
    :type abbreviation: str
    :param activities:
    :type activities: list[str]
    :param awards:
    :type awards: list[str]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param fields_of_study:
    :type fields_of_study: list[str]
    :param grade:
    :type grade: str
    :param notes:
    :type notes: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'abbreviation': {'key': 'abbreviation', 'type': 'str'},
        'activities': {'key': 'activities', 'type': '[str]'},
        'awards': {'key': 'awards', 'type': '[str]'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'fields_of_study': {'key': 'fieldsOfStudy', 'type': '[str]'},
        'grade': {'key': 'grade', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEducationalActivityDetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.abbreviation = kwargs.get('abbreviation', None)
        self.activities = kwargs.get('activities', None)
        self.awards = kwargs.get('awards', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.fields_of_study = kwargs.get('fields_of_study', None)
        self.grade = kwargs.get('grade', None)
        self.notes = kwargs.get('notes', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphEmailAddress(msrest.serialization.Model):
    """emailAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: The email address of the person or entity.
    :type address: str
    :param name: The display name of the person or entity.
    :type name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEmailAddress, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.name = kwargs.get('name', None)


class MicrosoftGraphEmailAuthenticationMethod(MicrosoftGraphAuthenticationMethod):
    """emailAuthenticationMethod.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEmailAuthenticationMethod, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphEmployeeOrgData(msrest.serialization.Model):
    """employeeOrgData.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param cost_center: The cost center associated with the user. Returned only on $select.
     Supports $filter.
    :type cost_center: str
    :param division: The name of the division in which the user works. Returned only on $select.
     Supports $filter.
    :type division: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'cost_center': {'key': 'costCenter', 'type': 'str'},
        'division': {'key': 'division', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEmployeeOrgData, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.cost_center = kwargs.get('cost_center', None)
        self.division = kwargs.get('division', None)


class MicrosoftGraphEndpoint(MicrosoftGraphDirectoryObject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param capability: Describes the capability that is associated with this resource. (e.g.
     Messages, Conversations, etc.)  Not nullable. Read-only.
    :type capability: str
    :param provider_id: Application id of the publishing underlying service. Not nullable. Read-
     only.
    :type provider_id: str
    :param provider_name: Name of the publishing underlying service. Read-only.
    :type provider_name: str
    :param provider_resource_id: For Microsoft 365 groups, this is set to a well-known name for the
     resource (e.g. Yammer.FeedURL etc.). Not nullable. Read-only.
    :type provider_resource_id: str
    :param uri: URL of the published resource. Not nullable. Read-only.
    :type uri: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'capability': {'key': 'capability', 'type': 'str'},
        'provider_id': {'key': 'providerId', 'type': 'str'},
        'provider_name': {'key': 'providerName', 'type': 'str'},
        'provider_resource_id': {'key': 'providerResourceId', 'type': 'str'},
        'uri': {'key': 'uri', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEndpoint, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.capability = kwargs.get('capability', None)
        self.provider_id = kwargs.get('provider_id', None)
        self.provider_name = kwargs.get('provider_name', None)
        self.provider_resource_id = kwargs.get('provider_resource_id', None)
        self.uri = kwargs.get('uri', None)


class MicrosoftGraphEnrollmentConfigurationAssignment(MicrosoftGraphEntity):
    """Enrollment Configuration Assignment.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param source:  Possible values include: "direct", "policySets".
    :type source: str or ~files.models.MicrosoftGraphDeviceAndAppManagementAssignmentSource
    :param source_id: Identifier for resource used for deployment to a group.
    :type source_id: str
    :param target: Base type for assignment targets.
    :type target: ~files.models.MicrosoftGraphDeviceAndAppManagementAssignmentTarget
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'source': {'key': 'source', 'type': 'str'},
        'source_id': {'key': 'sourceId', 'type': 'str'},
        'target': {'key': 'target', 'type': 'MicrosoftGraphDeviceAndAppManagementAssignmentTarget'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEnrollmentConfigurationAssignment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.source = kwargs.get('source', None)
        self.source_id = kwargs.get('source_id', None)
        self.target = kwargs.get('target', None)


class MicrosoftGraphEvent(MicrosoftGraphOutlookItem):
    """event.

    :param id: Read-only.
    :type id: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_new_time_proposals: True if the meeting organizer allows invitees to propose a new
     time when responding, false otherwise. Optional. Default is true.
    :type allow_new_time_proposals: bool
    :param attendees: The collection of attendees for the event.
    :type attendees: list[~files.models.MicrosoftGraphAttendee]
    :param body: itemBody.
    :type body: ~files.models.MicrosoftGraphItemBody
    :param body_preview: The preview of the message associated with the event. It is in text
     format.
    :type body_preview: str
    :param cancelled_occurrences:
    :type cancelled_occurrences: list[str]
    :param end: dateTimeTimeZone.
    :type end: ~files.models.MicrosoftGraphDateTimeZone
    :param has_attachments: Set to true if the event has attachments.
    :type has_attachments: bool
    :param hide_attendees:
    :type hide_attendees: bool
    :param importance:  Possible values include: "low", "normal", "high".
    :type importance: str or ~files.models.MicrosoftGraphImportance
    :param is_all_day: Set to true if the event lasts all day.
    :type is_all_day: bool
    :param is_cancelled: Set to true if the event has been canceled.
    :type is_cancelled: bool
    :param is_draft:
    :type is_draft: bool
    :param is_online_meeting: True if this event has online meeting information, false otherwise.
     Default is false. Optional.
    :type is_online_meeting: bool
    :param is_organizer: Set to true if the calendar owner (specified by the owner property of the
     calendar) is the organizer of the event (specified by the organizer property of the event).
     This also applies if a delegate organized the event on behalf of the owner.
    :type is_organizer: bool
    :param is_reminder_on: Set to true if an alert is set to remind the user of the event.
    :type is_reminder_on: bool
    :param location: location.
    :type location: ~files.models.MicrosoftGraphLocation
    :param locations: The locations where the event is held or attended from. The location and
     locations properties always correspond with each other. If you update the location property,
     any prior locations in the locations collection would be removed and replaced by the new
     location value.
    :type locations: list[~files.models.MicrosoftGraphLocation]
    :param occurrence_id:
    :type occurrence_id: str
    :param online_meeting: onlineMeetingInfo.
    :type online_meeting: ~files.models.MicrosoftGraphOnlineMeetingInfo
    :param online_meeting_provider:  Possible values include: "unknown", "skypeForBusiness",
     "skypeForConsumer", "teamsForBusiness".
    :type online_meeting_provider: str or ~files.models.MicrosoftGraphOnlineMeetingProviderType
    :param online_meeting_url: A URL for an online meeting. The property is set only when an
     organizer specifies an event as an online meeting such as a Skype meeting. Read-only.
    :type online_meeting_url: str
    :param organizer: recipient.
    :type organizer: ~files.models.MicrosoftGraphRecipient
    :param original_end_time_zone: The end time zone that was set when the event was created. A
     value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop
     Outlook.
    :type original_end_time_zone: str
    :param original_start: The Timestamp type represents date and time information using ISO 8601
     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type original_start: ~datetime.datetime
    :param original_start_time_zone: The start time zone that was set when the event was created. A
     value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop
     Outlook.
    :type original_start_time_zone: str
    :param recurrence: patternedRecurrence.
    :type recurrence: ~files.models.MicrosoftGraphPatternedRecurrence
    :param reminder_minutes_before_start: The number of minutes before the event start time that
     the reminder alert occurs.
    :type reminder_minutes_before_start: int
    :param response_requested: Default is true, which represents the organizer would like an
     invitee to send a response to the event.
    :type response_requested: bool
    :param response_status: responseStatus.
    :type response_status: ~files.models.MicrosoftGraphResponseStatus
    :param sensitivity:  Possible values include: "normal", "personal", "private", "confidential".
    :type sensitivity: str or ~files.models.MicrosoftGraphSensitivity
    :param series_master_id: The ID for the recurring series master item, if this event is part of
     a recurring series.
    :type series_master_id: str
    :param show_as:  Possible values include: "free", "tentative", "unknown", "busy", "oof",
     "workingElsewhere".
    :type show_as: str or ~files.models.MicrosoftGraphFreeBusyStatus
    :param start: dateTimeTimeZone.
    :type start: ~files.models.MicrosoftGraphDateTimeZone
    :param subject: The text of the event's subject line.
    :type subject: str
    :param transaction_id: A custom identifier specified by a client app for the server to avoid
     redundant POST operations in case of client retries to create the same event. This is useful
     when low network connectivity causes the client to time out before receiving a response from
     the server for the client's prior create-event request. After you set transactionId when
     creating an event, you cannot change transactionId in a subsequent update. This property is
     only returned in a response payload if an app has set it. Optional.
    :type transaction_id: str
    :param type:  Possible values include: "singleInstance", "occurrence", "exception",
     "seriesMaster".
    :type type: str or ~files.models.MicrosoftGraphEventType
    :param uid:
    :type uid: str
    :param web_link: The URL to open the event in Outlook on the web.Outlook on the web opens the
     event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web
     prompts you to sign in.This URL can be accessed from within an iFrame.
    :type web_link: str
    :param attachments: The collection of fileAttachment and itemAttachment attachments for the
     event. Navigation property. Read-only. Nullable.
    :type attachments: list[~files.models.MicrosoftGraphAttachment]
    :param calendar: calendar.
    :type calendar: ~files.models.MicrosoftGraphCalendar
    :param exception_occurrences:
    :type exception_occurrences: list[~files.models.MicrosoftGraphEvent]
    :param extensions: The collection of open extensions defined for the event. Read-only.
     Nullable.
    :type extensions: list[~files.models.MicrosoftGraphExtension]
    :param instances: The instances of the event. Navigation property. Read-only. Nullable.
    :type instances: list[~files.models.MicrosoftGraphEvent]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the event. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~files.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the event. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~files.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    """

    _validation = {
        'reminder_minutes_before_start': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_new_time_proposals': {'key': 'allowNewTimeProposals', 'type': 'bool'},
        'attendees': {'key': 'attendees', 'type': '[MicrosoftGraphAttendee]'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'body_preview': {'key': 'bodyPreview', 'type': 'str'},
        'cancelled_occurrences': {'key': 'cancelledOccurrences', 'type': '[str]'},
        'end': {'key': 'end', 'type': 'MicrosoftGraphDateTimeZone'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'hide_attendees': {'key': 'hideAttendees', 'type': 'bool'},
        'importance': {'key': 'importance', 'type': 'str'},
        'is_all_day': {'key': 'isAllDay', 'type': 'bool'},
        'is_cancelled': {'key': 'isCancelled', 'type': 'bool'},
        'is_draft': {'key': 'isDraft', 'type': 'bool'},
        'is_online_meeting': {'key': 'isOnlineMeeting', 'type': 'bool'},
        'is_organizer': {'key': 'isOrganizer', 'type': 'bool'},
        'is_reminder_on': {'key': 'isReminderOn', 'type': 'bool'},
        'location': {'key': 'location', 'type': 'MicrosoftGraphLocation'},
        'locations': {'key': 'locations', 'type': '[MicrosoftGraphLocation]'},
        'occurrence_id': {'key': 'occurrenceId', 'type': 'str'},
        'online_meeting': {'key': 'onlineMeeting', 'type': 'MicrosoftGraphOnlineMeetingInfo'},
        'online_meeting_provider': {'key': 'onlineMeetingProvider', 'type': 'str'},
        'online_meeting_url': {'key': 'onlineMeetingUrl', 'type': 'str'},
        'organizer': {'key': 'organizer', 'type': 'MicrosoftGraphRecipient'},
        'original_end_time_zone': {'key': 'originalEndTimeZone', 'type': 'str'},
        'original_start': {'key': 'originalStart', 'type': 'iso-8601'},
        'original_start_time_zone': {'key': 'originalStartTimeZone', 'type': 'str'},
        'recurrence': {'key': 'recurrence', 'type': 'MicrosoftGraphPatternedRecurrence'},
        'reminder_minutes_before_start': {'key': 'reminderMinutesBeforeStart', 'type': 'int'},
        'response_requested': {'key': 'responseRequested', 'type': 'bool'},
        'response_status': {'key': 'responseStatus', 'type': 'MicrosoftGraphResponseStatus'},
        'sensitivity': {'key': 'sensitivity', 'type': 'str'},
        'series_master_id': {'key': 'seriesMasterId', 'type': 'str'},
        'show_as': {'key': 'showAs', 'type': 'str'},
        'start': {'key': 'start', 'type': 'MicrosoftGraphDateTimeZone'},
        'subject': {'key': 'subject', 'type': 'str'},
        'transaction_id': {'key': 'transactionId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'uid': {'key': 'uid', 'type': 'str'},
        'web_link': {'key': 'webLink', 'type': 'str'},
        'attachments': {'key': 'attachments', 'type': '[MicrosoftGraphAttachment]'},
        'calendar': {'key': 'calendar', 'type': 'MicrosoftGraphCalendar'},
        'exception_occurrences': {'key': 'exceptionOccurrences', 'type': '[MicrosoftGraphEvent]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphExtension]'},
        'instances': {'key': 'instances', 'type': '[MicrosoftGraphEvent]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEvent, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allow_new_time_proposals = kwargs.get('allow_new_time_proposals', None)
        self.attendees = kwargs.get('attendees', None)
        self.body = kwargs.get('body', None)
        self.body_preview = kwargs.get('body_preview', None)
        self.cancelled_occurrences = kwargs.get('cancelled_occurrences', None)
        self.end = kwargs.get('end', None)
        self.has_attachments = kwargs.get('has_attachments', None)
        self.hide_attendees = kwargs.get('hide_attendees', None)
        self.importance = kwargs.get('importance', None)
        self.is_all_day = kwargs.get('is_all_day', None)
        self.is_cancelled = kwargs.get('is_cancelled', None)
        self.is_draft = kwargs.get('is_draft', None)
        self.is_online_meeting = kwargs.get('is_online_meeting', None)
        self.is_organizer = kwargs.get('is_organizer', None)
        self.is_reminder_on = kwargs.get('is_reminder_on', None)
        self.location = kwargs.get('location', None)
        self.locations = kwargs.get('locations', None)
        self.occurrence_id = kwargs.get('occurrence_id', None)
        self.online_meeting = kwargs.get('online_meeting', None)
        self.online_meeting_provider = kwargs.get('online_meeting_provider', None)
        self.online_meeting_url = kwargs.get('online_meeting_url', None)
        self.organizer = kwargs.get('organizer', None)
        self.original_end_time_zone = kwargs.get('original_end_time_zone', None)
        self.original_start = kwargs.get('original_start', None)
        self.original_start_time_zone = kwargs.get('original_start_time_zone', None)
        self.recurrence = kwargs.get('recurrence', None)
        self.reminder_minutes_before_start = kwargs.get('reminder_minutes_before_start', None)
        self.response_requested = kwargs.get('response_requested', None)
        self.response_status = kwargs.get('response_status', None)
        self.sensitivity = kwargs.get('sensitivity', None)
        self.series_master_id = kwargs.get('series_master_id', None)
        self.show_as = kwargs.get('show_as', None)
        self.start = kwargs.get('start', None)
        self.subject = kwargs.get('subject', None)
        self.transaction_id = kwargs.get('transaction_id', None)
        self.type = kwargs.get('type', None)
        self.uid = kwargs.get('uid', None)
        self.web_link = kwargs.get('web_link', None)
        self.attachments = kwargs.get('attachments', None)
        self.calendar = kwargs.get('calendar', None)
        self.exception_occurrences = kwargs.get('exception_occurrences', None)
        self.extensions = kwargs.get('extensions', None)
        self.instances = kwargs.get('instances', None)
        self.multi_value_extended_properties = kwargs.get('multi_value_extended_properties', None)
        self.single_value_extended_properties = kwargs.get('single_value_extended_properties', None)


class MicrosoftGraphExtension(MicrosoftGraphEntity):
    """extension.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphExtension, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphExternalLink(msrest.serialization.Model):
    """externalLink.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param href: The url of the link.
    :type href: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'href': {'key': 'href', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphExternalLink, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.href = kwargs.get('href', None)


class MicrosoftGraphFido2AuthenticationMethod(MicrosoftGraphAuthenticationMethod):
    """fido2AuthenticationMethod.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphFido2AuthenticationMethod, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphFieldValueSet(MicrosoftGraphEntity):
    """fieldValueSet.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphFieldValueSet, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphFile(msrest.serialization.Model):
    """file.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param hashes: hashes.
    :type hashes: ~files.models.MicrosoftGraphHashes
    :param mime_type: The MIME type for the file. This is determined by logic on the server and
     might not be the value provided when the file was uploaded. Read-only.
    :type mime_type: str
    :param processing_metadata:
    :type processing_metadata: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'hashes': {'key': 'hashes', 'type': 'MicrosoftGraphHashes'},
        'mime_type': {'key': 'mimeType', 'type': 'str'},
        'processing_metadata': {'key': 'processingMetadata', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphFile, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.hashes = kwargs.get('hashes', None)
        self.mime_type = kwargs.get('mime_type', None)
        self.processing_metadata = kwargs.get('processing_metadata', None)


class MicrosoftGraphFileSystemInfo(msrest.serialization.Model):
    """fileSystemInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: The UTC date and time the file was created on a client.
    :type created_date_time: ~datetime.datetime
    :param last_accessed_date_time: The UTC date and time the file was last accessed. Available for
     the recent file list only.
    :type last_accessed_date_time: ~datetime.datetime
    :param last_modified_date_time: The UTC date and time the file was last modified on a client.
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_accessed_date_time': {'key': 'lastAccessedDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphFileSystemInfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.last_accessed_date_time = kwargs.get('last_accessed_date_time', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class MicrosoftGraphFolder(msrest.serialization.Model):
    """folder.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param child_count: Number of children contained immediately within this container.
    :type child_count: int
    :param view: folderView.
    :type view: ~files.models.MicrosoftGraphFolderView
    """

    _validation = {
        'child_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'child_count': {'key': 'childCount', 'type': 'int'},
        'view': {'key': 'view', 'type': 'MicrosoftGraphFolderView'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphFolder, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.child_count = kwargs.get('child_count', None)
        self.view = kwargs.get('view', None)


class MicrosoftGraphFolderView(msrest.serialization.Model):
    """folderView.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param sort_by: The method by which the folder should be sorted.
    :type sort_by: str
    :param sort_order: If true, indicates that items should be sorted in descending order.
     Otherwise, items should be sorted ascending.
    :type sort_order: str
    :param view_type: The type of view that should be used to represent the folder.
    :type view_type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'sort_by': {'key': 'sortBy', 'type': 'str'},
        'sort_order': {'key': 'sortOrder', 'type': 'str'},
        'view_type': {'key': 'viewType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphFolderView, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.sort_by = kwargs.get('sort_by', None)
        self.sort_order = kwargs.get('sort_order', None)
        self.view_type = kwargs.get('view_type', None)


class MicrosoftGraphFollowupFlag(msrest.serialization.Model):
    """followupFlag.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param completed_date_time: dateTimeTimeZone.
    :type completed_date_time: ~files.models.MicrosoftGraphDateTimeZone
    :param due_date_time: dateTimeTimeZone.
    :type due_date_time: ~files.models.MicrosoftGraphDateTimeZone
    :param flag_status:  Possible values include: "notFlagged", "complete", "flagged".
    :type flag_status: str or ~files.models.MicrosoftGraphFollowupFlagStatus
    :param start_date_time: dateTimeTimeZone.
    :type start_date_time: ~files.models.MicrosoftGraphDateTimeZone
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'completed_date_time': {'key': 'completedDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'due_date_time': {'key': 'dueDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'flag_status': {'key': 'flagStatus', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphFollowupFlag, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.completed_date_time = kwargs.get('completed_date_time', None)
        self.due_date_time = kwargs.get('due_date_time', None)
        self.flag_status = kwargs.get('flag_status', None)
        self.start_date_time = kwargs.get('start_date_time', None)


class MicrosoftGraphGeoCoordinates(msrest.serialization.Model):
    """geoCoordinates.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param altitude: Optional. The altitude (height), in feet,  above sea level for the item. Read-
     only.
    :type altitude: float
    :param latitude: Optional. The latitude, in decimal, for the item. Read-only.
    :type latitude: float
    :param longitude: Optional. The longitude, in decimal, for the item. Read-only.
    :type longitude: float
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'altitude': {'key': 'altitude', 'type': 'float'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphGeoCoordinates, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.altitude = kwargs.get('altitude', None)
        self.latitude = kwargs.get('latitude', None)
        self.longitude = kwargs.get('longitude', None)


class MicrosoftGraphGroup(MicrosoftGraphDirectoryObject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param assigned_labels: The list of sensitivity label pairs (label ID, label name) associated
     with an Microsoft 365 group. Returned only on $select. Read-only.
    :type assigned_labels: list[~files.models.MicrosoftGraphAssignedLabel]
    :param assigned_licenses: The licenses that are assigned to the group. Returned only on
     $select. Read-only.
    :type assigned_licenses: list[~files.models.MicrosoftGraphAssignedLicense]
    :param classification: Describes a classification for the group (such as low, medium or high
     business impact). Valid values for this property are defined by creating a ClassificationList
     setting value, based on the template definition.Returned by default.
    :type classification: str
    :param created_by_app_id:
    :type created_by_app_id: str
    :param created_date_time: Timestamp of when the group was created. The value cannot be modified
     and is automatically populated when the group is created. The Timestamp type represents date
     and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC
     on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Returned by default. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: An optional description for the group. Returned by default.
    :type description: str
    :param display_name: The display name for the group. This property is required when a group is
     created and cannot be cleared during updates. Returned by default. Supports $filter and
     $orderby.
    :type display_name: str
    :param expiration_date_time: Timestamp of when the group is set to expire. The value cannot be
     modified and is automatically populated when the group is created. The Timestamp type
     represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Returned by
     default. Read-only.
    :type expiration_date_time: ~datetime.datetime
    :param group_types: Specifies the group type and its membership.  If the collection contains
     Unified, the group is a Microsoft 365 group; otherwise, it's either a security group or
     distribution group. For details, see groups overview.If the collection includes
     DynamicMembership, the group has dynamic membership; otherwise, membership is static.  Returned
     by default. Supports $filter.
    :type group_types: list[str]
    :param has_members_with_license_errors: Indicates whether there are members in this group that
     have license errors from its group-based license assignment. This property is never returned on
     a GET operation. You can use it as a $filter argument to get groups that have members with
     license errors (that is, filter for this property being true). See an example.
    :type has_members_with_license_errors: bool
    :param info_catalogs:
    :type info_catalogs: list[str]
    :param is_assignable_to_role:
    :type is_assignable_to_role: bool
    :param license_processing_state: licenseProcessingState.
    :type license_processing_state: ~files.models.MicrosoftGraphLicenseProcessingState
    :param mail: The SMTP address for the group, for example,
     'serviceadmins@contoso.onmicrosoft.com'. Returned by default. Read-only. Supports $filter.
    :type mail: str
    :param mail_enabled: Specifies whether the group is mail-enabled. Returned by default.
    :type mail_enabled: bool
    :param mail_nickname:
    :type mail_nickname: str
    :param mdm_app_id:
    :type mdm_app_id: str
    :param membership_rule: The rule that determines members for this group if the group is a
     dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of
     the membership rule, see Membership Rules syntax. Returned by default.
    :type membership_rule: str
    :param membership_rule_processing_state: Indicates whether the dynamic membership processing is
     on or paused. Possible values are 'On' or 'Paused'. Returned by default.
    :type membership_rule_processing_state: str
    :param on_premises_domain_name:
    :type on_premises_domain_name: str
    :param on_premises_last_sync_date_time:
    :type on_premises_last_sync_date_time: ~datetime.datetime
    :param on_premises_net_bios_name:
    :type on_premises_net_bios_name: str
    :param on_premises_provisioning_errors:
    :type on_premises_provisioning_errors:
     list[~files.models.MicrosoftGraphOnPremisesProvisioningError]
    :param on_premises_sam_account_name: Contains the on-premises SAM account name synchronized
     from the on-premises directory. The property is only populated for customers who are
     synchronizing their on-premises directory to Azure Active Directory via Azure AD
     Connect.Returned by default. Read-only.
    :type on_premises_sam_account_name: str
    :param on_premises_security_identifier: Contains the on-premises security identifier (SID) for
     the group that was synchronized from on-premises to the cloud. Returned by default. Read-only.
    :type on_premises_security_identifier: str
    :param on_premises_sync_enabled: true if this group is synced from an on-premises directory;
     false if this group was originally synced from an on-premises directory but is no longer
     synced; null if this object has never been synced from an on-premises directory (default).
     Returned by default. Read-only. Supports $filter.
    :type on_premises_sync_enabled: bool
    :param preferred_data_location: The preferred data location for the group. For more
     information, see  OneDrive Online Multi-Geo. Returned by default.
    :type preferred_data_location: str
    :param preferred_language: The preferred language for an Microsoft 365 group. Should follow ISO
     639-1 Code; for example 'en-US'. Returned by default.
    :type preferred_language: str
    :param proxy_addresses: Email addresses for the group that direct to the same group mailbox.
     For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. The any operator is
     required to filter expressions on multi-valued properties. Returned by default. Read-only. Not
     nullable. Supports $filter.
    :type proxy_addresses: list[str]
    :param renewed_date_time: Timestamp of when the group was last renewed. This cannot be modified
     directly and is only updated via the renew service action. The Timestamp type represents date
     and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC
     on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Returned by default. Read-only.
    :type renewed_date_time: ~datetime.datetime
    :param resource_behavior_options: Specifies the group behaviors that can be set for a Microsoft
     365 group during creation. This can be set only as part of creation (POST). Possible values are
     AllowOnlyMembersToPost, HideGroupInOutlook, SubscribeNewGroupMembers, WelcomeEmailDisabled. For
     more information, see Set Microsoft 365 group behaviors and provisioning options.
    :type resource_behavior_options: list[str]
    :param resource_provisioning_options: Specifies the group resources that are provisioned as
     part of Microsoft 365 group creation, that are not normally part of default group creation.
     Possible value is Team. For more information, see Set Microsoft 365 group behaviors and
     provisioning options.
    :type resource_provisioning_options: list[str]
    :param security_enabled: Specifies whether the group is a security group. Returned by default.
     Supports $filter.
    :type security_enabled: bool
    :param security_identifier: Security identifier of the group, used in Windows scenarios.
     Returned by default.
    :type security_identifier: str
    :param theme: Specifies an Microsoft 365 group's color theme. Possible values are Teal, Purple,
     Green, Blue, Pink, Orange or Red. Returned by default.
    :type theme: str
    :param visibility: Specifies the visibility of a Microsoft 365 group. Possible values are:
     Private, Public, or Hiddenmembership; blank values are treated as public.  See group visibility
     options to learn more.Visibility can be set only when a group is created; it is not
     editable.Visibility is supported only for unified groups; it is not supported for security
     groups. Returned by default.
    :type visibility: str
    :param access_type:  Possible values include: "none", "private", "secret", "public".
    :type access_type: str or ~files.models.MicrosoftGraphGroupAccessType
    :param allow_external_senders: Indicates if people external to the organization can send
     messages to the group. Default value is false. Returned only on $select.
    :type allow_external_senders: bool
    :param auto_subscribe_new_members: Indicates if new members added to the group will be auto-
     subscribed to receive email notifications. You can set this property in a PATCH request for the
     group; do not set it in the initial POST request that creates the group. Default value is
     false. Returned only on $select.
    :type auto_subscribe_new_members: bool
    :param hide_from_address_lists: True if the group is not displayed in certain parts of the
     Outlook UI: the Address Book, address lists for selecting message recipients, and the Browse
     Groups dialog for searching groups; otherwise, false. Default value is false. Returned only on
     $select.
    :type hide_from_address_lists: bool
    :param hide_from_outlook_clients: True if the group is not displayed in Outlook clients, such
     as Outlook for Windows and Outlook on the web; otherwise, false. Default value is false.
     Returned only on $select.
    :type hide_from_outlook_clients: bool
    :param is_favorite:
    :type is_favorite: bool
    :param is_subscribed_by_mail: Indicates whether the signed-in user is subscribed to receive
     email conversations. Default value is true. Returned only on $select.
    :type is_subscribed_by_mail: bool
    :param unseen_conversations_count:
    :type unseen_conversations_count: int
    :param unseen_count: Count of conversations that have received new posts since the signed-in
     user last visited the group. Returned only on $select.
    :type unseen_count: int
    :param unseen_messages_count:
    :type unseen_messages_count: int
    :param is_archived:
    :type is_archived: bool
    :param app_role_assignments:
    :type app_role_assignments: list[~files.models.MicrosoftGraphAppRoleAssignment]
    :param created_on_behalf_of: Represents an Azure Active Directory object. The directoryObject
     type is the base type for many other directory entity types.
    :type created_on_behalf_of: ~files.models.MicrosoftGraphDirectoryObject
    :param endpoints:
    :type endpoints: list[~files.models.MicrosoftGraphEndpoint]
    :param member_of: Groups that this group is a member of. HTTP Methods: GET (supported for all
     groups). Read-only. Nullable.
    :type member_of: list[~files.models.MicrosoftGraphDirectoryObject]
    :param members: Users and groups that are members of this group. HTTP Methods: GET (supported
     for all groups), POST (supported for Microsoft 365 groups, security groups and mail-enabled
     security groups), DELETE (supported for Microsoft 365 groups and security groups) Nullable.
    :type members: list[~files.models.MicrosoftGraphDirectoryObject]
    :param members_with_license_errors: A list of group members with license errors from this
     group-based license assignment. Read-only.
    :type members_with_license_errors: list[~files.models.MicrosoftGraphDirectoryObject]
    :param owners: The owners of the group. The owners are a set of non-admin users who are allowed
     to modify this object. Limited to 100 owners. HTTP Methods: GET (supported for all groups),
     POST (supported for Microsoft 365 groups, security groups and mail-enabled security groups),
     DELETE (supported for Microsoft 365 groups and security groups). Nullable.
    :type owners: list[~files.models.MicrosoftGraphDirectoryObject]
    :param permission_grants:
    :type permission_grants: list[~files.models.MicrosoftGraphResourceSpecificPermissionGrant]
    :param settings: Read-only. Nullable.
    :type settings: list[~files.models.MicrosoftGraphDirectorySetting]
    :param transitive_member_of:
    :type transitive_member_of: list[~files.models.MicrosoftGraphDirectoryObject]
    :param transitive_members:
    :type transitive_members: list[~files.models.MicrosoftGraphDirectoryObject]
    :param accepted_senders: The list of users or groups that are allowed to create post's or
     calendar events in this group. If this list is non-empty then only users or groups listed here
     are allowed to post.
    :type accepted_senders: list[~files.models.MicrosoftGraphDirectoryObject]
    :param calendar: calendar.
    :type calendar: ~files.models.MicrosoftGraphCalendar
    :param calendar_view: The calendar view for the calendar. Read-only.
    :type calendar_view: list[~files.models.MicrosoftGraphEvent]
    :param conversations: The group's conversations.
    :type conversations: list[~files.models.MicrosoftGraphConversation]
    :param events: The group's calendar events.
    :type events: list[~files.models.MicrosoftGraphEvent]
    :param photo: profilePhoto.
    :type photo: ~files.models.MicrosoftGraphProfilePhoto
    :param photos: The profile photos owned by the group. Read-only. Nullable.
    :type photos: list[~files.models.MicrosoftGraphProfilePhoto]
    :param rejected_senders: The list of users or groups that are not allowed to create posts or
     calendar events in this group. Nullable.
    :type rejected_senders: list[~files.models.MicrosoftGraphDirectoryObject]
    :param threads: The group's conversation threads. Nullable.
    :type threads: list[~files.models.MicrosoftGraphConversationThread]
    :param drive: drive.
    :type drive: ~files.models.MicrosoftGraphDrive
    :param drives: The group's drives. Read-only.
    :type drives: list[~files.models.MicrosoftGraphDrive]
    :param sites: The list of SharePoint sites in this group. Access the default site with
     /sites/root.
    :type sites: list[~files.models.MicrosoftGraphSite]
    :param extensions: The collection of open extensions defined for the group. Read-only.
     Nullable.
    :type extensions: list[~files.models.MicrosoftGraphExtension]
    :param group_lifecycle_policies: The collection of lifecycle policies for this group. Read-
     only. Nullable.
    :type group_lifecycle_policies: list[~files.models.MicrosoftGraphGroupLifecyclePolicy]
    :param planner: plannerGroup.
    :type planner: ~files.models.MicrosoftGraphPlannerGroup
    :param onenote: onenote.
    :type onenote: ~files.models.MicrosoftGraphOnenote
    :param team: team.
    :type team: ~files.models.MicrosoftGraphTeam
    """

    _validation = {
        'unseen_conversations_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'unseen_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'unseen_messages_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'assigned_labels': {'key': 'assignedLabels', 'type': '[MicrosoftGraphAssignedLabel]'},
        'assigned_licenses': {'key': 'assignedLicenses', 'type': '[MicrosoftGraphAssignedLicense]'},
        'classification': {'key': 'classification', 'type': 'str'},
        'created_by_app_id': {'key': 'createdByAppId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'group_types': {'key': 'groupTypes', 'type': '[str]'},
        'has_members_with_license_errors': {'key': 'hasMembersWithLicenseErrors', 'type': 'bool'},
        'info_catalogs': {'key': 'infoCatalogs', 'type': '[str]'},
        'is_assignable_to_role': {'key': 'isAssignableToRole', 'type': 'bool'},
        'license_processing_state': {'key': 'licenseProcessingState', 'type': 'MicrosoftGraphLicenseProcessingState'},
        'mail': {'key': 'mail', 'type': 'str'},
        'mail_enabled': {'key': 'mailEnabled', 'type': 'bool'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'mdm_app_id': {'key': 'mdmAppId', 'type': 'str'},
        'membership_rule': {'key': 'membershipRule', 'type': 'str'},
        'membership_rule_processing_state': {'key': 'membershipRuleProcessingState', 'type': 'str'},
        'on_premises_domain_name': {'key': 'onPremisesDomainName', 'type': 'str'},
        'on_premises_last_sync_date_time': {'key': 'onPremisesLastSyncDateTime', 'type': 'iso-8601'},
        'on_premises_net_bios_name': {'key': 'onPremisesNetBiosName', 'type': 'str'},
        'on_premises_provisioning_errors': {'key': 'onPremisesProvisioningErrors', 'type': '[MicrosoftGraphOnPremisesProvisioningError]'},
        'on_premises_sam_account_name': {'key': 'onPremisesSamAccountName', 'type': 'str'},
        'on_premises_security_identifier': {'key': 'onPremisesSecurityIdentifier', 'type': 'str'},
        'on_premises_sync_enabled': {'key': 'onPremisesSyncEnabled', 'type': 'bool'},
        'preferred_data_location': {'key': 'preferredDataLocation', 'type': 'str'},
        'preferred_language': {'key': 'preferredLanguage', 'type': 'str'},
        'proxy_addresses': {'key': 'proxyAddresses', 'type': '[str]'},
        'renewed_date_time': {'key': 'renewedDateTime', 'type': 'iso-8601'},
        'resource_behavior_options': {'key': 'resourceBehaviorOptions', 'type': '[str]'},
        'resource_provisioning_options': {'key': 'resourceProvisioningOptions', 'type': '[str]'},
        'security_enabled': {'key': 'securityEnabled', 'type': 'bool'},
        'security_identifier': {'key': 'securityIdentifier', 'type': 'str'},
        'theme': {'key': 'theme', 'type': 'str'},
        'visibility': {'key': 'visibility', 'type': 'str'},
        'access_type': {'key': 'accessType', 'type': 'str'},
        'allow_external_senders': {'key': 'allowExternalSenders', 'type': 'bool'},
        'auto_subscribe_new_members': {'key': 'autoSubscribeNewMembers', 'type': 'bool'},
        'hide_from_address_lists': {'key': 'hideFromAddressLists', 'type': 'bool'},
        'hide_from_outlook_clients': {'key': 'hideFromOutlookClients', 'type': 'bool'},
        'is_favorite': {'key': 'isFavorite', 'type': 'bool'},
        'is_subscribed_by_mail': {'key': 'isSubscribedByMail', 'type': 'bool'},
        'unseen_conversations_count': {'key': 'unseenConversationsCount', 'type': 'int'},
        'unseen_count': {'key': 'unseenCount', 'type': 'int'},
        'unseen_messages_count': {'key': 'unseenMessagesCount', 'type': 'int'},
        'is_archived': {'key': 'isArchived', 'type': 'bool'},
        'app_role_assignments': {'key': 'appRoleAssignments', 'type': '[MicrosoftGraphAppRoleAssignment]'},
        'created_on_behalf_of': {'key': 'createdOnBehalfOf', 'type': 'MicrosoftGraphDirectoryObject'},
        'endpoints': {'key': 'endpoints', 'type': '[MicrosoftGraphEndpoint]'},
        'member_of': {'key': 'memberOf', 'type': '[MicrosoftGraphDirectoryObject]'},
        'members': {'key': 'members', 'type': '[MicrosoftGraphDirectoryObject]'},
        'members_with_license_errors': {'key': 'membersWithLicenseErrors', 'type': '[MicrosoftGraphDirectoryObject]'},
        'owners': {'key': 'owners', 'type': '[MicrosoftGraphDirectoryObject]'},
        'permission_grants': {'key': 'permissionGrants', 'type': '[MicrosoftGraphResourceSpecificPermissionGrant]'},
        'settings': {'key': 'settings', 'type': '[MicrosoftGraphDirectorySetting]'},
        'transitive_member_of': {'key': 'transitiveMemberOf', 'type': '[MicrosoftGraphDirectoryObject]'},
        'transitive_members': {'key': 'transitiveMembers', 'type': '[MicrosoftGraphDirectoryObject]'},
        'accepted_senders': {'key': 'acceptedSenders', 'type': '[MicrosoftGraphDirectoryObject]'},
        'calendar': {'key': 'calendar', 'type': 'MicrosoftGraphCalendar'},
        'calendar_view': {'key': 'calendarView', 'type': '[MicrosoftGraphEvent]'},
        'conversations': {'key': 'conversations', 'type': '[MicrosoftGraphConversation]'},
        'events': {'key': 'events', 'type': '[MicrosoftGraphEvent]'},
        'photo': {'key': 'photo', 'type': 'MicrosoftGraphProfilePhoto'},
        'photos': {'key': 'photos', 'type': '[MicrosoftGraphProfilePhoto]'},
        'rejected_senders': {'key': 'rejectedSenders', 'type': '[MicrosoftGraphDirectoryObject]'},
        'threads': {'key': 'threads', 'type': '[MicrosoftGraphConversationThread]'},
        'drive': {'key': 'drive', 'type': 'MicrosoftGraphDrive'},
        'drives': {'key': 'drives', 'type': '[MicrosoftGraphDrive]'},
        'sites': {'key': 'sites', 'type': '[MicrosoftGraphSite]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphExtension]'},
        'group_lifecycle_policies': {'key': 'groupLifecyclePolicies', 'type': '[MicrosoftGraphGroupLifecyclePolicy]'},
        'planner': {'key': 'planner', 'type': 'MicrosoftGraphPlannerGroup'},
        'onenote': {'key': 'onenote', 'type': 'MicrosoftGraphOnenote'},
        'team': {'key': 'team', 'type': 'MicrosoftGraphTeam'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphGroup, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.assigned_labels = kwargs.get('assigned_labels', None)
        self.assigned_licenses = kwargs.get('assigned_licenses', None)
        self.classification = kwargs.get('classification', None)
        self.created_by_app_id = kwargs.get('created_by_app_id', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.group_types = kwargs.get('group_types', None)
        self.has_members_with_license_errors = kwargs.get('has_members_with_license_errors', None)
        self.info_catalogs = kwargs.get('info_catalogs', None)
        self.is_assignable_to_role = kwargs.get('is_assignable_to_role', None)
        self.license_processing_state = kwargs.get('license_processing_state', None)
        self.mail = kwargs.get('mail', None)
        self.mail_enabled = kwargs.get('mail_enabled', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
        self.mdm_app_id = kwargs.get('mdm_app_id', None)
        self.membership_rule = kwargs.get('membership_rule', None)
        self.membership_rule_processing_state = kwargs.get('membership_rule_processing_state', None)
        self.on_premises_domain_name = kwargs.get('on_premises_domain_name', None)
        self.on_premises_last_sync_date_time = kwargs.get('on_premises_last_sync_date_time', None)
        self.on_premises_net_bios_name = kwargs.get('on_premises_net_bios_name', None)
        self.on_premises_provisioning_errors = kwargs.get('on_premises_provisioning_errors', None)
        self.on_premises_sam_account_name = kwargs.get('on_premises_sam_account_name', None)
        self.on_premises_security_identifier = kwargs.get('on_premises_security_identifier', None)
        self.on_premises_sync_enabled = kwargs.get('on_premises_sync_enabled', None)
        self.preferred_data_location = kwargs.get('preferred_data_location', None)
        self.preferred_language = kwargs.get('preferred_language', None)
        self.proxy_addresses = kwargs.get('proxy_addresses', None)
        self.renewed_date_time = kwargs.get('renewed_date_time', None)
        self.resource_behavior_options = kwargs.get('resource_behavior_options', None)
        self.resource_provisioning_options = kwargs.get('resource_provisioning_options', None)
        self.security_enabled = kwargs.get('security_enabled', None)
        self.security_identifier = kwargs.get('security_identifier', None)
        self.theme = kwargs.get('theme', None)
        self.visibility = kwargs.get('visibility', None)
        self.access_type = kwargs.get('access_type', None)
        self.allow_external_senders = kwargs.get('allow_external_senders', None)
        self.auto_subscribe_new_members = kwargs.get('auto_subscribe_new_members', None)
        self.hide_from_address_lists = kwargs.get('hide_from_address_lists', None)
        self.hide_from_outlook_clients = kwargs.get('hide_from_outlook_clients', None)
        self.is_favorite = kwargs.get('is_favorite', None)
        self.is_subscribed_by_mail = kwargs.get('is_subscribed_by_mail', None)
        self.unseen_conversations_count = kwargs.get('unseen_conversations_count', None)
        self.unseen_count = kwargs.get('unseen_count', None)
        self.unseen_messages_count = kwargs.get('unseen_messages_count', None)
        self.is_archived = kwargs.get('is_archived', None)
        self.app_role_assignments = kwargs.get('app_role_assignments', None)
        self.created_on_behalf_of = kwargs.get('created_on_behalf_of', None)
        self.endpoints = kwargs.get('endpoints', None)
        self.member_of = kwargs.get('member_of', None)
        self.members = kwargs.get('members', None)
        self.members_with_license_errors = kwargs.get('members_with_license_errors', None)
        self.owners = kwargs.get('owners', None)
        self.permission_grants = kwargs.get('permission_grants', None)
        self.settings = kwargs.get('settings', None)
        self.transitive_member_of = kwargs.get('transitive_member_of', None)
        self.transitive_members = kwargs.get('transitive_members', None)
        self.accepted_senders = kwargs.get('accepted_senders', None)
        self.calendar = kwargs.get('calendar', None)
        self.calendar_view = kwargs.get('calendar_view', None)
        self.conversations = kwargs.get('conversations', None)
        self.events = kwargs.get('events', None)
        self.photo = kwargs.get('photo', None)
        self.photos = kwargs.get('photos', None)
        self.rejected_senders = kwargs.get('rejected_senders', None)
        self.threads = kwargs.get('threads', None)
        self.drive = kwargs.get('drive', None)
        self.drives = kwargs.get('drives', None)
        self.sites = kwargs.get('sites', None)
        self.extensions = kwargs.get('extensions', None)
        self.group_lifecycle_policies = kwargs.get('group_lifecycle_policies', None)
        self.planner = kwargs.get('planner', None)
        self.onenote = kwargs.get('onenote', None)
        self.team = kwargs.get('team', None)


class MicrosoftGraphGroupLifecyclePolicy(MicrosoftGraphEntity):
    """groupLifecyclePolicy.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param alternate_notification_emails: List of email address to send notifications for groups
     without owners. Multiple email address can be defined by separating email address with a
     semicolon.
    :type alternate_notification_emails: str
    :param group_lifetime_in_days: Number of days before a group expires and needs to be renewed.
     Once renewed, the group expiration is extended by the number of days defined.
    :type group_lifetime_in_days: int
    :param managed_group_types: The group type for which the expiration policy applies. Possible
     values are All, Selected or None.
    :type managed_group_types: str
    """

    _validation = {
        'group_lifetime_in_days': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'alternate_notification_emails': {'key': 'alternateNotificationEmails', 'type': 'str'},
        'group_lifetime_in_days': {'key': 'groupLifetimeInDays', 'type': 'int'},
        'managed_group_types': {'key': 'managedGroupTypes', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphGroupLifecyclePolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.alternate_notification_emails = kwargs.get('alternate_notification_emails', None)
        self.group_lifetime_in_days = kwargs.get('group_lifetime_in_days', None)
        self.managed_group_types = kwargs.get('managed_group_types', None)


class MicrosoftGraphHardwareInformation(msrest.serialization.Model):
    """Hardware information of a given device.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param battery_charge_cycles: The number of charge cycles the device???s current battery has
     gone through. Valid values 0 to 2147483647.
    :type battery_charge_cycles: int
    :param battery_health_percentage: The device???s current battery???s health percentage. Valid
     values 0 to 100.
    :type battery_health_percentage: int
    :param battery_serial_number: The serial number of the device???s current battery.
    :type battery_serial_number: str
    :param cellular_technology: Cellular technology of the device.
    :type cellular_technology: str
    :param device_full_qualified_domain_name: Returns the fully qualified domain name of the device
     (if any). If the device is not domain-joined, it returns an empty string.
    :type device_full_qualified_domain_name: str
    :param device_guard_local_system_authority_credential_guard_state:  Possible values include:
     "running", "rebootRequired", "notLicensed", "notConfigured",
     "virtualizationBasedSecurityNotRunning".
    :type device_guard_local_system_authority_credential_guard_state: str or
     ~files.models.MicrosoftGraphDeviceGuardLocalSystemAuthorityCredentialGuardState
    :param device_guard_virtualization_based_security_hardware_requirement_state:  Possible values
     include: "meetHardwareRequirements", "secureBootRequired", "dmaProtectionRequired",
     "hyperVNotSupportedForGuestVM", "hyperVNotAvailable".
    :type device_guard_virtualization_based_security_hardware_requirement_state: str or
     ~files.models.MicrosoftGraphDeviceGuardVirtualizationBasedSecurityHardwareRequirementState
    :param device_guard_virtualization_based_security_state:  Possible values include: "running",
     "rebootRequired", "require64BitArchitecture", "notLicensed", "notConfigured",
     "doesNotMeetHardwareRequirements", "other".
    :type device_guard_virtualization_based_security_state: str or
     ~files.models.MicrosoftGraphDeviceGuardVirtualizationBasedSecurityState
    :param free_storage_space: Free storage space of the device.
    :type free_storage_space: long
    :param imei: IMEI.
    :type imei: str
    :param ip_address_v4: IPAddressV4.
    :type ip_address_v4: str
    :param is_encrypted: Encryption status of the device.
    :type is_encrypted: bool
    :param is_shared_device: Shared iPad.
    :type is_shared_device: bool
    :param is_supervised: Supervised mode of the device.
    :type is_supervised: bool
    :param manufacturer: Manufacturer of the device.
    :type manufacturer: str
    :param meid: MEID.
    :type meid: str
    :param model: Model of the device.
    :type model: str
    :param operating_system_edition: String that specifies the OS edition.
    :type operating_system_edition: str
    :param operating_system_language: Operating system language of the device.
    :type operating_system_language: str
    :param operating_system_product_type: Int that specifies the Windows Operating System
     ProductType. More details here https://go.microsoft.com/fwlink/?linkid=2126950. Valid values 0
     to 2147483647.
    :type operating_system_product_type: int
    :param os_build_number: Operating System Build Number on Android device.
    :type os_build_number: str
    :param phone_number: Phone number of the device.
    :type phone_number: str
    :param serial_number: Serial number.
    :type serial_number: str
    :param shared_device_cached_users: All users on the shared Apple device.
    :type shared_device_cached_users: list[~files.models.MicrosoftGraphSharedAppleDeviceUser]
    :param subnet_address: SubnetAddress.
    :type subnet_address: str
    :param subscriber_carrier: Subscriber carrier of the device.
    :type subscriber_carrier: str
    :param total_storage_space: Total storage space of the device.
    :type total_storage_space: long
    :param tpm_specification_version: String that specifies the specification version.
    :type tpm_specification_version: str
    :param wifi_mac: WiFi MAC address of the device.
    :type wifi_mac: str
    """

    _validation = {
        'battery_charge_cycles': {'maximum': 2147483647, 'minimum': -2147483648},
        'battery_health_percentage': {'maximum': 2147483647, 'minimum': -2147483648},
        'operating_system_product_type': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'battery_charge_cycles': {'key': 'batteryChargeCycles', 'type': 'int'},
        'battery_health_percentage': {'key': 'batteryHealthPercentage', 'type': 'int'},
        'battery_serial_number': {'key': 'batterySerialNumber', 'type': 'str'},
        'cellular_technology': {'key': 'cellularTechnology', 'type': 'str'},
        'device_full_qualified_domain_name': {'key': 'deviceFullQualifiedDomainName', 'type': 'str'},
        'device_guard_local_system_authority_credential_guard_state': {'key': 'deviceGuardLocalSystemAuthorityCredentialGuardState', 'type': 'str'},
        'device_guard_virtualization_based_security_hardware_requirement_state': {'key': 'deviceGuardVirtualizationBasedSecurityHardwareRequirementState', 'type': 'str'},
        'device_guard_virtualization_based_security_state': {'key': 'deviceGuardVirtualizationBasedSecurityState', 'type': 'str'},
        'free_storage_space': {'key': 'freeStorageSpace', 'type': 'long'},
        'imei': {'key': 'imei', 'type': 'str'},
        'ip_address_v4': {'key': 'ipAddressV4', 'type': 'str'},
        'is_encrypted': {'key': 'isEncrypted', 'type': 'bool'},
        'is_shared_device': {'key': 'isSharedDevice', 'type': 'bool'},
        'is_supervised': {'key': 'isSupervised', 'type': 'bool'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'meid': {'key': 'meid', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'operating_system_edition': {'key': 'operatingSystemEdition', 'type': 'str'},
        'operating_system_language': {'key': 'operatingSystemLanguage', 'type': 'str'},
        'operating_system_product_type': {'key': 'operatingSystemProductType', 'type': 'int'},
        'os_build_number': {'key': 'osBuildNumber', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'serial_number': {'key': 'serialNumber', 'type': 'str'},
        'shared_device_cached_users': {'key': 'sharedDeviceCachedUsers', 'type': '[MicrosoftGraphSharedAppleDeviceUser]'},
        'subnet_address': {'key': 'subnetAddress', 'type': 'str'},
        'subscriber_carrier': {'key': 'subscriberCarrier', 'type': 'str'},
        'total_storage_space': {'key': 'totalStorageSpace', 'type': 'long'},
        'tpm_specification_version': {'key': 'tpmSpecificationVersion', 'type': 'str'},
        'wifi_mac': {'key': 'wifiMac', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphHardwareInformation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.battery_charge_cycles = kwargs.get('battery_charge_cycles', None)
        self.battery_health_percentage = kwargs.get('battery_health_percentage', None)
        self.battery_serial_number = kwargs.get('battery_serial_number', None)
        self.cellular_technology = kwargs.get('cellular_technology', None)
        self.device_full_qualified_domain_name = kwargs.get('device_full_qualified_domain_name', None)
        self.device_guard_local_system_authority_credential_guard_state = kwargs.get('device_guard_local_system_authority_credential_guard_state', None)
        self.device_guard_virtualization_based_security_hardware_requirement_state = kwargs.get('device_guard_virtualization_based_security_hardware_requirement_state', None)
        self.device_guard_virtualization_based_security_state = kwargs.get('device_guard_virtualization_based_security_state', None)
        self.free_storage_space = kwargs.get('free_storage_space', None)
        self.imei = kwargs.get('imei', None)
        self.ip_address_v4 = kwargs.get('ip_address_v4', None)
        self.is_encrypted = kwargs.get('is_encrypted', None)
        self.is_shared_device = kwargs.get('is_shared_device', None)
        self.is_supervised = kwargs.get('is_supervised', None)
        self.manufacturer = kwargs.get('manufacturer', None)
        self.meid = kwargs.get('meid', None)
        self.model = kwargs.get('model', None)
        self.operating_system_edition = kwargs.get('operating_system_edition', None)
        self.operating_system_language = kwargs.get('operating_system_language', None)
        self.operating_system_product_type = kwargs.get('operating_system_product_type', None)
        self.os_build_number = kwargs.get('os_build_number', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.serial_number = kwargs.get('serial_number', None)
        self.shared_device_cached_users = kwargs.get('shared_device_cached_users', None)
        self.subnet_address = kwargs.get('subnet_address', None)
        self.subscriber_carrier = kwargs.get('subscriber_carrier', None)
        self.total_storage_space = kwargs.get('total_storage_space', None)
        self.tpm_specification_version = kwargs.get('tpm_specification_version', None)
        self.wifi_mac = kwargs.get('wifi_mac', None)


class MicrosoftGraphHashes(msrest.serialization.Model):
    """hashes.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param crc32_hash: The CRC32 value of the file in little endian (if available). Read-only.
    :type crc32_hash: str
    :param quick_xor_hash: A proprietary hash of the file that can be used to determine if the
     contents of the file have changed (if available). Read-only.
    :type quick_xor_hash: str
    :param sha1_hash: SHA1 hash for the contents of the file (if available). Read-only.
    :type sha1_hash: str
    :param sha256_hash: SHA256 hash for the contents of the file (if available). Read-only.
    :type sha256_hash: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'crc32_hash': {'key': 'crc32Hash', 'type': 'str'},
        'quick_xor_hash': {'key': 'quickXorHash', 'type': 'str'},
        'sha1_hash': {'key': 'sha1Hash', 'type': 'str'},
        'sha256_hash': {'key': 'sha256Hash', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphHashes, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.crc32_hash = kwargs.get('crc32_hash', None)
        self.quick_xor_hash = kwargs.get('quick_xor_hash', None)
        self.sha1_hash = kwargs.get('sha1_hash', None)
        self.sha256_hash = kwargs.get('sha256_hash', None)


class MicrosoftGraphIdentity(msrest.serialization.Model):
    """identity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    :param id: Unique identifier for the identity.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphIdentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.id = kwargs.get('id', None)


class MicrosoftGraphIdentitySet(msrest.serialization.Model):
    """identitySet.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param application: identity.
    :type application: ~files.models.MicrosoftGraphIdentity
    :param device: identity.
    :type device: ~files.models.MicrosoftGraphIdentity
    :param user: identity.
    :type user: ~files.models.MicrosoftGraphIdentity
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'application': {'key': 'application', 'type': 'MicrosoftGraphIdentity'},
        'device': {'key': 'device', 'type': 'MicrosoftGraphIdentity'},
        'user': {'key': 'user', 'type': 'MicrosoftGraphIdentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphIdentitySet, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.application = kwargs.get('application', None)
        self.device = kwargs.get('device', None)
        self.user = kwargs.get('user', None)


class MicrosoftGraphImage(msrest.serialization.Model):
    """image.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param height: Optional. Height of the image, in pixels. Read-only.
    :type height: int
    :param width: Optional. Width of the image, in pixels. Read-only.
    :type width: int
    """

    _validation = {
        'height': {'maximum': 2147483647, 'minimum': -2147483648},
        'width': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'height': {'key': 'height', 'type': 'int'},
        'width': {'key': 'width', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphImage, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.height = kwargs.get('height', None)
        self.width = kwargs.get('width', None)


class MicrosoftGraphImageInfo(msrest.serialization.Model):
    """imageInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param add_image_query: Optional; parameter used to indicate the server is able to render image
     dynamically in response to parameterization. For example – a high contrast image.
    :type add_image_query: bool
    :param alternate_text: Optional; alt-text accessible content for the image.
    :type alternate_text: str
    :param alternative_text:
    :type alternative_text: str
    :param icon_url: Optional; URI that points to an icon which represents the application used to
     generate the activity.
    :type icon_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'add_image_query': {'key': 'addImageQuery', 'type': 'bool'},
        'alternate_text': {'key': 'alternateText', 'type': 'str'},
        'alternative_text': {'key': 'alternativeText', 'type': 'str'},
        'icon_url': {'key': 'iconUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphImageInfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.add_image_query = kwargs.get('add_image_query', None)
        self.alternate_text = kwargs.get('alternate_text', None)
        self.alternative_text = kwargs.get('alternative_text', None)
        self.icon_url = kwargs.get('icon_url', None)


class MicrosoftGraphIncompleteData(msrest.serialization.Model):
    """incompleteData.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param missing_data_before_date_time: The service does not have source data before the
     specified time.
    :type missing_data_before_date_time: ~datetime.datetime
    :param was_throttled: Some data was not recorded due to excessive activity.
    :type was_throttled: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'missing_data_before_date_time': {'key': 'missingDataBeforeDateTime', 'type': 'iso-8601'},
        'was_throttled': {'key': 'wasThrottled', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphIncompleteData, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.missing_data_before_date_time = kwargs.get('missing_data_before_date_time', None)
        self.was_throttled = kwargs.get('was_throttled', None)


class MicrosoftGraphInferenceClassification(MicrosoftGraphEntity):
    """inferenceClassification.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param overrides: A set of overrides for a user to always classify messages from specific
     senders in certain ways: focused, or other. Read-only. Nullable.
    :type overrides: list[~files.models.MicrosoftGraphInferenceClassificationOverride]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'overrides': {'key': 'overrides', 'type': '[MicrosoftGraphInferenceClassificationOverride]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphInferenceClassification, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.overrides = kwargs.get('overrides', None)


class MicrosoftGraphInferenceClassificationOverride(MicrosoftGraphEntity):
    """inferenceClassificationOverride.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param classify_as:  Possible values include: "focused", "other".
    :type classify_as: str or ~files.models.MicrosoftGraphInferenceClassificationType
    :param sender_email_address: emailAddress.
    :type sender_email_address: ~files.models.MicrosoftGraphEmailAddress
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'classify_as': {'key': 'classifyAs', 'type': 'str'},
        'sender_email_address': {'key': 'senderEmailAddress', 'type': 'MicrosoftGraphEmailAddress'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphInferenceClassificationOverride, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.classify_as = kwargs.get('classify_as', None)
        self.sender_email_address = kwargs.get('sender_email_address', None)


class MicrosoftGraphInferenceData(msrest.serialization.Model):
    """inferenceData.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param confidence_score:
    :type confidence_score: float
    :param user_has_verified_accuracy:
    :type user_has_verified_accuracy: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'user_has_verified_accuracy': {'key': 'userHasVerifiedAccuracy', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphInferenceData, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.confidence_score = kwargs.get('confidence_score', None)
        self.user_has_verified_accuracy = kwargs.get('user_has_verified_accuracy', None)


class MicrosoftGraphInformationProtection(MicrosoftGraphEntity):
    """informationProtection.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param policy: informationProtectionPolicy.
    :type policy: ~files.models.MicrosoftGraphInformationProtectionPolicy
    :param data_loss_prevention_policies:
    :type data_loss_prevention_policies: list[~files.models.MicrosoftGraphDataLossPreventionPolicy]
    :param sensitivity_labels:
    :type sensitivity_labels: list[~files.models.MicrosoftGraphSensitivityLabel]
    :param sensitivity_policy_settings: sensitivityPolicySettings.
    :type sensitivity_policy_settings: ~files.models.MicrosoftGraphSensitivityPolicySettings
    :param threat_assessment_requests:
    :type threat_assessment_requests: list[~files.models.MicrosoftGraphThreatAssessmentRequest]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'policy': {'key': 'policy', 'type': 'MicrosoftGraphInformationProtectionPolicy'},
        'data_loss_prevention_policies': {'key': 'dataLossPreventionPolicies', 'type': '[MicrosoftGraphDataLossPreventionPolicy]'},
        'sensitivity_labels': {'key': 'sensitivityLabels', 'type': '[MicrosoftGraphSensitivityLabel]'},
        'sensitivity_policy_settings': {'key': 'sensitivityPolicySettings', 'type': 'MicrosoftGraphSensitivityPolicySettings'},
        'threat_assessment_requests': {'key': 'threatAssessmentRequests', 'type': '[MicrosoftGraphThreatAssessmentRequest]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphInformationProtection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.policy = kwargs.get('policy', None)
        self.data_loss_prevention_policies = kwargs.get('data_loss_prevention_policies', None)
        self.sensitivity_labels = kwargs.get('sensitivity_labels', None)
        self.sensitivity_policy_settings = kwargs.get('sensitivity_policy_settings', None)
        self.threat_assessment_requests = kwargs.get('threat_assessment_requests', None)


class MicrosoftGraphInformationProtectionLabel(MicrosoftGraphEntity):
    """informationProtectionLabel.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param color:
    :type color: str
    :param description:
    :type description: str
    :param is_active:
    :type is_active: bool
    :param name:
    :type name: str
    :param parent: parentLabelDetails.
    :type parent: ~files.models.MicrosoftGraphParentLabelDetails
    :param sensitivity:
    :type sensitivity: int
    :param tooltip:
    :type tooltip: str
    """

    _validation = {
        'sensitivity': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'color': {'key': 'color', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'is_active': {'key': 'isActive', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'parent': {'key': 'parent', 'type': 'MicrosoftGraphParentLabelDetails'},
        'sensitivity': {'key': 'sensitivity', 'type': 'int'},
        'tooltip': {'key': 'tooltip', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphInformationProtectionLabel, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.color = kwargs.get('color', None)
        self.description = kwargs.get('description', None)
        self.is_active = kwargs.get('is_active', None)
        self.name = kwargs.get('name', None)
        self.parent = kwargs.get('parent', None)
        self.sensitivity = kwargs.get('sensitivity', None)
        self.tooltip = kwargs.get('tooltip', None)


class MicrosoftGraphInformationProtectionPolicy(MicrosoftGraphEntity):
    """informationProtectionPolicy.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param labels:
    :type labels: list[~files.models.MicrosoftGraphInformationProtectionLabel]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'labels': {'key': 'labels', 'type': '[MicrosoftGraphInformationProtectionLabel]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphInformationProtectionPolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.labels = kwargs.get('labels', None)


class MicrosoftGraphInsightIdentity(msrest.serialization.Model):
    """insightIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: The email address of the user who shared the item.
    :type address: str
    :param display_name: The display name of the user who shared the item.
    :type display_name: str
    :param id: The id of the user who shared the item.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphInsightIdentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.display_name = kwargs.get('display_name', None)
        self.id = kwargs.get('id', None)


class MicrosoftGraphInstitutionData(msrest.serialization.Model):
    """institutionData.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param location: physicalAddress.
    :type location: ~files.models.MicrosoftGraphPhysicalAddress
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'location': {'key': 'location', 'type': 'MicrosoftGraphPhysicalAddress'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphInstitutionData, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.location = kwargs.get('location', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphInternetMessageHeader(msrest.serialization.Model):
    """internetMessageHeader.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Represents the key in a key-value pair.
    :type name: str
    :param value: The value in a key-value pair.
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphInternetMessageHeader, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class MicrosoftGraphItemActionSet(msrest.serialization.Model):
    """itemActionSet.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param comment: commentAction.
    :type comment: ~files.models.MicrosoftGraphCommentAction
    :param create: createAction.
    :type create: dict[str, object]
    :param delete: deleteAction.
    :type delete: ~files.models.MicrosoftGraphDeleteAction
    :param edit: editAction.
    :type edit: dict[str, object]
    :param mention: mentionAction.
    :type mention: ~files.models.MicrosoftGraphMentionAction
    :param move: moveAction.
    :type move: ~files.models.MicrosoftGraphMoveAction
    :param rename: renameAction.
    :type rename: ~files.models.MicrosoftGraphRenameAction
    :param restore: restoreAction.
    :type restore: dict[str, object]
    :param share: shareAction.
    :type share: ~files.models.MicrosoftGraphShareAction
    :param version: versionAction.
    :type version: ~files.models.MicrosoftGraphVersionAction
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'comment': {'key': 'comment', 'type': 'MicrosoftGraphCommentAction'},
        'create': {'key': 'create', 'type': '{object}'},
        'delete': {'key': 'delete', 'type': 'MicrosoftGraphDeleteAction'},
        'edit': {'key': 'edit', 'type': '{object}'},
        'mention': {'key': 'mention', 'type': 'MicrosoftGraphMentionAction'},
        'move': {'key': 'move', 'type': 'MicrosoftGraphMoveAction'},
        'rename': {'key': 'rename', 'type': 'MicrosoftGraphRenameAction'},
        'restore': {'key': 'restore', 'type': '{object}'},
        'share': {'key': 'share', 'type': 'MicrosoftGraphShareAction'},
        'version': {'key': 'version', 'type': 'MicrosoftGraphVersionAction'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemActionSet, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.comment = kwargs.get('comment', None)
        self.create = kwargs.get('create', None)
        self.delete = kwargs.get('delete', None)
        self.edit = kwargs.get('edit', None)
        self.mention = kwargs.get('mention', None)
        self.move = kwargs.get('move', None)
        self.rename = kwargs.get('rename', None)
        self.restore = kwargs.get('restore', None)
        self.share = kwargs.get('share', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphItemActionStat(msrest.serialization.Model):
    """itemActionStat.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param action_count: The number of times the action took place. Read-only.
    :type action_count: int
    :param actor_count: The number of distinct actors that performed the action. Read-only.
    :type actor_count: int
    """

    _validation = {
        'action_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'actor_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'action_count': {'key': 'actionCount', 'type': 'int'},
        'actor_count': {'key': 'actorCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemActionStat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.action_count = kwargs.get('action_count', None)
        self.actor_count = kwargs.get('actor_count', None)


class MicrosoftGraphItemActivity(MicrosoftGraphEntity):
    """itemActivity.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param access: accessAction.
    :type access: dict[str, object]
    :param activity_date_time: Details about when the activity took place. Read-only.
    :type activity_date_time: ~datetime.datetime
    :param actor: identitySet.
    :type actor: ~files.models.MicrosoftGraphIdentitySet
    :param drive_item: driveItem.
    :type drive_item: ~files.models.MicrosoftGraphDriveItem
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'access': {'key': 'access', 'type': '{object}'},
        'activity_date_time': {'key': 'activityDateTime', 'type': 'iso-8601'},
        'actor': {'key': 'actor', 'type': 'MicrosoftGraphIdentitySet'},
        'drive_item': {'key': 'driveItem', 'type': 'MicrosoftGraphDriveItem'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemActivity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.access = kwargs.get('access', None)
        self.activity_date_time = kwargs.get('activity_date_time', None)
        self.actor = kwargs.get('actor', None)
        self.drive_item = kwargs.get('drive_item', None)


class MicrosoftGraphItemActivityOld(MicrosoftGraphEntity):
    """itemActivityOLD.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param times: itemActivityTimeSet.
    :type times: ~files.models.MicrosoftGraphItemActivityTimeSet
    :param drive_item: driveItem.
    :type drive_item: ~files.models.MicrosoftGraphDriveItem
    :param list_item: listItem.
    :type list_item: ~files.models.MicrosoftGraphListItem
    :param application: identity.
    :type application: ~files.models.MicrosoftGraphIdentity
    :param device: identity.
    :type device: ~files.models.MicrosoftGraphIdentity
    :param user: identity.
    :type user: ~files.models.MicrosoftGraphIdentity
    :param comment: commentAction.
    :type comment: ~files.models.MicrosoftGraphCommentAction
    :param create: createAction.
    :type create: dict[str, object]
    :param delete: deleteAction.
    :type delete: ~files.models.MicrosoftGraphDeleteAction
    :param edit: editAction.
    :type edit: dict[str, object]
    :param mention: mentionAction.
    :type mention: ~files.models.MicrosoftGraphMentionAction
    :param move: moveAction.
    :type move: ~files.models.MicrosoftGraphMoveAction
    :param rename: renameAction.
    :type rename: ~files.models.MicrosoftGraphRenameAction
    :param restore: restoreAction.
    :type restore: dict[str, object]
    :param share: shareAction.
    :type share: ~files.models.MicrosoftGraphShareAction
    :param version: versionAction.
    :type version: ~files.models.MicrosoftGraphVersionAction
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'times': {'key': 'times', 'type': 'MicrosoftGraphItemActivityTimeSet'},
        'drive_item': {'key': 'driveItem', 'type': 'MicrosoftGraphDriveItem'},
        'list_item': {'key': 'listItem', 'type': 'MicrosoftGraphListItem'},
        'application': {'key': 'actor.application', 'type': 'MicrosoftGraphIdentity'},
        'device': {'key': 'actor.device', 'type': 'MicrosoftGraphIdentity'},
        'user': {'key': 'actor.user', 'type': 'MicrosoftGraphIdentity'},
        'comment': {'key': 'action.comment', 'type': 'MicrosoftGraphCommentAction'},
        'create': {'key': 'action.create', 'type': '{object}'},
        'delete': {'key': 'action.delete', 'type': 'MicrosoftGraphDeleteAction'},
        'edit': {'key': 'action.edit', 'type': '{object}'},
        'mention': {'key': 'action.mention', 'type': 'MicrosoftGraphMentionAction'},
        'move': {'key': 'action.move', 'type': 'MicrosoftGraphMoveAction'},
        'rename': {'key': 'action.rename', 'type': 'MicrosoftGraphRenameAction'},
        'restore': {'key': 'action.restore', 'type': '{object}'},
        'share': {'key': 'action.share', 'type': 'MicrosoftGraphShareAction'},
        'version': {'key': 'action.version', 'type': 'MicrosoftGraphVersionAction'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemActivityOld, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.times = kwargs.get('times', None)
        self.drive_item = kwargs.get('drive_item', None)
        self.list_item = kwargs.get('list_item', None)
        self.application = kwargs.get('application', None)
        self.device = kwargs.get('device', None)
        self.user = kwargs.get('user', None)
        self.comment = kwargs.get('comment', None)
        self.create = kwargs.get('create', None)
        self.delete = kwargs.get('delete', None)
        self.edit = kwargs.get('edit', None)
        self.mention = kwargs.get('mention', None)
        self.move = kwargs.get('move', None)
        self.rename = kwargs.get('rename', None)
        self.restore = kwargs.get('restore', None)
        self.share = kwargs.get('share', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphItemActivityStat(MicrosoftGraphEntity):
    """itemActivityStat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param access: itemActionStat.
    :type access: ~files.models.MicrosoftGraphItemActionStat
    :param create: itemActionStat.
    :type create: ~files.models.MicrosoftGraphItemActionStat
    :param delete: itemActionStat.
    :type delete: ~files.models.MicrosoftGraphItemActionStat
    :param edit: itemActionStat.
    :type edit: ~files.models.MicrosoftGraphItemActionStat
    :param end_date_time: When the interval ends. Read-only.
    :type end_date_time: ~datetime.datetime
    :param incomplete_data: incompleteData.
    :type incomplete_data: ~files.models.MicrosoftGraphIncompleteData
    :param is_trending: Indicates whether the item is 'trending.' Read-only.
    :type is_trending: bool
    :param move: itemActionStat.
    :type move: ~files.models.MicrosoftGraphItemActionStat
    :param start_date_time: When the interval starts. Read-only.
    :type start_date_time: ~datetime.datetime
    :param activities: Exposes the itemActivities represented in this itemActivityStat resource.
    :type activities: list[~files.models.MicrosoftGraphItemActivity]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'access': {'key': 'access', 'type': 'MicrosoftGraphItemActionStat'},
        'create': {'key': 'create', 'type': 'MicrosoftGraphItemActionStat'},
        'delete': {'key': 'delete', 'type': 'MicrosoftGraphItemActionStat'},
        'edit': {'key': 'edit', 'type': 'MicrosoftGraphItemActionStat'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'incomplete_data': {'key': 'incompleteData', 'type': 'MicrosoftGraphIncompleteData'},
        'is_trending': {'key': 'isTrending', 'type': 'bool'},
        'move': {'key': 'move', 'type': 'MicrosoftGraphItemActionStat'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphItemActivity]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemActivityStat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.access = kwargs.get('access', None)
        self.create = kwargs.get('create', None)
        self.delete = kwargs.get('delete', None)
        self.edit = kwargs.get('edit', None)
        self.end_date_time = kwargs.get('end_date_time', None)
        self.incomplete_data = kwargs.get('incomplete_data', None)
        self.is_trending = kwargs.get('is_trending', None)
        self.move = kwargs.get('move', None)
        self.start_date_time = kwargs.get('start_date_time', None)
        self.activities = kwargs.get('activities', None)


class MicrosoftGraphItemActivityTimeSet(msrest.serialization.Model):
    """itemActivityTimeSet.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_recorded_date_time:
    :type last_recorded_date_time: ~datetime.datetime
    :param observed_date_time: When the activity was observed to take place.
    :type observed_date_time: ~datetime.datetime
    :param recorded_date_time: When the observation was recorded on the service.
    :type recorded_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_recorded_date_time': {'key': 'lastRecordedDateTime', 'type': 'iso-8601'},
        'observed_date_time': {'key': 'observedDateTime', 'type': 'iso-8601'},
        'recorded_date_time': {'key': 'recordedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemActivityTimeSet, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.last_recorded_date_time = kwargs.get('last_recorded_date_time', None)
        self.observed_date_time = kwargs.get('observed_date_time', None)
        self.recorded_date_time = kwargs.get('recorded_date_time', None)


class MicrosoftGraphItemAddress(MicrosoftGraphItemFacet):
    """itemAddress.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param detail: physicalAddress.
    :type detail: ~files.models.MicrosoftGraphPhysicalAddress
    :param display_name:
    :type display_name: str
    :param geo_coordinates: geoCoordinates.
    :type geo_coordinates: ~files.models.MicrosoftGraphGeoCoordinates
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'detail': {'key': 'detail', 'type': 'MicrosoftGraphPhysicalAddress'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'geo_coordinates': {'key': 'geoCoordinates', 'type': 'MicrosoftGraphGeoCoordinates'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemAddress, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.detail = kwargs.get('detail', None)
        self.display_name = kwargs.get('display_name', None)
        self.geo_coordinates = kwargs.get('geo_coordinates', None)


class MicrosoftGraphItemAnalytics(MicrosoftGraphEntity):
    """itemAnalytics.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param all_time: itemActivityStat.
    :type all_time: ~files.models.MicrosoftGraphItemActivityStat
    :param item_activity_stats:
    :type item_activity_stats: list[~files.models.MicrosoftGraphItemActivityStat]
    :param last_seven_days: itemActivityStat.
    :type last_seven_days: ~files.models.MicrosoftGraphItemActivityStat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'all_time': {'key': 'allTime', 'type': 'MicrosoftGraphItemActivityStat'},
        'item_activity_stats': {'key': 'itemActivityStats', 'type': '[MicrosoftGraphItemActivityStat]'},
        'last_seven_days': {'key': 'lastSevenDays', 'type': 'MicrosoftGraphItemActivityStat'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemAnalytics, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.all_time = kwargs.get('all_time', None)
        self.item_activity_stats = kwargs.get('item_activity_stats', None)
        self.last_seven_days = kwargs.get('last_seven_days', None)


class MicrosoftGraphItemBody(msrest.serialization.Model):
    """itemBody.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content: The content of the item.
    :type content: str
    :param content_type:  Possible values include: "text", "html".
    :type content_type: str or ~files.models.MicrosoftGraphBodyType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemBody, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content = kwargs.get('content', None)
        self.content_type = kwargs.get('content_type', None)


class MicrosoftGraphItemEmail(MicrosoftGraphItemFacet):
    """itemEmail.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address:
    :type address: str
    :param display_name:
    :type display_name: str
    :param type:  Possible values include: "unknown", "work", "personal", "main", "other".
    :type type: str or ~files.models.MicrosoftGraphEmailType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemEmail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.display_name = kwargs.get('display_name', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphOfficeGraphInsights(MicrosoftGraphEntity):
    """officeGraphInsights.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param shared: Calculated relationship identifying documents shared with or by the user. This
     includes URLs, file attachments, and reference attachments to OneDrive for Business and
     SharePoint files found in Outlook messages and meetings. This also includes URLs and reference
     attachments to Teams conversations. Ordered by recency of share.
    :type shared: list[~files.models.MicrosoftGraphSharedInsight]
    :param trending: Calculated relationship identifying documents trending around a user. Trending
     documents are calculated based on activity of the user's closest network of people and include
     files stored in OneDrive for Business and SharePoint. Trending insights help the user to
     discover potentially useful content that the user has access to, but has never viewed before.
    :type trending: list[~files.models.MicrosoftGraphTrending]
    :param used: Calculated relationship identifying the latest documents viewed or modified by a
     user, including OneDrive for Business and SharePoint documents, ranked by recency of use.
    :type used: list[~files.models.MicrosoftGraphUsedInsight]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'shared': {'key': 'shared', 'type': '[MicrosoftGraphSharedInsight]'},
        'trending': {'key': 'trending', 'type': '[MicrosoftGraphTrending]'},
        'used': {'key': 'used', 'type': '[MicrosoftGraphUsedInsight]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOfficeGraphInsights, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.shared = kwargs.get('shared', None)
        self.trending = kwargs.get('trending', None)
        self.used = kwargs.get('used', None)


class MicrosoftGraphItemInsights(MicrosoftGraphOfficeGraphInsights):
    """itemInsights.

    :param id: Read-only.
    :type id: str
    :param shared: Calculated relationship identifying documents shared with or by the user. This
     includes URLs, file attachments, and reference attachments to OneDrive for Business and
     SharePoint files found in Outlook messages and meetings. This also includes URLs and reference
     attachments to Teams conversations. Ordered by recency of share.
    :type shared: list[~files.models.MicrosoftGraphSharedInsight]
    :param trending: Calculated relationship identifying documents trending around a user. Trending
     documents are calculated based on activity of the user's closest network of people and include
     files stored in OneDrive for Business and SharePoint. Trending insights help the user to
     discover potentially useful content that the user has access to, but has never viewed before.
    :type trending: list[~files.models.MicrosoftGraphTrending]
    :param used: Calculated relationship identifying the latest documents viewed or modified by a
     user, including OneDrive for Business and SharePoint documents, ranked by recency of use.
    :type used: list[~files.models.MicrosoftGraphUsedInsight]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'shared': {'key': 'shared', 'type': '[MicrosoftGraphSharedInsight]'},
        'trending': {'key': 'trending', 'type': '[MicrosoftGraphTrending]'},
        'used': {'key': 'used', 'type': '[MicrosoftGraphUsedInsight]'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemInsights, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphItemPatent(MicrosoftGraphItemFacet):
    """itemPatent.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param is_pending:
    :type is_pending: bool
    :param issued_date:
    :type issued_date: ~datetime.date
    :param issuing_authority:
    :type issuing_authority: str
    :param number:
    :type number: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_pending': {'key': 'isPending', 'type': 'bool'},
        'issued_date': {'key': 'issuedDate', 'type': 'date'},
        'issuing_authority': {'key': 'issuingAuthority', 'type': 'str'},
        'number': {'key': 'number', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemPatent, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.is_pending = kwargs.get('is_pending', None)
        self.issued_date = kwargs.get('issued_date', None)
        self.issuing_authority = kwargs.get('issuing_authority', None)
        self.number = kwargs.get('number', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphItemPhone(MicrosoftGraphItemFacet):
    """itemPhone.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param number:
    :type number: str
    :param type:  Possible values include: "home", "business", "mobile", "other", "assistant",
     "homeFax", "businessFax", "otherFax", "pager", "radio".
    :type type: str or ~files.models.MicrosoftGraphPhoneType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'number': {'key': 'number', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemPhone, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.number = kwargs.get('number', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphItemPublication(MicrosoftGraphItemFacet):
    """itemPublication.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param published_date:
    :type published_date: ~datetime.date
    :param publisher:
    :type publisher: str
    :param thumbnail_url:
    :type thumbnail_url: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'published_date': {'key': 'publishedDate', 'type': 'date'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'thumbnail_url': {'key': 'thumbnailUrl', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemPublication, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.published_date = kwargs.get('published_date', None)
        self.publisher = kwargs.get('publisher', None)
        self.thumbnail_url = kwargs.get('thumbnail_url', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphItemReference(msrest.serialization.Model):
    """itemReference.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
    :type drive_id: str
    :param drive_type: Identifies the type of drive. See [drive][] resource for values.
    :type drive_type: str
    :param id: Unique identifier of the item in the drive. Read-only.
    :type id: str
    :param name: The name of the item being referenced. Read-only.
    :type name: str
    :param path: Path that can be used to navigate to the item. Read-only.
    :type path: str
    :param share_id: A unique identifier for a shared resource that can be accessed via the
     [Shares][] API.
    :type share_id: str
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param site_id:
    :type site_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'drive_id': {'key': 'driveId', 'type': 'str'},
        'drive_type': {'key': 'driveType', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'share_id': {'key': 'shareId', 'type': 'str'},
        'sharepoint_ids': {'key': 'sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'site_id': {'key': 'siteId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemReference, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.drive_id = kwargs.get('drive_id', None)
        self.drive_type = kwargs.get('drive_type', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.path = kwargs.get('path', None)
        self.share_id = kwargs.get('share_id', None)
        self.sharepoint_ids = kwargs.get('sharepoint_ids', None)
        self.site_id = kwargs.get('site_id', None)


class MicrosoftGraphKeyValuePair(msrest.serialization.Model):
    """keyValuePair.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Name for this key-value pair.
    :type name: str
    :param value: Value for this key-value pair.
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphKeyValuePair, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class MicrosoftGraphLabelActionBase(msrest.serialization.Model):
    """labelActionBase.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name:
    :type name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLabelActionBase, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)


class MicrosoftGraphLabelPolicy(msrest.serialization.Model):
    """labelPolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id:
    :type id: str
    :param name:
    :type name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLabelPolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)


class MicrosoftGraphLanguageProficiency(MicrosoftGraphItemFacet):
    """languageProficiency.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param proficiency:  Possible values include: "elementary", "conversational", "limitedWorking",
     "professionalWorking", "fullProfessional", "nativeOrBilingual", "unknownFutureValue".
    :type proficiency: str or ~files.models.MicrosoftGraphLanguageProficiencyLevel
    :param reading:  Possible values include: "elementary", "conversational", "limitedWorking",
     "professionalWorking", "fullProfessional", "nativeOrBilingual", "unknownFutureValue".
    :type reading: str or ~files.models.MicrosoftGraphLanguageProficiencyLevel
    :param spoken:  Possible values include: "elementary", "conversational", "limitedWorking",
     "professionalWorking", "fullProfessional", "nativeOrBilingual", "unknownFutureValue".
    :type spoken: str or ~files.models.MicrosoftGraphLanguageProficiencyLevel
    :param tag:
    :type tag: str
    :param written:  Possible values include: "elementary", "conversational", "limitedWorking",
     "professionalWorking", "fullProfessional", "nativeOrBilingual", "unknownFutureValue".
    :type written: str or ~files.models.MicrosoftGraphLanguageProficiencyLevel
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'proficiency': {'key': 'proficiency', 'type': 'str'},
        'reading': {'key': 'reading', 'type': 'str'},
        'spoken': {'key': 'spoken', 'type': 'str'},
        'tag': {'key': 'tag', 'type': 'str'},
        'written': {'key': 'written', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLanguageProficiency, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.proficiency = kwargs.get('proficiency', None)
        self.reading = kwargs.get('reading', None)
        self.spoken = kwargs.get('spoken', None)
        self.tag = kwargs.get('tag', None)
        self.written = kwargs.get('written', None)


class MicrosoftGraphLicenseAssignmentState(msrest.serialization.Model):
    """licenseAssignmentState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param assigned_by_group:
    :type assigned_by_group: str
    :param disabled_plans:
    :type disabled_plans: list[str]
    :param error:
    :type error: str
    :param sku_id:
    :type sku_id: str
    :param state:
    :type state: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'assigned_by_group': {'key': 'assignedByGroup', 'type': 'str'},
        'disabled_plans': {'key': 'disabledPlans', 'type': '[str]'},
        'error': {'key': 'error', 'type': 'str'},
        'sku_id': {'key': 'skuId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLicenseAssignmentState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.assigned_by_group = kwargs.get('assigned_by_group', None)
        self.disabled_plans = kwargs.get('disabled_plans', None)
        self.error = kwargs.get('error', None)
        self.sku_id = kwargs.get('sku_id', None)
        self.state = kwargs.get('state', None)


class MicrosoftGraphLicenseDetails(MicrosoftGraphEntity):
    """licenseDetails.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param service_plans: Information about the service plans assigned with the license. Read-only,
     Not nullable.
    :type service_plans: list[~files.models.MicrosoftGraphServicePlanInfo]
    :param sku_id: Unique identifier (GUID) for the service SKU. Equal to the skuId property on the
     related SubscribedSku object. Read-only.
    :type sku_id: str
    :param sku_part_number: Unique SKU display name. Equal to the skuPartNumber on the related
     SubscribedSku object; for example: 'AAD_Premium'. Read-only.
    :type sku_part_number: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'service_plans': {'key': 'servicePlans', 'type': '[MicrosoftGraphServicePlanInfo]'},
        'sku_id': {'key': 'skuId', 'type': 'str'},
        'sku_part_number': {'key': 'skuPartNumber', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLicenseDetails, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.service_plans = kwargs.get('service_plans', None)
        self.sku_id = kwargs.get('sku_id', None)
        self.sku_part_number = kwargs.get('sku_part_number', None)


class MicrosoftGraphLicenseProcessingState(msrest.serialization.Model):
    """licenseProcessingState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param state:
    :type state: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLicenseProcessingState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.state = kwargs.get('state', None)


class MicrosoftGraphLinkedResource(MicrosoftGraphEntity):
    """linkedResource.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param application_name:
    :type application_name: str
    :param display_name:
    :type display_name: str
    :param external_id:
    :type external_id: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'application_name': {'key': 'applicationName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'external_id': {'key': 'externalId', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLinkedResource, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.application_name = kwargs.get('application_name', None)
        self.display_name = kwargs.get('display_name', None)
        self.external_id = kwargs.get('external_id', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphList(MicrosoftGraphBaseItem):
    """list.

    :param id: Read-only.
    :type id: str
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~files.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~files.models.MicrosoftGraphUser
    :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
    :type drive_id: str
    :param drive_type: Identifies the type of drive. See [drive][] resource for values.
    :type drive_type: str
    :param id_parent_reference_id: Unique identifier of the item in the drive. Read-only.
    :type id_parent_reference_id: str
    :param name_parent_reference_name: The name of the item being referenced. Read-only.
    :type name_parent_reference_name: str
    :param path: Path that can be used to navigate to the item. Read-only.
    :type path: str
    :param share_id: A unique identifier for a shared resource that can be accessed via the
     [Shares][] API.
    :type share_id: str
    :param site_id:
    :type site_id: str
    :param application_last_modified_by_application: identity.
    :type application_last_modified_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_last_modified_by_device: identity.
    :type device_last_modified_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_last_modified_by_user: identity.
    :type user_last_modified_by_user: ~files.models.MicrosoftGraphIdentity
    :param application_created_by_application: identity.
    :type application_created_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_created_by_device: identity.
    :type device_created_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_created_by_user: identity.
    :type user_created_by_user: ~files.models.MicrosoftGraphIdentity
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The displayable title of the list.
    :type display_name: str
    :param list: listInfo.
    :type list: ~files.models.MicrosoftGraphListInfo
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param system: systemFacet.
    :type system: dict[str, object]
    :param activities:
    :type activities: list[~files.models.MicrosoftGraphItemActivityOld]
    :param columns: The collection of field definitions for this list.
    :type columns: list[~files.models.MicrosoftGraphColumnDefinition]
    :param content_types: The collection of content types present in this list.
    :type content_types: list[~files.models.MicrosoftGraphContentType]
    :param drive: drive.
    :type drive: ~files.models.MicrosoftGraphDrive
    :param items: All items contained in the list.
    :type items: list[~files.models.MicrosoftGraphListItem]
    :param subscriptions: The set of subscriptions on the list.
    :type subscriptions: list[~files.models.MicrosoftGraphSubscription]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'drive_id': {'key': 'parentReference.driveId', 'type': 'str'},
        'drive_type': {'key': 'parentReference.driveType', 'type': 'str'},
        'id_parent_reference_id': {'key': 'parentReference.id', 'type': 'str'},
        'name_parent_reference_name': {'key': 'parentReference.name', 'type': 'str'},
        'path': {'key': 'parentReference.path', 'type': 'str'},
        'share_id': {'key': 'parentReference.shareId', 'type': 'str'},
        'site_id': {'key': 'parentReference.siteId', 'type': 'str'},
        'application_last_modified_by_application': {'key': 'lastModifiedBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_last_modified_by_device': {'key': 'lastModifiedBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_last_modified_by_user': {'key': 'lastModifiedBy.user', 'type': 'MicrosoftGraphIdentity'},
        'application_created_by_application': {'key': 'createdBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_created_by_device': {'key': 'createdBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_created_by_user': {'key': 'createdBy.user', 'type': 'MicrosoftGraphIdentity'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'list': {'key': 'list', 'type': 'MicrosoftGraphListInfo'},
        'sharepoint_ids': {'key': 'sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'system': {'key': 'system', 'type': '{object}'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphItemActivityOld]'},
        'columns': {'key': 'columns', 'type': '[MicrosoftGraphColumnDefinition]'},
        'content_types': {'key': 'contentTypes', 'type': '[MicrosoftGraphContentType]'},
        'drive': {'key': 'drive', 'type': 'MicrosoftGraphDrive'},
        'items': {'key': 'items', 'type': '[MicrosoftGraphListItem]'},
        'subscriptions': {'key': 'subscriptions', 'type': '[MicrosoftGraphSubscription]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphList, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.list = kwargs.get('list', None)
        self.sharepoint_ids = kwargs.get('sharepoint_ids', None)
        self.system = kwargs.get('system', None)
        self.activities = kwargs.get('activities', None)
        self.columns = kwargs.get('columns', None)
        self.content_types = kwargs.get('content_types', None)
        self.drive = kwargs.get('drive', None)
        self.items = kwargs.get('items', None)
        self.subscriptions = kwargs.get('subscriptions', None)


class MicrosoftGraphListInfo(msrest.serialization.Model):
    """listInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content_types_enabled: If true, indicates that content types are enabled for this list.
    :type content_types_enabled: bool
    :param hidden: If true, indicates that the list is not normally visible in the SharePoint user
     experience.
    :type hidden: bool
    :param template: An enumerated value that represents the base list template used in creating
     the list. Possible values include documentLibrary, genericList, task, survey, announcements,
     contacts, and more.
    :type template: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'content_types_enabled': {'key': 'contentTypesEnabled', 'type': 'bool'},
        'hidden': {'key': 'hidden', 'type': 'bool'},
        'template': {'key': 'template', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphListInfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content_types_enabled = kwargs.get('content_types_enabled', None)
        self.hidden = kwargs.get('hidden', None)
        self.template = kwargs.get('template', None)


class MicrosoftGraphListItem(MicrosoftGraphBaseItem):
    """listItem.

    :param id: Read-only.
    :type id: str
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~files.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~files.models.MicrosoftGraphUser
    :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
    :type drive_id: str
    :param drive_type: Identifies the type of drive. See [drive][] resource for values.
    :type drive_type: str
    :param id_parent_reference_id: Unique identifier of the item in the drive. Read-only.
    :type id_parent_reference_id: str
    :param name_parent_reference_name: The name of the item being referenced. Read-only.
    :type name_parent_reference_name: str
    :param path: Path that can be used to navigate to the item. Read-only.
    :type path: str
    :param share_id: A unique identifier for a shared resource that can be accessed via the
     [Shares][] API.
    :type share_id: str
    :param site_id:
    :type site_id: str
    :param application_last_modified_by_application: identity.
    :type application_last_modified_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_last_modified_by_device: identity.
    :type device_last_modified_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_last_modified_by_user: identity.
    :type user_last_modified_by_user: ~files.models.MicrosoftGraphIdentity
    :param application_created_by_application: identity.
    :type application_created_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_created_by_device: identity.
    :type device_created_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_created_by_user: identity.
    :type user_created_by_user: ~files.models.MicrosoftGraphIdentity
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content_type: contentTypeInfo.
    :type content_type: ~files.models.MicrosoftGraphContentTypeInfo
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param activities: The list of recent activities that took place on this item.
    :type activities: list[~files.models.MicrosoftGraphItemActivityOld]
    :param analytics: itemAnalytics.
    :type analytics: ~files.models.MicrosoftGraphItemAnalytics
    :param drive_item: driveItem.
    :type drive_item: ~files.models.MicrosoftGraphDriveItem
    :param versions: The list of previous versions of the list item.
    :type versions: list[~files.models.MicrosoftGraphListItemVersion]
    :param id_fields_id: Read-only.
    :type id_fields_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'drive_id': {'key': 'parentReference.driveId', 'type': 'str'},
        'drive_type': {'key': 'parentReference.driveType', 'type': 'str'},
        'id_parent_reference_id': {'key': 'parentReference.id', 'type': 'str'},
        'name_parent_reference_name': {'key': 'parentReference.name', 'type': 'str'},
        'path': {'key': 'parentReference.path', 'type': 'str'},
        'share_id': {'key': 'parentReference.shareId', 'type': 'str'},
        'site_id': {'key': 'parentReference.siteId', 'type': 'str'},
        'application_last_modified_by_application': {'key': 'lastModifiedBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_last_modified_by_device': {'key': 'lastModifiedBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_last_modified_by_user': {'key': 'lastModifiedBy.user', 'type': 'MicrosoftGraphIdentity'},
        'application_created_by_application': {'key': 'createdBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_created_by_device': {'key': 'createdBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_created_by_user': {'key': 'createdBy.user', 'type': 'MicrosoftGraphIdentity'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'content_type': {'key': 'contentType', 'type': 'MicrosoftGraphContentTypeInfo'},
        'sharepoint_ids': {'key': 'sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphItemActivityOld]'},
        'analytics': {'key': 'analytics', 'type': 'MicrosoftGraphItemAnalytics'},
        'drive_item': {'key': 'driveItem', 'type': 'MicrosoftGraphDriveItem'},
        'versions': {'key': 'versions', 'type': '[MicrosoftGraphListItemVersion]'},
        'id_fields_id': {'key': 'fields.id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphListItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content_type = kwargs.get('content_type', None)
        self.sharepoint_ids = kwargs.get('sharepoint_ids', None)
        self.activities = kwargs.get('activities', None)
        self.analytics = kwargs.get('analytics', None)
        self.drive_item = kwargs.get('drive_item', None)
        self.versions = kwargs.get('versions', None)
        self.id_fields_id = kwargs.get('id_fields_id', None)


class MicrosoftGraphListItemVersion(MicrosoftGraphBaseItemVersion):
    """listItemVersion.

    :param id: Read-only.
    :type id: str
    :param last_modified_date_time: Date and time the version was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param publication: publicationFacet.
    :type publication: ~files.models.MicrosoftGraphPublicationFacet
    :param application: identity.
    :type application: ~files.models.MicrosoftGraphIdentity
    :param device: identity.
    :type device: ~files.models.MicrosoftGraphIdentity
    :param user: identity.
    :type user: ~files.models.MicrosoftGraphIdentity
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id_fields_id: Read-only.
    :type id_fields_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'publication': {'key': 'publication', 'type': 'MicrosoftGraphPublicationFacet'},
        'application': {'key': 'lastModifiedBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device': {'key': 'lastModifiedBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user': {'key': 'lastModifiedBy.user', 'type': 'MicrosoftGraphIdentity'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'id_fields_id': {'key': 'fields.id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphListItemVersion, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id_fields_id = kwargs.get('id_fields_id', None)


class MicrosoftGraphLobbyBypassSettings(msrest.serialization.Model):
    """lobbyBypassSettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_dial_in_bypass_enabled:
    :type is_dial_in_bypass_enabled: bool
    :param scope:  Possible values include: "organizer", "organization",
     "organizationAndFederated", "everyone", "unknownFutureValue".
    :type scope: str or ~files.models.MicrosoftGraphLobbyBypassScope
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_dial_in_bypass_enabled': {'key': 'isDialInBypassEnabled', 'type': 'bool'},
        'scope': {'key': 'scope', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLobbyBypassSettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_dial_in_bypass_enabled = kwargs.get('is_dial_in_bypass_enabled', None)
        self.scope = kwargs.get('scope', None)


class MicrosoftGraphLocaleInfo(msrest.serialization.Model):
    """localeInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: A name representing the user's locale in natural language, for example,
     'English (United States)'.
    :type display_name: str
    :param locale: A locale representation for the user, which includes the user's preferred
     language and country/region. For example, 'en-us'. The language component follows 2-letter
     codes as defined in ISO 639-1, and the country component follows 2-letter codes as defined in
     ISO 3166-1 alpha-2.
    :type locale: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'locale': {'key': 'locale', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLocaleInfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.locale = kwargs.get('locale', None)


class MicrosoftGraphLocation(msrest.serialization.Model):
    """location.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: physicalAddress.
    :type address: ~files.models.MicrosoftGraphPhysicalAddress
    :param coordinates: outlookGeoCoordinates.
    :type coordinates: ~files.models.MicrosoftGraphOutlookGeoCoordinates
    :param display_name: The name associated with the location.
    :type display_name: str
    :param location_email_address: Optional email address of the location.
    :type location_email_address: str
    :param location_type:  Possible values include: "default", "conferenceRoom", "homeAddress",
     "businessAddress", "geoCoordinates", "streetAddress", "hotel", "restaurant", "localBusiness",
     "postalAddress".
    :type location_type: str or ~files.models.MicrosoftGraphLocationType
    :param location_uri: Optional URI representing the location.
    :type location_uri: str
    :param unique_id: For internal use only.
    :type unique_id: str
    :param unique_id_type:  Possible values include: "unknown", "locationStore", "directory",
     "private", "bing".
    :type unique_id_type: str or ~files.models.MicrosoftGraphLocationUniqueIdType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'MicrosoftGraphPhysicalAddress'},
        'coordinates': {'key': 'coordinates', 'type': 'MicrosoftGraphOutlookGeoCoordinates'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'location_email_address': {'key': 'locationEmailAddress', 'type': 'str'},
        'location_type': {'key': 'locationType', 'type': 'str'},
        'location_uri': {'key': 'locationUri', 'type': 'str'},
        'unique_id': {'key': 'uniqueId', 'type': 'str'},
        'unique_id_type': {'key': 'uniqueIdType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLocation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.coordinates = kwargs.get('coordinates', None)
        self.display_name = kwargs.get('display_name', None)
        self.location_email_address = kwargs.get('location_email_address', None)
        self.location_type = kwargs.get('location_type', None)
        self.location_uri = kwargs.get('location_uri', None)
        self.unique_id = kwargs.get('unique_id', None)
        self.unique_id_type = kwargs.get('unique_id_type', None)


class MicrosoftGraphLoggedOnUser(msrest.serialization.Model):
    """Logged On User.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_log_on_date_time: Date time when user logs on.
    :type last_log_on_date_time: ~datetime.datetime
    :param user_id: User id.
    :type user_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_log_on_date_time': {'key': 'lastLogOnDateTime', 'type': 'iso-8601'},
        'user_id': {'key': 'userId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLoggedOnUser, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.last_log_on_date_time = kwargs.get('last_log_on_date_time', None)
        self.user_id = kwargs.get('user_id', None)


class MicrosoftGraphLongRunningOperation(MicrosoftGraphEntity):
    """longRunningOperation.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_action_date_time:
    :type last_action_date_time: ~datetime.datetime
    :param resource_location:
    :type resource_location: str
    :param status:  Possible values include: "notstarted", "running", "succeeded", "failed".
    :type status: str or ~files.models.MicrosoftGraphLongRunningOperationStatus
    :param status_detail:
    :type status_detail: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'resource_location': {'key': 'resourceLocation', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'status_detail': {'key': 'statusDetail', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLongRunningOperation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.last_action_date_time = kwargs.get('last_action_date_time', None)
        self.resource_location = kwargs.get('resource_location', None)
        self.status = kwargs.get('status', None)
        self.status_detail = kwargs.get('status_detail', None)


class MicrosoftGraphLookupColumn(msrest.serialization.Model):
    """lookupColumn.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_multiple_values: Indicates whether multiple values can be selected from the
     source.
    :type allow_multiple_values: bool
    :param allow_unlimited_length: Indicates whether values in the column should be able to exceed
     the standard limit of 255 characters.
    :type allow_unlimited_length: bool
    :param column_name: The name of the lookup source column.
    :type column_name: str
    :param list_id: The unique identifier of the lookup source list.
    :type list_id: str
    :param primary_lookup_column_id: If specified, this column is a secondary lookup, pulling an
     additional field from the list item looked up by the primary lookup. Use the list item looked
     up by the primary as the source for the column named here.
    :type primary_lookup_column_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_multiple_values': {'key': 'allowMultipleValues', 'type': 'bool'},
        'allow_unlimited_length': {'key': 'allowUnlimitedLength', 'type': 'bool'},
        'column_name': {'key': 'columnName', 'type': 'str'},
        'list_id': {'key': 'listId', 'type': 'str'},
        'primary_lookup_column_id': {'key': 'primaryLookupColumnId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLookupColumn, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allow_multiple_values = kwargs.get('allow_multiple_values', None)
        self.allow_unlimited_length = kwargs.get('allow_unlimited_length', None)
        self.column_name = kwargs.get('column_name', None)
        self.list_id = kwargs.get('list_id', None)
        self.primary_lookup_column_id = kwargs.get('primary_lookup_column_id', None)


class MicrosoftGraphMailboxSettings(msrest.serialization.Model):
    """mailboxSettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param archive_folder: Folder ID of an archive folder for the user.
    :type archive_folder: str
    :param automatic_replies_setting: automaticRepliesSetting.
    :type automatic_replies_setting: ~files.models.MicrosoftGraphAutomaticRepliesSetting
    :param date_format: The date format for the user's mailbox.
    :type date_format: str
    :param delegate_meeting_message_delivery_options:  Possible values include:
     "sendToDelegateAndInformationToPrincipal", "sendToDelegateAndPrincipal", "sendToDelegateOnly".
    :type delegate_meeting_message_delivery_options: str or
     ~files.models.MicrosoftGraphDelegateMeetingMessageDeliveryOptions
    :param language: localeInfo.
    :type language: ~files.models.MicrosoftGraphLocaleInfo
    :param time_format: The time format for the user's mailbox.
    :type time_format: str
    :param time_zone: The default time zone for the user's mailbox.
    :type time_zone: str
    :param user_purpose: userPurpose.
    :type user_purpose: ~files.models.MicrosoftGraphUserPurpose
    :param user_purpose_v2:  Possible values include: "unknown", "user", "linked", "shared",
     "room", "equipment", "others".
    :type user_purpose_v2: str or ~files.models.MicrosoftGraphMailboxRecipientType
    :param working_hours: workingHours.
    :type working_hours: ~files.models.MicrosoftGraphWorkingHours
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'archive_folder': {'key': 'archiveFolder', 'type': 'str'},
        'automatic_replies_setting': {'key': 'automaticRepliesSetting', 'type': 'MicrosoftGraphAutomaticRepliesSetting'},
        'date_format': {'key': 'dateFormat', 'type': 'str'},
        'delegate_meeting_message_delivery_options': {'key': 'delegateMeetingMessageDeliveryOptions', 'type': 'str'},
        'language': {'key': 'language', 'type': 'MicrosoftGraphLocaleInfo'},
        'time_format': {'key': 'timeFormat', 'type': 'str'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
        'user_purpose': {'key': 'userPurpose', 'type': 'MicrosoftGraphUserPurpose'},
        'user_purpose_v2': {'key': 'userPurposeV2', 'type': 'str'},
        'working_hours': {'key': 'workingHours', 'type': 'MicrosoftGraphWorkingHours'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMailboxSettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.archive_folder = kwargs.get('archive_folder', None)
        self.automatic_replies_setting = kwargs.get('automatic_replies_setting', None)
        self.date_format = kwargs.get('date_format', None)
        self.delegate_meeting_message_delivery_options = kwargs.get('delegate_meeting_message_delivery_options', None)
        self.language = kwargs.get('language', None)
        self.time_format = kwargs.get('time_format', None)
        self.time_zone = kwargs.get('time_zone', None)
        self.user_purpose = kwargs.get('user_purpose', None)
        self.user_purpose_v2 = kwargs.get('user_purpose_v2', None)
        self.working_hours = kwargs.get('working_hours', None)


class MicrosoftGraphMailFolder(MicrosoftGraphEntity):
    """mailFolder.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param child_folder_count: The number of immediate child mailFolders in the current mailFolder.
    :type child_folder_count: int
    :param display_name: The mailFolder's display name.
    :type display_name: str
    :param parent_folder_id: The unique identifier for the mailFolder's parent mailFolder.
    :type parent_folder_id: str
    :param total_item_count: The number of items in the mailFolder.
    :type total_item_count: int
    :param unread_item_count: The number of items in the mailFolder marked as unread.
    :type unread_item_count: int
    :param well_known_name:
    :type well_known_name: str
    :param child_folders: The collection of child folders in the mailFolder.
    :type child_folders: list[~files.models.MicrosoftGraphMailFolder]
    :param message_rules: The collection of rules that apply to the user's Inbox folder.
    :type message_rules: list[~files.models.MicrosoftGraphMessageRule]
    :param messages: The collection of messages in the mailFolder.
    :type messages: list[~files.models.MicrosoftGraphMessage]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the mailFolder. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~files.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the mailFolder. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~files.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param user_configurations:
    :type user_configurations: list[~files.models.MicrosoftGraphUserConfiguration]
    """

    _validation = {
        'child_folder_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'total_item_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'unread_item_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'child_folder_count': {'key': 'childFolderCount', 'type': 'int'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'total_item_count': {'key': 'totalItemCount', 'type': 'int'},
        'unread_item_count': {'key': 'unreadItemCount', 'type': 'int'},
        'well_known_name': {'key': 'wellKnownName', 'type': 'str'},
        'child_folders': {'key': 'childFolders', 'type': '[MicrosoftGraphMailFolder]'},
        'message_rules': {'key': 'messageRules', 'type': '[MicrosoftGraphMessageRule]'},
        'messages': {'key': 'messages', 'type': '[MicrosoftGraphMessage]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'user_configurations': {'key': 'userConfigurations', 'type': '[MicrosoftGraphUserConfiguration]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMailFolder, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.child_folder_count = kwargs.get('child_folder_count', None)
        self.display_name = kwargs.get('display_name', None)
        self.parent_folder_id = kwargs.get('parent_folder_id', None)
        self.total_item_count = kwargs.get('total_item_count', None)
        self.unread_item_count = kwargs.get('unread_item_count', None)
        self.well_known_name = kwargs.get('well_known_name', None)
        self.child_folders = kwargs.get('child_folders', None)
        self.message_rules = kwargs.get('message_rules', None)
        self.messages = kwargs.get('messages', None)
        self.multi_value_extended_properties = kwargs.get('multi_value_extended_properties', None)
        self.single_value_extended_properties = kwargs.get('single_value_extended_properties', None)
        self.user_configurations = kwargs.get('user_configurations', None)


class MicrosoftGraphManagedAppOperation(MicrosoftGraphEntity):
    """Represents an operation applied against an app registration.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The operation name.
    :type display_name: str
    :param last_modified_date_time: The last time the app operation was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param state: The current state of the operation.
    :type state: str
    :param version: Version of the entity.
    :type version: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'state': {'key': 'state', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedAppOperation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.state = kwargs.get('state', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphManagedAppPolicy(MicrosoftGraphEntity):
    """The ManagedAppPolicy resource represents a base type for platform specific policies.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: The date and time the policy was created.
    :type created_date_time: ~datetime.datetime
    :param description: The policy's description.
    :type description: str
    :param display_name: Policy display name.
    :type display_name: str
    :param last_modified_date_time: Last time the policy was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param role_scope_tag_ids: List of Scope Tags for this Entity instance.
    :type role_scope_tag_ids: list[str]
    :param version: Version of the entity.
    :type version: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'role_scope_tag_ids': {'key': 'roleScopeTagIds', 'type': '[str]'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedAppPolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.role_scope_tag_ids = kwargs.get('role_scope_tag_ids', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphManagedAppRegistration(MicrosoftGraphEntity):
    """The ManagedAppEntity is the base entity type for all other entity types under app management workflow.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_identifier: The identifier for a mobile app.
    :type app_identifier: dict[str, object]
    :param application_version: App version.
    :type application_version: str
    :param azure_ad_device_id: The Azure Active Directory Device identifier of the host device.
     Value could be empty even when the host device is Azure Active Directory registered.
    :type azure_ad_device_id: str
    :param created_date_time: Date and time of creation.
    :type created_date_time: ~datetime.datetime
    :param device_manufacturer: The device manufacturer for the current app registration.
    :type device_manufacturer: str
    :param device_model: The device model for the current app registration.
    :type device_model: str
    :param device_name: Host device name.
    :type device_name: str
    :param device_tag: App management SDK generated tag, which helps relate apps hosted on the same
     device. Not guaranteed to relate apps in all conditions.
    :type device_tag: str
    :param device_type: Host device type.
    :type device_type: str
    :param flagged_reasons: Zero or more reasons an app registration is flagged. E.g. app running
     on rooted device.
    :type flagged_reasons: list[str or ~files.models.MicrosoftGraphManagedAppFlaggedReason]
    :param last_sync_date_time: Date and time of last the app synced with management service.
    :type last_sync_date_time: ~datetime.datetime
    :param managed_device_id: The Managed Device identifier of the host device. Value could be
     empty even when the host device is managed.
    :type managed_device_id: str
    :param management_sdk_version: App management SDK version.
    :type management_sdk_version: str
    :param platform_version: Operating System version.
    :type platform_version: str
    :param user_id: The user Id to who this app registration belongs.
    :type user_id: str
    :param version: Version of the entity.
    :type version: str
    :param applied_policies: Zero or more policys already applied on the registered app when it
     last synchronized with managment service.
    :type applied_policies: list[~files.models.MicrosoftGraphManagedAppPolicy]
    :param intended_policies: Zero or more policies admin intended for the app as of now.
    :type intended_policies: list[~files.models.MicrosoftGraphManagedAppPolicy]
    :param operations: Zero or more long running operations triggered on the app registration.
    :type operations: list[~files.models.MicrosoftGraphManagedAppOperation]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_identifier': {'key': 'appIdentifier', 'type': '{object}'},
        'application_version': {'key': 'applicationVersion', 'type': 'str'},
        'azure_ad_device_id': {'key': 'azureADDeviceId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'device_manufacturer': {'key': 'deviceManufacturer', 'type': 'str'},
        'device_model': {'key': 'deviceModel', 'type': 'str'},
        'device_name': {'key': 'deviceName', 'type': 'str'},
        'device_tag': {'key': 'deviceTag', 'type': 'str'},
        'device_type': {'key': 'deviceType', 'type': 'str'},
        'flagged_reasons': {'key': 'flaggedReasons', 'type': '[str]'},
        'last_sync_date_time': {'key': 'lastSyncDateTime', 'type': 'iso-8601'},
        'managed_device_id': {'key': 'managedDeviceId', 'type': 'str'},
        'management_sdk_version': {'key': 'managementSdkVersion', 'type': 'str'},
        'platform_version': {'key': 'platformVersion', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'applied_policies': {'key': 'appliedPolicies', 'type': '[MicrosoftGraphManagedAppPolicy]'},
        'intended_policies': {'key': 'intendedPolicies', 'type': '[MicrosoftGraphManagedAppPolicy]'},
        'operations': {'key': 'operations', 'type': '[MicrosoftGraphManagedAppOperation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedAppRegistration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_identifier = kwargs.get('app_identifier', None)
        self.application_version = kwargs.get('application_version', None)
        self.azure_ad_device_id = kwargs.get('azure_ad_device_id', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.device_manufacturer = kwargs.get('device_manufacturer', None)
        self.device_model = kwargs.get('device_model', None)
        self.device_name = kwargs.get('device_name', None)
        self.device_tag = kwargs.get('device_tag', None)
        self.device_type = kwargs.get('device_type', None)
        self.flagged_reasons = kwargs.get('flagged_reasons', None)
        self.last_sync_date_time = kwargs.get('last_sync_date_time', None)
        self.managed_device_id = kwargs.get('managed_device_id', None)
        self.management_sdk_version = kwargs.get('management_sdk_version', None)
        self.platform_version = kwargs.get('platform_version', None)
        self.user_id = kwargs.get('user_id', None)
        self.version = kwargs.get('version', None)
        self.applied_policies = kwargs.get('applied_policies', None)
        self.intended_policies = kwargs.get('intended_policies', None)
        self.operations = kwargs.get('operations', None)


class MicrosoftGraphManagedDevice(MicrosoftGraphEntity):
    """Devices that are managed or pre-enrolled through Intune.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param aad_registered: Whether the device is Azure Active Directory registered. This property
     is read-only.
    :type aad_registered: bool
    :param activation_lock_bypass_code: Code that allows the Activation Lock on a device to be
     bypassed.
    :type activation_lock_bypass_code: str
    :param android_security_patch_level: Android security patch level.
    :type android_security_patch_level: str
    :param autopilot_enrolled: Reports if the managed device is enrolled via auto-pilot. This
     property is read-only.
    :type autopilot_enrolled: bool
    :param azure_active_directory_device_id: The unique identifier for the Azure Active Directory
     device. Read only. This property is read-only.
    :type azure_active_directory_device_id: str
    :param azure_ad_device_id: The unique identifier for the Azure Active Directory device. Read
     only.
    :type azure_ad_device_id: str
    :param azure_ad_registered: Whether the device is Azure Active Directory registered.
    :type azure_ad_registered: bool
    :param chassis_type:  Possible values include: "unknown", "desktop", "laptop",
     "worksWorkstation", "enterpriseServer", "phone", "tablet", "mobileOther", "mobileUnknown".
    :type chassis_type: str or ~files.models.MicrosoftGraphChassisType
    :param compliance_grace_period_expiration_date_time: The DateTime when device compliance grace
     period expires.
    :type compliance_grace_period_expiration_date_time: ~datetime.datetime
    :param compliance_state:  Possible values include: "unknown", "compliant", "noncompliant",
     "conflict", "error", "inGracePeriod", "configManager".
    :type compliance_state: str or ~files.models.MicrosoftGraphComplianceState
    :param configuration_manager_client_enabled_features: configuration Manager client enabled
     features.
    :type configuration_manager_client_enabled_features:
     ~files.models.MicrosoftGraphConfigurationManagerClientEnabledFeatures
    :param configuration_manager_client_health_state: Configuration manager client health state.
    :type configuration_manager_client_health_state:
     ~files.models.MicrosoftGraphConfigurationManagerClientHealthState
    :param configuration_manager_client_information: Configuration Manager client information
     synced from SCCM.
    :type configuration_manager_client_information:
     ~files.models.MicrosoftGraphConfigurationManagerClientInformation
    :param device_action_results: List of ComplexType deviceActionResult objects.
    :type device_action_results: list[~files.models.MicrosoftGraphDeviceActionResult]
    :param device_category_display_name: Device category display name.
    :type device_category_display_name: str
    :param device_enrollment_type:  Possible values include: "unknown", "userEnrollment",
     "deviceEnrollmentManager", "appleBulkWithUser", "appleBulkWithoutUser", "windowsAzureADJoin",
     "windowsBulkUserless", "windowsAutoEnrollment", "windowsBulkAzureDomainJoin",
     "windowsCoManagement", "appleUserEnrollment", "appleUserEnrollmentWithServiceAccount",
     "azureAdJoinUsingAzureVmExtension", "androidEnterpriseDedicatedDevice",
     "androidEnterpriseFullyManaged", "androidEnterpriseCorporateWorkProfile".
    :type device_enrollment_type: str or ~files.models.MicrosoftGraphDeviceEnrollmentType
    :param device_health_attestation_state: deviceHealthAttestationState.
    :type device_health_attestation_state: ~files.models.MicrosoftGraphDeviceHealthAttestationState
    :param device_name: Name of the device.
    :type device_name: str
    :param device_registration_state:  Possible values include: "notRegistered", "registered",
     "revoked", "keyConflict", "approvalPending", "certificateReset",
     "notRegisteredPendingEnrollment", "unknown".
    :type device_registration_state: str or ~files.models.MicrosoftGraphDeviceRegistrationState
    :param device_type:  Possible values include: "desktop", "windowsRT", "winMO6", "nokia",
     "windowsPhone", "mac", "winCE", "winEmbedded", "iPhone", "iPad", "iPod", "android",
     "iSocConsumer", "unix", "macMDM", "holoLens", "surfaceHub", "androidForWork",
     "androidEnterprise", "windows10x", "androidnGMS", "cloudPC", "blackberry", "palm", "unknown".
    :type device_type: str or ~files.models.MicrosoftGraphDeviceType
    :param eas_activated: Whether the device is Exchange ActiveSync activated.
    :type eas_activated: bool
    :param eas_activation_date_time: Exchange ActivationSync activation time of the device.
    :type eas_activation_date_time: ~datetime.datetime
    :param eas_device_id: Exchange ActiveSync Id of the device.
    :type eas_device_id: str
    :param email_address: Email(s) for the user associated with the device.
    :type email_address: str
    :param enrolled_date_time: Enrollment time of the device.
    :type enrolled_date_time: ~datetime.datetime
    :param ethernet_mac_address: Ethernet MAC. This property is read-only.
    :type ethernet_mac_address: str
    :param exchange_access_state:  Possible values include: "none", "unknown", "allowed",
     "blocked", "quarantined".
    :type exchange_access_state: str or
     ~files.models.MicrosoftGraphDeviceManagementExchangeAccessState
    :param exchange_access_state_reason:  Possible values include: "none", "unknown",
     "exchangeGlobalRule", "exchangeIndividualRule", "exchangeDeviceRule", "exchangeUpgrade",
     "exchangeMailboxPolicy", "other", "compliant", "notCompliant", "notEnrolled",
     "unknownLocation", "mfaRequired", "azureADBlockDueToAccessPolicy", "compromisedPassword",
     "deviceNotKnownWithManagedApp".
    :type exchange_access_state_reason: str or
     ~files.models.MicrosoftGraphDeviceManagementExchangeAccessStateReason
    :param exchange_last_successful_sync_date_time: Last time the device contacted Exchange.
    :type exchange_last_successful_sync_date_time: ~datetime.datetime
    :param free_storage_space_in_bytes: Free Storage in Bytes.
    :type free_storage_space_in_bytes: long
    :param hardware_information: Hardware information of a given device.
    :type hardware_information: ~files.models.MicrosoftGraphHardwareInformation
    :param iccid: Integrated Circuit Card Identifier, it is A SIM card's unique identification
     number. This property is read-only.
    :type iccid: str
    :param imei: IMEI.
    :type imei: str
    :param is_encrypted: Device encryption status.
    :type is_encrypted: bool
    :param is_supervised: Device supervised status.
    :type is_supervised: bool
    :param jail_broken: whether the device is jail broken or rooted.
    :type jail_broken: str
    :param join_type:  Possible values include: "unknown", "azureADJoined", "azureADRegistered",
     "hybridAzureADJoined".
    :type join_type: str or ~files.models.MicrosoftGraphJoinType
    :param last_sync_date_time: The date and time that the device last completed a successful sync
     with Intune.
    :type last_sync_date_time: ~datetime.datetime
    :param lost_mode_state:  Possible values include: "disabled", "enabled".
    :type lost_mode_state: str or ~files.models.MicrosoftGraphLostModeState
    :param managed_device_name: Automatically generated name to identify a device. Can be
     overwritten to a user friendly name.
    :type managed_device_name: str
    :param managed_device_owner_type:  Possible values include: "unknown", "company", "personal".
    :type managed_device_owner_type: str or ~files.models.MicrosoftGraphManagedDeviceOwnerType
    :param management_agent:  Possible values include: "eas", "mdm", "easMdm", "intuneClient",
     "easIntuneClient", "configurationManagerClient", "configurationManagerClientMdm",
     "configurationManagerClientMdmEas", "unknown", "jamf", "googleCloudDevicePolicyController",
     "microsoft365ManagedMdm", "windowsManagementCloudApi".
    :type management_agent: str or ~files.models.MicrosoftGraphManagementAgentType
    :param management_certificate_expiration_date: Reports device management certificate expiration
     date. This property is read-only.
    :type management_certificate_expiration_date: ~datetime.datetime
    :param management_features:  Possible values include: "none", "microsoftManagedDesktop".
    :type management_features: str or ~files.models.MicrosoftGraphManagedDeviceManagementFeatures
    :param management_state:  Possible values include: "managed", "retirePending", "retireFailed",
     "wipePending", "wipeFailed", "unhealthy", "deletePending", "retireIssued", "wipeIssued",
     "wipeCanceled", "retireCanceled", "discovered".
    :type management_state: str or ~files.models.MicrosoftGraphManagementState
    :param manufacturer: Manufacturer of the device.
    :type manufacturer: str
    :param meid: MEID.
    :type meid: str
    :param model: Model of the device.
    :type model: str
    :param notes: Notes on the device created by IT Admin.
    :type notes: str
    :param operating_system: Operating system of the device. Windows, iOS, etc.
    :type operating_system: str
    :param os_version: Operating system version of the device.
    :type os_version: str
    :param owner_type:  Possible values include: "unknown", "company", "personal".
    :type owner_type: str or ~files.models.MicrosoftGraphOwnerType
    :param partner_reported_threat_state:  Possible values include: "unknown", "activated",
     "deactivated", "secured", "lowSeverity", "mediumSeverity", "highSeverity", "unresponsive",
     "compromised", "misconfigured".
    :type partner_reported_threat_state: str or
     ~files.models.MicrosoftGraphManagedDevicePartnerReportedHealthState
    :param phone_number: Phone number of the device.
    :type phone_number: str
    :param physical_memory_in_bytes: Total Memory in Bytes. This property is read-only.
    :type physical_memory_in_bytes: long
    :param prefer_mdm_over_group_policy_applied_date_time: Reports the DateTime the
     preferMdmOverGroupPolicy setting was set.  When set, the Intune MDM settings will override
     Group Policy settings if there is a conflict. Read Only. This property is read-only.
    :type prefer_mdm_over_group_policy_applied_date_time: ~datetime.datetime
    :param processor_architecture:  Possible values include: "unknown", "x86", "x64", "arm",
     "arM64".
    :type processor_architecture: str or ~files.models.MicrosoftGraphManagedDeviceArchitecture
    :param remote_assistance_session_error_details: An error string that identifies issues when
     creating Remote Assistance session objects.
    :type remote_assistance_session_error_details: str
    :param remote_assistance_session_url: Url that allows a Remote Assistance session to be
     established with the device.
    :type remote_assistance_session_url: str
    :param require_user_enrollment_approval: Reports if the managed iOS device is user approval
     enrollment. This property is read-only.
    :type require_user_enrollment_approval: bool
    :param retire_after_date_time: Indicates the time after when a device will be auto retired
     because of scheduled action. This property is read-only.
    :type retire_after_date_time: ~datetime.datetime
    :param role_scope_tag_ids: List of Scope Tag IDs for this Device instance.
    :type role_scope_tag_ids: list[str]
    :param serial_number: SerialNumber.
    :type serial_number: str
    :param sku_family: Device sku family.
    :type sku_family: str
    :param sku_number: Device sku number, see also: https://docs.microsoft.com/en-
     us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getproductinfo. Valid values 0 to 2147483647.
     This property is read-only.
    :type sku_number: int
    :param specification_version: Specification version. This property is read-only.
    :type specification_version: str
    :param subscriber_carrier: Subscriber Carrier.
    :type subscriber_carrier: str
    :param total_storage_space_in_bytes: Total Storage in Bytes.
    :type total_storage_space_in_bytes: long
    :param udid: Unique Device Identifier for iOS and macOS devices. This property is read-only.
    :type udid: str
    :param user_display_name: User display name.
    :type user_display_name: str
    :param user_id: Unique Identifier for the user associated with the device.
    :type user_id: str
    :param user_principal_name: Device user principal name.
    :type user_principal_name: str
    :param users_logged_on: Indicates the last logged on users of a device. This property is read-
     only.
    :type users_logged_on: list[~files.models.MicrosoftGraphLoggedOnUser]
    :param wi_fi_mac_address: Wi-Fi MAC.
    :type wi_fi_mac_address: str
    :param windows_active_malware_count: Count of active malware for this windows device. This
     property is read-only.
    :type windows_active_malware_count: int
    :param windows_remediated_malware_count: Count of remediated malware for this windows device.
     This property is read-only.
    :type windows_remediated_malware_count: int
    :param security_baseline_states: Security baseline states for this device.
    :type security_baseline_states: list[~files.models.MicrosoftGraphSecurityBaselineState]
    :param device_compliance_policy_states: Device compliance policy states for this device.
    :type device_compliance_policy_states:
     list[~files.models.MicrosoftGraphDeviceCompliancePolicyState]
    :param device_configuration_states: Device configuration states for this device.
    :type device_configuration_states: list[~files.models.MicrosoftGraphDeviceConfigurationState]
    :param managed_device_mobile_app_configuration_states: Managed device mobile app configuration
     states for this device.
    :type managed_device_mobile_app_configuration_states:
     list[~files.models.MicrosoftGraphManagedDeviceMobileAppConfigurationState]
    :param detected_apps: All applications currently installed on the device.
    :type detected_apps: list[~files.models.MicrosoftGraphDetectedApp]
    :param device_category: Device categories provides a way to organize your devices. Using device
     categories, company administrators can define their own categories that make sense to their
     company. These categories can then be applied to a device in the Intune Azure console or
     selected by a user during device enrollment. You can filter reports and create dynamic Azure
     Active Directory device groups based on device categories.
    :type device_category: ~files.models.MicrosoftGraphDeviceCategory
    :param log_collection_requests: List of log collection requests.
    :type log_collection_requests: list[~files.models.MicrosoftGraphDeviceLogCollectionResponse]
    :param users: The primary users associated with the managed device.
    :type users: list[~files.models.MicrosoftGraphUser]
    :param windows_protection_state: Device protection status entity.
    :type windows_protection_state: ~files.models.MicrosoftGraphWindowsProtectionState
    """

    _validation = {
        'sku_number': {'maximum': 2147483647, 'minimum': -2147483648},
        'windows_active_malware_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'windows_remediated_malware_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'aad_registered': {'key': 'aadRegistered', 'type': 'bool'},
        'activation_lock_bypass_code': {'key': 'activationLockBypassCode', 'type': 'str'},
        'android_security_patch_level': {'key': 'androidSecurityPatchLevel', 'type': 'str'},
        'autopilot_enrolled': {'key': 'autopilotEnrolled', 'type': 'bool'},
        'azure_active_directory_device_id': {'key': 'azureActiveDirectoryDeviceId', 'type': 'str'},
        'azure_ad_device_id': {'key': 'azureADDeviceId', 'type': 'str'},
        'azure_ad_registered': {'key': 'azureADRegistered', 'type': 'bool'},
        'chassis_type': {'key': 'chassisType', 'type': 'str'},
        'compliance_grace_period_expiration_date_time': {'key': 'complianceGracePeriodExpirationDateTime', 'type': 'iso-8601'},
        'compliance_state': {'key': 'complianceState', 'type': 'str'},
        'configuration_manager_client_enabled_features': {'key': 'configurationManagerClientEnabledFeatures', 'type': 'MicrosoftGraphConfigurationManagerClientEnabledFeatures'},
        'configuration_manager_client_health_state': {'key': 'configurationManagerClientHealthState', 'type': 'MicrosoftGraphConfigurationManagerClientHealthState'},
        'configuration_manager_client_information': {'key': 'configurationManagerClientInformation', 'type': 'MicrosoftGraphConfigurationManagerClientInformation'},
        'device_action_results': {'key': 'deviceActionResults', 'type': '[MicrosoftGraphDeviceActionResult]'},
        'device_category_display_name': {'key': 'deviceCategoryDisplayName', 'type': 'str'},
        'device_enrollment_type': {'key': 'deviceEnrollmentType', 'type': 'str'},
        'device_health_attestation_state': {'key': 'deviceHealthAttestationState', 'type': 'MicrosoftGraphDeviceHealthAttestationState'},
        'device_name': {'key': 'deviceName', 'type': 'str'},
        'device_registration_state': {'key': 'deviceRegistrationState', 'type': 'str'},
        'device_type': {'key': 'deviceType', 'type': 'str'},
        'eas_activated': {'key': 'easActivated', 'type': 'bool'},
        'eas_activation_date_time': {'key': 'easActivationDateTime', 'type': 'iso-8601'},
        'eas_device_id': {'key': 'easDeviceId', 'type': 'str'},
        'email_address': {'key': 'emailAddress', 'type': 'str'},
        'enrolled_date_time': {'key': 'enrolledDateTime', 'type': 'iso-8601'},
        'ethernet_mac_address': {'key': 'ethernetMacAddress', 'type': 'str'},
        'exchange_access_state': {'key': 'exchangeAccessState', 'type': 'str'},
        'exchange_access_state_reason': {'key': 'exchangeAccessStateReason', 'type': 'str'},
        'exchange_last_successful_sync_date_time': {'key': 'exchangeLastSuccessfulSyncDateTime', 'type': 'iso-8601'},
        'free_storage_space_in_bytes': {'key': 'freeStorageSpaceInBytes', 'type': 'long'},
        'hardware_information': {'key': 'hardwareInformation', 'type': 'MicrosoftGraphHardwareInformation'},
        'iccid': {'key': 'iccid', 'type': 'str'},
        'imei': {'key': 'imei', 'type': 'str'},
        'is_encrypted': {'key': 'isEncrypted', 'type': 'bool'},
        'is_supervised': {'key': 'isSupervised', 'type': 'bool'},
        'jail_broken': {'key': 'jailBroken', 'type': 'str'},
        'join_type': {'key': 'joinType', 'type': 'str'},
        'last_sync_date_time': {'key': 'lastSyncDateTime', 'type': 'iso-8601'},
        'lost_mode_state': {'key': 'lostModeState', 'type': 'str'},
        'managed_device_name': {'key': 'managedDeviceName', 'type': 'str'},
        'managed_device_owner_type': {'key': 'managedDeviceOwnerType', 'type': 'str'},
        'management_agent': {'key': 'managementAgent', 'type': 'str'},
        'management_certificate_expiration_date': {'key': 'managementCertificateExpirationDate', 'type': 'iso-8601'},
        'management_features': {'key': 'managementFeatures', 'type': 'str'},
        'management_state': {'key': 'managementState', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'meid': {'key': 'meid', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'str'},
        'operating_system': {'key': 'operatingSystem', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
        'owner_type': {'key': 'ownerType', 'type': 'str'},
        'partner_reported_threat_state': {'key': 'partnerReportedThreatState', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'physical_memory_in_bytes': {'key': 'physicalMemoryInBytes', 'type': 'long'},
        'prefer_mdm_over_group_policy_applied_date_time': {'key': 'preferMdmOverGroupPolicyAppliedDateTime', 'type': 'iso-8601'},
        'processor_architecture': {'key': 'processorArchitecture', 'type': 'str'},
        'remote_assistance_session_error_details': {'key': 'remoteAssistanceSessionErrorDetails', 'type': 'str'},
        'remote_assistance_session_url': {'key': 'remoteAssistanceSessionUrl', 'type': 'str'},
        'require_user_enrollment_approval': {'key': 'requireUserEnrollmentApproval', 'type': 'bool'},
        'retire_after_date_time': {'key': 'retireAfterDateTime', 'type': 'iso-8601'},
        'role_scope_tag_ids': {'key': 'roleScopeTagIds', 'type': '[str]'},
        'serial_number': {'key': 'serialNumber', 'type': 'str'},
        'sku_family': {'key': 'skuFamily', 'type': 'str'},
        'sku_number': {'key': 'skuNumber', 'type': 'int'},
        'specification_version': {'key': 'specificationVersion', 'type': 'str'},
        'subscriber_carrier': {'key': 'subscriberCarrier', 'type': 'str'},
        'total_storage_space_in_bytes': {'key': 'totalStorageSpaceInBytes', 'type': 'long'},
        'udid': {'key': 'udid', 'type': 'str'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'users_logged_on': {'key': 'usersLoggedOn', 'type': '[MicrosoftGraphLoggedOnUser]'},
        'wi_fi_mac_address': {'key': 'wiFiMacAddress', 'type': 'str'},
        'windows_active_malware_count': {'key': 'windowsActiveMalwareCount', 'type': 'int'},
        'windows_remediated_malware_count': {'key': 'windowsRemediatedMalwareCount', 'type': 'int'},
        'security_baseline_states': {'key': 'securityBaselineStates', 'type': '[MicrosoftGraphSecurityBaselineState]'},
        'device_compliance_policy_states': {'key': 'deviceCompliancePolicyStates', 'type': '[MicrosoftGraphDeviceCompliancePolicyState]'},
        'device_configuration_states': {'key': 'deviceConfigurationStates', 'type': '[MicrosoftGraphDeviceConfigurationState]'},
        'managed_device_mobile_app_configuration_states': {'key': 'managedDeviceMobileAppConfigurationStates', 'type': '[MicrosoftGraphManagedDeviceMobileAppConfigurationState]'},
        'detected_apps': {'key': 'detectedApps', 'type': '[MicrosoftGraphDetectedApp]'},
        'device_category': {'key': 'deviceCategory', 'type': 'MicrosoftGraphDeviceCategory'},
        'log_collection_requests': {'key': 'logCollectionRequests', 'type': '[MicrosoftGraphDeviceLogCollectionResponse]'},
        'users': {'key': 'users', 'type': '[MicrosoftGraphUser]'},
        'windows_protection_state': {'key': 'windowsProtectionState', 'type': 'MicrosoftGraphWindowsProtectionState'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedDevice, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.aad_registered = kwargs.get('aad_registered', None)
        self.activation_lock_bypass_code = kwargs.get('activation_lock_bypass_code', None)
        self.android_security_patch_level = kwargs.get('android_security_patch_level', None)
        self.autopilot_enrolled = kwargs.get('autopilot_enrolled', None)
        self.azure_active_directory_device_id = kwargs.get('azure_active_directory_device_id', None)
        self.azure_ad_device_id = kwargs.get('azure_ad_device_id', None)
        self.azure_ad_registered = kwargs.get('azure_ad_registered', None)
        self.chassis_type = kwargs.get('chassis_type', None)
        self.compliance_grace_period_expiration_date_time = kwargs.get('compliance_grace_period_expiration_date_time', None)
        self.compliance_state = kwargs.get('compliance_state', None)
        self.configuration_manager_client_enabled_features = kwargs.get('configuration_manager_client_enabled_features', None)
        self.configuration_manager_client_health_state = kwargs.get('configuration_manager_client_health_state', None)
        self.configuration_manager_client_information = kwargs.get('configuration_manager_client_information', None)
        self.device_action_results = kwargs.get('device_action_results', None)
        self.device_category_display_name = kwargs.get('device_category_display_name', None)
        self.device_enrollment_type = kwargs.get('device_enrollment_type', None)
        self.device_health_attestation_state = kwargs.get('device_health_attestation_state', None)
        self.device_name = kwargs.get('device_name', None)
        self.device_registration_state = kwargs.get('device_registration_state', None)
        self.device_type = kwargs.get('device_type', None)
        self.eas_activated = kwargs.get('eas_activated', None)
        self.eas_activation_date_time = kwargs.get('eas_activation_date_time', None)
        self.eas_device_id = kwargs.get('eas_device_id', None)
        self.email_address = kwargs.get('email_address', None)
        self.enrolled_date_time = kwargs.get('enrolled_date_time', None)
        self.ethernet_mac_address = kwargs.get('ethernet_mac_address', None)
        self.exchange_access_state = kwargs.get('exchange_access_state', None)
        self.exchange_access_state_reason = kwargs.get('exchange_access_state_reason', None)
        self.exchange_last_successful_sync_date_time = kwargs.get('exchange_last_successful_sync_date_time', None)
        self.free_storage_space_in_bytes = kwargs.get('free_storage_space_in_bytes', None)
        self.hardware_information = kwargs.get('hardware_information', None)
        self.iccid = kwargs.get('iccid', None)
        self.imei = kwargs.get('imei', None)
        self.is_encrypted = kwargs.get('is_encrypted', None)
        self.is_supervised = kwargs.get('is_supervised', None)
        self.jail_broken = kwargs.get('jail_broken', None)
        self.join_type = kwargs.get('join_type', None)
        self.last_sync_date_time = kwargs.get('last_sync_date_time', None)
        self.lost_mode_state = kwargs.get('lost_mode_state', None)
        self.managed_device_name = kwargs.get('managed_device_name', None)
        self.managed_device_owner_type = kwargs.get('managed_device_owner_type', None)
        self.management_agent = kwargs.get('management_agent', None)
        self.management_certificate_expiration_date = kwargs.get('management_certificate_expiration_date', None)
        self.management_features = kwargs.get('management_features', None)
        self.management_state = kwargs.get('management_state', None)
        self.manufacturer = kwargs.get('manufacturer', None)
        self.meid = kwargs.get('meid', None)
        self.model = kwargs.get('model', None)
        self.notes = kwargs.get('notes', None)
        self.operating_system = kwargs.get('operating_system', None)
        self.os_version = kwargs.get('os_version', None)
        self.owner_type = kwargs.get('owner_type', None)
        self.partner_reported_threat_state = kwargs.get('partner_reported_threat_state', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.physical_memory_in_bytes = kwargs.get('physical_memory_in_bytes', None)
        self.prefer_mdm_over_group_policy_applied_date_time = kwargs.get('prefer_mdm_over_group_policy_applied_date_time', None)
        self.processor_architecture = kwargs.get('processor_architecture', None)
        self.remote_assistance_session_error_details = kwargs.get('remote_assistance_session_error_details', None)
        self.remote_assistance_session_url = kwargs.get('remote_assistance_session_url', None)
        self.require_user_enrollment_approval = kwargs.get('require_user_enrollment_approval', None)
        self.retire_after_date_time = kwargs.get('retire_after_date_time', None)
        self.role_scope_tag_ids = kwargs.get('role_scope_tag_ids', None)
        self.serial_number = kwargs.get('serial_number', None)
        self.sku_family = kwargs.get('sku_family', None)
        self.sku_number = kwargs.get('sku_number', None)
        self.specification_version = kwargs.get('specification_version', None)
        self.subscriber_carrier = kwargs.get('subscriber_carrier', None)
        self.total_storage_space_in_bytes = kwargs.get('total_storage_space_in_bytes', None)
        self.udid = kwargs.get('udid', None)
        self.user_display_name = kwargs.get('user_display_name', None)
        self.user_id = kwargs.get('user_id', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)
        self.users_logged_on = kwargs.get('users_logged_on', None)
        self.wi_fi_mac_address = kwargs.get('wi_fi_mac_address', None)
        self.windows_active_malware_count = kwargs.get('windows_active_malware_count', None)
        self.windows_remediated_malware_count = kwargs.get('windows_remediated_malware_count', None)
        self.security_baseline_states = kwargs.get('security_baseline_states', None)
        self.device_compliance_policy_states = kwargs.get('device_compliance_policy_states', None)
        self.device_configuration_states = kwargs.get('device_configuration_states', None)
        self.managed_device_mobile_app_configuration_states = kwargs.get('managed_device_mobile_app_configuration_states', None)
        self.detected_apps = kwargs.get('detected_apps', None)
        self.device_category = kwargs.get('device_category', None)
        self.log_collection_requests = kwargs.get('log_collection_requests', None)
        self.users = kwargs.get('users', None)
        self.windows_protection_state = kwargs.get('windows_protection_state', None)


class MicrosoftGraphManagedDeviceMobileAppConfigurationSettingState(msrest.serialization.Model):
    """Managed Device Mobile App Configuration Setting State for a given device.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param current_value: Current value of setting on device.
    :type current_value: str
    :param error_code: Error code for the setting.
    :type error_code: long
    :param error_description: Error description.
    :type error_description: str
    :param instance_display_name: Name of setting instance that is being reported.
    :type instance_display_name: str
    :param setting: The setting that is being reported.
    :type setting: str
    :param setting_instance_id: SettingInstanceId.
    :type setting_instance_id: str
    :param setting_name: Localized/user friendly setting name that is being reported.
    :type setting_name: str
    :param sources: Contributing policies.
    :type sources: list[~files.models.MicrosoftGraphSettingSource]
    :param state:  Possible values include: "unknown", "notApplicable", "compliant", "remediated",
     "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~files.models.MicrosoftGraphComplianceStatus
    :param user_email: UserEmail.
    :type user_email: str
    :param user_id: UserId.
    :type user_id: str
    :param user_name: UserName.
    :type user_name: str
    :param user_principal_name: UserPrincipalName.
    :type user_principal_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'current_value': {'key': 'currentValue', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'long'},
        'error_description': {'key': 'errorDescription', 'type': 'str'},
        'instance_display_name': {'key': 'instanceDisplayName', 'type': 'str'},
        'setting': {'key': 'setting', 'type': 'str'},
        'setting_instance_id': {'key': 'settingInstanceId', 'type': 'str'},
        'setting_name': {'key': 'settingName', 'type': 'str'},
        'sources': {'key': 'sources', 'type': '[MicrosoftGraphSettingSource]'},
        'state': {'key': 'state', 'type': 'str'},
        'user_email': {'key': 'userEmail', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedDeviceMobileAppConfigurationSettingState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.current_value = kwargs.get('current_value', None)
        self.error_code = kwargs.get('error_code', None)
        self.error_description = kwargs.get('error_description', None)
        self.instance_display_name = kwargs.get('instance_display_name', None)
        self.setting = kwargs.get('setting', None)
        self.setting_instance_id = kwargs.get('setting_instance_id', None)
        self.setting_name = kwargs.get('setting_name', None)
        self.sources = kwargs.get('sources', None)
        self.state = kwargs.get('state', None)
        self.user_email = kwargs.get('user_email', None)
        self.user_id = kwargs.get('user_id', None)
        self.user_name = kwargs.get('user_name', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class MicrosoftGraphManagedDeviceMobileAppConfigurationState(MicrosoftGraphEntity):
    """Managed Device Mobile App Configuration State for a given device.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The name of the policy for this policyBase.
    :type display_name: str
    :param platform_type:  Possible values include: "android", "androidForWork", "iOS", "macOS",
     "windowsPhone81", "windows81AndLater", "windows10AndLater", "androidWorkProfile",
     "windows10XProfile", "all".
    :type platform_type: str or ~files.models.MicrosoftGraphPolicyPlatformType
    :param setting_count: Count of how many setting a policy holds.
    :type setting_count: int
    :param setting_states:
    :type setting_states:
     list[~files.models.MicrosoftGraphManagedDeviceMobileAppConfigurationSettingState]
    :param state:  Possible values include: "unknown", "notApplicable", "compliant", "remediated",
     "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~files.models.MicrosoftGraphComplianceStatus
    :param user_id: User unique identifier, must be Guid.
    :type user_id: str
    :param user_principal_name: User Principal Name.
    :type user_principal_name: str
    :param version: The version of the policy.
    :type version: int
    """

    _validation = {
        'setting_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'version': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'platform_type': {'key': 'platformType', 'type': 'str'},
        'setting_count': {'key': 'settingCount', 'type': 'int'},
        'setting_states': {'key': 'settingStates', 'type': '[MicrosoftGraphManagedDeviceMobileAppConfigurationSettingState]'},
        'state': {'key': 'state', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedDeviceMobileAppConfigurationState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.platform_type = kwargs.get('platform_type', None)
        self.setting_count = kwargs.get('setting_count', None)
        self.setting_states = kwargs.get('setting_states', None)
        self.state = kwargs.get('state', None)
        self.user_id = kwargs.get('user_id', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphMeetingParticipantInfo(msrest.serialization.Model):
    """meetingParticipantInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param identity: identitySet.
    :type identity: ~files.models.MicrosoftGraphIdentitySet
    :param role:  Possible values include: "attendee", "presenter", "unknownFutureValue".
    :type role: str or ~files.models.MicrosoftGraphOnlineMeetingRole
    :param upn: User principal name of the participant.
    :type upn: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'identity': {'key': 'identity', 'type': 'MicrosoftGraphIdentitySet'},
        'role': {'key': 'role', 'type': 'str'},
        'upn': {'key': 'upn', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMeetingParticipantInfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.identity = kwargs.get('identity', None)
        self.role = kwargs.get('role', None)
        self.upn = kwargs.get('upn', None)


class MicrosoftGraphMeetingParticipants(msrest.serialization.Model):
    """meetingParticipants.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param attendees:
    :type attendees: list[~files.models.MicrosoftGraphMeetingParticipantInfo]
    :param contributors:
    :type contributors: list[~files.models.MicrosoftGraphMeetingParticipantInfo]
    :param organizer: meetingParticipantInfo.
    :type organizer: ~files.models.MicrosoftGraphMeetingParticipantInfo
    :param producers:
    :type producers: list[~files.models.MicrosoftGraphMeetingParticipantInfo]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'attendees': {'key': 'attendees', 'type': '[MicrosoftGraphMeetingParticipantInfo]'},
        'contributors': {'key': 'contributors', 'type': '[MicrosoftGraphMeetingParticipantInfo]'},
        'organizer': {'key': 'organizer', 'type': 'MicrosoftGraphMeetingParticipantInfo'},
        'producers': {'key': 'producers', 'type': '[MicrosoftGraphMeetingParticipantInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMeetingParticipants, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.attendees = kwargs.get('attendees', None)
        self.contributors = kwargs.get('contributors', None)
        self.organizer = kwargs.get('organizer', None)
        self.producers = kwargs.get('producers', None)


class MicrosoftGraphMention(MicrosoftGraphEntity):
    """mention.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param application:
    :type application: str
    :param client_reference:
    :type client_reference: str
    :param created_by: emailAddress.
    :type created_by: ~files.models.MicrosoftGraphEmailAddress
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param deep_link:
    :type deep_link: str
    :param mentioned: emailAddress.
    :type mentioned: ~files.models.MicrosoftGraphEmailAddress
    :param mention_text:
    :type mention_text: str
    :param server_created_date_time:
    :type server_created_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'application': {'key': 'application', 'type': 'str'},
        'client_reference': {'key': 'clientReference', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphEmailAddress'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'deep_link': {'key': 'deepLink', 'type': 'str'},
        'mentioned': {'key': 'mentioned', 'type': 'MicrosoftGraphEmailAddress'},
        'mention_text': {'key': 'mentionText', 'type': 'str'},
        'server_created_date_time': {'key': 'serverCreatedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMention, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.application = kwargs.get('application', None)
        self.client_reference = kwargs.get('client_reference', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.deep_link = kwargs.get('deep_link', None)
        self.mentioned = kwargs.get('mentioned', None)
        self.mention_text = kwargs.get('mention_text', None)
        self.server_created_date_time = kwargs.get('server_created_date_time', None)


class MicrosoftGraphMentionAction(msrest.serialization.Model):
    """mentionAction.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param mentionees: The identities of the users mentioned in this action.
    :type mentionees: list[~files.models.MicrosoftGraphIdentitySet]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'mentionees': {'key': 'mentionees', 'type': '[MicrosoftGraphIdentitySet]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMentionAction, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.mentionees = kwargs.get('mentionees', None)


class MicrosoftGraphMentionsPreview(msrest.serialization.Model):
    """mentionsPreview.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_mentioned:
    :type is_mentioned: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_mentioned': {'key': 'isMentioned', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMentionsPreview, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_mentioned = kwargs.get('is_mentioned', None)


class MicrosoftGraphMessage(MicrosoftGraphOutlookItem):
    """message.

    :param id: Read-only.
    :type id: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param bcc_recipients: The Bcc: recipients for the message.
    :type bcc_recipients: list[~files.models.MicrosoftGraphRecipient]
    :param body: itemBody.
    :type body: ~files.models.MicrosoftGraphItemBody
    :param body_preview: The first 255 characters of the message body. It is in text format.
    :type body_preview: str
    :param cc_recipients: The Cc: recipients for the message.
    :type cc_recipients: list[~files.models.MicrosoftGraphRecipient]
    :param conversation_id: The ID of the conversation the email belongs to.
    :type conversation_id: str
    :param conversation_index: Indicates the position of the message within the conversation.
    :type conversation_index: bytes
    :param flag: followupFlag.
    :type flag: ~files.models.MicrosoftGraphFollowupFlag
    :param from_property: recipient.
    :type from_property: ~files.models.MicrosoftGraphRecipient
    :param has_attachments: Indicates whether the message has attachments. This property doesn't
     include inline attachments, so if a message contains only inline attachments, this property is
     false. To verify the existence of inline attachments, parse the body property to look for a src
     attribute, such as :code:`<IMG src='cid:image001.jpg@01D26CD8.6C05F070'>`.
    :type has_attachments: bool
    :param importance:  Possible values include: "low", "normal", "high".
    :type importance: str or ~files.models.MicrosoftGraphImportance
    :param inference_classification:  Possible values include: "focused", "other".
    :type inference_classification: str or ~files.models.MicrosoftGraphInferenceClassificationType
    :param internet_message_headers: A collection of message headers defined by RFC5322. The set
     includes message headers indicating the network path taken by a message from the sender to the
     recipient. It can also contain custom message headers that hold app data for the message.
     Returned only on applying a $select query option. Read-only.
    :type internet_message_headers: list[~files.models.MicrosoftGraphInternetMessageHeader]
    :param internet_message_id: The message ID in the format specified by RFC2822.
    :type internet_message_id: str
    :param is_delivery_receipt_requested: Indicates whether a read receipt is requested for the
     message.
    :type is_delivery_receipt_requested: bool
    :param is_draft: Indicates whether the message is a draft. A message is a draft if it hasn't
     been sent yet.
    :type is_draft: bool
    :param is_read: Indicates whether the message has been read.
    :type is_read: bool
    :param is_read_receipt_requested: Indicates whether a read receipt is requested for the
     message.
    :type is_read_receipt_requested: bool
    :param mentions_preview: mentionsPreview.
    :type mentions_preview: ~files.models.MicrosoftGraphMentionsPreview
    :param parent_folder_id: The unique identifier for the message's parent mailFolder.
    :type parent_folder_id: str
    :param received_date_time: The date and time the message was received.
    :type received_date_time: ~datetime.datetime
    :param reply_to: The email addresses to use when replying.
    :type reply_to: list[~files.models.MicrosoftGraphRecipient]
    :param sender: recipient.
    :type sender: ~files.models.MicrosoftGraphRecipient
    :param sent_date_time: The date and time the message was sent.
    :type sent_date_time: ~datetime.datetime
    :param subject: The subject of the message.
    :type subject: str
    :param to_recipients: The To: recipients for the message.
    :type to_recipients: list[~files.models.MicrosoftGraphRecipient]
    :param unique_body: itemBody.
    :type unique_body: ~files.models.MicrosoftGraphItemBody
    :param unsubscribe_data:
    :type unsubscribe_data: list[str]
    :param unsubscribe_enabled:
    :type unsubscribe_enabled: bool
    :param web_link: The URL to open the message in Outlook on the web.You can append an ispopout
     argument to the end of the URL to change how the message is displayed. If ispopout is not
     present or if it is set to 1, then the message is shown in a popout window. If ispopout is set
     to 0, then the browser will show the message in the Outlook on the web review pane.The message
     will open in the browser if you are logged in to your mailbox via Outlook on the web. You will
     be prompted to login if you are not already logged in with the browser.This URL cannot be
     accessed from within an iFrame.
    :type web_link: str
    :param attachments: The fileAttachment and itemAttachment attachments for the message.
    :type attachments: list[~files.models.MicrosoftGraphAttachment]
    :param extensions: The collection of open extensions defined for the message. Nullable.
    :type extensions: list[~files.models.MicrosoftGraphExtension]
    :param mentions:
    :type mentions: list[~files.models.MicrosoftGraphMention]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the message. Nullable.
    :type multi_value_extended_properties:
     list[~files.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the message. Nullable.
    :type single_value_extended_properties:
     list[~files.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'bcc_recipients': {'key': 'bccRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'body_preview': {'key': 'bodyPreview', 'type': 'str'},
        'cc_recipients': {'key': 'ccRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'conversation_id': {'key': 'conversationId', 'type': 'str'},
        'conversation_index': {'key': 'conversationIndex', 'type': 'base64'},
        'flag': {'key': 'flag', 'type': 'MicrosoftGraphFollowupFlag'},
        'from_property': {'key': 'from', 'type': 'MicrosoftGraphRecipient'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'importance': {'key': 'importance', 'type': 'str'},
        'inference_classification': {'key': 'inferenceClassification', 'type': 'str'},
        'internet_message_headers': {'key': 'internetMessageHeaders', 'type': '[MicrosoftGraphInternetMessageHeader]'},
        'internet_message_id': {'key': 'internetMessageId', 'type': 'str'},
        'is_delivery_receipt_requested': {'key': 'isDeliveryReceiptRequested', 'type': 'bool'},
        'is_draft': {'key': 'isDraft', 'type': 'bool'},
        'is_read': {'key': 'isRead', 'type': 'bool'},
        'is_read_receipt_requested': {'key': 'isReadReceiptRequested', 'type': 'bool'},
        'mentions_preview': {'key': 'mentionsPreview', 'type': 'MicrosoftGraphMentionsPreview'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'received_date_time': {'key': 'receivedDateTime', 'type': 'iso-8601'},
        'reply_to': {'key': 'replyTo', 'type': '[MicrosoftGraphRecipient]'},
        'sender': {'key': 'sender', 'type': 'MicrosoftGraphRecipient'},
        'sent_date_time': {'key': 'sentDateTime', 'type': 'iso-8601'},
        'subject': {'key': 'subject', 'type': 'str'},
        'to_recipients': {'key': 'toRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'unique_body': {'key': 'uniqueBody', 'type': 'MicrosoftGraphItemBody'},
        'unsubscribe_data': {'key': 'unsubscribeData', 'type': '[str]'},
        'unsubscribe_enabled': {'key': 'unsubscribeEnabled', 'type': 'bool'},
        'web_link': {'key': 'webLink', 'type': 'str'},
        'attachments': {'key': 'attachments', 'type': '[MicrosoftGraphAttachment]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphExtension]'},
        'mentions': {'key': 'mentions', 'type': '[MicrosoftGraphMention]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMessage, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.bcc_recipients = kwargs.get('bcc_recipients', None)
        self.body = kwargs.get('body', None)
        self.body_preview = kwargs.get('body_preview', None)
        self.cc_recipients = kwargs.get('cc_recipients', None)
        self.conversation_id = kwargs.get('conversation_id', None)
        self.conversation_index = kwargs.get('conversation_index', None)
        self.flag = kwargs.get('flag', None)
        self.from_property = kwargs.get('from_property', None)
        self.has_attachments = kwargs.get('has_attachments', None)
        self.importance = kwargs.get('importance', None)
        self.inference_classification = kwargs.get('inference_classification', None)
        self.internet_message_headers = kwargs.get('internet_message_headers', None)
        self.internet_message_id = kwargs.get('internet_message_id', None)
        self.is_delivery_receipt_requested = kwargs.get('is_delivery_receipt_requested', None)
        self.is_draft = kwargs.get('is_draft', None)
        self.is_read = kwargs.get('is_read', None)
        self.is_read_receipt_requested = kwargs.get('is_read_receipt_requested', None)
        self.mentions_preview = kwargs.get('mentions_preview', None)
        self.parent_folder_id = kwargs.get('parent_folder_id', None)
        self.received_date_time = kwargs.get('received_date_time', None)
        self.reply_to = kwargs.get('reply_to', None)
        self.sender = kwargs.get('sender', None)
        self.sent_date_time = kwargs.get('sent_date_time', None)
        self.subject = kwargs.get('subject', None)
        self.to_recipients = kwargs.get('to_recipients', None)
        self.unique_body = kwargs.get('unique_body', None)
        self.unsubscribe_data = kwargs.get('unsubscribe_data', None)
        self.unsubscribe_enabled = kwargs.get('unsubscribe_enabled', None)
        self.web_link = kwargs.get('web_link', None)
        self.attachments = kwargs.get('attachments', None)
        self.extensions = kwargs.get('extensions', None)
        self.mentions = kwargs.get('mentions', None)
        self.multi_value_extended_properties = kwargs.get('multi_value_extended_properties', None)
        self.single_value_extended_properties = kwargs.get('single_value_extended_properties', None)


class MicrosoftGraphMessageRule(MicrosoftGraphEntity):
    """messageRule.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param actions: messageRuleActions.
    :type actions: ~files.models.MicrosoftGraphMessageRuleActions
    :param conditions: messageRulePredicates.
    :type conditions: ~files.models.MicrosoftGraphMessageRulePredicates
    :param display_name: The display name of the rule.
    :type display_name: str
    :param exceptions: messageRulePredicates.
    :type exceptions: ~files.models.MicrosoftGraphMessageRulePredicates
    :param has_error: Indicates whether the rule is in an error condition. Read-only.
    :type has_error: bool
    :param is_enabled: Indicates whether the rule is enabled to be applied to messages.
    :type is_enabled: bool
    :param is_read_only: Indicates if the rule is read-only and cannot be modified or deleted by
     the rules REST API.
    :type is_read_only: bool
    :param sequence: Indicates the order in which the rule is executed, among other rules.
    :type sequence: int
    """

    _validation = {
        'sequence': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'actions': {'key': 'actions', 'type': 'MicrosoftGraphMessageRuleActions'},
        'conditions': {'key': 'conditions', 'type': 'MicrosoftGraphMessageRulePredicates'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'exceptions': {'key': 'exceptions', 'type': 'MicrosoftGraphMessageRulePredicates'},
        'has_error': {'key': 'hasError', 'type': 'bool'},
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'is_read_only': {'key': 'isReadOnly', 'type': 'bool'},
        'sequence': {'key': 'sequence', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMessageRule, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.actions = kwargs.get('actions', None)
        self.conditions = kwargs.get('conditions', None)
        self.display_name = kwargs.get('display_name', None)
        self.exceptions = kwargs.get('exceptions', None)
        self.has_error = kwargs.get('has_error', None)
        self.is_enabled = kwargs.get('is_enabled', None)
        self.is_read_only = kwargs.get('is_read_only', None)
        self.sequence = kwargs.get('sequence', None)


class MicrosoftGraphMessageRuleActions(msrest.serialization.Model):
    """messageRuleActions.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param assign_categories: A list of categories to be assigned to a message.
    :type assign_categories: list[str]
    :param copy_to_folder: The ID of a folder that a message is to be copied to.
    :type copy_to_folder: str
    :param delete: Indicates whether a message should be moved to the Deleted Items folder.
    :type delete: bool
    :param forward_as_attachment_to: The email addresses of the recipients to which a message
     should be forwarded as an attachment.
    :type forward_as_attachment_to: list[~files.models.MicrosoftGraphRecipient]
    :param forward_to: The email addresses of the recipients to which a message should be
     forwarded.
    :type forward_to: list[~files.models.MicrosoftGraphRecipient]
    :param mark_as_read: Indicates whether a message should be marked as read.
    :type mark_as_read: bool
    :param mark_importance:  Possible values include: "low", "normal", "high".
    :type mark_importance: str or ~files.models.MicrosoftGraphImportance
    :param move_to_folder: The ID of the folder that a message will be moved to.
    :type move_to_folder: str
    :param permanent_delete: Indicates whether a message should be permanently deleted and not
     saved to the Deleted Items folder.
    :type permanent_delete: bool
    :param redirect_to: The email addresses to which a message should be redirected.
    :type redirect_to: list[~files.models.MicrosoftGraphRecipient]
    :param stop_processing_rules: Indicates whether subsequent rules should be evaluated.
    :type stop_processing_rules: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'assign_categories': {'key': 'assignCategories', 'type': '[str]'},
        'copy_to_folder': {'key': 'copyToFolder', 'type': 'str'},
        'delete': {'key': 'delete', 'type': 'bool'},
        'forward_as_attachment_to': {'key': 'forwardAsAttachmentTo', 'type': '[MicrosoftGraphRecipient]'},
        'forward_to': {'key': 'forwardTo', 'type': '[MicrosoftGraphRecipient]'},
        'mark_as_read': {'key': 'markAsRead', 'type': 'bool'},
        'mark_importance': {'key': 'markImportance', 'type': 'str'},
        'move_to_folder': {'key': 'moveToFolder', 'type': 'str'},
        'permanent_delete': {'key': 'permanentDelete', 'type': 'bool'},
        'redirect_to': {'key': 'redirectTo', 'type': '[MicrosoftGraphRecipient]'},
        'stop_processing_rules': {'key': 'stopProcessingRules', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMessageRuleActions, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.assign_categories = kwargs.get('assign_categories', None)
        self.copy_to_folder = kwargs.get('copy_to_folder', None)
        self.delete = kwargs.get('delete', None)
        self.forward_as_attachment_to = kwargs.get('forward_as_attachment_to', None)
        self.forward_to = kwargs.get('forward_to', None)
        self.mark_as_read = kwargs.get('mark_as_read', None)
        self.mark_importance = kwargs.get('mark_importance', None)
        self.move_to_folder = kwargs.get('move_to_folder', None)
        self.permanent_delete = kwargs.get('permanent_delete', None)
        self.redirect_to = kwargs.get('redirect_to', None)
        self.stop_processing_rules = kwargs.get('stop_processing_rules', None)


class MicrosoftGraphMessageRulePredicates(msrest.serialization.Model):
    """messageRulePredicates.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param body_contains: Represents the strings that should appear in the body of an incoming
     message in order for the condition or exception to apply.
    :type body_contains: list[str]
    :param body_or_subject_contains: Represents the strings that should appear in the body or
     subject of an incoming message in order for the condition or exception to apply.
    :type body_or_subject_contains: list[str]
    :param categories: Represents the categories that an incoming message should be labeled with in
     order for the condition or exception to apply.
    :type categories: list[str]
    :param from_addresses: Represents the specific sender email addresses of an incoming message in
     order for the condition or exception to apply.
    :type from_addresses: list[~files.models.MicrosoftGraphRecipient]
    :param has_attachments: Indicates whether an incoming message must have attachments in order
     for the condition or exception to apply.
    :type has_attachments: bool
    :param header_contains: Represents the strings that appear in the headers of an incoming
     message in order for the condition or exception to apply.
    :type header_contains: list[str]
    :param importance:  Possible values include: "low", "normal", "high".
    :type importance: str or ~files.models.MicrosoftGraphImportance
    :param is_approval_request: Indicates whether an incoming message must be an approval request
     in order for the condition or exception to apply.
    :type is_approval_request: bool
    :param is_automatic_forward: Indicates whether an incoming message must be automatically
     forwarded in order for the condition or exception to apply.
    :type is_automatic_forward: bool
    :param is_automatic_reply: Indicates whether an incoming message must be an auto reply in order
     for the condition or exception to apply.
    :type is_automatic_reply: bool
    :param is_encrypted: Indicates whether an incoming message must be encrypted in order for the
     condition or exception to apply.
    :type is_encrypted: bool
    :param is_meeting_request: Indicates whether an incoming message must be a meeting request in
     order for the condition or exception to apply.
    :type is_meeting_request: bool
    :param is_meeting_response: Indicates whether an incoming message must be a meeting response in
     order for the condition or exception to apply.
    :type is_meeting_response: bool
    :param is_non_delivery_report: Indicates whether an incoming message must be a non-delivery
     report in order for the condition or exception to apply.
    :type is_non_delivery_report: bool
    :param is_permission_controlled: Indicates whether an incoming message must be permission
     controlled (RMS-protected) in order for the condition or exception to apply.
    :type is_permission_controlled: bool
    :param is_read_receipt: Indicates whether an incoming message must be a read receipt in order
     for the condition or exception to apply.
    :type is_read_receipt: bool
    :param is_signed: Indicates whether an incoming message must be S/MIME-signed in order for the
     condition or exception to apply.
    :type is_signed: bool
    :param is_voicemail: Indicates whether an incoming message must be a voice mail in order for
     the condition or exception to apply.
    :type is_voicemail: bool
    :param message_action_flag:  Possible values include: "any", "call", "doNotForward",
     "followUp", "fyi", "forward", "noResponseNecessary", "read", "reply", "replyToAll", "review".
    :type message_action_flag: str or ~files.models.MicrosoftGraphMessageActionFlag
    :param not_sent_to_me: Indicates whether the owner of the mailbox must not be a recipient of an
     incoming message in order for the condition or exception to apply.
    :type not_sent_to_me: bool
    :param recipient_contains: Represents the strings that appear in either the toRecipients or
     ccRecipients properties of an incoming message in order for the condition or exception to
     apply.
    :type recipient_contains: list[str]
    :param sender_contains: Represents the strings that appear in the from property of an incoming
     message in order for the condition or exception to apply.
    :type sender_contains: list[str]
    :param sensitivity:  Possible values include: "normal", "personal", "private", "confidential".
    :type sensitivity: str or ~files.models.MicrosoftGraphSensitivity
    :param sent_cc_me: Indicates whether the owner of the mailbox must be in the ccRecipients
     property of an incoming message in order for the condition or exception to apply.
    :type sent_cc_me: bool
    :param sent_only_to_me: Indicates whether the owner of the mailbox must be the only recipient
     in an incoming message in order for the condition or exception to apply.
    :type sent_only_to_me: bool
    :param sent_to_addresses: Represents the email addresses that an incoming message must have
     been sent to in order for the condition or exception to apply.
    :type sent_to_addresses: list[~files.models.MicrosoftGraphRecipient]
    :param sent_to_me: Indicates whether the owner of the mailbox must be in the toRecipients
     property of an incoming message in order for the condition or exception to apply.
    :type sent_to_me: bool
    :param sent_to_or_cc_me: Indicates whether the owner of the mailbox must be in either a
     toRecipients or ccRecipients property of an incoming message in order for the condition or
     exception to apply.
    :type sent_to_or_cc_me: bool
    :param subject_contains: Represents the strings that appear in the subject of an incoming
     message in order for the condition or exception to apply.
    :type subject_contains: list[str]
    :param within_size_range: sizeRange.
    :type within_size_range: ~files.models.MicrosoftGraphSizeRange
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'body_contains': {'key': 'bodyContains', 'type': '[str]'},
        'body_or_subject_contains': {'key': 'bodyOrSubjectContains', 'type': '[str]'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'from_addresses': {'key': 'fromAddresses', 'type': '[MicrosoftGraphRecipient]'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'header_contains': {'key': 'headerContains', 'type': '[str]'},
        'importance': {'key': 'importance', 'type': 'str'},
        'is_approval_request': {'key': 'isApprovalRequest', 'type': 'bool'},
        'is_automatic_forward': {'key': 'isAutomaticForward', 'type': 'bool'},
        'is_automatic_reply': {'key': 'isAutomaticReply', 'type': 'bool'},
        'is_encrypted': {'key': 'isEncrypted', 'type': 'bool'},
        'is_meeting_request': {'key': 'isMeetingRequest', 'type': 'bool'},
        'is_meeting_response': {'key': 'isMeetingResponse', 'type': 'bool'},
        'is_non_delivery_report': {'key': 'isNonDeliveryReport', 'type': 'bool'},
        'is_permission_controlled': {'key': 'isPermissionControlled', 'type': 'bool'},
        'is_read_receipt': {'key': 'isReadReceipt', 'type': 'bool'},
        'is_signed': {'key': 'isSigned', 'type': 'bool'},
        'is_voicemail': {'key': 'isVoicemail', 'type': 'bool'},
        'message_action_flag': {'key': 'messageActionFlag', 'type': 'str'},
        'not_sent_to_me': {'key': 'notSentToMe', 'type': 'bool'},
        'recipient_contains': {'key': 'recipientContains', 'type': '[str]'},
        'sender_contains': {'key': 'senderContains', 'type': '[str]'},
        'sensitivity': {'key': 'sensitivity', 'type': 'str'},
        'sent_cc_me': {'key': 'sentCcMe', 'type': 'bool'},
        'sent_only_to_me': {'key': 'sentOnlyToMe', 'type': 'bool'},
        'sent_to_addresses': {'key': 'sentToAddresses', 'type': '[MicrosoftGraphRecipient]'},
        'sent_to_me': {'key': 'sentToMe', 'type': 'bool'},
        'sent_to_or_cc_me': {'key': 'sentToOrCcMe', 'type': 'bool'},
        'subject_contains': {'key': 'subjectContains', 'type': '[str]'},
        'within_size_range': {'key': 'withinSizeRange', 'type': 'MicrosoftGraphSizeRange'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMessageRulePredicates, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.body_contains = kwargs.get('body_contains', None)
        self.body_or_subject_contains = kwargs.get('body_or_subject_contains', None)
        self.categories = kwargs.get('categories', None)
        self.from_addresses = kwargs.get('from_addresses', None)
        self.has_attachments = kwargs.get('has_attachments', None)
        self.header_contains = kwargs.get('header_contains', None)
        self.importance = kwargs.get('importance', None)
        self.is_approval_request = kwargs.get('is_approval_request', None)
        self.is_automatic_forward = kwargs.get('is_automatic_forward', None)
        self.is_automatic_reply = kwargs.get('is_automatic_reply', None)
        self.is_encrypted = kwargs.get('is_encrypted', None)
        self.is_meeting_request = kwargs.get('is_meeting_request', None)
        self.is_meeting_response = kwargs.get('is_meeting_response', None)
        self.is_non_delivery_report = kwargs.get('is_non_delivery_report', None)
        self.is_permission_controlled = kwargs.get('is_permission_controlled', None)
        self.is_read_receipt = kwargs.get('is_read_receipt', None)
        self.is_signed = kwargs.get('is_signed', None)
        self.is_voicemail = kwargs.get('is_voicemail', None)
        self.message_action_flag = kwargs.get('message_action_flag', None)
        self.not_sent_to_me = kwargs.get('not_sent_to_me', None)
        self.recipient_contains = kwargs.get('recipient_contains', None)
        self.sender_contains = kwargs.get('sender_contains', None)
        self.sensitivity = kwargs.get('sensitivity', None)
        self.sent_cc_me = kwargs.get('sent_cc_me', None)
        self.sent_only_to_me = kwargs.get('sent_only_to_me', None)
        self.sent_to_addresses = kwargs.get('sent_to_addresses', None)
        self.sent_to_me = kwargs.get('sent_to_me', None)
        self.sent_to_or_cc_me = kwargs.get('sent_to_or_cc_me', None)
        self.subject_contains = kwargs.get('subject_contains', None)
        self.within_size_range = kwargs.get('within_size_range', None)


class MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod(MicrosoftGraphAuthenticationMethod):
    """microsoftAuthenticatorAuthenticationMethod.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphMobileAppIntentAndState(MicrosoftGraphEntity):
    """MobileApp Intent and Install State for a given device.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param managed_device_identifier: Device identifier created or collected by Intune.
    :type managed_device_identifier: str
    :param mobile_app_list: The list of payload intents and states for the tenant.
    :type mobile_app_list: list[~files.models.MicrosoftGraphMobileAppIntentAndStateDetail]
    :param user_id: Identifier for the user that tried to enroll the device.
    :type user_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'managed_device_identifier': {'key': 'managedDeviceIdentifier', 'type': 'str'},
        'mobile_app_list': {'key': 'mobileAppList', 'type': '[MicrosoftGraphMobileAppIntentAndStateDetail]'},
        'user_id': {'key': 'userId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMobileAppIntentAndState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.managed_device_identifier = kwargs.get('managed_device_identifier', None)
        self.mobile_app_list = kwargs.get('mobile_app_list', None)
        self.user_id = kwargs.get('user_id', None)


class MicrosoftGraphMobileAppIntentAndStateDetail(msrest.serialization.Model):
    """Mobile App Intent and Install State for a given device.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param application_id: MobieApp identifier.
    :type application_id: str
    :param display_name: The admin provided or imported title of the app.
    :type display_name: str
    :param display_version: Human readable version of the application.
    :type display_version: str
    :param install_state:  Possible values include: "installed", "notApplicable", "failed",
     "notInstalled", "uninstallFailed", "pendingInstall", "unknown".
    :type install_state: str or ~files.models.MicrosoftGraphResultantAppState
    :param mobile_app_intent:  Possible values include: "available", "notAvailable",
     "requiredInstall", "requiredUninstall", "requiredAndAvailableInstall",
     "availableInstallWithoutEnrollment", "exclude".
    :type mobile_app_intent: str or ~files.models.MicrosoftGraphMobileAppIntent
    :param supported_device_types: The supported platforms for the app.
    :type supported_device_types: list[~files.models.MicrosoftGraphMobileAppSupportedDeviceType]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'application_id': {'key': 'applicationId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'display_version': {'key': 'displayVersion', 'type': 'str'},
        'install_state': {'key': 'installState', 'type': 'str'},
        'mobile_app_intent': {'key': 'mobileAppIntent', 'type': 'str'},
        'supported_device_types': {'key': 'supportedDeviceTypes', 'type': '[MicrosoftGraphMobileAppSupportedDeviceType]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMobileAppIntentAndStateDetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.application_id = kwargs.get('application_id', None)
        self.display_name = kwargs.get('display_name', None)
        self.display_version = kwargs.get('display_version', None)
        self.install_state = kwargs.get('install_state', None)
        self.mobile_app_intent = kwargs.get('mobile_app_intent', None)
        self.supported_device_types = kwargs.get('supported_device_types', None)


class MicrosoftGraphMobileAppSupportedDeviceType(msrest.serialization.Model):
    """Device properties.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param maximum_operating_system_version: Maximum OS version.
    :type maximum_operating_system_version: str
    :param minimum_operating_system_version: Minimum OS version.
    :type minimum_operating_system_version: str
    :param type:  Possible values include: "desktop", "windowsRT", "winMO6", "nokia",
     "windowsPhone", "mac", "winCE", "winEmbedded", "iPhone", "iPad", "iPod", "android",
     "iSocConsumer", "unix", "macMDM", "holoLens", "surfaceHub", "androidForWork",
     "androidEnterprise", "windows10x", "androidnGMS", "cloudPC", "blackberry", "palm", "unknown".
    :type type: str or ~files.models.MicrosoftGraphDeviceType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'maximum_operating_system_version': {'key': 'maximumOperatingSystemVersion', 'type': 'str'},
        'minimum_operating_system_version': {'key': 'minimumOperatingSystemVersion', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMobileAppSupportedDeviceType, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.maximum_operating_system_version = kwargs.get('maximum_operating_system_version', None)
        self.minimum_operating_system_version = kwargs.get('minimum_operating_system_version', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphMobileAppTroubleshootingEvent(MicrosoftGraphDeviceManagementTroubleshootingEvent):
    """MobileAppTroubleshootingEvent Entity.

    :param id: Read-only.
    :type id: str
    :param additional_information: A set of string key and string value pairs which provides
     additional information on the Troubleshooting event.
    :type additional_information: list[~files.models.MicrosoftGraphKeyValuePair]
    :param correlation_id: Id used for tracing the failure in the service.
    :type correlation_id: str
    :param event_date_time: Time when the event occurred .
    :type event_date_time: ~datetime.datetime
    :param event_name: Event Name corresponding to the Troubleshooting Event. It is an Optional
     field.
    :type event_name: str
    :param troubleshooting_error_details: Object containing detailed information about the error
     and its remediation.
    :type troubleshooting_error_details:
     ~files.models.MicrosoftGraphDeviceManagementTroubleshootingErrorDetails
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param application_id: Intune application identifier.
    :type application_id: str
    :param history: Intune Mobile Application Troubleshooting History Item.
    :type history: list[~files.models.MicrosoftGraphMobileAppTroubleshootingHistoryItem]
    :param managed_device_identifier: Device identifier created or collected by Intune.
    :type managed_device_identifier: str
    :param user_id: Identifier for the user that tried to enroll the device.
    :type user_id: str
    :param app_log_collection_requests: The collection property of AppLogUploadRequest.
    :type app_log_collection_requests: list[~files.models.MicrosoftGraphAppLogCollectionRequest]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_information': {'key': 'additionalInformation', 'type': '[MicrosoftGraphKeyValuePair]'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'event_date_time': {'key': 'eventDateTime', 'type': 'iso-8601'},
        'event_name': {'key': 'eventName', 'type': 'str'},
        'troubleshooting_error_details': {'key': 'troubleshootingErrorDetails', 'type': 'MicrosoftGraphDeviceManagementTroubleshootingErrorDetails'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'application_id': {'key': 'applicationId', 'type': 'str'},
        'history': {'key': 'history', 'type': '[MicrosoftGraphMobileAppTroubleshootingHistoryItem]'},
        'managed_device_identifier': {'key': 'managedDeviceIdentifier', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'app_log_collection_requests': {'key': 'appLogCollectionRequests', 'type': '[MicrosoftGraphAppLogCollectionRequest]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMobileAppTroubleshootingEvent, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.application_id = kwargs.get('application_id', None)
        self.history = kwargs.get('history', None)
        self.managed_device_identifier = kwargs.get('managed_device_identifier', None)
        self.user_id = kwargs.get('user_id', None)
        self.app_log_collection_requests = kwargs.get('app_log_collection_requests', None)


class MicrosoftGraphMobileAppTroubleshootingHistoryItem(msrest.serialization.Model):
    """History Item contained in the Mobile App Troubleshooting Event.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param occurrence_date_time: Time when the history item occurred.
    :type occurrence_date_time: ~datetime.datetime
    :param troubleshooting_error_details: Object containing detailed information about the error
     and its remediation.
    :type troubleshooting_error_details:
     ~files.models.MicrosoftGraphDeviceManagementTroubleshootingErrorDetails
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'occurrence_date_time': {'key': 'occurrenceDateTime', 'type': 'iso-8601'},
        'troubleshooting_error_details': {'key': 'troubleshootingErrorDetails', 'type': 'MicrosoftGraphDeviceManagementTroubleshootingErrorDetails'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMobileAppTroubleshootingHistoryItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.occurrence_date_time = kwargs.get('occurrence_date_time', None)
        self.troubleshooting_error_details = kwargs.get('troubleshooting_error_details', None)


class MicrosoftGraphMoveAction(msrest.serialization.Model):
    """moveAction.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param from_property: The name of the location the item was moved from.
    :type from_property: str
    :param to: The name of the location the item was moved to.
    :type to: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'from_property': {'key': 'from', 'type': 'str'},
        'to': {'key': 'to', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMoveAction, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.from_property = kwargs.get('from_property', None)
        self.to = kwargs.get('to', None)


class MicrosoftGraphMultiValueLegacyExtendedProperty(MicrosoftGraphEntity):
    """multiValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value: A collection of property values.
    :type value: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMultiValueLegacyExtendedProperty, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)


class MicrosoftGraphOnenoteEntityBaseModel(MicrosoftGraphEntity):
    """onenoteEntityBaseModel.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'self_property': {'key': 'self', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOnenoteEntityBaseModel, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.self_property = kwargs.get('self_property', None)


class MicrosoftGraphOnenoteEntitySchemaObjectModel(MicrosoftGraphOnenoteEntityBaseModel):
    """onenoteEntitySchemaObjectModel.

    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: The date and time when the page was created. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type created_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOnenoteEntitySchemaObjectModel, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)


class MicrosoftGraphOnenoteEntityHierarchyModel(MicrosoftGraphOnenoteEntitySchemaObjectModel):
    """onenoteEntityHierarchyModel.

    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    :param created_date_time: The date and time when the page was created. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type created_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param display_name: The name of the notebook.
    :type display_name: str
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The date and time when the notebook was last modified. The
     timestamp represents date and time information using ISO 8601 format and is always in UTC time.
     For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-
     only.
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOnenoteEntityHierarchyModel, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_by = kwargs.get('created_by', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class MicrosoftGraphNotebook(MicrosoftGraphOnenoteEntityHierarchyModel):
    """notebook.

    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    :param created_date_time: The date and time when the page was created. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param display_name: The name of the notebook.
    :type display_name: str
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The date and time when the notebook was last modified. The
     timestamp represents date and time information using ISO 8601 format and is always in UTC time.
     For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-
     only.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_default: Indicates whether this is the user's default notebook. Read-only.
    :type is_default: bool
    :param is_shared: Indicates whether the notebook is shared. If true, the contents of the
     notebook can be seen by people other than the owner. Read-only.
    :type is_shared: bool
    :param links: notebookLinks.
    :type links: ~files.models.MicrosoftGraphNotebookLinks
    :param section_groups_url: The URL for the sectionGroups navigation property, which returns all
     the section groups in the notebook. Read-only.
    :type section_groups_url: str
    :param sections_url: The URL for the sections navigation property, which returns all the
     sections in the notebook. Read-only.
    :type sections_url: str
    :param user_role:  Possible values include: "Owner", "Contributor", "None", "Reader".
    :type user_role: str or ~files.models.MicrosoftGraphOnenoteUserRole
    :param section_groups: The section groups in the notebook. Read-only. Nullable.
    :type section_groups: list[~files.models.MicrosoftGraphSectionGroup]
    :param sections: The sections in the notebook. Read-only. Nullable.
    :type sections: list[~files.models.MicrosoftGraphOnenoteSection]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'is_shared': {'key': 'isShared', 'type': 'bool'},
        'links': {'key': 'links', 'type': 'MicrosoftGraphNotebookLinks'},
        'section_groups_url': {'key': 'sectionGroupsUrl', 'type': 'str'},
        'sections_url': {'key': 'sectionsUrl', 'type': 'str'},
        'user_role': {'key': 'userRole', 'type': 'str'},
        'section_groups': {'key': 'sectionGroups', 'type': '[MicrosoftGraphSectionGroup]'},
        'sections': {'key': 'sections', 'type': '[MicrosoftGraphOnenoteSection]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphNotebook, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_default = kwargs.get('is_default', None)
        self.is_shared = kwargs.get('is_shared', None)
        self.links = kwargs.get('links', None)
        self.section_groups_url = kwargs.get('section_groups_url', None)
        self.sections_url = kwargs.get('sections_url', None)
        self.user_role = kwargs.get('user_role', None)
        self.section_groups = kwargs.get('section_groups', None)
        self.sections = kwargs.get('sections', None)


class MicrosoftGraphNotebookLinks(msrest.serialization.Model):
    """notebookLinks.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param one_note_client_url: externalLink.
    :type one_note_client_url: ~files.models.MicrosoftGraphExternalLink
    :param one_note_web_url: externalLink.
    :type one_note_web_url: ~files.models.MicrosoftGraphExternalLink
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'one_note_client_url': {'key': 'oneNoteClientUrl', 'type': 'MicrosoftGraphExternalLink'},
        'one_note_web_url': {'key': 'oneNoteWebUrl', 'type': 'MicrosoftGraphExternalLink'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphNotebookLinks, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.one_note_client_url = kwargs.get('one_note_client_url', None)
        self.one_note_web_url = kwargs.get('one_note_web_url', None)


class MicrosoftGraphNotification(MicrosoftGraphEntity):
    """notification.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_time_to_live:
    :type display_time_to_live: int
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param group_name:
    :type group_name: str
    :param payload: payloadTypes.
    :type payload: ~files.models.MicrosoftGraphPayloadTypes
    :param priority:  Possible values include: "None", "High", "Low".
    :type priority: str or ~files.models.MicrosoftGraphPriority
    :param target_host_name:
    :type target_host_name: str
    :param target_policy: targetPolicyEndpoints.
    :type target_policy: ~files.models.MicrosoftGraphTargetPolicyEndpoints
    """

    _validation = {
        'display_time_to_live': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_time_to_live': {'key': 'displayTimeToLive', 'type': 'int'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'group_name': {'key': 'groupName', 'type': 'str'},
        'payload': {'key': 'payload', 'type': 'MicrosoftGraphPayloadTypes'},
        'priority': {'key': 'priority', 'type': 'str'},
        'target_host_name': {'key': 'targetHostName', 'type': 'str'},
        'target_policy': {'key': 'targetPolicy', 'type': 'MicrosoftGraphTargetPolicyEndpoints'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphNotification, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_time_to_live = kwargs.get('display_time_to_live', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.group_name = kwargs.get('group_name', None)
        self.payload = kwargs.get('payload', None)
        self.priority = kwargs.get('priority', None)
        self.target_host_name = kwargs.get('target_host_name', None)
        self.target_policy = kwargs.get('target_policy', None)


class MicrosoftGraphNumberColumn(msrest.serialization.Model):
    """numberColumn.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param decimal_places: How many decimal places to display. See below for information about the
     possible values.
    :type decimal_places: str
    :param display_as: How the value should be presented in the UX. Must be one of number or
     percentage. If unspecified, treated as number.
    :type display_as: str
    :param maximum: The maximum permitted value.
    :type maximum: float
    :param minimum: The minimum permitted value.
    :type minimum: float
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'decimal_places': {'key': 'decimalPlaces', 'type': 'str'},
        'display_as': {'key': 'displayAs', 'type': 'str'},
        'maximum': {'key': 'maximum', 'type': 'float'},
        'minimum': {'key': 'minimum', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphNumberColumn, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.decimal_places = kwargs.get('decimal_places', None)
        self.display_as = kwargs.get('display_as', None)
        self.maximum = kwargs.get('maximum', None)
        self.minimum = kwargs.get('minimum', None)


class MicrosoftGraphObjectIdentity(msrest.serialization.Model):
    """objectIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param issuer: Specifies the issuer of the identity, for example facebook.com.For local
     accounts (where signInType is not federated), this property is the local B2C tenant default
     domain name, for example contoso.onmicrosoft.com.For external users from other Azure AD
     organization, this will be the domain of the federated organization, for example
     contoso.com.Supports $filter. 512 character limit.
    :type issuer: str
    :param issuer_assigned_id: Specifies the unique identifier assigned to the user by the issuer.
     The combination of issuer and issuerAssignedId must be unique within the organization.
     Represents the sign-in name for the user, when signInType is set to emailAddress or userName
     (also known as local accounts).When signInType is set to: emailAddress, (or starts with
     emailAddress like emailAddress1) issuerAssignedId must be a valid email addressuserName,
     issuerAssignedId must be a valid local part of an email addressSupports $filter. 512 character
     limit.
    :type issuer_assigned_id: str
    :param sign_in_type: Specifies the user sign-in types in your directory, such as emailAddress,
     userName or federated. Here, federated represents a unique identifier for a user from an
     issuer, that can be in any format chosen by the issuer. Additional validation is enforced on
     issuerAssignedId when the sign-in type is set to emailAddress or userName. This property can
     also be set to any custom string.
    :type sign_in_type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'issuer': {'key': 'issuer', 'type': 'str'},
        'issuer_assigned_id': {'key': 'issuerAssignedId', 'type': 'str'},
        'sign_in_type': {'key': 'signInType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphObjectIdentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.issuer = kwargs.get('issuer', None)
        self.issuer_assigned_id = kwargs.get('issuer_assigned_id', None)
        self.sign_in_type = kwargs.get('sign_in_type', None)


class MicrosoftGraphScheduleChangeRequest(MicrosoftGraphChangeTrackedEntity):
    """scheduleChangeRequest.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param assigned_to:  Possible values include: "sender", "recipient", "manager", "system",
     "unknownFutureValue".
    :type assigned_to: str or ~files.models.MicrosoftGraphScheduleChangeRequestActor
    :param manager_action_date_time:
    :type manager_action_date_time: ~datetime.datetime
    :param manager_action_message:
    :type manager_action_message: str
    :param manager_user_id:
    :type manager_user_id: str
    :param sender_date_time:
    :type sender_date_time: ~datetime.datetime
    :param sender_message:
    :type sender_message: str
    :param sender_user_id:
    :type sender_user_id: str
    :param state:  Possible values include: "pending", "approved", "declined",
     "unknownFutureValue".
    :type state: str or ~files.models.MicrosoftGraphScheduleChangeState
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'manager_action_date_time': {'key': 'managerActionDateTime', 'type': 'iso-8601'},
        'manager_action_message': {'key': 'managerActionMessage', 'type': 'str'},
        'manager_user_id': {'key': 'managerUserId', 'type': 'str'},
        'sender_date_time': {'key': 'senderDateTime', 'type': 'iso-8601'},
        'sender_message': {'key': 'senderMessage', 'type': 'str'},
        'sender_user_id': {'key': 'senderUserId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphScheduleChangeRequest, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.assigned_to = kwargs.get('assigned_to', None)
        self.manager_action_date_time = kwargs.get('manager_action_date_time', None)
        self.manager_action_message = kwargs.get('manager_action_message', None)
        self.manager_user_id = kwargs.get('manager_user_id', None)
        self.sender_date_time = kwargs.get('sender_date_time', None)
        self.sender_message = kwargs.get('sender_message', None)
        self.sender_user_id = kwargs.get('sender_user_id', None)
        self.state = kwargs.get('state', None)


class MicrosoftGraphOfferShiftRequest(MicrosoftGraphScheduleChangeRequest):
    """offerShiftRequest.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param assigned_to:  Possible values include: "sender", "recipient", "manager", "system",
     "unknownFutureValue".
    :type assigned_to: str or ~files.models.MicrosoftGraphScheduleChangeRequestActor
    :param manager_action_date_time:
    :type manager_action_date_time: ~datetime.datetime
    :param manager_action_message:
    :type manager_action_message: str
    :param manager_user_id:
    :type manager_user_id: str
    :param sender_date_time:
    :type sender_date_time: ~datetime.datetime
    :param sender_message:
    :type sender_message: str
    :param sender_user_id:
    :type sender_user_id: str
    :param state:  Possible values include: "pending", "approved", "declined",
     "unknownFutureValue".
    :type state: str or ~files.models.MicrosoftGraphScheduleChangeState
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param recipient_action_date_time: The Timestamp type represents date and time information
     using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would
     look like this: '2014-01-01T00:00:00Z'.
    :type recipient_action_date_time: ~datetime.datetime
    :param recipient_action_message: Custom message sent by recipient of the offer shift request.
    :type recipient_action_message: str
    :param recipient_user_id: User ID of the recipient of the offer shift request.
    :type recipient_user_id: str
    :param sender_shift_id: User ID of the sender of the offer shift request.
    :type sender_shift_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'manager_action_date_time': {'key': 'managerActionDateTime', 'type': 'iso-8601'},
        'manager_action_message': {'key': 'managerActionMessage', 'type': 'str'},
        'manager_user_id': {'key': 'managerUserId', 'type': 'str'},
        'sender_date_time': {'key': 'senderDateTime', 'type': 'iso-8601'},
        'sender_message': {'key': 'senderMessage', 'type': 'str'},
        'sender_user_id': {'key': 'senderUserId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'recipient_action_date_time': {'key': 'recipientActionDateTime', 'type': 'iso-8601'},
        'recipient_action_message': {'key': 'recipientActionMessage', 'type': 'str'},
        'recipient_user_id': {'key': 'recipientUserId', 'type': 'str'},
        'sender_shift_id': {'key': 'senderShiftId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOfferShiftRequest, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.recipient_action_date_time = kwargs.get('recipient_action_date_time', None)
        self.recipient_action_message = kwargs.get('recipient_action_message', None)
        self.recipient_user_id = kwargs.get('recipient_user_id', None)
        self.sender_shift_id = kwargs.get('sender_shift_id', None)


class MicrosoftGraphOnenote(MicrosoftGraphEntity):
    """onenote.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param notebooks: The collection of OneNote notebooks that are owned by the user or group.
     Read-only. Nullable.
    :type notebooks: list[~files.models.MicrosoftGraphNotebook]
    :param operations: The status of OneNote operations. Getting an operations collection is not
     supported, but you can get the status of long-running operations if the Operation-Location
     header is returned in the response. Read-only. Nullable.
    :type operations: list[~files.models.MicrosoftGraphOnenoteOperation]
    :param pages: The pages in all OneNote notebooks that are owned by the user or group.  Read-
     only. Nullable.
    :type pages: list[~files.models.MicrosoftGraphOnenotePage]
    :param resources: The image and other file resources in OneNote pages. Getting a resources
     collection is not supported, but you can get the binary content of a specific resource. Read-
     only. Nullable.
    :type resources: list[~files.models.MicrosoftGraphOnenoteResource]
    :param section_groups: The section groups in all OneNote notebooks that are owned by the user
     or group.  Read-only. Nullable.
    :type section_groups: list[~files.models.MicrosoftGraphSectionGroup]
    :param sections: The sections in all OneNote notebooks that are owned by the user or group.
     Read-only. Nullable.
    :type sections: list[~files.models.MicrosoftGraphOnenoteSection]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'notebooks': {'key': 'notebooks', 'type': '[MicrosoftGraphNotebook]'},
        'operations': {'key': 'operations', 'type': '[MicrosoftGraphOnenoteOperation]'},
        'pages': {'key': 'pages', 'type': '[MicrosoftGraphOnenotePage]'},
        'resources': {'key': 'resources', 'type': '[MicrosoftGraphOnenoteResource]'},
        'section_groups': {'key': 'sectionGroups', 'type': '[MicrosoftGraphSectionGroup]'},
        'sections': {'key': 'sections', 'type': '[MicrosoftGraphOnenoteSection]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOnenote, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.notebooks = kwargs.get('notebooks', None)
        self.operations = kwargs.get('operations', None)
        self.pages = kwargs.get('pages', None)
        self.resources = kwargs.get('resources', None)
        self.section_groups = kwargs.get('section_groups', None)
        self.sections = kwargs.get('sections', None)


class MicrosoftGraphOperation(MicrosoftGraphEntity):
    """operation.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: The start time of the operation.
    :type created_date_time: ~datetime.datetime
    :param last_action_date_time: The time of the last action of the operation.
    :type last_action_date_time: ~datetime.datetime
    :param status:  Possible values include: "NotStarted", "Running", "Completed", "Failed".
    :type status: str or ~files.models.MicrosoftGraphOperationStatus
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOperation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.last_action_date_time = kwargs.get('last_action_date_time', None)
        self.status = kwargs.get('status', None)


class MicrosoftGraphOnenoteOperation(MicrosoftGraphOperation):
    """onenoteOperation.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The start time of the operation.
    :type created_date_time: ~datetime.datetime
    :param last_action_date_time: The time of the last action of the operation.
    :type last_action_date_time: ~datetime.datetime
    :param status:  Possible values include: "NotStarted", "Running", "Completed", "Failed".
    :type status: str or ~files.models.MicrosoftGraphOperationStatus
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: onenoteOperationError.
    :type error: ~files.models.MicrosoftGraphOnenoteOperationError
    :param percent_complete: The operation percent complete if the operation is still in running
     status.
    :type percent_complete: str
    :param resource_id: The resource id.
    :type resource_id: str
    :param resource_location: The resource URI for the object. For example, the resource URI for a
     copied page or section.
    :type resource_location: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'MicrosoftGraphOnenoteOperationError'},
        'percent_complete': {'key': 'percentComplete', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_location': {'key': 'resourceLocation', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOnenoteOperation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.error = kwargs.get('error', None)
        self.percent_complete = kwargs.get('percent_complete', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.resource_location = kwargs.get('resource_location', None)


class MicrosoftGraphOnenoteOperationError(msrest.serialization.Model):
    """onenoteOperationError.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: The error code.
    :type code: str
    :param message: The error message.
    :type message: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOnenoteOperationError, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)


class MicrosoftGraphOnenotePage(MicrosoftGraphOnenoteEntitySchemaObjectModel):
    """onenotePage.

    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    :param created_date_time: The date and time when the page was created. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type created_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content: The page's HTML content.
    :type content: bytes
    :param content_url: The URL for the page's HTML content.  Read-only.
    :type content_url: str
    :param created_by_app_id: The unique identifier of the application that created the page. Read-
     only.
    :type created_by_app_id: str
    :param last_modified_date_time: The date and time when the page was last modified. The
     timestamp represents date and time information using ISO 8601 format and is always in UTC time.
     For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-
     only.
    :type last_modified_date_time: ~datetime.datetime
    :param level: The indentation level of the page. Read-only.
    :type level: int
    :param links: pageLinks.
    :type links: ~files.models.MicrosoftGraphPageLinks
    :param order: The order of the page within its parent section. Read-only.
    :type order: int
    :param title: The title of the page.
    :type title: str
    :param user_tags:
    :type user_tags: list[str]
    :param parent_notebook: notebook.
    :type parent_notebook: ~files.models.MicrosoftGraphNotebook
    :param parent_section: onenoteSection.
    :type parent_section: ~files.models.MicrosoftGraphOnenoteSection
    """

    _validation = {
        'level': {'maximum': 2147483647, 'minimum': -2147483648},
        'order': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'base64'},
        'content_url': {'key': 'contentUrl', 'type': 'str'},
        'created_by_app_id': {'key': 'createdByAppId', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'level': {'key': 'level', 'type': 'int'},
        'links': {'key': 'links', 'type': 'MicrosoftGraphPageLinks'},
        'order': {'key': 'order', 'type': 'int'},
        'title': {'key': 'title', 'type': 'str'},
        'user_tags': {'key': 'userTags', 'type': '[str]'},
        'parent_notebook': {'key': 'parentNotebook', 'type': 'MicrosoftGraphNotebook'},
        'parent_section': {'key': 'parentSection', 'type': 'MicrosoftGraphOnenoteSection'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOnenotePage, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content = kwargs.get('content', None)
        self.content_url = kwargs.get('content_url', None)
        self.created_by_app_id = kwargs.get('created_by_app_id', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.level = kwargs.get('level', None)
        self.links = kwargs.get('links', None)
        self.order = kwargs.get('order', None)
        self.title = kwargs.get('title', None)
        self.user_tags = kwargs.get('user_tags', None)
        self.parent_notebook = kwargs.get('parent_notebook', None)
        self.parent_section = kwargs.get('parent_section', None)


class MicrosoftGraphOnenoteResource(MicrosoftGraphOnenoteEntityBaseModel):
    """onenoteResource.

    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content: The content stream.
    :type content: bytes
    :param content_url: The URL for downloading the content.
    :type content_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'base64'},
        'content_url': {'key': 'contentUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOnenoteResource, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content = kwargs.get('content', None)
        self.content_url = kwargs.get('content_url', None)


class MicrosoftGraphOnenoteSection(MicrosoftGraphOnenoteEntityHierarchyModel):
    """onenoteSection.

    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    :param created_date_time: The date and time when the page was created. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param display_name: The name of the notebook.
    :type display_name: str
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The date and time when the notebook was last modified. The
     timestamp represents date and time information using ISO 8601 format and is always in UTC time.
     For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-
     only.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_default: Indicates whether this is the user's default section. Read-only.
    :type is_default: bool
    :param links: sectionLinks.
    :type links: ~files.models.MicrosoftGraphSectionLinks
    :param pages_url: The pages endpoint where you can get details for all the pages in the
     section. Read-only.
    :type pages_url: str
    :param pages: The collection of pages in the section.  Read-only. Nullable.
    :type pages: list[~files.models.MicrosoftGraphOnenotePage]
    :param parent_notebook: notebook.
    :type parent_notebook: ~files.models.MicrosoftGraphNotebook
    :param parent_section_group: sectionGroup.
    :type parent_section_group: ~files.models.MicrosoftGraphSectionGroup
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'links': {'key': 'links', 'type': 'MicrosoftGraphSectionLinks'},
        'pages_url': {'key': 'pagesUrl', 'type': 'str'},
        'pages': {'key': 'pages', 'type': '[MicrosoftGraphOnenotePage]'},
        'parent_notebook': {'key': 'parentNotebook', 'type': 'MicrosoftGraphNotebook'},
        'parent_section_group': {'key': 'parentSectionGroup', 'type': 'MicrosoftGraphSectionGroup'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOnenoteSection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_default = kwargs.get('is_default', None)
        self.links = kwargs.get('links', None)
        self.pages_url = kwargs.get('pages_url', None)
        self.pages = kwargs.get('pages', None)
        self.parent_notebook = kwargs.get('parent_notebook', None)
        self.parent_section_group = kwargs.get('parent_section_group', None)


class MicrosoftGraphOnlineMeeting(MicrosoftGraphEntity):
    """onlineMeeting.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param access_level:  Possible values include: "everyone", "invited", "locked",
     "sameEnterprise", "sameEnterpriseAndFederated".
    :type access_level: str or ~files.models.MicrosoftGraphAccessLevel
    :param allowed_presenters:  Possible values include: "everyone", "organization",
     "roleIsPresenter", "organizer", "unknownFutureValue".
    :type allowed_presenters: str or ~files.models.MicrosoftGraphOnlineMeetingPresenters
    :param audio_conferencing: audioConferencing.
    :type audio_conferencing: ~files.models.MicrosoftGraphAudioConferencing
    :param canceled_date_time:
    :type canceled_date_time: ~datetime.datetime
    :param capabilities:
    :type capabilities: list[str or ~files.models.MicrosoftGraphMeetingCapabilities]
    :param chat_info: chatInfo.
    :type chat_info: ~files.models.MicrosoftGraphChatInfo
    :param creation_date_time: The meeting creation time in UTC. Read-only.
    :type creation_date_time: ~datetime.datetime
    :param end_date_time: The meeting end time in UTC.
    :type end_date_time: ~datetime.datetime
    :param entry_exit_announcement:
    :type entry_exit_announcement: bool
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param external_id:
    :type external_id: str
    :param is_broadcast:
    :type is_broadcast: bool
    :param is_cancelled:
    :type is_cancelled: bool
    :param is_entry_exit_announced:
    :type is_entry_exit_announced: bool
    :param join_information: itemBody.
    :type join_information: ~files.models.MicrosoftGraphItemBody
    :param join_url:
    :type join_url: str
    :param lobby_bypass_settings: lobbyBypassSettings.
    :type lobby_bypass_settings: ~files.models.MicrosoftGraphLobbyBypassSettings
    :param participants: meetingParticipants.
    :type participants: ~files.models.MicrosoftGraphMeetingParticipants
    :param start_date_time: The meeting start time in UTC.
    :type start_date_time: ~datetime.datetime
    :param subject: The subject of the online meeting.
    :type subject: str
    :param video_teleconference_id: The video teleconferencing ID. Read-only.
    :type video_teleconference_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'access_level': {'key': 'accessLevel', 'type': 'str'},
        'allowed_presenters': {'key': 'allowedPresenters', 'type': 'str'},
        'audio_conferencing': {'key': 'audioConferencing', 'type': 'MicrosoftGraphAudioConferencing'},
        'canceled_date_time': {'key': 'canceledDateTime', 'type': 'iso-8601'},
        'capabilities': {'key': 'capabilities', 'type': '[str]'},
        'chat_info': {'key': 'chatInfo', 'type': 'MicrosoftGraphChatInfo'},
        'creation_date_time': {'key': 'creationDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'entry_exit_announcement': {'key': 'entryExitAnnouncement', 'type': 'bool'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'external_id': {'key': 'externalId', 'type': 'str'},
        'is_broadcast': {'key': 'isBroadcast', 'type': 'bool'},
        'is_cancelled': {'key': 'isCancelled', 'type': 'bool'},
        'is_entry_exit_announced': {'key': 'isEntryExitAnnounced', 'type': 'bool'},
        'join_information': {'key': 'joinInformation', 'type': 'MicrosoftGraphItemBody'},
        'join_url': {'key': 'joinUrl', 'type': 'str'},
        'lobby_bypass_settings': {'key': 'lobbyBypassSettings', 'type': 'MicrosoftGraphLobbyBypassSettings'},
        'participants': {'key': 'participants', 'type': 'MicrosoftGraphMeetingParticipants'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'subject': {'key': 'subject', 'type': 'str'},
        'video_teleconference_id': {'key': 'videoTeleconferenceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOnlineMeeting, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.access_level = kwargs.get('access_level', None)
        self.allowed_presenters = kwargs.get('allowed_presenters', None)
        self.audio_conferencing = kwargs.get('audio_conferencing', None)
        self.canceled_date_time = kwargs.get('canceled_date_time', None)
        self.capabilities = kwargs.get('capabilities', None)
        self.chat_info = kwargs.get('chat_info', None)
        self.creation_date_time = kwargs.get('creation_date_time', None)
        self.end_date_time = kwargs.get('end_date_time', None)
        self.entry_exit_announcement = kwargs.get('entry_exit_announcement', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.external_id = kwargs.get('external_id', None)
        self.is_broadcast = kwargs.get('is_broadcast', None)
        self.is_cancelled = kwargs.get('is_cancelled', None)
        self.is_entry_exit_announced = kwargs.get('is_entry_exit_announced', None)
        self.join_information = kwargs.get('join_information', None)
        self.join_url = kwargs.get('join_url', None)
        self.lobby_bypass_settings = kwargs.get('lobby_bypass_settings', None)
        self.participants = kwargs.get('participants', None)
        self.start_date_time = kwargs.get('start_date_time', None)
        self.subject = kwargs.get('subject', None)
        self.video_teleconference_id = kwargs.get('video_teleconference_id', None)


class MicrosoftGraphOnlineMeetingInfo(msrest.serialization.Model):
    """onlineMeetingInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param conference_id: The ID of the conference.
    :type conference_id: str
    :param join_url: The external link that launches the online meeting. This is a URL that clients
     will launch into a browser and will redirect the user to join the meeting.
    :type join_url: str
    :param phones: All of the phone numbers associated with this conference.
    :type phones: list[~files.models.MicrosoftGraphPhone]
    :param quick_dial: The pre-formatted quickdial for this call.
    :type quick_dial: str
    :param toll_free_numbers: The toll free numbers that can be used to join the conference.
    :type toll_free_numbers: list[str]
    :param toll_number: The toll number that can be used to join the conference.
    :type toll_number: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'conference_id': {'key': 'conferenceId', 'type': 'str'},
        'join_url': {'key': 'joinUrl', 'type': 'str'},
        'phones': {'key': 'phones', 'type': '[MicrosoftGraphPhone]'},
        'quick_dial': {'key': 'quickDial', 'type': 'str'},
        'toll_free_numbers': {'key': 'tollFreeNumbers', 'type': '[str]'},
        'toll_number': {'key': 'tollNumber', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOnlineMeetingInfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.conference_id = kwargs.get('conference_id', None)
        self.join_url = kwargs.get('join_url', None)
        self.phones = kwargs.get('phones', None)
        self.quick_dial = kwargs.get('quick_dial', None)
        self.toll_free_numbers = kwargs.get('toll_free_numbers', None)
        self.toll_number = kwargs.get('toll_number', None)


class MicrosoftGraphOnPremisesExtensionAttributes(msrest.serialization.Model):
    """onPremisesExtensionAttributes.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param extension_attribute1: First customizable extension attribute.
    :type extension_attribute1: str
    :param extension_attribute10: Tenth customizable extension attribute.
    :type extension_attribute10: str
    :param extension_attribute11: Eleventh customizable extension attribute.
    :type extension_attribute11: str
    :param extension_attribute12: Twelfth customizable extension attribute.
    :type extension_attribute12: str
    :param extension_attribute13: Thirteenth customizable extension attribute.
    :type extension_attribute13: str
    :param extension_attribute14: Fourteenth customizable extension attribute.
    :type extension_attribute14: str
    :param extension_attribute15: Fifteenth customizable extension attribute.
    :type extension_attribute15: str
    :param extension_attribute2: Second customizable extension attribute.
    :type extension_attribute2: str
    :param extension_attribute3: Third customizable extension attribute.
    :type extension_attribute3: str
    :param extension_attribute4: Fourth customizable extension attribute.
    :type extension_attribute4: str
    :param extension_attribute5: Fifth customizable extension attribute.
    :type extension_attribute5: str
    :param extension_attribute6: Sixth customizable extension attribute.
    :type extension_attribute6: str
    :param extension_attribute7: Seventh customizable extension attribute.
    :type extension_attribute7: str
    :param extension_attribute8: Eighth customizable extension attribute.
    :type extension_attribute8: str
    :param extension_attribute9: Ninth customizable extension attribute.
    :type extension_attribute9: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'extension_attribute1': {'key': 'extensionAttribute1', 'type': 'str'},
        'extension_attribute10': {'key': 'extensionAttribute10', 'type': 'str'},
        'extension_attribute11': {'key': 'extensionAttribute11', 'type': 'str'},
        'extension_attribute12': {'key': 'extensionAttribute12', 'type': 'str'},
        'extension_attribute13': {'key': 'extensionAttribute13', 'type': 'str'},
        'extension_attribute14': {'key': 'extensionAttribute14', 'type': 'str'},
        'extension_attribute15': {'key': 'extensionAttribute15', 'type': 'str'},
        'extension_attribute2': {'key': 'extensionAttribute2', 'type': 'str'},
        'extension_attribute3': {'key': 'extensionAttribute3', 'type': 'str'},
        'extension_attribute4': {'key': 'extensionAttribute4', 'type': 'str'},
        'extension_attribute5': {'key': 'extensionAttribute5', 'type': 'str'},
        'extension_attribute6': {'key': 'extensionAttribute6', 'type': 'str'},
        'extension_attribute7': {'key': 'extensionAttribute7', 'type': 'str'},
        'extension_attribute8': {'key': 'extensionAttribute8', 'type': 'str'},
        'extension_attribute9': {'key': 'extensionAttribute9', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOnPremisesExtensionAttributes, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.extension_attribute1 = kwargs.get('extension_attribute1', None)
        self.extension_attribute10 = kwargs.get('extension_attribute10', None)
        self.extension_attribute11 = kwargs.get('extension_attribute11', None)
        self.extension_attribute12 = kwargs.get('extension_attribute12', None)
        self.extension_attribute13 = kwargs.get('extension_attribute13', None)
        self.extension_attribute14 = kwargs.get('extension_attribute14', None)
        self.extension_attribute15 = kwargs.get('extension_attribute15', None)
        self.extension_attribute2 = kwargs.get('extension_attribute2', None)
        self.extension_attribute3 = kwargs.get('extension_attribute3', None)
        self.extension_attribute4 = kwargs.get('extension_attribute4', None)
        self.extension_attribute5 = kwargs.get('extension_attribute5', None)
        self.extension_attribute6 = kwargs.get('extension_attribute6', None)
        self.extension_attribute7 = kwargs.get('extension_attribute7', None)
        self.extension_attribute8 = kwargs.get('extension_attribute8', None)
        self.extension_attribute9 = kwargs.get('extension_attribute9', None)


class MicrosoftGraphOnPremisesProvisioningError(msrest.serialization.Model):
    """onPremisesProvisioningError.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param category: Category of the provisioning error. Note: Currently, there is only one
     possible value. Possible value: PropertyConflict - indicates a property value is not unique.
     Other objects contain the same value for the property.
    :type category: str
    :param occurred_date_time: The date and time at which the error occurred.
    :type occurred_date_time: ~datetime.datetime
    :param property_causing_error: Name of the directory property causing the error. Current
     possible values: UserPrincipalName or ProxyAddress.
    :type property_causing_error: str
    :param value: Value of the property causing the error.
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'category': {'key': 'category', 'type': 'str'},
        'occurred_date_time': {'key': 'occurredDateTime', 'type': 'iso-8601'},
        'property_causing_error': {'key': 'propertyCausingError', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOnPremisesProvisioningError, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.category = kwargs.get('category', None)
        self.occurred_date_time = kwargs.get('occurred_date_time', None)
        self.property_causing_error = kwargs.get('property_causing_error', None)
        self.value = kwargs.get('value', None)


class MicrosoftGraphOpenShift(MicrosoftGraphChangeTrackedEntity):
    """openShift.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param draft_open_shift: openShiftItem.
    :type draft_open_shift: ~files.models.MicrosoftGraphOpenShiftItem
    :param is_staged_for_deletion:
    :type is_staged_for_deletion: bool
    :param scheduling_group_id: ID for the scheduling group that the open shift belongs to.
    :type scheduling_group_id: str
    :param shared_open_shift: openShiftItem.
    :type shared_open_shift: ~files.models.MicrosoftGraphOpenShiftItem
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'draft_open_shift': {'key': 'draftOpenShift', 'type': 'MicrosoftGraphOpenShiftItem'},
        'is_staged_for_deletion': {'key': 'isStagedForDeletion', 'type': 'bool'},
        'scheduling_group_id': {'key': 'schedulingGroupId', 'type': 'str'},
        'shared_open_shift': {'key': 'sharedOpenShift', 'type': 'MicrosoftGraphOpenShiftItem'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOpenShift, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.draft_open_shift = kwargs.get('draft_open_shift', None)
        self.is_staged_for_deletion = kwargs.get('is_staged_for_deletion', None)
        self.scheduling_group_id = kwargs.get('scheduling_group_id', None)
        self.shared_open_shift = kwargs.get('shared_open_shift', None)


class MicrosoftGraphOpenShiftChangeRequest(MicrosoftGraphScheduleChangeRequest):
    """openShiftChangeRequest.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param assigned_to:  Possible values include: "sender", "recipient", "manager", "system",
     "unknownFutureValue".
    :type assigned_to: str or ~files.models.MicrosoftGraphScheduleChangeRequestActor
    :param manager_action_date_time:
    :type manager_action_date_time: ~datetime.datetime
    :param manager_action_message:
    :type manager_action_message: str
    :param manager_user_id:
    :type manager_user_id: str
    :param sender_date_time:
    :type sender_date_time: ~datetime.datetime
    :param sender_message:
    :type sender_message: str
    :param sender_user_id:
    :type sender_user_id: str
    :param state:  Possible values include: "pending", "approved", "declined",
     "unknownFutureValue".
    :type state: str or ~files.models.MicrosoftGraphScheduleChangeState
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param open_shift_id: ID for the open shift.
    :type open_shift_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'manager_action_date_time': {'key': 'managerActionDateTime', 'type': 'iso-8601'},
        'manager_action_message': {'key': 'managerActionMessage', 'type': 'str'},
        'manager_user_id': {'key': 'managerUserId', 'type': 'str'},
        'sender_date_time': {'key': 'senderDateTime', 'type': 'iso-8601'},
        'sender_message': {'key': 'senderMessage', 'type': 'str'},
        'sender_user_id': {'key': 'senderUserId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'open_shift_id': {'key': 'openShiftId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOpenShiftChangeRequest, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.open_shift_id = kwargs.get('open_shift_id', None)


class MicrosoftGraphScheduleEntity(msrest.serialization.Model):
    """scheduleEntity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param theme:  Possible values include: "white", "blue", "green", "purple", "pink", "yellow",
     "gray", "darkBlue", "darkGreen", "darkPurple", "darkPink", "darkYellow", "unknownFutureValue".
    :type theme: str or ~files.models.MicrosoftGraphScheduleEntityTheme
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'theme': {'key': 'theme', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphScheduleEntity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.end_date_time = kwargs.get('end_date_time', None)
        self.start_date_time = kwargs.get('start_date_time', None)
        self.theme = kwargs.get('theme', None)


class MicrosoftGraphShiftItem(MicrosoftGraphScheduleEntity):
    """shiftItem.

    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param theme:  Possible values include: "white", "blue", "green", "purple", "pink", "yellow",
     "gray", "darkBlue", "darkGreen", "darkPurple", "darkPink", "darkYellow", "unknownFutureValue".
    :type theme: str or ~files.models.MicrosoftGraphScheduleEntityTheme
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param activities: An incremental part of a shift which can cover details of when and where an
     employee is during their shift. For example, an assignment or a scheduled break or lunch.
     Required.
    :type activities: list[~files.models.MicrosoftGraphShiftActivity]
    :param display_name: The shift label of the shiftItem.
    :type display_name: str
    :param notes: The shift notes for the shiftItem.
    :type notes: str
    """

    _attribute_map = {
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'theme': {'key': 'theme', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphShiftActivity]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphShiftItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.activities = kwargs.get('activities', None)
        self.display_name = kwargs.get('display_name', None)
        self.notes = kwargs.get('notes', None)


class MicrosoftGraphOpenShiftItem(MicrosoftGraphShiftItem):
    """openShiftItem.

    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param theme:  Possible values include: "white", "blue", "green", "purple", "pink", "yellow",
     "gray", "darkBlue", "darkGreen", "darkPurple", "darkPink", "darkYellow", "unknownFutureValue".
    :type theme: str or ~files.models.MicrosoftGraphScheduleEntityTheme
    :param activities: An incremental part of a shift which can cover details of when and where an
     employee is during their shift. For example, an assignment or a scheduled break or lunch.
     Required.
    :type activities: list[~files.models.MicrosoftGraphShiftActivity]
    :param display_name: The shift label of the shiftItem.
    :type display_name: str
    :param notes: The shift notes for the shiftItem.
    :type notes: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param open_slot_count: Count of the number of slots for the given open shift.
    :type open_slot_count: int
    """

    _validation = {
        'open_slot_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'theme': {'key': 'theme', 'type': 'str'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphShiftActivity]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'open_slot_count': {'key': 'openSlotCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOpenShiftItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.open_slot_count = kwargs.get('open_slot_count', None)


class MicrosoftGraphOperationError(msrest.serialization.Model):
    """operationError.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Operation error code.
    :type code: str
    :param message: Operation error message.
    :type message: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOperationError, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)


class MicrosoftGraphOutlookCategory(MicrosoftGraphEntity):
    """outlookCategory.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param color:  Possible values include: "preset0", "preset1", "none", "preset2", "preset3",
     "preset4", "preset5", "preset6", "preset7", "preset8", "preset9", "preset10", "preset11",
     "preset12", "preset13", "preset14", "preset15", "preset16", "preset17", "preset18", "preset19",
     "preset20", "preset21", "preset22", "preset23", "preset24".
    :type color: str or ~files.models.MicrosoftGraphCategoryColor
    :param display_name: A unique name that identifies a category in the user's mailbox. After a
     category is created, the name cannot be changed. Read-only.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'color': {'key': 'color', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOutlookCategory, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.color = kwargs.get('color', None)
        self.display_name = kwargs.get('display_name', None)


class MicrosoftGraphOutlookGeoCoordinates(msrest.serialization.Model):
    """outlookGeoCoordinates.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param accuracy: The accuracy of the latitude and longitude. As an example, the accuracy can be
     measured in meters, such as the latitude and longitude are accurate to within 50 meters.
    :type accuracy: float
    :param altitude: The altitude of the location.
    :type altitude: float
    :param altitude_accuracy: The accuracy of the altitude.
    :type altitude_accuracy: float
    :param latitude: The latitude of the location.
    :type latitude: float
    :param longitude: The longitude of the location.
    :type longitude: float
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'accuracy': {'key': 'accuracy', 'type': 'float'},
        'altitude': {'key': 'altitude', 'type': 'float'},
        'altitude_accuracy': {'key': 'altitudeAccuracy', 'type': 'float'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOutlookGeoCoordinates, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.accuracy = kwargs.get('accuracy', None)
        self.altitude = kwargs.get('altitude', None)
        self.altitude_accuracy = kwargs.get('altitude_accuracy', None)
        self.latitude = kwargs.get('latitude', None)
        self.longitude = kwargs.get('longitude', None)


class MicrosoftGraphOutlookTask(MicrosoftGraphOutlookItem):
    """outlookTask.

    :param id: Read-only.
    :type id: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param assigned_to:
    :type assigned_to: str
    :param body: itemBody.
    :type body: ~files.models.MicrosoftGraphItemBody
    :param completed_date_time: dateTimeTimeZone.
    :type completed_date_time: ~files.models.MicrosoftGraphDateTimeZone
    :param due_date_time: dateTimeTimeZone.
    :type due_date_time: ~files.models.MicrosoftGraphDateTimeZone
    :param has_attachments:
    :type has_attachments: bool
    :param importance:  Possible values include: "low", "normal", "high".
    :type importance: str or ~files.models.MicrosoftGraphImportance
    :param is_reminder_on:
    :type is_reminder_on: bool
    :param owner:
    :type owner: str
    :param parent_folder_id:
    :type parent_folder_id: str
    :param recurrence: patternedRecurrence.
    :type recurrence: ~files.models.MicrosoftGraphPatternedRecurrence
    :param reminder_date_time: dateTimeTimeZone.
    :type reminder_date_time: ~files.models.MicrosoftGraphDateTimeZone
    :param sensitivity:  Possible values include: "normal", "personal", "private", "confidential".
    :type sensitivity: str or ~files.models.MicrosoftGraphSensitivity
    :param start_date_time: dateTimeTimeZone.
    :type start_date_time: ~files.models.MicrosoftGraphDateTimeZone
    :param status:  Possible values include: "notStarted", "inProgress", "completed",
     "waitingOnOthers", "deferred".
    :type status: str or ~files.models.MicrosoftGraphTaskStatus
    :param subject:
    :type subject: str
    :param attachments:
    :type attachments: list[~files.models.MicrosoftGraphAttachment]
    :param multi_value_extended_properties:
    :type multi_value_extended_properties:
     list[~files.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param single_value_extended_properties:
    :type single_value_extended_properties:
     list[~files.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'completed_date_time': {'key': 'completedDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'due_date_time': {'key': 'dueDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'importance': {'key': 'importance', 'type': 'str'},
        'is_reminder_on': {'key': 'isReminderOn', 'type': 'bool'},
        'owner': {'key': 'owner', 'type': 'str'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'recurrence': {'key': 'recurrence', 'type': 'MicrosoftGraphPatternedRecurrence'},
        'reminder_date_time': {'key': 'reminderDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'sensitivity': {'key': 'sensitivity', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'status': {'key': 'status', 'type': 'str'},
        'subject': {'key': 'subject', 'type': 'str'},
        'attachments': {'key': 'attachments', 'type': '[MicrosoftGraphAttachment]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOutlookTask, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.assigned_to = kwargs.get('assigned_to', None)
        self.body = kwargs.get('body', None)
        self.completed_date_time = kwargs.get('completed_date_time', None)
        self.due_date_time = kwargs.get('due_date_time', None)
        self.has_attachments = kwargs.get('has_attachments', None)
        self.importance = kwargs.get('importance', None)
        self.is_reminder_on = kwargs.get('is_reminder_on', None)
        self.owner = kwargs.get('owner', None)
        self.parent_folder_id = kwargs.get('parent_folder_id', None)
        self.recurrence = kwargs.get('recurrence', None)
        self.reminder_date_time = kwargs.get('reminder_date_time', None)
        self.sensitivity = kwargs.get('sensitivity', None)
        self.start_date_time = kwargs.get('start_date_time', None)
        self.status = kwargs.get('status', None)
        self.subject = kwargs.get('subject', None)
        self.attachments = kwargs.get('attachments', None)
        self.multi_value_extended_properties = kwargs.get('multi_value_extended_properties', None)
        self.single_value_extended_properties = kwargs.get('single_value_extended_properties', None)


class MicrosoftGraphOutlookTaskFolder(MicrosoftGraphEntity):
    """outlookTaskFolder.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param change_key:
    :type change_key: str
    :param is_default_folder:
    :type is_default_folder: bool
    :param name:
    :type name: str
    :param parent_group_key:
    :type parent_group_key: str
    :param multi_value_extended_properties:
    :type multi_value_extended_properties:
     list[~files.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param single_value_extended_properties:
    :type single_value_extended_properties:
     list[~files.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param tasks:
    :type tasks: list[~files.models.MicrosoftGraphOutlookTask]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'is_default_folder': {'key': 'isDefaultFolder', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'parent_group_key': {'key': 'parentGroupKey', 'type': 'str'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphOutlookTask]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOutlookTaskFolder, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.change_key = kwargs.get('change_key', None)
        self.is_default_folder = kwargs.get('is_default_folder', None)
        self.name = kwargs.get('name', None)
        self.parent_group_key = kwargs.get('parent_group_key', None)
        self.multi_value_extended_properties = kwargs.get('multi_value_extended_properties', None)
        self.single_value_extended_properties = kwargs.get('single_value_extended_properties', None)
        self.tasks = kwargs.get('tasks', None)


class MicrosoftGraphOutlookTaskGroup(MicrosoftGraphEntity):
    """outlookTaskGroup.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param change_key:
    :type change_key: str
    :param group_key:
    :type group_key: str
    :param is_default_group:
    :type is_default_group: bool
    :param name:
    :type name: str
    :param task_folders:
    :type task_folders: list[~files.models.MicrosoftGraphOutlookTaskFolder]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'group_key': {'key': 'groupKey', 'type': 'str'},
        'is_default_group': {'key': 'isDefaultGroup', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'task_folders': {'key': 'taskFolders', 'type': '[MicrosoftGraphOutlookTaskFolder]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOutlookTaskGroup, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.change_key = kwargs.get('change_key', None)
        self.group_key = kwargs.get('group_key', None)
        self.is_default_group = kwargs.get('is_default_group', None)
        self.name = kwargs.get('name', None)
        self.task_folders = kwargs.get('task_folders', None)


class MicrosoftGraphOutlookUser(MicrosoftGraphEntity):
    """outlookUser.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param master_categories: A list of categories defined for the user.
    :type master_categories: list[~files.models.MicrosoftGraphOutlookCategory]
    :param task_folders:
    :type task_folders: list[~files.models.MicrosoftGraphOutlookTaskFolder]
    :param task_groups:
    :type task_groups: list[~files.models.MicrosoftGraphOutlookTaskGroup]
    :param tasks:
    :type tasks: list[~files.models.MicrosoftGraphOutlookTask]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'master_categories': {'key': 'masterCategories', 'type': '[MicrosoftGraphOutlookCategory]'},
        'task_folders': {'key': 'taskFolders', 'type': '[MicrosoftGraphOutlookTaskFolder]'},
        'task_groups': {'key': 'taskGroups', 'type': '[MicrosoftGraphOutlookTaskGroup]'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphOutlookTask]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOutlookUser, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.master_categories = kwargs.get('master_categories', None)
        self.task_folders = kwargs.get('task_folders', None)
        self.task_groups = kwargs.get('task_groups', None)
        self.tasks = kwargs.get('tasks', None)


class MicrosoftGraphPackage(msrest.serialization.Model):
    """package.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: A string indicating the type of package. While oneNote is the only currently
     defined value, you should expect other package types to be returned and handle them
     accordingly.
    :type type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPackage, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphPageLinks(msrest.serialization.Model):
    """pageLinks.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param one_note_client_url: externalLink.
    :type one_note_client_url: ~files.models.MicrosoftGraphExternalLink
    :param one_note_web_url: externalLink.
    :type one_note_web_url: ~files.models.MicrosoftGraphExternalLink
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'one_note_client_url': {'key': 'oneNoteClientUrl', 'type': 'MicrosoftGraphExternalLink'},
        'one_note_web_url': {'key': 'oneNoteWebUrl', 'type': 'MicrosoftGraphExternalLink'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPageLinks, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.one_note_client_url = kwargs.get('one_note_client_url', None)
        self.one_note_web_url = kwargs.get('one_note_web_url', None)


class MicrosoftGraphParentLabelDetails(msrest.serialization.Model):
    """parentLabelDetails.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param color:
    :type color: str
    :param description:
    :type description: str
    :param id:
    :type id: str
    :param is_active:
    :type is_active: bool
    :param name:
    :type name: str
    :param parent: parentLabelDetails.
    :type parent: ~files.models.MicrosoftGraphParentLabelDetails
    :param sensitivity:
    :type sensitivity: int
    :param tooltip:
    :type tooltip: str
    """

    _validation = {
        'sensitivity': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'color': {'key': 'color', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'is_active': {'key': 'isActive', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'parent': {'key': 'parent', 'type': 'MicrosoftGraphParentLabelDetails'},
        'sensitivity': {'key': 'sensitivity', 'type': 'int'},
        'tooltip': {'key': 'tooltip', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphParentLabelDetails, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.color = kwargs.get('color', None)
        self.description = kwargs.get('description', None)
        self.id = kwargs.get('id', None)
        self.is_active = kwargs.get('is_active', None)
        self.name = kwargs.get('name', None)
        self.parent = kwargs.get('parent', None)
        self.sensitivity = kwargs.get('sensitivity', None)
        self.tooltip = kwargs.get('tooltip', None)


class MicrosoftGraphPasswordAuthenticationMethod(MicrosoftGraphAuthenticationMethod):
    """passwordAuthenticationMethod.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param creation_date_time:
    :type creation_date_time: ~datetime.datetime
    :param password:
    :type password: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'creation_date_time': {'key': 'creationDateTime', 'type': 'iso-8601'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPasswordAuthenticationMethod, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.creation_date_time = kwargs.get('creation_date_time', None)
        self.password = kwargs.get('password', None)


class MicrosoftGraphPasswordlessMicrosoftAuthenticatorAuthenticationMethod(MicrosoftGraphAuthenticationMethod):
    """passwordlessMicrosoftAuthenticatorAuthenticationMethod.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPasswordlessMicrosoftAuthenticatorAuthenticationMethod, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphPasswordProfile(msrest.serialization.Model):
    """passwordProfile.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param force_change_password_next_sign_in: true if the user must change her password on the
     next login; otherwise false.
    :type force_change_password_next_sign_in: bool
    :param force_change_password_next_sign_in_with_mfa: If true, at next sign-in, the user must
     perform a multi-factor authentication (MFA) before being forced to change their password. The
     behavior is identical to forceChangePasswordNextSignIn except that the user is required to
     first perform a multi-factor authentication before password change. After a password change,
     this property will be automatically reset to false. If not set, default is false.
    :type force_change_password_next_sign_in_with_mfa: bool
    :param password: The password for the user. This property is required when a user is created.
     It can be updated, but the user will be required to change the password on the next login. The
     password must satisfy minimum requirements as specified by the user’s passwordPolicies
     property. By default, a strong password is required.
    :type password: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'force_change_password_next_sign_in': {'key': 'forceChangePasswordNextSignIn', 'type': 'bool'},
        'force_change_password_next_sign_in_with_mfa': {'key': 'forceChangePasswordNextSignInWithMfa', 'type': 'bool'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPasswordProfile, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.force_change_password_next_sign_in = kwargs.get('force_change_password_next_sign_in', None)
        self.force_change_password_next_sign_in_with_mfa = kwargs.get('force_change_password_next_sign_in_with_mfa', None)
        self.password = kwargs.get('password', None)


class MicrosoftGraphPatternedRecurrence(msrest.serialization.Model):
    """patternedRecurrence.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param pattern: recurrencePattern.
    :type pattern: ~files.models.MicrosoftGraphRecurrencePattern
    :param range: recurrenceRange.
    :type range: ~files.models.MicrosoftGraphRecurrenceRange
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'pattern': {'key': 'pattern', 'type': 'MicrosoftGraphRecurrencePattern'},
        'range': {'key': 'range', 'type': 'MicrosoftGraphRecurrenceRange'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPatternedRecurrence, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.pattern = kwargs.get('pattern', None)
        self.range = kwargs.get('range', None)


class MicrosoftGraphPayloadResponse(MicrosoftGraphEntity):
    """payloadResponse.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPayloadResponse, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphPayloadTypes(msrest.serialization.Model):
    """payloadTypes.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param raw_content:
    :type raw_content: str
    :param visual_content: visualProperties.
    :type visual_content: ~files.models.MicrosoftGraphVisualProperties
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'raw_content': {'key': 'rawContent', 'type': 'str'},
        'visual_content': {'key': 'visualContent', 'type': 'MicrosoftGraphVisualProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPayloadTypes, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.raw_content = kwargs.get('raw_content', None)
        self.visual_content = kwargs.get('visual_content', None)


class MicrosoftGraphPendingContentUpdate(msrest.serialization.Model):
    """pendingContentUpdate.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param queued_date_time: Date and time the pending binary operation was queued in UTC time.
     Read-only.
    :type queued_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'queued_date_time': {'key': 'queuedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPendingContentUpdate, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.queued_date_time = kwargs.get('queued_date_time', None)


class MicrosoftGraphPendingOperations(msrest.serialization.Model):
    """pendingOperations.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param queued_date_time: Date and time the pending binary operation was queued in UTC time.
     Read-only.
    :type queued_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'queued_date_time': {'key': 'pendingContentUpdate.queuedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPendingOperations, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.queued_date_time = kwargs.get('queued_date_time', None)


class MicrosoftGraphPermission(MicrosoftGraphEntity):
    """permission.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param expiration_date_time: A format of yyyy-MM-ddTHH:mm:ssZ of DateTimeOffset indicates the
     expiration time of the permission. DateTime.MinValue indicates there is no expiration set for
     this permission. Optional.
    :type expiration_date_time: ~datetime.datetime
    :param granted_to_identities: For link type permissions, the details of the users to whom
     permission was granted. Read-only.
    :type granted_to_identities: list[~files.models.MicrosoftGraphIdentitySet]
    :param has_password: This indicates whether password is set for this permission, it's only
     showing in response. Optional and Read-only and for OneDrive Personal only.
    :type has_password: bool
    :param roles: The type of permission, e.g. read. See below for the full list of roles. Read-
     only.
    :type roles: list[str]
    :param share_id: A unique token that can be used to access this shared item via the **shares**
     API. Read-only.
    :type share_id: str
    :param application_link_application: identity.
    :type application_link_application: ~files.models.MicrosoftGraphIdentity
    :param configurator_url:
    :type configurator_url: str
    :param prevents_download: If true then the user can only use this link to view the item on the
     web, and cannot use it to download the contents of the item. Only for OneDrive for Business and
     SharePoint.
    :type prevents_download: bool
    :param scope: The scope of the link represented by this permission. Value anonymous indicates
     the link is usable by anyone, organization indicates the link is only usable for users signed
     into the same tenant.
    :type scope: str
    :param type: The type of the link created.
    :type type: str
    :param web_html: For embed links, this property contains the HTML code for an :code:`<iframe>`
     element that will embed the item in a webpage.
    :type web_html: str
    :param web_url: A URL that opens the item in the browser on the OneDrive website.
    :type web_url: str
    :param email: The email address provided for the recipient of the sharing invitation. Read-
     only.
    :type email: str
    :param invited_by: identitySet.
    :type invited_by: ~files.models.MicrosoftGraphIdentitySet
    :param redeemed_by:
    :type redeemed_by: str
    :param sign_in_required: If true the recipient of the invitation needs to sign in in order to
     access the shared item. Read-only.
    :type sign_in_required: bool
    :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
    :type drive_id: str
    :param drive_type: Identifies the type of drive. See [drive][] resource for values.
    :type drive_type: str
    :param id_inherited_from_id: Unique identifier of the item in the drive. Read-only.
    :type id_inherited_from_id: str
    :param name: The name of the item being referenced. Read-only.
    :type name: str
    :param path: Path that can be used to navigate to the item. Read-only.
    :type path: str
    :param share_id_inherited_from_share_id: A unique identifier for a shared resource that can be
     accessed via the [Shares][] API.
    :type share_id_inherited_from_share_id: str
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param site_id:
    :type site_id: str
    :param application_granted_to_application: identity.
    :type application_granted_to_application: ~files.models.MicrosoftGraphIdentity
    :param device: identity.
    :type device: ~files.models.MicrosoftGraphIdentity
    :param user: identity.
    :type user: ~files.models.MicrosoftGraphIdentity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'granted_to_identities': {'key': 'grantedToIdentities', 'type': '[MicrosoftGraphIdentitySet]'},
        'has_password': {'key': 'hasPassword', 'type': 'bool'},
        'roles': {'key': 'roles', 'type': '[str]'},
        'share_id': {'key': 'shareId', 'type': 'str'},
        'application_link_application': {'key': 'link.application', 'type': 'MicrosoftGraphIdentity'},
        'configurator_url': {'key': 'link.configuratorUrl', 'type': 'str'},
        'prevents_download': {'key': 'link.preventsDownload', 'type': 'bool'},
        'scope': {'key': 'link.scope', 'type': 'str'},
        'type': {'key': 'link.type', 'type': 'str'},
        'web_html': {'key': 'link.webHtml', 'type': 'str'},
        'web_url': {'key': 'link.webUrl', 'type': 'str'},
        'email': {'key': 'invitation.email', 'type': 'str'},
        'invited_by': {'key': 'invitation.invitedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'redeemed_by': {'key': 'invitation.redeemedBy', 'type': 'str'},
        'sign_in_required': {'key': 'invitation.signInRequired', 'type': 'bool'},
        'drive_id': {'key': 'inheritedFrom.driveId', 'type': 'str'},
        'drive_type': {'key': 'inheritedFrom.driveType', 'type': 'str'},
        'id_inherited_from_id': {'key': 'inheritedFrom.id', 'type': 'str'},
        'name': {'key': 'inheritedFrom.name', 'type': 'str'},
        'path': {'key': 'inheritedFrom.path', 'type': 'str'},
        'share_id_inherited_from_share_id': {'key': 'inheritedFrom.shareId', 'type': 'str'},
        'sharepoint_ids': {'key': 'inheritedFrom.sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'site_id': {'key': 'inheritedFrom.siteId', 'type': 'str'},
        'application_granted_to_application': {'key': 'grantedTo.application', 'type': 'MicrosoftGraphIdentity'},
        'device': {'key': 'grantedTo.device', 'type': 'MicrosoftGraphIdentity'},
        'user': {'key': 'grantedTo.user', 'type': 'MicrosoftGraphIdentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPermission, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.granted_to_identities = kwargs.get('granted_to_identities', None)
        self.has_password = kwargs.get('has_password', None)
        self.roles = kwargs.get('roles', None)
        self.share_id = kwargs.get('share_id', None)
        self.application_link_application = kwargs.get('application_link_application', None)
        self.configurator_url = kwargs.get('configurator_url', None)
        self.prevents_download = kwargs.get('prevents_download', None)
        self.scope = kwargs.get('scope', None)
        self.type = kwargs.get('type', None)
        self.web_html = kwargs.get('web_html', None)
        self.web_url = kwargs.get('web_url', None)
        self.email = kwargs.get('email', None)
        self.invited_by = kwargs.get('invited_by', None)
        self.redeemed_by = kwargs.get('redeemed_by', None)
        self.sign_in_required = kwargs.get('sign_in_required', None)
        self.drive_id = kwargs.get('drive_id', None)
        self.drive_type = kwargs.get('drive_type', None)
        self.id_inherited_from_id = kwargs.get('id_inherited_from_id', None)
        self.name = kwargs.get('name', None)
        self.path = kwargs.get('path', None)
        self.share_id_inherited_from_share_id = kwargs.get('share_id_inherited_from_share_id', None)
        self.sharepoint_ids = kwargs.get('sharepoint_ids', None)
        self.site_id = kwargs.get('site_id', None)
        self.application_granted_to_application = kwargs.get('application_granted_to_application', None)
        self.device = kwargs.get('device', None)
        self.user = kwargs.get('user', None)


class MicrosoftGraphPerson(MicrosoftGraphEntity):
    """person.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param birthday: The person's birthday.
    :type birthday: str
    :param company_name: The name of the person's company.
    :type company_name: str
    :param department: The person's department.
    :type department: str
    :param display_name: The person's display name.
    :type display_name: str
    :param email_addresses:
    :type email_addresses: list[~files.models.MicrosoftGraphRankedEmailAddress]
    :param given_name: The person's given name.
    :type given_name: str
    :param is_favorite: true if the user has flagged this person as a favorite.
    :type is_favorite: bool
    :param mailbox_type:
    :type mailbox_type: str
    :param office_location: The location of the person's office.
    :type office_location: str
    :param person_notes: Free-form notes that the user has taken about this person.
    :type person_notes: str
    :param person_type: The type of person.
    :type person_type: str
    :param phones: The person's phone numbers.
    :type phones: list[~files.models.MicrosoftGraphPhone]
    :param postal_addresses: The person's addresses.
    :type postal_addresses: list[~files.models.MicrosoftGraphLocation]
    :param profession: The person's profession.
    :type profession: str
    :param sources:
    :type sources: list[~files.models.MicrosoftGraphPersonDataSource]
    :param surname: The person's surname.
    :type surname: str
    :param title:
    :type title: str
    :param user_principal_name: The user principal name (UPN) of the person. The UPN is an
     Internet-style login name for the person based on the Internet standard RFC 822. By convention,
     this should map to the person's email name. The general format is alias@domain.
    :type user_principal_name: str
    :param websites: The person's websites.
    :type websites: list[~files.models.MicrosoftGraphWebsite]
    :param yomi_company: The phonetic Japanese name of the person's company.
    :type yomi_company: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'birthday': {'key': 'birthday', 'type': 'str'},
        'company_name': {'key': 'companyName', 'type': 'str'},
        'department': {'key': 'department', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email_addresses': {'key': 'emailAddresses', 'type': '[MicrosoftGraphRankedEmailAddress]'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'is_favorite': {'key': 'isFavorite', 'type': 'bool'},
        'mailbox_type': {'key': 'mailboxType', 'type': 'str'},
        'office_location': {'key': 'officeLocation', 'type': 'str'},
        'person_notes': {'key': 'personNotes', 'type': 'str'},
        'person_type': {'key': 'personType', 'type': 'str'},
        'phones': {'key': 'phones', 'type': '[MicrosoftGraphPhone]'},
        'postal_addresses': {'key': 'postalAddresses', 'type': '[MicrosoftGraphLocation]'},
        'profession': {'key': 'profession', 'type': 'str'},
        'sources': {'key': 'sources', 'type': '[MicrosoftGraphPersonDataSource]'},
        'surname': {'key': 'surname', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'websites': {'key': 'websites', 'type': '[MicrosoftGraphWebsite]'},
        'yomi_company': {'key': 'yomiCompany', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPerson, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.birthday = kwargs.get('birthday', None)
        self.company_name = kwargs.get('company_name', None)
        self.department = kwargs.get('department', None)
        self.display_name = kwargs.get('display_name', None)
        self.email_addresses = kwargs.get('email_addresses', None)
        self.given_name = kwargs.get('given_name', None)
        self.is_favorite = kwargs.get('is_favorite', None)
        self.mailbox_type = kwargs.get('mailbox_type', None)
        self.office_location = kwargs.get('office_location', None)
        self.person_notes = kwargs.get('person_notes', None)
        self.person_type = kwargs.get('person_type', None)
        self.phones = kwargs.get('phones', None)
        self.postal_addresses = kwargs.get('postal_addresses', None)
        self.profession = kwargs.get('profession', None)
        self.sources = kwargs.get('sources', None)
        self.surname = kwargs.get('surname', None)
        self.title = kwargs.get('title', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)
        self.websites = kwargs.get('websites', None)
        self.yomi_company = kwargs.get('yomi_company', None)


class MicrosoftGraphPersonAnniversary(MicrosoftGraphItemFacet):
    """personAnniversary.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param date:
    :type date: ~datetime.date
    :param type:  Possible values include: "birthday", "wedding", "unknownFutureValue".
    :type type: str or ~files.models.MicrosoftGraphAnniversaryType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'date': {'key': 'date', 'type': 'date'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPersonAnniversary, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.date = kwargs.get('date', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphPersonAnnotation(MicrosoftGraphItemFacet):
    """personAnnotation.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param detail: itemBody.
    :type detail: ~files.models.MicrosoftGraphItemBody
    :param display_name:
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'detail': {'key': 'detail', 'type': 'MicrosoftGraphItemBody'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPersonAnnotation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.detail = kwargs.get('detail', None)
        self.display_name = kwargs.get('display_name', None)


class MicrosoftGraphPersonAward(MicrosoftGraphItemFacet):
    """personAward.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param issued_date:
    :type issued_date: ~datetime.date
    :param issuing_authority:
    :type issuing_authority: str
    :param thumbnail_url:
    :type thumbnail_url: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'issued_date': {'key': 'issuedDate', 'type': 'date'},
        'issuing_authority': {'key': 'issuingAuthority', 'type': 'str'},
        'thumbnail_url': {'key': 'thumbnailUrl', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPersonAward, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.issued_date = kwargs.get('issued_date', None)
        self.issuing_authority = kwargs.get('issuing_authority', None)
        self.thumbnail_url = kwargs.get('thumbnail_url', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphPersonCertification(MicrosoftGraphItemFacet):
    """personCertification.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param certification_id:
    :type certification_id: str
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param end_date:
    :type end_date: ~datetime.date
    :param issued_date:
    :type issued_date: ~datetime.date
    :param issuing_authority:
    :type issuing_authority: str
    :param issuing_company:
    :type issuing_company: str
    :param start_date:
    :type start_date: ~datetime.date
    :param thumbnail_url:
    :type thumbnail_url: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'certification_id': {'key': 'certificationId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'end_date': {'key': 'endDate', 'type': 'date'},
        'issued_date': {'key': 'issuedDate', 'type': 'date'},
        'issuing_authority': {'key': 'issuingAuthority', 'type': 'str'},
        'issuing_company': {'key': 'issuingCompany', 'type': 'str'},
        'start_date': {'key': 'startDate', 'type': 'date'},
        'thumbnail_url': {'key': 'thumbnailUrl', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPersonCertification, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.certification_id = kwargs.get('certification_id', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.end_date = kwargs.get('end_date', None)
        self.issued_date = kwargs.get('issued_date', None)
        self.issuing_authority = kwargs.get('issuing_authority', None)
        self.issuing_company = kwargs.get('issuing_company', None)
        self.start_date = kwargs.get('start_date', None)
        self.thumbnail_url = kwargs.get('thumbnail_url', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphPersonDataSource(msrest.serialization.Model):
    """personDataSource.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:
    :type type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPersonDataSource, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphPersonDataSources(msrest.serialization.Model):
    """personDataSources.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:
    :type type: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPersonDataSources, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphPersonInterest(MicrosoftGraphItemFacet):
    """personInterest.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param categories:
    :type categories: list[str]
    :param collaboration_tags:
    :type collaboration_tags: list[str]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'collaboration_tags': {'key': 'collaborationTags', 'type': '[str]'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPersonInterest, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.categories = kwargs.get('categories', None)
        self.collaboration_tags = kwargs.get('collaboration_tags', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphPersonName(MicrosoftGraphItemFacet):
    """personName.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param first:
    :type first: str
    :param initials:
    :type initials: str
    :param language_tag:
    :type language_tag: str
    :param last:
    :type last: str
    :param maiden:
    :type maiden: str
    :param middle:
    :type middle: str
    :param nickname:
    :type nickname: str
    :param pronunciation: yomiPersonName.
    :type pronunciation: ~files.models.MicrosoftGraphYomiPersonName
    :param suffix:
    :type suffix: str
    :param title:
    :type title: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'first': {'key': 'first', 'type': 'str'},
        'initials': {'key': 'initials', 'type': 'str'},
        'language_tag': {'key': 'languageTag', 'type': 'str'},
        'last': {'key': 'last', 'type': 'str'},
        'maiden': {'key': 'maiden', 'type': 'str'},
        'middle': {'key': 'middle', 'type': 'str'},
        'nickname': {'key': 'nickname', 'type': 'str'},
        'pronunciation': {'key': 'pronunciation', 'type': 'MicrosoftGraphYomiPersonName'},
        'suffix': {'key': 'suffix', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPersonName, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.first = kwargs.get('first', None)
        self.initials = kwargs.get('initials', None)
        self.language_tag = kwargs.get('language_tag', None)
        self.last = kwargs.get('last', None)
        self.maiden = kwargs.get('maiden', None)
        self.middle = kwargs.get('middle', None)
        self.nickname = kwargs.get('nickname', None)
        self.pronunciation = kwargs.get('pronunciation', None)
        self.suffix = kwargs.get('suffix', None)
        self.title = kwargs.get('title', None)


class MicrosoftGraphPersonOrGroupColumn(msrest.serialization.Model):
    """personOrGroupColumn.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_multiple_selection: Indicates whether multiple values can be selected from the
     source.
    :type allow_multiple_selection: bool
    :param choose_from_type: Whether to allow selection of people only, or people and groups. Must
     be one of peopleAndGroups or peopleOnly.
    :type choose_from_type: str
    :param display_as: How to display the information about the person or group chosen. See below.
    :type display_as: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_multiple_selection': {'key': 'allowMultipleSelection', 'type': 'bool'},
        'choose_from_type': {'key': 'chooseFromType', 'type': 'str'},
        'display_as': {'key': 'displayAs', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPersonOrGroupColumn, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allow_multiple_selection = kwargs.get('allow_multiple_selection', None)
        self.choose_from_type = kwargs.get('choose_from_type', None)
        self.display_as = kwargs.get('display_as', None)


class MicrosoftGraphPersonWebsite(MicrosoftGraphItemFacet):
    """personWebsite.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param categories:
    :type categories: list[str]
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPersonWebsite, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.categories = kwargs.get('categories', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphPhone(msrest.serialization.Model):
    """phone.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param number: The phone number.
    :type number: str
    :param type:  Possible values include: "home", "business", "mobile", "other", "assistant",
     "homeFax", "businessFax", "otherFax", "pager", "radio".
    :type type: str or ~files.models.MicrosoftGraphPhoneType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'number': {'key': 'number', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPhone, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.number = kwargs.get('number', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphPhoneAuthenticationMethod(MicrosoftGraphAuthenticationMethod):
    """phoneAuthenticationMethod.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param phone_number:
    :type phone_number: str
    :param phone_type:  Possible values include: "mobile", "alternateMobile", "office",
     "unknownFutureValue".
    :type phone_type: str or ~files.models.MicrosoftGraphAuthenticationPhoneType
    :param sms_sign_in_state:  Possible values include: "notSupported", "notAllowedByPolicy",
     "notEnabled", "phoneNumberNotUnique", "ready", "notConfigured", "unknownFutureValue".
    :type sms_sign_in_state: str or ~files.models.MicrosoftGraphAuthenticationMethodSignInState
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'phone_type': {'key': 'phoneType', 'type': 'str'},
        'sms_sign_in_state': {'key': 'smsSignInState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPhoneAuthenticationMethod, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.phone_type = kwargs.get('phone_type', None)
        self.sms_sign_in_state = kwargs.get('sms_sign_in_state', None)


class MicrosoftGraphPhoto(msrest.serialization.Model):
    """photo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param camera_make: Camera manufacturer. Read-only.
    :type camera_make: str
    :param camera_model: Camera model. Read-only.
    :type camera_model: str
    :param exposure_denominator: The denominator for the exposure time fraction from the camera.
     Read-only.
    :type exposure_denominator: float
    :param exposure_numerator: The numerator for the exposure time fraction from the camera. Read-
     only.
    :type exposure_numerator: float
    :param f_number: The F-stop value from the camera. Read-only.
    :type f_number: float
    :param focal_length: The focal length from the camera. Read-only.
    :type focal_length: float
    :param iso: The ISO value from the camera. Read-only.
    :type iso: int
    :param orientation: The orientation value from the camera. Writable on OneDrive Personal.
    :type orientation: int
    :param taken_date_time: Represents the date and time the photo was taken. Read-only.
    :type taken_date_time: ~datetime.datetime
    """

    _validation = {
        'iso': {'maximum': 2147483647, 'minimum': -2147483648},
        'orientation': {'maximum': 32767, 'minimum': -32768},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'camera_make': {'key': 'cameraMake', 'type': 'str'},
        'camera_model': {'key': 'cameraModel', 'type': 'str'},
        'exposure_denominator': {'key': 'exposureDenominator', 'type': 'float'},
        'exposure_numerator': {'key': 'exposureNumerator', 'type': 'float'},
        'f_number': {'key': 'fNumber', 'type': 'float'},
        'focal_length': {'key': 'focalLength', 'type': 'float'},
        'iso': {'key': 'iso', 'type': 'int'},
        'orientation': {'key': 'orientation', 'type': 'int'},
        'taken_date_time': {'key': 'takenDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPhoto, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.camera_make = kwargs.get('camera_make', None)
        self.camera_model = kwargs.get('camera_model', None)
        self.exposure_denominator = kwargs.get('exposure_denominator', None)
        self.exposure_numerator = kwargs.get('exposure_numerator', None)
        self.f_number = kwargs.get('f_number', None)
        self.focal_length = kwargs.get('focal_length', None)
        self.iso = kwargs.get('iso', None)
        self.orientation = kwargs.get('orientation', None)
        self.taken_date_time = kwargs.get('taken_date_time', None)


class MicrosoftGraphPhysicalAddress(msrest.serialization.Model):
    """physicalAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param city: The city.
    :type city: str
    :param country_or_region: The country or region. It's a free-format string value, for example,
     'United States'.
    :type country_or_region: str
    :param postal_code: The postal code.
    :type postal_code: str
    :param post_office_box:
    :type post_office_box: str
    :param state: The state.
    :type state: str
    :param street: The street.
    :type street: str
    :param type:  Possible values include: "unknown", "home", "business", "other".
    :type type: str or ~files.models.MicrosoftGraphPhysicalAddressType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'city': {'key': 'city', 'type': 'str'},
        'country_or_region': {'key': 'countryOrRegion', 'type': 'str'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'post_office_box': {'key': 'postOfficeBox', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'street': {'key': 'street', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPhysicalAddress, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.city = kwargs.get('city', None)
        self.country_or_region = kwargs.get('country_or_region', None)
        self.postal_code = kwargs.get('postal_code', None)
        self.post_office_box = kwargs.get('post_office_box', None)
        self.state = kwargs.get('state', None)
        self.street = kwargs.get('street', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphPlannerDelta(MicrosoftGraphEntity):
    """plannerDelta.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerDelta, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat(MicrosoftGraphPlannerDelta):
    """plannerAssignedToTaskBoardTaskFormat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param order_hints_by_assignee: plannerOrderHintsByAssignee.
    :type order_hints_by_assignee: dict[str, object]
    :param unassigned_order_hint: Hint value used to order the task on the AssignedTo view of the
     Task Board when the task is not assigned to anyone, or if the orderHintsByAssignee dictionary
     does not provide an order hint for the user the task is assigned to. The format is defined as
     outlined here.
    :type unassigned_order_hint: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'order_hints_by_assignee': {'key': 'orderHintsByAssignee', 'type': '{object}'},
        'unassigned_order_hint': {'key': 'unassignedOrderHint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.order_hints_by_assignee = kwargs.get('order_hints_by_assignee', None)
        self.unassigned_order_hint = kwargs.get('unassigned_order_hint', None)


class MicrosoftGraphPlannerBucket(MicrosoftGraphPlannerDelta):
    """plannerBucket.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Name of the bucket.
    :type name: str
    :param order_hint: Hint used to order items of this type in a list view. The format is defined
     as outlined here.
    :type order_hint: str
    :param plan_id: Plan ID to which the bucket belongs.
    :type plan_id: str
    :param tasks: Read-only. Nullable. The collection of tasks in the bucket.
    :type tasks: list[~files.models.MicrosoftGraphPlannerTask]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'order_hint': {'key': 'orderHint', 'type': 'str'},
        'plan_id': {'key': 'planId', 'type': 'str'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphPlannerTask]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerBucket, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)
        self.order_hint = kwargs.get('order_hint', None)
        self.plan_id = kwargs.get('plan_id', None)
        self.tasks = kwargs.get('tasks', None)


class MicrosoftGraphPlannerBucketTaskBoardTaskFormat(MicrosoftGraphPlannerDelta):
    """plannerBucketTaskBoardTaskFormat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param order_hint: Hint used to order tasks in the Bucket view of the Task Board. The format is
     defined as outlined here.
    :type order_hint: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'order_hint': {'key': 'orderHint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerBucketTaskBoardTaskFormat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.order_hint = kwargs.get('order_hint', None)


class MicrosoftGraphPlannerCategoryDescriptions(msrest.serialization.Model):
    """plannerCategoryDescriptions.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param category1: The label associated with Category 1.
    :type category1: str
    :param category2: The label associated with Category 2.
    :type category2: str
    :param category3: The label associated with Category 3.
    :type category3: str
    :param category4: The label associated with Category 4.
    :type category4: str
    :param category5: The label associated with Category 5.
    :type category5: str
    :param category6: The label associated with Category 6.
    :type category6: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'category1': {'key': 'category1', 'type': 'str'},
        'category2': {'key': 'category2', 'type': 'str'},
        'category3': {'key': 'category3', 'type': 'str'},
        'category4': {'key': 'category4', 'type': 'str'},
        'category5': {'key': 'category5', 'type': 'str'},
        'category6': {'key': 'category6', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerCategoryDescriptions, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.category1 = kwargs.get('category1', None)
        self.category2 = kwargs.get('category2', None)
        self.category3 = kwargs.get('category3', None)
        self.category4 = kwargs.get('category4', None)
        self.category5 = kwargs.get('category5', None)
        self.category6 = kwargs.get('category6', None)


class MicrosoftGraphPlannerGroup(MicrosoftGraphEntity):
    """plannerGroup.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param plans: Read-only. Nullable. Returns the plannerPlans owned by the group.
    :type plans: list[~files.models.MicrosoftGraphPlannerPlan]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'plans': {'key': 'plans', 'type': '[MicrosoftGraphPlannerPlan]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerGroup, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.plans = kwargs.get('plans', None)


class MicrosoftGraphPlannerPlan(MicrosoftGraphPlannerDelta):
    """plannerPlan.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param contexts: plannerPlanContextCollection.
    :type contexts: dict[str, object]
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: Read-only. Date and time at which the plan is created. The Timestamp
     type represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param owner: ID of the Group that owns the plan. A valid group must exist before this field
     can be set. After it is set, this property can’t be updated.
    :type owner: str
    :param title: Required. Title of the plan.
    :type title: str
    :param buckets: Read-only. Nullable. Collection of buckets in the plan.
    :type buckets: list[~files.models.MicrosoftGraphPlannerBucket]
    :param details: plannerPlanDetails.
    :type details: ~files.models.MicrosoftGraphPlannerPlanDetails
    :param tasks: Read-only. Nullable. Collection of tasks in the plan.
    :type tasks: list[~files.models.MicrosoftGraphPlannerTask]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'contexts': {'key': 'contexts', 'type': '{object}'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'owner': {'key': 'owner', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'buckets': {'key': 'buckets', 'type': '[MicrosoftGraphPlannerBucket]'},
        'details': {'key': 'details', 'type': 'MicrosoftGraphPlannerPlanDetails'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphPlannerTask]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerPlan, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.contexts = kwargs.get('contexts', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.owner = kwargs.get('owner', None)
        self.title = kwargs.get('title', None)
        self.buckets = kwargs.get('buckets', None)
        self.details = kwargs.get('details', None)
        self.tasks = kwargs.get('tasks', None)


class MicrosoftGraphPlannerPlanDetails(MicrosoftGraphPlannerDelta):
    """plannerPlanDetails.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param category_descriptions: plannerCategoryDescriptions.
    :type category_descriptions: ~files.models.MicrosoftGraphPlannerCategoryDescriptions
    :param context_details: plannerPlanContextDetailsCollection.
    :type context_details: dict[str, object]
    :param shared_with: plannerUserIds.
    :type shared_with: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'category_descriptions': {'key': 'categoryDescriptions', 'type': 'MicrosoftGraphPlannerCategoryDescriptions'},
        'context_details': {'key': 'contextDetails', 'type': '{object}'},
        'shared_with': {'key': 'sharedWith', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerPlanDetails, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.category_descriptions = kwargs.get('category_descriptions', None)
        self.context_details = kwargs.get('context_details', None)
        self.shared_with = kwargs.get('shared_with', None)


class MicrosoftGraphPlannerProgressTaskBoardTaskFormat(MicrosoftGraphPlannerDelta):
    """plannerProgressTaskBoardTaskFormat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param order_hint: Hint value used to order the task on the Progress view of the Task Board.
     The format is defined as outlined here.
    :type order_hint: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'order_hint': {'key': 'orderHint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerProgressTaskBoardTaskFormat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.order_hint = kwargs.get('order_hint', None)


class MicrosoftGraphPlannerTask(MicrosoftGraphPlannerDelta):
    """plannerTask.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param active_checklist_item_count: Number of checklist items with value set to false,
     representing incomplete items.
    :type active_checklist_item_count: int
    :param applied_categories: plannerAppliedCategories.
    :type applied_categories: dict[str, object]
    :param assignee_priority: Hint used to order items of this type in a list view. The format is
     defined as outlined here.
    :type assignee_priority: str
    :param assignments: plannerAssignments.
    :type assignments: dict[str, object]
    :param bucket_id: Bucket ID to which the task belongs. The bucket needs to be in the plan that
     the task is in. It is 28 characters long and case-sensitive. Format validation is done on the
     service.
    :type bucket_id: str
    :param checklist_item_count: Number of checklist items that are present on the task.
    :type checklist_item_count: int
    :param completed_by: identitySet.
    :type completed_by: ~files.models.MicrosoftGraphIdentitySet
    :param completed_date_time: Read-only. Date and time at which the 'percentComplete' of the task
     is set to '100'. The Timestamp type represents date and time information using ISO 8601 format
     and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this:
     '2014-01-01T00:00:00Z'.
    :type completed_date_time: ~datetime.datetime
    :param conversation_thread_id: Thread ID of the conversation on the task. This is the ID of the
     conversation thread object created in the group.
    :type conversation_thread_id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: Read-only. Date and time at which the task is created. The Timestamp
     type represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param due_date_time: Date and time at which the task is due. The Timestamp type represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type due_date_time: ~datetime.datetime
    :param has_description: Read-only. Value is true if the details object of the task has a non-
     empty description and false otherwise.
    :type has_description: bool
    :param order_hint: Hint used to order items of this type in a list view. The format is defined
     as outlined here.
    :type order_hint: str
    :param percent_complete: Percentage of task completion. When set to 100, the task is considered
     completed.
    :type percent_complete: int
    :param plan_id: Plan ID to which the task belongs.
    :type plan_id: str
    :param preview_type:  Possible values include: "automatic", "noPreview", "checklist",
     "description", "reference".
    :type preview_type: str or ~files.models.MicrosoftGraphPlannerPreviewType
    :param priority:
    :type priority: int
    :param reference_count: Number of external references that exist on the task.
    :type reference_count: int
    :param start_date_time: Date and time at which the task starts. The Timestamp type represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type start_date_time: ~datetime.datetime
    :param title: Title of the task.
    :type title: str
    :param assigned_to_task_board_format: plannerAssignedToTaskBoardTaskFormat.
    :type assigned_to_task_board_format:
     ~files.models.MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat
    :param bucket_task_board_format: plannerBucketTaskBoardTaskFormat.
    :type bucket_task_board_format: ~files.models.MicrosoftGraphPlannerBucketTaskBoardTaskFormat
    :param details: plannerTaskDetails.
    :type details: ~files.models.MicrosoftGraphPlannerTaskDetails
    :param progress_task_board_format: plannerProgressTaskBoardTaskFormat.
    :type progress_task_board_format:
     ~files.models.MicrosoftGraphPlannerProgressTaskBoardTaskFormat
    """

    _validation = {
        'active_checklist_item_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'checklist_item_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'percent_complete': {'maximum': 2147483647, 'minimum': -2147483648},
        'priority': {'maximum': 2147483647, 'minimum': -2147483648},
        'reference_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'active_checklist_item_count': {'key': 'activeChecklistItemCount', 'type': 'int'},
        'applied_categories': {'key': 'appliedCategories', 'type': '{object}'},
        'assignee_priority': {'key': 'assigneePriority', 'type': 'str'},
        'assignments': {'key': 'assignments', 'type': '{object}'},
        'bucket_id': {'key': 'bucketId', 'type': 'str'},
        'checklist_item_count': {'key': 'checklistItemCount', 'type': 'int'},
        'completed_by': {'key': 'completedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'completed_date_time': {'key': 'completedDateTime', 'type': 'iso-8601'},
        'conversation_thread_id': {'key': 'conversationThreadId', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'due_date_time': {'key': 'dueDateTime', 'type': 'iso-8601'},
        'has_description': {'key': 'hasDescription', 'type': 'bool'},
        'order_hint': {'key': 'orderHint', 'type': 'str'},
        'percent_complete': {'key': 'percentComplete', 'type': 'int'},
        'plan_id': {'key': 'planId', 'type': 'str'},
        'preview_type': {'key': 'previewType', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'reference_count': {'key': 'referenceCount', 'type': 'int'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'title': {'key': 'title', 'type': 'str'},
        'assigned_to_task_board_format': {'key': 'assignedToTaskBoardFormat', 'type': 'MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat'},
        'bucket_task_board_format': {'key': 'bucketTaskBoardFormat', 'type': 'MicrosoftGraphPlannerBucketTaskBoardTaskFormat'},
        'details': {'key': 'details', 'type': 'MicrosoftGraphPlannerTaskDetails'},
        'progress_task_board_format': {'key': 'progressTaskBoardFormat', 'type': 'MicrosoftGraphPlannerProgressTaskBoardTaskFormat'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerTask, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.active_checklist_item_count = kwargs.get('active_checklist_item_count', None)
        self.applied_categories = kwargs.get('applied_categories', None)
        self.assignee_priority = kwargs.get('assignee_priority', None)
        self.assignments = kwargs.get('assignments', None)
        self.bucket_id = kwargs.get('bucket_id', None)
        self.checklist_item_count = kwargs.get('checklist_item_count', None)
        self.completed_by = kwargs.get('completed_by', None)
        self.completed_date_time = kwargs.get('completed_date_time', None)
        self.conversation_thread_id = kwargs.get('conversation_thread_id', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.due_date_time = kwargs.get('due_date_time', None)
        self.has_description = kwargs.get('has_description', None)
        self.order_hint = kwargs.get('order_hint', None)
        self.percent_complete = kwargs.get('percent_complete', None)
        self.plan_id = kwargs.get('plan_id', None)
        self.preview_type = kwargs.get('preview_type', None)
        self.priority = kwargs.get('priority', None)
        self.reference_count = kwargs.get('reference_count', None)
        self.start_date_time = kwargs.get('start_date_time', None)
        self.title = kwargs.get('title', None)
        self.assigned_to_task_board_format = kwargs.get('assigned_to_task_board_format', None)
        self.bucket_task_board_format = kwargs.get('bucket_task_board_format', None)
        self.details = kwargs.get('details', None)
        self.progress_task_board_format = kwargs.get('progress_task_board_format', None)


class MicrosoftGraphPlannerTaskDetails(MicrosoftGraphPlannerDelta):
    """plannerTaskDetails.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param checklist: plannerChecklistItems.
    :type checklist: dict[str, object]
    :param description: Description of the task.
    :type description: str
    :param preview_type:  Possible values include: "automatic", "noPreview", "checklist",
     "description", "reference".
    :type preview_type: str or ~files.models.MicrosoftGraphPlannerPreviewType
    :param references: plannerExternalReferences.
    :type references: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'checklist': {'key': 'checklist', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'preview_type': {'key': 'previewType', 'type': 'str'},
        'references': {'key': 'references', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerTaskDetails, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.checklist = kwargs.get('checklist', None)
        self.description = kwargs.get('description', None)
        self.preview_type = kwargs.get('preview_type', None)
        self.references = kwargs.get('references', None)


class MicrosoftGraphPlannerUser(MicrosoftGraphPlannerDelta):
    """plannerUser.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param favorite_plan_references: plannerFavoritePlanReferenceCollection.
    :type favorite_plan_references: dict[str, object]
    :param recent_plan_references: plannerRecentPlanReferenceCollection.
    :type recent_plan_references: dict[str, object]
    :param all:
    :type all: list[~files.models.MicrosoftGraphPlannerDelta]
    :param favorite_plans:
    :type favorite_plans: list[~files.models.MicrosoftGraphPlannerPlan]
    :param plans: Read-only. Nullable. Returns the plannerTasks assigned to the user.
    :type plans: list[~files.models.MicrosoftGraphPlannerPlan]
    :param recent_plans:
    :type recent_plans: list[~files.models.MicrosoftGraphPlannerPlan]
    :param tasks: Read-only. Nullable. Returns the plannerPlans shared with the user.
    :type tasks: list[~files.models.MicrosoftGraphPlannerTask]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'favorite_plan_references': {'key': 'favoritePlanReferences', 'type': '{object}'},
        'recent_plan_references': {'key': 'recentPlanReferences', 'type': '{object}'},
        'all': {'key': 'all', 'type': '[MicrosoftGraphPlannerDelta]'},
        'favorite_plans': {'key': 'favoritePlans', 'type': '[MicrosoftGraphPlannerPlan]'},
        'plans': {'key': 'plans', 'type': '[MicrosoftGraphPlannerPlan]'},
        'recent_plans': {'key': 'recentPlans', 'type': '[MicrosoftGraphPlannerPlan]'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphPlannerTask]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerUser, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.favorite_plan_references = kwargs.get('favorite_plan_references', None)
        self.recent_plan_references = kwargs.get('recent_plan_references', None)
        self.all = kwargs.get('all', None)
        self.favorite_plans = kwargs.get('favorite_plans', None)
        self.plans = kwargs.get('plans', None)
        self.recent_plans = kwargs.get('recent_plans', None)
        self.tasks = kwargs.get('tasks', None)


class MicrosoftGraphPositionDetail(msrest.serialization.Model):
    """positionDetail.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param company: companyDetail.
    :type company: ~files.models.MicrosoftGraphCompanyDetail
    :param description:
    :type description: str
    :param end_month_year:
    :type end_month_year: ~datetime.date
    :param job_title:
    :type job_title: str
    :param role:
    :type role: str
    :param start_month_year:
    :type start_month_year: ~datetime.date
    :param summary:
    :type summary: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'company': {'key': 'company', 'type': 'MicrosoftGraphCompanyDetail'},
        'description': {'key': 'description', 'type': 'str'},
        'end_month_year': {'key': 'endMonthYear', 'type': 'date'},
        'job_title': {'key': 'jobTitle', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'start_month_year': {'key': 'startMonthYear', 'type': 'date'},
        'summary': {'key': 'summary', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPositionDetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.company = kwargs.get('company', None)
        self.description = kwargs.get('description', None)
        self.end_month_year = kwargs.get('end_month_year', None)
        self.job_title = kwargs.get('job_title', None)
        self.role = kwargs.get('role', None)
        self.start_month_year = kwargs.get('start_month_year', None)
        self.summary = kwargs.get('summary', None)


class MicrosoftGraphPost(MicrosoftGraphOutlookItem):
    """post.

    :param id: Read-only.
    :type id: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param body: itemBody.
    :type body: ~files.models.MicrosoftGraphItemBody
    :param conversation_id: Unique ID of the conversation. Read-only.
    :type conversation_id: str
    :param conversation_thread_id: Unique ID of the conversation thread. Read-only.
    :type conversation_thread_id: str
    :param from_property: recipient.
    :type from_property: ~files.models.MicrosoftGraphRecipient
    :param has_attachments: Indicates whether the post has at least one attachment. This is a
     default property.
    :type has_attachments: bool
    :param importance:  Possible values include: "low", "normal", "high".
    :type importance: str or ~files.models.MicrosoftGraphImportance
    :param new_participants: Conversation participants that were added to the thread as part of
     this post.
    :type new_participants: list[~files.models.MicrosoftGraphRecipient]
    :param received_date_time: Specifies when the post was received. The DateTimeOffset type
     represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type received_date_time: ~datetime.datetime
    :param sender: recipient.
    :type sender: ~files.models.MicrosoftGraphRecipient
    :param attachments: Read-only. Nullable.
    :type attachments: list[~files.models.MicrosoftGraphAttachment]
    :param extensions: The collection of open extensions defined for the post. Read-only. Nullable.
    :type extensions: list[~files.models.MicrosoftGraphExtension]
    :param in_reply_to: post.
    :type in_reply_to: ~files.models.MicrosoftGraphPost
    :param mentions:
    :type mentions: list[~files.models.MicrosoftGraphMention]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the post. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~files.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the post. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~files.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'conversation_id': {'key': 'conversationId', 'type': 'str'},
        'conversation_thread_id': {'key': 'conversationThreadId', 'type': 'str'},
        'from_property': {'key': 'from', 'type': 'MicrosoftGraphRecipient'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'importance': {'key': 'importance', 'type': 'str'},
        'new_participants': {'key': 'newParticipants', 'type': '[MicrosoftGraphRecipient]'},
        'received_date_time': {'key': 'receivedDateTime', 'type': 'iso-8601'},
        'sender': {'key': 'sender', 'type': 'MicrosoftGraphRecipient'},
        'attachments': {'key': 'attachments', 'type': '[MicrosoftGraphAttachment]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphExtension]'},
        'in_reply_to': {'key': 'inReplyTo', 'type': 'MicrosoftGraphPost'},
        'mentions': {'key': 'mentions', 'type': '[MicrosoftGraphMention]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPost, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.body = kwargs.get('body', None)
        self.conversation_id = kwargs.get('conversation_id', None)
        self.conversation_thread_id = kwargs.get('conversation_thread_id', None)
        self.from_property = kwargs.get('from_property', None)
        self.has_attachments = kwargs.get('has_attachments', None)
        self.importance = kwargs.get('importance', None)
        self.new_participants = kwargs.get('new_participants', None)
        self.received_date_time = kwargs.get('received_date_time', None)
        self.sender = kwargs.get('sender', None)
        self.attachments = kwargs.get('attachments', None)
        self.extensions = kwargs.get('extensions', None)
        self.in_reply_to = kwargs.get('in_reply_to', None)
        self.mentions = kwargs.get('mentions', None)
        self.multi_value_extended_properties = kwargs.get('multi_value_extended_properties', None)
        self.single_value_extended_properties = kwargs.get('single_value_extended_properties', None)


class MicrosoftGraphPresence(MicrosoftGraphEntity):
    """presence.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param activity:
    :type activity: str
    :param availability:
    :type availability: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'activity': {'key': 'activity', 'type': 'str'},
        'availability': {'key': 'availability', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPresence, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.activity = kwargs.get('activity', None)
        self.availability = kwargs.get('availability', None)


class MicrosoftGraphProfile(MicrosoftGraphEntity):
    """profile.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account:
    :type account: list[~files.models.MicrosoftGraphUserAccountInformation]
    :param addresses:
    :type addresses: list[~files.models.MicrosoftGraphItemAddress]
    :param anniversaries:
    :type anniversaries: list[~files.models.MicrosoftGraphPersonAnniversary]
    :param awards:
    :type awards: list[~files.models.MicrosoftGraphPersonAward]
    :param certifications:
    :type certifications: list[~files.models.MicrosoftGraphPersonCertification]
    :param educational_activities:
    :type educational_activities: list[~files.models.MicrosoftGraphEducationalActivity]
    :param emails:
    :type emails: list[~files.models.MicrosoftGraphItemEmail]
    :param interests:
    :type interests: list[~files.models.MicrosoftGraphPersonInterest]
    :param languages:
    :type languages: list[~files.models.MicrosoftGraphLanguageProficiency]
    :param names:
    :type names: list[~files.models.MicrosoftGraphPersonName]
    :param notes:
    :type notes: list[~files.models.MicrosoftGraphPersonAnnotation]
    :param patents:
    :type patents: list[~files.models.MicrosoftGraphItemPatent]
    :param phones:
    :type phones: list[~files.models.MicrosoftGraphItemPhone]
    :param positions:
    :type positions: list[~files.models.MicrosoftGraphWorkPosition]
    :param projects:
    :type projects: list[~files.models.MicrosoftGraphProjectParticipation]
    :param publications:
    :type publications: list[~files.models.MicrosoftGraphItemPublication]
    :param skills:
    :type skills: list[~files.models.MicrosoftGraphSkillProficiency]
    :param web_accounts:
    :type web_accounts: list[~files.models.MicrosoftGraphWebAccount]
    :param websites:
    :type websites: list[~files.models.MicrosoftGraphPersonWebsite]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account': {'key': 'account', 'type': '[MicrosoftGraphUserAccountInformation]'},
        'addresses': {'key': 'addresses', 'type': '[MicrosoftGraphItemAddress]'},
        'anniversaries': {'key': 'anniversaries', 'type': '[MicrosoftGraphPersonAnniversary]'},
        'awards': {'key': 'awards', 'type': '[MicrosoftGraphPersonAward]'},
        'certifications': {'key': 'certifications', 'type': '[MicrosoftGraphPersonCertification]'},
        'educational_activities': {'key': 'educationalActivities', 'type': '[MicrosoftGraphEducationalActivity]'},
        'emails': {'key': 'emails', 'type': '[MicrosoftGraphItemEmail]'},
        'interests': {'key': 'interests', 'type': '[MicrosoftGraphPersonInterest]'},
        'languages': {'key': 'languages', 'type': '[MicrosoftGraphLanguageProficiency]'},
        'names': {'key': 'names', 'type': '[MicrosoftGraphPersonName]'},
        'notes': {'key': 'notes', 'type': '[MicrosoftGraphPersonAnnotation]'},
        'patents': {'key': 'patents', 'type': '[MicrosoftGraphItemPatent]'},
        'phones': {'key': 'phones', 'type': '[MicrosoftGraphItemPhone]'},
        'positions': {'key': 'positions', 'type': '[MicrosoftGraphWorkPosition]'},
        'projects': {'key': 'projects', 'type': '[MicrosoftGraphProjectParticipation]'},
        'publications': {'key': 'publications', 'type': '[MicrosoftGraphItemPublication]'},
        'skills': {'key': 'skills', 'type': '[MicrosoftGraphSkillProficiency]'},
        'web_accounts': {'key': 'webAccounts', 'type': '[MicrosoftGraphWebAccount]'},
        'websites': {'key': 'websites', 'type': '[MicrosoftGraphPersonWebsite]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphProfile, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.account = kwargs.get('account', None)
        self.addresses = kwargs.get('addresses', None)
        self.anniversaries = kwargs.get('anniversaries', None)
        self.awards = kwargs.get('awards', None)
        self.certifications = kwargs.get('certifications', None)
        self.educational_activities = kwargs.get('educational_activities', None)
        self.emails = kwargs.get('emails', None)
        self.interests = kwargs.get('interests', None)
        self.languages = kwargs.get('languages', None)
        self.names = kwargs.get('names', None)
        self.notes = kwargs.get('notes', None)
        self.patents = kwargs.get('patents', None)
        self.phones = kwargs.get('phones', None)
        self.positions = kwargs.get('positions', None)
        self.projects = kwargs.get('projects', None)
        self.publications = kwargs.get('publications', None)
        self.skills = kwargs.get('skills', None)
        self.web_accounts = kwargs.get('web_accounts', None)
        self.websites = kwargs.get('websites', None)


class MicrosoftGraphProfilePhoto(MicrosoftGraphEntity):
    """profilePhoto.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param height: The height of the photo. Read-only.
    :type height: int
    :param width: The width of the photo. Read-only.
    :type width: int
    """

    _validation = {
        'height': {'maximum': 2147483647, 'minimum': -2147483648},
        'width': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'height': {'key': 'height', 'type': 'int'},
        'width': {'key': 'width', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphProfilePhoto, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.height = kwargs.get('height', None)
        self.width = kwargs.get('width', None)


class MicrosoftGraphProjectParticipation(MicrosoftGraphItemFacet):
    """projectParticipation.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param categories:
    :type categories: list[str]
    :param client: companyDetail.
    :type client: ~files.models.MicrosoftGraphCompanyDetail
    :param collaboration_tags:
    :type collaboration_tags: list[str]
    :param colleagues:
    :type colleagues: list[~files.models.MicrosoftGraphRelatedPerson]
    :param detail: positionDetail.
    :type detail: ~files.models.MicrosoftGraphPositionDetail
    :param display_name:
    :type display_name: str
    :param sponsors:
    :type sponsors: list[~files.models.MicrosoftGraphRelatedPerson]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'client': {'key': 'client', 'type': 'MicrosoftGraphCompanyDetail'},
        'collaboration_tags': {'key': 'collaborationTags', 'type': '[str]'},
        'colleagues': {'key': 'colleagues', 'type': '[MicrosoftGraphRelatedPerson]'},
        'detail': {'key': 'detail', 'type': 'MicrosoftGraphPositionDetail'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'sponsors': {'key': 'sponsors', 'type': '[MicrosoftGraphRelatedPerson]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphProjectParticipation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.categories = kwargs.get('categories', None)
        self.client = kwargs.get('client', None)
        self.collaboration_tags = kwargs.get('collaboration_tags', None)
        self.colleagues = kwargs.get('colleagues', None)
        self.detail = kwargs.get('detail', None)
        self.display_name = kwargs.get('display_name', None)
        self.sponsors = kwargs.get('sponsors', None)


class MicrosoftGraphProvisionedPlan(msrest.serialization.Model):
    """provisionedPlan.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param capability_status: For example, 'Enabled'.
    :type capability_status: str
    :param provisioning_status: For example, 'Success'.
    :type provisioning_status: str
    :param service: The name of the service; for example, 'AccessControlS2S'.
    :type service: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'capability_status': {'key': 'capabilityStatus', 'type': 'str'},
        'provisioning_status': {'key': 'provisioningStatus', 'type': 'str'},
        'service': {'key': 'service', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphProvisionedPlan, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.capability_status = kwargs.get('capability_status', None)
        self.provisioning_status = kwargs.get('provisioning_status', None)
        self.service = kwargs.get('service', None)


class MicrosoftGraphPublicationFacet(msrest.serialization.Model):
    """publicationFacet.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param level: The state of publication for this document. Either published or checkout. Read-
     only.
    :type level: str
    :param version_id: The unique identifier for the version that is visible to the current caller.
     Read-only.
    :type version_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'level': {'key': 'level', 'type': 'str'},
        'version_id': {'key': 'versionId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPublicationFacet, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.level = kwargs.get('level', None)
        self.version_id = kwargs.get('version_id', None)


class MicrosoftGraphQuota(msrest.serialization.Model):
    """quota.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param deleted: Total space consumed by files in the recycle bin, in bytes. Read-only.
    :type deleted: long
    :param remaining: Total space remaining before reaching the quota limit, in bytes. Read-only.
    :type remaining: long
    :param state: Enumeration value that indicates the state of the storage space. Read-only.
    :type state: str
    :param storage_plan_information: storagePlanInformation.
    :type storage_plan_information: ~files.models.MicrosoftGraphStoragePlanInformation
    :param total: Total allowed storage space, in bytes. Read-only.
    :type total: long
    :param used: Total space used, in bytes. Read-only.
    :type used: long
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'deleted': {'key': 'deleted', 'type': 'long'},
        'remaining': {'key': 'remaining', 'type': 'long'},
        'state': {'key': 'state', 'type': 'str'},
        'storage_plan_information': {'key': 'storagePlanInformation', 'type': 'MicrosoftGraphStoragePlanInformation'},
        'total': {'key': 'total', 'type': 'long'},
        'used': {'key': 'used', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphQuota, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.deleted = kwargs.get('deleted', None)
        self.remaining = kwargs.get('remaining', None)
        self.state = kwargs.get('state', None)
        self.storage_plan_information = kwargs.get('storage_plan_information', None)
        self.total = kwargs.get('total', None)
        self.used = kwargs.get('used', None)


class MicrosoftGraphRankedEmailAddress(msrest.serialization.Model):
    """rankedEmailAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address:
    :type address: str
    :param rank:
    :type rank: float
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'rank': {'key': 'rank', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphRankedEmailAddress, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.rank = kwargs.get('rank', None)


class MicrosoftGraphRecurrencePattern(msrest.serialization.Model):
    """recurrencePattern.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param day_of_month: The day of the month on which the event occurs. Required if type is
     absoluteMonthly or absoluteYearly.
    :type day_of_month: int
    :param days_of_week: A collection of the days of the week on which the event occurs. The
     possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. If type is
     relativeMonthly or relativeYearly, and daysOfWeek specifies more than one day, the event falls
     on the first day that satisfies the pattern.  Required if type is weekly, relativeMonthly, or
     relativeYearly.
    :type days_of_week: list[str or ~files.models.MicrosoftGraphDayOfWeek]
    :param first_day_of_week:  Possible values include: "sunday", "monday", "tuesday", "wednesday",
     "thursday", "friday", "saturday".
    :type first_day_of_week: str or ~files.models.MicrosoftGraphDayOfWeek
    :param index:  Possible values include: "first", "second", "third", "fourth", "last".
    :type index: str or ~files.models.MicrosoftGraphWeekIndex
    :param interval: The number of units between occurrences, where units can be in days, weeks,
     months, or years, depending on the type. Required.
    :type interval: int
    :param month: The month in which the event occurs.  This is a number from 1 to 12.
    :type month: int
    :param type:  Possible values include: "daily", "weekly", "absoluteMonthly", "relativeMonthly",
     "absoluteYearly", "relativeYearly".
    :type type: str or ~files.models.MicrosoftGraphRecurrencePatternType
    """

    _validation = {
        'day_of_month': {'maximum': 2147483647, 'minimum': -2147483648},
        'interval': {'maximum': 2147483647, 'minimum': -2147483648},
        'month': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'day_of_month': {'key': 'dayOfMonth', 'type': 'int'},
        'days_of_week': {'key': 'daysOfWeek', 'type': '[str]'},
        'first_day_of_week': {'key': 'firstDayOfWeek', 'type': 'str'},
        'index': {'key': 'index', 'type': 'str'},
        'interval': {'key': 'interval', 'type': 'int'},
        'month': {'key': 'month', 'type': 'int'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphRecurrencePattern, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.day_of_month = kwargs.get('day_of_month', None)
        self.days_of_week = kwargs.get('days_of_week', None)
        self.first_day_of_week = kwargs.get('first_day_of_week', None)
        self.index = kwargs.get('index', None)
        self.interval = kwargs.get('interval', None)
        self.month = kwargs.get('month', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphRecurrenceRange(msrest.serialization.Model):
    """recurrenceRange.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param end_date: The date to stop applying the recurrence pattern. Depending on the recurrence
     pattern of the event, the last occurrence of the meeting may not be this date. Required if type
     is endDate.
    :type end_date: ~datetime.date
    :param number_of_occurrences: The number of times to repeat the event. Required and must be
     positive if type is numbered.
    :type number_of_occurrences: int
    :param recurrence_time_zone: Time zone for the startDate and endDate properties. Optional. If
     not specified, the time zone of the event is used.
    :type recurrence_time_zone: str
    :param start_date: The date to start applying the recurrence pattern. The first occurrence of
     the meeting may be this date or later, depending on the recurrence pattern of the event. Must
     be the same value as the start property of the recurring event. Required.
    :type start_date: ~datetime.date
    :param type:  Possible values include: "endDate", "noEnd", "numbered".
    :type type: str or ~files.models.MicrosoftGraphRecurrenceRangeType
    """

    _validation = {
        'number_of_occurrences': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'end_date': {'key': 'endDate', 'type': 'date'},
        'number_of_occurrences': {'key': 'numberOfOccurrences', 'type': 'int'},
        'recurrence_time_zone': {'key': 'recurrenceTimeZone', 'type': 'str'},
        'start_date': {'key': 'startDate', 'type': 'date'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphRecurrenceRange, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.end_date = kwargs.get('end_date', None)
        self.number_of_occurrences = kwargs.get('number_of_occurrences', None)
        self.recurrence_time_zone = kwargs.get('recurrence_time_zone', None)
        self.start_date = kwargs.get('start_date', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphRegionalAndLanguageSettings(MicrosoftGraphEntity):
    """regionalAndLanguageSettings.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param authoring_languages:
    :type authoring_languages: list[~files.models.MicrosoftGraphLocaleInfo]
    :param default_display_language: localeInfo.
    :type default_display_language: ~files.models.MicrosoftGraphLocaleInfo
    :param default_regional_format: localeInfo.
    :type default_regional_format: ~files.models.MicrosoftGraphLocaleInfo
    :param default_speech_input_language: localeInfo.
    :type default_speech_input_language: ~files.models.MicrosoftGraphLocaleInfo
    :param default_translation_language: localeInfo.
    :type default_translation_language: ~files.models.MicrosoftGraphLocaleInfo
    :param regional_format_overrides: regionalFormatOverrides.
    :type regional_format_overrides: ~files.models.MicrosoftGraphRegionalFormatOverrides
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'authoring_languages': {'key': 'authoringLanguages', 'type': '[MicrosoftGraphLocaleInfo]'},
        'default_display_language': {'key': 'defaultDisplayLanguage', 'type': 'MicrosoftGraphLocaleInfo'},
        'default_regional_format': {'key': 'defaultRegionalFormat', 'type': 'MicrosoftGraphLocaleInfo'},
        'default_speech_input_language': {'key': 'defaultSpeechInputLanguage', 'type': 'MicrosoftGraphLocaleInfo'},
        'default_translation_language': {'key': 'defaultTranslationLanguage', 'type': 'MicrosoftGraphLocaleInfo'},
        'regional_format_overrides': {'key': 'regionalFormatOverrides', 'type': 'MicrosoftGraphRegionalFormatOverrides'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphRegionalAndLanguageSettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.authoring_languages = kwargs.get('authoring_languages', None)
        self.default_display_language = kwargs.get('default_display_language', None)
        self.default_regional_format = kwargs.get('default_regional_format', None)
        self.default_speech_input_language = kwargs.get('default_speech_input_language', None)
        self.default_translation_language = kwargs.get('default_translation_language', None)
        self.regional_format_overrides = kwargs.get('regional_format_overrides', None)


class MicrosoftGraphRegionalFormatOverrides(msrest.serialization.Model):
    """regionalFormatOverrides.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param calendar:
    :type calendar: str
    :param first_day_of_week:
    :type first_day_of_week: str
    :param long_date_format:
    :type long_date_format: str
    :param long_time_format:
    :type long_time_format: str
    :param short_date_format:
    :type short_date_format: str
    :param short_time_format:
    :type short_time_format: str
    :param time_zone:
    :type time_zone: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'calendar': {'key': 'calendar', 'type': 'str'},
        'first_day_of_week': {'key': 'firstDayOfWeek', 'type': 'str'},
        'long_date_format': {'key': 'longDateFormat', 'type': 'str'},
        'long_time_format': {'key': 'longTimeFormat', 'type': 'str'},
        'short_date_format': {'key': 'shortDateFormat', 'type': 'str'},
        'short_time_format': {'key': 'shortTimeFormat', 'type': 'str'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphRegionalFormatOverrides, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.calendar = kwargs.get('calendar', None)
        self.first_day_of_week = kwargs.get('first_day_of_week', None)
        self.long_date_format = kwargs.get('long_date_format', None)
        self.long_time_format = kwargs.get('long_time_format', None)
        self.short_date_format = kwargs.get('short_date_format', None)
        self.short_time_format = kwargs.get('short_time_format', None)
        self.time_zone = kwargs.get('time_zone', None)


class MicrosoftGraphRelatedPerson(msrest.serialization.Model):
    """relatedPerson.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param relationship:  Possible values include: "manager", "colleague", "directReport",
     "dotLineReport", "assistant", "dotLineManager", "alternateContact", "friend", "spouse",
     "sibling", "child", "parent", "sponsor", "emergencyContact", "other", "unknownFutureValue".
    :type relationship: str or ~files.models.MicrosoftGraphPersonRelationship
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'relationship': {'key': 'relationship', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphRelatedPerson, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.relationship = kwargs.get('relationship', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class MicrosoftGraphRemoteItem(msrest.serialization.Model):
    """remoteItem.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param file: file.
    :type file: ~files.models.MicrosoftGraphFile
    :param file_system_info: fileSystemInfo.
    :type file_system_info: ~files.models.MicrosoftGraphFileSystemInfo
    :param folder: folder.
    :type folder: ~files.models.MicrosoftGraphFolder
    :param id: Unique identifier for the remote item in its drive. Read-only.
    :type id: str
    :param image: image.
    :type image: ~files.models.MicrosoftGraphImage
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: Optional. Filename of the remote item. Read-only.
    :type name: str
    :param package: package.
    :type package: ~files.models.MicrosoftGraphPackage
    :param parent_reference: itemReference.
    :type parent_reference: ~files.models.MicrosoftGraphItemReference
    :param shared: shared.
    :type shared: ~files.models.MicrosoftGraphShared
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param size: Size of the remote item. Read-only.
    :type size: long
    :param special_folder: specialFolder.
    :type special_folder: ~files.models.MicrosoftGraphSpecialFolder
    :param video: video.
    :type video: ~files.models.MicrosoftGraphVideo
    :param web_dav_url: DAV compatible URL for the item.
    :type web_dav_url: str
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'file': {'key': 'file', 'type': 'MicrosoftGraphFile'},
        'file_system_info': {'key': 'fileSystemInfo', 'type': 'MicrosoftGraphFileSystemInfo'},
        'folder': {'key': 'folder', 'type': 'MicrosoftGraphFolder'},
        'id': {'key': 'id', 'type': 'str'},
        'image': {'key': 'image', 'type': 'MicrosoftGraphImage'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'package': {'key': 'package', 'type': 'MicrosoftGraphPackage'},
        'parent_reference': {'key': 'parentReference', 'type': 'MicrosoftGraphItemReference'},
        'shared': {'key': 'shared', 'type': 'MicrosoftGraphShared'},
        'sharepoint_ids': {'key': 'sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'size': {'key': 'size', 'type': 'long'},
        'special_folder': {'key': 'specialFolder', 'type': 'MicrosoftGraphSpecialFolder'},
        'video': {'key': 'video', 'type': 'MicrosoftGraphVideo'},
        'web_dav_url': {'key': 'webDavUrl', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphRemoteItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.file = kwargs.get('file', None)
        self.file_system_info = kwargs.get('file_system_info', None)
        self.folder = kwargs.get('folder', None)
        self.id = kwargs.get('id', None)
        self.image = kwargs.get('image', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.name = kwargs.get('name', None)
        self.package = kwargs.get('package', None)
        self.parent_reference = kwargs.get('parent_reference', None)
        self.shared = kwargs.get('shared', None)
        self.sharepoint_ids = kwargs.get('sharepoint_ids', None)
        self.size = kwargs.get('size', None)
        self.special_folder = kwargs.get('special_folder', None)
        self.video = kwargs.get('video', None)
        self.web_dav_url = kwargs.get('web_dav_url', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphRenameAction(msrest.serialization.Model):
    """renameAction.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param new_name: The new name of the item.
    :type new_name: str
    :param old_name: The previous name of the item.
    :type old_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'new_name': {'key': 'newName', 'type': 'str'},
        'old_name': {'key': 'oldName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphRenameAction, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.new_name = kwargs.get('new_name', None)
        self.old_name = kwargs.get('old_name', None)


class MicrosoftGraphRequest(MicrosoftGraphEntity):
    """request.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param approval: approval.
    :type approval: ~files.models.MicrosoftGraphApproval
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'approval': {'key': 'approval', 'type': 'MicrosoftGraphApproval'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphRequest, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.approval = kwargs.get('approval', None)


class MicrosoftGraphResourceReference(msrest.serialization.Model):
    """resourceReference.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: The item's unique identifier.
    :type id: str
    :param type: A string value that can be used to classify the item, such as
     'microsoft.graph.driveItem'.
    :type type: str
    :param web_url: A URL leading to the referenced item.
    :type web_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphResourceReference, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)
        self.type = kwargs.get('type', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphResourceSpecificPermissionGrant(MicrosoftGraphDirectoryObject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param client_app_id:
    :type client_app_id: str
    :param client_id:
    :type client_id: str
    :param permission:
    :type permission: str
    :param permission_type:
    :type permission_type: str
    :param resource_app_id:
    :type resource_app_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'client_app_id': {'key': 'clientAppId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
        'permission': {'key': 'permission', 'type': 'str'},
        'permission_type': {'key': 'permissionType', 'type': 'str'},
        'resource_app_id': {'key': 'resourceAppId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphResourceSpecificPermissionGrant, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.client_app_id = kwargs.get('client_app_id', None)
        self.client_id = kwargs.get('client_id', None)
        self.permission = kwargs.get('permission', None)
        self.permission_type = kwargs.get('permission_type', None)
        self.resource_app_id = kwargs.get('resource_app_id', None)


class MicrosoftGraphResourceVisualization(msrest.serialization.Model):
    """resourceVisualization.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param container_display_name: A string describing where the item is stored. For example, the
     name of a SharePoint site or the user name identifying the owner of the OneDrive storing the
     item.
    :type container_display_name: str
    :param container_type: Can be used for filtering by the type of container in which the file is
     stored. Such as Site or OneDriveBusiness.
    :type container_type: str
    :param container_web_url: A path leading to the folder in which the item is stored.
    :type container_web_url: str
    :param media_type: The item's media type. Can be used for filtering for a specific type of file
     based on supported IANA Media Mime Types. Note that not all Media Mime Types are supported.
    :type media_type: str
    :param preview_image_url: A URL leading to the preview image for the item.
    :type preview_image_url: str
    :param preview_text: A preview text for the item.
    :type preview_text: str
    :param title: The item's title text.
    :type title: str
    :param type: The item's media type. Can be used for filtering for a specific file based on a
     specific type. See below for supported types.
    :type type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'container_display_name': {'key': 'containerDisplayName', 'type': 'str'},
        'container_type': {'key': 'containerType', 'type': 'str'},
        'container_web_url': {'key': 'containerWebUrl', 'type': 'str'},
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'preview_image_url': {'key': 'previewImageUrl', 'type': 'str'},
        'preview_text': {'key': 'previewText', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphResourceVisualization, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.container_display_name = kwargs.get('container_display_name', None)
        self.container_type = kwargs.get('container_type', None)
        self.container_web_url = kwargs.get('container_web_url', None)
        self.media_type = kwargs.get('media_type', None)
        self.preview_image_url = kwargs.get('preview_image_url', None)
        self.preview_text = kwargs.get('preview_text', None)
        self.title = kwargs.get('title', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphResponseStatus(msrest.serialization.Model):
    """responseStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param response:  Possible values include: "none", "organizer", "tentativelyAccepted",
     "accepted", "declined", "notResponded".
    :type response: str or ~files.models.MicrosoftGraphResponseType
    :param time: The date and time that the response was returned. It uses ISO 8601 format and is
     always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this:
     '2014-01-01T00:00:00Z'.
    :type time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'response': {'key': 'response', 'type': 'str'},
        'time': {'key': 'time', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphResponseStatus, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.response = kwargs.get('response', None)
        self.time = kwargs.get('time', None)


class MicrosoftGraphSchedule(MicrosoftGraphEntity):
    """schedule.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param enabled: Indicates whether the schedule is enabled for the team. Required.
    :type enabled: bool
    :param offer_shift_requests_enabled: Indicates whether offer shift requests are enabled for the
     schedule.
    :type offer_shift_requests_enabled: bool
    :param open_shifts_enabled: Indicates whether open shifts are enabled for the schedule.
    :type open_shifts_enabled: bool
    :param provision_status:  Possible values include: "NotStarted", "Running", "Completed",
     "Failed".
    :type provision_status: str or ~files.models.MicrosoftGraphOperationStatus
    :param provision_status_code: Additional information about why schedule provisioning failed.
    :type provision_status_code: str
    :param swap_shifts_requests_enabled: Indicates whether swap shifts requests are enabled for the
     schedule.
    :type swap_shifts_requests_enabled: bool
    :param time_clock_enabled: Indicates whether time clock is enabled for the schedule.
    :type time_clock_enabled: bool
    :param time_clock_settings: timeClockSettings.
    :type time_clock_settings: ~files.models.MicrosoftGraphTimeClockSettings
    :param time_off_requests_enabled: Indicates whether time off requests are enabled for the
     schedule.
    :type time_off_requests_enabled: bool
    :param time_zone: Indicates the time zone of the schedule team using tz database format.
     Required.
    :type time_zone: str
    :param workforce_integration_ids:
    :type workforce_integration_ids: list[str]
    :param offer_shift_requests:
    :type offer_shift_requests: list[~files.models.MicrosoftGraphOfferShiftRequest]
    :param open_shift_change_requests:
    :type open_shift_change_requests: list[~files.models.MicrosoftGraphOpenShiftChangeRequest]
    :param open_shifts:
    :type open_shifts: list[~files.models.MicrosoftGraphOpenShift]
    :param scheduling_groups: The logical grouping of users in the schedule (usually by role).
    :type scheduling_groups: list[~files.models.MicrosoftGraphSchedulingGroup]
    :param shifts: The shifts in the schedule.
    :type shifts: list[~files.models.MicrosoftGraphShift]
    :param swap_shifts_change_requests:
    :type swap_shifts_change_requests: list[~files.models.MicrosoftGraphSwapShiftsChangeRequest]
    :param time_cards:
    :type time_cards: list[~files.models.MicrosoftGraphTimeCard]
    :param time_off_reasons: The set of reasons for a time off in the schedule.
    :type time_off_reasons: list[~files.models.MicrosoftGraphTimeOffReason]
    :param time_off_requests:
    :type time_off_requests: list[~files.models.MicrosoftGraphTimeOffRequest]
    :param times_off: The instances of times off in the schedule.
    :type times_off: list[~files.models.MicrosoftGraphTimeOff]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'offer_shift_requests_enabled': {'key': 'offerShiftRequestsEnabled', 'type': 'bool'},
        'open_shifts_enabled': {'key': 'openShiftsEnabled', 'type': 'bool'},
        'provision_status': {'key': 'provisionStatus', 'type': 'str'},
        'provision_status_code': {'key': 'provisionStatusCode', 'type': 'str'},
        'swap_shifts_requests_enabled': {'key': 'swapShiftsRequestsEnabled', 'type': 'bool'},
        'time_clock_enabled': {'key': 'timeClockEnabled', 'type': 'bool'},
        'time_clock_settings': {'key': 'timeClockSettings', 'type': 'MicrosoftGraphTimeClockSettings'},
        'time_off_requests_enabled': {'key': 'timeOffRequestsEnabled', 'type': 'bool'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
        'workforce_integration_ids': {'key': 'workforceIntegrationIds', 'type': '[str]'},
        'offer_shift_requests': {'key': 'offerShiftRequests', 'type': '[MicrosoftGraphOfferShiftRequest]'},
        'open_shift_change_requests': {'key': 'openShiftChangeRequests', 'type': '[MicrosoftGraphOpenShiftChangeRequest]'},
        'open_shifts': {'key': 'openShifts', 'type': '[MicrosoftGraphOpenShift]'},
        'scheduling_groups': {'key': 'schedulingGroups', 'type': '[MicrosoftGraphSchedulingGroup]'},
        'shifts': {'key': 'shifts', 'type': '[MicrosoftGraphShift]'},
        'swap_shifts_change_requests': {'key': 'swapShiftsChangeRequests', 'type': '[MicrosoftGraphSwapShiftsChangeRequest]'},
        'time_cards': {'key': 'timeCards', 'type': '[MicrosoftGraphTimeCard]'},
        'time_off_reasons': {'key': 'timeOffReasons', 'type': '[MicrosoftGraphTimeOffReason]'},
        'time_off_requests': {'key': 'timeOffRequests', 'type': '[MicrosoftGraphTimeOffRequest]'},
        'times_off': {'key': 'timesOff', 'type': '[MicrosoftGraphTimeOff]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSchedule, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.enabled = kwargs.get('enabled', None)
        self.offer_shift_requests_enabled = kwargs.get('offer_shift_requests_enabled', None)
        self.open_shifts_enabled = kwargs.get('open_shifts_enabled', None)
        self.provision_status = kwargs.get('provision_status', None)
        self.provision_status_code = kwargs.get('provision_status_code', None)
        self.swap_shifts_requests_enabled = kwargs.get('swap_shifts_requests_enabled', None)
        self.time_clock_enabled = kwargs.get('time_clock_enabled', None)
        self.time_clock_settings = kwargs.get('time_clock_settings', None)
        self.time_off_requests_enabled = kwargs.get('time_off_requests_enabled', None)
        self.time_zone = kwargs.get('time_zone', None)
        self.workforce_integration_ids = kwargs.get('workforce_integration_ids', None)
        self.offer_shift_requests = kwargs.get('offer_shift_requests', None)
        self.open_shift_change_requests = kwargs.get('open_shift_change_requests', None)
        self.open_shifts = kwargs.get('open_shifts', None)
        self.scheduling_groups = kwargs.get('scheduling_groups', None)
        self.shifts = kwargs.get('shifts', None)
        self.swap_shifts_change_requests = kwargs.get('swap_shifts_change_requests', None)
        self.time_cards = kwargs.get('time_cards', None)
        self.time_off_reasons = kwargs.get('time_off_reasons', None)
        self.time_off_requests = kwargs.get('time_off_requests', None)
        self.times_off = kwargs.get('times_off', None)


class MicrosoftGraphSchedulingGroup(MicrosoftGraphChangeTrackedEntity):
    """schedulingGroup.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The display name for the schedulingGroup. Required.
    :type display_name: str
    :param is_active: Indicates whether the schedulingGroup can be used when creating new entities
     or updating existing ones. Required.
    :type is_active: bool
    :param user_ids: The list of user IDs that are a member of the schedulingGroup. Required.
    :type user_ids: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_active': {'key': 'isActive', 'type': 'bool'},
        'user_ids': {'key': 'userIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSchedulingGroup, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.is_active = kwargs.get('is_active', None)
        self.user_ids = kwargs.get('user_ids', None)


class MicrosoftGraphScopedRoleMembership(MicrosoftGraphEntity):
    """scopedRoleMembership.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param administrative_unit_id: Unique identifier for the administrative unit that the directory
     role is scoped to.
    :type administrative_unit_id: str
    :param role_id: Unique identifier for the directory role that the member is in.
    :type role_id: str
    :param role_member_info: identity.
    :type role_member_info: ~files.models.MicrosoftGraphIdentity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'administrative_unit_id': {'key': 'administrativeUnitId', 'type': 'str'},
        'role_id': {'key': 'roleId', 'type': 'str'},
        'role_member_info': {'key': 'roleMemberInfo', 'type': 'MicrosoftGraphIdentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphScopedRoleMembership, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.administrative_unit_id = kwargs.get('administrative_unit_id', None)
        self.role_id = kwargs.get('role_id', None)
        self.role_member_info = kwargs.get('role_member_info', None)


class MicrosoftGraphSearchResult(msrest.serialization.Model):
    """searchResult.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param on_click_telemetry_url: A callback URL that can be used to record telemetry information.
     The application should issue a GET on this URL if the user interacts with this item to improve
     the quality of results.
    :type on_click_telemetry_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'on_click_telemetry_url': {'key': 'onClickTelemetryUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSearchResult, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.on_click_telemetry_url = kwargs.get('on_click_telemetry_url', None)


class MicrosoftGraphSectionGroup(MicrosoftGraphOnenoteEntityHierarchyModel):
    """sectionGroup.

    :param id: Read-only.
    :type id: str
    :param self_property: The endpoint where you can get details about the page. Read-only.
    :type self_property: str
    :param created_date_time: The date and time when the page was created. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type created_date_time: ~datetime.datetime
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param display_name: The name of the notebook.
    :type display_name: str
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The date and time when the notebook was last modified. The
     timestamp represents date and time information using ISO 8601 format and is always in UTC time.
     For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-
     only.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param section_groups_url: The URL for the sectionGroups navigation property, which returns all
     the section groups in the section group. Read-only.
    :type section_groups_url: str
    :param sections_url: The URL for the sections navigation property, which returns all the
     sections in the section group. Read-only.
    :type sections_url: str
    :param parent_notebook: notebook.
    :type parent_notebook: ~files.models.MicrosoftGraphNotebook
    :param parent_section_group: sectionGroup.
    :type parent_section_group: ~files.models.MicrosoftGraphSectionGroup
    :param section_groups: The section groups in the section. Read-only. Nullable.
    :type section_groups: list[~files.models.MicrosoftGraphSectionGroup]
    :param sections: The sections in the section group. Read-only. Nullable.
    :type sections: list[~files.models.MicrosoftGraphOnenoteSection]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'self_property': {'key': 'self', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'section_groups_url': {'key': 'sectionGroupsUrl', 'type': 'str'},
        'sections_url': {'key': 'sectionsUrl', 'type': 'str'},
        'parent_notebook': {'key': 'parentNotebook', 'type': 'MicrosoftGraphNotebook'},
        'parent_section_group': {'key': 'parentSectionGroup', 'type': 'MicrosoftGraphSectionGroup'},
        'section_groups': {'key': 'sectionGroups', 'type': '[MicrosoftGraphSectionGroup]'},
        'sections': {'key': 'sections', 'type': '[MicrosoftGraphOnenoteSection]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSectionGroup, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.section_groups_url = kwargs.get('section_groups_url', None)
        self.sections_url = kwargs.get('sections_url', None)
        self.parent_notebook = kwargs.get('parent_notebook', None)
        self.parent_section_group = kwargs.get('parent_section_group', None)
        self.section_groups = kwargs.get('section_groups', None)
        self.sections = kwargs.get('sections', None)


class MicrosoftGraphSectionLinks(msrest.serialization.Model):
    """sectionLinks.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param one_note_client_url: externalLink.
    :type one_note_client_url: ~files.models.MicrosoftGraphExternalLink
    :param one_note_web_url: externalLink.
    :type one_note_web_url: ~files.models.MicrosoftGraphExternalLink
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'one_note_client_url': {'key': 'oneNoteClientUrl', 'type': 'MicrosoftGraphExternalLink'},
        'one_note_web_url': {'key': 'oneNoteWebUrl', 'type': 'MicrosoftGraphExternalLink'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSectionLinks, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.one_note_client_url = kwargs.get('one_note_client_url', None)
        self.one_note_web_url = kwargs.get('one_note_web_url', None)


class MicrosoftGraphSecurityBaselineContributingPolicy(msrest.serialization.Model):
    """The security baseline compliance state of a setting for a device.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: Name of the policy.
    :type display_name: str
    :param source_id: Unique identifier of the policy.
    :type source_id: str
    :param source_type:  Possible values include: "deviceConfiguration", "deviceIntent".
    :type source_type: str or ~files.models.MicrosoftGraphSecurityBaselinePolicySourceType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'source_id': {'key': 'sourceId', 'type': 'str'},
        'source_type': {'key': 'sourceType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSecurityBaselineContributingPolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.source_id = kwargs.get('source_id', None)
        self.source_type = kwargs.get('source_type', None)


class MicrosoftGraphSecurityBaselineSettingState(MicrosoftGraphEntity):
    """The security baseline compliance state of a setting for a device.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param contributing_policies: The policies that contribute to this setting instance.
    :type contributing_policies:
     list[~files.models.MicrosoftGraphSecurityBaselineContributingPolicy]
    :param error_code: The error code if the setting is in error state.
    :type error_code: str
    :param setting_category_id: The setting category id which this setting belongs to.
    :type setting_category_id: str
    :param setting_category_name: The setting category name which this setting belongs to.
    :type setting_category_name: str
    :param setting_id: The setting id guid.
    :type setting_id: str
    :param setting_name: The setting name that is being reported.
    :type setting_name: str
    :param source_policies: The policies that contribute to this setting instance.
    :type source_policies: list[~files.models.MicrosoftGraphSettingSource]
    :param state:  Possible values include: "unknown", "secure", "notApplicable", "notSecure",
     "error", "conflict".
    :type state: str or ~files.models.MicrosoftGraphSecurityBaselineComplianceState
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'contributing_policies': {'key': 'contributingPolicies', 'type': '[MicrosoftGraphSecurityBaselineContributingPolicy]'},
        'error_code': {'key': 'errorCode', 'type': 'str'},
        'setting_category_id': {'key': 'settingCategoryId', 'type': 'str'},
        'setting_category_name': {'key': 'settingCategoryName', 'type': 'str'},
        'setting_id': {'key': 'settingId', 'type': 'str'},
        'setting_name': {'key': 'settingName', 'type': 'str'},
        'source_policies': {'key': 'sourcePolicies', 'type': '[MicrosoftGraphSettingSource]'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSecurityBaselineSettingState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.contributing_policies = kwargs.get('contributing_policies', None)
        self.error_code = kwargs.get('error_code', None)
        self.setting_category_id = kwargs.get('setting_category_id', None)
        self.setting_category_name = kwargs.get('setting_category_name', None)
        self.setting_id = kwargs.get('setting_id', None)
        self.setting_name = kwargs.get('setting_name', None)
        self.source_policies = kwargs.get('source_policies', None)
        self.state = kwargs.get('state', None)


class MicrosoftGraphSecurityBaselineState(MicrosoftGraphEntity):
    """Security baseline state for a device.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The display name of the security baseline.
    :type display_name: str
    :param security_baseline_template_id: The security baseline template id.
    :type security_baseline_template_id: str
    :param state:  Possible values include: "unknown", "secure", "notApplicable", "notSecure",
     "error", "conflict".
    :type state: str or ~files.models.MicrosoftGraphSecurityBaselineComplianceState
    :param user_principal_name: User Principal Name.
    :type user_principal_name: str
    :param setting_states: The security baseline state for different settings for a device.
    :type setting_states: list[~files.models.MicrosoftGraphSecurityBaselineSettingState]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'security_baseline_template_id': {'key': 'securityBaselineTemplateId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'setting_states': {'key': 'settingStates', 'type': '[MicrosoftGraphSecurityBaselineSettingState]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSecurityBaselineState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.security_baseline_template_id = kwargs.get('security_baseline_template_id', None)
        self.state = kwargs.get('state', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)
        self.setting_states = kwargs.get('setting_states', None)


class MicrosoftGraphSecurityQuestionAuthenticationMethod(MicrosoftGraphAuthenticationMethod):
    """securityQuestionAuthenticationMethod.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSecurityQuestionAuthenticationMethod, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphSensitivityLabel(MicrosoftGraphEntity):
    """sensitivityLabel.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param applicable_to:  Possible values include: "email", "site", "unifiedGroup",
     "unknownFutureValue".
    :type applicable_to: str or ~files.models.MicrosoftGraphSensitivityLabelTarget
    :param application_mode:  Possible values include: "manual", "automatic", "recommended".
    :type application_mode: str or ~files.models.MicrosoftGraphApplicationMode
    :param assigned_policies:
    :type assigned_policies: list[~files.models.MicrosoftGraphLabelPolicy]
    :param auto_labeling: autoLabeling.
    :type auto_labeling: ~files.models.MicrosoftGraphAutoLabeling
    :param description:
    :type description: str
    :param display_name:
    :type display_name: str
    :param is_default:
    :type is_default: bool
    :param is_endpoint_protection_enabled:
    :type is_endpoint_protection_enabled: bool
    :param label_actions:
    :type label_actions: list[~files.models.MicrosoftGraphLabelActionBase]
    :param name:
    :type name: str
    :param priority:
    :type priority: int
    :param tool_tip:
    :type tool_tip: str
    :param sublabels:
    :type sublabels: list[~files.models.MicrosoftGraphSensitivityLabel]
    """

    _validation = {
        'priority': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'applicable_to': {'key': 'applicableTo', 'type': 'str'},
        'application_mode': {'key': 'applicationMode', 'type': 'str'},
        'assigned_policies': {'key': 'assignedPolicies', 'type': '[MicrosoftGraphLabelPolicy]'},
        'auto_labeling': {'key': 'autoLabeling', 'type': 'MicrosoftGraphAutoLabeling'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'is_endpoint_protection_enabled': {'key': 'isEndpointProtectionEnabled', 'type': 'bool'},
        'label_actions': {'key': 'labelActions', 'type': '[MicrosoftGraphLabelActionBase]'},
        'name': {'key': 'name', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'tool_tip': {'key': 'toolTip', 'type': 'str'},
        'sublabels': {'key': 'sublabels', 'type': '[MicrosoftGraphSensitivityLabel]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSensitivityLabel, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.applicable_to = kwargs.get('applicable_to', None)
        self.application_mode = kwargs.get('application_mode', None)
        self.assigned_policies = kwargs.get('assigned_policies', None)
        self.auto_labeling = kwargs.get('auto_labeling', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.is_default = kwargs.get('is_default', None)
        self.is_endpoint_protection_enabled = kwargs.get('is_endpoint_protection_enabled', None)
        self.label_actions = kwargs.get('label_actions', None)
        self.name = kwargs.get('name', None)
        self.priority = kwargs.get('priority', None)
        self.tool_tip = kwargs.get('tool_tip', None)
        self.sublabels = kwargs.get('sublabels', None)


class MicrosoftGraphSensitivityPolicySettings(MicrosoftGraphEntity):
    """sensitivityPolicySettings.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param applicable_to:  Possible values include: "email", "site", "unifiedGroup",
     "unknownFutureValue".
    :type applicable_to: str or ~files.models.MicrosoftGraphSensitivityLabelTarget
    :param downgrade_sensitivity_requires_justification:
    :type downgrade_sensitivity_requires_justification: bool
    :param help_web_url:
    :type help_web_url: str
    :param is_mandatory:
    :type is_mandatory: bool
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'applicable_to': {'key': 'applicableTo', 'type': 'str'},
        'downgrade_sensitivity_requires_justification': {'key': 'downgradeSensitivityRequiresJustification', 'type': 'bool'},
        'help_web_url': {'key': 'helpWebUrl', 'type': 'str'},
        'is_mandatory': {'key': 'isMandatory', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSensitivityPolicySettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.applicable_to = kwargs.get('applicable_to', None)
        self.downgrade_sensitivity_requires_justification = kwargs.get('downgrade_sensitivity_requires_justification', None)
        self.help_web_url = kwargs.get('help_web_url', None)
        self.is_mandatory = kwargs.get('is_mandatory', None)


class MicrosoftGraphServiceInformation(msrest.serialization.Model):
    """serviceInformation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name:
    :type name: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphServiceInformation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphServicePlanInfo(msrest.serialization.Model):
    """servicePlanInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param applies_to: The object the service plan can be assigned to. Possible values:'User' -
     service plan can be assigned to individual users.'Company' - service plan can be assigned to
     the entire tenant.
    :type applies_to: str
    :param provisioning_status: The provisioning status of the service plan. Possible
     values:'Success' - Service is fully provisioned.'Disabled' - Service has been
     disabled.'PendingInput' - Service is not yet provisioned; awaiting service
     confirmation.'PendingActivation' - Service is provisioned but requires explicit activation by
     administrator (for example, Intune_O365 service plan)'PendingProvisioning' - Microsoft has
     added a new service to the product SKU and it has not been activated in the tenant, yet.
    :type provisioning_status: str
    :param service_plan_id: The unique identifier of the service plan.
    :type service_plan_id: str
    :param service_plan_name: The name of the service plan.
    :type service_plan_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'applies_to': {'key': 'appliesTo', 'type': 'str'},
        'provisioning_status': {'key': 'provisioningStatus', 'type': 'str'},
        'service_plan_id': {'key': 'servicePlanId', 'type': 'str'},
        'service_plan_name': {'key': 'servicePlanName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphServicePlanInfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.applies_to = kwargs.get('applies_to', None)
        self.provisioning_status = kwargs.get('provisioning_status', None)
        self.service_plan_id = kwargs.get('service_plan_id', None)
        self.service_plan_name = kwargs.get('service_plan_name', None)


class MicrosoftGraphSettings(msrest.serialization.Model):
    """settings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param has_graph_mailbox:
    :type has_graph_mailbox: bool
    :param has_license:
    :type has_license: bool
    :param has_opted_out:
    :type has_opted_out: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'has_graph_mailbox': {'key': 'hasGraphMailbox', 'type': 'bool'},
        'has_license': {'key': 'hasLicense', 'type': 'bool'},
        'has_opted_out': {'key': 'hasOptedOut', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.has_graph_mailbox = kwargs.get('has_graph_mailbox', None)
        self.has_license = kwargs.get('has_license', None)
        self.has_opted_out = kwargs.get('has_opted_out', None)


class MicrosoftGraphSettingSource(msrest.serialization.Model):
    """settingSource.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: Not yet documented.
    :type display_name: str
    :param id: Not yet documented.
    :type id: str
    :param source_type:  Possible values include: "deviceConfiguration", "deviceIntent".
    :type source_type: str or ~files.models.MicrosoftGraphSettingSourceType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'source_type': {'key': 'sourceType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSettingSource, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.id = kwargs.get('id', None)
        self.source_type = kwargs.get('source_type', None)


class MicrosoftGraphSettingValue(msrest.serialization.Model):
    """settingValue.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Name of the setting (as defined by the groupSettingTemplate).
    :type name: str
    :param value: Value of the setting.
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSettingValue, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class MicrosoftGraphShareAction(msrest.serialization.Model):
    """shareAction.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param recipients: The identities the item was shared with in this action.
    :type recipients: list[~files.models.MicrosoftGraphIdentitySet]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'recipients': {'key': 'recipients', 'type': '[MicrosoftGraphIdentitySet]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphShareAction, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.recipients = kwargs.get('recipients', None)


class MicrosoftGraphShared(msrest.serialization.Model):
    """shared.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param owner: identitySet.
    :type owner: ~files.models.MicrosoftGraphIdentitySet
    :param scope: Indicates the scope of how the item is shared: anonymous, organization, or users.
     Read-only.
    :type scope: str
    :param shared_by: identitySet.
    :type shared_by: ~files.models.MicrosoftGraphIdentitySet
    :param shared_date_time: The UTC date and time when the item was shared. Read-only.
    :type shared_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'owner': {'key': 'owner', 'type': 'MicrosoftGraphIdentitySet'},
        'scope': {'key': 'scope', 'type': 'str'},
        'shared_by': {'key': 'sharedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'shared_date_time': {'key': 'sharedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphShared, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.owner = kwargs.get('owner', None)
        self.scope = kwargs.get('scope', None)
        self.shared_by = kwargs.get('shared_by', None)
        self.shared_date_time = kwargs.get('shared_date_time', None)


class MicrosoftGraphSharedAppleDeviceUser(msrest.serialization.Model):
    """sharedAppleDeviceUser.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param data_quota: Data quota.
    :type data_quota: long
    :param data_to_sync: Data to sync.
    :type data_to_sync: bool
    :param data_used: Data quota.
    :type data_used: long
    :param user_principal_name: User name.
    :type user_principal_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'data_quota': {'key': 'dataQuota', 'type': 'long'},
        'data_to_sync': {'key': 'dataToSync', 'type': 'bool'},
        'data_used': {'key': 'dataUsed', 'type': 'long'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSharedAppleDeviceUser, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.data_quota = kwargs.get('data_quota', None)
        self.data_to_sync = kwargs.get('data_to_sync', None)
        self.data_used = kwargs.get('data_used', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class MicrosoftGraphSharedDriveItem(MicrosoftGraphBaseItem):
    """sharedDriveItem.

    :param id: Read-only.
    :type id: str
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~files.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~files.models.MicrosoftGraphUser
    :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
    :type drive_id: str
    :param drive_type: Identifies the type of drive. See [drive][] resource for values.
    :type drive_type: str
    :param id_parent_reference_id: Unique identifier of the item in the drive. Read-only.
    :type id_parent_reference_id: str
    :param name_parent_reference_name: The name of the item being referenced. Read-only.
    :type name_parent_reference_name: str
    :param path: Path that can be used to navigate to the item. Read-only.
    :type path: str
    :param share_id: A unique identifier for a shared resource that can be accessed via the
     [Shares][] API.
    :type share_id: str
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param site_id:
    :type site_id: str
    :param application_last_modified_by_application: identity.
    :type application_last_modified_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_last_modified_by_device: identity.
    :type device_last_modified_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_last_modified_by_user: identity.
    :type user_last_modified_by_user: ~files.models.MicrosoftGraphIdentity
    :param application_created_by_application: identity.
    :type application_created_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_created_by_device: identity.
    :type device_created_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_created_by_user: identity.
    :type user_created_by_user: ~files.models.MicrosoftGraphIdentity
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param drive_item: driveItem.
    :type drive_item: ~files.models.MicrosoftGraphDriveItem
    :param items: All driveItems contained in the sharing root. This collection cannot be
     enumerated.
    :type items: list[~files.models.MicrosoftGraphDriveItem]
    :param list_item: listItem.
    :type list_item: ~files.models.MicrosoftGraphListItem
    :param root: driveItem.
    :type root: ~files.models.MicrosoftGraphDriveItem
    :param site: site.
    :type site: ~files.models.MicrosoftGraphSite
    :param id_permission_id: Read-only.
    :type id_permission_id: str
    :param expiration_date_time: A format of yyyy-MM-ddTHH:mm:ssZ of DateTimeOffset indicates the
     expiration time of the permission. DateTime.MinValue indicates there is no expiration set for
     this permission. Optional.
    :type expiration_date_time: ~datetime.datetime
    :param granted_to_identities: For link type permissions, the details of the users to whom
     permission was granted. Read-only.
    :type granted_to_identities: list[~files.models.MicrosoftGraphIdentitySet]
    :param has_password: This indicates whether password is set for this permission, it's only
     showing in response. Optional and Read-only and for OneDrive Personal only.
    :type has_password: bool
    :param roles: The type of permission, e.g. read. See below for the full list of roles. Read-
     only.
    :type roles: list[str]
    :param share_id_permission_share_id: A unique token that can be used to access this shared item
     via the **shares** API. Read-only.
    :type share_id_permission_share_id: str
    :param application_permission_link_application: identity.
    :type application_permission_link_application: ~files.models.MicrosoftGraphIdentity
    :param configurator_url:
    :type configurator_url: str
    :param prevents_download: If true then the user can only use this link to view the item on the
     web, and cannot use it to download the contents of the item. Only for OneDrive for Business and
     SharePoint.
    :type prevents_download: bool
    :param scope: The scope of the link represented by this permission. Value anonymous indicates
     the link is usable by anyone, organization indicates the link is only usable for users signed
     into the same tenant.
    :type scope: str
    :param type: The type of the link created.
    :type type: str
    :param web_html: For embed links, this property contains the HTML code for an :code:`<iframe>`
     element that will embed the item in a webpage.
    :type web_html: str
    :param web_url_permission_link_web_url: A URL that opens the item in the browser on the
     OneDrive website.
    :type web_url_permission_link_web_url: str
    :param email: The email address provided for the recipient of the sharing invitation. Read-
     only.
    :type email: str
    :param invited_by: identitySet.
    :type invited_by: ~files.models.MicrosoftGraphIdentitySet
    :param redeemed_by:
    :type redeemed_by: str
    :param sign_in_required: If true the recipient of the invitation needs to sign in in order to
     access the shared item. Read-only.
    :type sign_in_required: bool
    :param drive_id_permission_inherited_from_drive_id: Unique identifier of the drive instance
     that contains the item. Read-only.
    :type drive_id_permission_inherited_from_drive_id: str
    :param drive_type_permission_inherited_from_drive_type: Identifies the type of drive. See
     [drive][] resource for values.
    :type drive_type_permission_inherited_from_drive_type: str
    :param id_permission_inherited_from_id: Unique identifier of the item in the drive. Read-only.
    :type id_permission_inherited_from_id: str
    :param name_permission_inherited_from_name: The name of the item being referenced. Read-only.
    :type name_permission_inherited_from_name: str
    :param path_permission_inherited_from_path: Path that can be used to navigate to the item.
     Read-only.
    :type path_permission_inherited_from_path: str
    :param share_id_permission_inherited_from_share_id: A unique identifier for a shared resource
     that can be accessed via the [Shares][] API.
    :type share_id_permission_inherited_from_share_id: str
    :param sharepoint_ids_permission_inherited_from_sharepoint_ids: sharepointIds.
    :type sharepoint_ids_permission_inherited_from_sharepoint_ids:
     ~files.models.MicrosoftGraphSharepointIds
    :param site_id_permission_inherited_from_site_id:
    :type site_id_permission_inherited_from_site_id: str
    :param application_permission_granted_to_application: identity.
    :type application_permission_granted_to_application: ~files.models.MicrosoftGraphIdentity
    :param device_permission_granted_to_device: identity.
    :type device_permission_granted_to_device: ~files.models.MicrosoftGraphIdentity
    :param user_permission_granted_to_user: identity.
    :type user_permission_granted_to_user: ~files.models.MicrosoftGraphIdentity
    :param id_list_id: Read-only.
    :type id_list_id: str
    :param created_date_time_list_created_date_time: Date and time of item creation. Read-only.
    :type created_date_time_list_created_date_time: ~datetime.datetime
    :param description_list_description: Provides a user-visible description of the item. Optional.
    :type description_list_description: str
    :param e_tag_list_e_tag: ETag for the item. Read-only.
    :type e_tag_list_e_tag: str
    :param last_modified_date_time_list_last_modified_date_time: Date and time the item was last
     modified. Read-only.
    :type last_modified_date_time_list_last_modified_date_time: ~datetime.datetime
    :param name_list_name: The name of the item. Read-write.
    :type name_list_name: str
    :param web_url_list_web_url: URL that displays the resource in the browser. Read-only.
    :type web_url_list_web_url: str
    :param created_by_user_list_created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user_list_created_by_user: ~files.models.MicrosoftGraphUser
    :param last_modified_by_user_list_last_modified_by_user: Represents an Azure Active Directory
     user object.
    :type last_modified_by_user_list_last_modified_by_user: ~files.models.MicrosoftGraphUser
    :param drive_id_list_parent_reference_drive_id: Unique identifier of the drive instance that
     contains the item. Read-only.
    :type drive_id_list_parent_reference_drive_id: str
    :param drive_type_list_parent_reference_drive_type: Identifies the type of drive. See [drive][]
     resource for values.
    :type drive_type_list_parent_reference_drive_type: str
    :param id_list_parent_reference_id: Unique identifier of the item in the drive. Read-only.
    :type id_list_parent_reference_id: str
    :param name_list_parent_reference_name: The name of the item being referenced. Read-only.
    :type name_list_parent_reference_name: str
    :param path_list_parent_reference_path: Path that can be used to navigate to the item. Read-
     only.
    :type path_list_parent_reference_path: str
    :param share_id_list_parent_reference_share_id: A unique identifier for a shared resource that
     can be accessed via the [Shares][] API.
    :type share_id_list_parent_reference_share_id: str
    :param sharepoint_ids_list_parent_reference_sharepoint_ids: sharepointIds.
    :type sharepoint_ids_list_parent_reference_sharepoint_ids:
     ~files.models.MicrosoftGraphSharepointIds
    :param site_id_list_parent_reference_site_id:
    :type site_id_list_parent_reference_site_id: str
    :param application_list_last_modified_by_application: identity.
    :type application_list_last_modified_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_list_last_modified_by_device: identity.
    :type device_list_last_modified_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_list_last_modified_by_user: identity.
    :type user_list_last_modified_by_user: ~files.models.MicrosoftGraphIdentity
    :param application_list_created_by_application: identity.
    :type application_list_created_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_list_created_by_device: identity.
    :type device_list_created_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_list_created_by_user: identity.
    :type user_list_created_by_user: ~files.models.MicrosoftGraphIdentity
    :param display_name: The displayable title of the list.
    :type display_name: str
    :param list: listInfo.
    :type list: ~files.models.MicrosoftGraphListInfo
    :param sharepoint_ids_list_sharepoint_ids: sharepointIds.
    :type sharepoint_ids_list_sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param system: systemFacet.
    :type system: dict[str, object]
    :param activities:
    :type activities: list[~files.models.MicrosoftGraphItemActivityOld]
    :param columns: The collection of field definitions for this list.
    :type columns: list[~files.models.MicrosoftGraphColumnDefinition]
    :param content_types: The collection of content types present in this list.
    :type content_types: list[~files.models.MicrosoftGraphContentType]
    :param drive: drive.
    :type drive: ~files.models.MicrosoftGraphDrive
    :param items_list_items: All items contained in the list.
    :type items_list_items: list[~files.models.MicrosoftGraphListItem]
    :param subscriptions: The set of subscriptions on the list.
    :type subscriptions: list[~files.models.MicrosoftGraphSubscription]
    :param application_owner_application: identity.
    :type application_owner_application: ~files.models.MicrosoftGraphIdentity
    :param device_owner_device: identity.
    :type device_owner_device: ~files.models.MicrosoftGraphIdentity
    :param user_owner_user: identity.
    :type user_owner_user: ~files.models.MicrosoftGraphIdentity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'drive_id': {'key': 'parentReference.driveId', 'type': 'str'},
        'drive_type': {'key': 'parentReference.driveType', 'type': 'str'},
        'id_parent_reference_id': {'key': 'parentReference.id', 'type': 'str'},
        'name_parent_reference_name': {'key': 'parentReference.name', 'type': 'str'},
        'path': {'key': 'parentReference.path', 'type': 'str'},
        'share_id': {'key': 'parentReference.shareId', 'type': 'str'},
        'sharepoint_ids': {'key': 'parentReference.sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'site_id': {'key': 'parentReference.siteId', 'type': 'str'},
        'application_last_modified_by_application': {'key': 'lastModifiedBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_last_modified_by_device': {'key': 'lastModifiedBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_last_modified_by_user': {'key': 'lastModifiedBy.user', 'type': 'MicrosoftGraphIdentity'},
        'application_created_by_application': {'key': 'createdBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_created_by_device': {'key': 'createdBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_created_by_user': {'key': 'createdBy.user', 'type': 'MicrosoftGraphIdentity'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'drive_item': {'key': 'driveItem', 'type': 'MicrosoftGraphDriveItem'},
        'items': {'key': 'items', 'type': '[MicrosoftGraphDriveItem]'},
        'list_item': {'key': 'listItem', 'type': 'MicrosoftGraphListItem'},
        'root': {'key': 'root', 'type': 'MicrosoftGraphDriveItem'},
        'site': {'key': 'site', 'type': 'MicrosoftGraphSite'},
        'id_permission_id': {'key': 'permission.id', 'type': 'str'},
        'expiration_date_time': {'key': 'permission.expirationDateTime', 'type': 'iso-8601'},
        'granted_to_identities': {'key': 'permission.grantedToIdentities', 'type': '[MicrosoftGraphIdentitySet]'},
        'has_password': {'key': 'permission.hasPassword', 'type': 'bool'},
        'roles': {'key': 'permission.roles', 'type': '[str]'},
        'share_id_permission_share_id': {'key': 'permission.shareId', 'type': 'str'},
        'application_permission_link_application': {'key': 'permission.link.application', 'type': 'MicrosoftGraphIdentity'},
        'configurator_url': {'key': 'permission.link.configuratorUrl', 'type': 'str'},
        'prevents_download': {'key': 'permission.link.preventsDownload', 'type': 'bool'},
        'scope': {'key': 'permission.link.scope', 'type': 'str'},
        'type': {'key': 'permission.link.type', 'type': 'str'},
        'web_html': {'key': 'permission.link.webHtml', 'type': 'str'},
        'web_url_permission_link_web_url': {'key': 'permission.link.webUrl', 'type': 'str'},
        'email': {'key': 'permission.invitation.email', 'type': 'str'},
        'invited_by': {'key': 'permission.invitation.invitedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'redeemed_by': {'key': 'permission.invitation.redeemedBy', 'type': 'str'},
        'sign_in_required': {'key': 'permission.invitation.signInRequired', 'type': 'bool'},
        'drive_id_permission_inherited_from_drive_id': {'key': 'permission.inheritedFrom.driveId', 'type': 'str'},
        'drive_type_permission_inherited_from_drive_type': {'key': 'permission.inheritedFrom.driveType', 'type': 'str'},
        'id_permission_inherited_from_id': {'key': 'permission.inheritedFrom.id', 'type': 'str'},
        'name_permission_inherited_from_name': {'key': 'permission.inheritedFrom.name', 'type': 'str'},
        'path_permission_inherited_from_path': {'key': 'permission.inheritedFrom.path', 'type': 'str'},
        'share_id_permission_inherited_from_share_id': {'key': 'permission.inheritedFrom.shareId', 'type': 'str'},
        'sharepoint_ids_permission_inherited_from_sharepoint_ids': {'key': 'permission.inheritedFrom.sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'site_id_permission_inherited_from_site_id': {'key': 'permission.inheritedFrom.siteId', 'type': 'str'},
        'application_permission_granted_to_application': {'key': 'permission.grantedTo.application', 'type': 'MicrosoftGraphIdentity'},
        'device_permission_granted_to_device': {'key': 'permission.grantedTo.device', 'type': 'MicrosoftGraphIdentity'},
        'user_permission_granted_to_user': {'key': 'permission.grantedTo.user', 'type': 'MicrosoftGraphIdentity'},
        'id_list_id': {'key': 'list.id', 'type': 'str'},
        'created_date_time_list_created_date_time': {'key': 'list.createdDateTime', 'type': 'iso-8601'},
        'description_list_description': {'key': 'list.description', 'type': 'str'},
        'e_tag_list_e_tag': {'key': 'list.eTag', 'type': 'str'},
        'last_modified_date_time_list_last_modified_date_time': {'key': 'list.lastModifiedDateTime', 'type': 'iso-8601'},
        'name_list_name': {'key': 'list.name', 'type': 'str'},
        'web_url_list_web_url': {'key': 'list.webUrl', 'type': 'str'},
        'created_by_user_list_created_by_user': {'key': 'list.createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user_list_last_modified_by_user': {'key': 'list.lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'drive_id_list_parent_reference_drive_id': {'key': 'list.parentReference.driveId', 'type': 'str'},
        'drive_type_list_parent_reference_drive_type': {'key': 'list.parentReference.driveType', 'type': 'str'},
        'id_list_parent_reference_id': {'key': 'list.parentReference.id', 'type': 'str'},
        'name_list_parent_reference_name': {'key': 'list.parentReference.name', 'type': 'str'},
        'path_list_parent_reference_path': {'key': 'list.parentReference.path', 'type': 'str'},
        'share_id_list_parent_reference_share_id': {'key': 'list.parentReference.shareId', 'type': 'str'},
        'sharepoint_ids_list_parent_reference_sharepoint_ids': {'key': 'list.parentReference.sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'site_id_list_parent_reference_site_id': {'key': 'list.parentReference.siteId', 'type': 'str'},
        'application_list_last_modified_by_application': {'key': 'list.lastModifiedBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_list_last_modified_by_device': {'key': 'list.lastModifiedBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_list_last_modified_by_user': {'key': 'list.lastModifiedBy.user', 'type': 'MicrosoftGraphIdentity'},
        'application_list_created_by_application': {'key': 'list.createdBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_list_created_by_device': {'key': 'list.createdBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_list_created_by_user': {'key': 'list.createdBy.user', 'type': 'MicrosoftGraphIdentity'},
        'display_name': {'key': 'list.displayName', 'type': 'str'},
        'list': {'key': 'list.list', 'type': 'MicrosoftGraphListInfo'},
        'sharepoint_ids_list_sharepoint_ids': {'key': 'list.sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'system': {'key': 'list.system', 'type': '{object}'},
        'activities': {'key': 'list.activities', 'type': '[MicrosoftGraphItemActivityOld]'},
        'columns': {'key': 'list.columns', 'type': '[MicrosoftGraphColumnDefinition]'},
        'content_types': {'key': 'list.contentTypes', 'type': '[MicrosoftGraphContentType]'},
        'drive': {'key': 'list.drive', 'type': 'MicrosoftGraphDrive'},
        'items_list_items': {'key': 'list.items', 'type': '[MicrosoftGraphListItem]'},
        'subscriptions': {'key': 'list.subscriptions', 'type': '[MicrosoftGraphSubscription]'},
        'application_owner_application': {'key': 'owner.application', 'type': 'MicrosoftGraphIdentity'},
        'device_owner_device': {'key': 'owner.device', 'type': 'MicrosoftGraphIdentity'},
        'user_owner_user': {'key': 'owner.user', 'type': 'MicrosoftGraphIdentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSharedDriveItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.drive_item = kwargs.get('drive_item', None)
        self.items = kwargs.get('items', None)
        self.list_item = kwargs.get('list_item', None)
        self.root = kwargs.get('root', None)
        self.site = kwargs.get('site', None)
        self.id_permission_id = kwargs.get('id_permission_id', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.granted_to_identities = kwargs.get('granted_to_identities', None)
        self.has_password = kwargs.get('has_password', None)
        self.roles = kwargs.get('roles', None)
        self.share_id_permission_share_id = kwargs.get('share_id_permission_share_id', None)
        self.application_permission_link_application = kwargs.get('application_permission_link_application', None)
        self.configurator_url = kwargs.get('configurator_url', None)
        self.prevents_download = kwargs.get('prevents_download', None)
        self.scope = kwargs.get('scope', None)
        self.type = kwargs.get('type', None)
        self.web_html = kwargs.get('web_html', None)
        self.web_url_permission_link_web_url = kwargs.get('web_url_permission_link_web_url', None)
        self.email = kwargs.get('email', None)
        self.invited_by = kwargs.get('invited_by', None)
        self.redeemed_by = kwargs.get('redeemed_by', None)
        self.sign_in_required = kwargs.get('sign_in_required', None)
        self.drive_id_permission_inherited_from_drive_id = kwargs.get('drive_id_permission_inherited_from_drive_id', None)
        self.drive_type_permission_inherited_from_drive_type = kwargs.get('drive_type_permission_inherited_from_drive_type', None)
        self.id_permission_inherited_from_id = kwargs.get('id_permission_inherited_from_id', None)
        self.name_permission_inherited_from_name = kwargs.get('name_permission_inherited_from_name', None)
        self.path_permission_inherited_from_path = kwargs.get('path_permission_inherited_from_path', None)
        self.share_id_permission_inherited_from_share_id = kwargs.get('share_id_permission_inherited_from_share_id', None)
        self.sharepoint_ids_permission_inherited_from_sharepoint_ids = kwargs.get('sharepoint_ids_permission_inherited_from_sharepoint_ids', None)
        self.site_id_permission_inherited_from_site_id = kwargs.get('site_id_permission_inherited_from_site_id', None)
        self.application_permission_granted_to_application = kwargs.get('application_permission_granted_to_application', None)
        self.device_permission_granted_to_device = kwargs.get('device_permission_granted_to_device', None)
        self.user_permission_granted_to_user = kwargs.get('user_permission_granted_to_user', None)
        self.id_list_id = kwargs.get('id_list_id', None)
        self.created_date_time_list_created_date_time = kwargs.get('created_date_time_list_created_date_time', None)
        self.description_list_description = kwargs.get('description_list_description', None)
        self.e_tag_list_e_tag = kwargs.get('e_tag_list_e_tag', None)
        self.last_modified_date_time_list_last_modified_date_time = kwargs.get('last_modified_date_time_list_last_modified_date_time', None)
        self.name_list_name = kwargs.get('name_list_name', None)
        self.web_url_list_web_url = kwargs.get('web_url_list_web_url', None)
        self.created_by_user_list_created_by_user = kwargs.get('created_by_user_list_created_by_user', None)
        self.last_modified_by_user_list_last_modified_by_user = kwargs.get('last_modified_by_user_list_last_modified_by_user', None)
        self.drive_id_list_parent_reference_drive_id = kwargs.get('drive_id_list_parent_reference_drive_id', None)
        self.drive_type_list_parent_reference_drive_type = kwargs.get('drive_type_list_parent_reference_drive_type', None)
        self.id_list_parent_reference_id = kwargs.get('id_list_parent_reference_id', None)
        self.name_list_parent_reference_name = kwargs.get('name_list_parent_reference_name', None)
        self.path_list_parent_reference_path = kwargs.get('path_list_parent_reference_path', None)
        self.share_id_list_parent_reference_share_id = kwargs.get('share_id_list_parent_reference_share_id', None)
        self.sharepoint_ids_list_parent_reference_sharepoint_ids = kwargs.get('sharepoint_ids_list_parent_reference_sharepoint_ids', None)
        self.site_id_list_parent_reference_site_id = kwargs.get('site_id_list_parent_reference_site_id', None)
        self.application_list_last_modified_by_application = kwargs.get('application_list_last_modified_by_application', None)
        self.device_list_last_modified_by_device = kwargs.get('device_list_last_modified_by_device', None)
        self.user_list_last_modified_by_user = kwargs.get('user_list_last_modified_by_user', None)
        self.application_list_created_by_application = kwargs.get('application_list_created_by_application', None)
        self.device_list_created_by_device = kwargs.get('device_list_created_by_device', None)
        self.user_list_created_by_user = kwargs.get('user_list_created_by_user', None)
        self.display_name = kwargs.get('display_name', None)
        self.list = kwargs.get('list', None)
        self.sharepoint_ids_list_sharepoint_ids = kwargs.get('sharepoint_ids_list_sharepoint_ids', None)
        self.system = kwargs.get('system', None)
        self.activities = kwargs.get('activities', None)
        self.columns = kwargs.get('columns', None)
        self.content_types = kwargs.get('content_types', None)
        self.drive = kwargs.get('drive', None)
        self.items_list_items = kwargs.get('items_list_items', None)
        self.subscriptions = kwargs.get('subscriptions', None)
        self.application_owner_application = kwargs.get('application_owner_application', None)
        self.device_owner_device = kwargs.get('device_owner_device', None)
        self.user_owner_user = kwargs.get('user_owner_user', None)


class MicrosoftGraphSharedInsight(MicrosoftGraphEntity):
    """sharedInsight.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_shared: sharingDetail.
    :type last_shared: ~files.models.MicrosoftGraphSharingDetail
    :param resource_reference: resourceReference.
    :type resource_reference: ~files.models.MicrosoftGraphResourceReference
    :param resource_visualization: resourceVisualization.
    :type resource_visualization: ~files.models.MicrosoftGraphResourceVisualization
    :param sharing_history:
    :type sharing_history: list[~files.models.MicrosoftGraphSharingDetail]
    :param last_shared_method: entity.
    :type last_shared_method: ~files.models.MicrosoftGraphEntity
    :param resource: entity.
    :type resource: ~files.models.MicrosoftGraphEntity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_shared': {'key': 'lastShared', 'type': 'MicrosoftGraphSharingDetail'},
        'resource_reference': {'key': 'resourceReference', 'type': 'MicrosoftGraphResourceReference'},
        'resource_visualization': {'key': 'resourceVisualization', 'type': 'MicrosoftGraphResourceVisualization'},
        'sharing_history': {'key': 'sharingHistory', 'type': '[MicrosoftGraphSharingDetail]'},
        'last_shared_method': {'key': 'lastSharedMethod', 'type': 'MicrosoftGraphEntity'},
        'resource': {'key': 'resource', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSharedInsight, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.last_shared = kwargs.get('last_shared', None)
        self.resource_reference = kwargs.get('resource_reference', None)
        self.resource_visualization = kwargs.get('resource_visualization', None)
        self.sharing_history = kwargs.get('sharing_history', None)
        self.last_shared_method = kwargs.get('last_shared_method', None)
        self.resource = kwargs.get('resource', None)


class MicrosoftGraphSharepointIds(msrest.serialization.Model):
    """sharepointIds.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param list_id: The unique identifier (guid) for the item's list in SharePoint.
    :type list_id: str
    :param list_item_id: An integer identifier for the item within the containing list.
    :type list_item_id: str
    :param list_item_unique_id: The unique identifier (guid) for the item within OneDrive for
     Business or a SharePoint site.
    :type list_item_unique_id: str
    :param site_id: The unique identifier (guid) for the item's site collection (SPSite).
    :type site_id: str
    :param site_url: The SharePoint URL for the site that contains the item.
    :type site_url: str
    :param tenant_id: The unique identifier (guid) for the tenancy.
    :type tenant_id: str
    :param web_id: The unique identifier (guid) for the item's site (SPWeb).
    :type web_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'list_id': {'key': 'listId', 'type': 'str'},
        'list_item_id': {'key': 'listItemId', 'type': 'str'},
        'list_item_unique_id': {'key': 'listItemUniqueId', 'type': 'str'},
        'site_id': {'key': 'siteId', 'type': 'str'},
        'site_url': {'key': 'siteUrl', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'web_id': {'key': 'webId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSharepointIds, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.list_id = kwargs.get('list_id', None)
        self.list_item_id = kwargs.get('list_item_id', None)
        self.list_item_unique_id = kwargs.get('list_item_unique_id', None)
        self.site_id = kwargs.get('site_id', None)
        self.site_url = kwargs.get('site_url', None)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.web_id = kwargs.get('web_id', None)


class MicrosoftGraphSharingDetail(msrest.serialization.Model):
    """sharingDetail.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param shared_by: insightIdentity.
    :type shared_by: ~files.models.MicrosoftGraphInsightIdentity
    :param shared_date_time: The date and time the file was last shared. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: 2014-01-01T00:00:00Z. Read-only.
    :type shared_date_time: ~datetime.datetime
    :param sharing_reference: resourceReference.
    :type sharing_reference: ~files.models.MicrosoftGraphResourceReference
    :param sharing_subject: The subject with which the document was shared.
    :type sharing_subject: str
    :param sharing_type: Determines the way the document was shared, can be by a 'Link',
     'Attachment', 'Group', 'Site'.
    :type sharing_type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'shared_by': {'key': 'sharedBy', 'type': 'MicrosoftGraphInsightIdentity'},
        'shared_date_time': {'key': 'sharedDateTime', 'type': 'iso-8601'},
        'sharing_reference': {'key': 'sharingReference', 'type': 'MicrosoftGraphResourceReference'},
        'sharing_subject': {'key': 'sharingSubject', 'type': 'str'},
        'sharing_type': {'key': 'sharingType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSharingDetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.shared_by = kwargs.get('shared_by', None)
        self.shared_date_time = kwargs.get('shared_date_time', None)
        self.sharing_reference = kwargs.get('sharing_reference', None)
        self.sharing_subject = kwargs.get('sharing_subject', None)
        self.sharing_type = kwargs.get('sharing_type', None)


class MicrosoftGraphSharingInvitation(msrest.serialization.Model):
    """sharingInvitation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param email: The email address provided for the recipient of the sharing invitation. Read-
     only.
    :type email: str
    :param invited_by: identitySet.
    :type invited_by: ~files.models.MicrosoftGraphIdentitySet
    :param redeemed_by:
    :type redeemed_by: str
    :param sign_in_required: If true the recipient of the invitation needs to sign in in order to
     access the shared item. Read-only.
    :type sign_in_required: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'email': {'key': 'email', 'type': 'str'},
        'invited_by': {'key': 'invitedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'redeemed_by': {'key': 'redeemedBy', 'type': 'str'},
        'sign_in_required': {'key': 'signInRequired', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSharingInvitation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.email = kwargs.get('email', None)
        self.invited_by = kwargs.get('invited_by', None)
        self.redeemed_by = kwargs.get('redeemed_by', None)
        self.sign_in_required = kwargs.get('sign_in_required', None)


class MicrosoftGraphSharingLink(msrest.serialization.Model):
    """sharingLink.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param application: identity.
    :type application: ~files.models.MicrosoftGraphIdentity
    :param configurator_url:
    :type configurator_url: str
    :param prevents_download: If true then the user can only use this link to view the item on the
     web, and cannot use it to download the contents of the item. Only for OneDrive for Business and
     SharePoint.
    :type prevents_download: bool
    :param scope: The scope of the link represented by this permission. Value anonymous indicates
     the link is usable by anyone, organization indicates the link is only usable for users signed
     into the same tenant.
    :type scope: str
    :param type: The type of the link created.
    :type type: str
    :param web_html: For embed links, this property contains the HTML code for an :code:`<iframe>`
     element that will embed the item in a webpage.
    :type web_html: str
    :param web_url: A URL that opens the item in the browser on the OneDrive website.
    :type web_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'application': {'key': 'application', 'type': 'MicrosoftGraphIdentity'},
        'configurator_url': {'key': 'configuratorUrl', 'type': 'str'},
        'prevents_download': {'key': 'preventsDownload', 'type': 'bool'},
        'scope': {'key': 'scope', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'web_html': {'key': 'webHtml', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSharingLink, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.application = kwargs.get('application', None)
        self.configurator_url = kwargs.get('configurator_url', None)
        self.prevents_download = kwargs.get('prevents_download', None)
        self.scope = kwargs.get('scope', None)
        self.type = kwargs.get('type', None)
        self.web_html = kwargs.get('web_html', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphShift(MicrosoftGraphChangeTrackedEntity):
    """shift.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param draft_shift: shiftItem.
    :type draft_shift: ~files.models.MicrosoftGraphShiftItem
    :param is_staged_for_deletion:
    :type is_staged_for_deletion: bool
    :param scheduling_group_id: ID of the scheduling group the shift is part of. Required.
    :type scheduling_group_id: str
    :param shared_shift: shiftItem.
    :type shared_shift: ~files.models.MicrosoftGraphShiftItem
    :param user_id: ID of the user assigned to the shift. Required.
    :type user_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'draft_shift': {'key': 'draftShift', 'type': 'MicrosoftGraphShiftItem'},
        'is_staged_for_deletion': {'key': 'isStagedForDeletion', 'type': 'bool'},
        'scheduling_group_id': {'key': 'schedulingGroupId', 'type': 'str'},
        'shared_shift': {'key': 'sharedShift', 'type': 'MicrosoftGraphShiftItem'},
        'user_id': {'key': 'userId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphShift, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.draft_shift = kwargs.get('draft_shift', None)
        self.is_staged_for_deletion = kwargs.get('is_staged_for_deletion', None)
        self.scheduling_group_id = kwargs.get('scheduling_group_id', None)
        self.shared_shift = kwargs.get('shared_shift', None)
        self.user_id = kwargs.get('user_id', None)


class MicrosoftGraphShiftActivity(msrest.serialization.Model):
    """shiftActivity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Customer defined code for the shiftActivity. Required.
    :type code: str
    :param display_name: The name of the shiftActivity. Required.
    :type display_name: str
    :param end_date_time: The end date and time for the shiftActivity. The Timestamp type
     represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Required.
    :type end_date_time: ~datetime.datetime
    :param is_paid: Indicates whether the microsoft.graph.user should be paid for the activity
     during their shift. Required.
    :type is_paid: bool
    :param start_date_time: The start date and time for the shiftActivity. The Timestamp type
     represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Required.
    :type start_date_time: ~datetime.datetime
    :param theme:  Possible values include: "white", "blue", "green", "purple", "pink", "yellow",
     "gray", "darkBlue", "darkGreen", "darkPurple", "darkPink", "darkYellow", "unknownFutureValue".
    :type theme: str or ~files.models.MicrosoftGraphScheduleEntityTheme
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'is_paid': {'key': 'isPaid', 'type': 'bool'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'theme': {'key': 'theme', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphShiftActivity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs.get('code', None)
        self.display_name = kwargs.get('display_name', None)
        self.end_date_time = kwargs.get('end_date_time', None)
        self.is_paid = kwargs.get('is_paid', None)
        self.start_date_time = kwargs.get('start_date_time', None)
        self.theme = kwargs.get('theme', None)


class MicrosoftGraphShiftAvailability(msrest.serialization.Model):
    """shiftAvailability.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param recurrence: patternedRecurrence.
    :type recurrence: ~files.models.MicrosoftGraphPatternedRecurrence
    :param time_slots: The time slot(s) preferred by the user.
    :type time_slots: list[~files.models.MicrosoftGraphTimeRange]
    :param time_zone: Specifies the time zone for the indicated time.
    :type time_zone: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'recurrence': {'key': 'recurrence', 'type': 'MicrosoftGraphPatternedRecurrence'},
        'time_slots': {'key': 'timeSlots', 'type': '[MicrosoftGraphTimeRange]'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphShiftAvailability, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.recurrence = kwargs.get('recurrence', None)
        self.time_slots = kwargs.get('time_slots', None)
        self.time_zone = kwargs.get('time_zone', None)


class MicrosoftGraphShiftPreferences(MicrosoftGraphChangeTrackedEntity):
    """shiftPreferences.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param availability: Availability of the user to be scheduled for work and its recurrence
     pattern.
    :type availability: list[~files.models.MicrosoftGraphShiftAvailability]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'availability': {'key': 'availability', 'type': '[MicrosoftGraphShiftAvailability]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphShiftPreferences, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.availability = kwargs.get('availability', None)


class MicrosoftGraphSignInActivity(msrest.serialization.Model):
    """signInActivity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_sign_in_date_time:
    :type last_sign_in_date_time: ~datetime.datetime
    :param last_sign_in_request_id:
    :type last_sign_in_request_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_sign_in_date_time': {'key': 'lastSignInDateTime', 'type': 'iso-8601'},
        'last_sign_in_request_id': {'key': 'lastSignInRequestId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSignInActivity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.last_sign_in_date_time = kwargs.get('last_sign_in_date_time', None)
        self.last_sign_in_request_id = kwargs.get('last_sign_in_request_id', None)


class MicrosoftGraphSingleValueLegacyExtendedProperty(MicrosoftGraphEntity):
    """singleValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value: A property value.
    :type value: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSingleValueLegacyExtendedProperty, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)


class MicrosoftGraphSite(MicrosoftGraphBaseItem):
    """site.

    :param id: Read-only.
    :type id: str
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~files.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~files.models.MicrosoftGraphUser
    :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
    :type drive_id: str
    :param drive_type: Identifies the type of drive. See [drive][] resource for values.
    :type drive_type: str
    :param id_parent_reference_id: Unique identifier of the item in the drive. Read-only.
    :type id_parent_reference_id: str
    :param name_parent_reference_name: The name of the item being referenced. Read-only.
    :type name_parent_reference_name: str
    :param path: Path that can be used to navigate to the item. Read-only.
    :type path: str
    :param share_id: A unique identifier for a shared resource that can be accessed via the
     [Shares][] API.
    :type share_id: str
    :param site_id:
    :type site_id: str
    :param application_last_modified_by_application: identity.
    :type application_last_modified_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_last_modified_by_device: identity.
    :type device_last_modified_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_last_modified_by_user: identity.
    :type user_last_modified_by_user: ~files.models.MicrosoftGraphIdentity
    :param application_created_by_application: identity.
    :type application_created_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_created_by_device: identity.
    :type device_created_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_created_by_user: identity.
    :type user_created_by_user: ~files.models.MicrosoftGraphIdentity
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The full title for the site. Read-only.
    :type display_name: str
    :param root: root.
    :type root: dict[str, object]
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param analytics: itemAnalytics.
    :type analytics: ~files.models.MicrosoftGraphItemAnalytics
    :param columns: The collection of column definitions reusable across lists under this site.
    :type columns: list[~files.models.MicrosoftGraphColumnDefinition]
    :param content_types: The collection of content types defined for this site.
    :type content_types: list[~files.models.MicrosoftGraphContentType]
    :param drive: drive.
    :type drive: ~files.models.MicrosoftGraphDrive
    :param drives: The collection of drives (document libraries) under this site.
    :type drives: list[~files.models.MicrosoftGraphDrive]
    :param items: Used to address any item contained in this site. This collection cannot be
     enumerated.
    :type items: list[~files.models.MicrosoftGraphBaseItem]
    :param lists: The collection of lists under this site.
    :type lists: list[~files.models.MicrosoftGraphList]
    :param pages:
    :type pages: list[~files.models.MicrosoftGraphSitePage]
    :param sites: The collection of the sub-sites under this site.
    :type sites: list[~files.models.MicrosoftGraphSite]
    :param id_onenote_id: Read-only.
    :type id_onenote_id: str
    :param notebooks: The collection of OneNote notebooks that are owned by the user or group.
     Read-only. Nullable.
    :type notebooks: list[~files.models.MicrosoftGraphNotebook]
    :param operations: The status of OneNote operations. Getting an operations collection is not
     supported, but you can get the status of long-running operations if the Operation-Location
     header is returned in the response. Read-only. Nullable.
    :type operations: list[~files.models.MicrosoftGraphOnenoteOperation]
    :param pages_onenote_pages: The pages in all OneNote notebooks that are owned by the user or
     group.  Read-only. Nullable.
    :type pages_onenote_pages: list[~files.models.MicrosoftGraphOnenotePage]
    :param resources: The image and other file resources in OneNote pages. Getting a resources
     collection is not supported, but you can get the binary content of a specific resource. Read-
     only. Nullable.
    :type resources: list[~files.models.MicrosoftGraphOnenoteResource]
    :param section_groups: The section groups in all OneNote notebooks that are owned by the user
     or group.  Read-only. Nullable.
    :type section_groups: list[~files.models.MicrosoftGraphSectionGroup]
    :param sections: The sections in all OneNote notebooks that are owned by the user or group.
     Read-only. Nullable.
    :type sections: list[~files.models.MicrosoftGraphOnenoteSection]
    :param data_location_code: The geographic region code for where this site collection resides.
     Read-only.
    :type data_location_code: str
    :param hostname: The hostname for the site collection. Read-only.
    :type hostname: str
    :param root_site_collection_root: root.
    :type root_site_collection_root: dict[str, object]
    :param state: Represents the state of the deleted item.
    :type state: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'drive_id': {'key': 'parentReference.driveId', 'type': 'str'},
        'drive_type': {'key': 'parentReference.driveType', 'type': 'str'},
        'id_parent_reference_id': {'key': 'parentReference.id', 'type': 'str'},
        'name_parent_reference_name': {'key': 'parentReference.name', 'type': 'str'},
        'path': {'key': 'parentReference.path', 'type': 'str'},
        'share_id': {'key': 'parentReference.shareId', 'type': 'str'},
        'site_id': {'key': 'parentReference.siteId', 'type': 'str'},
        'application_last_modified_by_application': {'key': 'lastModifiedBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_last_modified_by_device': {'key': 'lastModifiedBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_last_modified_by_user': {'key': 'lastModifiedBy.user', 'type': 'MicrosoftGraphIdentity'},
        'application_created_by_application': {'key': 'createdBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_created_by_device': {'key': 'createdBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_created_by_user': {'key': 'createdBy.user', 'type': 'MicrosoftGraphIdentity'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'root': {'key': 'root', 'type': '{object}'},
        'sharepoint_ids': {'key': 'sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'analytics': {'key': 'analytics', 'type': 'MicrosoftGraphItemAnalytics'},
        'columns': {'key': 'columns', 'type': '[MicrosoftGraphColumnDefinition]'},
        'content_types': {'key': 'contentTypes', 'type': '[MicrosoftGraphContentType]'},
        'drive': {'key': 'drive', 'type': 'MicrosoftGraphDrive'},
        'drives': {'key': 'drives', 'type': '[MicrosoftGraphDrive]'},
        'items': {'key': 'items', 'type': '[MicrosoftGraphBaseItem]'},
        'lists': {'key': 'lists', 'type': '[MicrosoftGraphList]'},
        'pages': {'key': 'pages', 'type': '[MicrosoftGraphSitePage]'},
        'sites': {'key': 'sites', 'type': '[MicrosoftGraphSite]'},
        'id_onenote_id': {'key': 'onenote.id', 'type': 'str'},
        'notebooks': {'key': 'onenote.notebooks', 'type': '[MicrosoftGraphNotebook]'},
        'operations': {'key': 'onenote.operations', 'type': '[MicrosoftGraphOnenoteOperation]'},
        'pages_onenote_pages': {'key': 'onenote.pages', 'type': '[MicrosoftGraphOnenotePage]'},
        'resources': {'key': 'onenote.resources', 'type': '[MicrosoftGraphOnenoteResource]'},
        'section_groups': {'key': 'onenote.sectionGroups', 'type': '[MicrosoftGraphSectionGroup]'},
        'sections': {'key': 'onenote.sections', 'type': '[MicrosoftGraphOnenoteSection]'},
        'data_location_code': {'key': 'siteCollection.dataLocationCode', 'type': 'str'},
        'hostname': {'key': 'siteCollection.hostname', 'type': 'str'},
        'root_site_collection_root': {'key': 'siteCollection.root', 'type': '{object}'},
        'state': {'key': 'deleted.state', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSite, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.root = kwargs.get('root', None)
        self.sharepoint_ids = kwargs.get('sharepoint_ids', None)
        self.analytics = kwargs.get('analytics', None)
        self.columns = kwargs.get('columns', None)
        self.content_types = kwargs.get('content_types', None)
        self.drive = kwargs.get('drive', None)
        self.drives = kwargs.get('drives', None)
        self.items = kwargs.get('items', None)
        self.lists = kwargs.get('lists', None)
        self.pages = kwargs.get('pages', None)
        self.sites = kwargs.get('sites', None)
        self.id_onenote_id = kwargs.get('id_onenote_id', None)
        self.notebooks = kwargs.get('notebooks', None)
        self.operations = kwargs.get('operations', None)
        self.pages_onenote_pages = kwargs.get('pages_onenote_pages', None)
        self.resources = kwargs.get('resources', None)
        self.section_groups = kwargs.get('section_groups', None)
        self.sections = kwargs.get('sections', None)
        self.data_location_code = kwargs.get('data_location_code', None)
        self.hostname = kwargs.get('hostname', None)
        self.root_site_collection_root = kwargs.get('root_site_collection_root', None)
        self.state = kwargs.get('state', None)


class MicrosoftGraphSiteCollection(msrest.serialization.Model):
    """siteCollection.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param data_location_code: The geographic region code for where this site collection resides.
     Read-only.
    :type data_location_code: str
    :param hostname: The hostname for the site collection. Read-only.
    :type hostname: str
    :param root: root.
    :type root: dict[str, object]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'data_location_code': {'key': 'dataLocationCode', 'type': 'str'},
        'hostname': {'key': 'hostname', 'type': 'str'},
        'root': {'key': 'root', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSiteCollection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.data_location_code = kwargs.get('data_location_code', None)
        self.hostname = kwargs.get('hostname', None)
        self.root = kwargs.get('root', None)


class MicrosoftGraphSitePage(MicrosoftGraphBaseItem):
    """sitePage.

    :param id: Read-only.
    :type id: str
    :param created_date_time: Date and time of item creation. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description: Provides a user-visible description of the item. Optional.
    :type description: str
    :param e_tag: ETag for the item. Read-only.
    :type e_tag: str
    :param last_modified_date_time: Date and time the item was last modified. Read-only.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The name of the item. Read-write.
    :type name: str
    :param web_url: URL that displays the resource in the browser. Read-only.
    :type web_url: str
    :param created_by_user: Represents an Azure Active Directory user object.
    :type created_by_user: ~files.models.MicrosoftGraphUser
    :param last_modified_by_user: Represents an Azure Active Directory user object.
    :type last_modified_by_user: ~files.models.MicrosoftGraphUser
    :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
    :type drive_id: str
    :param drive_type: Identifies the type of drive. See [drive][] resource for values.
    :type drive_type: str
    :param id_parent_reference_id: Unique identifier of the item in the drive. Read-only.
    :type id_parent_reference_id: str
    :param name_parent_reference_name: The name of the item being referenced. Read-only.
    :type name_parent_reference_name: str
    :param path: Path that can be used to navigate to the item. Read-only.
    :type path: str
    :param share_id: A unique identifier for a shared resource that can be accessed via the
     [Shares][] API.
    :type share_id: str
    :param sharepoint_ids: sharepointIds.
    :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
    :param site_id:
    :type site_id: str
    :param application_last_modified_by_application: identity.
    :type application_last_modified_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_last_modified_by_device: identity.
    :type device_last_modified_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_last_modified_by_user: identity.
    :type user_last_modified_by_user: ~files.models.MicrosoftGraphIdentity
    :param application_created_by_application: identity.
    :type application_created_by_application: ~files.models.MicrosoftGraphIdentity
    :param device_created_by_device: identity.
    :type device_created_by_device: ~files.models.MicrosoftGraphIdentity
    :param user_created_by_user: identity.
    :type user_created_by_user: ~files.models.MicrosoftGraphIdentity
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content_type: contentTypeInfo.
    :type content_type: ~files.models.MicrosoftGraphContentTypeInfo
    :param page_layout_type:
    :type page_layout_type: str
    :param publishing_state: publicationFacet.
    :type publishing_state: ~files.models.MicrosoftGraphPublicationFacet
    :param title:
    :type title: str
    :param web_parts:
    :type web_parts: list[~files.models.MicrosoftGraphWebPart]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'created_by_user': {'key': 'createdByUser', 'type': 'MicrosoftGraphUser'},
        'last_modified_by_user': {'key': 'lastModifiedByUser', 'type': 'MicrosoftGraphUser'},
        'drive_id': {'key': 'parentReference.driveId', 'type': 'str'},
        'drive_type': {'key': 'parentReference.driveType', 'type': 'str'},
        'id_parent_reference_id': {'key': 'parentReference.id', 'type': 'str'},
        'name_parent_reference_name': {'key': 'parentReference.name', 'type': 'str'},
        'path': {'key': 'parentReference.path', 'type': 'str'},
        'share_id': {'key': 'parentReference.shareId', 'type': 'str'},
        'sharepoint_ids': {'key': 'parentReference.sharepointIds', 'type': 'MicrosoftGraphSharepointIds'},
        'site_id': {'key': 'parentReference.siteId', 'type': 'str'},
        'application_last_modified_by_application': {'key': 'lastModifiedBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_last_modified_by_device': {'key': 'lastModifiedBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_last_modified_by_user': {'key': 'lastModifiedBy.user', 'type': 'MicrosoftGraphIdentity'},
        'application_created_by_application': {'key': 'createdBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device_created_by_device': {'key': 'createdBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user_created_by_user': {'key': 'createdBy.user', 'type': 'MicrosoftGraphIdentity'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'content_type': {'key': 'contentType', 'type': 'MicrosoftGraphContentTypeInfo'},
        'page_layout_type': {'key': 'pageLayoutType', 'type': 'str'},
        'publishing_state': {'key': 'publishingState', 'type': 'MicrosoftGraphPublicationFacet'},
        'title': {'key': 'title', 'type': 'str'},
        'web_parts': {'key': 'webParts', 'type': '[MicrosoftGraphWebPart]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSitePage, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content_type = kwargs.get('content_type', None)
        self.page_layout_type = kwargs.get('page_layout_type', None)
        self.publishing_state = kwargs.get('publishing_state', None)
        self.title = kwargs.get('title', None)
        self.web_parts = kwargs.get('web_parts', None)


class MicrosoftGraphSizeRange(msrest.serialization.Model):
    """sizeRange.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param maximum_size: The maximum size (in kilobytes) that an incoming message must have in
     order for a condition or exception to apply.
    :type maximum_size: int
    :param minimum_size: The minimum size (in kilobytes) that an incoming message must have in
     order for a condition or exception to apply.
    :type minimum_size: int
    """

    _validation = {
        'maximum_size': {'maximum': 2147483647, 'minimum': -2147483648},
        'minimum_size': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'maximum_size': {'key': 'maximumSize', 'type': 'int'},
        'minimum_size': {'key': 'minimumSize', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSizeRange, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.maximum_size = kwargs.get('maximum_size', None)
        self.minimum_size = kwargs.get('minimum_size', None)


class MicrosoftGraphSkillProficiency(MicrosoftGraphItemFacet):
    """skillProficiency.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param categories:
    :type categories: list[str]
    :param collaboration_tags:
    :type collaboration_tags: list[str]
    :param display_name:
    :type display_name: str
    :param proficiency:  Possible values include: "elementary", "limitedWorking",
     "generalProfessional", "advancedProfessional", "expert", "unknownFutureValue".
    :type proficiency: str or ~files.models.MicrosoftGraphSkillProficiencyLevel
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'collaboration_tags': {'key': 'collaborationTags', 'type': '[str]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'proficiency': {'key': 'proficiency', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSkillProficiency, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.categories = kwargs.get('categories', None)
        self.collaboration_tags = kwargs.get('collaboration_tags', None)
        self.display_name = kwargs.get('display_name', None)
        self.proficiency = kwargs.get('proficiency', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphSoftwareOathAuthenticationMethod(MicrosoftGraphAuthenticationMethod):
    """softwareOathAuthenticationMethod.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSoftwareOathAuthenticationMethod, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphSpecialFolder(msrest.serialization.Model):
    """specialFolder.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: The unique identifier for this item in the /drive/special collection.
    :type name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSpecialFolder, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)


class MicrosoftGraphStoragePlanInformation(msrest.serialization.Model):
    """storagePlanInformation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param upgrade_available: Indicates whether there are higher storage quota plans available.
     Read-only.
    :type upgrade_available: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'upgrade_available': {'key': 'upgradeAvailable', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphStoragePlanInformation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.upgrade_available = kwargs.get('upgrade_available', None)


class MicrosoftGraphSubscription(MicrosoftGraphEntity):
    """subscription.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param application_id: Identifier of the application used to create the subscription. Read-
     only.
    :type application_id: str
    :param change_type: Required. Indicates the type of change in the subscribed resource that will
     raise a change notification. The supported values are: created, updated, deleted. Multiple
     values can be combined using a comma-separated list.Note: Drive root item and list change
     notifications support only the updated changeType. User and group change notifications support
     updated and deleted changeType.
    :type change_type: str
    :param client_state: Optional. Specifies the value of the clientState property sent by the
     service in each change notification. The maximum length is 128 characters. The client can check
     that the change notification came from the service by comparing the value of the clientState
     property sent with the subscription with the value of the clientState property received with
     each change notification.
    :type client_state: str
    :param creator_id: Identifier of the user or service principal that created the subscription.
     If the app used delegated permissions to create the subscription, this field contains the id of
     the signed-in user the app called on behalf of. If the app used application permissions, this
     field contains the id of the service principal corresponding to the app. Read-only.
    :type creator_id: str
    :param encryption_certificate: A base64-encoded representation of a certificate with a public
     key used to encrypt resource data in change notifications. Optional. Required when
     includeResourceData is true.
    :type encryption_certificate: str
    :param encryption_certificate_id: A custom app-provided identifier to help identify the
     certificate needed to decrypt resource data. Optional.
    :type encryption_certificate_id: str
    :param expiration_date_time: Required. Specifies the date and time when the webhook
     subscription expires. The time is in UTC, and can be an amount of time from subscription
     creation that varies for the resource subscribed to.  See the table below for maximum supported
     subscription length of time.
    :type expiration_date_time: ~datetime.datetime
    :param include_properties:
    :type include_properties: bool
    :param include_resource_data: When set to true, change notifications include resource data
     (such as content of a chat message). Optional.
    :type include_resource_data: bool
    :param latest_supported_tls_version: Specifies the latest version of Transport Layer Security
     (TLS) that the notification endpoint, specified by notificationUrl, supports. The possible
     values are: v1_0, v1_1, v1_2, v1_3. For subscribers whose notification endpoint supports a
     version lower than the currently recommended version (TLS 1.2), specifying this property by a
     set timeline allows them to temporarily use their deprecated version of TLS before completing
     their upgrade to TLS 1.2. For these subscribers, not setting this property per the timeline
     would result in subscription operations failing. For subscribers whose notification endpoint
     already supports TLS 1.2, setting this property is optional. In such cases, Microsoft Graph
     defaults the property to v1_2.
    :type latest_supported_tls_version: str
    :param lifecycle_notification_url: The URL of the endpoint that receives lifecycle
     notifications, including subscriptionRemoved and missed notifications. This URL must make use
     of the HTTPS protocol. Optional. Read more about how Outlook resources use lifecycle
     notifications.
    :type lifecycle_notification_url: str
    :param notification_url: Required. The URL of the endpoint that will receive the change
     notifications. This URL must make use of the HTTPS protocol.
    :type notification_url: str
    :param resource: Required. Specifies the resource that will be monitored for changes. Do not
     include the base URL (https://graph.microsoft.com/v1.0/). See the possible resource path values
     for each supported resource.
    :type resource: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'application_id': {'key': 'applicationId', 'type': 'str'},
        'change_type': {'key': 'changeType', 'type': 'str'},
        'client_state': {'key': 'clientState', 'type': 'str'},
        'creator_id': {'key': 'creatorId', 'type': 'str'},
        'encryption_certificate': {'key': 'encryptionCertificate', 'type': 'str'},
        'encryption_certificate_id': {'key': 'encryptionCertificateId', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'include_properties': {'key': 'includeProperties', 'type': 'bool'},
        'include_resource_data': {'key': 'includeResourceData', 'type': 'bool'},
        'latest_supported_tls_version': {'key': 'latestSupportedTlsVersion', 'type': 'str'},
        'lifecycle_notification_url': {'key': 'lifecycleNotificationUrl', 'type': 'str'},
        'notification_url': {'key': 'notificationUrl', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSubscription, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.application_id = kwargs.get('application_id', None)
        self.change_type = kwargs.get('change_type', None)
        self.client_state = kwargs.get('client_state', None)
        self.creator_id = kwargs.get('creator_id', None)
        self.encryption_certificate = kwargs.get('encryption_certificate', None)
        self.encryption_certificate_id = kwargs.get('encryption_certificate_id', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.include_properties = kwargs.get('include_properties', None)
        self.include_resource_data = kwargs.get('include_resource_data', None)
        self.latest_supported_tls_version = kwargs.get('latest_supported_tls_version', None)
        self.lifecycle_notification_url = kwargs.get('lifecycle_notification_url', None)
        self.notification_url = kwargs.get('notification_url', None)
        self.resource = kwargs.get('resource', None)


class MicrosoftGraphSwapShiftsChangeRequest(MicrosoftGraphOfferShiftRequest):
    """swapShiftsChangeRequest.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param assigned_to:  Possible values include: "sender", "recipient", "manager", "system",
     "unknownFutureValue".
    :type assigned_to: str or ~files.models.MicrosoftGraphScheduleChangeRequestActor
    :param manager_action_date_time:
    :type manager_action_date_time: ~datetime.datetime
    :param manager_action_message:
    :type manager_action_message: str
    :param manager_user_id:
    :type manager_user_id: str
    :param sender_date_time:
    :type sender_date_time: ~datetime.datetime
    :param sender_message:
    :type sender_message: str
    :param sender_user_id:
    :type sender_user_id: str
    :param state:  Possible values include: "pending", "approved", "declined",
     "unknownFutureValue".
    :type state: str or ~files.models.MicrosoftGraphScheduleChangeState
    :param recipient_action_date_time: The Timestamp type represents date and time information
     using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would
     look like this: '2014-01-01T00:00:00Z'.
    :type recipient_action_date_time: ~datetime.datetime
    :param recipient_action_message: Custom message sent by recipient of the offer shift request.
    :type recipient_action_message: str
    :param recipient_user_id: User ID of the recipient of the offer shift request.
    :type recipient_user_id: str
    :param sender_shift_id: User ID of the sender of the offer shift request.
    :type sender_shift_id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param recipient_shift_id: ShiftId for the recipient user with whom the request is to swap.
    :type recipient_shift_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'manager_action_date_time': {'key': 'managerActionDateTime', 'type': 'iso-8601'},
        'manager_action_message': {'key': 'managerActionMessage', 'type': 'str'},
        'manager_user_id': {'key': 'managerUserId', 'type': 'str'},
        'sender_date_time': {'key': 'senderDateTime', 'type': 'iso-8601'},
        'sender_message': {'key': 'senderMessage', 'type': 'str'},
        'sender_user_id': {'key': 'senderUserId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'recipient_action_date_time': {'key': 'recipientActionDateTime', 'type': 'iso-8601'},
        'recipient_action_message': {'key': 'recipientActionMessage', 'type': 'str'},
        'recipient_user_id': {'key': 'recipientUserId', 'type': 'str'},
        'sender_shift_id': {'key': 'senderShiftId', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'recipient_shift_id': {'key': 'recipientShiftId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSwapShiftsChangeRequest, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.recipient_shift_id = kwargs.get('recipient_shift_id', None)


class MicrosoftGraphTargetPolicyEndpoints(msrest.serialization.Model):
    """targetPolicyEndpoints.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param platform_types:
    :type platform_types: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'platform_types': {'key': 'platformTypes', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTargetPolicyEndpoints, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.platform_types = kwargs.get('platform_types', None)


class MicrosoftGraphTeam(MicrosoftGraphEntity):
    """team.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param classification: An optional label. Typically describes the data or business sensitivity
     of the team. Must match one of a pre-configured set in the tenant's directory.
    :type classification: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param description: An optional description for the team.
    :type description: str
    :param discovery_settings: teamDiscoverySettings.
    :type discovery_settings: ~files.models.MicrosoftGraphTeamDiscoverySettings
    :param display_name: The name of the team.
    :type display_name: str
    :param fun_settings: teamFunSettings.
    :type fun_settings: ~files.models.MicrosoftGraphTeamFunSettings
    :param guest_settings: teamGuestSettings.
    :type guest_settings: ~files.models.MicrosoftGraphTeamGuestSettings
    :param internal_id: A unique ID for the team that has been used in a few places such as the
     audit log/Office 365 Management Activity API.
    :type internal_id: str
    :param is_archived: Whether this team is in read-only mode.
    :type is_archived: bool
    :param is_membership_limited_to_owners:
    :type is_membership_limited_to_owners: bool
    :param member_settings: teamMemberSettings.
    :type member_settings: ~files.models.MicrosoftGraphTeamMemberSettings
    :param messaging_settings: teamMessagingSettings.
    :type messaging_settings: ~files.models.MicrosoftGraphTeamMessagingSettings
    :param specialization:  Possible values include: "none", "educationStandard", "educationClass",
     "educationProfessionalLearningCommunity", "educationStaff", "healthcareStandard",
     "healthcareCareCoordination", "unknownFutureValue".
    :type specialization: str or ~files.models.MicrosoftGraphTeamSpecialization
    :param visibility:  Possible values include: "private", "public", "hiddenMembership",
     "unknownFutureValue".
    :type visibility: str or ~files.models.MicrosoftGraphTeamVisibilityType
    :param web_url: A hyperlink that will go to the team in the Microsoft Teams client. This is the
     URL that you get when you right-click a team in the Microsoft Teams client and select Get link
     to team. This URL should be treated as an opaque blob, and not parsed.
    :type web_url: str
    :param schedule: schedule.
    :type schedule: ~files.models.MicrosoftGraphSchedule
    :param channels: The collection of channels & messages associated with the team.
    :type channels: list[~files.models.MicrosoftGraphChannel]
    :param group: Represents an Azure Active Directory object. The directoryObject type is the base
     type for many other directory entity types.
    :type group: ~files.models.MicrosoftGraphGroup
    :param installed_apps: The apps installed in this team.
    :type installed_apps: list[~files.models.MicrosoftGraphTeamsAppInstallation]
    :param members: Members and owners of the team.
    :type members: list[~files.models.MicrosoftGraphConversationMember]
    :param operations: The async operations that ran or are running on this team.
    :type operations: list[~files.models.MicrosoftGraphTeamsAsyncOperation]
    :param owners:
    :type owners: list[~files.models.MicrosoftGraphUser]
    :param photo: profilePhoto.
    :type photo: ~files.models.MicrosoftGraphProfilePhoto
    :param primary_channel: channel.
    :type primary_channel: ~files.models.MicrosoftGraphChannel
    :param template: teamsTemplate.
    :type template: ~files.models.MicrosoftGraphTeamsTemplate
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'classification': {'key': 'classification', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'discovery_settings': {'key': 'discoverySettings', 'type': 'MicrosoftGraphTeamDiscoverySettings'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'fun_settings': {'key': 'funSettings', 'type': 'MicrosoftGraphTeamFunSettings'},
        'guest_settings': {'key': 'guestSettings', 'type': 'MicrosoftGraphTeamGuestSettings'},
        'internal_id': {'key': 'internalId', 'type': 'str'},
        'is_archived': {'key': 'isArchived', 'type': 'bool'},
        'is_membership_limited_to_owners': {'key': 'isMembershipLimitedToOwners', 'type': 'bool'},
        'member_settings': {'key': 'memberSettings', 'type': 'MicrosoftGraphTeamMemberSettings'},
        'messaging_settings': {'key': 'messagingSettings', 'type': 'MicrosoftGraphTeamMessagingSettings'},
        'specialization': {'key': 'specialization', 'type': 'str'},
        'visibility': {'key': 'visibility', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'schedule': {'key': 'schedule', 'type': 'MicrosoftGraphSchedule'},
        'channels': {'key': 'channels', 'type': '[MicrosoftGraphChannel]'},
        'group': {'key': 'group', 'type': 'MicrosoftGraphGroup'},
        'installed_apps': {'key': 'installedApps', 'type': '[MicrosoftGraphTeamsAppInstallation]'},
        'members': {'key': 'members', 'type': '[MicrosoftGraphConversationMember]'},
        'operations': {'key': 'operations', 'type': '[MicrosoftGraphTeamsAsyncOperation]'},
        'owners': {'key': 'owners', 'type': '[MicrosoftGraphUser]'},
        'photo': {'key': 'photo', 'type': 'MicrosoftGraphProfilePhoto'},
        'primary_channel': {'key': 'primaryChannel', 'type': 'MicrosoftGraphChannel'},
        'template': {'key': 'template', 'type': 'MicrosoftGraphTeamsTemplate'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeam, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.classification = kwargs.get('classification', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.description = kwargs.get('description', None)
        self.discovery_settings = kwargs.get('discovery_settings', None)
        self.display_name = kwargs.get('display_name', None)
        self.fun_settings = kwargs.get('fun_settings', None)
        self.guest_settings = kwargs.get('guest_settings', None)
        self.internal_id = kwargs.get('internal_id', None)
        self.is_archived = kwargs.get('is_archived', None)
        self.is_membership_limited_to_owners = kwargs.get('is_membership_limited_to_owners', None)
        self.member_settings = kwargs.get('member_settings', None)
        self.messaging_settings = kwargs.get('messaging_settings', None)
        self.specialization = kwargs.get('specialization', None)
        self.visibility = kwargs.get('visibility', None)
        self.web_url = kwargs.get('web_url', None)
        self.schedule = kwargs.get('schedule', None)
        self.channels = kwargs.get('channels', None)
        self.group = kwargs.get('group', None)
        self.installed_apps = kwargs.get('installed_apps', None)
        self.members = kwargs.get('members', None)
        self.operations = kwargs.get('operations', None)
        self.owners = kwargs.get('owners', None)
        self.photo = kwargs.get('photo', None)
        self.primary_channel = kwargs.get('primary_channel', None)
        self.template = kwargs.get('template', None)


class MicrosoftGraphTeamDiscoverySettings(msrest.serialization.Model):
    """teamDiscoverySettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param show_in_teams_search_and_suggestions:
    :type show_in_teams_search_and_suggestions: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'show_in_teams_search_and_suggestions': {'key': 'showInTeamsSearchAndSuggestions', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamDiscoverySettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.show_in_teams_search_and_suggestions = kwargs.get('show_in_teams_search_and_suggestions', None)


class MicrosoftGraphTeamFunSettings(msrest.serialization.Model):
    """teamFunSettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_custom_memes: If set to true, enables users to include custom memes.
    :type allow_custom_memes: bool
    :param allow_giphy: If set to true, enables Giphy use.
    :type allow_giphy: bool
    :param allow_stickers_and_memes: If set to true, enables users to include stickers and memes.
    :type allow_stickers_and_memes: bool
    :param giphy_content_rating:  Possible values include: "strict", "moderate",
     "unknownFutureValue".
    :type giphy_content_rating: str or ~files.models.MicrosoftGraphGiphyRatingType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_custom_memes': {'key': 'allowCustomMemes', 'type': 'bool'},
        'allow_giphy': {'key': 'allowGiphy', 'type': 'bool'},
        'allow_stickers_and_memes': {'key': 'allowStickersAndMemes', 'type': 'bool'},
        'giphy_content_rating': {'key': 'giphyContentRating', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamFunSettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allow_custom_memes = kwargs.get('allow_custom_memes', None)
        self.allow_giphy = kwargs.get('allow_giphy', None)
        self.allow_stickers_and_memes = kwargs.get('allow_stickers_and_memes', None)
        self.giphy_content_rating = kwargs.get('giphy_content_rating', None)


class MicrosoftGraphTeamGuestSettings(msrest.serialization.Model):
    """teamGuestSettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_create_update_channels: If set to true, guests can add and update channels.
    :type allow_create_update_channels: bool
    :param allow_delete_channels: If set to true, guests can delete channels.
    :type allow_delete_channels: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_create_update_channels': {'key': 'allowCreateUpdateChannels', 'type': 'bool'},
        'allow_delete_channels': {'key': 'allowDeleteChannels', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamGuestSettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allow_create_update_channels = kwargs.get('allow_create_update_channels', None)
        self.allow_delete_channels = kwargs.get('allow_delete_channels', None)


class MicrosoftGraphTeamMemberSettings(msrest.serialization.Model):
    """teamMemberSettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_add_remove_apps: If set to true, members can add and remove apps.
    :type allow_add_remove_apps: bool
    :param allow_create_private_channels: If set to true, members can add and update private
     channels.
    :type allow_create_private_channels: bool
    :param allow_create_update_channels: If set to true, members can add and update channels.
    :type allow_create_update_channels: bool
    :param allow_create_update_remove_connectors: If set to true, members can add, update, and
     remove connectors.
    :type allow_create_update_remove_connectors: bool
    :param allow_create_update_remove_tabs: If set to true, members can add, update, and remove
     tabs.
    :type allow_create_update_remove_tabs: bool
    :param allow_delete_channels: If set to true, members can delete channels.
    :type allow_delete_channels: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_add_remove_apps': {'key': 'allowAddRemoveApps', 'type': 'bool'},
        'allow_create_private_channels': {'key': 'allowCreatePrivateChannels', 'type': 'bool'},
        'allow_create_update_channels': {'key': 'allowCreateUpdateChannels', 'type': 'bool'},
        'allow_create_update_remove_connectors': {'key': 'allowCreateUpdateRemoveConnectors', 'type': 'bool'},
        'allow_create_update_remove_tabs': {'key': 'allowCreateUpdateRemoveTabs', 'type': 'bool'},
        'allow_delete_channels': {'key': 'allowDeleteChannels', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamMemberSettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allow_add_remove_apps = kwargs.get('allow_add_remove_apps', None)
        self.allow_create_private_channels = kwargs.get('allow_create_private_channels', None)
        self.allow_create_update_channels = kwargs.get('allow_create_update_channels', None)
        self.allow_create_update_remove_connectors = kwargs.get('allow_create_update_remove_connectors', None)
        self.allow_create_update_remove_tabs = kwargs.get('allow_create_update_remove_tabs', None)
        self.allow_delete_channels = kwargs.get('allow_delete_channels', None)


class MicrosoftGraphTeamMessagingSettings(msrest.serialization.Model):
    """teamMessagingSettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_channel_mentions: If set to true, @channel mentions are allowed.
    :type allow_channel_mentions: bool
    :param allow_owner_delete_messages: If set to true, owners can delete any message.
    :type allow_owner_delete_messages: bool
    :param allow_team_mentions: If set to true, @team mentions are allowed.
    :type allow_team_mentions: bool
    :param allow_user_delete_messages: If set to true, users can delete their messages.
    :type allow_user_delete_messages: bool
    :param allow_user_edit_messages: If set to true, users can edit their messages.
    :type allow_user_edit_messages: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_channel_mentions': {'key': 'allowChannelMentions', 'type': 'bool'},
        'allow_owner_delete_messages': {'key': 'allowOwnerDeleteMessages', 'type': 'bool'},
        'allow_team_mentions': {'key': 'allowTeamMentions', 'type': 'bool'},
        'allow_user_delete_messages': {'key': 'allowUserDeleteMessages', 'type': 'bool'},
        'allow_user_edit_messages': {'key': 'allowUserEditMessages', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamMessagingSettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allow_channel_mentions = kwargs.get('allow_channel_mentions', None)
        self.allow_owner_delete_messages = kwargs.get('allow_owner_delete_messages', None)
        self.allow_team_mentions = kwargs.get('allow_team_mentions', None)
        self.allow_user_delete_messages = kwargs.get('allow_user_delete_messages', None)
        self.allow_user_edit_messages = kwargs.get('allow_user_edit_messages', None)


class MicrosoftGraphTeamsApp(MicrosoftGraphEntity):
    """teamsApp.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The name of the catalog app provided by the app developer in the Microsoft
     Teams zip app package.
    :type display_name: str
    :param distribution_method:  Possible values include: "store", "organization", "sideloaded",
     "unknownFutureValue".
    :type distribution_method: str or ~files.models.MicrosoftGraphTeamsAppDistributionMethod
    :param external_id: The ID of the catalog provided by the app developer in the Microsoft Teams
     zip app package.
    :type external_id: str
    :param app_definitions: The details for each version of the app.
    :type app_definitions: list[~files.models.MicrosoftGraphTeamsAppDefinition]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'distribution_method': {'key': 'distributionMethod', 'type': 'str'},
        'external_id': {'key': 'externalId', 'type': 'str'},
        'app_definitions': {'key': 'appDefinitions', 'type': '[MicrosoftGraphTeamsAppDefinition]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamsApp, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.distribution_method = kwargs.get('distribution_method', None)
        self.external_id = kwargs.get('external_id', None)
        self.app_definitions = kwargs.get('app_definitions', None)


class MicrosoftGraphTeamsAppDefinition(MicrosoftGraphEntity):
    """teamsAppDefinition.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param azure_ad_app_id:
    :type azure_ad_app_id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param description:
    :type description: str
    :param display_name: The name of the app provided by the app developer.
    :type display_name: str
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param publishing_state:  Possible values include: "submitted", "rejected", "published",
     "unknownFutureValue".
    :type publishing_state: str or ~files.models.MicrosoftGraphTeamsAppPublishingState
    :param shortdescription:
    :type shortdescription: str
    :param teams_app_id: The ID from the Teams app manifest.
    :type teams_app_id: str
    :param version: The version number of the application.
    :type version: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'azure_ad_app_id': {'key': 'azureADAppId', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'publishing_state': {'key': 'publishingState', 'type': 'str'},
        'shortdescription': {'key': 'shortdescription', 'type': 'str'},
        'teams_app_id': {'key': 'teamsAppId', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamsAppDefinition, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.azure_ad_app_id = kwargs.get('azure_ad_app_id', None)
        self.created_by = kwargs.get('created_by', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.publishing_state = kwargs.get('publishing_state', None)
        self.shortdescription = kwargs.get('shortdescription', None)
        self.teams_app_id = kwargs.get('teams_app_id', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphTeamsAppInstallation(MicrosoftGraphEntity):
    """teamsAppInstallation.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param teams_app: teamsApp.
    :type teams_app: ~files.models.MicrosoftGraphTeamsApp
    :param teams_app_definition: teamsAppDefinition.
    :type teams_app_definition: ~files.models.MicrosoftGraphTeamsAppDefinition
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'teams_app': {'key': 'teamsApp', 'type': 'MicrosoftGraphTeamsApp'},
        'teams_app_definition': {'key': 'teamsAppDefinition', 'type': 'MicrosoftGraphTeamsAppDefinition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamsAppInstallation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.teams_app = kwargs.get('teams_app', None)
        self.teams_app_definition = kwargs.get('teams_app_definition', None)


class MicrosoftGraphTeamsAsyncOperation(MicrosoftGraphEntity):
    """teamsAsyncOperation.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param attempts_count: Number of times the operation was attempted before being marked
     successful or failed.
    :type attempts_count: int
    :param created_date_time: Time when the operation was created.
    :type created_date_time: ~datetime.datetime
    :param error: operationError.
    :type error: ~files.models.MicrosoftGraphOperationError
    :param last_action_date_time: Time when the async operation was last updated.
    :type last_action_date_time: ~datetime.datetime
    :param operation_type:  Possible values include: "invalid", "cloneTeam", "archiveTeam",
     "unarchiveTeam", "createTeam", "unknownFutureValue".
    :type operation_type: str or ~files.models.MicrosoftGraphTeamsAsyncOperationType
    :param status:  Possible values include: "invalid", "notStarted", "inProgress", "succeeded",
     "failed", "unknownFutureValue".
    :type status: str or ~files.models.MicrosoftGraphTeamsAsyncOperationStatus
    :param target_resource_id: The ID of the object that's created or modified as result of this
     async operation, typically a team.
    :type target_resource_id: str
    :param target_resource_location: The location of the object that's created or modified as
     result of this async operation. This URL should be treated as an opaque value and not parsed
     into its component paths.
    :type target_resource_location: str
    """

    _validation = {
        'attempts_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'attempts_count': {'key': 'attemptsCount', 'type': 'int'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'MicrosoftGraphOperationError'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'operation_type': {'key': 'operationType', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'target_resource_location': {'key': 'targetResourceLocation', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamsAsyncOperation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.attempts_count = kwargs.get('attempts_count', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.error = kwargs.get('error', None)
        self.last_action_date_time = kwargs.get('last_action_date_time', None)
        self.operation_type = kwargs.get('operation_type', None)
        self.status = kwargs.get('status', None)
        self.target_resource_id = kwargs.get('target_resource_id', None)
        self.target_resource_location = kwargs.get('target_resource_location', None)


class MicrosoftGraphTeamsTab(MicrosoftGraphEntity):
    """teamsTab.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param configuration: teamsTabConfiguration.
    :type configuration: ~files.models.MicrosoftGraphTeamsTabConfiguration
    :param display_name: Name of the tab.
    :type display_name: str
    :param message_id:
    :type message_id: str
    :param sort_order_index:
    :type sort_order_index: str
    :param teams_app_id:
    :type teams_app_id: str
    :param web_url: Deep link URL of the tab instance. Read only.
    :type web_url: str
    :param teams_app: teamsApp.
    :type teams_app: ~files.models.MicrosoftGraphTeamsApp
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'configuration': {'key': 'configuration', 'type': 'MicrosoftGraphTeamsTabConfiguration'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'message_id': {'key': 'messageId', 'type': 'str'},
        'sort_order_index': {'key': 'sortOrderIndex', 'type': 'str'},
        'teams_app_id': {'key': 'teamsAppId', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'teams_app': {'key': 'teamsApp', 'type': 'MicrosoftGraphTeamsApp'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamsTab, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.configuration = kwargs.get('configuration', None)
        self.display_name = kwargs.get('display_name', None)
        self.message_id = kwargs.get('message_id', None)
        self.sort_order_index = kwargs.get('sort_order_index', None)
        self.teams_app_id = kwargs.get('teams_app_id', None)
        self.web_url = kwargs.get('web_url', None)
        self.teams_app = kwargs.get('teams_app', None)


class MicrosoftGraphTeamsTabConfiguration(msrest.serialization.Model):
    """teamsTabConfiguration.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content_url: Url used for rendering tab contents in Teams. Required.
    :type content_url: str
    :param entity_id: Identifier for the entity hosted by the tab provider.
    :type entity_id: str
    :param remove_url: Url called by Teams client when a Tab is removed using the Teams Client.
    :type remove_url: str
    :param website_url: Url for showing tab contents outside of Teams.
    :type website_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'content_url': {'key': 'contentUrl', 'type': 'str'},
        'entity_id': {'key': 'entityId', 'type': 'str'},
        'remove_url': {'key': 'removeUrl', 'type': 'str'},
        'website_url': {'key': 'websiteUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamsTabConfiguration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content_url = kwargs.get('content_url', None)
        self.entity_id = kwargs.get('entity_id', None)
        self.remove_url = kwargs.get('remove_url', None)
        self.website_url = kwargs.get('website_url', None)


class MicrosoftGraphTeamsTemplate(MicrosoftGraphEntity):
    """teamsTemplate.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamsTemplate, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphTemporaryAccessPassAuthenticationMethod(MicrosoftGraphAuthenticationMethod):
    """temporaryAccessPassAuthenticationMethod.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTemporaryAccessPassAuthenticationMethod, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphTextColumn(msrest.serialization.Model):
    """textColumn.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_multiple_lines: Whether to allow multiple lines of text.
    :type allow_multiple_lines: bool
    :param append_changes_to_existing_text: Whether updates to this column should replace existing
     text, or append to it.
    :type append_changes_to_existing_text: bool
    :param lines_for_editing: The size of the text box.
    :type lines_for_editing: int
    :param max_length: The maximum number of characters for the value.
    :type max_length: int
    :param text_type: The type of text being stored. Must be one of plain or richText.
    :type text_type: str
    """

    _validation = {
        'lines_for_editing': {'maximum': 2147483647, 'minimum': -2147483648},
        'max_length': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_multiple_lines': {'key': 'allowMultipleLines', 'type': 'bool'},
        'append_changes_to_existing_text': {'key': 'appendChangesToExistingText', 'type': 'bool'},
        'lines_for_editing': {'key': 'linesForEditing', 'type': 'int'},
        'max_length': {'key': 'maxLength', 'type': 'int'},
        'text_type': {'key': 'textType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTextColumn, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allow_multiple_lines = kwargs.get('allow_multiple_lines', None)
        self.append_changes_to_existing_text = kwargs.get('append_changes_to_existing_text', None)
        self.lines_for_editing = kwargs.get('lines_for_editing', None)
        self.max_length = kwargs.get('max_length', None)
        self.text_type = kwargs.get('text_type', None)


class MicrosoftGraphThreatAssessmentRequest(MicrosoftGraphEntity):
    """threatAssessmentRequest.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param category:  Possible values include: "undefined", "spam", "phishing", "malware",
     "unknownFutureValue".
    :type category: str or ~files.models.MicrosoftGraphThreatCategory
    :param content_type:  Possible values include: "mail", "url", "file".
    :type content_type: str or ~files.models.MicrosoftGraphThreatAssessmentContentType
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param expected_assessment:  Possible values include: "block", "unblock".
    :type expected_assessment: str or ~files.models.MicrosoftGraphThreatExpectedAssessment
    :param request_source:  Possible values include: "undefined", "user", "administrator".
    :type request_source: str or ~files.models.MicrosoftGraphThreatAssessmentRequestSource
    :param status:  Possible values include: "pending", "completed".
    :type status: str or ~files.models.MicrosoftGraphThreatAssessmentStatus
    :param results: A collection of threat assessment results. Read-only. By default, a GET
     /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.
    :type results: list[~files.models.MicrosoftGraphThreatAssessmentResult]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'category': {'key': 'category', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'expected_assessment': {'key': 'expectedAssessment', 'type': 'str'},
        'request_source': {'key': 'requestSource', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'results': {'key': 'results', 'type': '[MicrosoftGraphThreatAssessmentResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphThreatAssessmentRequest, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.category = kwargs.get('category', None)
        self.content_type = kwargs.get('content_type', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.expected_assessment = kwargs.get('expected_assessment', None)
        self.request_source = kwargs.get('request_source', None)
        self.status = kwargs.get('status', None)
        self.results = kwargs.get('results', None)


class MicrosoftGraphThreatAssessmentResult(MicrosoftGraphEntity):
    """threatAssessmentResult.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param message: The result message for each threat assessment.
    :type message: str
    :param result_type:  Possible values include: "checkPolicy", "rescan", "unknownFutureValue".
    :type result_type: str or ~files.models.MicrosoftGraphThreatAssessmentResultType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'message': {'key': 'message', 'type': 'str'},
        'result_type': {'key': 'resultType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphThreatAssessmentResult, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.message = kwargs.get('message', None)
        self.result_type = kwargs.get('result_type', None)


class MicrosoftGraphThumbnail(msrest.serialization.Model):
    """thumbnail.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content: The content stream for the thumbnail.
    :type content: bytes
    :param height: The height of the thumbnail, in pixels.
    :type height: int
    :param source_item_id: The unique identifier of the item that provided the thumbnail. This is
     only available when a folder thumbnail is requested.
    :type source_item_id: str
    :param url: The URL used to fetch the thumbnail content.
    :type url: str
    :param width: The width of the thumbnail, in pixels.
    :type width: int
    """

    _validation = {
        'height': {'maximum': 2147483647, 'minimum': -2147483648},
        'width': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'base64'},
        'height': {'key': 'height', 'type': 'int'},
        'source_item_id': {'key': 'sourceItemId', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'width': {'key': 'width', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphThumbnail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content = kwargs.get('content', None)
        self.height = kwargs.get('height', None)
        self.source_item_id = kwargs.get('source_item_id', None)
        self.url = kwargs.get('url', None)
        self.width = kwargs.get('width', None)


class MicrosoftGraphThumbnailSet(MicrosoftGraphEntity):
    """thumbnailSet.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param large: thumbnail.
    :type large: ~files.models.MicrosoftGraphThumbnail
    :param medium: thumbnail.
    :type medium: ~files.models.MicrosoftGraphThumbnail
    :param small: thumbnail.
    :type small: ~files.models.MicrosoftGraphThumbnail
    :param source: thumbnail.
    :type source: ~files.models.MicrosoftGraphThumbnail
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'large': {'key': 'large', 'type': 'MicrosoftGraphThumbnail'},
        'medium': {'key': 'medium', 'type': 'MicrosoftGraphThumbnail'},
        'small': {'key': 'small', 'type': 'MicrosoftGraphThumbnail'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphThumbnail'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphThumbnailSet, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.large = kwargs.get('large', None)
        self.medium = kwargs.get('medium', None)
        self.small = kwargs.get('small', None)
        self.source = kwargs.get('source', None)


class MicrosoftGraphTimeCard(MicrosoftGraphChangeTrackedEntity):
    """timeCard.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param breaks:
    :type breaks: list[~files.models.MicrosoftGraphTimeCardBreak]
    :param clock_in_event: timeCardEvent.
    :type clock_in_event: ~files.models.MicrosoftGraphTimeCardEvent
    :param clock_out_event: timeCardEvent.
    :type clock_out_event: ~files.models.MicrosoftGraphTimeCardEvent
    :param confirmed_by:  Possible values include: "none", "user", "manager", "unknownFutureValue".
    :type confirmed_by: str or ~files.models.MicrosoftGraphConfirmedBy
    :param notes: itemBody.
    :type notes: ~files.models.MicrosoftGraphItemBody
    :param original_entry: timeCardEntry.
    :type original_entry: ~files.models.MicrosoftGraphTimeCardEntry
    :param state:  Possible values include: "clockedIn", "onBreak", "clockedOut",
     "unknownFutureValue".
    :type state: str or ~files.models.MicrosoftGraphTimeCardState
    :param user_id:
    :type user_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'breaks': {'key': 'breaks', 'type': '[MicrosoftGraphTimeCardBreak]'},
        'clock_in_event': {'key': 'clockInEvent', 'type': 'MicrosoftGraphTimeCardEvent'},
        'clock_out_event': {'key': 'clockOutEvent', 'type': 'MicrosoftGraphTimeCardEvent'},
        'confirmed_by': {'key': 'confirmedBy', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'MicrosoftGraphItemBody'},
        'original_entry': {'key': 'originalEntry', 'type': 'MicrosoftGraphTimeCardEntry'},
        'state': {'key': 'state', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTimeCard, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.breaks = kwargs.get('breaks', None)
        self.clock_in_event = kwargs.get('clock_in_event', None)
        self.clock_out_event = kwargs.get('clock_out_event', None)
        self.confirmed_by = kwargs.get('confirmed_by', None)
        self.notes = kwargs.get('notes', None)
        self.original_entry = kwargs.get('original_entry', None)
        self.state = kwargs.get('state', None)
        self.user_id = kwargs.get('user_id', None)


class MicrosoftGraphTimeCardBreak(msrest.serialization.Model):
    """timeCardBreak.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param break_id:
    :type break_id: str
    :param end: timeCardEvent.
    :type end: ~files.models.MicrosoftGraphTimeCardEvent
    :param notes: itemBody.
    :type notes: ~files.models.MicrosoftGraphItemBody
    :param start: timeCardEvent.
    :type start: ~files.models.MicrosoftGraphTimeCardEvent
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'break_id': {'key': 'breakId', 'type': 'str'},
        'end': {'key': 'end', 'type': 'MicrosoftGraphTimeCardEvent'},
        'notes': {'key': 'notes', 'type': 'MicrosoftGraphItemBody'},
        'start': {'key': 'start', 'type': 'MicrosoftGraphTimeCardEvent'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTimeCardBreak, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.break_id = kwargs.get('break_id', None)
        self.end = kwargs.get('end', None)
        self.notes = kwargs.get('notes', None)
        self.start = kwargs.get('start', None)


class MicrosoftGraphTimeCardEntry(msrest.serialization.Model):
    """timeCardEntry.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param breaks:
    :type breaks: list[~files.models.MicrosoftGraphTimeCardBreak]
    :param clock_in_event: timeCardEvent.
    :type clock_in_event: ~files.models.MicrosoftGraphTimeCardEvent
    :param clock_out_event: timeCardEvent.
    :type clock_out_event: ~files.models.MicrosoftGraphTimeCardEvent
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'breaks': {'key': 'breaks', 'type': '[MicrosoftGraphTimeCardBreak]'},
        'clock_in_event': {'key': 'clockInEvent', 'type': 'MicrosoftGraphTimeCardEvent'},
        'clock_out_event': {'key': 'clockOutEvent', 'type': 'MicrosoftGraphTimeCardEvent'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTimeCardEntry, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.breaks = kwargs.get('breaks', None)
        self.clock_in_event = kwargs.get('clock_in_event', None)
        self.clock_out_event = kwargs.get('clock_out_event', None)


class MicrosoftGraphTimeCardEvent(msrest.serialization.Model):
    """timeCardEvent.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param at_approved_location:
    :type at_approved_location: bool
    :param date_time:
    :type date_time: ~datetime.datetime
    :param notes: itemBody.
    :type notes: ~files.models.MicrosoftGraphItemBody
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'at_approved_location': {'key': 'atApprovedLocation', 'type': 'bool'},
        'date_time': {'key': 'dateTime', 'type': 'iso-8601'},
        'notes': {'key': 'notes', 'type': 'MicrosoftGraphItemBody'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTimeCardEvent, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.at_approved_location = kwargs.get('at_approved_location', None)
        self.date_time = kwargs.get('date_time', None)
        self.notes = kwargs.get('notes', None)


class MicrosoftGraphTimeClockSettings(msrest.serialization.Model):
    """timeClockSettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param approved_location: geoCoordinates.
    :type approved_location: ~files.models.MicrosoftGraphGeoCoordinates
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'approved_location': {'key': 'approvedLocation', 'type': 'MicrosoftGraphGeoCoordinates'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTimeClockSettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.approved_location = kwargs.get('approved_location', None)


class MicrosoftGraphTimeOff(MicrosoftGraphChangeTrackedEntity):
    """timeOff.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param draft_time_off: timeOffItem.
    :type draft_time_off: ~files.models.MicrosoftGraphTimeOffItem
    :param is_staged_for_deletion:
    :type is_staged_for_deletion: bool
    :param shared_time_off: timeOffItem.
    :type shared_time_off: ~files.models.MicrosoftGraphTimeOffItem
    :param user_id: ID of the user assigned to the timeOff. Required.
    :type user_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'draft_time_off': {'key': 'draftTimeOff', 'type': 'MicrosoftGraphTimeOffItem'},
        'is_staged_for_deletion': {'key': 'isStagedForDeletion', 'type': 'bool'},
        'shared_time_off': {'key': 'sharedTimeOff', 'type': 'MicrosoftGraphTimeOffItem'},
        'user_id': {'key': 'userId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTimeOff, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.draft_time_off = kwargs.get('draft_time_off', None)
        self.is_staged_for_deletion = kwargs.get('is_staged_for_deletion', None)
        self.shared_time_off = kwargs.get('shared_time_off', None)
        self.user_id = kwargs.get('user_id', None)


class MicrosoftGraphTimeOffItem(MicrosoftGraphScheduleEntity):
    """timeOffItem.

    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param theme:  Possible values include: "white", "blue", "green", "purple", "pink", "yellow",
     "gray", "darkBlue", "darkGreen", "darkPurple", "darkPink", "darkYellow", "unknownFutureValue".
    :type theme: str or ~files.models.MicrosoftGraphScheduleEntityTheme
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param time_off_reason_id: ID of the timeOffReason for this timeOffItem. Required.
    :type time_off_reason_id: str
    """

    _attribute_map = {
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'theme': {'key': 'theme', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'time_off_reason_id': {'key': 'timeOffReasonId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTimeOffItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.time_off_reason_id = kwargs.get('time_off_reason_id', None)


class MicrosoftGraphTimeOffReason(MicrosoftGraphChangeTrackedEntity):
    """timeOffReason.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The name of the timeOffReason. Required.
    :type display_name: str
    :param icon_type:  Possible values include: "none", "car", "calendar", "running", "plane",
     "firstAid", "doctor", "notWorking", "clock", "juryDuty", "globe", "cup", "phone", "weather",
     "umbrella", "piggyBank", "dog", "cake", "trafficCone", "pin", "sunny", "unknownFutureValue".
    :type icon_type: str or ~files.models.MicrosoftGraphTimeOffReasonIconType
    :param is_active: Indicates whether the timeOffReason can be used when creating new entities or
     updating existing ones. Required.
    :type is_active: bool
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'icon_type': {'key': 'iconType', 'type': 'str'},
        'is_active': {'key': 'isActive', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTimeOffReason, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.icon_type = kwargs.get('icon_type', None)
        self.is_active = kwargs.get('is_active', None)


class MicrosoftGraphTimeOffRequest(MicrosoftGraphScheduleChangeRequest):
    """timeOffRequest.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param assigned_to:  Possible values include: "sender", "recipient", "manager", "system",
     "unknownFutureValue".
    :type assigned_to: str or ~files.models.MicrosoftGraphScheduleChangeRequestActor
    :param manager_action_date_time:
    :type manager_action_date_time: ~datetime.datetime
    :param manager_action_message:
    :type manager_action_message: str
    :param manager_user_id:
    :type manager_user_id: str
    :param sender_date_time:
    :type sender_date_time: ~datetime.datetime
    :param sender_message:
    :type sender_message: str
    :param sender_user_id:
    :type sender_user_id: str
    :param state:  Possible values include: "pending", "approved", "declined",
     "unknownFutureValue".
    :type state: str or ~files.models.MicrosoftGraphScheduleChangeState
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param end_date_time: The Timestamp type represents date and time information using ISO 8601
     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type end_date_time: ~datetime.datetime
    :param start_date_time: The Timestamp type represents date and time information using ISO 8601
     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type start_date_time: ~datetime.datetime
    :param time_off_reason_id: The reason for the time off.
    :type time_off_reason_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'manager_action_date_time': {'key': 'managerActionDateTime', 'type': 'iso-8601'},
        'manager_action_message': {'key': 'managerActionMessage', 'type': 'str'},
        'manager_user_id': {'key': 'managerUserId', 'type': 'str'},
        'sender_date_time': {'key': 'senderDateTime', 'type': 'iso-8601'},
        'sender_message': {'key': 'senderMessage', 'type': 'str'},
        'sender_user_id': {'key': 'senderUserId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'time_off_reason_id': {'key': 'timeOffReasonId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTimeOffRequest, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.end_date_time = kwargs.get('end_date_time', None)
        self.start_date_time = kwargs.get('start_date_time', None)
        self.time_off_reason_id = kwargs.get('time_off_reason_id', None)


class MicrosoftGraphTimeRange(msrest.serialization.Model):
    """timeRange.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param end_time: End time for the time range.
    :type end_time: ~datetime.time
    :param start_time: Start time for the time range.
    :type start_time: ~datetime.time
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'end_time': {'key': 'endTime', 'type': 'time'},
        'start_time': {'key': 'startTime', 'type': 'time'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTimeRange, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.end_time = kwargs.get('end_time', None)
        self.start_time = kwargs.get('start_time', None)


class MicrosoftGraphTimeSlot(msrest.serialization.Model):
    """timeSlot.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param end: dateTimeTimeZone.
    :type end: ~files.models.MicrosoftGraphDateTimeZone
    :param start: dateTimeTimeZone.
    :type start: ~files.models.MicrosoftGraphDateTimeZone
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'end': {'key': 'end', 'type': 'MicrosoftGraphDateTimeZone'},
        'start': {'key': 'start', 'type': 'MicrosoftGraphDateTimeZone'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTimeSlot, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.end = kwargs.get('end', None)
        self.start = kwargs.get('start', None)


class MicrosoftGraphTimeZoneBase(msrest.serialization.Model):
    """timeZoneBase.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: The name of a time zone. It can be a standard time zone name such as 'Hawaii-
     Aleutian Standard Time', or 'Customized Time Zone' for a custom time zone.
    :type name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTimeZoneBase, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)


class MicrosoftGraphTodo(MicrosoftGraphEntity):
    """todo.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param lists:
    :type lists: list[~files.models.MicrosoftGraphTodoTaskList]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'lists': {'key': 'lists', 'type': '[MicrosoftGraphTodoTaskList]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTodo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.lists = kwargs.get('lists', None)


class MicrosoftGraphTodoTask(MicrosoftGraphEntity):
    """todoTask.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param body: itemBody.
    :type body: ~files.models.MicrosoftGraphItemBody
    :param body_last_modified_date_time:
    :type body_last_modified_date_time: ~datetime.datetime
    :param completed_date_time: dateTimeTimeZone.
    :type completed_date_time: ~files.models.MicrosoftGraphDateTimeZone
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param due_date_time: dateTimeTimeZone.
    :type due_date_time: ~files.models.MicrosoftGraphDateTimeZone
    :param importance:  Possible values include: "low", "normal", "high".
    :type importance: str or ~files.models.MicrosoftGraphImportance
    :param is_reminder_on:
    :type is_reminder_on: bool
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param recurrence: patternedRecurrence.
    :type recurrence: ~files.models.MicrosoftGraphPatternedRecurrence
    :param reminder_date_time: dateTimeTimeZone.
    :type reminder_date_time: ~files.models.MicrosoftGraphDateTimeZone
    :param status:  Possible values include: "notStarted", "inProgress", "completed",
     "waitingOnOthers", "deferred".
    :type status: str or ~files.models.MicrosoftGraphTaskStatus
    :param title:
    :type title: str
    :param extensions:
    :type extensions: list[~files.models.MicrosoftGraphExtension]
    :param linked_resources:
    :type linked_resources: list[~files.models.MicrosoftGraphLinkedResource]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'body_last_modified_date_time': {'key': 'bodyLastModifiedDateTime', 'type': 'iso-8601'},
        'completed_date_time': {'key': 'completedDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'due_date_time': {'key': 'dueDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'importance': {'key': 'importance', 'type': 'str'},
        'is_reminder_on': {'key': 'isReminderOn', 'type': 'bool'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'recurrence': {'key': 'recurrence', 'type': 'MicrosoftGraphPatternedRecurrence'},
        'reminder_date_time': {'key': 'reminderDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'status': {'key': 'status', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphExtension]'},
        'linked_resources': {'key': 'linkedResources', 'type': '[MicrosoftGraphLinkedResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTodoTask, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.body = kwargs.get('body', None)
        self.body_last_modified_date_time = kwargs.get('body_last_modified_date_time', None)
        self.completed_date_time = kwargs.get('completed_date_time', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.due_date_time = kwargs.get('due_date_time', None)
        self.importance = kwargs.get('importance', None)
        self.is_reminder_on = kwargs.get('is_reminder_on', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.recurrence = kwargs.get('recurrence', None)
        self.reminder_date_time = kwargs.get('reminder_date_time', None)
        self.status = kwargs.get('status', None)
        self.title = kwargs.get('title', None)
        self.extensions = kwargs.get('extensions', None)
        self.linked_resources = kwargs.get('linked_resources', None)


class MicrosoftGraphTodoTaskList(MicrosoftGraphEntity):
    """todoTaskList.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param is_owner:
    :type is_owner: bool
    :param is_shared:
    :type is_shared: bool
    :param wellknown_list_name:  Possible values include: "none", "defaultList", "flaggedEmails",
     "unknownFutureValue".
    :type wellknown_list_name: str or ~files.models.MicrosoftGraphWellknownListName
    :param extensions:
    :type extensions: list[~files.models.MicrosoftGraphExtension]
    :param tasks:
    :type tasks: list[~files.models.MicrosoftGraphTodoTask]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_owner': {'key': 'isOwner', 'type': 'bool'},
        'is_shared': {'key': 'isShared', 'type': 'bool'},
        'wellknown_list_name': {'key': 'wellknownListName', 'type': 'str'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphExtension]'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphTodoTask]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTodoTaskList, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.is_owner = kwargs.get('is_owner', None)
        self.is_shared = kwargs.get('is_shared', None)
        self.wellknown_list_name = kwargs.get('wellknown_list_name', None)
        self.extensions = kwargs.get('extensions', None)
        self.tasks = kwargs.get('tasks', None)


class MicrosoftGraphTrending(MicrosoftGraphEntity):
    """trending.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param resource_reference: resourceReference.
    :type resource_reference: ~files.models.MicrosoftGraphResourceReference
    :param resource_visualization: resourceVisualization.
    :type resource_visualization: ~files.models.MicrosoftGraphResourceVisualization
    :param weight: Value indicating how much the document is currently trending. The larger the
     number, the more the document is currently trending around the user (the more relevant it is).
     Returned documents are sorted by this value.
    :type weight: float
    :param resource: entity.
    :type resource: ~files.models.MicrosoftGraphEntity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'resource_reference': {'key': 'resourceReference', 'type': 'MicrosoftGraphResourceReference'},
        'resource_visualization': {'key': 'resourceVisualization', 'type': 'MicrosoftGraphResourceVisualization'},
        'weight': {'key': 'weight', 'type': 'float'},
        'resource': {'key': 'resource', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTrending, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.resource_reference = kwargs.get('resource_reference', None)
        self.resource_visualization = kwargs.get('resource_visualization', None)
        self.weight = kwargs.get('weight', None)
        self.resource = kwargs.get('resource', None)


class MicrosoftGraphTypedEmailAddress(MicrosoftGraphEmailAddress):
    """typedEmailAddress.

    :param address: The email address of the person or entity.
    :type address: str
    :param name: The display name of the person or entity.
    :type name: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param other_label:
    :type other_label: str
    :param type:  Possible values include: "unknown", "work", "personal", "main", "other".
    :type type: str or ~files.models.MicrosoftGraphEmailType
    """

    _attribute_map = {
        'address': {'key': 'address', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'other_label': {'key': 'otherLabel', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTypedEmailAddress, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.other_label = kwargs.get('other_label', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphUsageDetails(msrest.serialization.Model):
    """usageDetails.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_accessed_date_time: The date and time the resource was last accessed by the user.
     The timestamp represents date and time information using ISO 8601 format and is always in UTC
     time. For example, midnight UTC on Jan 1, 2014 would look like this: 2014-01-01T00:00:00Z.
     Read-only.
    :type last_accessed_date_time: ~datetime.datetime
    :param last_modified_date_time: The date and time the resource was last modified by the user.
     The timestamp represents date and time information using ISO 8601 format and is always in UTC
     time. For example, midnight UTC on Jan 1, 2014 would look like this: 2014-01-01T00:00:00Z.
     Read-only.
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_accessed_date_time': {'key': 'lastAccessedDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUsageDetails, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.last_accessed_date_time = kwargs.get('last_accessed_date_time', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class MicrosoftGraphUsedInsight(MicrosoftGraphEntity):
    """usedInsight.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_used: usageDetails.
    :type last_used: ~files.models.MicrosoftGraphUsageDetails
    :param resource_reference: resourceReference.
    :type resource_reference: ~files.models.MicrosoftGraphResourceReference
    :param resource_visualization: resourceVisualization.
    :type resource_visualization: ~files.models.MicrosoftGraphResourceVisualization
    :param resource: entity.
    :type resource: ~files.models.MicrosoftGraphEntity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_used': {'key': 'lastUsed', 'type': 'MicrosoftGraphUsageDetails'},
        'resource_reference': {'key': 'resourceReference', 'type': 'MicrosoftGraphResourceReference'},
        'resource_visualization': {'key': 'resourceVisualization', 'type': 'MicrosoftGraphResourceVisualization'},
        'resource': {'key': 'resource', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUsedInsight, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.last_used = kwargs.get('last_used', None)
        self.resource_reference = kwargs.get('resource_reference', None)
        self.resource_visualization = kwargs.get('resource_visualization', None)
        self.resource = kwargs.get('resource', None)


class MicrosoftGraphUser(MicrosoftGraphDirectoryObject):
    """Represents an Azure Active Directory user object.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param sign_in_activity: signInActivity.
    :type sign_in_activity: ~files.models.MicrosoftGraphSignInActivity
    :param account_enabled: true if the account is enabled; otherwise, false. This property is
     required when a user is created. Supports $filter.
    :type account_enabled: bool
    :param age_group: Sets the age group of the user. Allowed values: null, minor, notAdult and
     adult. Refer to the legal age group property definitions for further information.
    :type age_group: str
    :param assigned_licenses: The licenses that are assigned to the user. Not nullable.
    :type assigned_licenses: list[~files.models.MicrosoftGraphAssignedLicense]
    :param assigned_plans: The plans that are assigned to the user. Read-only. Not nullable.
    :type assigned_plans: list[~files.models.MicrosoftGraphAssignedPlan]
    :param business_phones: The telephone numbers for the user. NOTE: Although this is a string
     collection, only one number can be set for this property.
    :type business_phones: list[str]
    :param city: The city in which the user is located. Supports $filter.
    :type city: str
    :param company_name: The company name which the user is associated. This property can be useful
     for describing the company that an external user comes from. The maximum length of the company
     name is 64 chararcters.Returned only on $select.
    :type company_name: str
    :param consent_provided_for_minor: Sets whether consent has been obtained for minors. Allowed
     values: null, granted, denied and notRequired. Refer to the legal age group property
     definitions for further information.
    :type consent_provided_for_minor: str
    :param country: The country/region in which the user is located; for example, 'US' or 'UK'.
     Supports $filter.
    :type country: str
    :param created_date_time: The created date of the user object.
    :type created_date_time: ~datetime.datetime
    :param creation_type: Indicates whether the user account was created as a regular school or
     work account (null), an external account (Invitation), a local account for an Azure Active
     Directory B2C tenant (LocalAccount) or self-service sign-up using email verification
     (EmailVerified). Read-only.
    :type creation_type: str
    :param department: The name for the department in which the user works. Supports $filter.
    :type department: str
    :param device_keys:
    :type device_keys: list[~files.models.MicrosoftGraphDeviceKey]
    :param display_name: The name displayed in the address book for the user. This is usually the
     combination of the user's first name, middle initial and last name. This property is required
     when a user is created and it cannot be cleared during updates. Supports $filter and $orderby.
    :type display_name: str
    :param employee_hire_date: The date and time when the user was hired or will start work in case
     of a future hire. Returned only on $select. Supports $filter.
    :type employee_hire_date: ~datetime.datetime
    :param employee_id: The employee identifier assigned to the user by the organization. Returned
     only on $select. Supports $filter.
    :type employee_id: str
    :param employee_org_data: employeeOrgData.
    :type employee_org_data: ~files.models.MicrosoftGraphEmployeeOrgData
    :param employee_type: Captures enterprise worker type: Employee, Contractor, Consultant,
     Vendor, etc. Returned only on $select. Supports $filter.
    :type employee_type: str
    :param external_user_state: For an external user invited to the tenant using the invitation
     API, this property represents the invited user's invitation status. For invited users, the
     state can be PendingAcceptance or Accepted, or null for all other users. Returned only on
     $select. Supports $filter with the supported values. For example: $filter=externalUserState eq
     'PendingAcceptance'.
    :type external_user_state: str
    :param external_user_state_change_date_time: Shows the timestamp for the latest change to the
     externalUserState property. Returned only on $select.
    :type external_user_state_change_date_time: str
    :param fax_number: The fax number of the user.
    :type fax_number: str
    :param given_name: The given name (first name) of the user. Supports $filter.
    :type given_name: str
    :param identities: Represents the identities that can be used to sign in to this user account.
     An identity can be provided by Microsoft (also known as a local account), by organizations, or
     by social identity providers such as Facebook, Google, and Microsoft, and tied to a user
     account. May contain multiple items with the same signInType value. Supports $filter.
    :type identities: list[~files.models.MicrosoftGraphObjectIdentity]
    :param im_addresses: The instant message voice over IP (VOIP) session initiation protocol (SIP)
     addresses for the user. Read-only.
    :type im_addresses: list[str]
    :param info_catalogs:
    :type info_catalogs: list[str]
    :param is_resource_account: Do not use – reserved for future use.
    :type is_resource_account: bool
    :param job_title: The user's job title. Supports $filter.
    :type job_title: str
    :param last_password_change_date_time: The time when this Azure AD user last changed their
     password. The date and time information uses ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type last_password_change_date_time: ~datetime.datetime
    :param legal_age_group_classification: Used by enterprise applications to determine the legal
     age group of the user. This property is read-only and calculated based on ageGroup and
     consentProvidedForMinor properties. Allowed values: null, minorWithOutParentalConsent,
     minorWithParentalConsent, minorNoParentalConsentRequired, notAdult and adult. Refer to the
     legal age group property definitions for further information.).
    :type legal_age_group_classification: str
    :param license_assignment_states: State of license assignments for this user. Read-only.
    :type license_assignment_states: list[~files.models.MicrosoftGraphLicenseAssignmentState]
    :param mail: The SMTP address for the user, for example, 'jeff@contoso.onmicrosoft.com'.
     Supports $filter.
    :type mail: str
    :param mail_nickname: The mail alias for the user. This property must be specified when a user
     is created. Supports $filter.
    :type mail_nickname: str
    :param mobile_phone: The primary cellular telephone number for the user.
    :type mobile_phone: str
    :param office_location: The office location in the user's place of business.
    :type office_location: str
    :param on_premises_distinguished_name: Contains the on-premises Active Directory distinguished
     name or DN. The property is only populated for customers who are synchronizing their on-
     premises directory to Azure Active Directory via Azure AD Connect. Read-only.
    :type on_premises_distinguished_name: str
    :param on_premises_domain_name: Contains the on-premises domainFQDN, also called dnsDomainName
     synchronized from the on-premises directory. The property is only populated for customers who
     are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect.
     Read-only.
    :type on_premises_domain_name: str
    :param on_premises_extension_attributes: onPremisesExtensionAttributes.
    :type on_premises_extension_attributes:
     ~files.models.MicrosoftGraphOnPremisesExtensionAttributes
    :param on_premises_immutable_id: This property is used to associate an on-premises Active
     Directory user account to their Azure AD user object. This property must be specified when
     creating a new user account in the Graph if you are using a federated domain for the user's
     userPrincipalName (UPN) property. Important: The $ and _ characters cannot be used when
     specifying this property. Supports $filter.
    :type on_premises_immutable_id: str
    :param on_premises_last_sync_date_time: Indicates the last time at which the object was synced
     with the on-premises directory; for example: '2013-02-16T03:04:54Z'. The Timestamp type
     represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type on_premises_last_sync_date_time: ~datetime.datetime
    :param on_premises_provisioning_errors: Errors when using Microsoft synchronization product
     during provisioning.
    :type on_premises_provisioning_errors:
     list[~files.models.MicrosoftGraphOnPremisesProvisioningError]
    :param on_premises_sam_account_name: Contains the on-premises samAccountName synchronized from
     the on-premises directory. The property is only populated for customers who are synchronizing
     their on-premises directory to Azure Active Directory via Azure AD Connect. Read-only.
    :type on_premises_sam_account_name: str
    :param on_premises_security_identifier: Contains the on-premises security identifier (SID) for
     the user that was synchronized from on-premises to the cloud. Read-only.
    :type on_premises_security_identifier: str
    :param on_premises_sync_enabled: true if this object is synced from an on-premises directory;
     false if this object was originally synced from an on-premises directory but is no longer
     synced; null if this object has never been synced from an on-premises directory (default).
     Read-only.
    :type on_premises_sync_enabled: bool
    :param on_premises_user_principal_name: Contains the on-premises userPrincipalName synchronized
     from the on-premises directory. The property is only populated for customers who are
     synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Read-
     only.
    :type on_premises_user_principal_name: str
    :param other_mails: A list of additional email addresses for the user; for example:
     ['bob@contoso.com', 'Robert@fabrikam.com']. Supports $filter.
    :type other_mails: list[str]
    :param password_policies: Specifies password policies for the user. This value is an
     enumeration with one possible value being 'DisableStrongPassword', which allows weaker
     passwords than the default policy to be specified. 'DisablePasswordExpiration' can also be
     specified. The two may be specified together; for example: 'DisablePasswordExpiration,
     DisableStrongPassword'.
    :type password_policies: str
    :param password_profile: passwordProfile.
    :type password_profile: ~files.models.MicrosoftGraphPasswordProfile
    :param postal_code: The postal code for the user's postal address. The postal code is specific
     to the user's country/region. In the United States of America, this attribute contains the ZIP
     code.
    :type postal_code: str
    :param preferred_data_location:
    :type preferred_data_location: str
    :param preferred_language: The preferred language for the user. Should follow ISO 639-1 Code;
     for example 'en-US'.
    :type preferred_language: str
    :param provisioned_plans: The plans that are provisioned for the user. Read-only. Not nullable.
    :type provisioned_plans: list[~files.models.MicrosoftGraphProvisionedPlan]
    :param proxy_addresses: For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']
     The any operator is required for filter expressions on multi-valued properties. Read-only, Not
     nullable. Supports $filter.
    :type proxy_addresses: list[str]
    :param refresh_tokens_valid_from_date_time: Any refresh tokens or sessions tokens (session
     cookies) issued before this time are invalid, and applications will get an error when using an
     invalid refresh or sessions token to acquire a delegated access token (to access APIs such as
     Microsoft Graph).  If this happens, the application will need to acquire a new refresh token by
     making a request to the authorize endpoint. Returned only on $select. Read-only.
    :type refresh_tokens_valid_from_date_time: ~datetime.datetime
    :param show_in_address_list: true if the Outlook global address list should contain this user,
     otherwise false. If not set, this will be treated as true. For users invited through the
     invitation manager, this property will be set to false.
    :type show_in_address_list: bool
    :param sign_in_sessions_valid_from_date_time: Any refresh tokens or sessions tokens (session
     cookies) issued before this time are invalid, and applications will get an error when using an
     invalid refresh or sessions token to acquire a delegated access token (to access APIs such as
     Microsoft Graph).  If this happens, the application will need to acquire a new refresh token by
     making a request to the authorize endpoint. Read-only. Use revokeSignInSessions to reset.
    :type sign_in_sessions_valid_from_date_time: ~datetime.datetime
    :param state: The state or province in the user's address. Supports $filter.
    :type state: str
    :param street_address: The street address of the user's place of business.
    :type street_address: str
    :param surname: The user's surname (family name or last name). Supports $filter.
    :type surname: str
    :param usage_location: A two letter country code (ISO standard 3166). Required for users that
     will be assigned licenses due to legal requirement to check for availability of services in
     countries.  Examples include: 'US', 'JP', and 'GB'. Not nullable. Supports $filter.
    :type usage_location: str
    :param user_principal_name: The user principal name (UPN) of the user. The UPN is an Internet-
     style login name for the user based on the Internet standard RFC 822. By convention, this
     should map to the user's email name. The general format is alias@domain, where domain must be
     present in the tenant's collection of verified domains. This property is required when a user
     is created. The verified domains for the tenant can be accessed from the verifiedDomains
     property of organization. Supports $filter and $orderby.
    :type user_principal_name: str
    :param user_type: A string value that can be used to classify user types in your directory,
     such as 'Member' and 'Guest'. Supports $filter.
    :type user_type: str
    :param mailbox_settings: mailboxSettings.
    :type mailbox_settings: ~files.models.MicrosoftGraphMailboxSettings
    :param device_enrollment_limit: The limit on the maximum number of devices that the user is
     permitted to enroll. Allowed values are 5 or 1000.
    :type device_enrollment_limit: int
    :param about_me: A freeform text entry field for the user to describe themselves.
    :type about_me: str
    :param birthday: The birthday of the user. The Timestamp type represents date and time
     information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
     1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type birthday: ~datetime.datetime
    :param hire_date: The hire date of the user. The Timestamp type represents date and time
     information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
     1, 2014 would look like this: '2014-01-01T00:00:00Z'. Returned only on $select.  Note: This
     property is specific to SharePoint Online. We recommend using the native employeeHireDate
     property to set and update hire date values using Microsoft Graph APIs.
    :type hire_date: ~datetime.datetime
    :param interests: A list for the user to describe their interests.
    :type interests: list[str]
    :param my_site: The URL for the user's personal site.
    :type my_site: str
    :param past_projects: A list for the user to enumerate their past projects.
    :type past_projects: list[str]
    :param preferred_name: The preferred name for the user.
    :type preferred_name: str
    :param responsibilities: A list for the user to enumerate their responsibilities.
    :type responsibilities: list[str]
    :param schools: A list for the user to enumerate the schools they have attended.
    :type schools: list[str]
    :param skills: A list for the user to enumerate their skills.
    :type skills: list[str]
    :param analytics: userAnalytics.
    :type analytics: ~files.models.MicrosoftGraphUserAnalytics
    :param information_protection: informationProtection.
    :type information_protection: ~files.models.MicrosoftGraphInformationProtection
    :param app_role_assignments:
    :type app_role_assignments: list[~files.models.MicrosoftGraphAppRoleAssignment]
    :param created_objects: Directory objects that were created by the user. Read-only. Nullable.
    :type created_objects: list[~files.models.MicrosoftGraphDirectoryObject]
    :param direct_reports: The users and contacts that report to the user. (The users and contacts
     that have their manager property set to this user.) Read-only. Nullable.
    :type direct_reports: list[~files.models.MicrosoftGraphDirectoryObject]
    :param license_details: A collection of this user's license details. Read-only.
    :type license_details: list[~files.models.MicrosoftGraphLicenseDetails]
    :param manager: Represents an Azure Active Directory object. The directoryObject type is the
     base type for many other directory entity types.
    :type manager: ~files.models.MicrosoftGraphDirectoryObject
    :param member_of: The groups and directory roles that the user is a member of. Read-only.
     Nullable.
    :type member_of: list[~files.models.MicrosoftGraphDirectoryObject]
    :param owned_devices: Devices that are owned by the user. Read-only. Nullable.
    :type owned_devices: list[~files.models.MicrosoftGraphDirectoryObject]
    :param owned_objects: Directory objects that are owned by the user. Read-only. Nullable.
    :type owned_objects: list[~files.models.MicrosoftGraphDirectoryObject]
    :param registered_devices: Devices that are registered for the user. Read-only. Nullable.
    :type registered_devices: list[~files.models.MicrosoftGraphDirectoryObject]
    :param scoped_role_member_of:
    :type scoped_role_member_of: list[~files.models.MicrosoftGraphScopedRoleMembership]
    :param transitive_member_of:
    :type transitive_member_of: list[~files.models.MicrosoftGraphDirectoryObject]
    :param calendar: calendar.
    :type calendar: ~files.models.MicrosoftGraphCalendar
    :param calendar_groups: The user's calendar groups. Read-only. Nullable.
    :type calendar_groups: list[~files.models.MicrosoftGraphCalendarGroup]
    :param calendars: The user's calendars. Read-only. Nullable.
    :type calendars: list[~files.models.MicrosoftGraphCalendar]
    :param calendar_view: The calendar view for the calendar. Read-only. Nullable.
    :type calendar_view: list[~files.models.MicrosoftGraphEvent]
    :param contact_folders: The user's contacts folders. Read-only. Nullable.
    :type contact_folders: list[~files.models.MicrosoftGraphContactFolder]
    :param contacts: The user's contacts. Read-only. Nullable.
    :type contacts: list[~files.models.MicrosoftGraphContact]
    :param events: The user's events. Default is to show Events under the Default Calendar. Read-
     only. Nullable.
    :type events: list[~files.models.MicrosoftGraphEvent]
    :param inference_classification: inferenceClassification.
    :type inference_classification: ~files.models.MicrosoftGraphInferenceClassification
    :param joined_groups:
    :type joined_groups: list[~files.models.MicrosoftGraphGroup]
    :param mail_folders: The user's mail folders. Read-only. Nullable.
    :type mail_folders: list[~files.models.MicrosoftGraphMailFolder]
    :param messages: The messages in a mailbox or folder. Read-only. Nullable.
    :type messages: list[~files.models.MicrosoftGraphMessage]
    :param outlook: outlookUser.
    :type outlook: ~files.models.MicrosoftGraphOutlookUser
    :param people: People that are relevant to the user. Read-only. Nullable.
    :type people: list[~files.models.MicrosoftGraphPerson]
    :param photo: profilePhoto.
    :type photo: ~files.models.MicrosoftGraphProfilePhoto
    :param photos:
    :type photos: list[~files.models.MicrosoftGraphProfilePhoto]
    :param drive: drive.
    :type drive: ~files.models.MicrosoftGraphDrive
    :param drives: A collection of drives available for this user. Read-only.
    :type drives: list[~files.models.MicrosoftGraphDrive]
    :param followed_sites:
    :type followed_sites: list[~files.models.MicrosoftGraphSite]
    :param extensions: The collection of open extensions defined for the user. Read-only. Nullable.
    :type extensions: list[~files.models.MicrosoftGraphExtension]
    :param app_consent_requests_for_approval:
    :type app_consent_requests_for_approval: list[~files.models.MicrosoftGraphAppConsentRequest]
    :param approvals:
    :type approvals: list[~files.models.MicrosoftGraphApproval]
    :param pending_access_review_instances:
    :type pending_access_review_instances: list[~files.models.MicrosoftGraphAccessReviewInstance]
    :param agreement_acceptances:
    :type agreement_acceptances: list[~files.models.MicrosoftGraphAgreementAcceptance]
    :param device_enrollment_configurations:
    :type device_enrollment_configurations:
     list[~files.models.MicrosoftGraphDeviceEnrollmentConfiguration]
    :param managed_devices: The managed devices associated with the user.
    :type managed_devices: list[~files.models.MicrosoftGraphManagedDevice]
    :param managed_app_registrations: Zero or more managed app registrations that belong to the
     user.
    :type managed_app_registrations: list[~files.models.MicrosoftGraphManagedAppRegistration]
    :param windows_information_protection_device_registrations: Zero or more WIP device
     registrations that belong to the user.
    :type windows_information_protection_device_registrations:
     list[~files.models.MicrosoftGraphWindowsInformationProtectionDeviceRegistration]
    :param device_management_troubleshooting_events: The list of troubleshooting events for this
     user.
    :type device_management_troubleshooting_events:
     list[~files.models.MicrosoftGraphDeviceManagementTroubleshootingEvent]
    :param mobile_app_intent_and_states: The list of troubleshooting events for this user.
    :type mobile_app_intent_and_states: list[~files.models.MicrosoftGraphMobileAppIntentAndState]
    :param mobile_app_troubleshooting_events: The list of mobile app troubleshooting events for
     this user.
    :type mobile_app_troubleshooting_events:
     list[~files.models.MicrosoftGraphMobileAppTroubleshootingEvent]
    :param notifications:
    :type notifications: list[~files.models.MicrosoftGraphNotification]
    :param planner: plannerUser.
    :type planner: ~files.models.MicrosoftGraphPlannerUser
    :param insights: itemInsights.
    :type insights: ~files.models.MicrosoftGraphItemInsights
    :param settings: userSettings.
    :type settings: ~files.models.MicrosoftGraphUserSettings
    :param onenote: onenote.
    :type onenote: ~files.models.MicrosoftGraphOnenote
    :param profile: profile.
    :type profile: ~files.models.MicrosoftGraphProfile
    :param activities: The user's activities across devices. Read-only. Nullable.
    :type activities: list[~files.models.MicrosoftGraphUserActivity]
    :param devices:
    :type devices: list[~files.models.MicrosoftGraphDevice]
    :param online_meetings:
    :type online_meetings: list[~files.models.MicrosoftGraphOnlineMeeting]
    :param presence: presence.
    :type presence: ~files.models.MicrosoftGraphPresence
    :param authentication: authentication.
    :type authentication: ~files.models.MicrosoftGraphAuthentication
    :param chats:
    :type chats: list[~files.models.MicrosoftGraphChat]
    :param joined_teams:
    :type joined_teams: list[~files.models.MicrosoftGraphTeam]
    :param teamwork: userTeamwork.
    :type teamwork: ~files.models.MicrosoftGraphUserTeamwork
    :param todo: todo.
    :type todo: ~files.models.MicrosoftGraphTodo
    """

    _validation = {
        'device_enrollment_limit': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'sign_in_activity': {'key': 'signInActivity', 'type': 'MicrosoftGraphSignInActivity'},
        'account_enabled': {'key': 'accountEnabled', 'type': 'bool'},
        'age_group': {'key': 'ageGroup', 'type': 'str'},
        'assigned_licenses': {'key': 'assignedLicenses', 'type': '[MicrosoftGraphAssignedLicense]'},
        'assigned_plans': {'key': 'assignedPlans', 'type': '[MicrosoftGraphAssignedPlan]'},
        'business_phones': {'key': 'businessPhones', 'type': '[str]'},
        'city': {'key': 'city', 'type': 'str'},
        'company_name': {'key': 'companyName', 'type': 'str'},
        'consent_provided_for_minor': {'key': 'consentProvidedForMinor', 'type': 'str'},
        'country': {'key': 'country', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'creation_type': {'key': 'creationType', 'type': 'str'},
        'department': {'key': 'department', 'type': 'str'},
        'device_keys': {'key': 'deviceKeys', 'type': '[MicrosoftGraphDeviceKey]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'employee_hire_date': {'key': 'employeeHireDate', 'type': 'iso-8601'},
        'employee_id': {'key': 'employeeId', 'type': 'str'},
        'employee_org_data': {'key': 'employeeOrgData', 'type': 'MicrosoftGraphEmployeeOrgData'},
        'employee_type': {'key': 'employeeType', 'type': 'str'},
        'external_user_state': {'key': 'externalUserState', 'type': 'str'},
        'external_user_state_change_date_time': {'key': 'externalUserStateChangeDateTime', 'type': 'str'},
        'fax_number': {'key': 'faxNumber', 'type': 'str'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'identities': {'key': 'identities', 'type': '[MicrosoftGraphObjectIdentity]'},
        'im_addresses': {'key': 'imAddresses', 'type': '[str]'},
        'info_catalogs': {'key': 'infoCatalogs', 'type': '[str]'},
        'is_resource_account': {'key': 'isResourceAccount', 'type': 'bool'},
        'job_title': {'key': 'jobTitle', 'type': 'str'},
        'last_password_change_date_time': {'key': 'lastPasswordChangeDateTime', 'type': 'iso-8601'},
        'legal_age_group_classification': {'key': 'legalAgeGroupClassification', 'type': 'str'},
        'license_assignment_states': {'key': 'licenseAssignmentStates', 'type': '[MicrosoftGraphLicenseAssignmentState]'},
        'mail': {'key': 'mail', 'type': 'str'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'mobile_phone': {'key': 'mobilePhone', 'type': 'str'},
        'office_location': {'key': 'officeLocation', 'type': 'str'},
        'on_premises_distinguished_name': {'key': 'onPremisesDistinguishedName', 'type': 'str'},
        'on_premises_domain_name': {'key': 'onPremisesDomainName', 'type': 'str'},
        'on_premises_extension_attributes': {'key': 'onPremisesExtensionAttributes', 'type': 'MicrosoftGraphOnPremisesExtensionAttributes'},
        'on_premises_immutable_id': {'key': 'onPremisesImmutableId', 'type': 'str'},
        'on_premises_last_sync_date_time': {'key': 'onPremisesLastSyncDateTime', 'type': 'iso-8601'},
        'on_premises_provisioning_errors': {'key': 'onPremisesProvisioningErrors', 'type': '[MicrosoftGraphOnPremisesProvisioningError]'},
        'on_premises_sam_account_name': {'key': 'onPremisesSamAccountName', 'type': 'str'},
        'on_premises_security_identifier': {'key': 'onPremisesSecurityIdentifier', 'type': 'str'},
        'on_premises_sync_enabled': {'key': 'onPremisesSyncEnabled', 'type': 'bool'},
        'on_premises_user_principal_name': {'key': 'onPremisesUserPrincipalName', 'type': 'str'},
        'other_mails': {'key': 'otherMails', 'type': '[str]'},
        'password_policies': {'key': 'passwordPolicies', 'type': 'str'},
        'password_profile': {'key': 'passwordProfile', 'type': 'MicrosoftGraphPasswordProfile'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'preferred_data_location': {'key': 'preferredDataLocation', 'type': 'str'},
        'preferred_language': {'key': 'preferredLanguage', 'type': 'str'},
        'provisioned_plans': {'key': 'provisionedPlans', 'type': '[MicrosoftGraphProvisionedPlan]'},
        'proxy_addresses': {'key': 'proxyAddresses', 'type': '[str]'},
        'refresh_tokens_valid_from_date_time': {'key': 'refreshTokensValidFromDateTime', 'type': 'iso-8601'},
        'show_in_address_list': {'key': 'showInAddressList', 'type': 'bool'},
        'sign_in_sessions_valid_from_date_time': {'key': 'signInSessionsValidFromDateTime', 'type': 'iso-8601'},
        'state': {'key': 'state', 'type': 'str'},
        'street_address': {'key': 'streetAddress', 'type': 'str'},
        'surname': {'key': 'surname', 'type': 'str'},
        'usage_location': {'key': 'usageLocation', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'user_type': {'key': 'userType', 'type': 'str'},
        'mailbox_settings': {'key': 'mailboxSettings', 'type': 'MicrosoftGraphMailboxSettings'},
        'device_enrollment_limit': {'key': 'deviceEnrollmentLimit', 'type': 'int'},
        'about_me': {'key': 'aboutMe', 'type': 'str'},
        'birthday': {'key': 'birthday', 'type': 'iso-8601'},
        'hire_date': {'key': 'hireDate', 'type': 'iso-8601'},
        'interests': {'key': 'interests', 'type': '[str]'},
        'my_site': {'key': 'mySite', 'type': 'str'},
        'past_projects': {'key': 'pastProjects', 'type': '[str]'},
        'preferred_name': {'key': 'preferredName', 'type': 'str'},
        'responsibilities': {'key': 'responsibilities', 'type': '[str]'},
        'schools': {'key': 'schools', 'type': '[str]'},
        'skills': {'key': 'skills', 'type': '[str]'},
        'analytics': {'key': 'analytics', 'type': 'MicrosoftGraphUserAnalytics'},
        'information_protection': {'key': 'informationProtection', 'type': 'MicrosoftGraphInformationProtection'},
        'app_role_assignments': {'key': 'appRoleAssignments', 'type': '[MicrosoftGraphAppRoleAssignment]'},
        'created_objects': {'key': 'createdObjects', 'type': '[MicrosoftGraphDirectoryObject]'},
        'direct_reports': {'key': 'directReports', 'type': '[MicrosoftGraphDirectoryObject]'},
        'license_details': {'key': 'licenseDetails', 'type': '[MicrosoftGraphLicenseDetails]'},
        'manager': {'key': 'manager', 'type': 'MicrosoftGraphDirectoryObject'},
        'member_of': {'key': 'memberOf', 'type': '[MicrosoftGraphDirectoryObject]'},
        'owned_devices': {'key': 'ownedDevices', 'type': '[MicrosoftGraphDirectoryObject]'},
        'owned_objects': {'key': 'ownedObjects', 'type': '[MicrosoftGraphDirectoryObject]'},
        'registered_devices': {'key': 'registeredDevices', 'type': '[MicrosoftGraphDirectoryObject]'},
        'scoped_role_member_of': {'key': 'scopedRoleMemberOf', 'type': '[MicrosoftGraphScopedRoleMembership]'},
        'transitive_member_of': {'key': 'transitiveMemberOf', 'type': '[MicrosoftGraphDirectoryObject]'},
        'calendar': {'key': 'calendar', 'type': 'MicrosoftGraphCalendar'},
        'calendar_groups': {'key': 'calendarGroups', 'type': '[MicrosoftGraphCalendarGroup]'},
        'calendars': {'key': 'calendars', 'type': '[MicrosoftGraphCalendar]'},
        'calendar_view': {'key': 'calendarView', 'type': '[MicrosoftGraphEvent]'},
        'contact_folders': {'key': 'contactFolders', 'type': '[MicrosoftGraphContactFolder]'},
        'contacts': {'key': 'contacts', 'type': '[MicrosoftGraphContact]'},
        'events': {'key': 'events', 'type': '[MicrosoftGraphEvent]'},
        'inference_classification': {'key': 'inferenceClassification', 'type': 'MicrosoftGraphInferenceClassification'},
        'joined_groups': {'key': 'joinedGroups', 'type': '[MicrosoftGraphGroup]'},
        'mail_folders': {'key': 'mailFolders', 'type': '[MicrosoftGraphMailFolder]'},
        'messages': {'key': 'messages', 'type': '[MicrosoftGraphMessage]'},
        'outlook': {'key': 'outlook', 'type': 'MicrosoftGraphOutlookUser'},
        'people': {'key': 'people', 'type': '[MicrosoftGraphPerson]'},
        'photo': {'key': 'photo', 'type': 'MicrosoftGraphProfilePhoto'},
        'photos': {'key': 'photos', 'type': '[MicrosoftGraphProfilePhoto]'},
        'drive': {'key': 'drive', 'type': 'MicrosoftGraphDrive'},
        'drives': {'key': 'drives', 'type': '[MicrosoftGraphDrive]'},
        'followed_sites': {'key': 'followedSites', 'type': '[MicrosoftGraphSite]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphExtension]'},
        'app_consent_requests_for_approval': {'key': 'appConsentRequestsForApproval', 'type': '[MicrosoftGraphAppConsentRequest]'},
        'approvals': {'key': 'approvals', 'type': '[MicrosoftGraphApproval]'},
        'pending_access_review_instances': {'key': 'pendingAccessReviewInstances', 'type': '[MicrosoftGraphAccessReviewInstance]'},
        'agreement_acceptances': {'key': 'agreementAcceptances', 'type': '[MicrosoftGraphAgreementAcceptance]'},
        'device_enrollment_configurations': {'key': 'deviceEnrollmentConfigurations', 'type': '[MicrosoftGraphDeviceEnrollmentConfiguration]'},
        'managed_devices': {'key': 'managedDevices', 'type': '[MicrosoftGraphManagedDevice]'},
        'managed_app_registrations': {'key': 'managedAppRegistrations', 'type': '[MicrosoftGraphManagedAppRegistration]'},
        'windows_information_protection_device_registrations': {'key': 'windowsInformationProtectionDeviceRegistrations', 'type': '[MicrosoftGraphWindowsInformationProtectionDeviceRegistration]'},
        'device_management_troubleshooting_events': {'key': 'deviceManagementTroubleshootingEvents', 'type': '[MicrosoftGraphDeviceManagementTroubleshootingEvent]'},
        'mobile_app_intent_and_states': {'key': 'mobileAppIntentAndStates', 'type': '[MicrosoftGraphMobileAppIntentAndState]'},
        'mobile_app_troubleshooting_events': {'key': 'mobileAppTroubleshootingEvents', 'type': '[MicrosoftGraphMobileAppTroubleshootingEvent]'},
        'notifications': {'key': 'notifications', 'type': '[MicrosoftGraphNotification]'},
        'planner': {'key': 'planner', 'type': 'MicrosoftGraphPlannerUser'},
        'insights': {'key': 'insights', 'type': 'MicrosoftGraphItemInsights'},
        'settings': {'key': 'settings', 'type': 'MicrosoftGraphUserSettings'},
        'onenote': {'key': 'onenote', 'type': 'MicrosoftGraphOnenote'},
        'profile': {'key': 'profile', 'type': 'MicrosoftGraphProfile'},
        'activities': {'key': 'activities', 'type': '[MicrosoftGraphUserActivity]'},
        'devices': {'key': 'devices', 'type': '[MicrosoftGraphDevice]'},
        'online_meetings': {'key': 'onlineMeetings', 'type': '[MicrosoftGraphOnlineMeeting]'},
        'presence': {'key': 'presence', 'type': 'MicrosoftGraphPresence'},
        'authentication': {'key': 'authentication', 'type': 'MicrosoftGraphAuthentication'},
        'chats': {'key': 'chats', 'type': '[MicrosoftGraphChat]'},
        'joined_teams': {'key': 'joinedTeams', 'type': '[MicrosoftGraphTeam]'},
        'teamwork': {'key': 'teamwork', 'type': 'MicrosoftGraphUserTeamwork'},
        'todo': {'key': 'todo', 'type': 'MicrosoftGraphTodo'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUser, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.sign_in_activity = kwargs.get('sign_in_activity', None)
        self.account_enabled = kwargs.get('account_enabled', None)
        self.age_group = kwargs.get('age_group', None)
        self.assigned_licenses = kwargs.get('assigned_licenses', None)
        self.assigned_plans = kwargs.get('assigned_plans', None)
        self.business_phones = kwargs.get('business_phones', None)
        self.city = kwargs.get('city', None)
        self.company_name = kwargs.get('company_name', None)
        self.consent_provided_for_minor = kwargs.get('consent_provided_for_minor', None)
        self.country = kwargs.get('country', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.creation_type = kwargs.get('creation_type', None)
        self.department = kwargs.get('department', None)
        self.device_keys = kwargs.get('device_keys', None)
        self.display_name = kwargs.get('display_name', None)
        self.employee_hire_date = kwargs.get('employee_hire_date', None)
        self.employee_id = kwargs.get('employee_id', None)
        self.employee_org_data = kwargs.get('employee_org_data', None)
        self.employee_type = kwargs.get('employee_type', None)
        self.external_user_state = kwargs.get('external_user_state', None)
        self.external_user_state_change_date_time = kwargs.get('external_user_state_change_date_time', None)
        self.fax_number = kwargs.get('fax_number', None)
        self.given_name = kwargs.get('given_name', None)
        self.identities = kwargs.get('identities', None)
        self.im_addresses = kwargs.get('im_addresses', None)
        self.info_catalogs = kwargs.get('info_catalogs', None)
        self.is_resource_account = kwargs.get('is_resource_account', None)
        self.job_title = kwargs.get('job_title', None)
        self.last_password_change_date_time = kwargs.get('last_password_change_date_time', None)
        self.legal_age_group_classification = kwargs.get('legal_age_group_classification', None)
        self.license_assignment_states = kwargs.get('license_assignment_states', None)
        self.mail = kwargs.get('mail', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
        self.mobile_phone = kwargs.get('mobile_phone', None)
        self.office_location = kwargs.get('office_location', None)
        self.on_premises_distinguished_name = kwargs.get('on_premises_distinguished_name', None)
        self.on_premises_domain_name = kwargs.get('on_premises_domain_name', None)
        self.on_premises_extension_attributes = kwargs.get('on_premises_extension_attributes', None)
        self.on_premises_immutable_id = kwargs.get('on_premises_immutable_id', None)
        self.on_premises_last_sync_date_time = kwargs.get('on_premises_last_sync_date_time', None)
        self.on_premises_provisioning_errors = kwargs.get('on_premises_provisioning_errors', None)
        self.on_premises_sam_account_name = kwargs.get('on_premises_sam_account_name', None)
        self.on_premises_security_identifier = kwargs.get('on_premises_security_identifier', None)
        self.on_premises_sync_enabled = kwargs.get('on_premises_sync_enabled', None)
        self.on_premises_user_principal_name = kwargs.get('on_premises_user_principal_name', None)
        self.other_mails = kwargs.get('other_mails', None)
        self.password_policies = kwargs.get('password_policies', None)
        self.password_profile = kwargs.get('password_profile', None)
        self.postal_code = kwargs.get('postal_code', None)
        self.preferred_data_location = kwargs.get('preferred_data_location', None)
        self.preferred_language = kwargs.get('preferred_language', None)
        self.provisioned_plans = kwargs.get('provisioned_plans', None)
        self.proxy_addresses = kwargs.get('proxy_addresses', None)
        self.refresh_tokens_valid_from_date_time = kwargs.get('refresh_tokens_valid_from_date_time', None)
        self.show_in_address_list = kwargs.get('show_in_address_list', None)
        self.sign_in_sessions_valid_from_date_time = kwargs.get('sign_in_sessions_valid_from_date_time', None)
        self.state = kwargs.get('state', None)
        self.street_address = kwargs.get('street_address', None)
        self.surname = kwargs.get('surname', None)
        self.usage_location = kwargs.get('usage_location', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)
        self.user_type = kwargs.get('user_type', None)
        self.mailbox_settings = kwargs.get('mailbox_settings', None)
        self.device_enrollment_limit = kwargs.get('device_enrollment_limit', None)
        self.about_me = kwargs.get('about_me', None)
        self.birthday = kwargs.get('birthday', None)
        self.hire_date = kwargs.get('hire_date', None)
        self.interests = kwargs.get('interests', None)
        self.my_site = kwargs.get('my_site', None)
        self.past_projects = kwargs.get('past_projects', None)
        self.preferred_name = kwargs.get('preferred_name', None)
        self.responsibilities = kwargs.get('responsibilities', None)
        self.schools = kwargs.get('schools', None)
        self.skills = kwargs.get('skills', None)
        self.analytics = kwargs.get('analytics', None)
        self.information_protection = kwargs.get('information_protection', None)
        self.app_role_assignments = kwargs.get('app_role_assignments', None)
        self.created_objects = kwargs.get('created_objects', None)
        self.direct_reports = kwargs.get('direct_reports', None)
        self.license_details = kwargs.get('license_details', None)
        self.manager = kwargs.get('manager', None)
        self.member_of = kwargs.get('member_of', None)
        self.owned_devices = kwargs.get('owned_devices', None)
        self.owned_objects = kwargs.get('owned_objects', None)
        self.registered_devices = kwargs.get('registered_devices', None)
        self.scoped_role_member_of = kwargs.get('scoped_role_member_of', None)
        self.transitive_member_of = kwargs.get('transitive_member_of', None)
        self.calendar = kwargs.get('calendar', None)
        self.calendar_groups = kwargs.get('calendar_groups', None)
        self.calendars = kwargs.get('calendars', None)
        self.calendar_view = kwargs.get('calendar_view', None)
        self.contact_folders = kwargs.get('contact_folders', None)
        self.contacts = kwargs.get('contacts', None)
        self.events = kwargs.get('events', None)
        self.inference_classification = kwargs.get('inference_classification', None)
        self.joined_groups = kwargs.get('joined_groups', None)
        self.mail_folders = kwargs.get('mail_folders', None)
        self.messages = kwargs.get('messages', None)
        self.outlook = kwargs.get('outlook', None)
        self.people = kwargs.get('people', None)
        self.photo = kwargs.get('photo', None)
        self.photos = kwargs.get('photos', None)
        self.drive = kwargs.get('drive', None)
        self.drives = kwargs.get('drives', None)
        self.followed_sites = kwargs.get('followed_sites', None)
        self.extensions = kwargs.get('extensions', None)
        self.app_consent_requests_for_approval = kwargs.get('app_consent_requests_for_approval', None)
        self.approvals = kwargs.get('approvals', None)
        self.pending_access_review_instances = kwargs.get('pending_access_review_instances', None)
        self.agreement_acceptances = kwargs.get('agreement_acceptances', None)
        self.device_enrollment_configurations = kwargs.get('device_enrollment_configurations', None)
        self.managed_devices = kwargs.get('managed_devices', None)
        self.managed_app_registrations = kwargs.get('managed_app_registrations', None)
        self.windows_information_protection_device_registrations = kwargs.get('windows_information_protection_device_registrations', None)
        self.device_management_troubleshooting_events = kwargs.get('device_management_troubleshooting_events', None)
        self.mobile_app_intent_and_states = kwargs.get('mobile_app_intent_and_states', None)
        self.mobile_app_troubleshooting_events = kwargs.get('mobile_app_troubleshooting_events', None)
        self.notifications = kwargs.get('notifications', None)
        self.planner = kwargs.get('planner', None)
        self.insights = kwargs.get('insights', None)
        self.settings = kwargs.get('settings', None)
        self.onenote = kwargs.get('onenote', None)
        self.profile = kwargs.get('profile', None)
        self.activities = kwargs.get('activities', None)
        self.devices = kwargs.get('devices', None)
        self.online_meetings = kwargs.get('online_meetings', None)
        self.presence = kwargs.get('presence', None)
        self.authentication = kwargs.get('authentication', None)
        self.chats = kwargs.get('chats', None)
        self.joined_teams = kwargs.get('joined_teams', None)
        self.teamwork = kwargs.get('teamwork', None)
        self.todo = kwargs.get('todo', None)


class MicrosoftGraphUserAccountInformation(MicrosoftGraphItemFacet):
    """userAccountInformation.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param age_group:
    :type age_group: str
    :param country_code:
    :type country_code: str
    :param preferred_language_tag: localeInfo.
    :type preferred_language_tag: ~files.models.MicrosoftGraphLocaleInfo
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'age_group': {'key': 'ageGroup', 'type': 'str'},
        'country_code': {'key': 'countryCode', 'type': 'str'},
        'preferred_language_tag': {'key': 'preferredLanguageTag', 'type': 'MicrosoftGraphLocaleInfo'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUserAccountInformation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.age_group = kwargs.get('age_group', None)
        self.country_code = kwargs.get('country_code', None)
        self.preferred_language_tag = kwargs.get('preferred_language_tag', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class MicrosoftGraphUserActivity(MicrosoftGraphEntity):
    """userActivity.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param activation_url: Required. URL used to launch the activity in the best native experience
     represented by the appId. Might launch a web-based app if no native app exists.
    :type activation_url: str
    :param activity_source_host: Required. URL for the domain representing the cross-platform
     identity mapping for the app. Mapping is stored either as a JSON file hosted on the domain or
     configurable via Windows Dev Center. The JSON file is named cross-platform-app-identifiers and
     is hosted at root of your HTTPS domain, either at the top level domain or include a sub domain.
     For example: https://contoso.com or https://myapp.contoso.com but NOT
     https://myapp.contoso.com/somepath. You must have a unique file and domain (or sub domain) per
     cross-platform app identity. For example, a separate file and domain is needed for Word vs.
     PowerPoint.
    :type activity_source_host: str
    :param app_activity_id: Required. The unique activity ID in the context of the app - supplied
     by caller and immutable thereafter.
    :type app_activity_id: str
    :param app_display_name: Optional. Short text description of the app used to generate the
     activity for use in cases when the app is not installed on the user’s local device.
    :type app_display_name: str
    :param content_info: Json.
    :type content_info: dict[str, object]
    :param content_url: Optional. Used in the event the content can be rendered outside of a native
     or web-based app experience (for example, a pointer to an item in an RSS feed).
    :type content_url: str
    :param created_date_time: Set by the server. DateTime in UTC when the object was created on the
     server.
    :type created_date_time: ~datetime.datetime
    :param expiration_date_time: Set by the server. DateTime in UTC when the object expired on the
     server.
    :type expiration_date_time: ~datetime.datetime
    :param fallback_url: Optional. URL used to launch the activity in a web-based app, if
     available.
    :type fallback_url: str
    :param last_modified_date_time: Set by the server. DateTime in UTC when the object was modified
     on the server.
    :type last_modified_date_time: ~datetime.datetime
    :param status:  Possible values include: "active", "updated", "deleted", "ignored",
     "unknownFutureValue".
    :type status: str or ~files.models.MicrosoftGraphStatus
    :param user_timezone: Optional. The timezone in which the user's device used to generate the
     activity was located at activity creation time; values supplied as Olson IDs in order to
     support cross-platform representation.
    :type user_timezone: str
    :param visual_elements: visualInfo.
    :type visual_elements: ~files.models.MicrosoftGraphVisualInfo
    :param history_items: Optional. NavigationProperty/Containment; navigation property to the
     activity's historyItems.
    :type history_items: list[~files.models.MicrosoftGraphActivityHistoryItem]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'activation_url': {'key': 'activationUrl', 'type': 'str'},
        'activity_source_host': {'key': 'activitySourceHost', 'type': 'str'},
        'app_activity_id': {'key': 'appActivityId', 'type': 'str'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'content_info': {'key': 'contentInfo', 'type': '{object}'},
        'content_url': {'key': 'contentUrl', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'fallback_url': {'key': 'fallbackUrl', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'user_timezone': {'key': 'userTimezone', 'type': 'str'},
        'visual_elements': {'key': 'visualElements', 'type': 'MicrosoftGraphVisualInfo'},
        'history_items': {'key': 'historyItems', 'type': '[MicrosoftGraphActivityHistoryItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUserActivity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.activation_url = kwargs.get('activation_url', None)
        self.activity_source_host = kwargs.get('activity_source_host', None)
        self.app_activity_id = kwargs.get('app_activity_id', None)
        self.app_display_name = kwargs.get('app_display_name', None)
        self.content_info = kwargs.get('content_info', None)
        self.content_url = kwargs.get('content_url', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.fallback_url = kwargs.get('fallback_url', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.status = kwargs.get('status', None)
        self.user_timezone = kwargs.get('user_timezone', None)
        self.visual_elements = kwargs.get('visual_elements', None)
        self.history_items = kwargs.get('history_items', None)


class MicrosoftGraphUserAnalytics(MicrosoftGraphEntity):
    """userAnalytics.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param settings: settings.
    :type settings: ~files.models.MicrosoftGraphSettings
    :param activity_statistics:
    :type activity_statistics: list[~files.models.MicrosoftGraphActivityStatistics]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'settings': {'key': 'settings', 'type': 'MicrosoftGraphSettings'},
        'activity_statistics': {'key': 'activityStatistics', 'type': '[MicrosoftGraphActivityStatistics]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUserAnalytics, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.settings = kwargs.get('settings', None)
        self.activity_statistics = kwargs.get('activity_statistics', None)


class MicrosoftGraphUserConfiguration(MicrosoftGraphEntity):
    """userConfiguration.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param binary_data:
    :type binary_data: bytes
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'binary_data': {'key': 'binaryData', 'type': 'base64'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUserConfiguration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.binary_data = kwargs.get('binary_data', None)


class MicrosoftGraphUserConsentRequest(MicrosoftGraphRequest):
    """userConsentRequest.

    :param id: Read-only.
    :type id: str
    :param approval: approval.
    :type approval: ~files.models.MicrosoftGraphApproval
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param reason:
    :type reason: str
    :param status:
    :type status: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'approval': {'key': 'approval', 'type': 'MicrosoftGraphApproval'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'reason': {'key': 'reason', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUserConsentRequest, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.reason = kwargs.get('reason', None)
        self.status = kwargs.get('status', None)


class MicrosoftGraphUserIdentity(MicrosoftGraphIdentity):
    """userIdentity.

    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    :param id: Unique identifier for the identity.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ip_address: Indicates the client IP address used by user performing the activity (audit
     log only).
    :type ip_address: str
    :param user_principal_name: The userPrincipalName attribute of the user.
    :type user_principal_name: str
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUserIdentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class MicrosoftGraphUserPurpose(msrest.serialization.Model):
    """userPurpose.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:  Possible values include: "unknown", "user", "linked", "shared", "room",
     "equipment", "others".
    :type value: str or ~files.models.MicrosoftGraphMailboxRecipientType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUserPurpose, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)


class MicrosoftGraphUserScopeTeamsAppInstallation(MicrosoftGraphTeamsAppInstallation):
    """userScopeTeamsAppInstallation.

    :param id: Read-only.
    :type id: str
    :param teams_app: teamsApp.
    :type teams_app: ~files.models.MicrosoftGraphTeamsApp
    :param teams_app_definition: teamsAppDefinition.
    :type teams_app_definition: ~files.models.MicrosoftGraphTeamsAppDefinition
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param chat: chat.
    :type chat: ~files.models.MicrosoftGraphChat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'teams_app': {'key': 'teamsApp', 'type': 'MicrosoftGraphTeamsApp'},
        'teams_app_definition': {'key': 'teamsAppDefinition', 'type': 'MicrosoftGraphTeamsAppDefinition'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'chat': {'key': 'chat', 'type': 'MicrosoftGraphChat'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUserScopeTeamsAppInstallation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.chat = kwargs.get('chat', None)


class MicrosoftGraphUserSettings(MicrosoftGraphEntity):
    """userSettings.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param contribution_to_content_discovery_as_organization_disabled:
    :type contribution_to_content_discovery_as_organization_disabled: bool
    :param contribution_to_content_discovery_disabled:
    :type contribution_to_content_discovery_disabled: bool
    :param regional_and_language_settings: regionalAndLanguageSettings.
    :type regional_and_language_settings: ~files.models.MicrosoftGraphRegionalAndLanguageSettings
    :param shift_preferences: shiftPreferences.
    :type shift_preferences: ~files.models.MicrosoftGraphShiftPreferences
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'contribution_to_content_discovery_as_organization_disabled': {'key': 'contributionToContentDiscoveryAsOrganizationDisabled', 'type': 'bool'},
        'contribution_to_content_discovery_disabled': {'key': 'contributionToContentDiscoveryDisabled', 'type': 'bool'},
        'regional_and_language_settings': {'key': 'regionalAndLanguageSettings', 'type': 'MicrosoftGraphRegionalAndLanguageSettings'},
        'shift_preferences': {'key': 'shiftPreferences', 'type': 'MicrosoftGraphShiftPreferences'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUserSettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.contribution_to_content_discovery_as_organization_disabled = kwargs.get('contribution_to_content_discovery_as_organization_disabled', None)
        self.contribution_to_content_discovery_disabled = kwargs.get('contribution_to_content_discovery_disabled', None)
        self.regional_and_language_settings = kwargs.get('regional_and_language_settings', None)
        self.shift_preferences = kwargs.get('shift_preferences', None)


class MicrosoftGraphUserTeamwork(MicrosoftGraphEntity):
    """userTeamwork.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param installed_apps: The apps installed in the personal scope of this user.
    :type installed_apps: list[~files.models.MicrosoftGraphUserScopeTeamsAppInstallation]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'installed_apps': {'key': 'installedApps', 'type': '[MicrosoftGraphUserScopeTeamsAppInstallation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUserTeamwork, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.installed_apps = kwargs.get('installed_apps', None)


class MicrosoftGraphVersionAction(msrest.serialization.Model):
    """versionAction.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param new_version: The name of the new version that was created by this action.
    :type new_version: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'new_version': {'key': 'newVersion', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphVersionAction, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.new_version = kwargs.get('new_version', None)


class MicrosoftGraphVideo(msrest.serialization.Model):
    """video.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param audio_bits_per_sample: Number of audio bits per sample.
    :type audio_bits_per_sample: int
    :param audio_channels: Number of audio channels.
    :type audio_channels: int
    :param audio_format: Name of the audio format (AAC, MP3, etc.).
    :type audio_format: str
    :param audio_samples_per_second: Number of audio samples per second.
    :type audio_samples_per_second: int
    :param bitrate: Bit rate of the video in bits per second.
    :type bitrate: int
    :param duration: Duration of the file in milliseconds.
    :type duration: long
    :param four_cc: 'Four character code' name of the video format.
    :type four_cc: str
    :param frame_rate: Frame rate of the video.
    :type frame_rate: float
    :param height: Height of the video, in pixels.
    :type height: int
    :param width: Width of the video, in pixels.
    :type width: int
    """

    _validation = {
        'audio_bits_per_sample': {'maximum': 2147483647, 'minimum': -2147483648},
        'audio_channels': {'maximum': 2147483647, 'minimum': -2147483648},
        'audio_samples_per_second': {'maximum': 2147483647, 'minimum': -2147483648},
        'bitrate': {'maximum': 2147483647, 'minimum': -2147483648},
        'height': {'maximum': 2147483647, 'minimum': -2147483648},
        'width': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'audio_bits_per_sample': {'key': 'audioBitsPerSample', 'type': 'int'},
        'audio_channels': {'key': 'audioChannels', 'type': 'int'},
        'audio_format': {'key': 'audioFormat', 'type': 'str'},
        'audio_samples_per_second': {'key': 'audioSamplesPerSecond', 'type': 'int'},
        'bitrate': {'key': 'bitrate', 'type': 'int'},
        'duration': {'key': 'duration', 'type': 'long'},
        'four_cc': {'key': 'fourCC', 'type': 'str'},
        'frame_rate': {'key': 'frameRate', 'type': 'float'},
        'height': {'key': 'height', 'type': 'int'},
        'width': {'key': 'width', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphVideo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.audio_bits_per_sample = kwargs.get('audio_bits_per_sample', None)
        self.audio_channels = kwargs.get('audio_channels', None)
        self.audio_format = kwargs.get('audio_format', None)
        self.audio_samples_per_second = kwargs.get('audio_samples_per_second', None)
        self.bitrate = kwargs.get('bitrate', None)
        self.duration = kwargs.get('duration', None)
        self.four_cc = kwargs.get('four_cc', None)
        self.frame_rate = kwargs.get('frame_rate', None)
        self.height = kwargs.get('height', None)
        self.width = kwargs.get('width', None)


class MicrosoftGraphVisualInfo(msrest.serialization.Model):
    """visualInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param attribution: imageInfo.
    :type attribution: ~files.models.MicrosoftGraphImageInfo
    :param background_color: Optional. Background color used to render the activity in the UI -
     brand color for the application source of the activity. Must be a valid hex color.
    :type background_color: str
    :param content: Json.
    :type content: dict[str, object]
    :param description: Optional. Longer text description of the user's unique activity (example:
     document name, first sentence, and/or metadata).
    :type description: str
    :param display_text: Required. Short text description of the user's unique activity (for
     example, document name in cases where an activity refers to document creation).
    :type display_text: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'attribution': {'key': 'attribution', 'type': 'MicrosoftGraphImageInfo'},
        'background_color': {'key': 'backgroundColor', 'type': 'str'},
        'content': {'key': 'content', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_text': {'key': 'displayText', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphVisualInfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.attribution = kwargs.get('attribution', None)
        self.background_color = kwargs.get('background_color', None)
        self.content = kwargs.get('content', None)
        self.description = kwargs.get('description', None)
        self.display_text = kwargs.get('display_text', None)


class MicrosoftGraphVisualProperties(msrest.serialization.Model):
    """visualProperties.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param body:
    :type body: str
    :param title:
    :type title: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'body': {'key': 'body', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphVisualProperties, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.body = kwargs.get('body', None)
        self.title = kwargs.get('title', None)


class MicrosoftGraphWebAccount(MicrosoftGraphItemFacet):
    """webAccount.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description:
    :type description: str
    :param service: serviceInformation.
    :type service: ~files.models.MicrosoftGraphServiceInformation
    :param status_message:
    :type status_message: str
    :param user_id:
    :type user_id: str
    :param web_url:
    :type web_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'service': {'key': 'service', 'type': 'MicrosoftGraphServiceInformation'},
        'status_message': {'key': 'statusMessage', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWebAccount, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.service = kwargs.get('service', None)
        self.status_message = kwargs.get('status_message', None)
        self.user_id = kwargs.get('user_id', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphWebPart(msrest.serialization.Model):
    """webPart.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param data: sitePageData.
    :type data: dict[str, object]
    :param type:
    :type type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'data': {'key': 'data', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWebPart, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.data = kwargs.get('data', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphWebsite(msrest.serialization.Model):
    """website.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: The URL of the website.
    :type address: str
    :param display_name: The display name of the web site.
    :type display_name: str
    :param type:  Possible values include: "other", "home", "work", "blog", "profile".
    :type type: str or ~files.models.MicrosoftGraphWebsiteType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWebsite, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.display_name = kwargs.get('display_name', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphWindowsDeviceMalwareState(MicrosoftGraphEntity):
    """Malware detection entity.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param additional_information_url: Information URL to learn more about the malware.
    :type additional_information_url: str
    :param category:  Possible values include: "invalid", "adware", "spyware", "passwordStealer",
     "trojanDownloader", "worm", "backdoor", "remoteAccessTrojan", "trojan", "emailFlooder",
     "keylogger", "dialer", "monitoringSoftware", "browserModifier", "cookie", "browserPlugin",
     "aolExploit", "nuker", "securityDisabler", "jokeProgram", "hostileActiveXControl",
     "softwareBundler", "stealthNotifier", "settingsModifier", "toolBar", "remoteControlSoftware",
     "trojanFtp", "potentialUnwantedSoftware", "icqExploit", "trojanTelnet", "exploit",
     "filesharingProgram", "malwareCreationTool", "tool", "trojanDenialOfService", "trojanDropper",
     "trojanMassMailer", "trojanMonitoringSoftware", "trojanProxyServer", "virus", "known",
     "unknown", "spp", "behavior", "vulnerability", "policy", "enterpriseUnwantedSoftware",
     "ransom", "hipsRule".
    :type category: str or ~files.models.MicrosoftGraphWindowsMalwareCategory
    :param detection_count: Number of times the malware is detected.
    :type detection_count: int
    :param display_name: Malware name.
    :type display_name: str
    :param execution_state:  Possible values include: "unknown", "blocked", "allowed", "running",
     "notRunning".
    :type execution_state: str or ~files.models.MicrosoftGraphWindowsMalwareExecutionState
    :param initial_detection_date_time: Initial detection datetime of the malware.
    :type initial_detection_date_time: ~datetime.datetime
    :param last_state_change_date_time: The last time this particular threat was changed.
    :type last_state_change_date_time: ~datetime.datetime
    :param severity:  Possible values include: "unknown", "low", "moderate", "high", "severe".
    :type severity: str or ~files.models.MicrosoftGraphWindowsMalwareSeverity
    :param state:  Possible values include: "unknown", "detected", "cleaned", "quarantined",
     "removed", "allowed", "blocked", "cleanFailed", "quarantineFailed", "removeFailed",
     "allowFailed", "abandoned", "blockFailed".
    :type state: str or ~files.models.MicrosoftGraphWindowsMalwareState
    :param threat_state:  Possible values include: "active", "actionFailed", "manualStepsRequired",
     "fullScanRequired", "rebootRequired", "remediatedWithNonCriticalFailures", "quarantined",
     "removed", "cleaned", "allowed", "noStatusCleared".
    :type threat_state: str or ~files.models.MicrosoftGraphWindowsMalwareThreatState
    """

    _validation = {
        'detection_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'additional_information_url': {'key': 'additionalInformationUrl', 'type': 'str'},
        'category': {'key': 'category', 'type': 'str'},
        'detection_count': {'key': 'detectionCount', 'type': 'int'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'execution_state': {'key': 'executionState', 'type': 'str'},
        'initial_detection_date_time': {'key': 'initialDetectionDateTime', 'type': 'iso-8601'},
        'last_state_change_date_time': {'key': 'lastStateChangeDateTime', 'type': 'iso-8601'},
        'severity': {'key': 'severity', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'threat_state': {'key': 'threatState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWindowsDeviceMalwareState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_information_url = kwargs.get('additional_information_url', None)
        self.category = kwargs.get('category', None)
        self.detection_count = kwargs.get('detection_count', None)
        self.display_name = kwargs.get('display_name', None)
        self.execution_state = kwargs.get('execution_state', None)
        self.initial_detection_date_time = kwargs.get('initial_detection_date_time', None)
        self.last_state_change_date_time = kwargs.get('last_state_change_date_time', None)
        self.severity = kwargs.get('severity', None)
        self.state = kwargs.get('state', None)
        self.threat_state = kwargs.get('threat_state', None)


class MicrosoftGraphWindowsInformationProtectionDeviceRegistration(MicrosoftGraphEntity):
    """Represents device registration records for Bring-Your-Own-Device(BYOD) Windows devices.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param device_mac_address: Device Mac address.
    :type device_mac_address: str
    :param device_name: Device name.
    :type device_name: str
    :param device_registration_id: Device identifier for this device registration record.
    :type device_registration_id: str
    :param device_type: Device type, for example, Windows laptop VS Windows phone.
    :type device_type: str
    :param last_check_in_date_time: Last checkin time of the device.
    :type last_check_in_date_time: ~datetime.datetime
    :param user_id: UserId associated with this device registration record.
    :type user_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'device_mac_address': {'key': 'deviceMacAddress', 'type': 'str'},
        'device_name': {'key': 'deviceName', 'type': 'str'},
        'device_registration_id': {'key': 'deviceRegistrationId', 'type': 'str'},
        'device_type': {'key': 'deviceType', 'type': 'str'},
        'last_check_in_date_time': {'key': 'lastCheckInDateTime', 'type': 'iso-8601'},
        'user_id': {'key': 'userId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWindowsInformationProtectionDeviceRegistration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.device_mac_address = kwargs.get('device_mac_address', None)
        self.device_name = kwargs.get('device_name', None)
        self.device_registration_id = kwargs.get('device_registration_id', None)
        self.device_type = kwargs.get('device_type', None)
        self.last_check_in_date_time = kwargs.get('last_check_in_date_time', None)
        self.user_id = kwargs.get('user_id', None)


class MicrosoftGraphWindowsProtectionState(MicrosoftGraphEntity):
    """Device protection status entity.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param anti_malware_version: Current anti malware version.
    :type anti_malware_version: str
    :param device_state:  Possible values include: "clean", "fullScanPending", "rebootPending",
     "manualStepsPending", "offlineScanPending", "critical".
    :type device_state: str or ~files.models.MicrosoftGraphWindowsDeviceHealthState
    :param engine_version: Current endpoint protection engine's version.
    :type engine_version: str
    :param full_scan_overdue: Full scan overdue or not?.
    :type full_scan_overdue: bool
    :param full_scan_required: Full scan required or not?.
    :type full_scan_required: bool
    :param last_full_scan_date_time: Last quick scan datetime.
    :type last_full_scan_date_time: ~datetime.datetime
    :param last_full_scan_signature_version: Last full scan signature version.
    :type last_full_scan_signature_version: str
    :param last_quick_scan_date_time: Last quick scan datetime.
    :type last_quick_scan_date_time: ~datetime.datetime
    :param last_quick_scan_signature_version: Last quick scan signature version.
    :type last_quick_scan_signature_version: str
    :param last_reported_date_time: Last device health status reported time.
    :type last_reported_date_time: ~datetime.datetime
    :param malware_protection_enabled: Anti malware is enabled or not.
    :type malware_protection_enabled: bool
    :param network_inspection_system_enabled: Network inspection system enabled or not?.
    :type network_inspection_system_enabled: bool
    :param quick_scan_overdue: Quick scan overdue or not?.
    :type quick_scan_overdue: bool
    :param real_time_protection_enabled: Real time protection is enabled or not?.
    :type real_time_protection_enabled: bool
    :param reboot_required: Reboot required or not?.
    :type reboot_required: bool
    :param signature_update_overdue: Signature out of date or not?.
    :type signature_update_overdue: bool
    :param signature_version: Current malware definitions version.
    :type signature_version: str
    :param detected_malware_state: Device malware list.
    :type detected_malware_state: list[~files.models.MicrosoftGraphWindowsDeviceMalwareState]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'anti_malware_version': {'key': 'antiMalwareVersion', 'type': 'str'},
        'device_state': {'key': 'deviceState', 'type': 'str'},
        'engine_version': {'key': 'engineVersion', 'type': 'str'},
        'full_scan_overdue': {'key': 'fullScanOverdue', 'type': 'bool'},
        'full_scan_required': {'key': 'fullScanRequired', 'type': 'bool'},
        'last_full_scan_date_time': {'key': 'lastFullScanDateTime', 'type': 'iso-8601'},
        'last_full_scan_signature_version': {'key': 'lastFullScanSignatureVersion', 'type': 'str'},
        'last_quick_scan_date_time': {'key': 'lastQuickScanDateTime', 'type': 'iso-8601'},
        'last_quick_scan_signature_version': {'key': 'lastQuickScanSignatureVersion', 'type': 'str'},
        'last_reported_date_time': {'key': 'lastReportedDateTime', 'type': 'iso-8601'},
        'malware_protection_enabled': {'key': 'malwareProtectionEnabled', 'type': 'bool'},
        'network_inspection_system_enabled': {'key': 'networkInspectionSystemEnabled', 'type': 'bool'},
        'quick_scan_overdue': {'key': 'quickScanOverdue', 'type': 'bool'},
        'real_time_protection_enabled': {'key': 'realTimeProtectionEnabled', 'type': 'bool'},
        'reboot_required': {'key': 'rebootRequired', 'type': 'bool'},
        'signature_update_overdue': {'key': 'signatureUpdateOverdue', 'type': 'bool'},
        'signature_version': {'key': 'signatureVersion', 'type': 'str'},
        'detected_malware_state': {'key': 'detectedMalwareState', 'type': '[MicrosoftGraphWindowsDeviceMalwareState]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWindowsProtectionState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.anti_malware_version = kwargs.get('anti_malware_version', None)
        self.device_state = kwargs.get('device_state', None)
        self.engine_version = kwargs.get('engine_version', None)
        self.full_scan_overdue = kwargs.get('full_scan_overdue', None)
        self.full_scan_required = kwargs.get('full_scan_required', None)
        self.last_full_scan_date_time = kwargs.get('last_full_scan_date_time', None)
        self.last_full_scan_signature_version = kwargs.get('last_full_scan_signature_version', None)
        self.last_quick_scan_date_time = kwargs.get('last_quick_scan_date_time', None)
        self.last_quick_scan_signature_version = kwargs.get('last_quick_scan_signature_version', None)
        self.last_reported_date_time = kwargs.get('last_reported_date_time', None)
        self.malware_protection_enabled = kwargs.get('malware_protection_enabled', None)
        self.network_inspection_system_enabled = kwargs.get('network_inspection_system_enabled', None)
        self.quick_scan_overdue = kwargs.get('quick_scan_overdue', None)
        self.real_time_protection_enabled = kwargs.get('real_time_protection_enabled', None)
        self.reboot_required = kwargs.get('reboot_required', None)
        self.signature_update_overdue = kwargs.get('signature_update_overdue', None)
        self.signature_version = kwargs.get('signature_version', None)
        self.detected_malware_state = kwargs.get('detected_malware_state', None)


class MicrosoftGraphWorkbook(MicrosoftGraphEntity):
    """workbook.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param application: workbookApplication.
    :type application: ~files.models.MicrosoftGraphWorkbookApplication
    :param comments:
    :type comments: list[~files.models.MicrosoftGraphWorkbookComment]
    :param functions: workbookFunctions.
    :type functions: ~files.models.MicrosoftGraphWorkbookFunctions
    :param names: Represents a collection of workbook scoped named items (named ranges and
     constants). Read-only.
    :type names: list[~files.models.MicrosoftGraphWorkbookNamedItem]
    :param operations: The status of workbook operations. Getting an operation collection is not
     supported, but you can get the status of a long-running operation if the Location header is
     returned in the response. Read-only.
    :type operations: list[~files.models.MicrosoftGraphWorkbookOperation]
    :param tables: Represents a collection of tables associated with the workbook. Read-only.
    :type tables: list[~files.models.MicrosoftGraphWorkbookTable]
    :param worksheets: Represents a collection of worksheets associated with the workbook. Read-
     only.
    :type worksheets: list[~files.models.MicrosoftGraphWorkbookWorksheet]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'application': {'key': 'application', 'type': 'MicrosoftGraphWorkbookApplication'},
        'comments': {'key': 'comments', 'type': '[MicrosoftGraphWorkbookComment]'},
        'functions': {'key': 'functions', 'type': 'MicrosoftGraphWorkbookFunctions'},
        'names': {'key': 'names', 'type': '[MicrosoftGraphWorkbookNamedItem]'},
        'operations': {'key': 'operations', 'type': '[MicrosoftGraphWorkbookOperation]'},
        'tables': {'key': 'tables', 'type': '[MicrosoftGraphWorkbookTable]'},
        'worksheets': {'key': 'worksheets', 'type': '[MicrosoftGraphWorkbookWorksheet]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbook, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.application = kwargs.get('application', None)
        self.comments = kwargs.get('comments', None)
        self.functions = kwargs.get('functions', None)
        self.names = kwargs.get('names', None)
        self.operations = kwargs.get('operations', None)
        self.tables = kwargs.get('tables', None)
        self.worksheets = kwargs.get('worksheets', None)


class MicrosoftGraphWorkbookApplication(MicrosoftGraphEntity):
    """workbookApplication.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param calculation_mode: Returns the calculation mode used in the workbook. Possible values
     are: Automatic, AutomaticExceptTables, Manual.
    :type calculation_mode: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'calculation_mode': {'key': 'calculationMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookApplication, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.calculation_mode = kwargs.get('calculation_mode', None)


class MicrosoftGraphWorkbookChart(MicrosoftGraphEntity):
    """workbookChart.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param height: Represents the height, in points, of the chart object.
    :type height: float
    :param left: The distance, in points, from the left side of the chart to the worksheet origin.
    :type left: float
    :param name: Represents the name of a chart object.
    :type name: str
    :param top: Represents the distance, in points, from the top edge of the object to the top of
     row 1 (on a worksheet) or the top of the chart area (on a chart).
    :type top: float
    :param width: Represents the width, in points, of the chart object.
    :type width: float
    :param axes: workbookChartAxes.
    :type axes: ~files.models.MicrosoftGraphWorkbookChartAxes
    :param data_labels: workbookChartDataLabels.
    :type data_labels: ~files.models.MicrosoftGraphWorkbookChartDataLabels
    :param format: workbookChartAreaFormat.
    :type format: ~files.models.MicrosoftGraphWorkbookChartAreaFormat
    :param legend: workbookChartLegend.
    :type legend: ~files.models.MicrosoftGraphWorkbookChartLegend
    :param series: Represents either a single series or collection of series in the chart. Read-
     only.
    :type series: list[~files.models.MicrosoftGraphWorkbookChartSeries]
    :param title: workbookChartTitle.
    :type title: ~files.models.MicrosoftGraphWorkbookChartTitle
    :param worksheet: workbookWorksheet.
    :type worksheet: ~files.models.MicrosoftGraphWorkbookWorksheet
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'height': {'key': 'height', 'type': 'float'},
        'left': {'key': 'left', 'type': 'float'},
        'name': {'key': 'name', 'type': 'str'},
        'top': {'key': 'top', 'type': 'float'},
        'width': {'key': 'width', 'type': 'float'},
        'axes': {'key': 'axes', 'type': 'MicrosoftGraphWorkbookChartAxes'},
        'data_labels': {'key': 'dataLabels', 'type': 'MicrosoftGraphWorkbookChartDataLabels'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartAreaFormat'},
        'legend': {'key': 'legend', 'type': 'MicrosoftGraphWorkbookChartLegend'},
        'series': {'key': 'series', 'type': '[MicrosoftGraphWorkbookChartSeries]'},
        'title': {'key': 'title', 'type': 'MicrosoftGraphWorkbookChartTitle'},
        'worksheet': {'key': 'worksheet', 'type': 'MicrosoftGraphWorkbookWorksheet'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChart, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.height = kwargs.get('height', None)
        self.left = kwargs.get('left', None)
        self.name = kwargs.get('name', None)
        self.top = kwargs.get('top', None)
        self.width = kwargs.get('width', None)
        self.axes = kwargs.get('axes', None)
        self.data_labels = kwargs.get('data_labels', None)
        self.format = kwargs.get('format', None)
        self.legend = kwargs.get('legend', None)
        self.series = kwargs.get('series', None)
        self.title = kwargs.get('title', None)
        self.worksheet = kwargs.get('worksheet', None)


class MicrosoftGraphWorkbookChartAreaFormat(MicrosoftGraphEntity):
    """workbookChartAreaFormat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param fill: workbookChartFill.
    :type fill: ~files.models.MicrosoftGraphWorkbookChartFill
    :param font: workbookChartFont.
    :type font: ~files.models.MicrosoftGraphWorkbookChartFont
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'fill': {'key': 'fill', 'type': 'MicrosoftGraphWorkbookChartFill'},
        'font': {'key': 'font', 'type': 'MicrosoftGraphWorkbookChartFont'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartAreaFormat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.fill = kwargs.get('fill', None)
        self.font = kwargs.get('font', None)


class MicrosoftGraphWorkbookChartAxes(MicrosoftGraphEntity):
    """workbookChartAxes.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param category_axis: workbookChartAxis.
    :type category_axis: ~files.models.MicrosoftGraphWorkbookChartAxis
    :param series_axis: workbookChartAxis.
    :type series_axis: ~files.models.MicrosoftGraphWorkbookChartAxis
    :param value_axis: workbookChartAxis.
    :type value_axis: ~files.models.MicrosoftGraphWorkbookChartAxis
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'category_axis': {'key': 'categoryAxis', 'type': 'MicrosoftGraphWorkbookChartAxis'},
        'series_axis': {'key': 'seriesAxis', 'type': 'MicrosoftGraphWorkbookChartAxis'},
        'value_axis': {'key': 'valueAxis', 'type': 'MicrosoftGraphWorkbookChartAxis'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartAxes, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.category_axis = kwargs.get('category_axis', None)
        self.series_axis = kwargs.get('series_axis', None)
        self.value_axis = kwargs.get('value_axis', None)


class MicrosoftGraphWorkbookChartAxis(MicrosoftGraphEntity):
    """workbookChartAxis.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param major_unit: Json.
    :type major_unit: dict[str, object]
    :param maximum: Json.
    :type maximum: dict[str, object]
    :param minimum: Json.
    :type minimum: dict[str, object]
    :param minor_unit: Json.
    :type minor_unit: dict[str, object]
    :param format: workbookChartAxisFormat.
    :type format: ~files.models.MicrosoftGraphWorkbookChartAxisFormat
    :param major_gridlines: workbookChartGridlines.
    :type major_gridlines: ~files.models.MicrosoftGraphWorkbookChartGridlines
    :param minor_gridlines: workbookChartGridlines.
    :type minor_gridlines: ~files.models.MicrosoftGraphWorkbookChartGridlines
    :param title: workbookChartAxisTitle.
    :type title: ~files.models.MicrosoftGraphWorkbookChartAxisTitle
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'major_unit': {'key': 'majorUnit', 'type': '{object}'},
        'maximum': {'key': 'maximum', 'type': '{object}'},
        'minimum': {'key': 'minimum', 'type': '{object}'},
        'minor_unit': {'key': 'minorUnit', 'type': '{object}'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartAxisFormat'},
        'major_gridlines': {'key': 'majorGridlines', 'type': 'MicrosoftGraphWorkbookChartGridlines'},
        'minor_gridlines': {'key': 'minorGridlines', 'type': 'MicrosoftGraphWorkbookChartGridlines'},
        'title': {'key': 'title', 'type': 'MicrosoftGraphWorkbookChartAxisTitle'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartAxis, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.major_unit = kwargs.get('major_unit', None)
        self.maximum = kwargs.get('maximum', None)
        self.minimum = kwargs.get('minimum', None)
        self.minor_unit = kwargs.get('minor_unit', None)
        self.format = kwargs.get('format', None)
        self.major_gridlines = kwargs.get('major_gridlines', None)
        self.minor_gridlines = kwargs.get('minor_gridlines', None)
        self.title = kwargs.get('title', None)


class MicrosoftGraphWorkbookChartAxisFormat(MicrosoftGraphEntity):
    """workbookChartAxisFormat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param font: workbookChartFont.
    :type font: ~files.models.MicrosoftGraphWorkbookChartFont
    :param line: workbookChartLineFormat.
    :type line: ~files.models.MicrosoftGraphWorkbookChartLineFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'font': {'key': 'font', 'type': 'MicrosoftGraphWorkbookChartFont'},
        'line': {'key': 'line', 'type': 'MicrosoftGraphWorkbookChartLineFormat'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartAxisFormat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.font = kwargs.get('font', None)
        self.line = kwargs.get('line', None)


class MicrosoftGraphWorkbookChartAxisTitle(MicrosoftGraphEntity):
    """workbookChartAxisTitle.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param text: Represents the axis title.
    :type text: str
    :param visible: A boolean that specifies the visibility of an axis title.
    :type visible: bool
    :param format: workbookChartAxisTitleFormat.
    :type format: ~files.models.MicrosoftGraphWorkbookChartAxisTitleFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'text': {'key': 'text', 'type': 'str'},
        'visible': {'key': 'visible', 'type': 'bool'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartAxisTitleFormat'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartAxisTitle, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.text = kwargs.get('text', None)
        self.visible = kwargs.get('visible', None)
        self.format = kwargs.get('format', None)


class MicrosoftGraphWorkbookChartAxisTitleFormat(MicrosoftGraphEntity):
    """workbookChartAxisTitleFormat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param font: workbookChartFont.
    :type font: ~files.models.MicrosoftGraphWorkbookChartFont
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'font': {'key': 'font', 'type': 'MicrosoftGraphWorkbookChartFont'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartAxisTitleFormat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.font = kwargs.get('font', None)


class MicrosoftGraphWorkbookChartDataLabelFormat(MicrosoftGraphEntity):
    """workbookChartDataLabelFormat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param fill: workbookChartFill.
    :type fill: ~files.models.MicrosoftGraphWorkbookChartFill
    :param font: workbookChartFont.
    :type font: ~files.models.MicrosoftGraphWorkbookChartFont
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'fill': {'key': 'fill', 'type': 'MicrosoftGraphWorkbookChartFill'},
        'font': {'key': 'font', 'type': 'MicrosoftGraphWorkbookChartFont'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartDataLabelFormat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.fill = kwargs.get('fill', None)
        self.font = kwargs.get('font', None)


class MicrosoftGraphWorkbookChartDataLabels(MicrosoftGraphEntity):
    """workbookChartDataLabels.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param position: DataLabelPosition value that represents the position of the data label. The
     possible values are: None, Center, InsideEnd, InsideBase, OutsideEnd, Left, Right, Top, Bottom,
     BestFit, Callout.
    :type position: str
    :param separator: String representing the separator used for the data labels on a chart.
    :type separator: str
    :param show_bubble_size: Boolean value representing if the data label bubble size is visible or
     not.
    :type show_bubble_size: bool
    :param show_category_name: Boolean value representing if the data label category name is
     visible or not.
    :type show_category_name: bool
    :param show_legend_key: Boolean value representing if the data label legend key is visible or
     not.
    :type show_legend_key: bool
    :param show_percentage: Boolean value representing if the data label percentage is visible or
     not.
    :type show_percentage: bool
    :param show_series_name: Boolean value representing if the data label series name is visible or
     not.
    :type show_series_name: bool
    :param show_value: Boolean value representing if the data label value is visible or not.
    :type show_value: bool
    :param format: workbookChartDataLabelFormat.
    :type format: ~files.models.MicrosoftGraphWorkbookChartDataLabelFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'position': {'key': 'position', 'type': 'str'},
        'separator': {'key': 'separator', 'type': 'str'},
        'show_bubble_size': {'key': 'showBubbleSize', 'type': 'bool'},
        'show_category_name': {'key': 'showCategoryName', 'type': 'bool'},
        'show_legend_key': {'key': 'showLegendKey', 'type': 'bool'},
        'show_percentage': {'key': 'showPercentage', 'type': 'bool'},
        'show_series_name': {'key': 'showSeriesName', 'type': 'bool'},
        'show_value': {'key': 'showValue', 'type': 'bool'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartDataLabelFormat'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartDataLabels, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.position = kwargs.get('position', None)
        self.separator = kwargs.get('separator', None)
        self.show_bubble_size = kwargs.get('show_bubble_size', None)
        self.show_category_name = kwargs.get('show_category_name', None)
        self.show_legend_key = kwargs.get('show_legend_key', None)
        self.show_percentage = kwargs.get('show_percentage', None)
        self.show_series_name = kwargs.get('show_series_name', None)
        self.show_value = kwargs.get('show_value', None)
        self.format = kwargs.get('format', None)


class MicrosoftGraphWorkbookChartFill(MicrosoftGraphEntity):
    """workbookChartFill.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartFill, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphWorkbookChartFont(MicrosoftGraphEntity):
    """workbookChartFont.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param bold: Represents the bold status of font.
    :type bold: bool
    :param color: HTML color code representation of the text color. E.g. #FF0000 represents Red.
    :type color: str
    :param italic: Represents the italic status of the font.
    :type italic: bool
    :param name: Font name (e.g. 'Calibri').
    :type name: str
    :param size: Size of the font (e.g. 11).
    :type size: float
    :param underline: Type of underline applied to the font. The possible values are: None, Single.
    :type underline: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'bold': {'key': 'bold', 'type': 'bool'},
        'color': {'key': 'color', 'type': 'str'},
        'italic': {'key': 'italic', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'size': {'key': 'size', 'type': 'float'},
        'underline': {'key': 'underline', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartFont, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.bold = kwargs.get('bold', None)
        self.color = kwargs.get('color', None)
        self.italic = kwargs.get('italic', None)
        self.name = kwargs.get('name', None)
        self.size = kwargs.get('size', None)
        self.underline = kwargs.get('underline', None)


class MicrosoftGraphWorkbookChartGridlines(MicrosoftGraphEntity):
    """workbookChartGridlines.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param visible: Boolean value representing if the axis gridlines are visible or not.
    :type visible: bool
    :param format: workbookChartGridlinesFormat.
    :type format: ~files.models.MicrosoftGraphWorkbookChartGridlinesFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'visible': {'key': 'visible', 'type': 'bool'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartGridlinesFormat'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartGridlines, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.visible = kwargs.get('visible', None)
        self.format = kwargs.get('format', None)


class MicrosoftGraphWorkbookChartGridlinesFormat(MicrosoftGraphEntity):
    """workbookChartGridlinesFormat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param line: workbookChartLineFormat.
    :type line: ~files.models.MicrosoftGraphWorkbookChartLineFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'line': {'key': 'line', 'type': 'MicrosoftGraphWorkbookChartLineFormat'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartGridlinesFormat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.line = kwargs.get('line', None)


class MicrosoftGraphWorkbookChartLegend(MicrosoftGraphEntity):
    """workbookChartLegend.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param overlay: Boolean value for whether the chart legend should overlap with the main body of
     the chart.
    :type overlay: bool
    :param position: Represents the position of the legend on the chart. The possible values are:
     Top, Bottom, Left, Right, Corner, Custom.
    :type position: str
    :param visible: A boolean value the represents the visibility of a ChartLegend object.
    :type visible: bool
    :param format: workbookChartLegendFormat.
    :type format: ~files.models.MicrosoftGraphWorkbookChartLegendFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'overlay': {'key': 'overlay', 'type': 'bool'},
        'position': {'key': 'position', 'type': 'str'},
        'visible': {'key': 'visible', 'type': 'bool'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartLegendFormat'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartLegend, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.overlay = kwargs.get('overlay', None)
        self.position = kwargs.get('position', None)
        self.visible = kwargs.get('visible', None)
        self.format = kwargs.get('format', None)


class MicrosoftGraphWorkbookChartLegendFormat(MicrosoftGraphEntity):
    """workbookChartLegendFormat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param fill: workbookChartFill.
    :type fill: ~files.models.MicrosoftGraphWorkbookChartFill
    :param font: workbookChartFont.
    :type font: ~files.models.MicrosoftGraphWorkbookChartFont
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'fill': {'key': 'fill', 'type': 'MicrosoftGraphWorkbookChartFill'},
        'font': {'key': 'font', 'type': 'MicrosoftGraphWorkbookChartFont'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartLegendFormat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.fill = kwargs.get('fill', None)
        self.font = kwargs.get('font', None)


class MicrosoftGraphWorkbookChartLineFormat(MicrosoftGraphEntity):
    """workbookChartLineFormat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param color: HTML color code representing the color of lines in the chart.
    :type color: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'color': {'key': 'color', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartLineFormat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.color = kwargs.get('color', None)


class MicrosoftGraphWorkbookChartPoint(MicrosoftGraphEntity):
    """workbookChartPoint.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value: Json.
    :type value: dict[str, object]
    :param format: workbookChartPointFormat.
    :type format: ~files.models.MicrosoftGraphWorkbookChartPointFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '{object}'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartPointFormat'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartPoint, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.format = kwargs.get('format', None)


class MicrosoftGraphWorkbookChartPointFormat(MicrosoftGraphEntity):
    """workbookChartPointFormat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param fill: workbookChartFill.
    :type fill: ~files.models.MicrosoftGraphWorkbookChartFill
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'fill': {'key': 'fill', 'type': 'MicrosoftGraphWorkbookChartFill'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartPointFormat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.fill = kwargs.get('fill', None)


class MicrosoftGraphWorkbookChartSeries(MicrosoftGraphEntity):
    """workbookChartSeries.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Represents the name of a series in a chart.
    :type name: str
    :param format: workbookChartSeriesFormat.
    :type format: ~files.models.MicrosoftGraphWorkbookChartSeriesFormat
    :param points: Represents a collection of all points in the series. Read-only.
    :type points: list[~files.models.MicrosoftGraphWorkbookChartPoint]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartSeriesFormat'},
        'points': {'key': 'points', 'type': '[MicrosoftGraphWorkbookChartPoint]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartSeries, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)
        self.format = kwargs.get('format', None)
        self.points = kwargs.get('points', None)


class MicrosoftGraphWorkbookChartSeriesFormat(MicrosoftGraphEntity):
    """workbookChartSeriesFormat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param fill: workbookChartFill.
    :type fill: ~files.models.MicrosoftGraphWorkbookChartFill
    :param line: workbookChartLineFormat.
    :type line: ~files.models.MicrosoftGraphWorkbookChartLineFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'fill': {'key': 'fill', 'type': 'MicrosoftGraphWorkbookChartFill'},
        'line': {'key': 'line', 'type': 'MicrosoftGraphWorkbookChartLineFormat'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartSeriesFormat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.fill = kwargs.get('fill', None)
        self.line = kwargs.get('line', None)


class MicrosoftGraphWorkbookChartTitle(MicrosoftGraphEntity):
    """workbookChartTitle.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param overlay: Boolean value representing if the chart title will overlay the chart or not.
    :type overlay: bool
    :param text: Represents the title text of a chart.
    :type text: str
    :param visible: A boolean value the represents the visibility of a chart title object.
    :type visible: bool
    :param format: workbookChartTitleFormat.
    :type format: ~files.models.MicrosoftGraphWorkbookChartTitleFormat
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'overlay': {'key': 'overlay', 'type': 'bool'},
        'text': {'key': 'text', 'type': 'str'},
        'visible': {'key': 'visible', 'type': 'bool'},
        'format': {'key': 'format', 'type': 'MicrosoftGraphWorkbookChartTitleFormat'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartTitle, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.overlay = kwargs.get('overlay', None)
        self.text = kwargs.get('text', None)
        self.visible = kwargs.get('visible', None)
        self.format = kwargs.get('format', None)


class MicrosoftGraphWorkbookChartTitleFormat(MicrosoftGraphEntity):
    """workbookChartTitleFormat.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param fill: workbookChartFill.
    :type fill: ~files.models.MicrosoftGraphWorkbookChartFill
    :param font: workbookChartFont.
    :type font: ~files.models.MicrosoftGraphWorkbookChartFont
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'fill': {'key': 'fill', 'type': 'MicrosoftGraphWorkbookChartFill'},
        'font': {'key': 'font', 'type': 'MicrosoftGraphWorkbookChartFont'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookChartTitleFormat, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.fill = kwargs.get('fill', None)
        self.font = kwargs.get('font', None)


class MicrosoftGraphWorkbookComment(MicrosoftGraphEntity):
    """workbookComment.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content: The content of comment.
    :type content: str
    :param content_type: Indicates the type for the comment.
    :type content_type: str
    :param replies: Read-only. Nullable.
    :type replies: list[~files.models.MicrosoftGraphWorkbookCommentReply]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'replies': {'key': 'replies', 'type': '[MicrosoftGraphWorkbookCommentReply]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookComment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content = kwargs.get('content', None)
        self.content_type = kwargs.get('content_type', None)
        self.replies = kwargs.get('replies', None)


class MicrosoftGraphWorkbookCommentReply(MicrosoftGraphEntity):
    """workbookCommentReply.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content: The content of a comment reply.
    :type content: str
    :param content_type: Indicates the type for the comment reply.
    :type content_type: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookCommentReply, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.content = kwargs.get('content', None)
        self.content_type = kwargs.get('content_type', None)


class MicrosoftGraphWorkbookFilter(MicrosoftGraphEntity):
    """workbookFilter.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param criteria: workbookFilterCriteria.
    :type criteria: ~files.models.MicrosoftGraphWorkbookFilterCriteria
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'criteria': {'key': 'criteria', 'type': 'MicrosoftGraphWorkbookFilterCriteria'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookFilter, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.criteria = kwargs.get('criteria', None)


class MicrosoftGraphWorkbookFilterCriteria(msrest.serialization.Model):
    """workbookFilterCriteria.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param color:
    :type color: str
    :param criterion1:
    :type criterion1: str
    :param criterion2:
    :type criterion2: str
    :param dynamic_criteria:
    :type dynamic_criteria: str
    :param filter_on:
    :type filter_on: str
    :param icon: workbookIcon.
    :type icon: ~files.models.MicrosoftGraphWorkbookIcon
    :param operator:
    :type operator: str
    :param values: Json.
    :type values: dict[str, object]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'color': {'key': 'color', 'type': 'str'},
        'criterion1': {'key': 'criterion1', 'type': 'str'},
        'criterion2': {'key': 'criterion2', 'type': 'str'},
        'dynamic_criteria': {'key': 'dynamicCriteria', 'type': 'str'},
        'filter_on': {'key': 'filterOn', 'type': 'str'},
        'icon': {'key': 'icon', 'type': 'MicrosoftGraphWorkbookIcon'},
        'operator': {'key': 'operator', 'type': 'str'},
        'values': {'key': 'values', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookFilterCriteria, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.color = kwargs.get('color', None)
        self.criterion1 = kwargs.get('criterion1', None)
        self.criterion2 = kwargs.get('criterion2', None)
        self.dynamic_criteria = kwargs.get('dynamic_criteria', None)
        self.filter_on = kwargs.get('filter_on', None)
        self.icon = kwargs.get('icon', None)
        self.operator = kwargs.get('operator', None)
        self.values = kwargs.get('values', None)


class MicrosoftGraphWorkbookFunctions(MicrosoftGraphEntity):
    """workbookFunctions.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookFunctions, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphWorkbookIcon(msrest.serialization.Model):
    """workbookIcon.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param index: Represents the index of the icon in the given set.
    :type index: int
    :param set: Represents the set that the icon is part of. The possible values are: Invalid,
     ThreeArrows, ThreeArrowsGray, ThreeFlags, ThreeTrafficLights1, ThreeTrafficLights2, ThreeSigns,
     ThreeSymbols, ThreeSymbols2, FourArrows, FourArrowsGray, FourRedToBlack, FourRating,
     FourTrafficLights, FiveArrows, FiveArrowsGray, FiveRating, FiveQuarters, ThreeStars,
     ThreeTriangles, FiveBoxes.
    :type set: str
    """

    _validation = {
        'index': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'index': {'key': 'index', 'type': 'int'},
        'set': {'key': 'set', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookIcon, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.index = kwargs.get('index', None)
        self.set = kwargs.get('set', None)


class MicrosoftGraphWorkbookNamedItem(MicrosoftGraphEntity):
    """workbookNamedItem.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param comment: Represents the comment associated with this name.
    :type comment: str
    :param name: The name of the object. Read-only.
    :type name: str
    :param scope: Indicates whether the name is scoped to the workbook or to a specific worksheet.
     Read-only.
    :type scope: str
    :param type: Indicates what type of reference is associated with the name. The possible values
     are: String, Integer, Double, Boolean, Range. Read-only.
    :type type: str
    :param value: Json.
    :type value: dict[str, object]
    :param visible: Specifies whether the object is visible or not.
    :type visible: bool
    :param worksheet: workbookWorksheet.
    :type worksheet: ~files.models.MicrosoftGraphWorkbookWorksheet
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'comment': {'key': 'comment', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'value': {'key': 'value', 'type': '{object}'},
        'visible': {'key': 'visible', 'type': 'bool'},
        'worksheet': {'key': 'worksheet', 'type': 'MicrosoftGraphWorkbookWorksheet'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookNamedItem, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.comment = kwargs.get('comment', None)
        self.name = kwargs.get('name', None)
        self.scope = kwargs.get('scope', None)
        self.type = kwargs.get('type', None)
        self.value = kwargs.get('value', None)
        self.visible = kwargs.get('visible', None)
        self.worksheet = kwargs.get('worksheet', None)


class MicrosoftGraphWorkbookOperation(MicrosoftGraphEntity):
    """workbookOperation.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: workbookOperationError.
    :type error: ~files.models.MicrosoftGraphWorkbookOperationError
    :param resource_location: The resource URI for the result.
    :type resource_location: str
    :param status:  Possible values include: "notStarted", "running", "succeeded", "failed".
    :type status: str or ~files.models.MicrosoftGraphWorkbookOperationStatus
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'MicrosoftGraphWorkbookOperationError'},
        'resource_location': {'key': 'resourceLocation', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookOperation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.error = kwargs.get('error', None)
        self.resource_location = kwargs.get('resource_location', None)
        self.status = kwargs.get('status', None)


class MicrosoftGraphWorkbookOperationError(msrest.serialization.Model):
    """workbookOperationError.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: The error code.
    :type code: str
    :param inner_error: workbookOperationError.
    :type inner_error: ~files.models.MicrosoftGraphWorkbookOperationError
    :param message: The error message.
    :type message: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'inner_error': {'key': 'innerError', 'type': 'MicrosoftGraphWorkbookOperationError'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookOperationError, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs.get('code', None)
        self.inner_error = kwargs.get('inner_error', None)
        self.message = kwargs.get('message', None)


class MicrosoftGraphWorkbookPivotTable(MicrosoftGraphEntity):
    """workbookPivotTable.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Name of the PivotTable.
    :type name: str
    :param worksheet: workbookWorksheet.
    :type worksheet: ~files.models.MicrosoftGraphWorkbookWorksheet
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'worksheet': {'key': 'worksheet', 'type': 'MicrosoftGraphWorkbookWorksheet'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookPivotTable, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)
        self.worksheet = kwargs.get('worksheet', None)


class MicrosoftGraphWorkbookSortField(msrest.serialization.Model):
    """workbookSortField.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ascending: Represents whether the sorting is done in an ascending fashion.
    :type ascending: bool
    :param color: Represents the color that is the target of the condition if the sorting is on
     font or cell color.
    :type color: str
    :param data_option: Represents additional sorting options for this field. The possible values
     are: Normal, TextAsNumber.
    :type data_option: str
    :param icon: workbookIcon.
    :type icon: ~files.models.MicrosoftGraphWorkbookIcon
    :param key: Represents the column (or row, depending on the sort orientation) that the
     condition is on. Represented as an offset from the first column (or row).
    :type key: int
    :param sort_on: Represents the type of sorting of this condition. The possible values are:
     Value, CellColor, FontColor, Icon.
    :type sort_on: str
    """

    _validation = {
        'key': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ascending': {'key': 'ascending', 'type': 'bool'},
        'color': {'key': 'color', 'type': 'str'},
        'data_option': {'key': 'dataOption', 'type': 'str'},
        'icon': {'key': 'icon', 'type': 'MicrosoftGraphWorkbookIcon'},
        'key': {'key': 'key', 'type': 'int'},
        'sort_on': {'key': 'sortOn', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookSortField, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ascending = kwargs.get('ascending', None)
        self.color = kwargs.get('color', None)
        self.data_option = kwargs.get('data_option', None)
        self.icon = kwargs.get('icon', None)
        self.key = kwargs.get('key', None)
        self.sort_on = kwargs.get('sort_on', None)


class MicrosoftGraphWorkbookTable(MicrosoftGraphEntity):
    """workbookTable.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param highlight_first_column: Indicates whether the first column contains special formatting.
    :type highlight_first_column: bool
    :param highlight_last_column: Indicates whether the last column contains special formatting.
    :type highlight_last_column: bool
    :param legacy_id: Legacy Id used in older Excle clients. The value of the identifier remains
     the same even when the table is renamed. This property should be interpreted as an opaque
     string value and should not be parsed to any other type. Read-only.
    :type legacy_id: str
    :param name: Name of the table.
    :type name: str
    :param show_banded_columns: Indicates whether the columns show banded formatting in which odd
     columns are highlighted differently from even ones to make reading the table easier.
    :type show_banded_columns: bool
    :param show_banded_rows: Indicates whether the rows show banded formatting in which odd rows
     are highlighted differently from even ones to make reading the table easier.
    :type show_banded_rows: bool
    :param show_filter_button: Indicates whether the filter buttons are visible at the top of each
     column header. Setting this is only allowed if the table contains a header row.
    :type show_filter_button: bool
    :param show_headers: Indicates whether the header row is visible or not. This value can be set
     to show or remove the header row.
    :type show_headers: bool
    :param show_totals: Indicates whether the total row is visible or not. This value can be set to
     show or remove the total row.
    :type show_totals: bool
    :param style: Constant value that represents the Table style. The possible values are:
     TableStyleLight1 thru TableStyleLight21, TableStyleMedium1 thru TableStyleMedium28,
     TableStyleStyleDark1 thru TableStyleStyleDark11. A custom user-defined style present in the
     workbook can also be specified.
    :type style: str
    :param columns: Represents a collection of all the columns in the table. Read-only.
    :type columns: list[~files.models.MicrosoftGraphWorkbookTableColumn]
    :param rows: Represents a collection of all the rows in the table. Read-only.
    :type rows: list[~files.models.MicrosoftGraphWorkbookTableRow]
    :param sort: workbookTableSort.
    :type sort: ~files.models.MicrosoftGraphWorkbookTableSort
    :param worksheet: workbookWorksheet.
    :type worksheet: ~files.models.MicrosoftGraphWorkbookWorksheet
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'highlight_first_column': {'key': 'highlightFirstColumn', 'type': 'bool'},
        'highlight_last_column': {'key': 'highlightLastColumn', 'type': 'bool'},
        'legacy_id': {'key': 'legacyId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'show_banded_columns': {'key': 'showBandedColumns', 'type': 'bool'},
        'show_banded_rows': {'key': 'showBandedRows', 'type': 'bool'},
        'show_filter_button': {'key': 'showFilterButton', 'type': 'bool'},
        'show_headers': {'key': 'showHeaders', 'type': 'bool'},
        'show_totals': {'key': 'showTotals', 'type': 'bool'},
        'style': {'key': 'style', 'type': 'str'},
        'columns': {'key': 'columns', 'type': '[MicrosoftGraphWorkbookTableColumn]'},
        'rows': {'key': 'rows', 'type': '[MicrosoftGraphWorkbookTableRow]'},
        'sort': {'key': 'sort', 'type': 'MicrosoftGraphWorkbookTableSort'},
        'worksheet': {'key': 'worksheet', 'type': 'MicrosoftGraphWorkbookWorksheet'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookTable, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.highlight_first_column = kwargs.get('highlight_first_column', None)
        self.highlight_last_column = kwargs.get('highlight_last_column', None)
        self.legacy_id = kwargs.get('legacy_id', None)
        self.name = kwargs.get('name', None)
        self.show_banded_columns = kwargs.get('show_banded_columns', None)
        self.show_banded_rows = kwargs.get('show_banded_rows', None)
        self.show_filter_button = kwargs.get('show_filter_button', None)
        self.show_headers = kwargs.get('show_headers', None)
        self.show_totals = kwargs.get('show_totals', None)
        self.style = kwargs.get('style', None)
        self.columns = kwargs.get('columns', None)
        self.rows = kwargs.get('rows', None)
        self.sort = kwargs.get('sort', None)
        self.worksheet = kwargs.get('worksheet', None)


class MicrosoftGraphWorkbookTableColumn(MicrosoftGraphEntity):
    """workbookTableColumn.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param index: Returns the index number of the column within the columns collection of the
     table. Zero-indexed. Read-only.
    :type index: int
    :param name: Returns the name of the table column.
    :type name: str
    :param values: Json.
    :type values: dict[str, object]
    :param filter: workbookFilter.
    :type filter: ~files.models.MicrosoftGraphWorkbookFilter
    """

    _validation = {
        'index': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'index': {'key': 'index', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'values': {'key': 'values', 'type': '{object}'},
        'filter': {'key': 'filter', 'type': 'MicrosoftGraphWorkbookFilter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookTableColumn, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.index = kwargs.get('index', None)
        self.name = kwargs.get('name', None)
        self.values = kwargs.get('values', None)
        self.filter = kwargs.get('filter', None)


class MicrosoftGraphWorkbookTableRow(MicrosoftGraphEntity):
    """workbookTableRow.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param index: Returns the index number of the row within the rows collection of the table.
     Zero-indexed. Read-only.
    :type index: int
    :param values: Json.
    :type values: dict[str, object]
    """

    _validation = {
        'index': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'index': {'key': 'index', 'type': 'int'},
        'values': {'key': 'values', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookTableRow, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.index = kwargs.get('index', None)
        self.values = kwargs.get('values', None)


class MicrosoftGraphWorkbookTableSort(MicrosoftGraphEntity):
    """workbookTableSort.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param fields: Represents the current conditions used to last sort the table. Read-only.
    :type fields: list[~files.models.MicrosoftGraphWorkbookSortField]
    :param match_case: Represents whether the casing impacted the last sort of the table. Read-
     only.
    :type match_case: bool
    :param method: Represents Chinese character ordering method last used to sort the table. The
     possible values are: PinYin, StrokeCount. Read-only.
    :type method: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'fields': {'key': 'fields', 'type': '[MicrosoftGraphWorkbookSortField]'},
        'match_case': {'key': 'matchCase', 'type': 'bool'},
        'method': {'key': 'method', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookTableSort, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.fields = kwargs.get('fields', None)
        self.match_case = kwargs.get('match_case', None)
        self.method = kwargs.get('method', None)


class MicrosoftGraphWorkbookWorksheet(MicrosoftGraphEntity):
    """workbookWorksheet.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: The display name of the worksheet.
    :type name: str
    :param position: The zero-based position of the worksheet within the workbook.
    :type position: int
    :param visibility: The Visibility of the worksheet. The possible values are: Visible, Hidden,
     VeryHidden.
    :type visibility: str
    :param charts: Returns collection of charts that are part of the worksheet. Read-only.
    :type charts: list[~files.models.MicrosoftGraphWorkbookChart]
    :param names: Returns collection of names that are associated with the worksheet. Read-only.
    :type names: list[~files.models.MicrosoftGraphWorkbookNamedItem]
    :param pivot_tables: Collection of PivotTables that are part of the worksheet.
    :type pivot_tables: list[~files.models.MicrosoftGraphWorkbookPivotTable]
    :param protection: workbookWorksheetProtection.
    :type protection: ~files.models.MicrosoftGraphWorkbookWorksheetProtection
    :param tables: Collection of tables that are part of the worksheet. Read-only.
    :type tables: list[~files.models.MicrosoftGraphWorkbookTable]
    """

    _validation = {
        'position': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'position': {'key': 'position', 'type': 'int'},
        'visibility': {'key': 'visibility', 'type': 'str'},
        'charts': {'key': 'charts', 'type': '[MicrosoftGraphWorkbookChart]'},
        'names': {'key': 'names', 'type': '[MicrosoftGraphWorkbookNamedItem]'},
        'pivot_tables': {'key': 'pivotTables', 'type': '[MicrosoftGraphWorkbookPivotTable]'},
        'protection': {'key': 'protection', 'type': 'MicrosoftGraphWorkbookWorksheetProtection'},
        'tables': {'key': 'tables', 'type': '[MicrosoftGraphWorkbookTable]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookWorksheet, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)
        self.position = kwargs.get('position', None)
        self.visibility = kwargs.get('visibility', None)
        self.charts = kwargs.get('charts', None)
        self.names = kwargs.get('names', None)
        self.pivot_tables = kwargs.get('pivot_tables', None)
        self.protection = kwargs.get('protection', None)
        self.tables = kwargs.get('tables', None)


class MicrosoftGraphWorkbookWorksheetProtection(MicrosoftGraphEntity):
    """workbookWorksheetProtection.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param options: workbookWorksheetProtectionOptions.
    :type options: ~files.models.MicrosoftGraphWorkbookWorksheetProtectionOptions
    :param protected: Indicates if the worksheet is protected.  Read-only.
    :type protected: bool
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'options': {'key': 'options', 'type': 'MicrosoftGraphWorkbookWorksheetProtectionOptions'},
        'protected': {'key': 'protected', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookWorksheetProtection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.options = kwargs.get('options', None)
        self.protected = kwargs.get('protected', None)


class MicrosoftGraphWorkbookWorksheetProtectionOptions(msrest.serialization.Model):
    """workbookWorksheetProtectionOptions.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allow_auto_filter: Represents the worksheet protection option of allowing using auto
     filter feature.
    :type allow_auto_filter: bool
    :param allow_delete_columns: Represents the worksheet protection option of allowing deleting
     columns.
    :type allow_delete_columns: bool
    :param allow_delete_rows: Represents the worksheet protection option of allowing deleting rows.
    :type allow_delete_rows: bool
    :param allow_format_cells: Represents the worksheet protection option of allowing formatting
     cells.
    :type allow_format_cells: bool
    :param allow_format_columns: Represents the worksheet protection option of allowing formatting
     columns.
    :type allow_format_columns: bool
    :param allow_format_rows: Represents the worksheet protection option of allowing formatting
     rows.
    :type allow_format_rows: bool
    :param allow_insert_columns: Represents the worksheet protection option of allowing inserting
     columns.
    :type allow_insert_columns: bool
    :param allow_insert_hyperlinks: Represents the worksheet protection option of allowing
     inserting hyperlinks.
    :type allow_insert_hyperlinks: bool
    :param allow_insert_rows: Represents the worksheet protection option of allowing inserting
     rows.
    :type allow_insert_rows: bool
    :param allow_pivot_tables: Represents the worksheet protection option of allowing using pivot
     table feature.
    :type allow_pivot_tables: bool
    :param allow_sort: Represents the worksheet protection option of allowing using sort feature.
    :type allow_sort: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'allow_auto_filter': {'key': 'allowAutoFilter', 'type': 'bool'},
        'allow_delete_columns': {'key': 'allowDeleteColumns', 'type': 'bool'},
        'allow_delete_rows': {'key': 'allowDeleteRows', 'type': 'bool'},
        'allow_format_cells': {'key': 'allowFormatCells', 'type': 'bool'},
        'allow_format_columns': {'key': 'allowFormatColumns', 'type': 'bool'},
        'allow_format_rows': {'key': 'allowFormatRows', 'type': 'bool'},
        'allow_insert_columns': {'key': 'allowInsertColumns', 'type': 'bool'},
        'allow_insert_hyperlinks': {'key': 'allowInsertHyperlinks', 'type': 'bool'},
        'allow_insert_rows': {'key': 'allowInsertRows', 'type': 'bool'},
        'allow_pivot_tables': {'key': 'allowPivotTables', 'type': 'bool'},
        'allow_sort': {'key': 'allowSort', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkbookWorksheetProtectionOptions, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allow_auto_filter = kwargs.get('allow_auto_filter', None)
        self.allow_delete_columns = kwargs.get('allow_delete_columns', None)
        self.allow_delete_rows = kwargs.get('allow_delete_rows', None)
        self.allow_format_cells = kwargs.get('allow_format_cells', None)
        self.allow_format_columns = kwargs.get('allow_format_columns', None)
        self.allow_format_rows = kwargs.get('allow_format_rows', None)
        self.allow_insert_columns = kwargs.get('allow_insert_columns', None)
        self.allow_insert_hyperlinks = kwargs.get('allow_insert_hyperlinks', None)
        self.allow_insert_rows = kwargs.get('allow_insert_rows', None)
        self.allow_pivot_tables = kwargs.get('allow_pivot_tables', None)
        self.allow_sort = kwargs.get('allow_sort', None)


class MicrosoftGraphWorkingHours(msrest.serialization.Model):
    """workingHours.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param days_of_week: The days of the week on which the user works.
    :type days_of_week: list[str or ~files.models.MicrosoftGraphDayOfWeek]
    :param end_time: The time of the day that the user stops working.
    :type end_time: ~datetime.time
    :param start_time: The time of the day that the user starts working.
    :type start_time: ~datetime.time
    :param time_zone: timeZoneBase.
    :type time_zone: ~files.models.MicrosoftGraphTimeZoneBase
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'days_of_week': {'key': 'daysOfWeek', 'type': '[str]'},
        'end_time': {'key': 'endTime', 'type': 'time'},
        'start_time': {'key': 'startTime', 'type': 'time'},
        'time_zone': {'key': 'timeZone', 'type': 'MicrosoftGraphTimeZoneBase'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkingHours, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.days_of_week = kwargs.get('days_of_week', None)
        self.end_time = kwargs.get('end_time', None)
        self.start_time = kwargs.get('start_time', None)
        self.time_zone = kwargs.get('time_zone', None)


class MicrosoftGraphWorkPosition(MicrosoftGraphItemFacet):
    """workPosition.

    :param id: Read-only.
    :type id: str
    :param allowed_audiences:  Possible values include: "me", "family", "contacts", "groupMembers",
     "organization", "federatedOrganizations", "everyone", "unknownFutureValue".
    :type allowed_audiences: str or ~files.models.MicrosoftGraphAllowedAudiences
    :param created_by: identitySet.
    :type created_by: ~files.models.MicrosoftGraphIdentitySet
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param inference: inferenceData.
    :type inference: ~files.models.MicrosoftGraphInferenceData
    :param last_modified_by: identitySet.
    :type last_modified_by: ~files.models.MicrosoftGraphIdentitySet
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param source: personDataSources.
    :type source: ~files.models.MicrosoftGraphPersonDataSources
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param categories:
    :type categories: list[str]
    :param colleagues:
    :type colleagues: list[~files.models.MicrosoftGraphRelatedPerson]
    :param detail: positionDetail.
    :type detail: ~files.models.MicrosoftGraphPositionDetail
    :param is_current:
    :type is_current: bool
    :param manager: relatedPerson.
    :type manager: ~files.models.MicrosoftGraphRelatedPerson
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_audiences': {'key': 'allowedAudiences', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'inference': {'key': 'inference', 'type': 'MicrosoftGraphInferenceData'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'MicrosoftGraphPersonDataSources'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'colleagues': {'key': 'colleagues', 'type': '[MicrosoftGraphRelatedPerson]'},
        'detail': {'key': 'detail', 'type': 'MicrosoftGraphPositionDetail'},
        'is_current': {'key': 'isCurrent', 'type': 'bool'},
        'manager': {'key': 'manager', 'type': 'MicrosoftGraphRelatedPerson'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWorkPosition, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.categories = kwargs.get('categories', None)
        self.colleagues = kwargs.get('colleagues', None)
        self.detail = kwargs.get('detail', None)
        self.is_current = kwargs.get('is_current', None)
        self.manager = kwargs.get('manager', None)


class MicrosoftGraphYomiPersonName(msrest.serialization.Model):
    """yomiPersonName.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name:
    :type display_name: str
    :param first:
    :type first: str
    :param last:
    :type last: str
    :param maiden:
    :type maiden: str
    :param middle:
    :type middle: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'first': {'key': 'first', 'type': 'str'},
        'last': {'key': 'last', 'type': 'str'},
        'maiden': {'key': 'maiden', 'type': 'str'},
        'middle': {'key': 'middle', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphYomiPersonName, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.first = kwargs.get('first', None)
        self.last = kwargs.get('last', None)
        self.maiden = kwargs.get('maiden', None)
        self.middle = kwargs.get('middle', None)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~files.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.error = kwargs['error']


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~files.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)


class Paths15G389UDrivesDriveIdListItemsListitemIdActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths15G389UDrivesDriveIdListItemsListitemIdActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:
    :type type: str
    :param scope:
    :type scope: str
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param password:
    :type password: str
    :param recipients:
    :type recipients: list[~files.models.MicrosoftGraphDriveRecipient]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'password': {'key': 'password', 'type': 'str'},
        'recipients': {'key': 'recipients', 'type': '[MicrosoftGraphDriveRecipient]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Paths15G389UDrivesDriveIdListItemsListitemIdActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)
        self.scope = kwargs.get('scope', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.password = kwargs.get('password', None)
        self.recipients = kwargs.get('recipients', None)


class Paths17RhsxkSharesShareddriveitemIdListitemActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths17RhsxkSharesShareddriveitemIdListitemActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:
    :type type: str
    :param scope:
    :type scope: str
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param password:
    :type password: str
    :param recipients:
    :type recipients: list[~files.models.MicrosoftGraphDriveRecipient]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'password': {'key': 'password', 'type': 'str'},
        'recipients': {'key': 'recipients', 'type': '[MicrosoftGraphDriveRecipient]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Paths17RhsxkSharesShareddriveitemIdListitemActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)
        self.scope = kwargs.get('scope', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.password = kwargs.get('password', None)
        self.recipients = kwargs.get('recipients', None)


class Paths1Mcxy93SharesShareddriveitemIdPermissionMicrosoftGraphGrantPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths1Mcxy93SharesShareddriveitemIdPermissionMicrosoftGraphGrantPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param roles:
    :type roles: list[str]
    :param recipients:
    :type recipients: list[~files.models.MicrosoftGraphDriveRecipient]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'roles': {'key': 'roles', 'type': '[str]'},
        'recipients': {'key': 'recipients', 'type': '[MicrosoftGraphDriveRecipient]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Paths1Mcxy93SharesShareddriveitemIdPermissionMicrosoftGraphGrantPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.roles = kwargs.get('roles', None)
        self.recipients = kwargs.get('recipients', None)


class Paths1Qap20EDrivesDriveIdListActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths1Qap20EDrivesDriveIdListActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:
    :type type: str
    :param scope:
    :type scope: str
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param password:
    :type password: str
    :param recipients:
    :type recipients: list[~files.models.MicrosoftGraphDriveRecipient]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'password': {'key': 'password', 'type': 'str'},
        'recipients': {'key': 'recipients', 'type': '[MicrosoftGraphDriveRecipient]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Paths1Qap20EDrivesDriveIdListActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)
        self.scope = kwargs.get('scope', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.password = kwargs.get('password', None)
        self.recipients = kwargs.get('recipients', None)


class Paths50Xy75SharesShareddriveitemIdPermissionMicrosoftGraphRevokegrantsPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths50Xy75SharesShareddriveitemIdPermissionMicrosoftGraphRevokegrantsPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param grantees:
    :type grantees: list[~files.models.MicrosoftGraphDriveRecipient]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'grantees': {'key': 'grantees', 'type': '[MicrosoftGraphDriveRecipient]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Paths50Xy75SharesShareddriveitemIdPermissionMicrosoftGraphRevokegrantsPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.grantees = kwargs.get('grantees', None)


class Paths85Vk2ODrivesDriveIdActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths85Vk2ODrivesDriveIdActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:
    :type type: str
    :param scope:
    :type scope: str
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param password:
    :type password: str
    :param recipients:
    :type recipients: list[~files.models.MicrosoftGraphDriveRecipient]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'password': {'key': 'password', 'type': 'str'},
        'recipients': {'key': 'recipients', 'type': '[MicrosoftGraphDriveRecipient]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Paths85Vk2ODrivesDriveIdActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)
        self.scope = kwargs.get('scope', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.password = kwargs.get('password', None)
        self.recipients = kwargs.get('recipients', None)


class PathsIl1AdwSharesShareddriveitemIdListActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsIl1AdwSharesShareddriveitemIdListActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:
    :type type: str
    :param scope:
    :type scope: str
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param password:
    :type password: str
    :param recipients:
    :type recipients: list[~files.models.MicrosoftGraphDriveRecipient]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'password': {'key': 'password', 'type': 'str'},
        'recipients': {'key': 'recipients', 'type': '[MicrosoftGraphDriveRecipient]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PathsIl1AdwSharesShareddriveitemIdListActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)
        self.scope = kwargs.get('scope', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.password = kwargs.get('password', None)
        self.recipients = kwargs.get('recipients', None)


class PathsL44184SharesShareddriveitemIdListItemsListitemIdActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsL44184SharesShareddriveitemIdListItemsListitemIdActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:
    :type type: str
    :param scope:
    :type scope: str
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param password:
    :type password: str
    :param recipients:
    :type recipients: list[~files.models.MicrosoftGraphDriveRecipient]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'password': {'key': 'password', 'type': 'str'},
        'recipients': {'key': 'recipients', 'type': '[MicrosoftGraphDriveRecipient]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PathsL44184SharesShareddriveitemIdListItemsListitemIdActivitiesItemactivityoldIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)
        self.scope = kwargs.get('scope', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.password = kwargs.get('password', None)
        self.recipients = kwargs.get('recipients', None)


class PathsVput3UDrivesDriveIdListItemsListitemIdMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsVput3UDrivesDriveIdListItemsListitemIdMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:
    :type type: str
    :param scope:
    :type scope: str
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param password:
    :type password: str
    :param recipients:
    :type recipients: list[~files.models.MicrosoftGraphDriveRecipient]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'password': {'key': 'password', 'type': 'str'},
        'recipients': {'key': 'recipients', 'type': '[MicrosoftGraphDriveRecipient]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PathsVput3UDrivesDriveIdListItemsListitemIdMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)
        self.scope = kwargs.get('scope', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.password = kwargs.get('password', None)
        self.recipients = kwargs.get('recipients', None)


class PathsW7Qa13SharesShareddriveitemIdListItemsListitemIdMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsW7Qa13SharesShareddriveitemIdListItemsListitemIdMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:
    :type type: str
    :param scope:
    :type scope: str
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param password:
    :type password: str
    :param recipients:
    :type recipients: list[~files.models.MicrosoftGraphDriveRecipient]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'password': {'key': 'password', 'type': 'str'},
        'recipients': {'key': 'recipients', 'type': '[MicrosoftGraphDriveRecipient]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PathsW7Qa13SharesShareddriveitemIdListItemsListitemIdMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)
        self.scope = kwargs.get('scope', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.password = kwargs.get('password', None)
        self.recipients = kwargs.get('recipients', None)


class PathsWclibkSharesShareddriveitemIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsWclibkSharesShareddriveitemIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type:
    :type type: str
    :param scope:
    :type scope: str
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param password:
    :type password: str
    :param recipients:
    :type recipients: list[~files.models.MicrosoftGraphDriveRecipient]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'password': {'key': 'password', 'type': 'str'},
        'recipients': {'key': 'recipients', 'type': '[MicrosoftGraphDriveRecipient]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PathsWclibkSharesShareddriveitemIdListitemMicrosoftGraphCreatelinkPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)
        self.scope = kwargs.get('scope', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.password = kwargs.get('password', None)
        self.recipients = kwargs.get('recipients', None)
