# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddSharepointIds(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.sharepoint_ids = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'list-id':
                d['list_id'] = v[0]
            elif kl == 'list-item-id':
                d['list_item_id'] = v[0]
            elif kl == 'list-item-unique-id':
                d['list_item_unique_id'] = v[0]
            elif kl == 'site-id':
                d['site_id'] = v[0]
            elif kl == 'site-url':
                d['site_url'] = v[0]
            elif kl == 'tenant-id':
                d['tenant_id'] = v[0]
            elif kl == 'web-id':
                d['web_id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter sharepoint_ids. All possible keys are: '
                               'list-id, list-item-id, list-item-unique-id, site-id, site-url, tenant-id, web-id'.
                               format(k))
        return d


class AddApplication(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.application = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter application. All possible keys are: '
                               'display-name, id'.format(k))
        return d


class AddResources(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddResources, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'content':
                d['content'] = v[0]
            elif kl == 'content-url':
                d['content_url'] = v[0]
            elif kl == 'self':
                d['self_property'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter resources. All possible keys are: '
                               'content, content-url, self, id'.format(k))
        return d


class AddDetails(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddDetails, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'code':
                d['code'] = v[0]
            elif kl == 'message':
                d['message'] = v[0]
            elif kl == 'target':
                d['target'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter details. All possible keys are: code, '
                               'message, target'.format(k))
        return d


class AddInnerError(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.inner_error = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'code':
                d['code'] = v[0]
            elif kl == 'details':
                d['details'] = v
            elif kl == 'message':
                d['message'] = v[0]
            elif kl == 'target':
                d['target'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter inner_error. All possible keys are: code, '
                               'details, message, target'.format(k))
        return d


class AddCalculated(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.calculated = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'format':
                d['format'] = v[0]
            elif kl == 'formula':
                d['formula'] = v[0]
            elif kl == 'output-type':
                d['output_type'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter calculated. All possible keys are: '
                               'format, formula, output-type'.format(k))
        return d


class AddChoice(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.choice = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'allow-text-entry':
                d['allow_text_entry'] = v[0]
            elif kl == 'choices':
                d['choices'] = v
            elif kl == 'display-as':
                d['display_as'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter choice. All possible keys are: '
                               'allow-text-entry, choices, display-as'.format(k))
        return d


class AddDateTime(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.date_time = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-as':
                d['display_as'] = v[0]
            elif kl == 'format':
                d['format'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter date_time. All possible keys are: '
                               'display-as, format'.format(k))
        return d


class AddDefaultValue(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.default_value = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'formula':
                d['formula'] = v[0]
            elif kl == 'value':
                d['value'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter default_value. All possible keys are: '
                               'formula, value'.format(k))
        return d


class AddLookup(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.lookup = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'allow-multiple-values':
                d['allow_multiple_values'] = v[0]
            elif kl == 'allow-unlimited-length':
                d['allow_unlimited_length'] = v[0]
            elif kl == 'column-name':
                d['column_name'] = v[0]
            elif kl == 'list-id':
                d['list_id'] = v[0]
            elif kl == 'primary-lookup-column-id':
                d['primary_lookup_column_id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter lookup. All possible keys are: '
                               'allow-multiple-values, allow-unlimited-length, column-name, list-id, '
                               'primary-lookup-column-id'.format(k))
        return d


class AddNumber(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.number = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'decimal-places':
                d['decimal_places'] = v[0]
            elif kl == 'display-as':
                d['display_as'] = v[0]
            elif kl == 'maximum':
                d['maximum'] = v[0]
            elif kl == 'minimum':
                d['minimum'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter number. All possible keys are: '
                               'decimal-places, display-as, maximum, minimum'.format(k))
        return d


class AddPersonOrGroup(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.person_or_group = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'allow-multiple-selection':
                d['allow_multiple_selection'] = v[0]
            elif kl == 'choose-from-type':
                d['choose_from_type'] = v[0]
            elif kl == 'display-as':
                d['display_as'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter person_or_group. All possible keys are: '
                               'allow-multiple-selection, choose-from-type, display-as'.format(k))
        return d


class AddText(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.text = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'allow-multiple-lines':
                d['allow_multiple_lines'] = v[0]
            elif kl == 'append-changes-to-existing-text':
                d['append_changes_to_existing_text'] = v[0]
            elif kl == 'lines-for-editing':
                d['lines_for_editing'] = v[0]
            elif kl == 'max-length':
                d['max_length'] = v[0]
            elif kl == 'text-type':
                d['text_type'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter text. All possible keys are: '
                               'allow-multiple-lines, append-changes-to-existing-text, lines-for-editing, max-length, '
                               'text-type'.format(k))
        return d


class AddOrder(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.order = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'default':
                d['default'] = v[0]
            elif kl == 'position':
                d['position'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter order. All possible keys are: default, '
                               'position'.format(k))
        return d


class AddColumnLinks(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddColumnLinks, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'name':
                d['name'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter column_links. All possible keys are: '
                               'name, id'.format(k))
        return d


class AddStoragePlanInformation(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.storage_plan_information = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'upgrade-available':
                d['upgrade_available'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter storage_plan_information. All possible '
                               'keys are: upgrade-available'.format(k))
        return d


class AddList(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.list = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'content-types-enabled':
                d['content_types_enabled'] = v[0]
            elif kl == 'hidden':
                d['hidden'] = v[0]
            elif kl == 'template':
                d['template'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter list. All possible keys are: '
                               'content-types-enabled, hidden, template'.format(k))
        return d


class AddSitesSubscriptions(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSitesSubscriptions, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'application-id':
                d['application_id'] = v[0]
            elif kl == 'change-type':
                d['change_type'] = v[0]
            elif kl == 'client-state':
                d['client_state'] = v[0]
            elif kl == 'creator-id':
                d['creator_id'] = v[0]
            elif kl == 'encryption-certificate':
                d['encryption_certificate'] = v[0]
            elif kl == 'encryption-certificate-id':
                d['encryption_certificate_id'] = v[0]
            elif kl == 'expiration-date-time':
                d['expiration_date_time'] = v[0]
            elif kl == 'include-resource-data':
                d['include_resource_data'] = v[0]
            elif kl == 'latest-supported-tls-version':
                d['latest_supported_tls_version'] = v[0]
            elif kl == 'lifecycle-notification-url':
                d['lifecycle_notification_url'] = v[0]
            elif kl == 'notification-url':
                d['notification_url'] = v[0]
            elif kl == 'resource':
                d['resource'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter subscriptions. All possible keys are: '
                               'application-id, change-type, client-state, creator-id, encryption-certificate, '
                               'encryption-certificate-id, expiration-date-time, include-resource-data, '
                               'latest-supported-tls-version, lifecycle-notification-url, notification-url, resource, '
                               'id'.format(k))
        return d


class AddContentType(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.content_type = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'id':
                d['id'] = v[0]
            elif kl == 'name':
                d['name'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter content_type. All possible keys are: id, '
                               'name'.format(k))
        return d


class AddSitesListsVersions(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSitesListsVersions, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'id-fields-id':
                d['id'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'publication':
                d['publication'] = v[0]
            elif kl == 'application':
                d['application'] = v[0]
            elif kl == 'device':
                d['device'] = v[0]
            elif kl == 'user':
                d['user'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter versions. All possible keys are: '
                               'id-fields-id, last-modified-date-time, publication, application, device, user, id'.
                               format(k))
        return d


class AddPublication(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.publication = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'level':
                d['level'] = v[0]
            elif kl == 'version-id':
                d['version_id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter publication. All possible keys are: '
                               'level, version-id'.format(k))
        return d


class AddAudio(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.audio = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'album':
                d['album'] = v[0]
            elif kl == 'album-artist':
                d['album_artist'] = v[0]
            elif kl == 'artist':
                d['artist'] = v[0]
            elif kl == 'bitrate':
                d['bitrate'] = v[0]
            elif kl == 'composers':
                d['composers'] = v[0]
            elif kl == 'copyright':
                d['copyright'] = v[0]
            elif kl == 'disc':
                d['disc'] = v[0]
            elif kl == 'disc-count':
                d['disc_count'] = v[0]
            elif kl == 'duration':
                d['duration'] = v[0]
            elif kl == 'genre':
                d['genre'] = v[0]
            elif kl == 'has-drm':
                d['has_drm'] = v[0]
            elif kl == 'is-variable-bitrate':
                d['is_variable_bitrate'] = v[0]
            elif kl == 'title':
                d['title'] = v[0]
            elif kl == 'track':
                d['track'] = v[0]
            elif kl == 'track-count':
                d['track_count'] = v[0]
            elif kl == 'year':
                d['year'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter audio. All possible keys are: album, '
                               'album-artist, artist, bitrate, composers, copyright, disc, disc-count, duration, '
                               'genre, has-drm, is-variable-bitrate, title, track, track-count, year'.format(k))
        return d


class AddFileSystemInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.file_system_info = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'created-date-time':
                d['created_date_time'] = v[0]
            elif kl == 'last-accessed-date-time':
                d['last_accessed_date_time'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter file_system_info. All possible keys are: '
                               'created-date-time, last-accessed-date-time, last-modified-date-time'.format(k))
        return d


class AddImage(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.image = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'height':
                d['height'] = v[0]
            elif kl == 'width':
                d['width'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter image. All possible keys are: height, '
                               'width'.format(k))
        return d


class AddLocation(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.location = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'altitude':
                d['altitude'] = v[0]
            elif kl == 'latitude':
                d['latitude'] = v[0]
            elif kl == 'longitude':
                d['longitude'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter location. All possible keys are: '
                               'altitude, latitude, longitude'.format(k))
        return d


class AddPhoto(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.photo = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'camera-make':
                d['camera_make'] = v[0]
            elif kl == 'camera-model':
                d['camera_model'] = v[0]
            elif kl == 'exposure-denominator':
                d['exposure_denominator'] = v[0]
            elif kl == 'exposure-numerator':
                d['exposure_numerator'] = v[0]
            elif kl == 'f-number':
                d['f_number'] = v[0]
            elif kl == 'focal-length':
                d['focal_length'] = v[0]
            elif kl == 'iso':
                d['iso'] = v[0]
            elif kl == 'orientation':
                d['orientation'] = v[0]
            elif kl == 'taken-date-time':
                d['taken_date_time'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter photo. All possible keys are: '
                               'camera-make, camera-model, exposure-denominator, exposure-numerator, f-number, '
                               'focal-length, iso, orientation, taken-date-time'.format(k))
        return d


class AddVideo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.video = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'audio-bits-per-sample':
                d['audio_bits_per_sample'] = v[0]
            elif kl == 'audio-channels':
                d['audio_channels'] = v[0]
            elif kl == 'audio-format':
                d['audio_format'] = v[0]
            elif kl == 'audio-samples-per-second':
                d['audio_samples_per_second'] = v[0]
            elif kl == 'bitrate':
                d['bitrate'] = v[0]
            elif kl == 'duration':
                d['duration'] = v[0]
            elif kl == 'four-cc':
                d['four_cc'] = v[0]
            elif kl == 'frame-rate':
                d['frame_rate'] = v[0]
            elif kl == 'height':
                d['height'] = v[0]
            elif kl == 'width':
                d['width'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter video. All possible keys are: '
                               'audio-bits-per-sample, audio-channels, audio-format, audio-samples-per-second, '
                               'bitrate, duration, four-cc, frame-rate, height, width'.format(k))
        return d


class AddSitesListsItemsSubscriptions(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSitesListsItemsSubscriptions, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'application-id':
                d['application_id'] = v[0]
            elif kl == 'change-type':
                d['change_type'] = v[0]
            elif kl == 'client-state':
                d['client_state'] = v[0]
            elif kl == 'creator-id':
                d['creator_id'] = v[0]
            elif kl == 'encryption-certificate':
                d['encryption_certificate'] = v[0]
            elif kl == 'encryption-certificate-id':
                d['encryption_certificate_id'] = v[0]
            elif kl == 'expiration-date-time':
                d['expiration_date_time'] = v[0]
            elif kl == 'include-resource-data':
                d['include_resource_data'] = v[0]
            elif kl == 'latest-supported-tls-version':
                d['latest_supported_tls_version'] = v[0]
            elif kl == 'lifecycle-notification-url':
                d['lifecycle_notification_url'] = v[0]
            elif kl == 'notification-url':
                d['notification_url'] = v[0]
            elif kl == 'resource':
                d['resource'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter subscriptions. All possible keys are: '
                               'application-id, change-type, client-state, creator-id, encryption-certificate, '
                               'encryption-certificate-id, expiration-date-time, include-resource-data, '
                               'latest-supported-tls-version, lifecycle-notification-url, notification-url, resource, '
                               'id'.format(k))
        return d


class AddSitesListsItemsVersions(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSitesListsItemsVersions, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'content':
                d['content'] = v[0]
            elif kl == 'size':
                d['size'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'publication':
                d['publication'] = v[0]
            elif kl == 'application':
                d['application'] = v[0]
            elif kl == 'device':
                d['device'] = v[0]
            elif kl == 'user':
                d['user'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter versions. All possible keys are: content, '
                               'size, last-modified-date-time, publication, application, device, user, id'.format(k))
        return d


class AddMicrosoftGraphWorkbookApplication(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.microsoft_graph_workbook_application = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'calculation-mode':
                d['calculation_mode'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter microsoft_graph_workbook_application. All '
                               'possible keys are: calculation-mode, id'.format(k))
        return d


class AddFunctions(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.functions = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'id':
                d['id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter functions. All possible keys are: id'.
                format(k))
        return d


class AddPackage(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.package = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'type':
                d['type'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter package. All possible keys are: type'.
                format(k))
        return d


class AddSpecialFolder(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.special_folder = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'name':
                d['name'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter special_folder. All possible keys are: '
                               'name'.format(k))
        return d


class AddView(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.view = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'sort-by':
                d['sort_by'] = v[0]
            elif kl == 'sort-order':
                d['sort_order'] = v[0]
            elif kl == 'view-type':
                d['view_type'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter view. All possible keys are: sort-by, '
                               'sort-order, view-type'.format(k))
        return d


class AddHashes(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.hashes = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'crc32-hash':
                d['crc32_hash'] = v[0]
            elif kl == 'quick-xor-hash':
                d['quick_xor_hash'] = v[0]
            elif kl == 'sha1-hash':
                d['sha1_hash'] = v[0]
            elif kl == 'sha256-hash':
                d['sha256_hash'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter hashes. All possible keys are: '
                               'crc32-hash, quick-xor-hash, sha1-hash, sha256-hash'.format(k))
        return d


class AddSitesOnenoteNotebooksSectiongroupsSectionsPagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSitesOnenoteNotebooksSectiongroupsSectionsPagesCommands, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'action':
                d['action'] = v[0]
            elif kl == 'content':
                d['content'] = v[0]
            elif kl == 'position':
                d['position'] = v[0]
            elif kl == 'target':
                d['target'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, '
                               'content, position, target'.format(k))
        return d


class AddSitesOnenoteNotebooksSectionsPagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSitesOnenoteNotebooksSectionsPagesCommands, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'action':
                d['action'] = v[0]
            elif kl == 'content':
                d['content'] = v[0]
            elif kl == 'position':
                d['position'] = v[0]
            elif kl == 'target':
                d['target'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, '
                               'content, position, target'.format(k))
        return d


class AddSitesOnenotePagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSitesOnenotePagesCommands, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'action':
                d['action'] = v[0]
            elif kl == 'content':
                d['content'] = v[0]
            elif kl == 'position':
                d['position'] = v[0]
            elif kl == 'target':
                d['target'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, '
                               'content, position, target'.format(k))
        return d


class AddSitesOnenotePagesParentnotebookSectiongroupsSectionsPagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSitesOnenotePagesParentnotebookSectiongroupsSectionsPagesCommands, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'action':
                d['action'] = v[0]
            elif kl == 'content':
                d['content'] = v[0]
            elif kl == 'position':
                d['position'] = v[0]
            elif kl == 'target':
                d['target'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, '
                               'content, position, target'.format(k))
        return d


class AddSitesOnenotePagesParentnotebookSectionsPagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSitesOnenotePagesParentnotebookSectionsPagesCommands, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'action':
                d['action'] = v[0]
            elif kl == 'content':
                d['content'] = v[0]
            elif kl == 'position':
                d['position'] = v[0]
            elif kl == 'target':
                d['target'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, '
                               'content, position, target'.format(k))
        return d


class AddSitesOnenotePagesParentsectionPagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSitesOnenotePagesParentsectionPagesCommands, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'action':
                d['action'] = v[0]
            elif kl == 'content':
                d['content'] = v[0]
            elif kl == 'position':
                d['position'] = v[0]
            elif kl == 'target':
                d['target'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, '
                               'content, position, target'.format(k))
        return d


class AddSitesOnenoteSectiongroupsParentnotebookSectionsPagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSitesOnenoteSectiongroupsParentnotebookSectionsPagesCommands, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'action':
                d['action'] = v[0]
            elif kl == 'content':
                d['content'] = v[0]
            elif kl == 'position':
                d['position'] = v[0]
            elif kl == 'target':
                d['target'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, '
                               'content, position, target'.format(k))
        return d


class AddSitesOnenoteSectiongroupsSectionsPagesCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSitesOnenoteSectiongroupsSectionsPagesCommands, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'action':
                d['action'] = v[0]
            elif kl == 'content':
                d['content'] = v[0]
            elif kl == 'position':
                d['position'] = v[0]
            elif kl == 'target':
                d['target'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, '
                               'content, position, target'.format(k))
        return d


class AddCommands(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCommands, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'action':
                d['action'] = v[0]
            elif kl == 'content':
                d['content'] = v[0]
            elif kl == 'position':
                d['position'] = v[0]
            elif kl == 'target':
                d['target'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter commands. All possible keys are: action, '
                               'content, position, target'.format(k))
        return d
