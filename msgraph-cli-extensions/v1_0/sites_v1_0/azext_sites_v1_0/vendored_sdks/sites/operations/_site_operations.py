# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class SiteOperations(object):
    """SiteOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~sites.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def get_analytic(
        self,
        site_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum69"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum70"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphItemAnalytics"
        """Get analytics from sites.

        Get analytics from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum69]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum70]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphItemAnalytics, or the result of cls(response)
        :rtype: ~sites.models.MicrosoftGraphItemAnalytics
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphItemAnalytics"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_analytic.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphItemAnalytics', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_analytic.metadata = {'url': '/sites/{site-id}/analytics'}  # type: ignore

    def get_ref_analytic(
        self,
        site_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> str
        """Get ref of analytics from sites.

        Get ref of analytics from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_ref_analytic.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_ref_analytic.metadata = {'url': '/sites/{site-id}/analytics/$ref'}  # type: ignore

    def set_ref_analytic(
        self,
        site_id,  # type: str
        body,  # type: Dict[str, object]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the ref of navigation property analytics in sites.

        Update the ref of navigation property analytics in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param body: New navigation property ref values.
        :type body: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.set_ref_analytic.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, '{object}')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    set_ref_analytic.metadata = {'url': '/sites/{site-id}/analytics/$ref'}  # type: ignore

    def delete_ref_analytic(
        self,
        site_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete ref of navigation property analytics for sites.

        Delete ref of navigation property analytics for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_ref_analytic.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_ref_analytic.metadata = {'url': '/sites/{site-id}/analytics/$ref'}  # type: ignore

    def list_column(
        self,
        site_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum71"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum72"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfColumnDefinition"]
        """Get columns from sites.

        Get columns from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~sites.models.Enum71]
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum72]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfColumnDefinition or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~sites.models.CollectionOfColumnDefinition]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfColumnDefinition"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_column.metadata['url']  # type: ignore
                path_format_arguments = {
                    'site-id': self._serialize.url("site_id", site_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfColumnDefinition', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_column.metadata = {'url': '/sites/{site-id}/columns'}  # type: ignore

    def create_column(
        self,
        site_id,  # type: str
        id=None,  # type: Optional[str]
        boolean=None,  # type: Optional[Dict[str, object]]
        calculated=None,  # type: Optional["models.MicrosoftGraphCalculatedColumn"]
        choice=None,  # type: Optional["models.MicrosoftGraphChoiceColumn"]
        column_group=None,  # type: Optional[str]
        date_time=None,  # type: Optional["models.MicrosoftGraphDateTimeColumn"]
        default_value=None,  # type: Optional["models.MicrosoftGraphDefaultColumnValue"]
        description=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        enforce_unique_values=None,  # type: Optional[bool]
        geolocation=None,  # type: Optional[Dict[str, object]]
        hidden=None,  # type: Optional[bool]
        indexed=None,  # type: Optional[bool]
        lookup=None,  # type: Optional["models.MicrosoftGraphLookupColumn"]
        name=None,  # type: Optional[str]
        number=None,  # type: Optional["models.MicrosoftGraphNumberColumn"]
        person_or_group=None,  # type: Optional["models.MicrosoftGraphPersonOrGroupColumn"]
        read_only=None,  # type: Optional[bool]
        required=None,  # type: Optional[bool]
        text=None,  # type: Optional["models.MicrosoftGraphTextColumn"]
        locale=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphColumnDefinition"
        """Create new navigation property to columns for sites.

        Create new navigation property to columns for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param id: Read-only.
        :type id: str
        :param boolean: booleanColumn.
        :type boolean: dict[str, object]
        :param calculated: calculatedColumn.
        :type calculated: ~sites.models.MicrosoftGraphCalculatedColumn
        :param choice: choiceColumn.
        :type choice: ~sites.models.MicrosoftGraphChoiceColumn
        :param column_group: For site columns, the name of the group this column belongs to. Helps
         organize related columns.
        :type column_group: str
        :param date_time: dateTimeColumn.
        :type date_time: ~sites.models.MicrosoftGraphDateTimeColumn
        :param default_value: defaultColumnValue.
        :type default_value: ~sites.models.MicrosoftGraphDefaultColumnValue
        :param description: The user-facing description of the column.
        :type description: str
        :param display_name: The user-facing name of the column.
        :type display_name: str
        :param enforce_unique_values: If true, no two list items may have the same value for this
         column.
        :type enforce_unique_values: bool
        :param geolocation: geolocationColumn.
        :type geolocation: dict[str, object]
        :param hidden: Specifies whether the column is displayed in the user interface.
        :type hidden: bool
        :param indexed: Specifies whether the column values can used for sorting and searching.
        :type indexed: bool
        :param lookup: lookupColumn.
        :type lookup: ~sites.models.MicrosoftGraphLookupColumn
        :param name: The API-facing name of the column as it appears in the [fields][] on a
         [listItem][]. For the user-facing name, see displayName.
        :type name: str
        :param number: numberColumn.
        :type number: ~sites.models.MicrosoftGraphNumberColumn
        :param person_or_group: personOrGroupColumn.
        :type person_or_group: ~sites.models.MicrosoftGraphPersonOrGroupColumn
        :param read_only: Specifies whether the column values can be modified.
        :type read_only: bool
        :param required: Specifies whether the column value is not optional.
        :type required: bool
        :param text: textColumn.
        :type text: ~sites.models.MicrosoftGraphTextColumn
        :param locale: Specifies the locale from which to infer the currency symbol.
        :type locale: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphColumnDefinition, or the result of cls(response)
        :rtype: ~sites.models.MicrosoftGraphColumnDefinition
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphColumnDefinition"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphColumnDefinition(id=id, boolean=boolean, calculated=calculated, choice=choice, column_group=column_group, date_time=date_time, default_value=default_value, description=description, display_name=display_name, enforce_unique_values=enforce_unique_values, geolocation=geolocation, hidden=hidden, indexed=indexed, lookup=lookup, name=name, number=number, person_or_group=person_or_group, read_only=read_only, required=required, text=text, locale=locale)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_column.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphColumnDefinition')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphColumnDefinition', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_column.metadata = {'url': '/sites/{site-id}/columns'}  # type: ignore

    def get_column(
        self,
        site_id,  # type: str
        column_definition_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum73"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphColumnDefinition"
        """Get columns from sites.

        Get columns from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param column_definition_id: key: id of columnDefinition.
        :type column_definition_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum73]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphColumnDefinition, or the result of cls(response)
        :rtype: ~sites.models.MicrosoftGraphColumnDefinition
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphColumnDefinition"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_column.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'columnDefinition-id': self._serialize.url("column_definition_id", column_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphColumnDefinition', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_column.metadata = {'url': '/sites/{site-id}/columns/{columnDefinition-id}'}  # type: ignore

    def update_column(
        self,
        site_id,  # type: str
        column_definition_id,  # type: str
        id=None,  # type: Optional[str]
        boolean=None,  # type: Optional[Dict[str, object]]
        calculated=None,  # type: Optional["models.MicrosoftGraphCalculatedColumn"]
        choice=None,  # type: Optional["models.MicrosoftGraphChoiceColumn"]
        column_group=None,  # type: Optional[str]
        date_time=None,  # type: Optional["models.MicrosoftGraphDateTimeColumn"]
        default_value=None,  # type: Optional["models.MicrosoftGraphDefaultColumnValue"]
        description=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        enforce_unique_values=None,  # type: Optional[bool]
        geolocation=None,  # type: Optional[Dict[str, object]]
        hidden=None,  # type: Optional[bool]
        indexed=None,  # type: Optional[bool]
        lookup=None,  # type: Optional["models.MicrosoftGraphLookupColumn"]
        name=None,  # type: Optional[str]
        number=None,  # type: Optional["models.MicrosoftGraphNumberColumn"]
        person_or_group=None,  # type: Optional["models.MicrosoftGraphPersonOrGroupColumn"]
        read_only=None,  # type: Optional[bool]
        required=None,  # type: Optional[bool]
        text=None,  # type: Optional["models.MicrosoftGraphTextColumn"]
        locale=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property columns in sites.

        Update the navigation property columns in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param column_definition_id: key: id of columnDefinition.
        :type column_definition_id: str
        :param id: Read-only.
        :type id: str
        :param boolean: booleanColumn.
        :type boolean: dict[str, object]
        :param calculated: calculatedColumn.
        :type calculated: ~sites.models.MicrosoftGraphCalculatedColumn
        :param choice: choiceColumn.
        :type choice: ~sites.models.MicrosoftGraphChoiceColumn
        :param column_group: For site columns, the name of the group this column belongs to. Helps
         organize related columns.
        :type column_group: str
        :param date_time: dateTimeColumn.
        :type date_time: ~sites.models.MicrosoftGraphDateTimeColumn
        :param default_value: defaultColumnValue.
        :type default_value: ~sites.models.MicrosoftGraphDefaultColumnValue
        :param description: The user-facing description of the column.
        :type description: str
        :param display_name: The user-facing name of the column.
        :type display_name: str
        :param enforce_unique_values: If true, no two list items may have the same value for this
         column.
        :type enforce_unique_values: bool
        :param geolocation: geolocationColumn.
        :type geolocation: dict[str, object]
        :param hidden: Specifies whether the column is displayed in the user interface.
        :type hidden: bool
        :param indexed: Specifies whether the column values can used for sorting and searching.
        :type indexed: bool
        :param lookup: lookupColumn.
        :type lookup: ~sites.models.MicrosoftGraphLookupColumn
        :param name: The API-facing name of the column as it appears in the [fields][] on a
         [listItem][]. For the user-facing name, see displayName.
        :type name: str
        :param number: numberColumn.
        :type number: ~sites.models.MicrosoftGraphNumberColumn
        :param person_or_group: personOrGroupColumn.
        :type person_or_group: ~sites.models.MicrosoftGraphPersonOrGroupColumn
        :param read_only: Specifies whether the column values can be modified.
        :type read_only: bool
        :param required: Specifies whether the column value is not optional.
        :type required: bool
        :param text: textColumn.
        :type text: ~sites.models.MicrosoftGraphTextColumn
        :param locale: Specifies the locale from which to infer the currency symbol.
        :type locale: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphColumnDefinition(id=id, boolean=boolean, calculated=calculated, choice=choice, column_group=column_group, date_time=date_time, default_value=default_value, description=description, display_name=display_name, enforce_unique_values=enforce_unique_values, geolocation=geolocation, hidden=hidden, indexed=indexed, lookup=lookup, name=name, number=number, person_or_group=person_or_group, read_only=read_only, required=required, text=text, locale=locale)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_column.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'columnDefinition-id': self._serialize.url("column_definition_id", column_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphColumnDefinition')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_column.metadata = {'url': '/sites/{site-id}/columns/{columnDefinition-id}'}  # type: ignore

    def delete_column(
        self,
        site_id,  # type: str
        column_definition_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property columns for sites.

        Delete navigation property columns for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param column_definition_id: key: id of columnDefinition.
        :type column_definition_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_column.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'columnDefinition-id': self._serialize.url("column_definition_id", column_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_column.metadata = {'url': '/sites/{site-id}/columns/{columnDefinition-id}'}  # type: ignore

    def list_content_type(
        self,
        site_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum74"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum75"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum76"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfContentType"]
        """Get contentTypes from sites.

        Get contentTypes from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~sites.models.Enum74]
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum75]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum76]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfContentType or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~sites.models.CollectionOfContentType]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfContentType"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_content_type.metadata['url']  # type: ignore
                path_format_arguments = {
                    'site-id': self._serialize.url("site_id", site_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfContentType', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_content_type.metadata = {'url': '/sites/{site-id}/contentTypes'}  # type: ignore

    def create_content_type(
        self,
        site_id,  # type: str
        id=None,  # type: Optional[str]
        description=None,  # type: Optional[str]
        group=None,  # type: Optional[str]
        hidden=None,  # type: Optional[bool]
        name=None,  # type: Optional[str]
        order=None,  # type: Optional["models.MicrosoftGraphContentTypeOrder"]
        parent_id=None,  # type: Optional[str]
        read_only=None,  # type: Optional[bool]
        sealed=None,  # type: Optional[bool]
        column_links=None,  # type: Optional[List["models.MicrosoftGraphColumnLink"]]
        drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        microsoft_graph_item_reference_site_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphContentType"
        """Create new navigation property to contentTypes for sites.

        Create new navigation property to contentTypes for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param id: Read-only.
        :type id: str
        :param description: The descriptive text for the item.
        :type description: str
        :param group: The name of the group this content type belongs to. Helps organize related
         content types.
        :type group: str
        :param hidden: Indicates whether the content type is hidden in the list's 'New' menu.
        :type hidden: bool
        :param name: The name of the content type.
        :type name: str
        :param order: contentTypeOrder.
        :type order: ~sites.models.MicrosoftGraphContentTypeOrder
        :param parent_id: The unique identifier of the content type.
        :type parent_id: str
        :param read_only: If true, the content type cannot be modified unless this value is first set
         to false.
        :type read_only: bool
        :param sealed: If true, the content type cannot be modified by users or through push-down
         operations. Only site collection administrators can seal or unseal content types.
        :type sealed: bool
        :param column_links: The collection of columns that are required by this content type.
        :type column_links: list[~sites.models.MicrosoftGraphColumnLink]
        :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
        :type drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param microsoft_graph_item_reference_site_id:
        :type microsoft_graph_item_reference_site_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphContentType, or the result of cls(response)
        :rtype: ~sites.models.MicrosoftGraphContentType
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphContentType"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphContentType(id=id, description=description, group=group, hidden=hidden, name=name, order=order, parent_id=parent_id, read_only=read_only, sealed=sealed, column_links=column_links, drive_id=drive_id, drive_type=drive_type, id_inherited_from_id=microsoft_graph_item_reference_id, name_inherited_from_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=microsoft_graph_item_reference_site_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_content_type.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphContentType')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphContentType', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_content_type.metadata = {'url': '/sites/{site-id}/contentTypes'}  # type: ignore

    def get_content_type(
        self,
        site_id,  # type: str
        content_type_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum77"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum78"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphContentType"
        """Get contentTypes from sites.

        Get contentTypes from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param content_type_id: key: id of contentType.
        :type content_type_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum77]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum78]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphContentType, or the result of cls(response)
        :rtype: ~sites.models.MicrosoftGraphContentType
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphContentType"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_content_type.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'contentType-id': self._serialize.url("content_type_id", content_type_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphContentType', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_content_type.metadata = {'url': '/sites/{site-id}/contentTypes/{contentType-id}'}  # type: ignore

    def update_content_type(
        self,
        site_id,  # type: str
        content_type_id,  # type: str
        id=None,  # type: Optional[str]
        description=None,  # type: Optional[str]
        group=None,  # type: Optional[str]
        hidden=None,  # type: Optional[bool]
        name=None,  # type: Optional[str]
        order=None,  # type: Optional["models.MicrosoftGraphContentTypeOrder"]
        parent_id=None,  # type: Optional[str]
        read_only=None,  # type: Optional[bool]
        sealed=None,  # type: Optional[bool]
        column_links=None,  # type: Optional[List["models.MicrosoftGraphColumnLink"]]
        drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        microsoft_graph_item_reference_site_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property contentTypes in sites.

        Update the navigation property contentTypes in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param content_type_id: key: id of contentType.
        :type content_type_id: str
        :param id: Read-only.
        :type id: str
        :param description: The descriptive text for the item.
        :type description: str
        :param group: The name of the group this content type belongs to. Helps organize related
         content types.
        :type group: str
        :param hidden: Indicates whether the content type is hidden in the list's 'New' menu.
        :type hidden: bool
        :param name: The name of the content type.
        :type name: str
        :param order: contentTypeOrder.
        :type order: ~sites.models.MicrosoftGraphContentTypeOrder
        :param parent_id: The unique identifier of the content type.
        :type parent_id: str
        :param read_only: If true, the content type cannot be modified unless this value is first set
         to false.
        :type read_only: bool
        :param sealed: If true, the content type cannot be modified by users or through push-down
         operations. Only site collection administrators can seal or unseal content types.
        :type sealed: bool
        :param column_links: The collection of columns that are required by this content type.
        :type column_links: list[~sites.models.MicrosoftGraphColumnLink]
        :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
        :type drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param microsoft_graph_item_reference_site_id:
        :type microsoft_graph_item_reference_site_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphContentType(id=id, description=description, group=group, hidden=hidden, name=name, order=order, parent_id=parent_id, read_only=read_only, sealed=sealed, column_links=column_links, drive_id=drive_id, drive_type=drive_type, id_inherited_from_id=microsoft_graph_item_reference_id, name_inherited_from_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=microsoft_graph_item_reference_site_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_content_type.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'contentType-id': self._serialize.url("content_type_id", content_type_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphContentType')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_content_type.metadata = {'url': '/sites/{site-id}/contentTypes/{contentType-id}'}  # type: ignore

    def delete_content_type(
        self,
        site_id,  # type: str
        content_type_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property contentTypes for sites.

        Delete navigation property contentTypes for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param content_type_id: key: id of contentType.
        :type content_type_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_content_type.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'contentType-id': self._serialize.url("content_type_id", content_type_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_content_type.metadata = {'url': '/sites/{site-id}/contentTypes/{contentType-id}'}  # type: ignore

    def get_drive(
        self,
        site_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum82"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum83"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphDrive"
        """Get drive from sites.

        Get drive from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum82]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum83]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDrive, or the result of cls(response)
        :rtype: ~sites.models.MicrosoftGraphDrive
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDrive"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_drive.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDrive', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_drive.metadata = {'url': '/sites/{site-id}/drive'}  # type: ignore

    def update_drive(
        self,
        site_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        e_tag=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        name=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        created_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        last_modified_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        microsoft_graph_item_reference_site_id=None,  # type: Optional[str]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_drive_type=None,  # type: Optional[str]
        share_point_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        system=None,  # type: Optional[Dict[str, object]]
        following=None,  # type: Optional[List["models.MicrosoftGraphDriveItem"]]
        items=None,  # type: Optional[List["models.MicrosoftGraphDriveItem"]]
        list=None,  # type: Optional["models.MicrosoftGraphList"]
        root=None,  # type: Optional["models.MicrosoftGraphDriveItem"]
        special=None,  # type: Optional[List["models.MicrosoftGraphDriveItem"]]
        deleted=None,  # type: Optional[int]
        remaining=None,  # type: Optional[int]
        state=None,  # type: Optional[str]
        storage_plan_information=None,  # type: Optional["models.MicrosoftGraphStoragePlanInformation"]
        total=None,  # type: Optional[int]
        used=None,  # type: Optional[int]
        application1=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device1=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user1=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property drive in sites.

        Update the navigation property drive in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: Date and time of item creation. Read-only.
        :type created_date_time: ~datetime.datetime
        :param description: Provides a user-visible description of the item. Optional.
        :type description: str
        :param e_tag: ETag for the item. Read-only.
        :type e_tag: str
        :param last_modified_date_time: Date and time the item was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param name: The name of the item. Read-write.
        :type name: str
        :param web_url: URL that displays the resource in the browser. Read-only.
        :type web_url: str
        :param created_by_user: Represents an Azure Active Directory user object.
        :type created_by_user: ~sites.models.MicrosoftGraphUser
        :param last_modified_by_user: Represents an Azure Active Directory user object.
        :type last_modified_by_user: ~sites.models.MicrosoftGraphUser
        :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
        :type drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param microsoft_graph_item_reference_site_id:
        :type microsoft_graph_item_reference_site_id: str
        :param application: identity.
        :type application: ~sites.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~sites.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_drive_type: Describes the type of drive represented by this resource.
         OneDrive personal drives will return personal. OneDrive for Business will return business.
         SharePoint document libraries will return documentLibrary. Read-only.
        :type microsoft_graph_drive_type: str
        :param share_point_ids: sharepointIds.
        :type share_point_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param system: systemFacet.
        :type system: dict[str, object]
        :param following: The list of items the user is following. Only in OneDrive for Business.
        :type following: list[~sites.models.MicrosoftGraphDriveItem]
        :param items: All items contained in the drive. Read-only. Nullable.
        :type items: list[~sites.models.MicrosoftGraphDriveItem]
        :param list: list.
        :type list: ~sites.models.MicrosoftGraphList
        :param root: driveItem.
        :type root: ~sites.models.MicrosoftGraphDriveItem
        :param special: Collection of common folders available in OneDrive. Read-only. Nullable.
        :type special: list[~sites.models.MicrosoftGraphDriveItem]
        :param deleted: Total space consumed by files in the recycle bin, in bytes. Read-only.
        :type deleted: long
        :param remaining: Total space remaining before reaching the quota limit, in bytes. Read-only.
        :type remaining: long
        :param state: Enumeration value that indicates the state of the storage space. Read-only.
        :type state: str
        :param storage_plan_information: storagePlanInformation.
        :type storage_plan_information: ~sites.models.MicrosoftGraphStoragePlanInformation
        :param total: Total allowed storage space, in bytes. Read-only.
        :type total: long
        :param used: Total space used, in bytes. Read-only.
        :type used: long
        :param application1: identity.
        :type application1: ~sites.models.MicrosoftGraphIdentity
        :param device1: identity.
        :type device1: ~sites.models.MicrosoftGraphIdentity
        :param user1: identity.
        :type user1: ~sites.models.MicrosoftGraphIdentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphDrive(id=id, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_date_time=last_modified_date_time, name=name, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, drive_id=drive_id, drive_type=drive_type, id_parent_reference_id=microsoft_graph_item_reference_id, name_parent_reference_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=microsoft_graph_item_reference_site_id, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, drive_type=microsoft_graph_drive_type, share_point_ids=share_point_ids, system=system, following=following, items=items, list=list, root=root, special=special, deleted=deleted, remaining=remaining, state=state, storage_plan_information=storage_plan_information, total=total, used=used, application=application1, device=device1, user=user1)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_drive.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphDrive')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_drive.metadata = {'url': '/sites/{site-id}/drive'}  # type: ignore

    def delete_drive(
        self,
        site_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property drive for sites.

        Delete navigation property drive for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_drive.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_drive.metadata = {'url': '/sites/{site-id}/drive'}  # type: ignore

    def list_drive(
        self,
        site_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum84"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum85"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum86"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfDrive"]
        """Get drives from sites.

        Get drives from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~sites.models.Enum84]
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum85]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum86]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfDrive or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~sites.models.CollectionOfDrive]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfDrive"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_drive.metadata['url']  # type: ignore
                path_format_arguments = {
                    'site-id': self._serialize.url("site_id", site_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfDrive', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_drive.metadata = {'url': '/sites/{site-id}/drives'}  # type: ignore

    def create_drive(
        self,
        site_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        e_tag=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        name=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        created_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        last_modified_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        microsoft_graph_item_reference_site_id=None,  # type: Optional[str]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_drive_type=None,  # type: Optional[str]
        share_point_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        system=None,  # type: Optional[Dict[str, object]]
        following=None,  # type: Optional[List["models.MicrosoftGraphDriveItem"]]
        items=None,  # type: Optional[List["models.MicrosoftGraphDriveItem"]]
        list=None,  # type: Optional["models.MicrosoftGraphList"]
        root=None,  # type: Optional["models.MicrosoftGraphDriveItem"]
        special=None,  # type: Optional[List["models.MicrosoftGraphDriveItem"]]
        deleted=None,  # type: Optional[int]
        remaining=None,  # type: Optional[int]
        state=None,  # type: Optional[str]
        storage_plan_information=None,  # type: Optional["models.MicrosoftGraphStoragePlanInformation"]
        total=None,  # type: Optional[int]
        used=None,  # type: Optional[int]
        application1=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device1=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user1=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphDrive"
        """Create new navigation property to drives for sites.

        Create new navigation property to drives for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: Date and time of item creation. Read-only.
        :type created_date_time: ~datetime.datetime
        :param description: Provides a user-visible description of the item. Optional.
        :type description: str
        :param e_tag: ETag for the item. Read-only.
        :type e_tag: str
        :param last_modified_date_time: Date and time the item was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param name: The name of the item. Read-write.
        :type name: str
        :param web_url: URL that displays the resource in the browser. Read-only.
        :type web_url: str
        :param created_by_user: Represents an Azure Active Directory user object.
        :type created_by_user: ~sites.models.MicrosoftGraphUser
        :param last_modified_by_user: Represents an Azure Active Directory user object.
        :type last_modified_by_user: ~sites.models.MicrosoftGraphUser
        :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
        :type drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param microsoft_graph_item_reference_site_id:
        :type microsoft_graph_item_reference_site_id: str
        :param application: identity.
        :type application: ~sites.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~sites.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_drive_type: Describes the type of drive represented by this resource.
         OneDrive personal drives will return personal. OneDrive for Business will return business.
         SharePoint document libraries will return documentLibrary. Read-only.
        :type microsoft_graph_drive_type: str
        :param share_point_ids: sharepointIds.
        :type share_point_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param system: systemFacet.
        :type system: dict[str, object]
        :param following: The list of items the user is following. Only in OneDrive for Business.
        :type following: list[~sites.models.MicrosoftGraphDriveItem]
        :param items: All items contained in the drive. Read-only. Nullable.
        :type items: list[~sites.models.MicrosoftGraphDriveItem]
        :param list: list.
        :type list: ~sites.models.MicrosoftGraphList
        :param root: driveItem.
        :type root: ~sites.models.MicrosoftGraphDriveItem
        :param special: Collection of common folders available in OneDrive. Read-only. Nullable.
        :type special: list[~sites.models.MicrosoftGraphDriveItem]
        :param deleted: Total space consumed by files in the recycle bin, in bytes. Read-only.
        :type deleted: long
        :param remaining: Total space remaining before reaching the quota limit, in bytes. Read-only.
        :type remaining: long
        :param state: Enumeration value that indicates the state of the storage space. Read-only.
        :type state: str
        :param storage_plan_information: storagePlanInformation.
        :type storage_plan_information: ~sites.models.MicrosoftGraphStoragePlanInformation
        :param total: Total allowed storage space, in bytes. Read-only.
        :type total: long
        :param used: Total space used, in bytes. Read-only.
        :type used: long
        :param application1: identity.
        :type application1: ~sites.models.MicrosoftGraphIdentity
        :param device1: identity.
        :type device1: ~sites.models.MicrosoftGraphIdentity
        :param user1: identity.
        :type user1: ~sites.models.MicrosoftGraphIdentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDrive, or the result of cls(response)
        :rtype: ~sites.models.MicrosoftGraphDrive
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDrive"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphDrive(id=id, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_date_time=last_modified_date_time, name=name, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, drive_id=drive_id, drive_type=drive_type, id_parent_reference_id=microsoft_graph_item_reference_id, name_parent_reference_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=microsoft_graph_item_reference_site_id, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, drive_type=microsoft_graph_drive_type, share_point_ids=share_point_ids, system=system, following=following, items=items, list=list, root=root, special=special, deleted=deleted, remaining=remaining, state=state, storage_plan_information=storage_plan_information, total=total, used=used, application=application1, device=device1, user=user1)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_drive.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphDrive')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDrive', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_drive.metadata = {'url': '/sites/{site-id}/drives'}  # type: ignore

    def get_drive(
        self,
        site_id,  # type: str
        drive_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum87"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum88"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphDrive"
        """Get drives from sites.

        Get drives from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param drive_id: key: id of drive.
        :type drive_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum87]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum88]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDrive, or the result of cls(response)
        :rtype: ~sites.models.MicrosoftGraphDrive
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDrive"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_drive.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDrive', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_drive.metadata = {'url': '/sites/{site-id}/drives/{drive-id}'}  # type: ignore

    def update_drive(
        self,
        site_id,  # type: str
        drive_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        e_tag=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        name=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        created_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        last_modified_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        microsoft_graph_item_reference_drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        microsoft_graph_item_reference_site_id=None,  # type: Optional[str]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_drive_type=None,  # type: Optional[str]
        share_point_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        system=None,  # type: Optional[Dict[str, object]]
        following=None,  # type: Optional[List["models.MicrosoftGraphDriveItem"]]
        items=None,  # type: Optional[List["models.MicrosoftGraphDriveItem"]]
        list=None,  # type: Optional["models.MicrosoftGraphList"]
        root=None,  # type: Optional["models.MicrosoftGraphDriveItem"]
        special=None,  # type: Optional[List["models.MicrosoftGraphDriveItem"]]
        deleted=None,  # type: Optional[int]
        remaining=None,  # type: Optional[int]
        state=None,  # type: Optional[str]
        storage_plan_information=None,  # type: Optional["models.MicrosoftGraphStoragePlanInformation"]
        total=None,  # type: Optional[int]
        used=None,  # type: Optional[int]
        application1=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device1=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user1=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property drives in sites.

        Update the navigation property drives in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param drive_id: key: id of drive.
        :type drive_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: Date and time of item creation. Read-only.
        :type created_date_time: ~datetime.datetime
        :param description: Provides a user-visible description of the item. Optional.
        :type description: str
        :param e_tag: ETag for the item. Read-only.
        :type e_tag: str
        :param last_modified_date_time: Date and time the item was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param name: The name of the item. Read-write.
        :type name: str
        :param web_url: URL that displays the resource in the browser. Read-only.
        :type web_url: str
        :param created_by_user: Represents an Azure Active Directory user object.
        :type created_by_user: ~sites.models.MicrosoftGraphUser
        :param last_modified_by_user: Represents an Azure Active Directory user object.
        :type last_modified_by_user: ~sites.models.MicrosoftGraphUser
        :param microsoft_graph_item_reference_drive_id: Unique identifier of the drive instance that
         contains the item. Read-only.
        :type microsoft_graph_item_reference_drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param microsoft_graph_item_reference_site_id:
        :type microsoft_graph_item_reference_site_id: str
        :param application: identity.
        :type application: ~sites.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~sites.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_drive_type: Describes the type of drive represented by this resource.
         OneDrive personal drives will return personal. OneDrive for Business will return business.
         SharePoint document libraries will return documentLibrary. Read-only.
        :type microsoft_graph_drive_type: str
        :param share_point_ids: sharepointIds.
        :type share_point_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param system: systemFacet.
        :type system: dict[str, object]
        :param following: The list of items the user is following. Only in OneDrive for Business.
        :type following: list[~sites.models.MicrosoftGraphDriveItem]
        :param items: All items contained in the drive. Read-only. Nullable.
        :type items: list[~sites.models.MicrosoftGraphDriveItem]
        :param list: list.
        :type list: ~sites.models.MicrosoftGraphList
        :param root: driveItem.
        :type root: ~sites.models.MicrosoftGraphDriveItem
        :param special: Collection of common folders available in OneDrive. Read-only. Nullable.
        :type special: list[~sites.models.MicrosoftGraphDriveItem]
        :param deleted: Total space consumed by files in the recycle bin, in bytes. Read-only.
        :type deleted: long
        :param remaining: Total space remaining before reaching the quota limit, in bytes. Read-only.
        :type remaining: long
        :param state: Enumeration value that indicates the state of the storage space. Read-only.
        :type state: str
        :param storage_plan_information: storagePlanInformation.
        :type storage_plan_information: ~sites.models.MicrosoftGraphStoragePlanInformation
        :param total: Total allowed storage space, in bytes. Read-only.
        :type total: long
        :param used: Total space used, in bytes. Read-only.
        :type used: long
        :param application1: identity.
        :type application1: ~sites.models.MicrosoftGraphIdentity
        :param device1: identity.
        :type device1: ~sites.models.MicrosoftGraphIdentity
        :param user1: identity.
        :type user1: ~sites.models.MicrosoftGraphIdentity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphDrive(id=id, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_date_time=last_modified_date_time, name=name, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, drive_id=microsoft_graph_item_reference_drive_id, drive_type=drive_type, id_parent_reference_id=microsoft_graph_item_reference_id, name_parent_reference_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=microsoft_graph_item_reference_site_id, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, drive_type=microsoft_graph_drive_type, share_point_ids=share_point_ids, system=system, following=following, items=items, list=list, root=root, special=special, deleted=deleted, remaining=remaining, state=state, storage_plan_information=storage_plan_information, total=total, used=used, application=application1, device=device1, user=user1)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_drive.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphDrive')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_drive.metadata = {'url': '/sites/{site-id}/drives/{drive-id}'}  # type: ignore

    def delete_drive(
        self,
        site_id,  # type: str
        drive_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property drives for sites.

        Delete navigation property drives for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param drive_id: key: id of drive.
        :type drive_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_drive.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_drive.metadata = {'url': '/sites/{site-id}/drives/{drive-id}'}  # type: ignore

    def list_list(
        self,
        site_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum89"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum90"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum91"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfList"]
        """Get lists from sites.

        Get lists from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~sites.models.Enum89]
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum90]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum91]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfList or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~sites.models.CollectionOfList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_list.metadata['url']  # type: ignore
                path_format_arguments = {
                    'site-id': self._serialize.url("site_id", site_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfList', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_list.metadata = {'url': '/sites/{site-id}/lists'}  # type: ignore

    def create_list(
        self,
        site_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        e_tag=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        name=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        created_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        last_modified_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        microsoft_graph_item_reference_site_id=None,  # type: Optional[str]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        display_name=None,  # type: Optional[str]
        list=None,  # type: Optional["models.MicrosoftGraphListInfo"]
        microsoft_graph_sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        system=None,  # type: Optional[Dict[str, object]]
        columns=None,  # type: Optional[List["models.MicrosoftGraphColumnDefinition"]]
        content_types=None,  # type: Optional[List["models.MicrosoftGraphContentType"]]
        drive=None,  # type: Optional["models.MicrosoftGraphDrive"]
        items=None,  # type: Optional[List["models.MicrosoftGraphListItem"]]
        subscriptions=None,  # type: Optional[List["models.MicrosoftGraphSubscription"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphList"
        """Create new navigation property to lists for sites.

        Create new navigation property to lists for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: Date and time of item creation. Read-only.
        :type created_date_time: ~datetime.datetime
        :param description: Provides a user-visible description of the item. Optional.
        :type description: str
        :param e_tag: ETag for the item. Read-only.
        :type e_tag: str
        :param last_modified_date_time: Date and time the item was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param name: The name of the item. Read-write.
        :type name: str
        :param web_url: URL that displays the resource in the browser. Read-only.
        :type web_url: str
        :param created_by_user: Represents an Azure Active Directory user object.
        :type created_by_user: ~sites.models.MicrosoftGraphUser
        :param last_modified_by_user: Represents an Azure Active Directory user object.
        :type last_modified_by_user: ~sites.models.MicrosoftGraphUser
        :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
        :type drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param microsoft_graph_item_reference_site_id:
        :type microsoft_graph_item_reference_site_id: str
        :param application: identity.
        :type application: ~sites.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~sites.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~sites.models.MicrosoftGraphIdentity
        :param display_name: The displayable title of the list.
        :type display_name: str
        :param list: listInfo.
        :type list: ~sites.models.MicrosoftGraphListInfo
        :param microsoft_graph_sharepoint_ids: sharepointIds.
        :type microsoft_graph_sharepoint_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param system: systemFacet.
        :type system: dict[str, object]
        :param columns: The collection of field definitions for this list.
        :type columns: list[~sites.models.MicrosoftGraphColumnDefinition]
        :param content_types: The collection of content types present in this list.
        :type content_types: list[~sites.models.MicrosoftGraphContentType]
        :param drive: drive.
        :type drive: ~sites.models.MicrosoftGraphDrive
        :param items: All items contained in the list.
        :type items: list[~sites.models.MicrosoftGraphListItem]
        :param subscriptions: The set of subscriptions on the list.
        :type subscriptions: list[~sites.models.MicrosoftGraphSubscription]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphList, or the result of cls(response)
        :rtype: ~sites.models.MicrosoftGraphList
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphList(id=id, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_date_time=last_modified_date_time, name=name, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, drive_id=drive_id, drive_type=drive_type, id_parent_reference_id=microsoft_graph_item_reference_id, name_parent_reference_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=microsoft_graph_item_reference_site_id, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, display_name=display_name, list=list, sharepoint_ids=microsoft_graph_sharepoint_ids, system=system, columns=columns, content_types=content_types, drive=drive, items=items, subscriptions=subscriptions)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_list.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphList')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphList', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_list.metadata = {'url': '/sites/{site-id}/lists'}  # type: ignore

    def get_list(
        self,
        site_id,  # type: str
        list_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum92"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum93"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphList"
        """Get lists from sites.

        Get lists from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum92]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum93]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphList, or the result of cls(response)
        :rtype: ~sites.models.MicrosoftGraphList
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_list.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphList', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_list.metadata = {'url': '/sites/{site-id}/lists/{list-id}'}  # type: ignore

    def update_list(
        self,
        site_id,  # type: str
        list_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        e_tag=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        name=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        created_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        last_modified_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        microsoft_graph_item_reference_site_id=None,  # type: Optional[str]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        display_name=None,  # type: Optional[str]
        list=None,  # type: Optional["models.MicrosoftGraphListInfo"]
        microsoft_graph_sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        system=None,  # type: Optional[Dict[str, object]]
        columns=None,  # type: Optional[List["models.MicrosoftGraphColumnDefinition"]]
        content_types=None,  # type: Optional[List["models.MicrosoftGraphContentType"]]
        drive=None,  # type: Optional["models.MicrosoftGraphDrive"]
        items=None,  # type: Optional[List["models.MicrosoftGraphListItem"]]
        subscriptions=None,  # type: Optional[List["models.MicrosoftGraphSubscription"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property lists in sites.

        Update the navigation property lists in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: Date and time of item creation. Read-only.
        :type created_date_time: ~datetime.datetime
        :param description: Provides a user-visible description of the item. Optional.
        :type description: str
        :param e_tag: ETag for the item. Read-only.
        :type e_tag: str
        :param last_modified_date_time: Date and time the item was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param name: The name of the item. Read-write.
        :type name: str
        :param web_url: URL that displays the resource in the browser. Read-only.
        :type web_url: str
        :param created_by_user: Represents an Azure Active Directory user object.
        :type created_by_user: ~sites.models.MicrosoftGraphUser
        :param last_modified_by_user: Represents an Azure Active Directory user object.
        :type last_modified_by_user: ~sites.models.MicrosoftGraphUser
        :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
        :type drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param microsoft_graph_item_reference_site_id:
        :type microsoft_graph_item_reference_site_id: str
        :param application: identity.
        :type application: ~sites.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~sites.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~sites.models.MicrosoftGraphIdentity
        :param display_name: The displayable title of the list.
        :type display_name: str
        :param list: listInfo.
        :type list: ~sites.models.MicrosoftGraphListInfo
        :param microsoft_graph_sharepoint_ids: sharepointIds.
        :type microsoft_graph_sharepoint_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param system: systemFacet.
        :type system: dict[str, object]
        :param columns: The collection of field definitions for this list.
        :type columns: list[~sites.models.MicrosoftGraphColumnDefinition]
        :param content_types: The collection of content types present in this list.
        :type content_types: list[~sites.models.MicrosoftGraphContentType]
        :param drive: drive.
        :type drive: ~sites.models.MicrosoftGraphDrive
        :param items: All items contained in the list.
        :type items: list[~sites.models.MicrosoftGraphListItem]
        :param subscriptions: The set of subscriptions on the list.
        :type subscriptions: list[~sites.models.MicrosoftGraphSubscription]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphList(id=id, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_date_time=last_modified_date_time, name=name, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, drive_id=drive_id, drive_type=drive_type, id_parent_reference_id=microsoft_graph_item_reference_id, name_parent_reference_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=microsoft_graph_item_reference_site_id, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, display_name=display_name, list=list, sharepoint_ids=microsoft_graph_sharepoint_ids, system=system, columns=columns, content_types=content_types, drive=drive, items=items, subscriptions=subscriptions)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_list.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphList')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_list.metadata = {'url': '/sites/{site-id}/lists/{list-id}'}  # type: ignore

    def delete_list(
        self,
        site_id,  # type: str
        list_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property lists for sites.

        Delete navigation property lists for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param list_id: key: id of list.
        :type list_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_list.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'list-id': self._serialize.url("list_id", list_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_list.metadata = {'url': '/sites/{site-id}/lists/{list-id}'}  # type: ignore

    def get_activity_by_interval96_b0(
        self,
        site_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.MicrosoftGraphItemActivityStat"]
        """Invoke function getActivitiesByInterval.

        Invoke function getActivitiesByInterval.

        :param site_id: key: id of site.
        :type site_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphItemActivityStat, or the result of cls(response)
        :rtype: list[~sites.models.MicrosoftGraphItemActivityStat]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphItemActivityStat"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_activity_by_interval96_b0.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphItemActivityStat]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_activity_by_interval96_b0.metadata = {'url': '/sites/{site-id}/microsoft.graph.getActivitiesByInterval()'}  # type: ignore

    def get_activity_by_interval53_ee(
        self,
        site_id,  # type: str
        start_date_time,  # type: str
        end_date_time,  # type: str
        interval,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.MicrosoftGraphItemActivityStat"]
        """Invoke function getActivitiesByInterval.

        Invoke function getActivitiesByInterval.

        :param site_id: key: id of site.
        :type site_id: str
        :param start_date_time:
        :type start_date_time: str
        :param end_date_time:
        :type end_date_time: str
        :param interval:
        :type interval: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphItemActivityStat, or the result of cls(response)
        :rtype: list[~sites.models.MicrosoftGraphItemActivityStat]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphItemActivityStat"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_activity_by_interval53_ee.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'startDateTime': self._serialize.url("start_date_time", start_date_time, 'str'),
            'endDateTime': self._serialize.url("end_date_time", end_date_time, 'str'),
            'interval': self._serialize.url("interval", interval, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphItemActivityStat]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_activity_by_interval53_ee.metadata = {'url': '/sites/{site-id}/microsoft.graph.getActivitiesByInterval(startDateTime=\'{startDateTime}\',endDateTime=\'{endDateTime}\',interval=\'{interval}\')'}  # type: ignore

    def get_by_path(
        self,
        site_id,  # type: str
        path,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSite"
        """Invoke function getByPath.

        Invoke function getByPath.

        :param site_id: key: id of site.
        :type site_id: str
        :param path:
        :type path: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSite, or the result of cls(response)
        :rtype: ~sites.models.MicrosoftGraphSite
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSite"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_by_path.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'path': self._serialize.url("path", path, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSite', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_by_path.metadata = {'url': '/sites/{site-id}/microsoft.graph.getByPath(path=\'{path}\')'}  # type: ignore

    def list_site(
        self,
        site_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum127"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum128"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum129"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfSite1"]
        """Get sites from sites.

        Get sites from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~sites.models.Enum127]
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum128]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum129]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSite1 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~sites.models.CollectionOfSite1]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSite1"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_site.metadata['url']  # type: ignore
                path_format_arguments = {
                    'site-id': self._serialize.url("site_id", site_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSite1', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_site.metadata = {'url': '/sites/{site-id}/sites'}  # type: ignore

    def create_site(
        self,
        site_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        e_tag=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        name=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        created_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        last_modified_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        microsoft_graph_item_reference_site_id=None,  # type: Optional[str]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        display_name=None,  # type: Optional[str]
        root=None,  # type: Optional[Dict[str, object]]
        microsoft_graph_sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        analytics=None,  # type: Optional["models.MicrosoftGraphItemAnalytics"]
        columns=None,  # type: Optional[List["models.MicrosoftGraphColumnDefinition"]]
        content_types=None,  # type: Optional[List["models.MicrosoftGraphContentType"]]
        drive=None,  # type: Optional["models.MicrosoftGraphDrive"]
        drives=None,  # type: Optional[List["models.MicrosoftGraphDrive"]]
        items=None,  # type: Optional[List["models.MicrosoftGraphBaseItem"]]
        lists=None,  # type: Optional[List["models.MicrosoftGraphList"]]
        sites=None,  # type: Optional[List["models.MicrosoftGraphSite"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        notebooks=None,  # type: Optional[List["models.MicrosoftGraphNotebook"]]
        operations=None,  # type: Optional[List["models.MicrosoftGraphOnenoteOperation"]]
        pages=None,  # type: Optional[List["models.MicrosoftGraphOnenotePage"]]
        resources=None,  # type: Optional[List["models.MicrosoftGraphOnenoteResource"]]
        section_groups=None,  # type: Optional[List["models.MicrosoftGraphSectionGroup"]]
        sections=None,  # type: Optional[List["models.MicrosoftGraphOnenoteSection"]]
        data_location_code=None,  # type: Optional[str]
        hostname=None,  # type: Optional[str]
        microsoft_graph_root=None,  # type: Optional[Dict[str, object]]
        code=None,  # type: Optional[str]
        details=None,  # type: Optional[List["models.MicrosoftGraphPublicErrorDetail"]]
        inner_error=None,  # type: Optional["models.MicrosoftGraphPublicInnerError"]
        message=None,  # type: Optional[str]
        target=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSite"
        """Create new navigation property to sites for sites.

        Create new navigation property to sites for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: Date and time of item creation. Read-only.
        :type created_date_time: ~datetime.datetime
        :param description: Provides a user-visible description of the item. Optional.
        :type description: str
        :param e_tag: ETag for the item. Read-only.
        :type e_tag: str
        :param last_modified_date_time: Date and time the item was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param name: The name of the item. Read-write.
        :type name: str
        :param web_url: URL that displays the resource in the browser. Read-only.
        :type web_url: str
        :param created_by_user: Represents an Azure Active Directory user object.
        :type created_by_user: ~sites.models.MicrosoftGraphUser
        :param last_modified_by_user: Represents an Azure Active Directory user object.
        :type last_modified_by_user: ~sites.models.MicrosoftGraphUser
        :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
        :type drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param microsoft_graph_item_reference_site_id:
        :type microsoft_graph_item_reference_site_id: str
        :param application: identity.
        :type application: ~sites.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~sites.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~sites.models.MicrosoftGraphIdentity
        :param display_name: The full title for the site. Read-only.
        :type display_name: str
        :param root: root.
        :type root: dict[str, object]
        :param microsoft_graph_sharepoint_ids: sharepointIds.
        :type microsoft_graph_sharepoint_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param analytics: itemAnalytics.
        :type analytics: ~sites.models.MicrosoftGraphItemAnalytics
        :param columns: The collection of column definitions reusable across lists under this site.
        :type columns: list[~sites.models.MicrosoftGraphColumnDefinition]
        :param content_types: The collection of content types defined for this site.
        :type content_types: list[~sites.models.MicrosoftGraphContentType]
        :param drive: drive.
        :type drive: ~sites.models.MicrosoftGraphDrive
        :param drives: The collection of drives (document libraries) under this site.
        :type drives: list[~sites.models.MicrosoftGraphDrive]
        :param items: Used to address any item contained in this site. This collection cannot be
         enumerated.
        :type items: list[~sites.models.MicrosoftGraphBaseItem]
        :param lists: The collection of lists under this site.
        :type lists: list[~sites.models.MicrosoftGraphList]
        :param sites: The collection of the sub-sites under this site.
        :type sites: list[~sites.models.MicrosoftGraphSite]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param notebooks: The collection of OneNote notebooks that are owned by the user or group.
         Read-only. Nullable.
        :type notebooks: list[~sites.models.MicrosoftGraphNotebook]
        :param operations: The status of OneNote operations. Getting an operations collection is not
         supported, but you can get the status of long-running operations if the Operation-Location
         header is returned in the response. Read-only. Nullable.
        :type operations: list[~sites.models.MicrosoftGraphOnenoteOperation]
        :param pages: The pages in all OneNote notebooks that are owned by the user or group.  Read-
         only. Nullable.
        :type pages: list[~sites.models.MicrosoftGraphOnenotePage]
        :param resources: The image and other file resources in OneNote pages. Getting a resources
         collection is not supported, but you can get the binary content of a specific resource. Read-
         only. Nullable.
        :type resources: list[~sites.models.MicrosoftGraphOnenoteResource]
        :param section_groups: The section groups in all OneNote notebooks that are owned by the user
         or group.  Read-only. Nullable.
        :type section_groups: list[~sites.models.MicrosoftGraphSectionGroup]
        :param sections: The sections in all OneNote notebooks that are owned by the user or group.
         Read-only. Nullable.
        :type sections: list[~sites.models.MicrosoftGraphOnenoteSection]
        :param data_location_code: The geographic region code for where this site collection resides.
         Read-only.
        :type data_location_code: str
        :param hostname: The hostname for the site collection. Read-only.
        :type hostname: str
        :param microsoft_graph_root: root.
        :type microsoft_graph_root: dict[str, object]
        :param code:
        :type code: str
        :param details:
        :type details: list[~sites.models.MicrosoftGraphPublicErrorDetail]
        :param inner_error: publicInnerError.
        :type inner_error: ~sites.models.MicrosoftGraphPublicInnerError
        :param message:
        :type message: str
        :param target:
        :type target: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSite, or the result of cls(response)
        :rtype: ~sites.models.MicrosoftGraphSite
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSite"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphSite(id=id, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_date_time=last_modified_date_time, name=name, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, drive_id=drive_id, drive_type=drive_type, id_parent_reference_id=microsoft_graph_item_reference_id, name_parent_reference_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=microsoft_graph_item_reference_site_id, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, display_name=display_name, root=root, sharepoint_ids=microsoft_graph_sharepoint_ids, analytics=analytics, columns=columns, content_types=content_types, drive=drive, drives=drives, items=items, lists=lists, sites=sites, id_onenote_id=microsoft_graph_entity_id, notebooks=notebooks, operations=operations, pages=pages, resources=resources, section_groups=section_groups, sections=sections, data_location_code=data_location_code, hostname=hostname, root_site_collection_root=microsoft_graph_root, code=code, details=details, inner_error=inner_error, message=message, target=target)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_site.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphSite')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSite', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_site.metadata = {'url': '/sites/{site-id}/sites'}  # type: ignore

    def get_site(
        self,
        site_id,  # type: str
        site_id1,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum130"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum131"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSite"
        """Get sites from sites.

        Get sites from sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param site_id1: key: id of site.
        :type site_id1: str
        :param select: Select properties to be returned.
        :type select: list[str or ~sites.models.Enum130]
        :param expand: Expand related entities.
        :type expand: list[str or ~sites.models.Enum131]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSite, or the result of cls(response)
        :rtype: ~sites.models.MicrosoftGraphSite
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSite"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_site.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'site-id1': self._serialize.url("site_id1", site_id1, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSite', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_site.metadata = {'url': '/sites/{site-id}/sites/{site-id1}'}  # type: ignore

    def update_site(
        self,
        site_id,  # type: str
        site_id1,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        e_tag=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        name=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        created_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        last_modified_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        microsoft_graph_item_reference_site_id=None,  # type: Optional[str]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        microsoft_graph_identity_user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        display_name=None,  # type: Optional[str]
        root=None,  # type: Optional[Dict[str, object]]
        microsoft_graph_sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        analytics=None,  # type: Optional["models.MicrosoftGraphItemAnalytics"]
        columns=None,  # type: Optional[List["models.MicrosoftGraphColumnDefinition"]]
        content_types=None,  # type: Optional[List["models.MicrosoftGraphContentType"]]
        drive=None,  # type: Optional["models.MicrosoftGraphDrive"]
        drives=None,  # type: Optional[List["models.MicrosoftGraphDrive"]]
        items=None,  # type: Optional[List["models.MicrosoftGraphBaseItem"]]
        lists=None,  # type: Optional[List["models.MicrosoftGraphList"]]
        sites=None,  # type: Optional[List["models.MicrosoftGraphSite"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        notebooks=None,  # type: Optional[List["models.MicrosoftGraphNotebook"]]
        operations=None,  # type: Optional[List["models.MicrosoftGraphOnenoteOperation"]]
        pages=None,  # type: Optional[List["models.MicrosoftGraphOnenotePage"]]
        resources=None,  # type: Optional[List["models.MicrosoftGraphOnenoteResource"]]
        section_groups=None,  # type: Optional[List["models.MicrosoftGraphSectionGroup"]]
        sections=None,  # type: Optional[List["models.MicrosoftGraphOnenoteSection"]]
        data_location_code=None,  # type: Optional[str]
        hostname=None,  # type: Optional[str]
        microsoft_graph_root=None,  # type: Optional[Dict[str, object]]
        code=None,  # type: Optional[str]
        details=None,  # type: Optional[List["models.MicrosoftGraphPublicErrorDetail"]]
        inner_error=None,  # type: Optional["models.MicrosoftGraphPublicInnerError"]
        message=None,  # type: Optional[str]
        target=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property sites in sites.

        Update the navigation property sites in sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param site_id1: key: id of site.
        :type site_id1: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: Date and time of item creation. Read-only.
        :type created_date_time: ~datetime.datetime
        :param description: Provides a user-visible description of the item. Optional.
        :type description: str
        :param e_tag: ETag for the item. Read-only.
        :type e_tag: str
        :param last_modified_date_time: Date and time the item was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param name: The name of the item. Read-write.
        :type name: str
        :param web_url: URL that displays the resource in the browser. Read-only.
        :type web_url: str
        :param created_by_user: Represents an Azure Active Directory user object.
        :type created_by_user: ~sites.models.MicrosoftGraphUser
        :param last_modified_by_user: Represents an Azure Active Directory user object.
        :type last_modified_by_user: ~sites.models.MicrosoftGraphUser
        :param drive_id: Unique identifier of the drive instance that contains the item. Read-only.
        :type drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param microsoft_graph_item_reference_site_id:
        :type microsoft_graph_item_reference_site_id: str
        :param application: identity.
        :type application: ~sites.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~sites.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_application: identity.
        :type microsoft_graph_identity_application: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_device: identity.
        :type microsoft_graph_identity_device: ~sites.models.MicrosoftGraphIdentity
        :param microsoft_graph_identity_user: identity.
        :type microsoft_graph_identity_user: ~sites.models.MicrosoftGraphIdentity
        :param display_name: The full title for the site. Read-only.
        :type display_name: str
        :param root: root.
        :type root: dict[str, object]
        :param microsoft_graph_sharepoint_ids: sharepointIds.
        :type microsoft_graph_sharepoint_ids: ~sites.models.MicrosoftGraphSharepointIds
        :param analytics: itemAnalytics.
        :type analytics: ~sites.models.MicrosoftGraphItemAnalytics
        :param columns: The collection of column definitions reusable across lists under this site.
        :type columns: list[~sites.models.MicrosoftGraphColumnDefinition]
        :param content_types: The collection of content types defined for this site.
        :type content_types: list[~sites.models.MicrosoftGraphContentType]
        :param drive: drive.
        :type drive: ~sites.models.MicrosoftGraphDrive
        :param drives: The collection of drives (document libraries) under this site.
        :type drives: list[~sites.models.MicrosoftGraphDrive]
        :param items: Used to address any item contained in this site. This collection cannot be
         enumerated.
        :type items: list[~sites.models.MicrosoftGraphBaseItem]
        :param lists: The collection of lists under this site.
        :type lists: list[~sites.models.MicrosoftGraphList]
        :param sites: The collection of the sub-sites under this site.
        :type sites: list[~sites.models.MicrosoftGraphSite]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param notebooks: The collection of OneNote notebooks that are owned by the user or group.
         Read-only. Nullable.
        :type notebooks: list[~sites.models.MicrosoftGraphNotebook]
        :param operations: The status of OneNote operations. Getting an operations collection is not
         supported, but you can get the status of long-running operations if the Operation-Location
         header is returned in the response. Read-only. Nullable.
        :type operations: list[~sites.models.MicrosoftGraphOnenoteOperation]
        :param pages: The pages in all OneNote notebooks that are owned by the user or group.  Read-
         only. Nullable.
        :type pages: list[~sites.models.MicrosoftGraphOnenotePage]
        :param resources: The image and other file resources in OneNote pages. Getting a resources
         collection is not supported, but you can get the binary content of a specific resource. Read-
         only. Nullable.
        :type resources: list[~sites.models.MicrosoftGraphOnenoteResource]
        :param section_groups: The section groups in all OneNote notebooks that are owned by the user
         or group.  Read-only. Nullable.
        :type section_groups: list[~sites.models.MicrosoftGraphSectionGroup]
        :param sections: The sections in all OneNote notebooks that are owned by the user or group.
         Read-only. Nullable.
        :type sections: list[~sites.models.MicrosoftGraphOnenoteSection]
        :param data_location_code: The geographic region code for where this site collection resides.
         Read-only.
        :type data_location_code: str
        :param hostname: The hostname for the site collection. Read-only.
        :type hostname: str
        :param microsoft_graph_root: root.
        :type microsoft_graph_root: dict[str, object]
        :param code:
        :type code: str
        :param details:
        :type details: list[~sites.models.MicrosoftGraphPublicErrorDetail]
        :param inner_error: publicInnerError.
        :type inner_error: ~sites.models.MicrosoftGraphPublicInnerError
        :param message:
        :type message: str
        :param target:
        :type target: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphSite(id=id, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_date_time=last_modified_date_time, name=name, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, drive_id=drive_id, drive_type=drive_type, id_parent_reference_id=microsoft_graph_item_reference_id, name_parent_reference_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=microsoft_graph_item_reference_site_id, application_last_modified_by_application=application, device_last_modified_by_device=device, user_last_modified_by_user=user, application_created_by_application=microsoft_graph_identity_application, device_created_by_device=microsoft_graph_identity_device, user_created_by_user=microsoft_graph_identity_user, display_name=display_name, root=root, sharepoint_ids=microsoft_graph_sharepoint_ids, analytics=analytics, columns=columns, content_types=content_types, drive=drive, drives=drives, items=items, lists=lists, sites=sites, id_onenote_id=microsoft_graph_entity_id, notebooks=notebooks, operations=operations, pages=pages, resources=resources, section_groups=section_groups, sections=sections, data_location_code=data_location_code, hostname=hostname, root_site_collection_root=microsoft_graph_root, code=code, details=details, inner_error=inner_error, message=message, target=target)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_site.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'site-id1': self._serialize.url("site_id1", site_id1, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphSite')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_site.metadata = {'url': '/sites/{site-id}/sites/{site-id1}'}  # type: ignore

    def delete_site(
        self,
        site_id,  # type: str
        site_id1,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property sites for sites.

        Delete navigation property sites for sites.

        :param site_id: key: id of site.
        :type site_id: str
        :param site_id1: key: id of site.
        :type site_id1: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_site.metadata['url']  # type: ignore
        path_format_arguments = {
            'site-id': self._serialize.url("site_id", site_id, 'str'),
            'site-id1': self._serialize.url("site_id1", site_id1, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_site.metadata = {'url': '/sites/{site-id}/sites/{site-id1}'}  # type: ignore

    def add(
        self,
        value=None,  # type: Optional[List["models.MicrosoftGraphSite"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.MicrosoftGraphSite"]
        """Invoke action add.

        Invoke action add.

        :param value:
        :type value: list[~sites.models.MicrosoftGraphSite]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphSite, or the result of cls(response)
        :rtype: list[~sites.models.MicrosoftGraphSite]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphSite"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.PathsV2U0Z1SitesMicrosoftGraphAddPostRequestbodyContentApplicationJsonSchema(value=value)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.add.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'PathsV2U0Z1SitesMicrosoftGraphAddPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphSite]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    add.metadata = {'url': '/sites/microsoft.graph.add'}  # type: ignore

    def remove(
        self,
        value=None,  # type: Optional[List["models.MicrosoftGraphSite"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.MicrosoftGraphSite"]
        """Invoke action remove.

        Invoke action remove.

        :param value:
        :type value: list[~sites.models.MicrosoftGraphSite]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphSite, or the result of cls(response)
        :rtype: list[~sites.models.MicrosoftGraphSite]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphSite"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.Paths8Behs0SitesMicrosoftGraphRemovePostRequestbodyContentApplicationJsonSchema(value=value)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.remove.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'Paths8Behs0SitesMicrosoftGraphRemovePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphSite]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    remove.metadata = {'url': '/sites/microsoft.graph.remove'}  # type: ignore
