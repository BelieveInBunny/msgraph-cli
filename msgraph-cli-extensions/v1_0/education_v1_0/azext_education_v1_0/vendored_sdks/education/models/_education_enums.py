# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum100(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum101(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSCODE = "classCode"
    CREATEDBY = "createdBy"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALID = "externalId"
    EXTERNALNAME = "externalName"
    EXTERNALSOURCE = "externalSource"
    MAILNICKNAME = "mailNickname"
    TERM = "term"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum102(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum103(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum104(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACCOUNTENABLED = "accountEnabled"
    ACCOUNTENABLEDDESC = "accountEnabled desc"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDLICENSESDESC = "assignedLicenses desc"
    ASSIGNEDPLANS = "assignedPlans"
    ASSIGNEDPLANSDESC = "assignedPlans desc"
    BUSINESSPHONES = "businessPhones"
    BUSINESSPHONESDESC = "businessPhones desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DEPARTMENT = "department"
    DEPARTMENTDESC = "department desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    GIVENNAME = "givenName"
    GIVENNAMEDESC = "givenName desc"
    MAIL = "mail"
    MAILDESC = "mail desc"
    MAILINGADDRESS = "mailingAddress"
    MAILINGADDRESSDESC = "mailingAddress desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    MIDDLENAME = "middleName"
    MIDDLENAMEDESC = "middleName desc"
    MOBILEPHONE = "mobilePhone"
    MOBILEPHONEDESC = "mobilePhone desc"
    OFFICELOCATION = "officeLocation"
    OFFICELOCATIONDESC = "officeLocation desc"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPOLICIESDESC = "passwordPolicies desc"
    PASSWORDPROFILE = "passwordProfile"
    PASSWORDPROFILEDESC = "passwordProfile desc"
    PREFERREDLANGUAGE = "preferredLanguage"
    PREFERREDLANGUAGEDESC = "preferredLanguage desc"
    PRIMARYROLE = "primaryRole"
    PRIMARYROLEDESC = "primaryRole desc"
    PROVISIONEDPLANS = "provisionedPlans"
    PROVISIONEDPLANSDESC = "provisionedPlans desc"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    REFRESHTOKENSVALIDFROMDATETIMEDESC = "refreshTokensValidFromDateTime desc"
    RESIDENCEADDRESS = "residenceAddress"
    RESIDENCEADDRESSDESC = "residenceAddress desc"
    SHOWINADDRESSLIST = "showInAddressList"
    SHOWINADDRESSLISTDESC = "showInAddressList desc"
    STUDENT = "student"
    STUDENTDESC = "student desc"
    SURNAME = "surname"
    SURNAMEDESC = "surname desc"
    TEACHER = "teacher"
    TEACHERDESC = "teacher desc"
    USAGELOCATION = "usageLocation"
    USAGELOCATIONDESC = "usageLocation desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    USERTYPE = "userType"
    USERTYPEDESC = "userType desc"

class Enum105(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACCOUNTENABLED = "accountEnabled"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CREATEDBY = "createdBy"
    DEPARTMENT = "department"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    GIVENNAME = "givenName"
    MAIL = "mail"
    MAILINGADDRESS = "mailingAddress"
    MAILNICKNAME = "mailNickname"
    MIDDLENAME = "middleName"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    PREFERREDLANGUAGE = "preferredLanguage"
    PRIMARYROLE = "primaryRole"
    PROVISIONEDPLANS = "provisionedPlans"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    RESIDENCEADDRESS = "residenceAddress"
    SHOWINADDRESSLIST = "showInAddressList"
    STUDENT = "student"
    SURNAME = "surname"
    TEACHER = "teacher"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    CLASSES = "classes"
    SCHOOLS = "schools"
    USER = "user"

class Enum106(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    SCHOOLS = "schools"
    USER = "user"

class Enum107(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACCOUNTENABLED = "accountEnabled"
    ACCOUNTENABLEDDESC = "accountEnabled desc"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDLICENSESDESC = "assignedLicenses desc"
    ASSIGNEDPLANS = "assignedPlans"
    ASSIGNEDPLANSDESC = "assignedPlans desc"
    BUSINESSPHONES = "businessPhones"
    BUSINESSPHONESDESC = "businessPhones desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DEPARTMENT = "department"
    DEPARTMENTDESC = "department desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    GIVENNAME = "givenName"
    GIVENNAMEDESC = "givenName desc"
    MAIL = "mail"
    MAILDESC = "mail desc"
    MAILINGADDRESS = "mailingAddress"
    MAILINGADDRESSDESC = "mailingAddress desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    MIDDLENAME = "middleName"
    MIDDLENAMEDESC = "middleName desc"
    MOBILEPHONE = "mobilePhone"
    MOBILEPHONEDESC = "mobilePhone desc"
    OFFICELOCATION = "officeLocation"
    OFFICELOCATIONDESC = "officeLocation desc"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPOLICIESDESC = "passwordPolicies desc"
    PASSWORDPROFILE = "passwordProfile"
    PASSWORDPROFILEDESC = "passwordProfile desc"
    PREFERREDLANGUAGE = "preferredLanguage"
    PREFERREDLANGUAGEDESC = "preferredLanguage desc"
    PRIMARYROLE = "primaryRole"
    PRIMARYROLEDESC = "primaryRole desc"
    PROVISIONEDPLANS = "provisionedPlans"
    PROVISIONEDPLANSDESC = "provisionedPlans desc"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    REFRESHTOKENSVALIDFROMDATETIMEDESC = "refreshTokensValidFromDateTime desc"
    RESIDENCEADDRESS = "residenceAddress"
    RESIDENCEADDRESSDESC = "residenceAddress desc"
    SHOWINADDRESSLIST = "showInAddressList"
    SHOWINADDRESSLISTDESC = "showInAddressList desc"
    STUDENT = "student"
    STUDENTDESC = "student desc"
    SURNAME = "surname"
    SURNAMEDESC = "surname desc"
    TEACHER = "teacher"
    TEACHERDESC = "teacher desc"
    USAGELOCATION = "usageLocation"
    USAGELOCATIONDESC = "usageLocation desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    USERTYPE = "userType"
    USERTYPEDESC = "userType desc"

class Enum108(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACCOUNTENABLED = "accountEnabled"
    ACCOUNTENABLEDDESC = "accountEnabled desc"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDLICENSESDESC = "assignedLicenses desc"
    ASSIGNEDPLANS = "assignedPlans"
    ASSIGNEDPLANSDESC = "assignedPlans desc"
    BUSINESSPHONES = "businessPhones"
    BUSINESSPHONESDESC = "businessPhones desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DEPARTMENT = "department"
    DEPARTMENTDESC = "department desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    GIVENNAME = "givenName"
    GIVENNAMEDESC = "givenName desc"
    MAIL = "mail"
    MAILDESC = "mail desc"
    MAILINGADDRESS = "mailingAddress"
    MAILINGADDRESSDESC = "mailingAddress desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    MIDDLENAME = "middleName"
    MIDDLENAMEDESC = "middleName desc"
    MOBILEPHONE = "mobilePhone"
    MOBILEPHONEDESC = "mobilePhone desc"
    OFFICELOCATION = "officeLocation"
    OFFICELOCATIONDESC = "officeLocation desc"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPOLICIESDESC = "passwordPolicies desc"
    PASSWORDPROFILE = "passwordProfile"
    PASSWORDPROFILEDESC = "passwordProfile desc"
    PREFERREDLANGUAGE = "preferredLanguage"
    PREFERREDLANGUAGEDESC = "preferredLanguage desc"
    PRIMARYROLE = "primaryRole"
    PRIMARYROLEDESC = "primaryRole desc"
    PROVISIONEDPLANS = "provisionedPlans"
    PROVISIONEDPLANSDESC = "provisionedPlans desc"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    REFRESHTOKENSVALIDFROMDATETIMEDESC = "refreshTokensValidFromDateTime desc"
    RESIDENCEADDRESS = "residenceAddress"
    RESIDENCEADDRESSDESC = "residenceAddress desc"
    SHOWINADDRESSLIST = "showInAddressList"
    SHOWINADDRESSLISTDESC = "showInAddressList desc"
    STUDENT = "student"
    STUDENTDESC = "student desc"
    SURNAME = "surname"
    SURNAMEDESC = "surname desc"
    TEACHER = "teacher"
    TEACHERDESC = "teacher desc"
    USAGELOCATION = "usageLocation"
    USAGELOCATIONDESC = "usageLocation desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    USERTYPE = "userType"
    USERTYPEDESC = "userType desc"

class Enum109(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACCOUNTENABLED = "accountEnabled"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CREATEDBY = "createdBy"
    DEPARTMENT = "department"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    GIVENNAME = "givenName"
    MAIL = "mail"
    MAILINGADDRESS = "mailingAddress"
    MAILNICKNAME = "mailNickname"
    MIDDLENAME = "middleName"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    PREFERREDLANGUAGE = "preferredLanguage"
    PRIMARYROLE = "primaryRole"
    PROVISIONEDPLANS = "provisionedPlans"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    RESIDENCEADDRESS = "residenceAddress"
    SHOWINADDRESSLIST = "showInAddressList"
    STUDENT = "student"
    SURNAME = "surname"
    TEACHER = "teacher"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    CLASSES = "classes"
    SCHOOLS = "schools"
    USER = "user"

class Enum110(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    SCHOOLS = "schools"
    USER = "user"

class Enum111(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACCOUNTENABLED = "accountEnabled"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CREATEDBY = "createdBy"
    DEPARTMENT = "department"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    GIVENNAME = "givenName"
    MAIL = "mail"
    MAILINGADDRESS = "mailingAddress"
    MAILNICKNAME = "mailNickname"
    MIDDLENAME = "middleName"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    PREFERREDLANGUAGE = "preferredLanguage"
    PRIMARYROLE = "primaryRole"
    PROVISIONEDPLANS = "provisionedPlans"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    RESIDENCEADDRESS = "residenceAddress"
    SHOWINADDRESSLIST = "showInAddressList"
    STUDENT = "student"
    SURNAME = "surname"
    TEACHER = "teacher"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    CLASSES = "classes"
    SCHOOLS = "schools"
    USER = "user"

class Enum112(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    SCHOOLS = "schools"
    USER = "user"

class Enum113(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum114(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSCODE = "classCode"
    CREATEDBY = "createdBy"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALID = "externalId"
    EXTERNALNAME = "externalName"
    EXTERNALSOURCE = "externalSource"
    MAILNICKNAME = "mailNickname"
    TERM = "term"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum115(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum116(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum117(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    ADDRESS = "address"
    ADDRESSDESC = "address desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    EXTERNALPRINCIPALIDDESC = "externalPrincipalId desc"
    FAX = "fax"
    FAXDESC = "fax desc"
    HIGHESTGRADE = "highestGrade"
    HIGHESTGRADEDESC = "highestGrade desc"
    LOWESTGRADE = "lowestGrade"
    LOWESTGRADEDESC = "lowestGrade desc"
    PHONE = "phone"
    PHONEDESC = "phone desc"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALEMAILDESC = "principalEmail desc"
    PRINCIPALNAME = "principalName"
    PRINCIPALNAMEDESC = "principalName desc"
    SCHOOLNUMBER = "schoolNumber"
    SCHOOLNUMBERDESC = "schoolNumber desc"

class Enum118(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    ADDRESS = "address"
    CREATEDBY = "createdBy"
    EXTERNALID = "externalId"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    FAX = "fax"
    HIGHESTGRADE = "highestGrade"
    LOWESTGRADE = "lowestGrade"
    PHONE = "phone"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALNAME = "principalName"
    SCHOOLNUMBER = "schoolNumber"
    CLASSES = "classes"
    USERS = "users"

class Enum119(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    USERS = "users"

class Enum120(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    ADDRESS = "address"
    ADDRESSDESC = "address desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    EXTERNALPRINCIPALIDDESC = "externalPrincipalId desc"
    FAX = "fax"
    FAXDESC = "fax desc"
    HIGHESTGRADE = "highestGrade"
    HIGHESTGRADEDESC = "highestGrade desc"
    LOWESTGRADE = "lowestGrade"
    LOWESTGRADEDESC = "lowestGrade desc"
    PHONE = "phone"
    PHONEDESC = "phone desc"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALEMAILDESC = "principalEmail desc"
    PRINCIPALNAME = "principalName"
    PRINCIPALNAMEDESC = "principalName desc"
    SCHOOLNUMBER = "schoolNumber"
    SCHOOLNUMBERDESC = "schoolNumber desc"

class Enum121(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETEDDATETIME = "deletedDateTime"
    ACCOUNTENABLED = "accountEnabled"
    AGEGROUP = "ageGroup"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CITY = "city"
    COMPANYNAME = "companyName"
    CONSENTPROVIDEDFORMINOR = "consentProvidedForMinor"
    COUNTRY = "country"
    CREATEDDATETIME = "createdDateTime"
    CREATIONTYPE = "creationType"
    DEPARTMENT = "department"
    DISPLAYNAME = "displayName"
    EMPLOYEEID = "employeeId"
    EXTERNALUSERSTATE = "externalUserState"
    EXTERNALUSERSTATECHANGEDATETIME = "externalUserStateChangeDateTime"
    FAXNUMBER = "faxNumber"
    GIVENNAME = "givenName"
    IDENTITIES = "identities"
    IMADDRESSES = "imAddresses"
    ISRESOURCEACCOUNT = "isResourceAccount"
    JOBTITLE = "jobTitle"
    LASTPASSWORDCHANGEDATETIME = "lastPasswordChangeDateTime"
    LEGALAGEGROUPCLASSIFICATION = "legalAgeGroupClassification"
    LICENSEASSIGNMENTSTATES = "licenseAssignmentStates"
    MAIL = "mail"
    MAILNICKNAME = "mailNickname"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    ONPREMISESDISTINGUISHEDNAME = "onPremisesDistinguishedName"
    ONPREMISESDOMAINNAME = "onPremisesDomainName"
    ONPREMISESEXTENSIONATTRIBUTES = "onPremisesExtensionAttributes"
    ONPREMISESIMMUTABLEID = "onPremisesImmutableId"
    ONPREMISESLASTSYNCDATETIME = "onPremisesLastSyncDateTime"
    ONPREMISESPROVISIONINGERRORS = "onPremisesProvisioningErrors"
    ONPREMISESSAMACCOUNTNAME = "onPremisesSamAccountName"
    ONPREMISESSECURITYIDENTIFIER = "onPremisesSecurityIdentifier"
    ONPREMISESSYNCENABLED = "onPremisesSyncEnabled"
    ONPREMISESUSERPRINCIPALNAME = "onPremisesUserPrincipalName"
    OTHERMAILS = "otherMails"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    POSTALCODE = "postalCode"
    PREFERREDLANGUAGE = "preferredLanguage"
    PROVISIONEDPLANS = "provisionedPlans"
    PROXYADDRESSES = "proxyAddresses"
    SHOWINADDRESSLIST = "showInAddressList"
    SIGNINSESSIONSVALIDFROMDATETIME = "signInSessionsValidFromDateTime"
    STATE = "state"
    STREETADDRESS = "streetAddress"
    SURNAME = "surname"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    MAILBOXSETTINGS = "mailboxSettings"
    DEVICEENROLLMENTLIMIT = "deviceEnrollmentLimit"
    ABOUTME = "aboutMe"
    BIRTHDAY = "birthday"
    HIREDATE = "hireDate"
    INTERESTS = "interests"
    MYSITE = "mySite"
    PASTPROJECTS = "pastProjects"
    PREFERREDNAME = "preferredName"
    RESPONSIBILITIES = "responsibilities"
    SCHOOLS = "schools"
    SKILLS = "skills"
    APPROLEASSIGNMENTS = "appRoleAssignments"
    CREATEDOBJECTS = "createdObjects"
    DIRECTREPORTS = "directReports"
    LICENSEDETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBEROF = "memberOf"
    OAUTH2PERMISSIONGRANTS = "oauth2PermissionGrants"
    OWNEDDEVICES = "ownedDevices"
    OWNEDOBJECTS = "ownedObjects"
    REGISTEREDDEVICES = "registeredDevices"
    SCOPEDROLEMEMBEROF = "scopedRoleMemberOf"
    TRANSITIVEMEMBEROF = "transitiveMemberOf"
    CALENDAR = "calendar"
    CALENDARGROUPS = "calendarGroups"
    CALENDARS = "calendars"
    CALENDARVIEW = "calendarView"
    CONTACTFOLDERS = "contactFolders"
    CONTACTS = "contacts"
    EVENTS = "events"
    INFERENCECLASSIFICATION = "inferenceClassification"
    MAILFOLDERS = "mailFolders"
    MESSAGES = "messages"
    OUTLOOK = "outlook"
    PEOPLE = "people"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWEDSITES = "followedSites"
    EXTENSIONS = "extensions"
    MANAGEDDEVICES = "managedDevices"
    MANAGEDAPPREGISTRATIONS = "managedAppRegistrations"
    DEVICEMANAGEMENTTROUBLESHOOTINGEVENTS = "deviceManagementTroubleshootingEvents"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    ACTIVITIES = "activities"
    ONLINEMEETINGS = "onlineMeetings"
    JOINEDTEAMS = "joinedTeams"

class Enum122(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPROLEASSIGNMENTS = "appRoleAssignments"
    CREATEDOBJECTS = "createdObjects"
    DIRECTREPORTS = "directReports"
    LICENSEDETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBEROF = "memberOf"
    OAUTH2PERMISSIONGRANTS = "oauth2PermissionGrants"
    OWNEDDEVICES = "ownedDevices"
    OWNEDOBJECTS = "ownedObjects"
    REGISTEREDDEVICES = "registeredDevices"
    SCOPEDROLEMEMBEROF = "scopedRoleMemberOf"
    TRANSITIVEMEMBEROF = "transitiveMemberOf"
    CALENDAR = "calendar"
    CALENDARGROUPS = "calendarGroups"
    CALENDARS = "calendars"
    CALENDARVIEW = "calendarView"
    CONTACTFOLDERS = "contactFolders"
    CONTACTS = "contacts"
    EVENTS = "events"
    INFERENCECLASSIFICATION = "inferenceClassification"
    MAILFOLDERS = "mailFolders"
    MESSAGES = "messages"
    OUTLOOK = "outlook"
    PEOPLE = "people"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWEDSITES = "followedSites"
    EXTENSIONS = "extensions"
    MANAGEDDEVICES = "managedDevices"
    MANAGEDAPPREGISTRATIONS = "managedAppRegistrations"
    DEVICEMANAGEMENTTROUBLESHOOTINGEVENTS = "deviceManagementTroubleshootingEvents"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    ACTIVITIES = "activities"
    ONLINEMEETINGS = "onlineMeetings"
    JOINEDTEAMS = "joinedTeams"

class Enum67(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSCODE = "classCode"
    CREATEDBY = "createdBy"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALID = "externalId"
    EXTERNALNAME = "externalName"
    EXTERNALSOURCE = "externalSource"
    MAILNICKNAME = "mailNickname"
    TERM = "term"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum69(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETEDDATETIME = "deletedDateTime"
    ASSIGNEDLABELS = "assignedLabels"
    ASSIGNEDLICENSES = "assignedLicenses"
    CLASSIFICATION = "classification"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXPIRATIONDATETIME = "expirationDateTime"
    GROUPTYPES = "groupTypes"
    HASMEMBERSWITHLICENSEERRORS = "hasMembersWithLicenseErrors"
    LICENSEPROCESSINGSTATE = "licenseProcessingState"
    MAIL = "mail"
    MAILENABLED = "mailEnabled"
    MAILNICKNAME = "mailNickname"
    MEMBERSHIPRULE = "membershipRule"
    MEMBERSHIPRULEPROCESSINGSTATE = "membershipRuleProcessingState"
    ONPREMISESDOMAINNAME = "onPremisesDomainName"
    ONPREMISESLASTSYNCDATETIME = "onPremisesLastSyncDateTime"
    ONPREMISESNETBIOSNAME = "onPremisesNetBiosName"
    ONPREMISESPROVISIONINGERRORS = "onPremisesProvisioningErrors"
    ONPREMISESSAMACCOUNTNAME = "onPremisesSamAccountName"
    ONPREMISESSECURITYIDENTIFIER = "onPremisesSecurityIdentifier"
    ONPREMISESSYNCENABLED = "onPremisesSyncEnabled"
    PREFERREDDATALOCATION = "preferredDataLocation"
    PREFERREDLANGUAGE = "preferredLanguage"
    PROXYADDRESSES = "proxyAddresses"
    RENEWEDDATETIME = "renewedDateTime"
    SECURITYENABLED = "securityEnabled"
    SECURITYIDENTIFIER = "securityIdentifier"
    THEME = "theme"
    VISIBILITY = "visibility"
    ALLOWEXTERNALSENDERS = "allowExternalSenders"
    AUTOSUBSCRIBENEWMEMBERS = "autoSubscribeNewMembers"
    HIDEFROMADDRESSLISTS = "hideFromAddressLists"
    HIDEFROMOUTLOOKCLIENTS = "hideFromOutlookClients"
    ISSUBSCRIBEDBYMAIL = "isSubscribedByMail"
    UNSEENCOUNT = "unseenCount"
    ISARCHIVED = "isArchived"
    APPROLEASSIGNMENTS = "appRoleAssignments"
    CREATEDONBEHALFOF = "createdOnBehalfOf"
    MEMBEROF = "memberOf"
    MEMBERS = "members"
    MEMBERSWITHLICENSEERRORS = "membersWithLicenseErrors"
    OWNERS = "owners"
    SETTINGS = "settings"
    TRANSITIVEMEMBEROF = "transitiveMemberOf"
    TRANSITIVEMEMBERS = "transitiveMembers"
    ACCEPTEDSENDERS = "acceptedSenders"
    CALENDAR = "calendar"
    CALENDARVIEW = "calendarView"
    CONVERSATIONS = "conversations"
    EVENTS = "events"
    PHOTO = "photo"
    PHOTOS = "photos"
    REJECTEDSENDERS = "rejectedSenders"
    THREADS = "threads"
    DRIVE = "drive"
    DRIVES = "drives"
    SITES = "sites"
    EXTENSIONS = "extensions"
    GROUPLIFECYCLEPOLICIES = "groupLifecyclePolicies"
    PLANNER = "planner"
    ONENOTE = "onenote"
    TEAM = "team"

class Enum70(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPROLEASSIGNMENTS = "appRoleAssignments"
    CREATEDONBEHALFOF = "createdOnBehalfOf"
    MEMBEROF = "memberOf"
    MEMBERS = "members"
    MEMBERSWITHLICENSEERRORS = "membersWithLicenseErrors"
    OWNERS = "owners"
    SETTINGS = "settings"
    TRANSITIVEMEMBEROF = "transitiveMemberOf"
    TRANSITIVEMEMBERS = "transitiveMembers"
    ACCEPTEDSENDERS = "acceptedSenders"
    CALENDAR = "calendar"
    CALENDARVIEW = "calendarView"
    CONVERSATIONS = "conversations"
    EVENTS = "events"
    PHOTO = "photo"
    PHOTOS = "photos"
    REJECTEDSENDERS = "rejectedSenders"
    THREADS = "threads"
    DRIVE = "drive"
    DRIVES = "drives"
    SITES = "sites"
    EXTENSIONS = "extensions"
    GROUPLIFECYCLEPOLICIES = "groupLifecyclePolicies"
    PLANNER = "planner"
    ONENOTE = "onenote"
    TEAM = "team"

class Enum71(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACCOUNTENABLED = "accountEnabled"
    ACCOUNTENABLEDDESC = "accountEnabled desc"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDLICENSESDESC = "assignedLicenses desc"
    ASSIGNEDPLANS = "assignedPlans"
    ASSIGNEDPLANSDESC = "assignedPlans desc"
    BUSINESSPHONES = "businessPhones"
    BUSINESSPHONESDESC = "businessPhones desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DEPARTMENT = "department"
    DEPARTMENTDESC = "department desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    GIVENNAME = "givenName"
    GIVENNAMEDESC = "givenName desc"
    MAIL = "mail"
    MAILDESC = "mail desc"
    MAILINGADDRESS = "mailingAddress"
    MAILINGADDRESSDESC = "mailingAddress desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    MIDDLENAME = "middleName"
    MIDDLENAMEDESC = "middleName desc"
    MOBILEPHONE = "mobilePhone"
    MOBILEPHONEDESC = "mobilePhone desc"
    OFFICELOCATION = "officeLocation"
    OFFICELOCATIONDESC = "officeLocation desc"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPOLICIESDESC = "passwordPolicies desc"
    PASSWORDPROFILE = "passwordProfile"
    PASSWORDPROFILEDESC = "passwordProfile desc"
    PREFERREDLANGUAGE = "preferredLanguage"
    PREFERREDLANGUAGEDESC = "preferredLanguage desc"
    PRIMARYROLE = "primaryRole"
    PRIMARYROLEDESC = "primaryRole desc"
    PROVISIONEDPLANS = "provisionedPlans"
    PROVISIONEDPLANSDESC = "provisionedPlans desc"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    REFRESHTOKENSVALIDFROMDATETIMEDESC = "refreshTokensValidFromDateTime desc"
    RESIDENCEADDRESS = "residenceAddress"
    RESIDENCEADDRESSDESC = "residenceAddress desc"
    SHOWINADDRESSLIST = "showInAddressList"
    SHOWINADDRESSLISTDESC = "showInAddressList desc"
    STUDENT = "student"
    STUDENTDESC = "student desc"
    SURNAME = "surname"
    SURNAMEDESC = "surname desc"
    TEACHER = "teacher"
    TEACHERDESC = "teacher desc"
    USAGELOCATION = "usageLocation"
    USAGELOCATIONDESC = "usageLocation desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    USERTYPE = "userType"
    USERTYPEDESC = "userType desc"

class Enum72(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACCOUNTENABLED = "accountEnabled"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CREATEDBY = "createdBy"
    DEPARTMENT = "department"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    GIVENNAME = "givenName"
    MAIL = "mail"
    MAILINGADDRESS = "mailingAddress"
    MAILNICKNAME = "mailNickname"
    MIDDLENAME = "middleName"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    PREFERREDLANGUAGE = "preferredLanguage"
    PRIMARYROLE = "primaryRole"
    PROVISIONEDPLANS = "provisionedPlans"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    RESIDENCEADDRESS = "residenceAddress"
    SHOWINADDRESSLIST = "showInAddressList"
    STUDENT = "student"
    SURNAME = "surname"
    TEACHER = "teacher"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    CLASSES = "classes"
    SCHOOLS = "schools"
    USER = "user"

class Enum74(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACCOUNTENABLED = "accountEnabled"
    ACCOUNTENABLEDDESC = "accountEnabled desc"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDLICENSESDESC = "assignedLicenses desc"
    ASSIGNEDPLANS = "assignedPlans"
    ASSIGNEDPLANSDESC = "assignedPlans desc"
    BUSINESSPHONES = "businessPhones"
    BUSINESSPHONESDESC = "businessPhones desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DEPARTMENT = "department"
    DEPARTMENTDESC = "department desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    GIVENNAME = "givenName"
    GIVENNAMEDESC = "givenName desc"
    MAIL = "mail"
    MAILDESC = "mail desc"
    MAILINGADDRESS = "mailingAddress"
    MAILINGADDRESSDESC = "mailingAddress desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    MIDDLENAME = "middleName"
    MIDDLENAMEDESC = "middleName desc"
    MOBILEPHONE = "mobilePhone"
    MOBILEPHONEDESC = "mobilePhone desc"
    OFFICELOCATION = "officeLocation"
    OFFICELOCATIONDESC = "officeLocation desc"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPOLICIESDESC = "passwordPolicies desc"
    PASSWORDPROFILE = "passwordProfile"
    PASSWORDPROFILEDESC = "passwordProfile desc"
    PREFERREDLANGUAGE = "preferredLanguage"
    PREFERREDLANGUAGEDESC = "preferredLanguage desc"
    PRIMARYROLE = "primaryRole"
    PRIMARYROLEDESC = "primaryRole desc"
    PROVISIONEDPLANS = "provisionedPlans"
    PROVISIONEDPLANSDESC = "provisionedPlans desc"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    REFRESHTOKENSVALIDFROMDATETIMEDESC = "refreshTokensValidFromDateTime desc"
    RESIDENCEADDRESS = "residenceAddress"
    RESIDENCEADDRESSDESC = "residenceAddress desc"
    SHOWINADDRESSLIST = "showInAddressList"
    SHOWINADDRESSLISTDESC = "showInAddressList desc"
    STUDENT = "student"
    STUDENTDESC = "student desc"
    SURNAME = "surname"
    SURNAMEDESC = "surname desc"
    TEACHER = "teacher"
    TEACHERDESC = "teacher desc"
    USAGELOCATION = "usageLocation"
    USAGELOCATIONDESC = "usageLocation desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    USERTYPE = "userType"
    USERTYPEDESC = "userType desc"

class Enum75(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    ADDRESS = "address"
    ADDRESSDESC = "address desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    EXTERNALPRINCIPALIDDESC = "externalPrincipalId desc"
    FAX = "fax"
    FAXDESC = "fax desc"
    HIGHESTGRADE = "highestGrade"
    HIGHESTGRADEDESC = "highestGrade desc"
    LOWESTGRADE = "lowestGrade"
    LOWESTGRADEDESC = "lowestGrade desc"
    PHONE = "phone"
    PHONEDESC = "phone desc"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALEMAILDESC = "principalEmail desc"
    PRINCIPALNAME = "principalName"
    PRINCIPALNAMEDESC = "principalName desc"
    SCHOOLNUMBER = "schoolNumber"
    SCHOOLNUMBERDESC = "schoolNumber desc"

class Enum76(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    ADDRESS = "address"
    CREATEDBY = "createdBy"
    EXTERNALID = "externalId"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    FAX = "fax"
    HIGHESTGRADE = "highestGrade"
    LOWESTGRADE = "lowestGrade"
    PHONE = "phone"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALNAME = "principalName"
    SCHOOLNUMBER = "schoolNumber"
    CLASSES = "classes"
    USERS = "users"

class Enum77(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    USERS = "users"

class Enum78(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    ADDRESS = "address"
    ADDRESSDESC = "address desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    EXTERNALPRINCIPALIDDESC = "externalPrincipalId desc"
    FAX = "fax"
    FAXDESC = "fax desc"
    HIGHESTGRADE = "highestGrade"
    HIGHESTGRADEDESC = "highestGrade desc"
    LOWESTGRADE = "lowestGrade"
    LOWESTGRADEDESC = "lowestGrade desc"
    PHONE = "phone"
    PHONEDESC = "phone desc"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALEMAILDESC = "principalEmail desc"
    PRINCIPALNAME = "principalName"
    PRINCIPALNAMEDESC = "principalName desc"
    SCHOOLNUMBER = "schoolNumber"
    SCHOOLNUMBERDESC = "schoolNumber desc"

class Enum79(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACCOUNTENABLED = "accountEnabled"
    ACCOUNTENABLEDDESC = "accountEnabled desc"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDLICENSESDESC = "assignedLicenses desc"
    ASSIGNEDPLANS = "assignedPlans"
    ASSIGNEDPLANSDESC = "assignedPlans desc"
    BUSINESSPHONES = "businessPhones"
    BUSINESSPHONESDESC = "businessPhones desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DEPARTMENT = "department"
    DEPARTMENTDESC = "department desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    GIVENNAME = "givenName"
    GIVENNAMEDESC = "givenName desc"
    MAIL = "mail"
    MAILDESC = "mail desc"
    MAILINGADDRESS = "mailingAddress"
    MAILINGADDRESSDESC = "mailingAddress desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    MIDDLENAME = "middleName"
    MIDDLENAMEDESC = "middleName desc"
    MOBILEPHONE = "mobilePhone"
    MOBILEPHONEDESC = "mobilePhone desc"
    OFFICELOCATION = "officeLocation"
    OFFICELOCATIONDESC = "officeLocation desc"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPOLICIESDESC = "passwordPolicies desc"
    PASSWORDPROFILE = "passwordProfile"
    PASSWORDPROFILEDESC = "passwordProfile desc"
    PREFERREDLANGUAGE = "preferredLanguage"
    PREFERREDLANGUAGEDESC = "preferredLanguage desc"
    PRIMARYROLE = "primaryRole"
    PRIMARYROLEDESC = "primaryRole desc"
    PROVISIONEDPLANS = "provisionedPlans"
    PROVISIONEDPLANSDESC = "provisionedPlans desc"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    REFRESHTOKENSVALIDFROMDATETIMEDESC = "refreshTokensValidFromDateTime desc"
    RESIDENCEADDRESS = "residenceAddress"
    RESIDENCEADDRESSDESC = "residenceAddress desc"
    SHOWINADDRESSLIST = "showInAddressList"
    SHOWINADDRESSLISTDESC = "showInAddressList desc"
    STUDENT = "student"
    STUDENTDESC = "student desc"
    SURNAME = "surname"
    SURNAMEDESC = "surname desc"
    TEACHER = "teacher"
    TEACHERDESC = "teacher desc"
    USAGELOCATION = "usageLocation"
    USAGELOCATIONDESC = "usageLocation desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    USERTYPE = "userType"
    USERTYPEDESC = "userType desc"

class Enum80(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACCOUNTENABLED = "accountEnabled"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CREATEDBY = "createdBy"
    DEPARTMENT = "department"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    GIVENNAME = "givenName"
    MAIL = "mail"
    MAILINGADDRESS = "mailingAddress"
    MAILNICKNAME = "mailNickname"
    MIDDLENAME = "middleName"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    PREFERREDLANGUAGE = "preferredLanguage"
    PRIMARYROLE = "primaryRole"
    PROVISIONEDPLANS = "provisionedPlans"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    RESIDENCEADDRESS = "residenceAddress"
    SHOWINADDRESSLIST = "showInAddressList"
    STUDENT = "student"
    SURNAME = "surname"
    TEACHER = "teacher"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    CLASSES = "classes"
    SCHOOLS = "schools"
    USER = "user"

class Enum81(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    SCHOOLS = "schools"
    USER = "user"

class Enum82(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACCOUNTENABLED = "accountEnabled"
    ACCOUNTENABLEDDESC = "accountEnabled desc"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDLICENSESDESC = "assignedLicenses desc"
    ASSIGNEDPLANS = "assignedPlans"
    ASSIGNEDPLANSDESC = "assignedPlans desc"
    BUSINESSPHONES = "businessPhones"
    BUSINESSPHONESDESC = "businessPhones desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DEPARTMENT = "department"
    DEPARTMENTDESC = "department desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    GIVENNAME = "givenName"
    GIVENNAMEDESC = "givenName desc"
    MAIL = "mail"
    MAILDESC = "mail desc"
    MAILINGADDRESS = "mailingAddress"
    MAILINGADDRESSDESC = "mailingAddress desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    MIDDLENAME = "middleName"
    MIDDLENAMEDESC = "middleName desc"
    MOBILEPHONE = "mobilePhone"
    MOBILEPHONEDESC = "mobilePhone desc"
    OFFICELOCATION = "officeLocation"
    OFFICELOCATIONDESC = "officeLocation desc"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPOLICIESDESC = "passwordPolicies desc"
    PASSWORDPROFILE = "passwordProfile"
    PASSWORDPROFILEDESC = "passwordProfile desc"
    PREFERREDLANGUAGE = "preferredLanguage"
    PREFERREDLANGUAGEDESC = "preferredLanguage desc"
    PRIMARYROLE = "primaryRole"
    PRIMARYROLEDESC = "primaryRole desc"
    PROVISIONEDPLANS = "provisionedPlans"
    PROVISIONEDPLANSDESC = "provisionedPlans desc"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    REFRESHTOKENSVALIDFROMDATETIMEDESC = "refreshTokensValidFromDateTime desc"
    RESIDENCEADDRESS = "residenceAddress"
    RESIDENCEADDRESSDESC = "residenceAddress desc"
    SHOWINADDRESSLIST = "showInAddressList"
    SHOWINADDRESSLISTDESC = "showInAddressList desc"
    STUDENT = "student"
    STUDENTDESC = "student desc"
    SURNAME = "surname"
    SURNAMEDESC = "surname desc"
    TEACHER = "teacher"
    TEACHERDESC = "teacher desc"
    USAGELOCATION = "usageLocation"
    USAGELOCATIONDESC = "usageLocation desc"
    USERPRINCIPALNAME = "userPrincipalName"
    USERPRINCIPALNAMEDESC = "userPrincipalName desc"
    USERTYPE = "userType"
    USERTYPEDESC = "userType desc"

class Enum83(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACCOUNTENABLED = "accountEnabled"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CREATEDBY = "createdBy"
    DEPARTMENT = "department"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    GIVENNAME = "givenName"
    MAIL = "mail"
    MAILINGADDRESS = "mailingAddress"
    MAILNICKNAME = "mailNickname"
    MIDDLENAME = "middleName"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    PREFERREDLANGUAGE = "preferredLanguage"
    PRIMARYROLE = "primaryRole"
    PROVISIONEDPLANS = "provisionedPlans"
    REFRESHTOKENSVALIDFROMDATETIME = "refreshTokensValidFromDateTime"
    RESIDENCEADDRESS = "residenceAddress"
    SHOWINADDRESSLIST = "showInAddressList"
    STUDENT = "student"
    SURNAME = "surname"
    TEACHER = "teacher"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    CLASSES = "classes"
    SCHOOLS = "schools"
    USER = "user"

class Enum84(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    SCHOOLS = "schools"
    USER = "user"

class Enum85(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum86(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSCODE = "classCode"
    CREATEDBY = "createdBy"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALID = "externalId"
    EXTERNALNAME = "externalName"
    EXTERNALSOURCE = "externalSource"
    MAILNICKNAME = "mailNickname"
    TERM = "term"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum87(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Enum88(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Enum89(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    ADDRESS = "address"
    ADDRESSDESC = "address desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    EXTERNALPRINCIPALIDDESC = "externalPrincipalId desc"
    FAX = "fax"
    FAXDESC = "fax desc"
    HIGHESTGRADE = "highestGrade"
    HIGHESTGRADEDESC = "highestGrade desc"
    LOWESTGRADE = "lowestGrade"
    LOWESTGRADEDESC = "lowestGrade desc"
    PHONE = "phone"
    PHONEDESC = "phone desc"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALEMAILDESC = "principalEmail desc"
    PRINCIPALNAME = "principalName"
    PRINCIPALNAMEDESC = "principalName desc"
    SCHOOLNUMBER = "schoolNumber"
    SCHOOLNUMBERDESC = "schoolNumber desc"

class Enum90(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    ADDRESS = "address"
    CREATEDBY = "createdBy"
    EXTERNALID = "externalId"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    FAX = "fax"
    HIGHESTGRADE = "highestGrade"
    LOWESTGRADE = "lowestGrade"
    PHONE = "phone"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALNAME = "principalName"
    SCHOOLNUMBER = "schoolNumber"
    CLASSES = "classes"
    USERS = "users"

class Enum91(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    USERS = "users"

class Enum92(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    ADDRESS = "address"
    ADDRESSDESC = "address desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    EXTERNALPRINCIPALIDDESC = "externalPrincipalId desc"
    FAX = "fax"
    FAXDESC = "fax desc"
    HIGHESTGRADE = "highestGrade"
    HIGHESTGRADEDESC = "highestGrade desc"
    LOWESTGRADE = "lowestGrade"
    LOWESTGRADEDESC = "lowestGrade desc"
    PHONE = "phone"
    PHONEDESC = "phone desc"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALEMAILDESC = "principalEmail desc"
    PRINCIPALNAME = "principalName"
    PRINCIPALNAMEDESC = "principalName desc"
    SCHOOLNUMBER = "schoolNumber"
    SCHOOLNUMBERDESC = "schoolNumber desc"

class Enum93(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETEDDATETIME = "deletedDateTime"
    ACCOUNTENABLED = "accountEnabled"
    AGEGROUP = "ageGroup"
    ASSIGNEDLICENSES = "assignedLicenses"
    ASSIGNEDPLANS = "assignedPlans"
    BUSINESSPHONES = "businessPhones"
    CITY = "city"
    COMPANYNAME = "companyName"
    CONSENTPROVIDEDFORMINOR = "consentProvidedForMinor"
    COUNTRY = "country"
    CREATEDDATETIME = "createdDateTime"
    CREATIONTYPE = "creationType"
    DEPARTMENT = "department"
    DISPLAYNAME = "displayName"
    EMPLOYEEID = "employeeId"
    EXTERNALUSERSTATE = "externalUserState"
    EXTERNALUSERSTATECHANGEDATETIME = "externalUserStateChangeDateTime"
    FAXNUMBER = "faxNumber"
    GIVENNAME = "givenName"
    IDENTITIES = "identities"
    IMADDRESSES = "imAddresses"
    ISRESOURCEACCOUNT = "isResourceAccount"
    JOBTITLE = "jobTitle"
    LASTPASSWORDCHANGEDATETIME = "lastPasswordChangeDateTime"
    LEGALAGEGROUPCLASSIFICATION = "legalAgeGroupClassification"
    LICENSEASSIGNMENTSTATES = "licenseAssignmentStates"
    MAIL = "mail"
    MAILNICKNAME = "mailNickname"
    MOBILEPHONE = "mobilePhone"
    OFFICELOCATION = "officeLocation"
    ONPREMISESDISTINGUISHEDNAME = "onPremisesDistinguishedName"
    ONPREMISESDOMAINNAME = "onPremisesDomainName"
    ONPREMISESEXTENSIONATTRIBUTES = "onPremisesExtensionAttributes"
    ONPREMISESIMMUTABLEID = "onPremisesImmutableId"
    ONPREMISESLASTSYNCDATETIME = "onPremisesLastSyncDateTime"
    ONPREMISESPROVISIONINGERRORS = "onPremisesProvisioningErrors"
    ONPREMISESSAMACCOUNTNAME = "onPremisesSamAccountName"
    ONPREMISESSECURITYIDENTIFIER = "onPremisesSecurityIdentifier"
    ONPREMISESSYNCENABLED = "onPremisesSyncEnabled"
    ONPREMISESUSERPRINCIPALNAME = "onPremisesUserPrincipalName"
    OTHERMAILS = "otherMails"
    PASSWORDPOLICIES = "passwordPolicies"
    PASSWORDPROFILE = "passwordProfile"
    POSTALCODE = "postalCode"
    PREFERREDLANGUAGE = "preferredLanguage"
    PROVISIONEDPLANS = "provisionedPlans"
    PROXYADDRESSES = "proxyAddresses"
    SHOWINADDRESSLIST = "showInAddressList"
    SIGNINSESSIONSVALIDFROMDATETIME = "signInSessionsValidFromDateTime"
    STATE = "state"
    STREETADDRESS = "streetAddress"
    SURNAME = "surname"
    USAGELOCATION = "usageLocation"
    USERPRINCIPALNAME = "userPrincipalName"
    USERTYPE = "userType"
    MAILBOXSETTINGS = "mailboxSettings"
    DEVICEENROLLMENTLIMIT = "deviceEnrollmentLimit"
    ABOUTME = "aboutMe"
    BIRTHDAY = "birthday"
    HIREDATE = "hireDate"
    INTERESTS = "interests"
    MYSITE = "mySite"
    PASTPROJECTS = "pastProjects"
    PREFERREDNAME = "preferredName"
    RESPONSIBILITIES = "responsibilities"
    SCHOOLS = "schools"
    SKILLS = "skills"
    APPROLEASSIGNMENTS = "appRoleAssignments"
    CREATEDOBJECTS = "createdObjects"
    DIRECTREPORTS = "directReports"
    LICENSEDETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBEROF = "memberOf"
    OAUTH2PERMISSIONGRANTS = "oauth2PermissionGrants"
    OWNEDDEVICES = "ownedDevices"
    OWNEDOBJECTS = "ownedObjects"
    REGISTEREDDEVICES = "registeredDevices"
    SCOPEDROLEMEMBEROF = "scopedRoleMemberOf"
    TRANSITIVEMEMBEROF = "transitiveMemberOf"
    CALENDAR = "calendar"
    CALENDARGROUPS = "calendarGroups"
    CALENDARS = "calendars"
    CALENDARVIEW = "calendarView"
    CONTACTFOLDERS = "contactFolders"
    CONTACTS = "contacts"
    EVENTS = "events"
    INFERENCECLASSIFICATION = "inferenceClassification"
    MAILFOLDERS = "mailFolders"
    MESSAGES = "messages"
    OUTLOOK = "outlook"
    PEOPLE = "people"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWEDSITES = "followedSites"
    EXTENSIONS = "extensions"
    MANAGEDDEVICES = "managedDevices"
    MANAGEDAPPREGISTRATIONS = "managedAppRegistrations"
    DEVICEMANAGEMENTTROUBLESHOOTINGEVENTS = "deviceManagementTroubleshootingEvents"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    ACTIVITIES = "activities"
    ONLINEMEETINGS = "onlineMeetings"
    JOINEDTEAMS = "joinedTeams"

class Enum94(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPROLEASSIGNMENTS = "appRoleAssignments"
    CREATEDOBJECTS = "createdObjects"
    DIRECTREPORTS = "directReports"
    LICENSEDETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBEROF = "memberOf"
    OAUTH2PERMISSIONGRANTS = "oauth2PermissionGrants"
    OWNEDDEVICES = "ownedDevices"
    OWNEDOBJECTS = "ownedObjects"
    REGISTEREDDEVICES = "registeredDevices"
    SCOPEDROLEMEMBEROF = "scopedRoleMemberOf"
    TRANSITIVEMEMBEROF = "transitiveMemberOf"
    CALENDAR = "calendar"
    CALENDARGROUPS = "calendarGroups"
    CALENDARS = "calendars"
    CALENDARVIEW = "calendarView"
    CONTACTFOLDERS = "contactFolders"
    CONTACTS = "contacts"
    EVENTS = "events"
    INFERENCECLASSIFICATION = "inferenceClassification"
    MAILFOLDERS = "mailFolders"
    MESSAGES = "messages"
    OUTLOOK = "outlook"
    PEOPLE = "people"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWEDSITES = "followedSites"
    EXTENSIONS = "extensions"
    MANAGEDDEVICES = "managedDevices"
    MANAGEDAPPREGISTRATIONS = "managedAppRegistrations"
    DEVICEMANAGEMENTTROUBLESHOOTINGEVENTS = "deviceManagementTroubleshootingEvents"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    ACTIVITIES = "activities"
    ONLINEMEETINGS = "onlineMeetings"
    JOINEDTEAMS = "joinedTeams"

class Enum95(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    ADDRESS = "address"
    ADDRESSDESC = "address desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    EXTERNALPRINCIPALIDDESC = "externalPrincipalId desc"
    FAX = "fax"
    FAXDESC = "fax desc"
    HIGHESTGRADE = "highestGrade"
    HIGHESTGRADEDESC = "highestGrade desc"
    LOWESTGRADE = "lowestGrade"
    LOWESTGRADEDESC = "lowestGrade desc"
    PHONE = "phone"
    PHONEDESC = "phone desc"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALEMAILDESC = "principalEmail desc"
    PRINCIPALNAME = "principalName"
    PRINCIPALNAMEDESC = "principalName desc"
    SCHOOLNUMBER = "schoolNumber"
    SCHOOLNUMBERDESC = "schoolNumber desc"

class Enum96(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    ADDRESS = "address"
    CREATEDBY = "createdBy"
    EXTERNALID = "externalId"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    FAX = "fax"
    HIGHESTGRADE = "highestGrade"
    LOWESTGRADE = "lowestGrade"
    PHONE = "phone"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALNAME = "principalName"
    SCHOOLNUMBER = "schoolNumber"
    CLASSES = "classes"
    USERS = "users"

class Enum97(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    USERS = "users"

class Enum98(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALSOURCE = "externalSource"
    ADDRESS = "address"
    CREATEDBY = "createdBy"
    EXTERNALID = "externalId"
    EXTERNALPRINCIPALID = "externalPrincipalId"
    FAX = "fax"
    HIGHESTGRADE = "highestGrade"
    LOWESTGRADE = "lowestGrade"
    PHONE = "phone"
    PRINCIPALEMAIL = "principalEmail"
    PRINCIPALNAME = "principalName"
    SCHOOLNUMBER = "schoolNumber"
    CLASSES = "classes"
    USERS = "users"

class Enum99(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    USERS = "users"

class Get0itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSES = "classes"
    ME = "me"
    SCHOOLS = "schools"
    USERS = "users"

class Get1itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    ME = "me"
    SCHOOLS = "schools"
    USERS = "users"

class Get2itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Get5itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    CLASSCODE = "classCode"
    CLASSCODEDESC = "classCode desc"
    CREATEDBY = "createdBy"
    CREATEDBYDESC = "createdBy desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DISPLAYNAME = "displayName"
    DISPLAYNAMEDESC = "displayName desc"
    EXTERNALID = "externalId"
    EXTERNALIDDESC = "externalId desc"
    EXTERNALNAME = "externalName"
    EXTERNALNAMEDESC = "externalName desc"
    EXTERNALSOURCE = "externalSource"
    EXTERNALSOURCEDESC = "externalSource desc"
    MAILNICKNAME = "mailNickname"
    MAILNICKNAMEDESC = "mailNickname desc"
    TERM = "term"
    TERMDESC = "term desc"

class Get6itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSCODE = "classCode"
    CREATEDBY = "createdBy"
    DESCRIPTION = "description"
    DISPLAYNAME = "displayName"
    EXTERNALID = "externalId"
    EXTERNALNAME = "externalName"
    EXTERNALSOURCE = "externalSource"
    MAILNICKNAME = "mailNickname"
    TERM = "term"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Get7itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    GROUP = "group"
    MEMBERS = "members"
    SCHOOLS = "schools"
    TEACHERS = "teachers"

class Get8itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    SCHOOLS = "schools"
    USER = "user"

class Microsoftgraphactionstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    PENDING = "pending"
    CANCELED = "canceled"
    ACTIVE = "active"
    DONE = "done"
    FAILED = "failed"
    NOTSUPPORTED = "notSupported"

class Microsoftgraphattendeetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REQUIRED = "required"
    OPTIONAL = "optional"
    RESOURCE = "resource"

class Microsoftgraphautomaticrepliesstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISABLED = "disabled"
    ALWAYSENABLED = "alwaysEnabled"
    SCHEDULED = "scheduled"

class Microsoftgraphbodytype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TEXT = "text"
    HTML = "html"

class Microsoftgraphcalendarcolor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LIGHTBLUE = "lightBlue"
    LIGHTGREEN = "lightGreen"
    AUTO = "auto"
    LIGHTORANGE = "lightOrange"
    LIGHTGRAY = "lightGray"
    LIGHTYELLOW = "lightYellow"
    LIGHTTEAL = "lightTeal"
    LIGHTPINK = "lightPink"
    LIGHTBROWN = "lightBrown"
    LIGHTRED = "lightRed"
    MAXCOLOR = "maxColor"

class Microsoftgraphcalendarroletype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    FREEBUSYREAD = "freeBusyRead"
    LIMITEDREAD = "limitedRead"
    READ = "read"
    WRITE = "write"
    DELEGATEWITHOUTPRIVATEEVENTACCESS = "delegateWithoutPrivateEventAccess"
    DELEGATEWITHPRIVATEEVENTACCESS = "delegateWithPrivateEventAccess"
    CUSTOM = "custom"

class Microsoftgraphcategorycolor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRESET0 = "preset0"
    PRESET1 = "preset1"
    NONE = "none"
    PRESET2 = "preset2"
    PRESET3 = "preset3"
    PRESET4 = "preset4"
    PRESET5 = "preset5"
    PRESET6 = "preset6"
    PRESET7 = "preset7"
    PRESET8 = "preset8"
    PRESET9 = "preset9"
    PRESET10 = "preset10"
    PRESET11 = "preset11"
    PRESET12 = "preset12"
    PRESET13 = "preset13"
    PRESET14 = "preset14"
    PRESET15 = "preset15"
    PRESET16 = "preset16"
    PRESET17 = "preset17"
    PRESET18 = "preset18"
    PRESET19 = "preset19"
    PRESET20 = "preset20"
    PRESET21 = "preset21"
    PRESET22 = "preset22"
    PRESET23 = "preset23"
    PRESET24 = "preset24"

class Microsoftgraphchannelmembershiptype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STANDARD = "standard"
    PRIVATE = "private"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphchatmessageimportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphchatmessagepolicyviolationdlpactiontypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    NOTIFYSENDER = "notifySender"
    BLOCKACCESS = "blockAccess"
    BLOCKACCESSEXTERNAL = "blockAccessExternal"

class Microsoftgraphchatmessagepolicyviolationuseractiontypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    OVERRIDE = "override"
    REPORTFALSEPOSITIVE = "reportFalsePositive"

class Microsoftgraphchatmessagepolicyviolationverdictdetailstypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ALLOWFALSEPOSITIVEOVERRIDE = "allowFalsePositiveOverride"
    ALLOWOVERRIDEWITHOUTJUSTIFICATION = "allowOverrideWithoutJustification"
    ALLOWOVERRIDEWITHJUSTIFICATION = "allowOverrideWithJustification"

class Microsoftgraphchatmessagetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MESSAGE = "message"
    CHATEVENT = "chatEvent"
    TYPING = "typing"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphcompliancestate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPLIANT = "compliant"
    NONCOMPLIANT = "noncompliant"
    CONFLICT = "conflict"
    ERROR = "error"
    INGRACEPERIOD = "inGracePeriod"
    CONFIGMANAGER = "configManager"

class Microsoftgraphcompliancestatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    NOTAPPLICABLE = "notApplicable"
    COMPLIANT = "compliant"
    REMEDIATED = "remediated"
    NONCOMPLIANT = "nonCompliant"
    ERROR = "error"
    CONFLICT = "conflict"
    NOTASSIGNED = "notAssigned"

class Microsoftgraphdayofweek(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUNDAY = "sunday"
    MONDAY = "monday"
    TUESDAY = "tuesday"
    WEDNESDAY = "wednesday"
    THURSDAY = "thursday"
    FRIDAY = "friday"
    SATURDAY = "saturday"

class Microsoftgraphdelegatemeetingmessagedeliveryoptions(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SENDTODELEGATEANDINFORMATIONTOPRINCIPAL = "sendToDelegateAndInformationToPrincipal"
    SENDTODELEGATEANDPRINCIPAL = "sendToDelegateAndPrincipal"
    SENDTODELEGATEONLY = "sendToDelegateOnly"

class Microsoftgraphdeviceenrollmenttype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    USERENROLLMENT = "userEnrollment"
    DEVICEENROLLMENTMANAGER = "deviceEnrollmentManager"
    APPLEBULKWITHUSER = "appleBulkWithUser"
    APPLEBULKWITHOUTUSER = "appleBulkWithoutUser"
    WINDOWSAZUREADJOIN = "windowsAzureADJoin"
    WINDOWSBULKUSERLESS = "windowsBulkUserless"
    WINDOWSAUTOENROLLMENT = "windowsAutoEnrollment"
    WINDOWSBULKAZUREDOMAINJOIN = "windowsBulkAzureDomainJoin"
    WINDOWSCOMANAGEMENT = "windowsCoManagement"

class Microsoftgraphdevicemanagementexchangeaccessstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    ALLOWED = "allowed"
    BLOCKED = "blocked"
    QUARANTINED = "quarantined"

class Microsoftgraphdevicemanagementexchangeaccessstatereason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    EXCHANGEGLOBALRULE = "exchangeGlobalRule"
    EXCHANGEINDIVIDUALRULE = "exchangeIndividualRule"
    EXCHANGEDEVICERULE = "exchangeDeviceRule"
    EXCHANGEUPGRADE = "exchangeUpgrade"
    EXCHANGEMAILBOXPOLICY = "exchangeMailboxPolicy"
    OTHER = "other"
    COMPLIANT = "compliant"
    NOTCOMPLIANT = "notCompliant"
    NOTENROLLED = "notEnrolled"
    UNKNOWNLOCATION = "unknownLocation"
    MFAREQUIRED = "mfaRequired"
    AZUREADBLOCKDUETOACCESSPOLICY = "azureADBlockDueToAccessPolicy"
    COMPROMISEDPASSWORD = "compromisedPassword"
    DEVICENOTKNOWNWITHMANAGEDAPP = "deviceNotKnownWithManagedApp"

class Microsoftgraphdeviceregistrationstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTREGISTERED = "notRegistered"
    REGISTERED = "registered"
    REVOKED = "revoked"
    KEYCONFLICT = "keyConflict"
    APPROVALPENDING = "approvalPending"
    CERTIFICATERESET = "certificateReset"
    NOTREGISTEREDPENDINGENROLLMENT = "notRegisteredPendingEnrollment"
    UNKNOWN = "unknown"

class Microsoftgrapheducationexternalsource(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SIS = "sis"
    MANUAL = "manual"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgrapheducationgender(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FEMALE = "female"
    MALE = "male"
    OTHER = "other"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgrapheducationuserrole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STUDENT = "student"
    TEACHER = "teacher"
    NONE = "none"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgrapheventtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SINGLEINSTANCE = "singleInstance"
    OCCURRENCE = "occurrence"
    EXCEPTION = "exception"
    SERIESMASTER = "seriesMaster"

class Microsoftgraphexternalaudiencescope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CONTACTSONLY = "contactsOnly"
    ALL = "all"

class Microsoftgraphfollowupflagstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTFLAGGED = "notFlagged"
    COMPLETE = "complete"
    FLAGGED = "flagged"

class Microsoftgraphfreebusystatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FREE = "free"
    TENTATIVE = "tentative"
    UNKNOWN = "unknown"
    BUSY = "busy"
    OOF = "oof"
    WORKINGELSEWHERE = "workingElsewhere"

class Microsoftgraphgiphyratingtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STRICT = "strict"
    MODERATE = "moderate"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphimportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"

class Microsoftgraphinferenceclassificationtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FOCUSED = "focused"
    OTHER = "other"

class Microsoftgraphlocationtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "default"
    CONFERENCEROOM = "conferenceRoom"
    HOMEADDRESS = "homeAddress"
    BUSINESSADDRESS = "businessAddress"
    GEOCOORDINATES = "geoCoordinates"
    STREETADDRESS = "streetAddress"
    HOTEL = "hotel"
    RESTAURANT = "restaurant"
    LOCALBUSINESS = "localBusiness"
    POSTALADDRESS = "postalAddress"

class Microsoftgraphlocationuniqueidtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    LOCATIONSTORE = "locationStore"
    DIRECTORY = "directory"
    PRIVATE = "private"
    BING = "bing"

class Microsoftgraphmanagedappflaggedreason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ROOTEDDEVICE = "rootedDevice"

class Microsoftgraphmanageddeviceownertype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPANY = "company"
    PERSONAL = "personal"

class Microsoftgraphmanageddevicepartnerreportedhealthstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    ACTIVATED = "activated"
    DEACTIVATED = "deactivated"
    SECURED = "secured"
    LOWSEVERITY = "lowSeverity"
    MEDIUMSEVERITY = "mediumSeverity"
    HIGHSEVERITY = "highSeverity"
    UNRESPONSIVE = "unresponsive"
    COMPROMISED = "compromised"
    MISCONFIGURED = "misconfigured"

class Microsoftgraphmanagementagenttype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EAS = "eas"
    MDM = "mdm"
    EASMDM = "easMdm"
    INTUNECLIENT = "intuneClient"
    EASINTUNECLIENT = "easIntuneClient"
    CONFIGURATIONMANAGERCLIENT = "configurationManagerClient"
    CONFIGURATIONMANAGERCLIENTMDM = "configurationManagerClientMdm"
    CONFIGURATIONMANAGERCLIENTMDMEAS = "configurationManagerClientMdmEas"
    UNKNOWN = "unknown"
    JAMF = "jamf"
    GOOGLECLOUDDEVICEPOLICYCONTROLLER = "googleCloudDevicePolicyController"

class Microsoftgraphmessageactionflag(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANY = "any"
    CALL = "call"
    DONOTFORWARD = "doNotForward"
    FOLLOWUP = "followUp"
    FYI = "fyi"
    FORWARD = "forward"
    NORESPONSENECESSARY = "noResponseNecessary"
    READ = "read"
    REPLY = "reply"
    REPLYTOALL = "replyToAll"
    REVIEW = "review"

class Microsoftgraphonenoteuserrole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OWNER = "Owner"
    CONTRIBUTOR = "Contributor"
    NONE = "None"
    READER = "Reader"

class Microsoftgraphonlinemeetingprovidertype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    SKYPEFORBUSINESS = "skypeForBusiness"
    SKYPEFORCONSUMER = "skypeForConsumer"
    TEAMSFORBUSINESS = "teamsForBusiness"

class Microsoftgraphoperationstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSTARTED = "NotStarted"
    RUNNING = "Running"
    COMPLETED = "Completed"
    FAILED = "Failed"

class Microsoftgraphphonetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    HOME = "home"
    BUSINESS = "business"
    MOBILE = "mobile"
    OTHER = "other"
    ASSISTANT = "assistant"
    HOMEFAX = "homeFax"
    BUSINESSFAX = "businessFax"
    OTHERFAX = "otherFax"
    PAGER = "pager"
    RADIO = "radio"

class Microsoftgraphplannerpreviewtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUTOMATIC = "automatic"
    NOPREVIEW = "noPreview"
    CHECKLIST = "checklist"
    DESCRIPTION = "description"
    REFERENCE = "reference"

class Microsoftgraphpolicyplatformtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANDROID = "android"
    IOS = "iOS"
    MACOS = "macOS"
    WINDOWSPHONE81 = "windowsPhone81"
    WINDOWS81ANDLATER = "windows81AndLater"
    WINDOWS10ANDLATER = "windows10AndLater"
    ANDROIDWORKPROFILE = "androidWorkProfile"
    ALL = "all"

class Microsoftgraphrecurrencepatterntype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DAILY = "daily"
    WEEKLY = "weekly"
    ABSOLUTEMONTHLY = "absoluteMonthly"
    RELATIVEMONTHLY = "relativeMonthly"
    ABSOLUTEYEARLY = "absoluteYearly"
    RELATIVEYEARLY = "relativeYearly"

class Microsoftgraphrecurrencerangetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ENDDATE = "endDate"
    NOEND = "noEnd"
    NUMBERED = "numbered"

class Microsoftgraphresponsetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ORGANIZER = "organizer"
    TENTATIVELYACCEPTED = "tentativelyAccepted"
    ACCEPTED = "accepted"
    DECLINED = "declined"
    NOTRESPONDED = "notResponded"

class Microsoftgraphschedulechangerequestactor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SENDER = "sender"
    RECIPIENT = "recipient"
    MANAGER = "manager"
    SYSTEM = "system"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphschedulechangestate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    APPROVED = "approved"
    DECLINED = "declined"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphscheduleentitytheme(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    WHITE = "white"
    BLUE = "blue"
    GREEN = "green"
    PURPLE = "purple"
    PINK = "pink"
    YELLOW = "yellow"
    GRAY = "gray"
    DARKBLUE = "darkBlue"
    DARKGREEN = "darkGreen"
    DARKPURPLE = "darkPurple"
    DARKPINK = "darkPink"
    DARKYELLOW = "darkYellow"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphselectionlikelihoodinfo(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSPECIFIED = "notSpecified"
    HIGH = "high"

class Microsoftgraphsensitivity(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    PERSONAL = "personal"
    PRIVATE = "private"
    CONFIDENTIAL = "confidential"

class Microsoftgraphstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "active"
    UPDATED = "updated"
    DELETED = "deleted"
    IGNORED = "ignored"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamsappdistributionmethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STORE = "store"
    ORGANIZATION = "organization"
    SIDELOADED = "sideloaded"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamsasyncoperationstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    NOTSTARTED = "notStarted"
    INPROGRESS = "inProgress"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamsasyncoperationtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    CLONETEAM = "cloneTeam"
    ARCHIVETEAM = "archiveTeam"
    UNARCHIVETEAM = "unarchiveTeam"
    CREATETEAM = "createTeam"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamspecialization(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    EDUCATIONSTANDARD = "educationStandard"
    EDUCATIONCLASS = "educationClass"
    EDUCATIONPROFESSIONALLEARNINGCOMMUNITY = "educationProfessionalLearningCommunity"
    EDUCATIONSTAFF = "educationStaff"
    HEALTHCARESTANDARD = "healthcareStandard"
    HEALTHCARECARECOORDINATION = "healthcareCareCoordination"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphteamvisibilitytype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRIVATE = "private"
    PUBLIC = "public"
    HIDDENMEMBERSHIP = "hiddenMembership"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphtimeoffreasonicontype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CAR = "car"
    CALENDAR = "calendar"
    RUNNING = "running"
    PLANE = "plane"
    FIRSTAID = "firstAid"
    DOCTOR = "doctor"
    NOTWORKING = "notWorking"
    CLOCK = "clock"
    JURYDUTY = "juryDuty"
    GLOBE = "globe"
    CUP = "cup"
    PHONE = "phone"
    WEATHER = "weather"
    UMBRELLA = "umbrella"
    PIGGYBANK = "piggyBank"
    DOG = "dog"
    CAKE = "cake"
    TRAFFICCONE = "trafficCone"
    PIN = "pin"
    SUNNY = "sunny"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphwebsitetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OTHER = "other"
    HOME = "home"
    WORK = "work"
    BLOG = "blog"
    PROFILE = "profile"

class Microsoftgraphweekindex(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FIRST = "first"
    SECOND = "second"
    THIRD = "third"
    FOURTH = "fourth"
    LAST = "last"

class Microsoftgraphworkbookoperationstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSTARTED = "notStarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
