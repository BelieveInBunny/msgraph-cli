# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import EducationConfiguration
from .operations import EducationEducationRootOperations
from .operations import EducationOperations
from .operations import EducationClassOperations
from .operations import EducationMeOperations
from .operations import EducationSchoolOperations
from .operations import EducationUserOperations
from .. import models


class Education(object):
    """Education.

    :ivar education_education_root: EducationEducationRootOperations operations
    :vartype education_education_root: education.aio.operations.EducationEducationRootOperations
    :ivar education: EducationOperations operations
    :vartype education: education.aio.operations.EducationOperations
    :ivar education_class: EducationClassOperations operations
    :vartype education_class: education.aio.operations.EducationClassOperations
    :ivar education_me: EducationMeOperations operations
    :vartype education_me: education.aio.operations.EducationMeOperations
    :ivar education_school: EducationSchoolOperations operations
    :vartype education_school: education.aio.operations.EducationSchoolOperations
    :ivar education_user: EducationUserOperations operations
    :vartype education_user: education.aio.operations.EducationUserOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://graph.microsoft.com/v1.0'
        self._config = EducationConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.education_education_root = EducationEducationRootOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education = EducationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_class = EducationClassOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_me = EducationMeOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_school = EducationSchoolOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.education_user = EducationUserOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "Education":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
