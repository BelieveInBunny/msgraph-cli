# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class UserMailFolderOperations:
    """UserMailFolderOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~mail.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_child_folder(
        self,
        user_id: str,
        mail_folder_id: str,
        orderby: Optional[List[Union[str, "models.Enum16"]]] = None,
        select: Optional[List[Union[str, "models.Enum17"]]] = None,
        expand: Optional[List[Union[str, "models.Get9ItemsItem"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfMailFolder0"]:
        """Get childFolders from users.

        Get childFolders from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~mail.models.Enum16]
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Enum17]
        :param expand: Expand related entities.
        :type expand: list[str or ~mail.models.Get9ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfMailFolder0 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~mail.models.CollectionOfMailFolder0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfMailFolder0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_child_folder.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                    'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfMailFolder0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_child_folder.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/childFolders'}  # type: ignore

    async def create_child_folder(
        self,
        user_id: str,
        mail_folder_id: str,
        id: Optional[str] = None,
        child_folder_count: Optional[int] = None,
        display_name: Optional[str] = None,
        parent_folder_id: Optional[str] = None,
        total_item_count: Optional[int] = None,
        unread_item_count: Optional[int] = None,
        child_folders: Optional[List["models.MicrosoftGraphMailFolder"]] = None,
        message_rules: Optional[List["models.MicrosoftGraphMessageRule"]] = None,
        messages: Optional[List["models.MicrosoftGraphMessage"]] = None,
        multi_value_extended_properties: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        single_value_extended_properties: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMailFolder":
        """Create new navigation property to childFolders for users.

        Create new navigation property to childFolders for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param id: Read-only.
        :type id: str
        :param child_folder_count: The number of immediate child mailFolders in the current mailFolder.
        :type child_folder_count: int
        :param display_name: The mailFolder's display name.
        :type display_name: str
        :param parent_folder_id: The unique identifier for the mailFolder's parent mailFolder.
        :type parent_folder_id: str
        :param total_item_count: The number of items in the mailFolder.
        :type total_item_count: int
        :param unread_item_count: The number of items in the mailFolder marked as unread.
        :type unread_item_count: int
        :param child_folders: The collection of child folders in the mailFolder.
        :type child_folders: list[~mail.models.MicrosoftGraphMailFolder]
        :param message_rules: The collection of rules that apply to the user's Inbox folder.
        :type message_rules: list[~mail.models.MicrosoftGraphMessageRule]
        :param messages: The collection of messages in the mailFolder.
        :type messages: list[~mail.models.MicrosoftGraphMessage]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the mailFolder. Read-only. Nullable.
        :type multi_value_extended_properties: list[~mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the mailFolder. Read-only. Nullable.
        :type single_value_extended_properties: list[~mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMailFolder, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphMailFolder
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMailFolder"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMailFolder(id=id, child_folder_count=child_folder_count, display_name=display_name, parent_folder_id=parent_folder_id, total_item_count=total_item_count, unread_item_count=unread_item_count, child_folders=child_folders, message_rules=message_rules, messages=messages, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_child_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMailFolder')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMailFolder', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_child_folder.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/childFolders'}  # type: ignore

    async def get_child_folder(
        self,
        user_id: str,
        mail_folder_id: str,
        mail_folder_id1: str,
        select: Optional[List[Union[str, "models.Enum19"]]] = None,
        expand: Optional[List[Union[str, "models.Get4ItemsItem"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMailFolder":
        """Get childFolders from users.

        Get childFolders from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param mail_folder_id1: key: id of mailFolder.
        :type mail_folder_id1: str
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Enum19]
        :param expand: Expand related entities.
        :type expand: list[str or ~mail.models.Get4ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMailFolder, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphMailFolder
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMailFolder"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_child_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'mailFolder-id1': self._serialize.url("mail_folder_id1", mail_folder_id1, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMailFolder', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_child_folder.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/childFolders/{mailFolder-id1}'}  # type: ignore

    async def update_child_folder(
        self,
        user_id: str,
        mail_folder_id: str,
        mail_folder_id1: str,
        id: Optional[str] = None,
        child_folder_count: Optional[int] = None,
        display_name: Optional[str] = None,
        parent_folder_id: Optional[str] = None,
        total_item_count: Optional[int] = None,
        unread_item_count: Optional[int] = None,
        child_folders: Optional[List["models.MicrosoftGraphMailFolder"]] = None,
        message_rules: Optional[List["models.MicrosoftGraphMessageRule"]] = None,
        messages: Optional[List["models.MicrosoftGraphMessage"]] = None,
        multi_value_extended_properties: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        single_value_extended_properties: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property childFolders in users.

        Update the navigation property childFolders in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param mail_folder_id1: key: id of mailFolder.
        :type mail_folder_id1: str
        :param id: Read-only.
        :type id: str
        :param child_folder_count: The number of immediate child mailFolders in the current mailFolder.
        :type child_folder_count: int
        :param display_name: The mailFolder's display name.
        :type display_name: str
        :param parent_folder_id: The unique identifier for the mailFolder's parent mailFolder.
        :type parent_folder_id: str
        :param total_item_count: The number of items in the mailFolder.
        :type total_item_count: int
        :param unread_item_count: The number of items in the mailFolder marked as unread.
        :type unread_item_count: int
        :param child_folders: The collection of child folders in the mailFolder.
        :type child_folders: list[~mail.models.MicrosoftGraphMailFolder]
        :param message_rules: The collection of rules that apply to the user's Inbox folder.
        :type message_rules: list[~mail.models.MicrosoftGraphMessageRule]
        :param messages: The collection of messages in the mailFolder.
        :type messages: list[~mail.models.MicrosoftGraphMessage]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the mailFolder. Read-only. Nullable.
        :type multi_value_extended_properties: list[~mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the mailFolder. Read-only. Nullable.
        :type single_value_extended_properties: list[~mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMailFolder(id=id, child_folder_count=child_folder_count, display_name=display_name, parent_folder_id=parent_folder_id, total_item_count=total_item_count, unread_item_count=unread_item_count, child_folders=child_folders, message_rules=message_rules, messages=messages, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_child_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'mailFolder-id1': self._serialize.url("mail_folder_id1", mail_folder_id1, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMailFolder')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_child_folder.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/childFolders/{mailFolder-id1}'}  # type: ignore

    async def delete_child_folder(
        self,
        user_id: str,
        mail_folder_id: str,
        mail_folder_id1: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property childFolders for users.

        Delete navigation property childFolders for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param mail_folder_id1: key: id of mailFolder.
        :type mail_folder_id1: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_child_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'mailFolder-id1': self._serialize.url("mail_folder_id1", mail_folder_id1, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_child_folder.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/childFolders/{mailFolder-id1}'}  # type: ignore

    def list_message_rule(
        self,
        user_id: str,
        mail_folder_id: str,
        orderby: Optional[List[Union[str, "models.Enum21"]]] = None,
        select: Optional[List[Union[str, "models.Enum22"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfMessageRule"]:
        """Get messageRules from users.

        Get messageRules from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~mail.models.Enum21]
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Enum22]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfMessageRule or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~mail.models.CollectionOfMessageRule]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfMessageRule"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_message_rule.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                    'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfMessageRule', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_message_rule.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/messageRules'}  # type: ignore

    async def create_message_rule(
        self,
        user_id: str,
        mail_folder_id: str,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        has_error: Optional[bool] = None,
        is_enabled: Optional[bool] = None,
        is_read_only: Optional[bool] = None,
        sequence: Optional[int] = None,
        body_contains: Optional[List[str]] = None,
        body_or_subject_contains: Optional[List[str]] = None,
        categories: Optional[List[str]] = None,
        from_addresses: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        has_attachments: Optional[bool] = None,
        header_contains: Optional[List[str]] = None,
        importance: Optional[Union[str, "models.MicrosoftGraphImportance"]] = None,
        is_approval_request: Optional[bool] = None,
        is_automatic_forward: Optional[bool] = None,
        is_automatic_reply: Optional[bool] = None,
        is_encrypted: Optional[bool] = None,
        is_meeting_request: Optional[bool] = None,
        is_meeting_response: Optional[bool] = None,
        is_non_delivery_report: Optional[bool] = None,
        is_permission_controlled: Optional[bool] = None,
        is_read_receipt: Optional[bool] = None,
        is_signed: Optional[bool] = None,
        is_voicemail: Optional[bool] = None,
        message_action_flag: Optional[Union[str, "models.MicrosoftGraphMessageActionFlag"]] = None,
        not_sent_to_me: Optional[bool] = None,
        recipient_contains: Optional[List[str]] = None,
        sender_contains: Optional[List[str]] = None,
        sensitivity: Optional[Union[str, "models.MicrosoftGraphSensitivity"]] = None,
        sent_cc_me: Optional[bool] = None,
        sent_only_to_me: Optional[bool] = None,
        sent_to_addresses: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        sent_to_me: Optional[bool] = None,
        sent_to_or_cc_me: Optional[bool] = None,
        subject_contains: Optional[List[str]] = None,
        within_size_range: Optional["models.MicrosoftGraphSizeRange"] = None,
        microsoft_graph_message_rule_predicates_body_contains: Optional[List[str]] = None,
        microsoft_graph_message_rule_predicates_body_or_subject_contains_body_or_subject_contains: Optional[List[str]] = None,
        microsoft_graph_message_rule_predicates_categories: Optional[List[str]] = None,
        microsoft_graph_message_rule_predicates_from_addresses: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        boolean_has_attachments: Optional[bool] = None,
        microsoft_graph_message_rule_predicates_header_contains: Optional[List[str]] = None,
        microsoft_graph_importance: Optional[Union[str, "models.MicrosoftGraphImportance"]] = None,
        is_approval_request: Optional[bool] = None,
        is_automatic_forward: Optional[bool] = None,
        is_automatic_reply: Optional[bool] = None,
        is_encrypted: Optional[bool] = None,
        is_meeting_request: Optional[bool] = None,
        is_meeting_response: Optional[bool] = None,
        is_non_delivery_report: Optional[bool] = None,
        is_permission_controlled: Optional[bool] = None,
        is_read_receipt: Optional[bool] = None,
        is_signed: Optional[bool] = None,
        is_voicemail: Optional[bool] = None,
        microsoft_graph_message_action_flag_message_action_flag: Optional[Union[str, "models.MicrosoftGraphMessageActionFlag"]] = None,
        boolean_not_sent_to_me: Optional[bool] = None,
        microsoft_graph_message_rule_predicates_recipient_contains: Optional[List[str]] = None,
        microsoft_graph_message_rule_predicates_sender_contains: Optional[List[str]] = None,
        microsoft_graph_sensitivity: Optional[Union[str, "models.MicrosoftGraphSensitivity"]] = None,
        boolean_sent_cc_me: Optional[bool] = None,
        boolean_sent_only_to_me: Optional[bool] = None,
        microsoft_graph_message_rule_predicates_sent_to_addresses_sent_to_addresses: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        boolean_sent_to_me: Optional[bool] = None,
        boolean_sent_to_or_cc_me: Optional[bool] = None,
        microsoft_graph_message_rule_predicates_subject_contains: Optional[List[str]] = None,
        microsoft_graph_size_range_within_size_range: Optional["models.MicrosoftGraphSizeRange"] = None,
        assign_categories: Optional[List[str]] = None,
        copy_to_folder: Optional[str] = None,
        delete: Optional[bool] = None,
        forward_as_attachment_to: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        forward_to: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        mark_as_read: Optional[bool] = None,
        mark_importance: Optional[Union[str, "models.MicrosoftGraphImportance"]] = None,
        move_to_folder: Optional[str] = None,
        permanent_delete: Optional[bool] = None,
        redirect_to: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        stop_processing_rules: Optional[bool] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMessageRule":
        """Create new navigation property to messageRules for users.

        Create new navigation property to messageRules for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: The display name of the rule.
        :type display_name: str
        :param has_error: Indicates whether the rule is in an error condition. Read-only.
        :type has_error: bool
        :param is_enabled: Indicates whether the rule is enabled to be applied to messages.
        :type is_enabled: bool
        :param is_read_only: Indicates if the rule is read-only and cannot be modified or deleted by
         the rules REST API.
        :type is_read_only: bool
        :param sequence: Indicates the order in which the rule is executed, among other rules.
        :type sequence: int
        :param body_contains: Represents the strings that should appear in the body of an incoming
         message in order for the condition or exception to apply.
        :type body_contains: list[str]
        :param body_or_subject_contains: Represents the strings that should appear in the body or
         subject of an incoming message in order for the condition or exception to apply.
        :type body_or_subject_contains: list[str]
        :param categories: Represents the categories that an incoming message should be labeled with in
         order for the condition or exception to apply.
        :type categories: list[str]
        :param from_addresses: Represents the specific sender email addresses of an incoming message in
         order for the condition or exception to apply.
        :type from_addresses: list[~mail.models.MicrosoftGraphRecipient]
        :param has_attachments: Indicates whether an incoming message must have attachments in order
         for the condition or exception to apply.
        :type has_attachments: bool
        :param header_contains: Represents the strings that appear in the headers of an incoming
         message in order for the condition or exception to apply.
        :type header_contains: list[str]
        :param importance:
        :type importance: str or ~mail.models.MicrosoftGraphImportance
        :param is_approval_request: Indicates whether an incoming message must be an approval request
         in order for the condition or exception to apply.
        :type is_approval_request: bool
        :param is_automatic_forward: Indicates whether an incoming message must be automatically
         forwarded in order for the condition or exception to apply.
        :type is_automatic_forward: bool
        :param is_automatic_reply: Indicates whether an incoming message must be an auto reply in order
         for the condition or exception to apply.
        :type is_automatic_reply: bool
        :param is_encrypted: Indicates whether an incoming message must be encrypted in order for the
         condition or exception to apply.
        :type is_encrypted: bool
        :param is_meeting_request: Indicates whether an incoming message must be a meeting request in
         order for the condition or exception to apply.
        :type is_meeting_request: bool
        :param is_meeting_response: Indicates whether an incoming message must be a meeting response in
         order for the condition or exception to apply.
        :type is_meeting_response: bool
        :param is_non_delivery_report: Indicates whether an incoming message must be a non-delivery
         report in order for the condition or exception to apply.
        :type is_non_delivery_report: bool
        :param is_permission_controlled: Indicates whether an incoming message must be permission
         controlled (RMS-protected) in order for the condition or exception to apply.
        :type is_permission_controlled: bool
        :param is_read_receipt: Indicates whether an incoming message must be a read receipt in order
         for the condition or exception to apply.
        :type is_read_receipt: bool
        :param is_signed: Indicates whether an incoming message must be S/MIME-signed in order for the
         condition or exception to apply.
        :type is_signed: bool
        :param is_voicemail: Indicates whether an incoming message must be a voice mail in order for
         the condition or exception to apply.
        :type is_voicemail: bool
        :param message_action_flag:
        :type message_action_flag: str or ~mail.models.MicrosoftGraphMessageActionFlag
        :param not_sent_to_me: Indicates whether the owner of the mailbox must not be a recipient of an
         incoming message in order for the condition or exception to apply.
        :type not_sent_to_me: bool
        :param recipient_contains: Represents the strings that appear in either the toRecipients or
         ccRecipients properties of an incoming message in order for the condition or exception to
         apply.
        :type recipient_contains: list[str]
        :param sender_contains: Represents the strings that appear in the from property of an incoming
         message in order for the condition or exception to apply.
        :type sender_contains: list[str]
        :param sensitivity:
        :type sensitivity: str or ~mail.models.MicrosoftGraphSensitivity
        :param sent_cc_me: Indicates whether the owner of the mailbox must be in the ccRecipients
         property of an incoming message in order for the condition or exception to apply.
        :type sent_cc_me: bool
        :param sent_only_to_me: Indicates whether the owner of the mailbox must be the only recipient
         in an incoming message in order for the condition or exception to apply.
        :type sent_only_to_me: bool
        :param sent_to_addresses: Represents the email addresses that an incoming message must have
         been sent to in order for the condition or exception to apply.
        :type sent_to_addresses: list[~mail.models.MicrosoftGraphRecipient]
        :param sent_to_me: Indicates whether the owner of the mailbox must be in the toRecipients
         property of an incoming message in order for the condition or exception to apply.
        :type sent_to_me: bool
        :param sent_to_or_cc_me: Indicates whether the owner of the mailbox must be in either a
         toRecipients or ccRecipients property of an incoming message in order for the condition or
         exception to apply.
        :type sent_to_or_cc_me: bool
        :param subject_contains: Represents the strings that appear in the subject of an incoming
         message in order for the condition or exception to apply.
        :type subject_contains: list[str]
        :param within_size_range: sizeRange.
        :type within_size_range: ~mail.models.MicrosoftGraphSizeRange
        :param microsoft_graph_message_rule_predicates_body_contains: Represents the strings that
         should appear in the body of an incoming message in order for the condition or exception to
         apply.
        :type microsoft_graph_message_rule_predicates_body_contains: list[str]
        :param
         microsoft_graph_message_rule_predicates_body_or_subject_contains_body_or_subject_contains:
         Represents the strings that should appear in the body or subject of an incoming message in
         order for the condition or exception to apply.
        :type microsoft_graph_message_rule_predicates_body_or_subject_contains_body_or_subject_contains: list[str]
        :param microsoft_graph_message_rule_predicates_categories: Represents the categories that an
         incoming message should be labeled with in order for the condition or exception to apply.
        :type microsoft_graph_message_rule_predicates_categories: list[str]
        :param microsoft_graph_message_rule_predicates_from_addresses: Represents the specific sender
         email addresses of an incoming message in order for the condition or exception to apply.
        :type microsoft_graph_message_rule_predicates_from_addresses: list[~mail.models.MicrosoftGraphRecipient]
        :param boolean_has_attachments: Indicates whether an incoming message must have attachments in
         order for the condition or exception to apply.
        :type boolean_has_attachments: bool
        :param microsoft_graph_message_rule_predicates_header_contains: Represents the strings that
         appear in the headers of an incoming message in order for the condition or exception to apply.
        :type microsoft_graph_message_rule_predicates_header_contains: list[str]
        :param microsoft_graph_importance:
        :type microsoft_graph_importance: str or ~mail.models.MicrosoftGraphImportance
        :param is_approval_request: Indicates whether an incoming message must be an approval request
         in order for the condition or exception to apply.
        :type is_approval_request: bool
        :param is_automatic_forward: Indicates whether an incoming message must be automatically
         forwarded in order for the condition or exception to apply.
        :type is_automatic_forward: bool
        :param is_automatic_reply: Indicates whether an incoming message must be an auto reply in order
         for the condition or exception to apply.
        :type is_automatic_reply: bool
        :param is_encrypted: Indicates whether an incoming message must be encrypted in order for the
         condition or exception to apply.
        :type is_encrypted: bool
        :param is_meeting_request: Indicates whether an incoming message must be a meeting request in
         order for the condition or exception to apply.
        :type is_meeting_request: bool
        :param is_meeting_response: Indicates whether an incoming message must be a meeting response in
         order for the condition or exception to apply.
        :type is_meeting_response: bool
        :param is_non_delivery_report: Indicates whether an incoming message must be a non-delivery
         report in order for the condition or exception to apply.
        :type is_non_delivery_report: bool
        :param is_permission_controlled: Indicates whether an incoming message must be permission
         controlled (RMS-protected) in order for the condition or exception to apply.
        :type is_permission_controlled: bool
        :param is_read_receipt: Indicates whether an incoming message must be a read receipt in order
         for the condition or exception to apply.
        :type is_read_receipt: bool
        :param is_signed: Indicates whether an incoming message must be S/MIME-signed in order for the
         condition or exception to apply.
        :type is_signed: bool
        :param is_voicemail: Indicates whether an incoming message must be a voice mail in order for
         the condition or exception to apply.
        :type is_voicemail: bool
        :param microsoft_graph_message_action_flag_message_action_flag:
        :type microsoft_graph_message_action_flag_message_action_flag: str or ~mail.models.MicrosoftGraphMessageActionFlag
        :param boolean_not_sent_to_me: Indicates whether the owner of the mailbox must not be a
         recipient of an incoming message in order for the condition or exception to apply.
        :type boolean_not_sent_to_me: bool
        :param microsoft_graph_message_rule_predicates_recipient_contains: Represents the strings that
         appear in either the toRecipients or ccRecipients properties of an incoming message in order
         for the condition or exception to apply.
        :type microsoft_graph_message_rule_predicates_recipient_contains: list[str]
        :param microsoft_graph_message_rule_predicates_sender_contains: Represents the strings that
         appear in the from property of an incoming message in order for the condition or exception to
         apply.
        :type microsoft_graph_message_rule_predicates_sender_contains: list[str]
        :param microsoft_graph_sensitivity:
        :type microsoft_graph_sensitivity: str or ~mail.models.MicrosoftGraphSensitivity
        :param boolean_sent_cc_me: Indicates whether the owner of the mailbox must be in the
         ccRecipients property of an incoming message in order for the condition or exception to apply.
        :type boolean_sent_cc_me: bool
        :param boolean_sent_only_to_me: Indicates whether the owner of the mailbox must be the only
         recipient in an incoming message in order for the condition or exception to apply.
        :type boolean_sent_only_to_me: bool
        :param microsoft_graph_message_rule_predicates_sent_to_addresses_sent_to_addresses: Represents
         the email addresses that an incoming message must have been sent to in order for the condition
         or exception to apply.
        :type microsoft_graph_message_rule_predicates_sent_to_addresses_sent_to_addresses: list[~mail.models.MicrosoftGraphRecipient]
        :param boolean_sent_to_me: Indicates whether the owner of the mailbox must be in the
         toRecipients property of an incoming message in order for the condition or exception to apply.
        :type boolean_sent_to_me: bool
        :param boolean_sent_to_or_cc_me: Indicates whether the owner of the mailbox must be in either a
         toRecipients or ccRecipients property of an incoming message in order for the condition or
         exception to apply.
        :type boolean_sent_to_or_cc_me: bool
        :param microsoft_graph_message_rule_predicates_subject_contains: Represents the strings that
         appear in the subject of an incoming message in order for the condition or exception to apply.
        :type microsoft_graph_message_rule_predicates_subject_contains: list[str]
        :param microsoft_graph_size_range_within_size_range: sizeRange.
        :type microsoft_graph_size_range_within_size_range: ~mail.models.MicrosoftGraphSizeRange
        :param assign_categories: A list of categories to be assigned to a message.
        :type assign_categories: list[str]
        :param copy_to_folder: The ID of a folder that a message is to be copied to.
        :type copy_to_folder: str
        :param delete: Indicates whether a message should be moved to the Deleted Items folder.
        :type delete: bool
        :param forward_as_attachment_to: The email addresses of the recipients to which a message
         should be forwarded as an attachment.
        :type forward_as_attachment_to: list[~mail.models.MicrosoftGraphRecipient]
        :param forward_to: The email addresses of the recipients to which a message should be
         forwarded.
        :type forward_to: list[~mail.models.MicrosoftGraphRecipient]
        :param mark_as_read: Indicates whether a message should be marked as read.
        :type mark_as_read: bool
        :param mark_importance:
        :type mark_importance: str or ~mail.models.MicrosoftGraphImportance
        :param move_to_folder: The ID of the folder that a message will be moved to.
        :type move_to_folder: str
        :param permanent_delete: Indicates whether a message should be permanently deleted and not
         saved to the Deleted Items folder.
        :type permanent_delete: bool
        :param redirect_to: The email addresses to which a message should be redirected.
        :type redirect_to: list[~mail.models.MicrosoftGraphRecipient]
        :param stop_processing_rules: Indicates whether subsequent rules should be evaluated.
        :type stop_processing_rules: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMessageRule, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphMessageRule
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMessageRule"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMessageRule(id=id, display_name=display_name, has_error=has_error, is_enabled=is_enabled, is_read_only=is_read_only, sequence=sequence, body_contains_exceptions_body_contains=body_contains, body_or_subject_contains_exceptions_body_or_subject_contains=body_or_subject_contains, categories_exceptions_categories=categories, from_addresses_exceptions_from_addresses=from_addresses, has_attachments_exceptions_has_attachments=has_attachments, header_contains_exceptions_header_contains=header_contains, importance_exceptions_importance=importance, is_approval_request_exceptions_is_approval_request=is_approval_request, is_automatic_forward_exceptions_is_automatic_forward=is_automatic_forward, is_automatic_reply_exceptions_is_automatic_reply=is_automatic_reply, is_encrypted_exceptions_is_encrypted=is_encrypted, is_meeting_request_exceptions_is_meeting_request=is_meeting_request, is_meeting_response_exceptions_is_meeting_response=is_meeting_response, is_non_delivery_report_exceptions_is_non_delivery_report=is_non_delivery_report, is_permission_controlled_exceptions_is_permission_controlled=is_permission_controlled, is_read_receipt_exceptions_is_read_receipt=is_read_receipt, is_signed_exceptions_is_signed=is_signed, is_voicemail_exceptions_is_voicemail=is_voicemail, message_action_flag_exceptions_message_action_flag=message_action_flag, not_sent_to_me_exceptions_not_sent_to_me=not_sent_to_me, recipient_contains_exceptions_recipient_contains=recipient_contains, sender_contains_exceptions_sender_contains=sender_contains, sensitivity_exceptions_sensitivity=sensitivity, sent_cc_me_exceptions_sent_cc_me=sent_cc_me, sent_only_to_me_exceptions_sent_only_to_me=sent_only_to_me, sent_to_addresses_exceptions_sent_to_addresses=sent_to_addresses, sent_to_me_exceptions_sent_to_me=sent_to_me, sent_to_or_cc_me_exceptions_sent_to_or_cc_me=sent_to_or_cc_me, subject_contains_exceptions_subject_contains=subject_contains, within_size_range_exceptions_within_size_range=within_size_range, body_contains_conditions_body_contains=microsoft_graph_message_rule_predicates_body_contains, body_or_subject_contains_conditions_body_or_subject_contains=microsoft_graph_message_rule_predicates_body_or_subject_contains_body_or_subject_contains, categories_conditions_categories=microsoft_graph_message_rule_predicates_categories, from_addresses_conditions_from_addresses=microsoft_graph_message_rule_predicates_from_addresses, has_attachments_conditions_has_attachments=boolean_has_attachments, header_contains_conditions_header_contains=microsoft_graph_message_rule_predicates_header_contains, importance_conditions_importance=microsoft_graph_importance, is_approval_request_conditions_is_approval_request=is_approval_request, is_automatic_forward_conditions_is_automatic_forward=is_automatic_forward, is_automatic_reply_conditions_is_automatic_reply=is_automatic_reply, is_encrypted_conditions_is_encrypted=is_encrypted, is_meeting_request_conditions_is_meeting_request=is_meeting_request, is_meeting_response_conditions_is_meeting_response=is_meeting_response, is_non_delivery_report_conditions_is_non_delivery_report=is_non_delivery_report, is_permission_controlled_conditions_is_permission_controlled=is_permission_controlled, is_read_receipt_conditions_is_read_receipt=is_read_receipt, is_signed_conditions_is_signed=is_signed, is_voicemail_conditions_is_voicemail=is_voicemail, message_action_flag_conditions_message_action_flag=microsoft_graph_message_action_flag_message_action_flag, not_sent_to_me_conditions_not_sent_to_me=boolean_not_sent_to_me, recipient_contains_conditions_recipient_contains=microsoft_graph_message_rule_predicates_recipient_contains, sender_contains_conditions_sender_contains=microsoft_graph_message_rule_predicates_sender_contains, sensitivity_conditions_sensitivity=microsoft_graph_sensitivity, sent_cc_me_conditions_sent_cc_me=boolean_sent_cc_me, sent_only_to_me_conditions_sent_only_to_me=boolean_sent_only_to_me, sent_to_addresses_conditions_sent_to_addresses=microsoft_graph_message_rule_predicates_sent_to_addresses_sent_to_addresses, sent_to_me_conditions_sent_to_me=boolean_sent_to_me, sent_to_or_cc_me_conditions_sent_to_or_cc_me=boolean_sent_to_or_cc_me, subject_contains_conditions_subject_contains=microsoft_graph_message_rule_predicates_subject_contains, within_size_range_conditions_within_size_range=microsoft_graph_size_range_within_size_range, assign_categories=assign_categories, copy_to_folder=copy_to_folder, delete=delete, forward_as_attachment_to=forward_as_attachment_to, forward_to=forward_to, mark_as_read=mark_as_read, mark_importance=mark_importance, move_to_folder=move_to_folder, permanent_delete=permanent_delete, redirect_to=redirect_to, stop_processing_rules=stop_processing_rules)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_message_rule.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMessageRule')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMessageRule', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_message_rule.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/messageRules'}  # type: ignore

    async def get_message_rule(
        self,
        user_id: str,
        mail_folder_id: str,
        message_rule_id: str,
        select: Optional[List[Union[str, "models.Enum23"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMessageRule":
        """Get messageRules from users.

        Get messageRules from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param message_rule_id: key: id of messageRule.
        :type message_rule_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Enum23]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMessageRule, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphMessageRule
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMessageRule"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_message_rule.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'messageRule-id': self._serialize.url("message_rule_id", message_rule_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMessageRule', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_message_rule.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/messageRules/{messageRule-id}'}  # type: ignore

    async def update_message_rule(
        self,
        user_id: str,
        mail_folder_id: str,
        message_rule_id: str,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        has_error: Optional[bool] = None,
        is_enabled: Optional[bool] = None,
        is_read_only: Optional[bool] = None,
        sequence: Optional[int] = None,
        body_contains: Optional[List[str]] = None,
        body_or_subject_contains: Optional[List[str]] = None,
        categories: Optional[List[str]] = None,
        from_addresses: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        has_attachments: Optional[bool] = None,
        header_contains: Optional[List[str]] = None,
        importance: Optional[Union[str, "models.MicrosoftGraphImportance"]] = None,
        is_approval_request: Optional[bool] = None,
        is_automatic_forward: Optional[bool] = None,
        is_automatic_reply: Optional[bool] = None,
        is_encrypted: Optional[bool] = None,
        is_meeting_request: Optional[bool] = None,
        is_meeting_response: Optional[bool] = None,
        is_non_delivery_report: Optional[bool] = None,
        is_permission_controlled: Optional[bool] = None,
        is_read_receipt: Optional[bool] = None,
        is_signed: Optional[bool] = None,
        is_voicemail: Optional[bool] = None,
        message_action_flag: Optional[Union[str, "models.MicrosoftGraphMessageActionFlag"]] = None,
        not_sent_to_me: Optional[bool] = None,
        recipient_contains: Optional[List[str]] = None,
        sender_contains: Optional[List[str]] = None,
        sensitivity: Optional[Union[str, "models.MicrosoftGraphSensitivity"]] = None,
        sent_cc_me: Optional[bool] = None,
        sent_only_to_me: Optional[bool] = None,
        sent_to_addresses: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        sent_to_me: Optional[bool] = None,
        sent_to_or_cc_me: Optional[bool] = None,
        subject_contains: Optional[List[str]] = None,
        within_size_range: Optional["models.MicrosoftGraphSizeRange"] = None,
        microsoft_graph_message_rule_predicates_body_contains: Optional[List[str]] = None,
        microsoft_graph_message_rule_predicates_body_or_subject_contains_body_or_subject_contains: Optional[List[str]] = None,
        microsoft_graph_message_rule_predicates_categories: Optional[List[str]] = None,
        microsoft_graph_message_rule_predicates_from_addresses: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        boolean_has_attachments: Optional[bool] = None,
        microsoft_graph_message_rule_predicates_header_contains: Optional[List[str]] = None,
        microsoft_graph_importance: Optional[Union[str, "models.MicrosoftGraphImportance"]] = None,
        is_approval_request: Optional[bool] = None,
        is_automatic_forward: Optional[bool] = None,
        is_automatic_reply: Optional[bool] = None,
        is_encrypted: Optional[bool] = None,
        is_meeting_request: Optional[bool] = None,
        is_meeting_response: Optional[bool] = None,
        is_non_delivery_report: Optional[bool] = None,
        is_permission_controlled: Optional[bool] = None,
        is_read_receipt: Optional[bool] = None,
        is_signed: Optional[bool] = None,
        is_voicemail: Optional[bool] = None,
        microsoft_graph_message_action_flag_message_action_flag: Optional[Union[str, "models.MicrosoftGraphMessageActionFlag"]] = None,
        boolean_not_sent_to_me: Optional[bool] = None,
        microsoft_graph_message_rule_predicates_recipient_contains: Optional[List[str]] = None,
        microsoft_graph_message_rule_predicates_sender_contains: Optional[List[str]] = None,
        microsoft_graph_sensitivity: Optional[Union[str, "models.MicrosoftGraphSensitivity"]] = None,
        boolean_sent_cc_me: Optional[bool] = None,
        boolean_sent_only_to_me: Optional[bool] = None,
        microsoft_graph_message_rule_predicates_sent_to_addresses_sent_to_addresses: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        boolean_sent_to_me: Optional[bool] = None,
        boolean_sent_to_or_cc_me: Optional[bool] = None,
        microsoft_graph_message_rule_predicates_subject_contains: Optional[List[str]] = None,
        microsoft_graph_size_range_within_size_range: Optional["models.MicrosoftGraphSizeRange"] = None,
        assign_categories: Optional[List[str]] = None,
        copy_to_folder: Optional[str] = None,
        delete: Optional[bool] = None,
        forward_as_attachment_to: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        forward_to: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        mark_as_read: Optional[bool] = None,
        mark_importance: Optional[Union[str, "models.MicrosoftGraphImportance"]] = None,
        move_to_folder: Optional[str] = None,
        permanent_delete: Optional[bool] = None,
        redirect_to: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        stop_processing_rules: Optional[bool] = None,
        **kwargs
    ) -> None:
        """Update the navigation property messageRules in users.

        Update the navigation property messageRules in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param message_rule_id: key: id of messageRule.
        :type message_rule_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: The display name of the rule.
        :type display_name: str
        :param has_error: Indicates whether the rule is in an error condition. Read-only.
        :type has_error: bool
        :param is_enabled: Indicates whether the rule is enabled to be applied to messages.
        :type is_enabled: bool
        :param is_read_only: Indicates if the rule is read-only and cannot be modified or deleted by
         the rules REST API.
        :type is_read_only: bool
        :param sequence: Indicates the order in which the rule is executed, among other rules.
        :type sequence: int
        :param body_contains: Represents the strings that should appear in the body of an incoming
         message in order for the condition or exception to apply.
        :type body_contains: list[str]
        :param body_or_subject_contains: Represents the strings that should appear in the body or
         subject of an incoming message in order for the condition or exception to apply.
        :type body_or_subject_contains: list[str]
        :param categories: Represents the categories that an incoming message should be labeled with in
         order for the condition or exception to apply.
        :type categories: list[str]
        :param from_addresses: Represents the specific sender email addresses of an incoming message in
         order for the condition or exception to apply.
        :type from_addresses: list[~mail.models.MicrosoftGraphRecipient]
        :param has_attachments: Indicates whether an incoming message must have attachments in order
         for the condition or exception to apply.
        :type has_attachments: bool
        :param header_contains: Represents the strings that appear in the headers of an incoming
         message in order for the condition or exception to apply.
        :type header_contains: list[str]
        :param importance:
        :type importance: str or ~mail.models.MicrosoftGraphImportance
        :param is_approval_request: Indicates whether an incoming message must be an approval request
         in order for the condition or exception to apply.
        :type is_approval_request: bool
        :param is_automatic_forward: Indicates whether an incoming message must be automatically
         forwarded in order for the condition or exception to apply.
        :type is_automatic_forward: bool
        :param is_automatic_reply: Indicates whether an incoming message must be an auto reply in order
         for the condition or exception to apply.
        :type is_automatic_reply: bool
        :param is_encrypted: Indicates whether an incoming message must be encrypted in order for the
         condition or exception to apply.
        :type is_encrypted: bool
        :param is_meeting_request: Indicates whether an incoming message must be a meeting request in
         order for the condition or exception to apply.
        :type is_meeting_request: bool
        :param is_meeting_response: Indicates whether an incoming message must be a meeting response in
         order for the condition or exception to apply.
        :type is_meeting_response: bool
        :param is_non_delivery_report: Indicates whether an incoming message must be a non-delivery
         report in order for the condition or exception to apply.
        :type is_non_delivery_report: bool
        :param is_permission_controlled: Indicates whether an incoming message must be permission
         controlled (RMS-protected) in order for the condition or exception to apply.
        :type is_permission_controlled: bool
        :param is_read_receipt: Indicates whether an incoming message must be a read receipt in order
         for the condition or exception to apply.
        :type is_read_receipt: bool
        :param is_signed: Indicates whether an incoming message must be S/MIME-signed in order for the
         condition or exception to apply.
        :type is_signed: bool
        :param is_voicemail: Indicates whether an incoming message must be a voice mail in order for
         the condition or exception to apply.
        :type is_voicemail: bool
        :param message_action_flag:
        :type message_action_flag: str or ~mail.models.MicrosoftGraphMessageActionFlag
        :param not_sent_to_me: Indicates whether the owner of the mailbox must not be a recipient of an
         incoming message in order for the condition or exception to apply.
        :type not_sent_to_me: bool
        :param recipient_contains: Represents the strings that appear in either the toRecipients or
         ccRecipients properties of an incoming message in order for the condition or exception to
         apply.
        :type recipient_contains: list[str]
        :param sender_contains: Represents the strings that appear in the from property of an incoming
         message in order for the condition or exception to apply.
        :type sender_contains: list[str]
        :param sensitivity:
        :type sensitivity: str or ~mail.models.MicrosoftGraphSensitivity
        :param sent_cc_me: Indicates whether the owner of the mailbox must be in the ccRecipients
         property of an incoming message in order for the condition or exception to apply.
        :type sent_cc_me: bool
        :param sent_only_to_me: Indicates whether the owner of the mailbox must be the only recipient
         in an incoming message in order for the condition or exception to apply.
        :type sent_only_to_me: bool
        :param sent_to_addresses: Represents the email addresses that an incoming message must have
         been sent to in order for the condition or exception to apply.
        :type sent_to_addresses: list[~mail.models.MicrosoftGraphRecipient]
        :param sent_to_me: Indicates whether the owner of the mailbox must be in the toRecipients
         property of an incoming message in order for the condition or exception to apply.
        :type sent_to_me: bool
        :param sent_to_or_cc_me: Indicates whether the owner of the mailbox must be in either a
         toRecipients or ccRecipients property of an incoming message in order for the condition or
         exception to apply.
        :type sent_to_or_cc_me: bool
        :param subject_contains: Represents the strings that appear in the subject of an incoming
         message in order for the condition or exception to apply.
        :type subject_contains: list[str]
        :param within_size_range: sizeRange.
        :type within_size_range: ~mail.models.MicrosoftGraphSizeRange
        :param microsoft_graph_message_rule_predicates_body_contains: Represents the strings that
         should appear in the body of an incoming message in order for the condition or exception to
         apply.
        :type microsoft_graph_message_rule_predicates_body_contains: list[str]
        :param
         microsoft_graph_message_rule_predicates_body_or_subject_contains_body_or_subject_contains:
         Represents the strings that should appear in the body or subject of an incoming message in
         order for the condition or exception to apply.
        :type microsoft_graph_message_rule_predicates_body_or_subject_contains_body_or_subject_contains: list[str]
        :param microsoft_graph_message_rule_predicates_categories: Represents the categories that an
         incoming message should be labeled with in order for the condition or exception to apply.
        :type microsoft_graph_message_rule_predicates_categories: list[str]
        :param microsoft_graph_message_rule_predicates_from_addresses: Represents the specific sender
         email addresses of an incoming message in order for the condition or exception to apply.
        :type microsoft_graph_message_rule_predicates_from_addresses: list[~mail.models.MicrosoftGraphRecipient]
        :param boolean_has_attachments: Indicates whether an incoming message must have attachments in
         order for the condition or exception to apply.
        :type boolean_has_attachments: bool
        :param microsoft_graph_message_rule_predicates_header_contains: Represents the strings that
         appear in the headers of an incoming message in order for the condition or exception to apply.
        :type microsoft_graph_message_rule_predicates_header_contains: list[str]
        :param microsoft_graph_importance:
        :type microsoft_graph_importance: str or ~mail.models.MicrosoftGraphImportance
        :param is_approval_request: Indicates whether an incoming message must be an approval request
         in order for the condition or exception to apply.
        :type is_approval_request: bool
        :param is_automatic_forward: Indicates whether an incoming message must be automatically
         forwarded in order for the condition or exception to apply.
        :type is_automatic_forward: bool
        :param is_automatic_reply: Indicates whether an incoming message must be an auto reply in order
         for the condition or exception to apply.
        :type is_automatic_reply: bool
        :param is_encrypted: Indicates whether an incoming message must be encrypted in order for the
         condition or exception to apply.
        :type is_encrypted: bool
        :param is_meeting_request: Indicates whether an incoming message must be a meeting request in
         order for the condition or exception to apply.
        :type is_meeting_request: bool
        :param is_meeting_response: Indicates whether an incoming message must be a meeting response in
         order for the condition or exception to apply.
        :type is_meeting_response: bool
        :param is_non_delivery_report: Indicates whether an incoming message must be a non-delivery
         report in order for the condition or exception to apply.
        :type is_non_delivery_report: bool
        :param is_permission_controlled: Indicates whether an incoming message must be permission
         controlled (RMS-protected) in order for the condition or exception to apply.
        :type is_permission_controlled: bool
        :param is_read_receipt: Indicates whether an incoming message must be a read receipt in order
         for the condition or exception to apply.
        :type is_read_receipt: bool
        :param is_signed: Indicates whether an incoming message must be S/MIME-signed in order for the
         condition or exception to apply.
        :type is_signed: bool
        :param is_voicemail: Indicates whether an incoming message must be a voice mail in order for
         the condition or exception to apply.
        :type is_voicemail: bool
        :param microsoft_graph_message_action_flag_message_action_flag:
        :type microsoft_graph_message_action_flag_message_action_flag: str or ~mail.models.MicrosoftGraphMessageActionFlag
        :param boolean_not_sent_to_me: Indicates whether the owner of the mailbox must not be a
         recipient of an incoming message in order for the condition or exception to apply.
        :type boolean_not_sent_to_me: bool
        :param microsoft_graph_message_rule_predicates_recipient_contains: Represents the strings that
         appear in either the toRecipients or ccRecipients properties of an incoming message in order
         for the condition or exception to apply.
        :type microsoft_graph_message_rule_predicates_recipient_contains: list[str]
        :param microsoft_graph_message_rule_predicates_sender_contains: Represents the strings that
         appear in the from property of an incoming message in order for the condition or exception to
         apply.
        :type microsoft_graph_message_rule_predicates_sender_contains: list[str]
        :param microsoft_graph_sensitivity:
        :type microsoft_graph_sensitivity: str or ~mail.models.MicrosoftGraphSensitivity
        :param boolean_sent_cc_me: Indicates whether the owner of the mailbox must be in the
         ccRecipients property of an incoming message in order for the condition or exception to apply.
        :type boolean_sent_cc_me: bool
        :param boolean_sent_only_to_me: Indicates whether the owner of the mailbox must be the only
         recipient in an incoming message in order for the condition or exception to apply.
        :type boolean_sent_only_to_me: bool
        :param microsoft_graph_message_rule_predicates_sent_to_addresses_sent_to_addresses: Represents
         the email addresses that an incoming message must have been sent to in order for the condition
         or exception to apply.
        :type microsoft_graph_message_rule_predicates_sent_to_addresses_sent_to_addresses: list[~mail.models.MicrosoftGraphRecipient]
        :param boolean_sent_to_me: Indicates whether the owner of the mailbox must be in the
         toRecipients property of an incoming message in order for the condition or exception to apply.
        :type boolean_sent_to_me: bool
        :param boolean_sent_to_or_cc_me: Indicates whether the owner of the mailbox must be in either a
         toRecipients or ccRecipients property of an incoming message in order for the condition or
         exception to apply.
        :type boolean_sent_to_or_cc_me: bool
        :param microsoft_graph_message_rule_predicates_subject_contains: Represents the strings that
         appear in the subject of an incoming message in order for the condition or exception to apply.
        :type microsoft_graph_message_rule_predicates_subject_contains: list[str]
        :param microsoft_graph_size_range_within_size_range: sizeRange.
        :type microsoft_graph_size_range_within_size_range: ~mail.models.MicrosoftGraphSizeRange
        :param assign_categories: A list of categories to be assigned to a message.
        :type assign_categories: list[str]
        :param copy_to_folder: The ID of a folder that a message is to be copied to.
        :type copy_to_folder: str
        :param delete: Indicates whether a message should be moved to the Deleted Items folder.
        :type delete: bool
        :param forward_as_attachment_to: The email addresses of the recipients to which a message
         should be forwarded as an attachment.
        :type forward_as_attachment_to: list[~mail.models.MicrosoftGraphRecipient]
        :param forward_to: The email addresses of the recipients to which a message should be
         forwarded.
        :type forward_to: list[~mail.models.MicrosoftGraphRecipient]
        :param mark_as_read: Indicates whether a message should be marked as read.
        :type mark_as_read: bool
        :param mark_importance:
        :type mark_importance: str or ~mail.models.MicrosoftGraphImportance
        :param move_to_folder: The ID of the folder that a message will be moved to.
        :type move_to_folder: str
        :param permanent_delete: Indicates whether a message should be permanently deleted and not
         saved to the Deleted Items folder.
        :type permanent_delete: bool
        :param redirect_to: The email addresses to which a message should be redirected.
        :type redirect_to: list[~mail.models.MicrosoftGraphRecipient]
        :param stop_processing_rules: Indicates whether subsequent rules should be evaluated.
        :type stop_processing_rules: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMessageRule(id=id, display_name=display_name, has_error=has_error, is_enabled=is_enabled, is_read_only=is_read_only, sequence=sequence, body_contains_exceptions_body_contains=body_contains, body_or_subject_contains_exceptions_body_or_subject_contains=body_or_subject_contains, categories_exceptions_categories=categories, from_addresses_exceptions_from_addresses=from_addresses, has_attachments_exceptions_has_attachments=has_attachments, header_contains_exceptions_header_contains=header_contains, importance_exceptions_importance=importance, is_approval_request_exceptions_is_approval_request=is_approval_request, is_automatic_forward_exceptions_is_automatic_forward=is_automatic_forward, is_automatic_reply_exceptions_is_automatic_reply=is_automatic_reply, is_encrypted_exceptions_is_encrypted=is_encrypted, is_meeting_request_exceptions_is_meeting_request=is_meeting_request, is_meeting_response_exceptions_is_meeting_response=is_meeting_response, is_non_delivery_report_exceptions_is_non_delivery_report=is_non_delivery_report, is_permission_controlled_exceptions_is_permission_controlled=is_permission_controlled, is_read_receipt_exceptions_is_read_receipt=is_read_receipt, is_signed_exceptions_is_signed=is_signed, is_voicemail_exceptions_is_voicemail=is_voicemail, message_action_flag_exceptions_message_action_flag=message_action_flag, not_sent_to_me_exceptions_not_sent_to_me=not_sent_to_me, recipient_contains_exceptions_recipient_contains=recipient_contains, sender_contains_exceptions_sender_contains=sender_contains, sensitivity_exceptions_sensitivity=sensitivity, sent_cc_me_exceptions_sent_cc_me=sent_cc_me, sent_only_to_me_exceptions_sent_only_to_me=sent_only_to_me, sent_to_addresses_exceptions_sent_to_addresses=sent_to_addresses, sent_to_me_exceptions_sent_to_me=sent_to_me, sent_to_or_cc_me_exceptions_sent_to_or_cc_me=sent_to_or_cc_me, subject_contains_exceptions_subject_contains=subject_contains, within_size_range_exceptions_within_size_range=within_size_range, body_contains_conditions_body_contains=microsoft_graph_message_rule_predicates_body_contains, body_or_subject_contains_conditions_body_or_subject_contains=microsoft_graph_message_rule_predicates_body_or_subject_contains_body_or_subject_contains, categories_conditions_categories=microsoft_graph_message_rule_predicates_categories, from_addresses_conditions_from_addresses=microsoft_graph_message_rule_predicates_from_addresses, has_attachments_conditions_has_attachments=boolean_has_attachments, header_contains_conditions_header_contains=microsoft_graph_message_rule_predicates_header_contains, importance_conditions_importance=microsoft_graph_importance, is_approval_request_conditions_is_approval_request=is_approval_request, is_automatic_forward_conditions_is_automatic_forward=is_automatic_forward, is_automatic_reply_conditions_is_automatic_reply=is_automatic_reply, is_encrypted_conditions_is_encrypted=is_encrypted, is_meeting_request_conditions_is_meeting_request=is_meeting_request, is_meeting_response_conditions_is_meeting_response=is_meeting_response, is_non_delivery_report_conditions_is_non_delivery_report=is_non_delivery_report, is_permission_controlled_conditions_is_permission_controlled=is_permission_controlled, is_read_receipt_conditions_is_read_receipt=is_read_receipt, is_signed_conditions_is_signed=is_signed, is_voicemail_conditions_is_voicemail=is_voicemail, message_action_flag_conditions_message_action_flag=microsoft_graph_message_action_flag_message_action_flag, not_sent_to_me_conditions_not_sent_to_me=boolean_not_sent_to_me, recipient_contains_conditions_recipient_contains=microsoft_graph_message_rule_predicates_recipient_contains, sender_contains_conditions_sender_contains=microsoft_graph_message_rule_predicates_sender_contains, sensitivity_conditions_sensitivity=microsoft_graph_sensitivity, sent_cc_me_conditions_sent_cc_me=boolean_sent_cc_me, sent_only_to_me_conditions_sent_only_to_me=boolean_sent_only_to_me, sent_to_addresses_conditions_sent_to_addresses=microsoft_graph_message_rule_predicates_sent_to_addresses_sent_to_addresses, sent_to_me_conditions_sent_to_me=boolean_sent_to_me, sent_to_or_cc_me_conditions_sent_to_or_cc_me=boolean_sent_to_or_cc_me, subject_contains_conditions_subject_contains=microsoft_graph_message_rule_predicates_subject_contains, within_size_range_conditions_within_size_range=microsoft_graph_size_range_within_size_range, assign_categories=assign_categories, copy_to_folder=copy_to_folder, delete=delete, forward_as_attachment_to=forward_as_attachment_to, forward_to=forward_to, mark_as_read=mark_as_read, mark_importance=mark_importance, move_to_folder=move_to_folder, permanent_delete=permanent_delete, redirect_to=redirect_to, stop_processing_rules=stop_processing_rules)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_message_rule.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'messageRule-id': self._serialize.url("message_rule_id", message_rule_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMessageRule')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_message_rule.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/messageRules/{messageRule-id}'}  # type: ignore

    async def delete_message_rule(
        self,
        user_id: str,
        mail_folder_id: str,
        message_rule_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property messageRules for users.

        Delete navigation property messageRules for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param message_rule_id: key: id of messageRule.
        :type message_rule_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_message_rule.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'messageRule-id': self._serialize.url("message_rule_id", message_rule_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_message_rule.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/messageRules/{messageRule-id}'}  # type: ignore

    def list_message(
        self,
        user_id: str,
        mail_folder_id: str,
        orderby: Optional[List[Union[str, "models.Enum24"]]] = None,
        select: Optional[List[Union[str, "models.Enum25"]]] = None,
        expand: Optional[List[Union[str, "models.Enum26"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfMessage"]:
        """Get messages from users.

        Get messages from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~mail.models.Enum24]
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Enum25]
        :param expand: Expand related entities.
        :type expand: list[str or ~mail.models.Enum26]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfMessage or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~mail.models.CollectionOfMessage]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_message.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                    'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfMessage', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_message.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/messages'}  # type: ignore

    async def create_message(
        self,
        user_id: str,
        mail_folder_id: str,
        id: Optional[str] = None,
        categories: Optional[List[str]] = None,
        change_key: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        bcc_recipients: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        body: Optional["models.MicrosoftGraphItemBody"] = None,
        body_preview: Optional[str] = None,
        cc_recipients: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        conversation_id: Optional[str] = None,
        conversation_index: Optional[bytes] = None,
        has_attachments: Optional[bool] = None,
        importance: Optional[Union[str, "models.MicrosoftGraphImportance"]] = None,
        inference_classification: Optional[Union[str, "models.MicrosoftGraphInferenceClassificationType"]] = None,
        internet_message_headers: Optional[List["models.MicrosoftGraphInternetMessageHeader"]] = None,
        internet_message_id: Optional[str] = None,
        is_delivery_receipt_requested: Optional[bool] = None,
        is_draft: Optional[bool] = None,
        is_read: Optional[bool] = None,
        is_read_receipt_requested: Optional[bool] = None,
        parent_folder_id: Optional[str] = None,
        received_date_time: Optional[datetime.datetime] = None,
        reply_to: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        sent_date_time: Optional[datetime.datetime] = None,
        subject: Optional[str] = None,
        to_recipients: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        unique_body: Optional["models.MicrosoftGraphItemBody"] = None,
        web_link: Optional[str] = None,
        attachments: Optional[List["models.MicrosoftGraphAttachment"]] = None,
        extensions: Optional[List["models.MicrosoftGraphExtension"]] = None,
        multi_value_extended_properties: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        single_value_extended_properties: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        address: Optional[str] = None,
        name: Optional[str] = None,
        microsoft_graph_email_address: Optional[str] = None,
        microsoft_graph_email_address_name: Optional[str] = None,
        completed_date_time: Optional["models.MicrosoftGraphDateTimeZone"] = None,
        due_date_time: Optional["models.MicrosoftGraphDateTimeZone"] = None,
        flag_status: Optional[Union[str, "models.MicrosoftGraphFollowupFlagStatus"]] = None,
        start_date_time: Optional["models.MicrosoftGraphDateTimeZone"] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMessage":
        """Create new navigation property to messages for users.

        Create new navigation property to messages for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param bcc_recipients: The Bcc: recipients for the message.
        :type bcc_recipients: list[~mail.models.MicrosoftGraphRecipient]
        :param body: itemBody.
        :type body: ~mail.models.MicrosoftGraphItemBody
        :param body_preview: The first 255 characters of the message body. It is in text format.
        :type body_preview: str
        :param cc_recipients: The Cc: recipients for the message.
        :type cc_recipients: list[~mail.models.MicrosoftGraphRecipient]
        :param conversation_id: The ID of the conversation the email belongs to.
        :type conversation_id: str
        :param conversation_index: Indicates the position of the message within the conversation.
        :type conversation_index: bytes
        :param has_attachments: Indicates whether the message has attachments. This property doesn't
         include inline attachments, so if a message contains only inline attachments, this property is
         false. To verify the existence of inline attachments, parse the body property to look for a src
         attribute, such as :code:`<IMG src='cid:image001.jpg@01D26CD8.6C05F070'>`.
        :type has_attachments: bool
        :param importance:
        :type importance: str or ~mail.models.MicrosoftGraphImportance
        :param inference_classification:
        :type inference_classification: str or ~mail.models.MicrosoftGraphInferenceClassificationType
        :param internet_message_headers: A collection of message headers defined by RFC5322. The set
         includes message headers indicating the network path taken by a message from the sender to the
         recipient. It can also contain custom message headers that hold app data for the message.
         Returned only on applying a $select query option. Read-only.
        :type internet_message_headers: list[~mail.models.MicrosoftGraphInternetMessageHeader]
        :param internet_message_id: The message ID in the format specified by RFC2822.
        :type internet_message_id: str
        :param is_delivery_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_delivery_receipt_requested: bool
        :param is_draft: Indicates whether the message is a draft. A message is a draft if it hasn't
         been sent yet.
        :type is_draft: bool
        :param is_read: Indicates whether the message has been read.
        :type is_read: bool
        :param is_read_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_read_receipt_requested: bool
        :param parent_folder_id: The unique identifier for the message's parent mailFolder.
        :type parent_folder_id: str
        :param received_date_time: The date and time the message was received.
        :type received_date_time: ~datetime.datetime
        :param reply_to: The email addresses to use when replying.
        :type reply_to: list[~mail.models.MicrosoftGraphRecipient]
        :param sent_date_time: The date and time the message was sent.
        :type sent_date_time: ~datetime.datetime
        :param subject: The subject of the message.
        :type subject: str
        :param to_recipients: The To: recipients for the message.
        :type to_recipients: list[~mail.models.MicrosoftGraphRecipient]
        :param unique_body: itemBody.
        :type unique_body: ~mail.models.MicrosoftGraphItemBody
        :param web_link: The URL to open the message in Outlook Web App.You can append an ispopout
         argument to the end of the URL to change how the message is displayed. If ispopout is not
         present or if it is set to 1, then the message is shown in a popout window. If ispopout is set
         to 0, then the browser will show the message in the Outlook Web App review pane.The message
         will open in the browser if you are logged in to your mailbox via Outlook Web App. You will be
         prompted to login if you are not already logged in with the browser.This URL can be accessed
         from within an iFrame.
        :type web_link: str
        :param attachments: The fileAttachment and itemAttachment attachments for the message.
        :type attachments: list[~mail.models.MicrosoftGraphAttachment]
        :param extensions: The collection of open extensions defined for the message. Nullable.
        :type extensions: list[~mail.models.MicrosoftGraphExtension]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the message. Nullable.
        :type multi_value_extended_properties: list[~mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the message. Nullable.
        :type single_value_extended_properties: list[~mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :param address: The email address of the person or entity.
        :type address: str
        :param name: The display name of the person or entity.
        :type name: str
        :param microsoft_graph_email_address: The email address of the person or entity.
        :type microsoft_graph_email_address: str
        :param microsoft_graph_email_address_name: The display name of the person or entity.
        :type microsoft_graph_email_address_name: str
        :param completed_date_time: dateTimeTimeZone.
        :type completed_date_time: ~mail.models.MicrosoftGraphDateTimeZone
        :param due_date_time: dateTimeTimeZone.
        :type due_date_time: ~mail.models.MicrosoftGraphDateTimeZone
        :param flag_status:
        :type flag_status: str or ~mail.models.MicrosoftGraphFollowupFlagStatus
        :param start_date_time: dateTimeTimeZone.
        :type start_date_time: ~mail.models.MicrosoftGraphDateTimeZone
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMessage, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMessage(id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, bcc_recipients=bcc_recipients, body=body, body_preview=body_preview, cc_recipients=cc_recipients, conversation_id=conversation_id, conversation_index=conversation_index, has_attachments=has_attachments, importance=importance, inference_classification=inference_classification, internet_message_headers=internet_message_headers, internet_message_id=internet_message_id, is_delivery_receipt_requested=is_delivery_receipt_requested, is_draft=is_draft, is_read=is_read, is_read_receipt_requested=is_read_receipt_requested, parent_folder_id=parent_folder_id, received_date_time=received_date_time, reply_to=reply_to, sent_date_time=sent_date_time, subject=subject, to_recipients=to_recipients, unique_body=unique_body, web_link=web_link, attachments=attachments, extensions=extensions, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties, address_sender_email_address=address, name_sender_email_address_name=name, address_from_email_address=microsoft_graph_email_address, name_from_email_address_name=microsoft_graph_email_address_name, completed_date_time=completed_date_time, due_date_time=due_date_time, flag_status=flag_status, start_date_time=start_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMessage')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_message.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/messages'}  # type: ignore

    async def get_message(
        self,
        user_id: str,
        mail_folder_id: str,
        message_id: str,
        select: Optional[List[Union[str, "models.Enum27"]]] = None,
        expand: Optional[List[Union[str, "models.Enum28"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMessage":
        """Get messages from users.

        Get messages from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Enum27]
        :param expand: Expand related entities.
        :type expand: list[str or ~mail.models.Enum28]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMessage, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_message.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}'}  # type: ignore

    async def update_message(
        self,
        user_id: str,
        mail_folder_id: str,
        message_id: str,
        id: Optional[str] = None,
        categories: Optional[List[str]] = None,
        change_key: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        bcc_recipients: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        body: Optional["models.MicrosoftGraphItemBody"] = None,
        body_preview: Optional[str] = None,
        cc_recipients: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        conversation_id: Optional[str] = None,
        conversation_index: Optional[bytes] = None,
        has_attachments: Optional[bool] = None,
        importance: Optional[Union[str, "models.MicrosoftGraphImportance"]] = None,
        inference_classification: Optional[Union[str, "models.MicrosoftGraphInferenceClassificationType"]] = None,
        internet_message_headers: Optional[List["models.MicrosoftGraphInternetMessageHeader"]] = None,
        internet_message_id: Optional[str] = None,
        is_delivery_receipt_requested: Optional[bool] = None,
        is_draft: Optional[bool] = None,
        is_read: Optional[bool] = None,
        is_read_receipt_requested: Optional[bool] = None,
        parent_folder_id: Optional[str] = None,
        received_date_time: Optional[datetime.datetime] = None,
        reply_to: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        sent_date_time: Optional[datetime.datetime] = None,
        subject: Optional[str] = None,
        to_recipients: Optional[List["models.MicrosoftGraphRecipient"]] = None,
        unique_body: Optional["models.MicrosoftGraphItemBody"] = None,
        web_link: Optional[str] = None,
        attachments: Optional[List["models.MicrosoftGraphAttachment"]] = None,
        extensions: Optional[List["models.MicrosoftGraphExtension"]] = None,
        multi_value_extended_properties: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        single_value_extended_properties: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        address: Optional[str] = None,
        name: Optional[str] = None,
        microsoft_graph_email_address: Optional[str] = None,
        microsoft_graph_email_address_name: Optional[str] = None,
        completed_date_time: Optional["models.MicrosoftGraphDateTimeZone"] = None,
        due_date_time: Optional["models.MicrosoftGraphDateTimeZone"] = None,
        flag_status: Optional[Union[str, "models.MicrosoftGraphFollowupFlagStatus"]] = None,
        start_date_time: Optional["models.MicrosoftGraphDateTimeZone"] = None,
        **kwargs
    ) -> None:
        """Update the navigation property messages in users.

        Update the navigation property messages in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param bcc_recipients: The Bcc: recipients for the message.
        :type bcc_recipients: list[~mail.models.MicrosoftGraphRecipient]
        :param body: itemBody.
        :type body: ~mail.models.MicrosoftGraphItemBody
        :param body_preview: The first 255 characters of the message body. It is in text format.
        :type body_preview: str
        :param cc_recipients: The Cc: recipients for the message.
        :type cc_recipients: list[~mail.models.MicrosoftGraphRecipient]
        :param conversation_id: The ID of the conversation the email belongs to.
        :type conversation_id: str
        :param conversation_index: Indicates the position of the message within the conversation.
        :type conversation_index: bytes
        :param has_attachments: Indicates whether the message has attachments. This property doesn't
         include inline attachments, so if a message contains only inline attachments, this property is
         false. To verify the existence of inline attachments, parse the body property to look for a src
         attribute, such as :code:`<IMG src='cid:image001.jpg@01D26CD8.6C05F070'>`.
        :type has_attachments: bool
        :param importance:
        :type importance: str or ~mail.models.MicrosoftGraphImportance
        :param inference_classification:
        :type inference_classification: str or ~mail.models.MicrosoftGraphInferenceClassificationType
        :param internet_message_headers: A collection of message headers defined by RFC5322. The set
         includes message headers indicating the network path taken by a message from the sender to the
         recipient. It can also contain custom message headers that hold app data for the message.
         Returned only on applying a $select query option. Read-only.
        :type internet_message_headers: list[~mail.models.MicrosoftGraphInternetMessageHeader]
        :param internet_message_id: The message ID in the format specified by RFC2822.
        :type internet_message_id: str
        :param is_delivery_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_delivery_receipt_requested: bool
        :param is_draft: Indicates whether the message is a draft. A message is a draft if it hasn't
         been sent yet.
        :type is_draft: bool
        :param is_read: Indicates whether the message has been read.
        :type is_read: bool
        :param is_read_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_read_receipt_requested: bool
        :param parent_folder_id: The unique identifier for the message's parent mailFolder.
        :type parent_folder_id: str
        :param received_date_time: The date and time the message was received.
        :type received_date_time: ~datetime.datetime
        :param reply_to: The email addresses to use when replying.
        :type reply_to: list[~mail.models.MicrosoftGraphRecipient]
        :param sent_date_time: The date and time the message was sent.
        :type sent_date_time: ~datetime.datetime
        :param subject: The subject of the message.
        :type subject: str
        :param to_recipients: The To: recipients for the message.
        :type to_recipients: list[~mail.models.MicrosoftGraphRecipient]
        :param unique_body: itemBody.
        :type unique_body: ~mail.models.MicrosoftGraphItemBody
        :param web_link: The URL to open the message in Outlook Web App.You can append an ispopout
         argument to the end of the URL to change how the message is displayed. If ispopout is not
         present or if it is set to 1, then the message is shown in a popout window. If ispopout is set
         to 0, then the browser will show the message in the Outlook Web App review pane.The message
         will open in the browser if you are logged in to your mailbox via Outlook Web App. You will be
         prompted to login if you are not already logged in with the browser.This URL can be accessed
         from within an iFrame.
        :type web_link: str
        :param attachments: The fileAttachment and itemAttachment attachments for the message.
        :type attachments: list[~mail.models.MicrosoftGraphAttachment]
        :param extensions: The collection of open extensions defined for the message. Nullable.
        :type extensions: list[~mail.models.MicrosoftGraphExtension]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the message. Nullable.
        :type multi_value_extended_properties: list[~mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the message. Nullable.
        :type single_value_extended_properties: list[~mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :param address: The email address of the person or entity.
        :type address: str
        :param name: The display name of the person or entity.
        :type name: str
        :param microsoft_graph_email_address: The email address of the person or entity.
        :type microsoft_graph_email_address: str
        :param microsoft_graph_email_address_name: The display name of the person or entity.
        :type microsoft_graph_email_address_name: str
        :param completed_date_time: dateTimeTimeZone.
        :type completed_date_time: ~mail.models.MicrosoftGraphDateTimeZone
        :param due_date_time: dateTimeTimeZone.
        :type due_date_time: ~mail.models.MicrosoftGraphDateTimeZone
        :param flag_status:
        :type flag_status: str or ~mail.models.MicrosoftGraphFollowupFlagStatus
        :param start_date_time: dateTimeTimeZone.
        :type start_date_time: ~mail.models.MicrosoftGraphDateTimeZone
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMessage(id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, bcc_recipients=bcc_recipients, body=body, body_preview=body_preview, cc_recipients=cc_recipients, conversation_id=conversation_id, conversation_index=conversation_index, has_attachments=has_attachments, importance=importance, inference_classification=inference_classification, internet_message_headers=internet_message_headers, internet_message_id=internet_message_id, is_delivery_receipt_requested=is_delivery_receipt_requested, is_draft=is_draft, is_read=is_read, is_read_receipt_requested=is_read_receipt_requested, parent_folder_id=parent_folder_id, received_date_time=received_date_time, reply_to=reply_to, sent_date_time=sent_date_time, subject=subject, to_recipients=to_recipients, unique_body=unique_body, web_link=web_link, attachments=attachments, extensions=extensions, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties, address_sender_email_address=address, name_sender_email_address_name=name, address_from_email_address=microsoft_graph_email_address, name_from_email_address_name=microsoft_graph_email_address_name, completed_date_time=completed_date_time, due_date_time=due_date_time, flag_status=flag_status, start_date_time=start_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMessage')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_message.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}'}  # type: ignore

    async def delete_message(
        self,
        user_id: str,
        mail_folder_id: str,
        message_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property messages for users.

        Delete navigation property messages for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_message.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}'}  # type: ignore

    def list_multi_value_extended_property(
        self,
        user_id: str,
        mail_folder_id: str,
        orderby: Optional[List[Union[str, "models.Enum39"]]] = None,
        select: Optional[List[Union[str, "models.Enum40"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfMultiValueLegacyExtendedProperty0"]:
        """Get multiValueExtendedProperties from users.

        Get multiValueExtendedProperties from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~mail.models.Enum39]
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Enum40]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfMultiValueLegacyExtendedProperty0 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~mail.models.CollectionOfMultiValueLegacyExtendedProperty0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfMultiValueLegacyExtendedProperty0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_multi_value_extended_property.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                    'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfMultiValueLegacyExtendedProperty0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_multi_value_extended_property.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/multiValueExtendedProperties'}  # type: ignore

    async def create_multi_value_extended_property(
        self,
        user_id: str,
        mail_folder_id: str,
        id: Optional[str] = None,
        value: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMultiValueLegacyExtendedProperty":
        """Create new navigation property to multiValueExtendedProperties for users.

        Create new navigation property to multiValueExtendedProperties for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param id: Read-only.
        :type id: str
        :param value: A collection of property values.
        :type value: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMultiValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMultiValueLegacyExtendedProperty(id=id, value=value)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_multi_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMultiValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMultiValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_multi_value_extended_property.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/multiValueExtendedProperties'}  # type: ignore

    async def get_multi_value_extended_property(
        self,
        user_id: str,
        mail_folder_id: str,
        multi_value_legacy_extended_property_id: str,
        select: Optional[List[Union[str, "models.Enum41"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMultiValueLegacyExtendedProperty":
        """Get multiValueExtendedProperties from users.

        Get multiValueExtendedProperties from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param multi_value_legacy_extended_property_id: key: id of multiValueLegacyExtendedProperty.
        :type multi_value_legacy_extended_property_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Enum41]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMultiValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_multi_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'multiValueLegacyExtendedProperty-id': self._serialize.url("multi_value_legacy_extended_property_id", multi_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMultiValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_multi_value_extended_property.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}'}  # type: ignore

    async def update_multi_value_extended_property(
        self,
        user_id: str,
        mail_folder_id: str,
        multi_value_legacy_extended_property_id: str,
        id: Optional[str] = None,
        value: Optional[List[str]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property multiValueExtendedProperties in users.

        Update the navigation property multiValueExtendedProperties in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param multi_value_legacy_extended_property_id: key: id of multiValueLegacyExtendedProperty.
        :type multi_value_legacy_extended_property_id: str
        :param id: Read-only.
        :type id: str
        :param value: A collection of property values.
        :type value: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMultiValueLegacyExtendedProperty(id=id, value=value)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_multi_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'multiValueLegacyExtendedProperty-id': self._serialize.url("multi_value_legacy_extended_property_id", multi_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMultiValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_multi_value_extended_property.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}'}  # type: ignore

    async def delete_multi_value_extended_property(
        self,
        user_id: str,
        mail_folder_id: str,
        multi_value_legacy_extended_property_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property multiValueExtendedProperties for users.

        Delete navigation property multiValueExtendedProperties for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param multi_value_legacy_extended_property_id: key: id of multiValueLegacyExtendedProperty.
        :type multi_value_legacy_extended_property_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_multi_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'multiValueLegacyExtendedProperty-id': self._serialize.url("multi_value_legacy_extended_property_id", multi_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_multi_value_extended_property.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}'}  # type: ignore

    def list_single_value_extended_property(
        self,
        user_id: str,
        mail_folder_id: str,
        orderby: Optional[List[Union[str, "models.Enum42"]]] = None,
        select: Optional[List[Union[str, "models.Enum43"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfSingleValueLegacyExtendedProperty0"]:
        """Get singleValueExtendedProperties from users.

        Get singleValueExtendedProperties from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~mail.models.Enum42]
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Enum43]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSingleValueLegacyExtendedProperty0 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~mail.models.CollectionOfSingleValueLegacyExtendedProperty0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSingleValueLegacyExtendedProperty0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_single_value_extended_property.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                    'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSingleValueLegacyExtendedProperty0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_single_value_extended_property.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/singleValueExtendedProperties'}  # type: ignore

    async def create_single_value_extended_property(
        self,
        user_id: str,
        mail_folder_id: str,
        id: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSingleValueLegacyExtendedProperty":
        """Create new navigation property to singleValueExtendedProperties for users.

        Create new navigation property to singleValueExtendedProperties for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param id: Read-only.
        :type id: str
        :param value: A property value.
        :type value: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSingleValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSingleValueLegacyExtendedProperty(id=id, value=value)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_single_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSingleValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSingleValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_single_value_extended_property.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/singleValueExtendedProperties'}  # type: ignore

    async def get_single_value_extended_property(
        self,
        user_id: str,
        mail_folder_id: str,
        single_value_legacy_extended_property_id: str,
        select: Optional[List[Union[str, "models.Enum44"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSingleValueLegacyExtendedProperty":
        """Get singleValueExtendedProperties from users.

        Get singleValueExtendedProperties from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param single_value_legacy_extended_property_id: key: id of singleValueLegacyExtendedProperty.
        :type single_value_legacy_extended_property_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~mail.models.Enum44]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSingleValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_single_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'singleValueLegacyExtendedProperty-id': self._serialize.url("single_value_legacy_extended_property_id", single_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSingleValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_single_value_extended_property.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}'}  # type: ignore

    async def update_single_value_extended_property(
        self,
        user_id: str,
        mail_folder_id: str,
        single_value_legacy_extended_property_id: str,
        id: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property singleValueExtendedProperties in users.

        Update the navigation property singleValueExtendedProperties in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param single_value_legacy_extended_property_id: key: id of singleValueLegacyExtendedProperty.
        :type single_value_legacy_extended_property_id: str
        :param id: Read-only.
        :type id: str
        :param value: A property value.
        :type value: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSingleValueLegacyExtendedProperty(id=id, value=value)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_single_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'singleValueLegacyExtendedProperty-id': self._serialize.url("single_value_legacy_extended_property_id", single_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSingleValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_single_value_extended_property.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}'}  # type: ignore

    async def delete_single_value_extended_property(
        self,
        user_id: str,
        mail_folder_id: str,
        single_value_legacy_extended_property_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property singleValueExtendedProperties for users.

        Delete navigation property singleValueExtendedProperties for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param mail_folder_id: key: id of mailFolder.
        :type mail_folder_id: str
        :param single_value_legacy_extended_property_id: key: id of singleValueLegacyExtendedProperty.
        :type single_value_legacy_extended_property_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_single_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
            'singleValueLegacyExtendedProperty-id': self._serialize.url("single_value_legacy_extended_property_id", single_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_single_value_extended_property.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}'}  # type: ignore
