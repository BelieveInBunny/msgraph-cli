# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class UserInsightOperations(object):
    """UserInsightOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~people.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_shared(
        self,
        user_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Get6ItemsItem"]]]
        select=None,  # type: Optional[List[Union[str, "models.Get7ItemsItem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get8ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfSharedInsight"]
        """Get shared from users.

        Get shared from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~people.models.Get6ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~people.models.Get7ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~people.models.Get8ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSharedInsight or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~people.models.CollectionOfSharedInsight]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSharedInsight"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_shared.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSharedInsight', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_shared.metadata = {'url': '/users/{user-id}/insights/shared'}  # type: ignore

    def create_shared(
        self,
        user_id,  # type: str
        id=None,  # type: Optional[str]
        resource_reference=None,  # type: Optional["models.MicrosoftGraphResourceReference"]
        resource_visualization=None,  # type: Optional["models.MicrosoftGraphResourceVisualization"]
        sharing_history=None,  # type: Optional[List["models.MicrosoftGraphSharingDetail"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        shared_by=None,  # type: Optional["models.MicrosoftGraphInsightIdentity"]
        shared_date_time=None,  # type: Optional[datetime.datetime]
        sharing_reference=None,  # type: Optional["models.MicrosoftGraphResourceReference"]
        sharing_subject=None,  # type: Optional[str]
        sharing_type=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSharedInsight"
        """Create new navigation property to shared for users.

        Create new navigation property to shared for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param resource_reference: resourceReference.
        :type resource_reference: ~people.models.MicrosoftGraphResourceReference
        :param resource_visualization: resourceVisualization.
        :type resource_visualization: ~people.models.MicrosoftGraphResourceVisualization
        :param sharing_history:
        :type sharing_history: list[~people.models.MicrosoftGraphSharingDetail]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param id1: Read-only.
        :type id1: str
        :param shared_by: insightIdentity.
        :type shared_by: ~people.models.MicrosoftGraphInsightIdentity
        :param shared_date_time: The date and time the file was last shared. The timestamp represents
         date and time information using ISO 8601 format and is always in UTC time. For example,
         midnight UTC on Jan 1, 2014 would look like this: 2014-01-01T00:00:00Z. Read-only.
        :type shared_date_time: ~datetime.datetime
        :param sharing_reference: resourceReference.
        :type sharing_reference: ~people.models.MicrosoftGraphResourceReference
        :param sharing_subject: The subject with which the document was shared.
        :type sharing_subject: str
        :param sharing_type: Determines the way the document was shared, can be by a 'Link',
         'Attachment', 'Group', 'Site'.
        :type sharing_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSharedInsight, or the result of cls(response)
        :rtype: ~people.models.MicrosoftGraphSharedInsight
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSharedInsight"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphSharedInsight(id=id, resource_reference=resource_reference, resource_visualization=resource_visualization, sharing_history=sharing_history, id_resource_id=microsoft_graph_entity_id, id_last_shared_method_id=id1, shared_by=shared_by, shared_date_time=shared_date_time, sharing_reference=sharing_reference, sharing_subject=sharing_subject, sharing_type=sharing_type)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_shared.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphSharedInsight')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSharedInsight', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_shared.metadata = {'url': '/users/{user-id}/insights/shared'}  # type: ignore

    def get_shared(
        self,
        user_id,  # type: str
        shared_insight_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum5"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get3ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSharedInsight"
        """Get shared from users.

        Get shared from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param shared_insight_id: key: id of sharedInsight.
        :type shared_insight_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~people.models.Enum5]
        :param expand: Expand related entities.
        :type expand: list[str or ~people.models.Get3ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSharedInsight, or the result of cls(response)
        :rtype: ~people.models.MicrosoftGraphSharedInsight
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSharedInsight"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_shared.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'sharedInsight-id': self._serialize.url("shared_insight_id", shared_insight_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSharedInsight', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_shared.metadata = {'url': '/users/{user-id}/insights/shared/{sharedInsight-id}'}  # type: ignore

    def update_shared(
        self,
        user_id,  # type: str
        shared_insight_id,  # type: str
        id=None,  # type: Optional[str]
        resource_reference=None,  # type: Optional["models.MicrosoftGraphResourceReference"]
        resource_visualization=None,  # type: Optional["models.MicrosoftGraphResourceVisualization"]
        sharing_history=None,  # type: Optional[List["models.MicrosoftGraphSharingDetail"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        shared_by=None,  # type: Optional["models.MicrosoftGraphInsightIdentity"]
        shared_date_time=None,  # type: Optional[datetime.datetime]
        sharing_reference=None,  # type: Optional["models.MicrosoftGraphResourceReference"]
        sharing_subject=None,  # type: Optional[str]
        sharing_type=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property shared in users.

        Update the navigation property shared in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param shared_insight_id: key: id of sharedInsight.
        :type shared_insight_id: str
        :param id: Read-only.
        :type id: str
        :param resource_reference: resourceReference.
        :type resource_reference: ~people.models.MicrosoftGraphResourceReference
        :param resource_visualization: resourceVisualization.
        :type resource_visualization: ~people.models.MicrosoftGraphResourceVisualization
        :param sharing_history:
        :type sharing_history: list[~people.models.MicrosoftGraphSharingDetail]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param id1: Read-only.
        :type id1: str
        :param shared_by: insightIdentity.
        :type shared_by: ~people.models.MicrosoftGraphInsightIdentity
        :param shared_date_time: The date and time the file was last shared. The timestamp represents
         date and time information using ISO 8601 format and is always in UTC time. For example,
         midnight UTC on Jan 1, 2014 would look like this: 2014-01-01T00:00:00Z. Read-only.
        :type shared_date_time: ~datetime.datetime
        :param sharing_reference: resourceReference.
        :type sharing_reference: ~people.models.MicrosoftGraphResourceReference
        :param sharing_subject: The subject with which the document was shared.
        :type sharing_subject: str
        :param sharing_type: Determines the way the document was shared, can be by a 'Link',
         'Attachment', 'Group', 'Site'.
        :type sharing_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphSharedInsight(id=id, resource_reference=resource_reference, resource_visualization=resource_visualization, sharing_history=sharing_history, id_resource_id=microsoft_graph_entity_id, id_last_shared_method_id=id1, shared_by=shared_by, shared_date_time=shared_date_time, sharing_reference=sharing_reference, sharing_subject=sharing_subject, sharing_type=sharing_type)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_shared.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'sharedInsight-id': self._serialize.url("shared_insight_id", shared_insight_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphSharedInsight')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_shared.metadata = {'url': '/users/{user-id}/insights/shared/{sharedInsight-id}'}  # type: ignore

    def delete_shared(
        self,
        user_id,  # type: str
        shared_insight_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property shared for users.

        Delete navigation property shared for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param shared_insight_id: key: id of sharedInsight.
        :type shared_insight_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_shared.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'sharedInsight-id': self._serialize.url("shared_insight_id", shared_insight_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_shared.metadata = {'url': '/users/{user-id}/insights/shared/{sharedInsight-id}'}  # type: ignore

    def list_trending(
        self,
        user_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum7"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum8"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum9"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfTrending"]
        """Get trending from users.

        Get trending from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~people.models.Enum7]
        :param select: Select properties to be returned.
        :type select: list[str or ~people.models.Enum8]
        :param expand: Expand related entities.
        :type expand: list[str or ~people.models.Enum9]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfTrending or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~people.models.CollectionOfTrending]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfTrending"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_trending.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfTrending', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_trending.metadata = {'url': '/users/{user-id}/insights/trending'}  # type: ignore

    def create_trending(
        self,
        user_id,  # type: str
        id=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        resource_reference=None,  # type: Optional["models.MicrosoftGraphResourceReference"]
        resource_visualization=None,  # type: Optional["models.MicrosoftGraphResourceVisualization"]
        weight=None,  # type: Optional[float]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTrending"
        """Create new navigation property to trending for users.

        Create new navigation property to trending for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param resource_reference: resourceReference.
        :type resource_reference: ~people.models.MicrosoftGraphResourceReference
        :param resource_visualization: resourceVisualization.
        :type resource_visualization: ~people.models.MicrosoftGraphResourceVisualization
        :param weight: Value indicating how much the document is currently trending. The larger the
         number, the more the document is currently trending around the user (the more relevant it is).
         Returned documents are sorted by this value.
        :type weight: float
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTrending, or the result of cls(response)
        :rtype: ~people.models.MicrosoftGraphTrending
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTrending"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphTrending(id=id, last_modified_date_time=last_modified_date_time, resource_reference=resource_reference, resource_visualization=resource_visualization, weight=weight, id_resource_id=microsoft_graph_entity_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_trending.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTrending')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTrending', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_trending.metadata = {'url': '/users/{user-id}/insights/trending'}  # type: ignore

    def get_trending(
        self,
        user_id,  # type: str
        trending_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum10"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum11"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTrending"
        """Get trending from users.

        Get trending from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param trending_id: key: id of trending.
        :type trending_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~people.models.Enum10]
        :param expand: Expand related entities.
        :type expand: list[str or ~people.models.Enum11]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTrending, or the result of cls(response)
        :rtype: ~people.models.MicrosoftGraphTrending
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTrending"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_trending.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'trending-id': self._serialize.url("trending_id", trending_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTrending', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_trending.metadata = {'url': '/users/{user-id}/insights/trending/{trending-id}'}  # type: ignore

    def update_trending(
        self,
        user_id,  # type: str
        trending_id,  # type: str
        id=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        resource_reference=None,  # type: Optional["models.MicrosoftGraphResourceReference"]
        resource_visualization=None,  # type: Optional["models.MicrosoftGraphResourceVisualization"]
        weight=None,  # type: Optional[float]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property trending in users.

        Update the navigation property trending in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param trending_id: key: id of trending.
        :type trending_id: str
        :param id: Read-only.
        :type id: str
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param resource_reference: resourceReference.
        :type resource_reference: ~people.models.MicrosoftGraphResourceReference
        :param resource_visualization: resourceVisualization.
        :type resource_visualization: ~people.models.MicrosoftGraphResourceVisualization
        :param weight: Value indicating how much the document is currently trending. The larger the
         number, the more the document is currently trending around the user (the more relevant it is).
         Returned documents are sorted by this value.
        :type weight: float
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphTrending(id=id, last_modified_date_time=last_modified_date_time, resource_reference=resource_reference, resource_visualization=resource_visualization, weight=weight, id_resource_id=microsoft_graph_entity_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_trending.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'trending-id': self._serialize.url("trending_id", trending_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTrending')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_trending.metadata = {'url': '/users/{user-id}/insights/trending/{trending-id}'}  # type: ignore

    def delete_trending(
        self,
        user_id,  # type: str
        trending_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property trending for users.

        Delete navigation property trending for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param trending_id: key: id of trending.
        :type trending_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_trending.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'trending-id': self._serialize.url("trending_id", trending_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_trending.metadata = {'url': '/users/{user-id}/insights/trending/{trending-id}'}  # type: ignore

    def list_used(
        self,
        user_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum12"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum13"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum14"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfUsedInsight"]
        """Get used from users.

        Get used from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~people.models.Enum12]
        :param select: Select properties to be returned.
        :type select: list[str or ~people.models.Enum13]
        :param expand: Expand related entities.
        :type expand: list[str or ~people.models.Enum14]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfUsedInsight or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~people.models.CollectionOfUsedInsight]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfUsedInsight"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_used.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfUsedInsight', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_used.metadata = {'url': '/users/{user-id}/insights/used'}  # type: ignore

    def create_used(
        self,
        user_id,  # type: str
        id=None,  # type: Optional[str]
        last_used=None,  # type: Optional["models.MicrosoftGraphUsageDetails"]
        resource_reference=None,  # type: Optional["models.MicrosoftGraphResourceReference"]
        resource_visualization=None,  # type: Optional["models.MicrosoftGraphResourceVisualization"]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphUsedInsight"
        """Create new navigation property to used for users.

        Create new navigation property to used for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param last_used: usageDetails.
        :type last_used: ~people.models.MicrosoftGraphUsageDetails
        :param resource_reference: resourceReference.
        :type resource_reference: ~people.models.MicrosoftGraphResourceReference
        :param resource_visualization: resourceVisualization.
        :type resource_visualization: ~people.models.MicrosoftGraphResourceVisualization
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUsedInsight, or the result of cls(response)
        :rtype: ~people.models.MicrosoftGraphUsedInsight
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUsedInsight"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphUsedInsight(id=id, last_used=last_used, resource_reference=resource_reference, resource_visualization=resource_visualization, id_resource_id=microsoft_graph_entity_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_used.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphUsedInsight')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUsedInsight', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_used.metadata = {'url': '/users/{user-id}/insights/used'}  # type: ignore

    def get_used(
        self,
        user_id,  # type: str
        used_insight_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum15"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum16"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphUsedInsight"
        """Get used from users.

        Get used from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param used_insight_id: key: id of usedInsight.
        :type used_insight_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~people.models.Enum15]
        :param expand: Expand related entities.
        :type expand: list[str or ~people.models.Enum16]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUsedInsight, or the result of cls(response)
        :rtype: ~people.models.MicrosoftGraphUsedInsight
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUsedInsight"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_used.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'usedInsight-id': self._serialize.url("used_insight_id", used_insight_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUsedInsight', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_used.metadata = {'url': '/users/{user-id}/insights/used/{usedInsight-id}'}  # type: ignore

    def update_used(
        self,
        user_id,  # type: str
        used_insight_id,  # type: str
        id=None,  # type: Optional[str]
        last_used=None,  # type: Optional["models.MicrosoftGraphUsageDetails"]
        resource_reference=None,  # type: Optional["models.MicrosoftGraphResourceReference"]
        resource_visualization=None,  # type: Optional["models.MicrosoftGraphResourceVisualization"]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property used in users.

        Update the navigation property used in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param used_insight_id: key: id of usedInsight.
        :type used_insight_id: str
        :param id: Read-only.
        :type id: str
        :param last_used: usageDetails.
        :type last_used: ~people.models.MicrosoftGraphUsageDetails
        :param resource_reference: resourceReference.
        :type resource_reference: ~people.models.MicrosoftGraphResourceReference
        :param resource_visualization: resourceVisualization.
        :type resource_visualization: ~people.models.MicrosoftGraphResourceVisualization
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphUsedInsight(id=id, last_used=last_used, resource_reference=resource_reference, resource_visualization=resource_visualization, id_resource_id=microsoft_graph_entity_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_used.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'usedInsight-id': self._serialize.url("used_insight_id", used_insight_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphUsedInsight')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_used.metadata = {'url': '/users/{user-id}/insights/used/{usedInsight-id}'}  # type: ignore

    def delete_used(
        self,
        user_id,  # type: str
        used_insight_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property used for users.

        Delete navigation property used for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param used_insight_id: key: id of usedInsight.
        :type used_insight_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_used.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'usedInsight-id': self._serialize.url("used_insight_id", used_insight_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_used.metadata = {'url': '/users/{user-id}/insights/used/{usedInsight-id}'}  # type: ignore
