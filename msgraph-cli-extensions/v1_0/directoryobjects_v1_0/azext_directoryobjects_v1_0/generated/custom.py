# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines


def directoryobjects_delete(client,
                            directory_object_id,
                            if_match=None):
    return client.delete_directory_object(directory_object_id=directory_object_id,
                                          if_match=if_match)


def directoryobjects_create_directory_object(client,
                                             id_=None,
                                             deleted_date_time=None):
    return client.create_directory_object(id=id_,
                                          deleted_date_time=deleted_date_time)


def directoryobjects_get_directory_object(client,
                                          directory_object_id,
                                          select=None,
                                          expand=None):
    return client.get_directory_object(directory_object_id=directory_object_id,
                                       select=select,
                                       expand=expand)


def directoryobjects_list_directory_object(client,
                                           orderby=None,
                                           select=None,
                                           expand=None):
    return client.list_directory_object(orderby=orderby,
                                        select=select,
                                        expand=expand)


def directoryobjects_update_directory_object(client,
                                             directory_object_id,
                                             id_=None,
                                             deleted_date_time=None):
    return client.update_directory_object(directory_object_id=directory_object_id,
                                          id=id_,
                                          deleted_date_time=deleted_date_time)


def directoryobjects_check_member_group(client,
                                        directory_object_id,
                                        group_ids=None):
    return client.check_member_group(directory_object_id=directory_object_id,
                                     group_ids=group_ids)


def directoryobjects_check_member_object(client,
                                         directory_object_id,
                                         ids=None):
    return client.check_member_object(directory_object_id=directory_object_id,
                                      ids=ids)


def directoryobjects_get_available_extension_property(client,
                                                      is_synced_from_on_premises=None):
    if is_synced_from_on_premises is None:
        is_synced_from_on_premises = False
    return client.get_available_extension_property(is_synced_from_on_premises=is_synced_from_on_premises)


def directoryobjects_get_by_id(client,
                               ids=None,
                               types=None):
    return client.get_by_id(ids=ids,
                            types=types)


def directoryobjects_get_member_group(client,
                                      directory_object_id,
                                      security_enabled_only=None):
    if security_enabled_only is None:
        security_enabled_only = False
    return client.get_member_group(directory_object_id=directory_object_id,
                                   security_enabled_only=security_enabled_only)


def directoryobjects_get_member_object(client,
                                       directory_object_id,
                                       security_enabled_only=None):
    if security_enabled_only is None:
        security_enabled_only = False
    return client.get_member_object(directory_object_id=directory_object_id,
                                    security_enabled_only=security_enabled_only)


def directoryobjects_restore(client,
                             directory_object_id):
    return client.restore(directory_object_id=directory_object_id)


def directoryobjects_validate_property(client,
                                       entity_type=None,
                                       display_name=None,
                                       mail_nickname=None,
                                       on_behalf_of_user_id=None):
    return client.validate_property(entity_type=entity_type,
                                    display_name=display_name,
                                    mail_nickname=mail_nickname,
                                    on_behalf_of_user_id=on_behalf_of_user_id)
