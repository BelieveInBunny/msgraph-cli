# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum100(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Enum101(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Enum102(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DISTRIBUTION_METHOD = "distributionMethod"
    EXTERNAL_ID = "externalId"
    APP_DEFINITIONS = "appDefinitions"

class Enum103(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_DEFINITIONS = "appDefinitions"

class Enum104(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    TEAMS_APP_ID = "teamsAppId"
    VERSION = "version"

class Enum105(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    ROLES = "roles"
    ROLES_DESC = "roles desc"

class Enum106(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    ROLES = "roles"

class Enum107(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    ROLES = "roles"

class Enum109(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ATTEMPTS_COUNT = "attemptsCount"
    ATTEMPTS_COUNT_DESC = "attemptsCount desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    ERROR = "error"
    ERROR_DESC = "error desc"
    LAST_ACTION_DATE_TIME = "lastActionDateTime"
    LAST_ACTION_DATE_TIME_DESC = "lastActionDateTime desc"
    OPERATION_TYPE = "operationType"
    OPERATION_TYPE_DESC = "operationType desc"
    STATUS = "status"
    STATUS_DESC = "status desc"
    TARGET_RESOURCE_ID = "targetResourceId"
    TARGET_RESOURCE_ID_DESC = "targetResourceId desc"
    TARGET_RESOURCE_LOCATION = "targetResourceLocation"
    TARGET_RESOURCE_LOCATION_DESC = "targetResourceLocation desc"

class Enum110(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTEMPTS_COUNT = "attemptsCount"
    CREATED_DATE_TIME = "createdDateTime"
    ERROR = "error"
    LAST_ACTION_DATE_TIME = "lastActionDateTime"
    OPERATION_TYPE = "operationType"
    STATUS = "status"
    TARGET_RESOURCE_ID = "targetResourceId"
    TARGET_RESOURCE_LOCATION = "targetResourceLocation"

class Enum111(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTEMPTS_COUNT = "attemptsCount"
    CREATED_DATE_TIME = "createdDateTime"
    ERROR = "error"
    LAST_ACTION_DATE_TIME = "lastActionDateTime"
    OPERATION_TYPE = "operationType"
    STATUS = "status"
    TARGET_RESOURCE_ID = "targetResourceId"
    TARGET_RESOURCE_LOCATION = "targetResourceLocation"

class Enum112(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    EMAIL = "email"
    MEMBERSHIP_TYPE = "membershipType"
    WEB_URL = "webUrl"
    FILES_FOLDER = "filesFolder"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum113(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    FILES_FOLDER = "filesFolder"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum114(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    E_TAG = "eTag"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    NAME = "name"
    PARENT_REFERENCE = "parentReference"
    WEB_URL = "webUrl"
    AUDIO = "audio"
    CONTENT = "content"
    C_TAG = "cTag"
    DELETED = "deleted"
    FILE = "file"
    FILE_SYSTEM_INFO = "fileSystemInfo"
    FOLDER = "folder"
    IMAGE = "image"
    LOCATION = "location"
    PACKAGE = "package"
    PENDING_OPERATIONS = "pendingOperations"
    PHOTO = "photo"
    PUBLICATION = "publication"
    REMOTE_ITEM = "remoteItem"
    ROOT = "root"
    SEARCH_RESULT = "searchResult"
    SHARED = "shared"
    SHAREPOINT_IDS = "sharepointIds"
    SIZE = "size"
    SPECIAL_FOLDER = "specialFolder"
    VIDEO = "video"
    WEB_DAV_URL = "webDavUrl"
    CREATED_BY_USER = "createdByUser"
    LAST_MODIFIED_BY_USER = "lastModifiedByUser"
    WORKBOOK = "workbook"
    ANALYTICS = "analytics"
    CHILDREN = "children"
    LIST_ITEM = "listItem"
    PERMISSIONS = "permissions"
    SUBSCRIPTIONS = "subscriptions"
    THUMBNAILS = "thumbnails"
    VERSIONS = "versions"

class Enum115(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATED_BY_USER = "createdByUser"
    LAST_MODIFIED_BY_USER = "lastModifiedByUser"
    WORKBOOK = "workbook"
    ANALYTICS = "analytics"
    CHILDREN = "children"
    LIST_ITEM = "listItem"
    PERMISSIONS = "permissions"
    SUBSCRIPTIONS = "subscriptions"
    THUMBNAILS = "thumbnails"
    VERSIONS = "versions"

class Enum116(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    ROLES = "roles"
    ROLES_DESC = "roles desc"

class Enum117(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    ROLES = "roles"

class Enum118(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    ROLES = "roles"

class Enum119(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ATTACHMENTS = "attachments"
    ATTACHMENTS_DESC = "attachments desc"
    BODY = "body"
    BODY_DESC = "body desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    ETAG = "etag"
    ETAG_DESC = "etag desc"
    FROM_ENUM = "from"
    FROM_DESC = "from desc"
    IMPORTANCE = "importance"
    IMPORTANCE_DESC = "importance desc"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_EDITED_DATE_TIME_DESC = "lastEditedDateTime desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LOCALE = "locale"
    LOCALE_DESC = "locale desc"
    MENTIONS = "mentions"
    MENTIONS_DESC = "mentions desc"
    MESSAGE_TYPE = "messageType"
    MESSAGE_TYPE_DESC = "messageType desc"
    POLICY_VIOLATION = "policyViolation"
    POLICY_VIOLATION_DESC = "policyViolation desc"
    REACTIONS = "reactions"
    REACTIONS_DESC = "reactions desc"
    REPLY_TO_ID = "replyToId"
    REPLY_TO_ID_DESC = "replyToId desc"
    SUBJECT = "subject"
    SUBJECT_DESC = "subject desc"
    SUMMARY = "summary"
    SUMMARY_DESC = "summary desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum120(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum121(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum122(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum123(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum124(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum125(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ATTACHMENTS = "attachments"
    ATTACHMENTS_DESC = "attachments desc"
    BODY = "body"
    BODY_DESC = "body desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    ETAG = "etag"
    ETAG_DESC = "etag desc"
    FROM_ENUM = "from"
    FROM_DESC = "from desc"
    IMPORTANCE = "importance"
    IMPORTANCE_DESC = "importance desc"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_EDITED_DATE_TIME_DESC = "lastEditedDateTime desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LOCALE = "locale"
    LOCALE_DESC = "locale desc"
    MENTIONS = "mentions"
    MENTIONS_DESC = "mentions desc"
    MESSAGE_TYPE = "messageType"
    MESSAGE_TYPE_DESC = "messageType desc"
    POLICY_VIOLATION = "policyViolation"
    POLICY_VIOLATION_DESC = "policyViolation desc"
    REACTIONS = "reactions"
    REACTIONS_DESC = "reactions desc"
    REPLY_TO_ID = "replyToId"
    REPLY_TO_ID_DESC = "replyToId desc"
    SUBJECT = "subject"
    SUBJECT_DESC = "subject desc"
    SUMMARY = "summary"
    SUMMARY_DESC = "summary desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum126(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum127(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum128(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum129(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum130(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CONFIGURATION = "configuration"
    CONFIGURATION_DESC = "configuration desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum131(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONFIGURATION = "configuration"
    DISPLAY_NAME = "displayName"
    WEB_URL = "webUrl"
    TEAMS_APP = "teamsApp"

class Enum132(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"

class Enum133(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONFIGURATION = "configuration"
    DISPLAY_NAME = "displayName"
    WEB_URL = "webUrl"
    TEAMS_APP = "teamsApp"

class Enum134(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"

class Enum135(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DISTRIBUTION_METHOD = "distributionMethod"
    EXTERNAL_ID = "externalId"
    APP_DEFINITIONS = "appDefinitions"

class Enum136(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_DEFINITIONS = "appDefinitions"

class Enum137(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ENABLED = "enabled"
    OFFER_SHIFT_REQUESTS_ENABLED = "offerShiftRequestsEnabled"
    OPEN_SHIFTS_ENABLED = "openShiftsEnabled"
    PROVISION_STATUS = "provisionStatus"
    PROVISION_STATUS_CODE = "provisionStatusCode"
    SWAP_SHIFTS_REQUESTS_ENABLED = "swapShiftsRequestsEnabled"
    TIME_CLOCK_ENABLED = "timeClockEnabled"
    TIME_OFF_REQUESTS_ENABLED = "timeOffRequestsEnabled"
    TIME_ZONE = "timeZone"
    WORKFORCE_INTEGRATION_IDS = "workforceIntegrationIds"
    OFFER_SHIFT_REQUESTS = "offerShiftRequests"
    OPEN_SHIFT_CHANGE_REQUESTS = "openShiftChangeRequests"
    OPEN_SHIFTS = "openShifts"
    SCHEDULING_GROUPS = "schedulingGroups"
    SHIFTS = "shifts"
    SWAP_SHIFTS_CHANGE_REQUESTS = "swapShiftsChangeRequests"
    TIME_OFF_REASONS = "timeOffReasons"
    TIME_OFF_REQUESTS = "timeOffRequests"
    TIMES_OFF = "timesOff"

class Enum138(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    OFFER_SHIFT_REQUESTS = "offerShiftRequests"
    OPEN_SHIFT_CHANGE_REQUESTS = "openShiftChangeRequests"
    OPEN_SHIFTS = "openShifts"
    SCHEDULING_GROUPS = "schedulingGroups"
    SHIFTS = "shifts"
    SWAP_SHIFTS_CHANGE_REQUESTS = "swapShiftsChangeRequests"
    TIME_OFF_REASONS = "timeOffReasons"
    TIME_OFF_REQUESTS = "timeOffRequests"
    TIMES_OFF = "timesOff"

class Enum139(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    ASSIGNED_TO = "assignedTo"
    ASSIGNED_TO_DESC = "assignedTo desc"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_DATE_TIME_DESC = "managerActionDateTime desc"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_ACTION_MESSAGE_DESC = "managerActionMessage desc"
    MANAGER_USER_ID = "managerUserId"
    MANAGER_USER_ID_DESC = "managerUserId desc"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_DATE_TIME_DESC = "senderDateTime desc"
    SENDER_MESSAGE = "senderMessage"
    SENDER_MESSAGE_DESC = "senderMessage desc"
    SENDER_USER_ID = "senderUserId"
    SENDER_USER_ID_DESC = "senderUserId desc"
    STATE = "state"
    STATE_DESC = "state desc"
    RECIPIENT_ACTION_DATE_TIME = "recipientActionDateTime"
    RECIPIENT_ACTION_DATE_TIME_DESC = "recipientActionDateTime desc"
    RECIPIENT_ACTION_MESSAGE = "recipientActionMessage"
    RECIPIENT_ACTION_MESSAGE_DESC = "recipientActionMessage desc"
    RECIPIENT_USER_ID = "recipientUserId"
    RECIPIENT_USER_ID_DESC = "recipientUserId desc"
    SENDER_SHIFT_ID = "senderShiftId"
    SENDER_SHIFT_ID_DESC = "senderShiftId desc"

class Enum140(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    RECIPIENT_ACTION_DATE_TIME = "recipientActionDateTime"
    RECIPIENT_ACTION_MESSAGE = "recipientActionMessage"
    RECIPIENT_USER_ID = "recipientUserId"
    SENDER_SHIFT_ID = "senderShiftId"

class Enum141(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    RECIPIENT_ACTION_DATE_TIME = "recipientActionDateTime"
    RECIPIENT_ACTION_MESSAGE = "recipientActionMessage"
    RECIPIENT_USER_ID = "recipientUserId"
    SENDER_SHIFT_ID = "senderShiftId"

class Enum142(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    ASSIGNED_TO = "assignedTo"
    ASSIGNED_TO_DESC = "assignedTo desc"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_DATE_TIME_DESC = "managerActionDateTime desc"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_ACTION_MESSAGE_DESC = "managerActionMessage desc"
    MANAGER_USER_ID = "managerUserId"
    MANAGER_USER_ID_DESC = "managerUserId desc"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_DATE_TIME_DESC = "senderDateTime desc"
    SENDER_MESSAGE = "senderMessage"
    SENDER_MESSAGE_DESC = "senderMessage desc"
    SENDER_USER_ID = "senderUserId"
    SENDER_USER_ID_DESC = "senderUserId desc"
    STATE = "state"
    STATE_DESC = "state desc"
    OPEN_SHIFT_ID = "openShiftId"
    OPEN_SHIFT_ID_DESC = "openShiftId desc"

class Enum143(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    OPEN_SHIFT_ID = "openShiftId"

class Enum144(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    OPEN_SHIFT_ID = "openShiftId"

class Enum145(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    DRAFT_OPEN_SHIFT = "draftOpenShift"
    DRAFT_OPEN_SHIFT_DESC = "draftOpenShift desc"
    SCHEDULING_GROUP_ID = "schedulingGroupId"
    SCHEDULING_GROUP_ID_DESC = "schedulingGroupId desc"
    SHARED_OPEN_SHIFT = "sharedOpenShift"
    SHARED_OPEN_SHIFT_DESC = "sharedOpenShift desc"

class Enum146(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DRAFT_OPEN_SHIFT = "draftOpenShift"
    SCHEDULING_GROUP_ID = "schedulingGroupId"
    SHARED_OPEN_SHIFT = "sharedOpenShift"

class Enum147(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DRAFT_OPEN_SHIFT = "draftOpenShift"
    SCHEDULING_GROUP_ID = "schedulingGroupId"
    SHARED_OPEN_SHIFT = "sharedOpenShift"

class Enum148(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    IS_ACTIVE = "isActive"
    IS_ACTIVE_DESC = "isActive desc"
    USER_IDS = "userIds"
    USER_IDS_DESC = "userIds desc"

class Enum149(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DISPLAY_NAME = "displayName"
    IS_ACTIVE = "isActive"
    USER_IDS = "userIds"

class Enum150(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DISPLAY_NAME = "displayName"
    IS_ACTIVE = "isActive"
    USER_IDS = "userIds"

class Enum151(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    DRAFT_SHIFT = "draftShift"
    DRAFT_SHIFT_DESC = "draftShift desc"
    SCHEDULING_GROUP_ID = "schedulingGroupId"
    SCHEDULING_GROUP_ID_DESC = "schedulingGroupId desc"
    SHARED_SHIFT = "sharedShift"
    SHARED_SHIFT_DESC = "sharedShift desc"
    USER_ID = "userId"
    USER_ID_DESC = "userId desc"

class Enum152(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DRAFT_SHIFT = "draftShift"
    SCHEDULING_GROUP_ID = "schedulingGroupId"
    SHARED_SHIFT = "sharedShift"
    USER_ID = "userId"

class Enum153(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DRAFT_SHIFT = "draftShift"
    SCHEDULING_GROUP_ID = "schedulingGroupId"
    SHARED_SHIFT = "sharedShift"
    USER_ID = "userId"

class Enum154(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    ASSIGNED_TO = "assignedTo"
    ASSIGNED_TO_DESC = "assignedTo desc"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_DATE_TIME_DESC = "managerActionDateTime desc"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_ACTION_MESSAGE_DESC = "managerActionMessage desc"
    MANAGER_USER_ID = "managerUserId"
    MANAGER_USER_ID_DESC = "managerUserId desc"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_DATE_TIME_DESC = "senderDateTime desc"
    SENDER_MESSAGE = "senderMessage"
    SENDER_MESSAGE_DESC = "senderMessage desc"
    SENDER_USER_ID = "senderUserId"
    SENDER_USER_ID_DESC = "senderUserId desc"
    STATE = "state"
    STATE_DESC = "state desc"
    RECIPIENT_ACTION_DATE_TIME = "recipientActionDateTime"
    RECIPIENT_ACTION_DATE_TIME_DESC = "recipientActionDateTime desc"
    RECIPIENT_ACTION_MESSAGE = "recipientActionMessage"
    RECIPIENT_ACTION_MESSAGE_DESC = "recipientActionMessage desc"
    RECIPIENT_USER_ID = "recipientUserId"
    RECIPIENT_USER_ID_DESC = "recipientUserId desc"
    SENDER_SHIFT_ID = "senderShiftId"
    SENDER_SHIFT_ID_DESC = "senderShiftId desc"
    RECIPIENT_SHIFT_ID = "recipientShiftId"
    RECIPIENT_SHIFT_ID_DESC = "recipientShiftId desc"

class Enum155(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    RECIPIENT_ACTION_DATE_TIME = "recipientActionDateTime"
    RECIPIENT_ACTION_MESSAGE = "recipientActionMessage"
    RECIPIENT_USER_ID = "recipientUserId"
    SENDER_SHIFT_ID = "senderShiftId"
    RECIPIENT_SHIFT_ID = "recipientShiftId"

class Enum156(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    RECIPIENT_ACTION_DATE_TIME = "recipientActionDateTime"
    RECIPIENT_ACTION_MESSAGE = "recipientActionMessage"
    RECIPIENT_USER_ID = "recipientUserId"
    SENDER_SHIFT_ID = "senderShiftId"
    RECIPIENT_SHIFT_ID = "recipientShiftId"

class Enum157(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    ICON_TYPE = "iconType"
    ICON_TYPE_DESC = "iconType desc"
    IS_ACTIVE = "isActive"
    IS_ACTIVE_DESC = "isActive desc"

class Enum158(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DISPLAY_NAME = "displayName"
    ICON_TYPE = "iconType"
    IS_ACTIVE = "isActive"

class Enum159(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DISPLAY_NAME = "displayName"
    ICON_TYPE = "iconType"
    IS_ACTIVE = "isActive"

class Enum160(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    ASSIGNED_TO = "assignedTo"
    ASSIGNED_TO_DESC = "assignedTo desc"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_DATE_TIME_DESC = "managerActionDateTime desc"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_ACTION_MESSAGE_DESC = "managerActionMessage desc"
    MANAGER_USER_ID = "managerUserId"
    MANAGER_USER_ID_DESC = "managerUserId desc"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_DATE_TIME_DESC = "senderDateTime desc"
    SENDER_MESSAGE = "senderMessage"
    SENDER_MESSAGE_DESC = "senderMessage desc"
    SENDER_USER_ID = "senderUserId"
    SENDER_USER_ID_DESC = "senderUserId desc"
    STATE = "state"
    STATE_DESC = "state desc"
    END_DATE_TIME = "endDateTime"
    END_DATE_TIME_DESC = "endDateTime desc"
    START_DATE_TIME = "startDateTime"
    START_DATE_TIME_DESC = "startDateTime desc"
    TIME_OFF_REASON_ID = "timeOffReasonId"
    TIME_OFF_REASON_ID_DESC = "timeOffReasonId desc"

class Enum161(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    END_DATE_TIME = "endDateTime"
    START_DATE_TIME = "startDateTime"
    TIME_OFF_REASON_ID = "timeOffReasonId"

class Enum162(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    ASSIGNED_TO = "assignedTo"
    MANAGER_ACTION_DATE_TIME = "managerActionDateTime"
    MANAGER_ACTION_MESSAGE = "managerActionMessage"
    MANAGER_USER_ID = "managerUserId"
    SENDER_DATE_TIME = "senderDateTime"
    SENDER_MESSAGE = "senderMessage"
    SENDER_USER_ID = "senderUserId"
    STATE = "state"
    END_DATE_TIME = "endDateTime"
    START_DATE_TIME = "startDateTime"
    TIME_OFF_REASON_ID = "timeOffReasonId"

class Enum163(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    DRAFT_TIME_OFF = "draftTimeOff"
    DRAFT_TIME_OFF_DESC = "draftTimeOff desc"
    SHARED_TIME_OFF = "sharedTimeOff"
    SHARED_TIME_OFF_DESC = "sharedTimeOff desc"
    USER_ID = "userId"
    USER_ID_DESC = "userId desc"

class Enum164(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DRAFT_TIME_OFF = "draftTimeOff"
    SHARED_TIME_OFF = "sharedTimeOff"
    USER_ID = "userId"

class Enum165(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DRAFT_TIME_OFF = "draftTimeOff"
    SHARED_TIME_OFF = "sharedTimeOff"
    USER_ID = "userId"

class Enum167(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    WORKFORCE_INTEGRATIONS = "workforceIntegrations"

class Enum170(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    API_VERSION = "apiVersion"
    API_VERSION_DESC = "apiVersion desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    ENCRYPTION = "encryption"
    ENCRYPTION_DESC = "encryption desc"
    IS_ACTIVE = "isActive"
    IS_ACTIVE_DESC = "isActive desc"
    SUPPORTED_ENTITIES = "supportedEntities"
    SUPPORTED_ENTITIES_DESC = "supportedEntities desc"
    URL = "url"
    URL_DESC = "url desc"

class Enum171(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    API_VERSION = "apiVersion"
    DISPLAY_NAME = "displayName"
    ENCRYPTION = "encryption"
    IS_ACTIVE = "isActive"
    SUPPORTED_ENTITIES = "supportedEntities"
    URL = "url"

class Enum172(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    API_VERSION = "apiVersion"
    DISPLAY_NAME = "displayName"
    ENCRYPTION = "encryption"
    IS_ACTIVE = "isActive"
    SUPPORTED_ENTITIES = "supportedEntities"
    URL = "url"

class Enum173(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLASSIFICATION = "classification"
    CLASSIFICATION_DESC = "classification desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    FUN_SETTINGS = "funSettings"
    FUN_SETTINGS_DESC = "funSettings desc"
    GUEST_SETTINGS = "guestSettings"
    GUEST_SETTINGS_DESC = "guestSettings desc"
    INTERNAL_ID = "internalId"
    INTERNAL_ID_DESC = "internalId desc"
    IS_ARCHIVED = "isArchived"
    IS_ARCHIVED_DESC = "isArchived desc"
    MEMBER_SETTINGS = "memberSettings"
    MEMBER_SETTINGS_DESC = "memberSettings desc"
    MESSAGING_SETTINGS = "messagingSettings"
    MESSAGING_SETTINGS_DESC = "messagingSettings desc"
    SPECIALIZATION = "specialization"
    SPECIALIZATION_DESC = "specialization desc"
    VISIBILITY = "visibility"
    VISIBILITY_DESC = "visibility desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum174(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSIFICATION = "classification"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    FUN_SETTINGS = "funSettings"
    GUEST_SETTINGS = "guestSettings"
    INTERNAL_ID = "internalId"
    IS_ARCHIVED = "isArchived"
    MEMBER_SETTINGS = "memberSettings"
    MESSAGING_SETTINGS = "messagingSettings"
    SPECIALIZATION = "specialization"
    VISIBILITY = "visibility"
    WEB_URL = "webUrl"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum175(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum176(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSIFICATION = "classification"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    FUN_SETTINGS = "funSettings"
    GUEST_SETTINGS = "guestSettings"
    INTERNAL_ID = "internalId"
    IS_ARCHIVED = "isArchived"
    MEMBER_SETTINGS = "memberSettings"
    MESSAGING_SETTINGS = "messagingSettings"
    SPECIALIZATION = "specialization"
    VISIBILITY = "visibility"
    WEB_URL = "webUrl"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum177(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum62(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLASSIFICATION = "classification"
    CLASSIFICATION_DESC = "classification desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    FUN_SETTINGS = "funSettings"
    FUN_SETTINGS_DESC = "funSettings desc"
    GUEST_SETTINGS = "guestSettings"
    GUEST_SETTINGS_DESC = "guestSettings desc"
    INTERNAL_ID = "internalId"
    INTERNAL_ID_DESC = "internalId desc"
    IS_ARCHIVED = "isArchived"
    IS_ARCHIVED_DESC = "isArchived desc"
    MEMBER_SETTINGS = "memberSettings"
    MEMBER_SETTINGS_DESC = "memberSettings desc"
    MESSAGING_SETTINGS = "messagingSettings"
    MESSAGING_SETTINGS_DESC = "messagingSettings desc"
    SPECIALIZATION = "specialization"
    SPECIALIZATION_DESC = "specialization desc"
    VISIBILITY = "visibility"
    VISIBILITY_DESC = "visibility desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum63(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSIFICATION = "classification"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    FUN_SETTINGS = "funSettings"
    GUEST_SETTINGS = "guestSettings"
    INTERNAL_ID = "internalId"
    IS_ARCHIVED = "isArchived"
    MEMBER_SETTINGS = "memberSettings"
    MESSAGING_SETTINGS = "messagingSettings"
    SPECIALIZATION = "specialization"
    VISIBILITY = "visibility"
    WEB_URL = "webUrl"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum64(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum65(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSIFICATION = "classification"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    FUN_SETTINGS = "funSettings"
    GUEST_SETTINGS = "guestSettings"
    INTERNAL_ID = "internalId"
    IS_ARCHIVED = "isArchived"
    MEMBER_SETTINGS = "memberSettings"
    MESSAGING_SETTINGS = "messagingSettings"
    SPECIALIZATION = "specialization"
    VISIBILITY = "visibility"
    WEB_URL = "webUrl"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum66(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum67(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    EMAIL = "email"
    EMAIL_DESC = "email desc"
    MEMBERSHIP_TYPE = "membershipType"
    MEMBERSHIP_TYPE_DESC = "membershipType desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum68(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    EMAIL = "email"
    MEMBERSHIP_TYPE = "membershipType"
    WEB_URL = "webUrl"
    FILES_FOLDER = "filesFolder"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum7(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASSIFICATION = "classification"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    FUN_SETTINGS = "funSettings"
    GUEST_SETTINGS = "guestSettings"
    INTERNAL_ID = "internalId"
    IS_ARCHIVED = "isArchived"
    MEMBER_SETTINGS = "memberSettings"
    MESSAGING_SETTINGS = "messagingSettings"
    SPECIALIZATION = "specialization"
    VISIBILITY = "visibility"
    WEB_URL = "webUrl"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum70(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    EMAIL = "email"
    MEMBERSHIP_TYPE = "membershipType"
    WEB_URL = "webUrl"
    FILES_FOLDER = "filesFolder"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Enum72(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    E_TAG = "eTag"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    NAME = "name"
    PARENT_REFERENCE = "parentReference"
    WEB_URL = "webUrl"
    AUDIO = "audio"
    CONTENT = "content"
    C_TAG = "cTag"
    DELETED = "deleted"
    FILE = "file"
    FILE_SYSTEM_INFO = "fileSystemInfo"
    FOLDER = "folder"
    IMAGE = "image"
    LOCATION = "location"
    PACKAGE = "package"
    PENDING_OPERATIONS = "pendingOperations"
    PHOTO = "photo"
    PUBLICATION = "publication"
    REMOTE_ITEM = "remoteItem"
    ROOT = "root"
    SEARCH_RESULT = "searchResult"
    SHARED = "shared"
    SHAREPOINT_IDS = "sharepointIds"
    SIZE = "size"
    SPECIAL_FOLDER = "specialFolder"
    VIDEO = "video"
    WEB_DAV_URL = "webDavUrl"
    CREATED_BY_USER = "createdByUser"
    LAST_MODIFIED_BY_USER = "lastModifiedByUser"
    WORKBOOK = "workbook"
    ANALYTICS = "analytics"
    CHILDREN = "children"
    LIST_ITEM = "listItem"
    PERMISSIONS = "permissions"
    SUBSCRIPTIONS = "subscriptions"
    THUMBNAILS = "thumbnails"
    VERSIONS = "versions"

class Enum73(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CREATED_BY_USER = "createdByUser"
    LAST_MODIFIED_BY_USER = "lastModifiedByUser"
    WORKBOOK = "workbook"
    ANALYTICS = "analytics"
    CHILDREN = "children"
    LIST_ITEM = "listItem"
    PERMISSIONS = "permissions"
    SUBSCRIPTIONS = "subscriptions"
    THUMBNAILS = "thumbnails"
    VERSIONS = "versions"

class Enum74(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    ROLES = "roles"
    ROLES_DESC = "roles desc"

class Enum75(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    ROLES = "roles"

class Enum76(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    ROLES = "roles"

class Enum77(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ATTACHMENTS = "attachments"
    ATTACHMENTS_DESC = "attachments desc"
    BODY = "body"
    BODY_DESC = "body desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    ETAG = "etag"
    ETAG_DESC = "etag desc"
    FROM_ENUM = "from"
    FROM_DESC = "from desc"
    IMPORTANCE = "importance"
    IMPORTANCE_DESC = "importance desc"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_EDITED_DATE_TIME_DESC = "lastEditedDateTime desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LOCALE = "locale"
    LOCALE_DESC = "locale desc"
    MENTIONS = "mentions"
    MENTIONS_DESC = "mentions desc"
    MESSAGE_TYPE = "messageType"
    MESSAGE_TYPE_DESC = "messageType desc"
    POLICY_VIOLATION = "policyViolation"
    POLICY_VIOLATION_DESC = "policyViolation desc"
    REACTIONS = "reactions"
    REACTIONS_DESC = "reactions desc"
    REPLY_TO_ID = "replyToId"
    REPLY_TO_ID_DESC = "replyToId desc"
    SUBJECT = "subject"
    SUBJECT_DESC = "subject desc"
    SUMMARY = "summary"
    SUMMARY_DESC = "summary desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum78(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum79(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum8(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SCHEDULE = "schedule"
    CHANNELS = "channels"
    GROUP = "group"
    INSTALLED_APPS = "installedApps"
    MEMBERS = "members"
    OPERATIONS = "operations"
    PRIMARY_CHANNEL = "primaryChannel"
    TEMPLATE = "template"

class Enum80(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum81(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum82(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum83(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ATTACHMENTS = "attachments"
    ATTACHMENTS_DESC = "attachments desc"
    BODY = "body"
    BODY_DESC = "body desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    ETAG = "etag"
    ETAG_DESC = "etag desc"
    FROM_ENUM = "from"
    FROM_DESC = "from desc"
    IMPORTANCE = "importance"
    IMPORTANCE_DESC = "importance desc"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_EDITED_DATE_TIME_DESC = "lastEditedDateTime desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LOCALE = "locale"
    LOCALE_DESC = "locale desc"
    MENTIONS = "mentions"
    MENTIONS_DESC = "mentions desc"
    MESSAGE_TYPE = "messageType"
    MESSAGE_TYPE_DESC = "messageType desc"
    POLICY_VIOLATION = "policyViolation"
    POLICY_VIOLATION_DESC = "policyViolation desc"
    REACTIONS = "reactions"
    REACTIONS_DESC = "reactions desc"
    REPLY_TO_ID = "replyToId"
    REPLY_TO_ID_DESC = "replyToId desc"
    SUBJECT = "subject"
    SUBJECT_DESC = "subject desc"
    SUMMARY = "summary"
    SUMMARY_DESC = "summary desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum84(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum85(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum86(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ATTACHMENTS = "attachments"
    BODY = "body"
    CREATED_DATE_TIME = "createdDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    ETAG = "etag"
    FROM_ENUM = "from"
    IMPORTANCE = "importance"
    LAST_EDITED_DATE_TIME = "lastEditedDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LOCALE = "locale"
    MENTIONS = "mentions"
    MESSAGE_TYPE = "messageType"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    REPLY_TO_ID = "replyToId"
    SUBJECT = "subject"
    SUMMARY = "summary"
    WEB_URL = "webUrl"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum87(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    HOSTED_CONTENTS = "hostedContents"
    REPLIES = "replies"

class Enum88(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CONFIGURATION = "configuration"
    CONFIGURATION_DESC = "configuration desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum89(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONFIGURATION = "configuration"
    DISPLAY_NAME = "displayName"
    WEB_URL = "webUrl"
    TEAMS_APP = "teamsApp"

class Enum90(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"

class Enum91(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONFIGURATION = "configuration"
    DISPLAY_NAME = "displayName"
    WEB_URL = "webUrl"
    TEAMS_APP = "teamsApp"

class Enum92(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"

class Enum93(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DISTRIBUTION_METHOD = "distributionMethod"
    EXTERNAL_ID = "externalId"
    APP_DEFINITIONS = "appDefinitions"

class Enum94(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_DEFINITIONS = "appDefinitions"

class Enum95(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    ASSIGNED_LABELS = "assignedLabels"
    ASSIGNED_LICENSES = "assignedLicenses"
    CLASSIFICATION = "classification"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    EXPIRATION_DATE_TIME = "expirationDateTime"
    GROUP_TYPES = "groupTypes"
    HAS_MEMBERS_WITH_LICENSE_ERRORS = "hasMembersWithLicenseErrors"
    LICENSE_PROCESSING_STATE = "licenseProcessingState"
    MAIL = "mail"
    MAIL_ENABLED = "mailEnabled"
    MAIL_NICKNAME = "mailNickname"
    MEMBERSHIP_RULE = "membershipRule"
    MEMBERSHIP_RULE_PROCESSING_STATE = "membershipRuleProcessingState"
    ON_PREMISES_DOMAIN_NAME = "onPremisesDomainName"
    ON_PREMISES_LAST_SYNC_DATE_TIME = "onPremisesLastSyncDateTime"
    ON_PREMISES_NET_BIOS_NAME = "onPremisesNetBiosName"
    ON_PREMISES_PROVISIONING_ERRORS = "onPremisesProvisioningErrors"
    ON_PREMISES_SAM_ACCOUNT_NAME = "onPremisesSamAccountName"
    ON_PREMISES_SECURITY_IDENTIFIER = "onPremisesSecurityIdentifier"
    ON_PREMISES_SYNC_ENABLED = "onPremisesSyncEnabled"
    PREFERRED_DATA_LOCATION = "preferredDataLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROXY_ADDRESSES = "proxyAddresses"
    RENEWED_DATE_TIME = "renewedDateTime"
    SECURITY_ENABLED = "securityEnabled"
    SECURITY_IDENTIFIER = "securityIdentifier"
    THEME = "theme"
    VISIBILITY = "visibility"
    ALLOW_EXTERNAL_SENDERS = "allowExternalSenders"
    AUTO_SUBSCRIBE_NEW_MEMBERS = "autoSubscribeNewMembers"
    HIDE_FROM_ADDRESS_LISTS = "hideFromAddressLists"
    HIDE_FROM_OUTLOOK_CLIENTS = "hideFromOutlookClients"
    IS_SUBSCRIBED_BY_MAIL = "isSubscribedByMail"
    UNSEEN_COUNT = "unseenCount"
    IS_ARCHIVED = "isArchived"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    CREATED_ON_BEHALF_OF = "createdOnBehalfOf"
    MEMBER_OF = "memberOf"
    MEMBERS = "members"
    MEMBERS_WITH_LICENSE_ERRORS = "membersWithLicenseErrors"
    OWNERS = "owners"
    SETTINGS = "settings"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    TRANSITIVE_MEMBERS = "transitiveMembers"
    ACCEPTED_SENDERS = "acceptedSenders"
    CALENDAR = "calendar"
    CALENDAR_VIEW = "calendarView"
    CONVERSATIONS = "conversations"
    EVENTS = "events"
    PHOTO = "photo"
    PHOTOS = "photos"
    REJECTED_SENDERS = "rejectedSenders"
    THREADS = "threads"
    DRIVE = "drive"
    DRIVES = "drives"
    SITES = "sites"
    EXTENSIONS = "extensions"
    GROUP_LIFECYCLE_POLICIES = "groupLifecyclePolicies"
    PLANNER = "planner"
    ONENOTE = "onenote"
    TEAM = "team"

class Enum96(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    CREATED_ON_BEHALF_OF = "createdOnBehalfOf"
    MEMBER_OF = "memberOf"
    MEMBERS = "members"
    MEMBERS_WITH_LICENSE_ERRORS = "membersWithLicenseErrors"
    OWNERS = "owners"
    SETTINGS = "settings"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    TRANSITIVE_MEMBERS = "transitiveMembers"
    ACCEPTED_SENDERS = "acceptedSenders"
    CALENDAR = "calendar"
    CALENDAR_VIEW = "calendarView"
    CONVERSATIONS = "conversations"
    EVENTS = "events"
    PHOTO = "photo"
    PHOTOS = "photos"
    REJECTED_SENDERS = "rejectedSenders"
    THREADS = "threads"
    DRIVE = "drive"
    DRIVES = "drives"
    SITES = "sites"
    EXTENSIONS = "extensions"
    GROUP_LIFECYCLE_POLICIES = "groupLifecyclePolicies"
    PLANNER = "planner"
    ONENOTE = "onenote"
    TEAM = "team"

class Enum97(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum98(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Enum99(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Get0ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    WORKFORCE_INTEGRATIONS = "workforceIntegrations"

class Get3ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    FILES_FOLDER = "filesFolder"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class Get5ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Get8ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    FILES_FOLDER = "filesFolder"
    MEMBERS = "members"
    MESSAGES = "messages"
    TABS = "tabs"

class MicrosoftGraphActionState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    PENDING = "pending"
    CANCELED = "canceled"
    ACTIVE = "active"
    DONE = "done"
    FAILED = "failed"
    NOT_SUPPORTED = "notSupported"

class MicrosoftGraphAttendeeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REQUIRED = "required"
    OPTIONAL = "optional"
    RESOURCE = "resource"

class MicrosoftGraphAutomaticRepliesStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISABLED = "disabled"
    ALWAYS_ENABLED = "alwaysEnabled"
    SCHEDULED = "scheduled"

class MicrosoftGraphBodyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TEXT = "text"
    HTML = "html"

class MicrosoftGraphCalendarColor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LIGHT_BLUE = "lightBlue"
    LIGHT_GREEN = "lightGreen"
    AUTO = "auto"
    LIGHT_ORANGE = "lightOrange"
    LIGHT_GRAY = "lightGray"
    LIGHT_YELLOW = "lightYellow"
    LIGHT_TEAL = "lightTeal"
    LIGHT_PINK = "lightPink"
    LIGHT_BROWN = "lightBrown"
    LIGHT_RED = "lightRed"
    MAX_COLOR = "maxColor"

class MicrosoftGraphCalendarRoleType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    FREE_BUSY_READ = "freeBusyRead"
    LIMITED_READ = "limitedRead"
    READ = "read"
    WRITE = "write"
    DELEGATE_WITHOUT_PRIVATE_EVENT_ACCESS = "delegateWithoutPrivateEventAccess"
    DELEGATE_WITH_PRIVATE_EVENT_ACCESS = "delegateWithPrivateEventAccess"
    CUSTOM = "custom"

class MicrosoftGraphCategoryColor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRESET0 = "preset0"
    PRESET1 = "preset1"
    NONE = "none"
    PRESET2 = "preset2"
    PRESET3 = "preset3"
    PRESET4 = "preset4"
    PRESET5 = "preset5"
    PRESET6 = "preset6"
    PRESET7 = "preset7"
    PRESET8 = "preset8"
    PRESET9 = "preset9"
    PRESET10 = "preset10"
    PRESET11 = "preset11"
    PRESET12 = "preset12"
    PRESET13 = "preset13"
    PRESET14 = "preset14"
    PRESET15 = "preset15"
    PRESET16 = "preset16"
    PRESET17 = "preset17"
    PRESET18 = "preset18"
    PRESET19 = "preset19"
    PRESET20 = "preset20"
    PRESET21 = "preset21"
    PRESET22 = "preset22"
    PRESET23 = "preset23"
    PRESET24 = "preset24"

class MicrosoftGraphChannelMembershipType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STANDARD = "standard"
    PRIVATE = "private"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphChatMessageImportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphChatMessagePolicyViolationDlpActionTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    NOTIFY_SENDER = "notifySender"
    BLOCK_ACCESS = "blockAccess"
    BLOCK_ACCESS_EXTERNAL = "blockAccessExternal"

class MicrosoftGraphChatMessagePolicyViolationUserActionTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    OVERRIDE = "override"
    REPORT_FALSE_POSITIVE = "reportFalsePositive"

class MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ALLOW_FALSE_POSITIVE_OVERRIDE = "allowFalsePositiveOverride"
    ALLOW_OVERRIDE_WITHOUT_JUSTIFICATION = "allowOverrideWithoutJustification"
    ALLOW_OVERRIDE_WITH_JUSTIFICATION = "allowOverrideWithJustification"

class MicrosoftGraphChatMessageType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MESSAGE = "message"
    CHAT_EVENT = "chatEvent"
    TYPING = "typing"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphClonableTeamParts(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    APPS = "apps"
    TABS = "tabs"
    SETTINGS = "settings"
    CHANNELS = "channels"
    MEMBERS = "members"

class MicrosoftGraphComplianceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPLIANT = "compliant"
    NONCOMPLIANT = "noncompliant"
    CONFLICT = "conflict"
    ERROR = "error"
    IN_GRACE_PERIOD = "inGracePeriod"
    CONFIG_MANAGER = "configManager"

class MicrosoftGraphComplianceStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    NOT_APPLICABLE = "notApplicable"
    COMPLIANT = "compliant"
    REMEDIATED = "remediated"
    NON_COMPLIANT = "nonCompliant"
    ERROR = "error"
    CONFLICT = "conflict"
    NOT_ASSIGNED = "notAssigned"

class MicrosoftGraphDayOfWeek(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUNDAY = "sunday"
    MONDAY = "monday"
    TUESDAY = "tuesday"
    WEDNESDAY = "wednesday"
    THURSDAY = "thursday"
    FRIDAY = "friday"
    SATURDAY = "saturday"

class MicrosoftGraphDelegateMeetingMessageDeliveryOptions(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SEND_TO_DELEGATE_AND_INFORMATION_TO_PRINCIPAL = "sendToDelegateAndInformationToPrincipal"
    SEND_TO_DELEGATE_AND_PRINCIPAL = "sendToDelegateAndPrincipal"
    SEND_TO_DELEGATE_ONLY = "sendToDelegateOnly"

class MicrosoftGraphDeviceEnrollmentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    USER_ENROLLMENT = "userEnrollment"
    DEVICE_ENROLLMENT_MANAGER = "deviceEnrollmentManager"
    APPLE_BULK_WITH_USER = "appleBulkWithUser"
    APPLE_BULK_WITHOUT_USER = "appleBulkWithoutUser"
    WINDOWS_AZURE_AD_JOIN = "windowsAzureADJoin"
    WINDOWS_BULK_USERLESS = "windowsBulkUserless"
    WINDOWS_AUTO_ENROLLMENT = "windowsAutoEnrollment"
    WINDOWS_BULK_AZURE_DOMAIN_JOIN = "windowsBulkAzureDomainJoin"
    WINDOWS_CO_MANAGEMENT = "windowsCoManagement"

class MicrosoftGraphDeviceManagementExchangeAccessState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    ALLOWED = "allowed"
    BLOCKED = "blocked"
    QUARANTINED = "quarantined"

class MicrosoftGraphDeviceManagementExchangeAccessStateReason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    EXCHANGE_GLOBAL_RULE = "exchangeGlobalRule"
    EXCHANGE_INDIVIDUAL_RULE = "exchangeIndividualRule"
    EXCHANGE_DEVICE_RULE = "exchangeDeviceRule"
    EXCHANGE_UPGRADE = "exchangeUpgrade"
    EXCHANGE_MAILBOX_POLICY = "exchangeMailboxPolicy"
    OTHER = "other"
    COMPLIANT = "compliant"
    NOT_COMPLIANT = "notCompliant"
    NOT_ENROLLED = "notEnrolled"
    UNKNOWN_LOCATION = "unknownLocation"
    MFA_REQUIRED = "mfaRequired"
    AZURE_AD_BLOCK_DUE_TO_ACCESS_POLICY = "azureADBlockDueToAccessPolicy"
    COMPROMISED_PASSWORD = "compromisedPassword"
    DEVICE_NOT_KNOWN_WITH_MANAGED_APP = "deviceNotKnownWithManagedApp"

class MicrosoftGraphDeviceRegistrationState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_REGISTERED = "notRegistered"
    REGISTERED = "registered"
    REVOKED = "revoked"
    KEY_CONFLICT = "keyConflict"
    APPROVAL_PENDING = "approvalPending"
    CERTIFICATE_RESET = "certificateReset"
    NOT_REGISTERED_PENDING_ENROLLMENT = "notRegisteredPendingEnrollment"
    UNKNOWN = "unknown"

class MicrosoftGraphEventType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SINGLE_INSTANCE = "singleInstance"
    OCCURRENCE = "occurrence"
    EXCEPTION = "exception"
    SERIES_MASTER = "seriesMaster"

class MicrosoftGraphExternalAudienceScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CONTACTS_ONLY = "contactsOnly"
    ALL = "all"

class MicrosoftGraphFollowupFlagStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_FLAGGED = "notFlagged"
    COMPLETE = "complete"
    FLAGGED = "flagged"

class MicrosoftGraphFreeBusyStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FREE = "free"
    TENTATIVE = "tentative"
    UNKNOWN = "unknown"
    BUSY = "busy"
    OOF = "oof"
    WORKING_ELSEWHERE = "workingElsewhere"

class MicrosoftGraphGiphyRatingType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STRICT = "strict"
    MODERATE = "moderate"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphImportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"

class MicrosoftGraphInferenceClassificationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FOCUSED = "focused"
    OTHER = "other"

class MicrosoftGraphLocationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "default"
    CONFERENCE_ROOM = "conferenceRoom"
    HOME_ADDRESS = "homeAddress"
    BUSINESS_ADDRESS = "businessAddress"
    GEO_COORDINATES = "geoCoordinates"
    STREET_ADDRESS = "streetAddress"
    HOTEL = "hotel"
    RESTAURANT = "restaurant"
    LOCAL_BUSINESS = "localBusiness"
    POSTAL_ADDRESS = "postalAddress"

class MicrosoftGraphLocationUniqueIdType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    LOCATION_STORE = "locationStore"
    DIRECTORY = "directory"
    PRIVATE = "private"
    BING = "bing"

class MicrosoftGraphManagedAppFlaggedReason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ROOTED_DEVICE = "rootedDevice"

class MicrosoftGraphManagedDeviceOwnerType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPANY = "company"
    PERSONAL = "personal"

class MicrosoftGraphManagedDevicePartnerReportedHealthState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    ACTIVATED = "activated"
    DEACTIVATED = "deactivated"
    SECURED = "secured"
    LOW_SEVERITY = "lowSeverity"
    MEDIUM_SEVERITY = "mediumSeverity"
    HIGH_SEVERITY = "highSeverity"
    UNRESPONSIVE = "unresponsive"
    COMPROMISED = "compromised"
    MISCONFIGURED = "misconfigured"

class MicrosoftGraphManagementAgentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EAS = "eas"
    MDM = "mdm"
    EAS_MDM = "easMdm"
    INTUNE_CLIENT = "intuneClient"
    EAS_INTUNE_CLIENT = "easIntuneClient"
    CONFIGURATION_MANAGER_CLIENT = "configurationManagerClient"
    CONFIGURATION_MANAGER_CLIENT_MDM = "configurationManagerClientMdm"
    CONFIGURATION_MANAGER_CLIENT_MDM_EAS = "configurationManagerClientMdmEas"
    UNKNOWN = "unknown"
    JAMF = "jamf"
    GOOGLE_CLOUD_DEVICE_POLICY_CONTROLLER = "googleCloudDevicePolicyController"

class MicrosoftGraphMessageActionFlag(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANY = "any"
    CALL = "call"
    DO_NOT_FORWARD = "doNotForward"
    FOLLOW_UP = "followUp"
    FYI = "fyi"
    FORWARD = "forward"
    NO_RESPONSE_NECESSARY = "noResponseNecessary"
    READ = "read"
    REPLY = "reply"
    REPLY_TO_ALL = "replyToAll"
    REVIEW = "review"

class MicrosoftGraphOnenoteUserRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OWNER = "Owner"
    CONTRIBUTOR = "Contributor"
    NONE = "None"
    READER = "Reader"

class MicrosoftGraphOnlineMeetingProviderType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    SKYPE_FOR_BUSINESS = "skypeForBusiness"
    SKYPE_FOR_CONSUMER = "skypeForConsumer"
    TEAMS_FOR_BUSINESS = "teamsForBusiness"

class MicrosoftGraphOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "NotStarted"
    RUNNING = "Running"
    COMPLETED = "Completed"
    FAILED = "Failed"

class MicrosoftGraphPhoneType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    HOME = "home"
    BUSINESS = "business"
    MOBILE = "mobile"
    OTHER = "other"
    ASSISTANT = "assistant"
    HOME_FAX = "homeFax"
    BUSINESS_FAX = "businessFax"
    OTHER_FAX = "otherFax"
    PAGER = "pager"
    RADIO = "radio"

class MicrosoftGraphPlannerPreviewType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUTOMATIC = "automatic"
    NO_PREVIEW = "noPreview"
    CHECKLIST = "checklist"
    DESCRIPTION = "description"
    REFERENCE = "reference"

class MicrosoftGraphPolicyPlatformType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANDROID = "android"
    I_OS = "iOS"
    MAC_OS = "macOS"
    WINDOWS_PHONE81 = "windowsPhone81"
    WINDOWS81_AND_LATER = "windows81AndLater"
    WINDOWS10_AND_LATER = "windows10AndLater"
    ANDROID_WORK_PROFILE = "androidWorkProfile"
    ALL = "all"

class MicrosoftGraphRecurrencePatternType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DAILY = "daily"
    WEEKLY = "weekly"
    ABSOLUTE_MONTHLY = "absoluteMonthly"
    RELATIVE_MONTHLY = "relativeMonthly"
    ABSOLUTE_YEARLY = "absoluteYearly"
    RELATIVE_YEARLY = "relativeYearly"

class MicrosoftGraphRecurrenceRangeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    END_DATE = "endDate"
    NO_END = "noEnd"
    NUMBERED = "numbered"

class MicrosoftGraphResponseType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ORGANIZER = "organizer"
    TENTATIVELY_ACCEPTED = "tentativelyAccepted"
    ACCEPTED = "accepted"
    DECLINED = "declined"
    NOT_RESPONDED = "notResponded"

class MicrosoftGraphScheduleChangeRequestActor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SENDER = "sender"
    RECIPIENT = "recipient"
    MANAGER = "manager"
    SYSTEM = "system"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphScheduleChangeState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    APPROVED = "approved"
    DECLINED = "declined"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphScheduleEntityTheme(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    WHITE = "white"
    BLUE = "blue"
    GREEN = "green"
    PURPLE = "purple"
    PINK = "pink"
    YELLOW = "yellow"
    GRAY = "gray"
    DARK_BLUE = "darkBlue"
    DARK_GREEN = "darkGreen"
    DARK_PURPLE = "darkPurple"
    DARK_PINK = "darkPink"
    DARK_YELLOW = "darkYellow"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphSelectionLikelihoodInfo(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_SPECIFIED = "notSpecified"
    HIGH = "high"

class MicrosoftGraphSensitivity(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    PERSONAL = "personal"
    PRIVATE = "private"
    CONFIDENTIAL = "confidential"

class MicrosoftGraphStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "active"
    UPDATED = "updated"
    DELETED = "deleted"
    IGNORED = "ignored"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamsAppDistributionMethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STORE = "store"
    ORGANIZATION = "organization"
    SIDELOADED = "sideloaded"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamsAsyncOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    NOT_STARTED = "notStarted"
    IN_PROGRESS = "inProgress"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamsAsyncOperationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    CLONE_TEAM = "cloneTeam"
    ARCHIVE_TEAM = "archiveTeam"
    UNARCHIVE_TEAM = "unarchiveTeam"
    CREATE_TEAM = "createTeam"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamSpecialization(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    EDUCATION_STANDARD = "educationStandard"
    EDUCATION_CLASS = "educationClass"
    EDUCATION_PROFESSIONAL_LEARNING_COMMUNITY = "educationProfessionalLearningCommunity"
    EDUCATION_STAFF = "educationStaff"
    HEALTHCARE_STANDARD = "healthcareStandard"
    HEALTHCARE_CARE_COORDINATION = "healthcareCareCoordination"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamVisibilityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRIVATE = "private"
    PUBLIC = "public"
    HIDDEN_MEMBERSHIP = "hiddenMembership"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTimeOffReasonIconType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CAR = "car"
    CALENDAR = "calendar"
    RUNNING = "running"
    PLANE = "plane"
    FIRST_AID = "firstAid"
    DOCTOR = "doctor"
    NOT_WORKING = "notWorking"
    CLOCK = "clock"
    JURY_DUTY = "juryDuty"
    GLOBE = "globe"
    CUP = "cup"
    PHONE = "phone"
    WEATHER = "weather"
    UMBRELLA = "umbrella"
    PIGGY_BANK = "piggyBank"
    DOG = "dog"
    CAKE = "cake"
    TRAFFIC_CONE = "trafficCone"
    PIN = "pin"
    SUNNY = "sunny"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphWebsiteType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OTHER = "other"
    HOME = "home"
    WORK = "work"
    BLOG = "blog"
    PROFILE = "profile"

class MicrosoftGraphWeekIndex(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FIRST = "first"
    SECOND = "second"
    THIRD = "third"
    FOURTH = "fourth"
    LAST = "last"

class MicrosoftGraphWorkbookOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "notStarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"

class MicrosoftGraphWorkforceIntegrationEncryptionProtocol(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SHARED_SECRET = "sharedSecret"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphWorkforceIntegrationSupportedEntities(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    SHIFT = "shift"
    SWAP_REQUEST = "swapRequest"
    USER_SHIFT_PREFERENCES = "userShiftPreferences"
    OPEN_SHIFT = "openShift"
    OPEN_SHIFT_REQUEST = "openShiftRequest"
    OFFER_SHIFT_REQUEST = "offerShiftRequest"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"
