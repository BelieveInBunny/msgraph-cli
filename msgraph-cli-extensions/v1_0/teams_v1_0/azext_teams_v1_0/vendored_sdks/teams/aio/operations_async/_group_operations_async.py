# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class GroupOperations:
    """GroupOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~teams.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def get_team(
        self,
        group_id: str,
        select: Optional[List[Union[str, "models.Enum7"]]] = None,
        expand: Optional[List[Union[str, "models.Enum8"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphTeam":
        """Get team from groups.

        Get team from groups.

        :param group_id: key: id of group.
        :type group_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum7]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams.models.Enum8]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTeam, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTeam
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTeam"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_team.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTeam', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_team.metadata = {'url': '/groups/{group-id}/team'}  # type: ignore

    async def update_team(
        self,
        group_id: str,
        id: Optional[str] = None,
        classification: Optional[str] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        fun_settings: Optional["models.MicrosoftGraphTeamFunSettings"] = None,
        guest_settings: Optional["models.MicrosoftGraphTeamGuestSettings"] = None,
        internal_id: Optional[str] = None,
        is_archived: Optional[bool] = None,
        member_settings: Optional["models.MicrosoftGraphTeamMemberSettings"] = None,
        messaging_settings: Optional["models.MicrosoftGraphTeamMessagingSettings"] = None,
        specialization: Optional[Union[str, "models.MicrosoftGraphTeamSpecialization"]] = None,
        visibility: Optional[Union[str, "models.MicrosoftGraphTeamVisibilityType"]] = None,
        web_url: Optional[str] = None,
        channels: Optional[List["models.MicrosoftGraphChannel"]] = None,
        installed_apps: Optional[List["models.MicrosoftGraphTeamsAppInstallation"]] = None,
        members: Optional[List["models.MicrosoftGraphConversationMember"]] = None,
        operations: Optional[List["models.MicrosoftGraphTeamsAsyncOperation"]] = None,
        primary_channel: Optional["models.MicrosoftGraphChannel"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        id1: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        assigned_labels: Optional[List["models.MicrosoftGraphAssignedLabel"]] = None,
        assigned_licenses: Optional[List["models.MicrosoftGraphAssignedLicense"]] = None,
        microsoft_graph_group_classification: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        microsoft_graph_group_description: Optional[str] = None,
        microsoft_graph_group_display_name: Optional[str] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        group_types: Optional[List[str]] = None,
        has_members_with_license_errors: Optional[bool] = None,
        license_processing_state: Optional["models.MicrosoftGraphLicenseProcessingState"] = None,
        mail: Optional[str] = None,
        mail_enabled: Optional[bool] = None,
        mail_nickname: Optional[str] = None,
        membership_rule: Optional[str] = None,
        membership_rule_processing_state: Optional[str] = None,
        on_premises_domain_name: Optional[str] = None,
        on_premises_last_sync_date_time: Optional[datetime.datetime] = None,
        on_premises_net_bios_name: Optional[str] = None,
        on_premises_provisioning_errors: Optional[List["models.MicrosoftGraphOnPremisesProvisioningError"]] = None,
        on_premises_sam_account_name: Optional[str] = None,
        on_premises_security_identifier: Optional[str] = None,
        on_premises_sync_enabled: Optional[bool] = None,
        preferred_data_location: Optional[str] = None,
        preferred_language: Optional[str] = None,
        proxy_addresses: Optional[List[str]] = None,
        renewed_date_time: Optional[datetime.datetime] = None,
        security_enabled: Optional[bool] = None,
        security_identifier: Optional[str] = None,
        theme: Optional[str] = None,
        microsoft_graph_group_visibility: Optional[str] = None,
        allow_external_senders: Optional[bool] = None,
        auto_subscribe_new_members: Optional[bool] = None,
        hide_from_address_lists: Optional[bool] = None,
        hide_from_outlook_clients: Optional[bool] = None,
        is_subscribed_by_mail: Optional[bool] = None,
        unseen_count: Optional[int] = None,
        is_archived: Optional[bool] = None,
        app_role_assignments: Optional[List["models.MicrosoftGraphAppRoleAssignment"]] = None,
        created_on_behalf_of: Optional["models.MicrosoftGraphDirectoryObject"] = None,
        member_of: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        microsoft_graph_group_members: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        members_with_license_errors: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        owners: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        settings: Optional[List["models.MicrosoftGraphGroupSetting"]] = None,
        transitive_member_of: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        transitive_members: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        accepted_senders: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        calendar: Optional["models.MicrosoftGraphCalendar"] = None,
        calendar_view: Optional[List["models.MicrosoftGraphEvent"]] = None,
        conversations: Optional[List["models.MicrosoftGraphConversation"]] = None,
        events: Optional[List["models.MicrosoftGraphEvent"]] = None,
        photo: Optional["models.MicrosoftGraphProfilePhoto"] = None,
        photos: Optional[List["models.MicrosoftGraphProfilePhoto"]] = None,
        rejected_senders: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        threads: Optional[List["models.MicrosoftGraphConversationThread"]] = None,
        drive: Optional["models.MicrosoftGraphDrive"] = None,
        drives: Optional[List["models.MicrosoftGraphDrive"]] = None,
        sites: Optional[List["models.MicrosoftGraphSite"]] = None,
        extensions: Optional[List["models.MicrosoftGraphExtension"]] = None,
        group_lifecycle_policies: Optional[List["models.MicrosoftGraphGroupLifecyclePolicy"]] = None,
        planner: Optional["models.MicrosoftGraphPlannerGroup"] = None,
        onenote: Optional["models.MicrosoftGraphOnenote"] = None,
        team: Optional["models.MicrosoftGraphTeam"] = None,
        id2: Optional[str] = None,
        enabled: Optional[bool] = None,
        offer_shift_requests_enabled: Optional[bool] = None,
        open_shifts_enabled: Optional[bool] = None,
        provision_status: Optional[Union[str, "models.MicrosoftGraphOperationStatus"]] = None,
        provision_status_code: Optional[str] = None,
        swap_shifts_requests_enabled: Optional[bool] = None,
        time_clock_enabled: Optional[bool] = None,
        time_off_requests_enabled: Optional[bool] = None,
        time_zone: Optional[str] = None,
        workforce_integration_ids: Optional[List[str]] = None,
        offer_shift_requests: Optional[List["models.MicrosoftGraphOfferShiftRequest"]] = None,
        open_shift_change_requests: Optional[List["models.MicrosoftGraphOpenShiftChangeRequest"]] = None,
        open_shifts: Optional[List["models.MicrosoftGraphOpenShift"]] = None,
        scheduling_groups: Optional[List["models.MicrosoftGraphSchedulingGroup"]] = None,
        shifts: Optional[List["models.MicrosoftGraphShift"]] = None,
        swap_shifts_change_requests: Optional[List["models.MicrosoftGraphSwapShiftsChangeRequest"]] = None,
        time_off_reasons: Optional[List["models.MicrosoftGraphTimeOffReason"]] = None,
        time_off_requests: Optional[List["models.MicrosoftGraphTimeOffRequest"]] = None,
        times_off: Optional[List["models.MicrosoftGraphTimeOff"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property team in groups.

        Update the navigation property team in groups.

        :param group_id: key: id of group.
        :type group_id: str
        :param id: Read-only.
        :type id: str
        :param classification: An optional label. Typically describes the data or business sensitivity
         of the team. Must match one of a pre-configured set in the tenant's directory.
        :type classification: str
        :param description: An optional description for the team.
        :type description: str
        :param display_name: The name of the team.
        :type display_name: str
        :param fun_settings: teamFunSettings.
        :type fun_settings: ~teams.models.MicrosoftGraphTeamFunSettings
        :param guest_settings: teamGuestSettings.
        :type guest_settings: ~teams.models.MicrosoftGraphTeamGuestSettings
        :param internal_id: A unique ID for the team that has been used in a few places such as the
         audit log/Office 365 Management Activity API.
        :type internal_id: str
        :param is_archived: Whether this team is in read-only mode.
        :type is_archived: bool
        :param member_settings: teamMemberSettings.
        :type member_settings: ~teams.models.MicrosoftGraphTeamMemberSettings
        :param messaging_settings: teamMessagingSettings.
        :type messaging_settings: ~teams.models.MicrosoftGraphTeamMessagingSettings
        :param specialization:
        :type specialization: str or ~teams.models.MicrosoftGraphTeamSpecialization
        :param visibility:
        :type visibility: str or ~teams.models.MicrosoftGraphTeamVisibilityType
        :param web_url: A hyperlink that will go to the team in the Microsoft Teams client. This is the
         URL that you get when you right-click a team in the Microsoft Teams client and select Get link
         to team. This URL should be treated as an opaque blob, and not parsed.
        :type web_url: str
        :param channels: The collection of channels & messages associated with the team.
        :type channels: list[~teams.models.MicrosoftGraphChannel]
        :param installed_apps: The apps installed in this team.
        :type installed_apps: list[~teams.models.MicrosoftGraphTeamsAppInstallation]
        :param members: Members and owners of the team.
        :type members: list[~teams.models.MicrosoftGraphConversationMember]
        :param operations: The async operations that ran or are running on this team.
        :type operations: list[~teams.models.MicrosoftGraphTeamsAsyncOperation]
        :param primary_channel: channel.
        :type primary_channel: ~teams.models.MicrosoftGraphChannel
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param id1: Read-only.
        :type id1: str
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param assigned_labels: The list of sensitivity label pairs (label ID, label name) associated
         with an Microsoft 365 group. Returned only on $select. Read-only.
        :type assigned_labels: list[~teams.models.MicrosoftGraphAssignedLabel]
        :param assigned_licenses: The licenses that are assigned to the group. Returned only on
         $select. Read-only.
        :type assigned_licenses: list[~teams.models.MicrosoftGraphAssignedLicense]
        :param microsoft_graph_group_classification: Describes a classification for the group (such as
         low, medium or high business impact). Valid values for this property are defined by creating a
         ClassificationList setting value, based on the template definition.Returned by default.
        :type microsoft_graph_group_classification: str
        :param created_date_time: Timestamp of when the group was created. The value cannot be modified
         and is automatically populated when the group is created. The Timestamp type represents date
         and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC
         on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Returned by default. Read-only.
        :type created_date_time: ~datetime.datetime
        :param microsoft_graph_group_description: An optional description for the group. Returned by
         default.
        :type microsoft_graph_group_description: str
        :param microsoft_graph_group_display_name: The display name for the group. This property is
         required when a group is created and cannot be cleared during updates. Returned by default.
         Supports $filter and $orderby.
        :type microsoft_graph_group_display_name: str
        :param expiration_date_time: Timestamp of when the group is set to expire. The value cannot be
         modified and is automatically populated when the group is created. The Timestamp type
         represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Returned by
         default. Read-only.
        :type expiration_date_time: ~datetime.datetime
        :param group_types: Specifies the group type and its membership.  If the collection contains
         Unified, the group is a Microsoft 365 group; otherwise, it's either a security group or
         distribution group. For details, see groups overview.If the collection includes
         DynamicMembership, the group has dynamic membership; otherwise, membership is static.  Returned
         by default. Supports $filter.
        :type group_types: list[str]
        :param has_members_with_license_errors: Indicates whether there are members in this group that
         have license errors from its group-based license assignment. This property is never returned on
         a GET operation. You can use it as a $filter argument to get groups that have members with
         license errors (that is, filter for this property being true). See an example.
        :type has_members_with_license_errors: bool
        :param license_processing_state: licenseProcessingState.
        :type license_processing_state: ~teams.models.MicrosoftGraphLicenseProcessingState
        :param mail: The SMTP address for the group, for example,
         'serviceadmins@contoso.onmicrosoft.com'. Returned by default. Read-only. Supports $filter.
        :type mail: str
        :param mail_enabled: Specifies whether the group is mail-enabled. Returned by default.
        :type mail_enabled: bool
        :param mail_nickname: The mail alias for the group, unique in the organization. This property
         must be specified when a group is created. Returned by default. Supports $filter.
        :type mail_nickname: str
        :param membership_rule: The rule that determines members for this group if the group is a
         dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of
         the membership rule, see Membership Rules syntax. Returned by default.
        :type membership_rule: str
        :param membership_rule_processing_state: Indicates whether the dynamic membership processing is
         on or paused. Possible values are 'On' or 'Paused'. Returned by default.
        :type membership_rule_processing_state: str
        :param on_premises_domain_name: Contains the on-premises domain FQDN, also called dnsDomainName
         synchronized from the on-premises directory. The property is only populated for customers who
         are synchronizing their on-premises directory to Azure Active Directory via Azure AD
         Connect.Returned by default. Read-only.
        :type on_premises_domain_name: str
        :param on_premises_last_sync_date_time: Indicates the last time at which the group was synced
         with the on-premises directory.The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'. Returned by default. Read-only. Supports $filter.
        :type on_premises_last_sync_date_time: ~datetime.datetime
        :param on_premises_net_bios_name: Contains the on-premises netBios name synchronized from the
         on-premises directory. The property is only populated for customers who are synchronizing their
         on-premises directory to Azure Active Directory via Azure AD Connect.Returned by default. Read-
         only.
        :type on_premises_net_bios_name: str
        :param on_premises_provisioning_errors: Errors when using Microsoft synchronization product
         during provisioning. Returned by default.
        :type on_premises_provisioning_errors: list[~teams.models.MicrosoftGraphOnPremisesProvisioningError]
        :param on_premises_sam_account_name: Contains the on-premises SAM account name synchronized
         from the on-premises directory. The property is only populated for customers who are
         synchronizing their on-premises directory to Azure Active Directory via Azure AD
         Connect.Returned by default. Read-only.
        :type on_premises_sam_account_name: str
        :param on_premises_security_identifier: Contains the on-premises security identifier (SID) for
         the group that was synchronized from on-premises to the cloud. Returned by default. Read-only.
        :type on_premises_security_identifier: str
        :param on_premises_sync_enabled: true if this group is synced from an on-premises directory;
         false if this group was originally synced from an on-premises directory but is no longer
         synced; null if this object has never been synced from an on-premises directory (default).
         Returned by default. Read-only. Supports $filter.
        :type on_premises_sync_enabled: bool
        :param preferred_data_location: The preferred data location for the group. For more
         information, see  OneDrive Online Multi-Geo. Returned by default.
        :type preferred_data_location: str
        :param preferred_language: The preferred language for an Microsoft 365 group. Should follow ISO
         639-1 Code; for example 'en-US'. Returned by default.
        :type preferred_language: str
        :param proxy_addresses: Email addresses for the group that direct to the same group mailbox.
         For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. The any operator is
         required to filter expressions on multi-valued properties. Returned by default. Read-only. Not
         nullable. Supports $filter.
        :type proxy_addresses: list[str]
        :param renewed_date_time: Timestamp of when the group was last renewed. This cannot be modified
         directly and is only updated via the renew service action. The Timestamp type represents date
         and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC
         on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Returned by default. Read-only.
        :type renewed_date_time: ~datetime.datetime
        :param security_enabled: Specifies whether the group is a security group. Returned by default.
         Supports $filter.
        :type security_enabled: bool
        :param security_identifier: Security identifier of the group, used in Windows scenarios.
         Returned by default.
        :type security_identifier: str
        :param theme: Specifies an Microsoft 365 group's color theme. Possible values are Teal, Purple,
         Green, Blue, Pink, Orange or Red. Returned by default.
        :type theme: str
        :param microsoft_graph_group_visibility: Specifies the visibility of a Microsoft 365 group.
         Possible values are: Private, Public, or Hiddenmembership; blank values are treated as public.
         See group visibility options to learn more.Visibility can be set only when a group is created;
         it is not editable.Visibility is supported only for unified groups; it is not supported for
         security groups. Returned by default.
        :type microsoft_graph_group_visibility: str
        :param allow_external_senders: Indicates if people external to the organization can send
         messages to the group. Default value is false. Returned only on $select.
        :type allow_external_senders: bool
        :param auto_subscribe_new_members: Indicates if new members added to the group will be auto-
         subscribed to receive email notifications. You can set this property in a PATCH request for the
         group; do not set it in the initial POST request that creates the group. Default value is
         false. Returned only on $select.
        :type auto_subscribe_new_members: bool
        :param hide_from_address_lists: True if the group is not displayed in certain parts of the
         Outlook UI: the Address Book, address lists for selecting message recipients, and the Browse
         Groups dialog for searching groups; otherwise, false. Default value is false. Returned only on
         $select.
        :type hide_from_address_lists: bool
        :param hide_from_outlook_clients: True if the group is not displayed in Outlook clients, such
         as Outlook for Windows and Outlook on the web; otherwise, false. Default value is false.
         Returned only on $select.
        :type hide_from_outlook_clients: bool
        :param is_subscribed_by_mail: Indicates whether the signed-in user is subscribed to receive
         email conversations. Default value is true. Returned only on $select.
        :type is_subscribed_by_mail: bool
        :param unseen_count: Count of conversations that have received new posts since the signed-in
         user last visited the group. Returned only on $select.
        :type unseen_count: int
        :param is_archived:
        :type is_archived: bool
        :param app_role_assignments:
        :type app_role_assignments: list[~teams.models.MicrosoftGraphAppRoleAssignment]
        :param created_on_behalf_of: Represents an Azure Active Directory object. The directoryObject
         type is the base type for many other directory entity types.
        :type created_on_behalf_of: ~teams.models.MicrosoftGraphDirectoryObject
        :param member_of: Groups that this group is a member of. HTTP Methods: GET (supported for all
         groups). Read-only. Nullable.
        :type member_of: list[~teams.models.MicrosoftGraphDirectoryObject]
        :param microsoft_graph_group_members: Users and groups that are members of this group. HTTP
         Methods: GET (supported for all groups), POST (supported for Microsoft 365 groups, security
         groups and mail-enabled security groups), DELETE (supported for Microsoft 365 groups and
         security groups) Nullable.
        :type microsoft_graph_group_members: list[~teams.models.MicrosoftGraphDirectoryObject]
        :param members_with_license_errors: A list of group members with license errors from this
         group-based license assignment. Read-only.
        :type members_with_license_errors: list[~teams.models.MicrosoftGraphDirectoryObject]
        :param owners: The owners of the group. The owners are a set of non-admin users who are allowed
         to modify this object. Limited to 100 owners. HTTP Methods: GET (supported for all groups),
         POST (supported for Microsoft 365 groups, security groups and mail-enabled security groups),
         DELETE (supported for Microsoft 365 groups and security groups). Nullable.
        :type owners: list[~teams.models.MicrosoftGraphDirectoryObject]
        :param settings: Read-only. Nullable.
        :type settings: list[~teams.models.MicrosoftGraphGroupSetting]
        :param transitive_member_of:
        :type transitive_member_of: list[~teams.models.MicrosoftGraphDirectoryObject]
        :param transitive_members:
        :type transitive_members: list[~teams.models.MicrosoftGraphDirectoryObject]
        :param accepted_senders: The list of users or groups that are allowed to create post's or
         calendar events in this group. If this list is non-empty then only users or groups listed here
         are allowed to post.
        :type accepted_senders: list[~teams.models.MicrosoftGraphDirectoryObject]
        :param calendar: calendar.
        :type calendar: ~teams.models.MicrosoftGraphCalendar
        :param calendar_view: The calendar view for the calendar. Read-only.
        :type calendar_view: list[~teams.models.MicrosoftGraphEvent]
        :param conversations: The group's conversations.
        :type conversations: list[~teams.models.MicrosoftGraphConversation]
        :param events: The group's calendar events.
        :type events: list[~teams.models.MicrosoftGraphEvent]
        :param photo: profilePhoto.
        :type photo: ~teams.models.MicrosoftGraphProfilePhoto
        :param photos: The profile photos owned by the group. Read-only. Nullable.
        :type photos: list[~teams.models.MicrosoftGraphProfilePhoto]
        :param rejected_senders: The list of users or groups that are not allowed to create posts or
         calendar events in this group. Nullable.
        :type rejected_senders: list[~teams.models.MicrosoftGraphDirectoryObject]
        :param threads: The group's conversation threads. Nullable.
        :type threads: list[~teams.models.MicrosoftGraphConversationThread]
        :param drive: drive.
        :type drive: ~teams.models.MicrosoftGraphDrive
        :param drives: The group's drives. Read-only.
        :type drives: list[~teams.models.MicrosoftGraphDrive]
        :param sites: The list of SharePoint sites in this group. Access the default site with
         /sites/root.
        :type sites: list[~teams.models.MicrosoftGraphSite]
        :param extensions: The collection of open extensions defined for the group. Read-only.
         Nullable.
        :type extensions: list[~teams.models.MicrosoftGraphExtension]
        :param group_lifecycle_policies: The collection of lifecycle policies for this group. Read-
         only. Nullable.
        :type group_lifecycle_policies: list[~teams.models.MicrosoftGraphGroupLifecyclePolicy]
        :param planner: plannerGroup.
        :type planner: ~teams.models.MicrosoftGraphPlannerGroup
        :param onenote: onenote.
        :type onenote: ~teams.models.MicrosoftGraphOnenote
        :param team: team.
        :type team: ~teams.models.MicrosoftGraphTeam
        :param id2: Read-only.
        :type id2: str
        :param enabled: Indicates whether the schedule is enabled for the team. Required.
        :type enabled: bool
        :param offer_shift_requests_enabled: Indicates whether offer shift requests are enabled for the
         schedule.
        :type offer_shift_requests_enabled: bool
        :param open_shifts_enabled: Indicates whether open shifts are enabled for the schedule.
        :type open_shifts_enabled: bool
        :param provision_status:
        :type provision_status: str or ~teams.models.MicrosoftGraphOperationStatus
        :param provision_status_code: Additional information about why schedule provisioning failed.
        :type provision_status_code: str
        :param swap_shifts_requests_enabled: Indicates whether swap shifts requests are enabled for the
         schedule.
        :type swap_shifts_requests_enabled: bool
        :param time_clock_enabled: Indicates whether time clock is enabled for the schedule.
        :type time_clock_enabled: bool
        :param time_off_requests_enabled: Indicates whether time off requests are enabled for the
         schedule.
        :type time_off_requests_enabled: bool
        :param time_zone: Indicates the time zone of the schedule team using tz database format.
         Required.
        :type time_zone: str
        :param workforce_integration_ids:
        :type workforce_integration_ids: list[str]
        :param offer_shift_requests:
        :type offer_shift_requests: list[~teams.models.MicrosoftGraphOfferShiftRequest]
        :param open_shift_change_requests:
        :type open_shift_change_requests: list[~teams.models.MicrosoftGraphOpenShiftChangeRequest]
        :param open_shifts:
        :type open_shifts: list[~teams.models.MicrosoftGraphOpenShift]
        :param scheduling_groups: The logical grouping of users in the schedule (usually by role).
        :type scheduling_groups: list[~teams.models.MicrosoftGraphSchedulingGroup]
        :param shifts: The shifts in the schedule.
        :type shifts: list[~teams.models.MicrosoftGraphShift]
        :param swap_shifts_change_requests:
        :type swap_shifts_change_requests: list[~teams.models.MicrosoftGraphSwapShiftsChangeRequest]
        :param time_off_reasons: The set of reasons for a time off in the schedule.
        :type time_off_reasons: list[~teams.models.MicrosoftGraphTimeOffReason]
        :param time_off_requests:
        :type time_off_requests: list[~teams.models.MicrosoftGraphTimeOffRequest]
        :param times_off: The instances of times off in the schedule.
        :type times_off: list[~teams.models.MicrosoftGraphTimeOff]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphTeam(id=id, classification=classification, description=description, display_name=display_name, fun_settings=fun_settings, guest_settings=guest_settings, internal_id=internal_id, is_archived=is_archived, member_settings=member_settings, messaging_settings=messaging_settings, specialization=specialization, visibility=visibility, web_url=web_url, channels=channels, installed_apps=installed_apps, members=members, operations=operations, primary_channel=primary_channel, id_template_id=microsoft_graph_entity_id, id_group_id=id1, deleted_date_time=deleted_date_time, assigned_labels=assigned_labels, assigned_licenses=assigned_licenses, classification_group_classification=microsoft_graph_group_classification, created_date_time=created_date_time, description_group_description=microsoft_graph_group_description, display_name_group_display_name=microsoft_graph_group_display_name, expiration_date_time=expiration_date_time, group_types=group_types, has_members_with_license_errors=has_members_with_license_errors, license_processing_state=license_processing_state, mail=mail, mail_enabled=mail_enabled, mail_nickname=mail_nickname, membership_rule=membership_rule, membership_rule_processing_state=membership_rule_processing_state, on_premises_domain_name=on_premises_domain_name, on_premises_last_sync_date_time=on_premises_last_sync_date_time, on_premises_net_bios_name=on_premises_net_bios_name, on_premises_provisioning_errors=on_premises_provisioning_errors, on_premises_sam_account_name=on_premises_sam_account_name, on_premises_security_identifier=on_premises_security_identifier, on_premises_sync_enabled=on_premises_sync_enabled, preferred_data_location=preferred_data_location, preferred_language=preferred_language, proxy_addresses=proxy_addresses, renewed_date_time=renewed_date_time, security_enabled=security_enabled, security_identifier=security_identifier, theme=theme, visibility_group_visibility=microsoft_graph_group_visibility, allow_external_senders=allow_external_senders, auto_subscribe_new_members=auto_subscribe_new_members, hide_from_address_lists=hide_from_address_lists, hide_from_outlook_clients=hide_from_outlook_clients, is_subscribed_by_mail=is_subscribed_by_mail, unseen_count=unseen_count, is_archived_group_is_archived=is_archived, app_role_assignments=app_role_assignments, created_on_behalf_of=created_on_behalf_of, member_of=member_of, members_group_members=microsoft_graph_group_members, members_with_license_errors=members_with_license_errors, owners=owners, settings=settings, transitive_member_of=transitive_member_of, transitive_members=transitive_members, accepted_senders=accepted_senders, calendar=calendar, calendar_view=calendar_view, conversations=conversations, events=events, photo=photo, photos=photos, rejected_senders=rejected_senders, threads=threads, drive=drive, drives=drives, sites=sites, extensions=extensions, group_lifecycle_policies=group_lifecycle_policies, planner=planner, onenote=onenote, team=team, id_schedule_id=id2, enabled=enabled, offer_shift_requests_enabled=offer_shift_requests_enabled, open_shifts_enabled=open_shifts_enabled, provision_status=provision_status, provision_status_code=provision_status_code, swap_shifts_requests_enabled=swap_shifts_requests_enabled, time_clock_enabled=time_clock_enabled, time_off_requests_enabled=time_off_requests_enabled, time_zone=time_zone, workforce_integration_ids=workforce_integration_ids, offer_shift_requests=offer_shift_requests, open_shift_change_requests=open_shift_change_requests, open_shifts=open_shifts, scheduling_groups=scheduling_groups, shifts=shifts, swap_shifts_change_requests=swap_shifts_change_requests, time_off_reasons=time_off_reasons, time_off_requests=time_off_requests, times_off=times_off)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_team.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphTeam')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_team.metadata = {'url': '/groups/{group-id}/team'}  # type: ignore

    async def delete_team(
        self,
        group_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property team for groups.

        Delete navigation property team for groups.

        :param group_id: key: id of group.
        :type group_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_team.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_team.metadata = {'url': '/groups/{group-id}/team'}  # type: ignore
