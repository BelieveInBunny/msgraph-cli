# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type,
    get_location_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_teams_v1_0.action import (
    AddFunSettings,
    AddGuestSettings,
    AddMemberSettings,
    AddMessagingSettings,
    AddGroupsMembers,
    AddAssignedLabels,
    AddAssignedLicenses,
    AddLicenseProcessingState,
    AddOnPremisesProvisioningErrors,
    AddAppRoleAssignments,
    AddCreatedOnBehalfOf,
    AddMemberOf,
    AddMicrosoftGraphGroupMembers,
    AddMembersWithLicenseErrors,
    AddOwners,
    AddTransitiveMemberOf,
    AddTransitiveMembers,
    AddAcceptedSenders,
    AddGroupsPhoto,
    AddPhotos,
    AddRejectedSenders,
    AddExtensions,
    AddGroupLifecyclePolicies,
    AddOfferShiftRequests,
    AddOpenShiftChangeRequests,
    AddSchedulingGroups,
    AddSwapShiftsChangeRequests,
    AddTimeOffReasons,
    AddTimeOffRequests,
    AddTeamsMembers,
    AddTeamsAppDefinition,
    AddAppDefinitions,
    AddError,
    AddAttachments,
    AddBody,
    AddHostedContents,
    AddPolicyTip,
    AddApplication,
    AddConfiguration,
    AddSharepointIds,
    AddAudio,
    AddFileSystemInfo,
    AddImage,
    AddTeamsChannelsPhoto,
    AddPublication,
    AddVideo,
    AddSubscriptions,
    AddVersions,
    AddListItemContentType,
    AddFields,
    AddMicrosoftGraphWorkbookApplication,
    AddFunctions,
    AddPackage,
    AddSpecialFolder,
    AddView,
    AddHashes,
    AddDraftOpenShift,
    AddActivities,
    AddDraftTimeOff,
    AddEncryption
)


def load_arguments(self, _):

    with self.argument_context('teams chat-chat create-chat') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('teams chat-chat delete-chat') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams chat-chat list-chat') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams chat-chat show-chat') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams chat-chat update-chat') as c:
        c.argument('chat_id', type=str, help='key: id of chat')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('teams group delete-team') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams group show-team') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams group update-team') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('classification', type=str, help='An optional label. Typically describes the data or business '
                   'sensitivity of the team. Must match one of a pre-configured set in the tenant\'s directory.')
        c.argument('description', type=str, help='An optional description for the team.')
        c.argument('display_name', type=str, help='The name of the team.')
        c.argument('fun_settings', action=AddFunSettings, nargs='+', help='teamFunSettings')
        c.argument('guest_settings', action=AddGuestSettings, nargs='+', help='teamGuestSettings')
        c.argument('internal_id', type=str, help='A unique ID for the team that has been used in a few places such as '
                   'the audit log/Office 365 Management Activity API.')
        c.argument('is_archived', arg_type=get_three_state_flag(), help='Whether this team is in read-only mode.')
        c.argument('member_settings', action=AddMemberSettings, nargs='+', help='teamMemberSettings')
        c.argument('messaging_settings', action=AddMessagingSettings, nargs='+', help='teamMessagingSettings')
        c.argument('specialization', arg_type=get_enum_type(['none', 'educationStandard', 'educationClass',
                                                             'educationProfessionalLearningCommunity',
                                                             'educationStaff', 'healthcareStandard',
                                                             'healthcareCareCoordination', 'unknownFutureValue']),
                   help='')
        c.argument('visibility', arg_type=get_enum_type(['private', 'public', 'hiddenMembership',
                                                        'unknownFutureValue']), help='')
        c.argument('web_url', type=str, help='A hyperlink that will go to the team in the Microsoft Teams client. This '
                   'is the URL that you get when you right-click a team in the Microsoft Teams client and select Get '
                   'link to team. This URL should be treated as an opaque blob, and not parsed.')
        c.argument('channels', type=validate_file_or_dict, help='The collection of channels & messages associated with '
                   'the team. Expected value: json-string/@json-file.')
        c.argument('installed_apps', type=validate_file_or_dict, help='The apps installed in this team. Expected '
                   'value: json-string/@json-file.')
        c.argument('members', action=AddGroupsMembers, nargs='+', help='Members and owners of the team.')
        c.argument('operations', type=validate_file_or_dict, help='The async operations that ran or are running on '
                   'this team. Expected value: json-string/@json-file.')
        c.argument('primary_channel', type=validate_file_or_dict, help='channel Expected value: '
                   'json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Template')
        c.argument('id1', type=str, help='Read-only.', arg_group='Group')
        c.argument('deleted_date_time', help='', arg_group='Group')
        c.argument('assigned_labels', action=AddAssignedLabels, nargs='+', help='The list of sensitivity label pairs '
                   '(label ID, label name) associated with an Microsoft 365 group. Returned only on $select. '
                   'Read-only.', arg_group='Group')
        c.argument('assigned_licenses', action=AddAssignedLicenses, nargs='+', help='The licenses that are assigned to '
                   'the group. Returned only on $select. Read-only.', arg_group='Group')
        c.argument('microsoft_graph_group_classification', type=str, help='Describes a classification for the group '
                   '(such as low, medium or high business impact). Valid values for this property are defined by '
                   'creating a ClassificationList setting value, based on the template definition.Returned by default.',
                   arg_group='Group')
        c.argument('created_date_time', help='Timestamp of when the group was created. The value cannot be modified '
                   'and is automatically populated when the group is created. The Timestamp type represents date and '
                   'time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan '
                   '1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Returned by default. Read-only.',
                   arg_group='Group')
        c.argument('microsoft_graph_group_description', type=str, help='An optional description for the group. '
                   'Returned by default.', arg_group='Group')
        c.argument('microsoft_graph_group_display_name', type=str, help='The display name for the group. This property '
                   'is required when a group is created and cannot be cleared during updates. Returned by default. '
                   'Supports $filter and $orderby.', arg_group='Group')
        c.argument('expiration_date_time', help='Timestamp of when the group is set to expire. The value cannot be '
                   'modified and is automatically populated when the group is created. The Timestamp type represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Returned by default. Read-only.',
                   arg_group='Group')
        c.argument('group_types', nargs='+', help='Specifies the group type and its membership.  If the collection '
                   'contains Unified, the group is a Microsoft 365 group; otherwise, it\'s either a security group or '
                   'distribution group. For details, see groups overview.If the collection includes DynamicMembership, '
                   'the group has dynamic membership; otherwise, membership is static.  Returned by default. Supports '
                   '$filter.', arg_group='Group')
        c.argument('has_members_with_license_errors', arg_type=get_three_state_flag(), help='Indicates whether there '
                   'are members in this group that have license errors from its group-based license assignment. This '
                   'property is never returned on a GET operation. You can use it as a $filter argument to get groups '
                   'that have members with license errors (that is, filter for this property being true). See an '
                   'example.', arg_group='Group')
        c.argument('license_processing_state', action=AddLicenseProcessingState, nargs='+',
                   help='licenseProcessingState', arg_group='Group')
        c.argument('mail', type=str, help='The SMTP address for the group, for example, \'serviceadmins@contoso.onmicro'
                   'soft.com\'. Returned by default. Read-only. Supports $filter.', arg_group='Group')
        c.argument('mail_enabled', arg_type=get_three_state_flag(), help='Specifies whether the group is mail-enabled. '
                   'Returned by default.', arg_group='Group')
        c.argument('mail_nickname', type=str, help='The mail alias for the group, unique in the organization. This '
                   'property must be specified when a group is created. Returned by default. Supports $filter.',
                   arg_group='Group')
        c.argument('membership_rule', type=str, help='The rule that determines members for this group if the group is '
                   'a dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of '
                   'the membership rule, see Membership Rules syntax. Returned by default.', arg_group='Group')
        c.argument('membership_rule_processing_state', type=str, help='Indicates whether the dynamic membership '
                   'processing is on or paused. Possible values are \'On\' or \'Paused\'. Returned by default.',
                   arg_group='Group')
        c.argument('on_premises_domain_name', type=str, help='Contains the on-premises domain FQDN, also called '
                   'dnsDomainName synchronized from the on-premises directory. The property is only populated for '
                   'customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD '
                   'Connect.Returned by default. Read-only.', arg_group='Group')
        c.argument('on_premises_last_sync_date_time', help='Indicates the last time at which the group was synced with '
                   'the on-premises directory.The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'. Returned by default. Read-only. Supports $filter.', arg_group='Group')
        c.argument('on_premises_net_bios_name', type=str, help='Contains the on-premises netBios name synchronized '
                   'from the on-premises directory. The property is only populated for customers who are synchronizing '
                   'their on-premises directory to Azure Active Directory via Azure AD Connect.Returned by default. '
                   'Read-only.', arg_group='Group')
        c.argument('on_premises_provisioning_errors', action=AddOnPremisesProvisioningErrors, nargs='+', help='Errors '
                   'when using Microsoft synchronization product during provisioning. Returned by default.',
                   arg_group='Group')
        c.argument('on_premises_sam_account_name', type=str, help='Contains the on-premises SAM account name '
                   'synchronized from the on-premises directory. The property is only populated for customers who are '
                   'synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect.Returned '
                   'by default. Read-only.', arg_group='Group')
        c.argument('on_premises_security_identifier', type=str, help='Contains the on-premises security identifier '
                   '(SID) for the group that was synchronized from on-premises to the cloud. Returned by default. '
                   'Read-only.', arg_group='Group')
        c.argument('on_premises_sync_enabled', arg_type=get_three_state_flag(), help='true if this group is synced '
                   'from an on-premises directory; false if this group was originally synced from an on-premises '
                   'directory but is no longer synced; null if this object has never been synced from an on-premises '
                   'directory (default). Returned by default. Read-only. Supports $filter.', arg_group='Group')
        c.argument('preferred_data_location', type=str, help='The preferred data location for the group. For more '
                   'information, see  OneDrive Online Multi-Geo. Returned by default.', arg_group='Group')
        c.argument('preferred_language', type=str, help='The preferred language for an Microsoft 365 group. Should '
                   'follow ISO 639-1 Code; for example \'en-US\'. Returned by default.', arg_group='Group')
        c.argument('proxy_addresses', nargs='+', help='Email addresses for the group that direct to the same group '
                   'mailbox. For example: [\'SMTP: bob@contoso.com\', \'smtp: bob@sales.contoso.com\']. The any '
                   'operator is required to filter expressions on multi-valued properties. Returned by default. '
                   'Read-only. Not nullable. Supports $filter.', arg_group='Group')
        c.argument('renewed_date_time', help='Timestamp of when the group was last renewed. This cannot be modified '
                   'directly and is only updated via the renew service action. The Timestamp type represents date and '
                   'time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan '
                   '1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Returned by default. Read-only.',
                   arg_group='Group')
        c.argument('security_enabled', arg_type=get_three_state_flag(), help='Specifies whether the group is a '
                   'security group. Returned by default. Supports $filter.', arg_group='Group')
        c.argument('security_identifier', type=str, help='Security identifier of the group, used in Windows scenarios. '
                   'Returned by default.', arg_group='Group')
        c.argument('theme', type=str, help='Specifies an Microsoft 365 group\'s color theme. Possible values are Teal, '
                   'Purple, Green, Blue, Pink, Orange or Red. Returned by default.', arg_group='Group')
        c.argument('microsoft_graph_group_visibility', type=str, help='Specifies the visibility of a Microsoft 365 '
                   'group. Possible values are: Private, Public, or Hiddenmembership; blank values are treated as '
                   'public.  See group visibility options to learn more.Visibility can be set only when a group is '
                   'created; it is not editable.Visibility is supported only for unified groups; it is not supported '
                   'for security groups. Returned by default.', arg_group='Group')
        c.argument('allow_external_senders', arg_type=get_three_state_flag(), help='Indicates if people external to '
                   'the organization can send messages to the group. Default value is false. Returned only on $select.',
                   arg_group='Group')
        c.argument('auto_subscribe_new_members', arg_type=get_three_state_flag(), help='Indicates if new members added '
                   'to the group will be auto-subscribed to receive email notifications. You can set this property in '
                   'a PATCH request for the group; do not set it in the initial POST request that creates the group. '
                   'Default value is false. Returned only on $select.', arg_group='Group')
        c.argument('hide_from_address_lists', arg_type=get_three_state_flag(), help='True if the group is not '
                   'displayed in certain parts of the Outlook UI: the Address Book, address lists for selecting '
                   'message recipients, and the Browse Groups dialog for searching groups; otherwise, false. Default '
                   'value is false. Returned only on $select.', arg_group='Group')
        c.argument('hide_from_outlook_clients', arg_type=get_three_state_flag(), help='True if the group is not '
                   'displayed in Outlook clients, such as Outlook for Windows and Outlook on the web; otherwise, '
                   'false. Default value is false. Returned only on $select.', arg_group='Group')
        c.argument('is_subscribed_by_mail', arg_type=get_three_state_flag(), help='Indicates whether the signed-in '
                   'user is subscribed to receive email conversations. Default value is true. Returned only on '
                   '$select.', arg_group='Group')
        c.argument('unseen_count', type=int, help='Count of conversations that have received new posts since the '
                   'signed-in user last visited the group. Returned only on $select.', arg_group='Group')
        c.argument('group_is_archived', arg_type=get_three_state_flag(), help='', arg_group='Group')
        c.argument('app_role_assignments', action=AddAppRoleAssignments, nargs='+', help='', arg_group='Group')
        c.argument('created_on_behalf_of', action=AddCreatedOnBehalfOf, nargs='+', help='Represents an Azure Active '
                   'Directory object. The directoryObject type is the base type for many other directory entity types.',
                   arg_group='Group')
        c.argument('member_of', action=AddMemberOf, nargs='+', help='Groups that this group is a member of. HTTP '
                   'Methods: GET (supported for all groups). Read-only. Nullable.', arg_group='Group')
        c.argument('microsoft_graph_group_members', action=AddMicrosoftGraphGroupMembers, nargs='+', help='Users and '
                   'groups that are members of this group. HTTP Methods: GET (supported for all groups), POST '
                   '(supported for Microsoft 365 groups, security groups and mail-enabled security groups), DELETE '
                   '(supported for Microsoft 365 groups and security groups) Nullable.', arg_group='Group')
        c.argument('members_with_license_errors', action=AddMembersWithLicenseErrors, nargs='+', help='A list of group '
                   'members with license errors from this group-based license assignment. Read-only.',
                   arg_group='Group')
        c.argument('owners', action=AddOwners, nargs='+', help='The owners of the group. The owners are a set of '
                   'non-admin users who are allowed to modify this object. Limited to 100 owners. HTTP Methods: GET '
                   '(supported for all groups), POST (supported for Microsoft 365 groups, security groups and '
                   'mail-enabled security groups), DELETE (supported for Microsoft 365 groups and security groups). '
                   'Nullable.', arg_group='Group')
        c.argument('settings', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('transitive_member_of', action=AddTransitiveMemberOf, nargs='+', help='', arg_group='Group')
        c.argument('transitive_members', action=AddTransitiveMembers, nargs='+', help='', arg_group='Group')
        c.argument('accepted_senders', action=AddAcceptedSenders, nargs='+', help='The list of users or groups that '
                   'are allowed to create post\'s or calendar events in this group. If this list is non-empty then '
                   'only users or groups listed here are allowed to post.', arg_group='Group')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Read-only. '
                   'Expected value: json-string/@json-file.', arg_group='Group')
        c.argument('conversations', type=validate_file_or_dict, help='The group\'s conversations. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('events', type=validate_file_or_dict, help='The group\'s calendar events. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('photo', action=AddGroupsPhoto, nargs='+', help='profilePhoto', arg_group='Group')
        c.argument('photos', action=AddPhotos, nargs='+', help='The profile photos owned by the group. Read-only. '
                   'Nullable.', arg_group='Group')
        c.argument('rejected_senders', action=AddRejectedSenders, nargs='+', help='The list of users or groups that '
                   'are not allowed to create posts or calendar events in this group. Nullable', arg_group='Group')
        c.argument('threads', type=validate_file_or_dict, help='The group\'s conversation threads. Nullable. Expected '
                   'value: json-string/@json-file.', arg_group='Group')
        c.argument('drive', type=validate_file_or_dict, help='drive Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('drives', type=validate_file_or_dict, help='The group\'s drives. Read-only. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('sites', type=validate_file_or_dict, help='The list of SharePoint sites in this group. Access the '
                   'default site with /sites/root. Expected value: json-string/@json-file.', arg_group='Group')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the group. Read-only. Nullable.', arg_group='Group')
        c.argument('group_lifecycle_policies', action=AddGroupLifecyclePolicies, nargs='+', help='The collection of '
                   'lifecycle policies for this group. Read-only. Nullable.', arg_group='Group')
        c.argument('planner', type=validate_file_or_dict, help='plannerGroup Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('onenote', type=validate_file_or_dict, help='onenote Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('team', type=validate_file_or_dict, help='team Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('id2', type=str, help='Read-only.', arg_group='Schedule')
        c.argument('enabled', arg_type=get_three_state_flag(), help='Indicates whether the schedule is enabled for the '
                   'team. Required.', arg_group='Schedule')
        c.argument('offer_shift_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether offer '
                   'shift requests are enabled for the schedule.', arg_group='Schedule')
        c.argument('open_shifts_enabled', arg_type=get_three_state_flag(), help='Indicates whether open shifts are '
                   'enabled for the schedule.', arg_group='Schedule')
        c.argument('provision_status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed', 'Failed']),
                   help='', arg_group='Schedule')
        c.argument('provision_status_code', type=str, help='Additional information about why schedule provisioning '
                   'failed.', arg_group='Schedule')
        c.argument('swap_shifts_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether swap '
                   'shifts requests are enabled for the schedule.', arg_group='Schedule')
        c.argument('time_clock_enabled', arg_type=get_three_state_flag(), help='Indicates whether time clock is '
                   'enabled for the schedule.', arg_group='Schedule')
        c.argument('time_off_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether time off '
                   'requests are enabled for the schedule.', arg_group='Schedule')
        c.argument('time_zone', type=str, help='Indicates the time zone of the schedule team using tz database format. '
                   'Required.', arg_group='Schedule')
        c.argument('workforce_integration_ids', nargs='+', help='', arg_group='Schedule')
        c.argument('offer_shift_requests', action=AddOfferShiftRequests, nargs='+', help='', arg_group='Schedule')
        c.argument('open_shift_change_requests', action=AddOpenShiftChangeRequests, nargs='+', help='',
                   arg_group='Schedule')
        c.argument('open_shifts', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Schedule')
        c.argument('scheduling_groups', action=AddSchedulingGroups, nargs='+', help='The logical grouping of users in '
                   'the schedule (usually by role).', arg_group='Schedule')
        c.argument('shifts', type=validate_file_or_dict, help='The shifts in the schedule. Expected value: '
                   'json-string/@json-file.', arg_group='Schedule')
        c.argument('swap_shifts_change_requests', action=AddSwapShiftsChangeRequests, nargs='+', help='',
                   arg_group='Schedule')
        c.argument('time_off_reasons', action=AddTimeOffReasons, nargs='+', help='The set of reasons for a time off in '
                   'the schedule.', arg_group='Schedule')
        c.argument('time_off_requests', action=AddTimeOffRequests, nargs='+', help='', arg_group='Schedule')
        c.argument('times_off', type=validate_file_or_dict, help='The instances of times off in the schedule. Expected '
                   'value: json-string/@json-file.', arg_group='Schedule')

    with self.argument_context('teams team list') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team create') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('classification', type=str, help='An optional label. Typically describes the data or business '
                   'sensitivity of the team. Must match one of a pre-configured set in the tenant\'s directory.')
        c.argument('description', type=str, help='An optional description for the team.')
        c.argument('display_name', type=str, help='The name of the team.')
        c.argument('fun_settings', action=AddFunSettings, nargs='+', help='teamFunSettings')
        c.argument('guest_settings', action=AddGuestSettings, nargs='+', help='teamGuestSettings')
        c.argument('internal_id', type=str, help='A unique ID for the team that has been used in a few places such as '
                   'the audit log/Office 365 Management Activity API.')
        c.argument('is_archived', arg_type=get_three_state_flag(), help='Whether this team is in read-only mode.')
        c.argument('member_settings', action=AddMemberSettings, nargs='+', help='teamMemberSettings')
        c.argument('messaging_settings', action=AddMessagingSettings, nargs='+', help='teamMessagingSettings')
        c.argument('specialization', arg_type=get_enum_type(['none', 'educationStandard', 'educationClass',
                                                             'educationProfessionalLearningCommunity',
                                                             'educationStaff', 'healthcareStandard',
                                                             'healthcareCareCoordination', 'unknownFutureValue']),
                   help='')
        c.argument('visibility', arg_type=get_enum_type(['private', 'public', 'hiddenMembership',
                                                        'unknownFutureValue']), help='')
        c.argument('web_url', type=str, help='A hyperlink that will go to the team in the Microsoft Teams client. This '
                   'is the URL that you get when you right-click a team in the Microsoft Teams client and select Get '
                   'link to team. This URL should be treated as an opaque blob, and not parsed.')
        c.argument('channels', type=validate_file_or_dict, help='The collection of channels & messages associated with '
                   'the team. Expected value: json-string/@json-file.')
        c.argument('installed_apps', type=validate_file_or_dict, help='The apps installed in this team. Expected '
                   'value: json-string/@json-file.')
        c.argument('members', action=AddGroupsMembers, nargs='+', help='Members and owners of the team.')
        c.argument('operations', type=validate_file_or_dict, help='The async operations that ran or are running on '
                   'this team. Expected value: json-string/@json-file.')
        c.argument('primary_channel', type=validate_file_or_dict, help='channel Expected value: '
                   'json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Template')
        c.argument('id1', type=str, help='Read-only.', arg_group='Group')
        c.argument('deleted_date_time', help='', arg_group='Group')
        c.argument('assigned_labels', action=AddAssignedLabels, nargs='+', help='The list of sensitivity label pairs '
                   '(label ID, label name) associated with an Microsoft 365 group. Returned only on $select. '
                   'Read-only.', arg_group='Group')
        c.argument('assigned_licenses', action=AddAssignedLicenses, nargs='+', help='The licenses that are assigned to '
                   'the group. Returned only on $select. Read-only.', arg_group='Group')
        c.argument('microsoft_graph_group_classification', type=str, help='Describes a classification for the group '
                   '(such as low, medium or high business impact). Valid values for this property are defined by '
                   'creating a ClassificationList setting value, based on the template definition.Returned by default.',
                   arg_group='Group')
        c.argument('created_date_time', help='Timestamp of when the group was created. The value cannot be modified '
                   'and is automatically populated when the group is created. The Timestamp type represents date and '
                   'time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan '
                   '1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Returned by default. Read-only.',
                   arg_group='Group')
        c.argument('microsoft_graph_group_description', type=str, help='An optional description for the group. '
                   'Returned by default.', arg_group='Group')
        c.argument('microsoft_graph_group_display_name', type=str, help='The display name for the group. This property '
                   'is required when a group is created and cannot be cleared during updates. Returned by default. '
                   'Supports $filter and $orderby.', arg_group='Group')
        c.argument('expiration_date_time', help='Timestamp of when the group is set to expire. The value cannot be '
                   'modified and is automatically populated when the group is created. The Timestamp type represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Returned by default. Read-only.',
                   arg_group='Group')
        c.argument('group_types', nargs='+', help='Specifies the group type and its membership.  If the collection '
                   'contains Unified, the group is a Microsoft 365 group; otherwise, it\'s either a security group or '
                   'distribution group. For details, see groups overview.If the collection includes DynamicMembership, '
                   'the group has dynamic membership; otherwise, membership is static.  Returned by default. Supports '
                   '$filter.', arg_group='Group')
        c.argument('has_members_with_license_errors', arg_type=get_three_state_flag(), help='Indicates whether there '
                   'are members in this group that have license errors from its group-based license assignment. This '
                   'property is never returned on a GET operation. You can use it as a $filter argument to get groups '
                   'that have members with license errors (that is, filter for this property being true). See an '
                   'example.', arg_group='Group')
        c.argument('license_processing_state', action=AddLicenseProcessingState, nargs='+',
                   help='licenseProcessingState', arg_group='Group')
        c.argument('mail', type=str, help='The SMTP address for the group, for example, \'serviceadmins@contoso.onmicro'
                   'soft.com\'. Returned by default. Read-only. Supports $filter.', arg_group='Group')
        c.argument('mail_enabled', arg_type=get_three_state_flag(), help='Specifies whether the group is mail-enabled. '
                   'Returned by default.', arg_group='Group')
        c.argument('mail_nickname', type=str, help='The mail alias for the group, unique in the organization. This '
                   'property must be specified when a group is created. Returned by default. Supports $filter.',
                   arg_group='Group')
        c.argument('membership_rule', type=str, help='The rule that determines members for this group if the group is '
                   'a dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of '
                   'the membership rule, see Membership Rules syntax. Returned by default.', arg_group='Group')
        c.argument('membership_rule_processing_state', type=str, help='Indicates whether the dynamic membership '
                   'processing is on or paused. Possible values are \'On\' or \'Paused\'. Returned by default.',
                   arg_group='Group')
        c.argument('on_premises_domain_name', type=str, help='Contains the on-premises domain FQDN, also called '
                   'dnsDomainName synchronized from the on-premises directory. The property is only populated for '
                   'customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD '
                   'Connect.Returned by default. Read-only.', arg_group='Group')
        c.argument('on_premises_last_sync_date_time', help='Indicates the last time at which the group was synced with '
                   'the on-premises directory.The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'. Returned by default. Read-only. Supports $filter.', arg_group='Group')
        c.argument('on_premises_net_bios_name', type=str, help='Contains the on-premises netBios name synchronized '
                   'from the on-premises directory. The property is only populated for customers who are synchronizing '
                   'their on-premises directory to Azure Active Directory via Azure AD Connect.Returned by default. '
                   'Read-only.', arg_group='Group')
        c.argument('on_premises_provisioning_errors', action=AddOnPremisesProvisioningErrors, nargs='+', help='Errors '
                   'when using Microsoft synchronization product during provisioning. Returned by default.',
                   arg_group='Group')
        c.argument('on_premises_sam_account_name', type=str, help='Contains the on-premises SAM account name '
                   'synchronized from the on-premises directory. The property is only populated for customers who are '
                   'synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect.Returned '
                   'by default. Read-only.', arg_group='Group')
        c.argument('on_premises_security_identifier', type=str, help='Contains the on-premises security identifier '
                   '(SID) for the group that was synchronized from on-premises to the cloud. Returned by default. '
                   'Read-only.', arg_group='Group')
        c.argument('on_premises_sync_enabled', arg_type=get_three_state_flag(), help='true if this group is synced '
                   'from an on-premises directory; false if this group was originally synced from an on-premises '
                   'directory but is no longer synced; null if this object has never been synced from an on-premises '
                   'directory (default). Returned by default. Read-only. Supports $filter.', arg_group='Group')
        c.argument('preferred_data_location', type=str, help='The preferred data location for the group. For more '
                   'information, see  OneDrive Online Multi-Geo. Returned by default.', arg_group='Group')
        c.argument('preferred_language', type=str, help='The preferred language for an Microsoft 365 group. Should '
                   'follow ISO 639-1 Code; for example \'en-US\'. Returned by default.', arg_group='Group')
        c.argument('proxy_addresses', nargs='+', help='Email addresses for the group that direct to the same group '
                   'mailbox. For example: [\'SMTP: bob@contoso.com\', \'smtp: bob@sales.contoso.com\']. The any '
                   'operator is required to filter expressions on multi-valued properties. Returned by default. '
                   'Read-only. Not nullable. Supports $filter.', arg_group='Group')
        c.argument('renewed_date_time', help='Timestamp of when the group was last renewed. This cannot be modified '
                   'directly and is only updated via the renew service action. The Timestamp type represents date and '
                   'time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan '
                   '1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Returned by default. Read-only.',
                   arg_group='Group')
        c.argument('security_enabled', arg_type=get_three_state_flag(), help='Specifies whether the group is a '
                   'security group. Returned by default. Supports $filter.', arg_group='Group')
        c.argument('security_identifier', type=str, help='Security identifier of the group, used in Windows scenarios. '
                   'Returned by default.', arg_group='Group')
        c.argument('theme', type=str, help='Specifies an Microsoft 365 group\'s color theme. Possible values are Teal, '
                   'Purple, Green, Blue, Pink, Orange or Red. Returned by default.', arg_group='Group')
        c.argument('microsoft_graph_group_visibility', type=str, help='Specifies the visibility of a Microsoft 365 '
                   'group. Possible values are: Private, Public, or Hiddenmembership; blank values are treated as '
                   'public.  See group visibility options to learn more.Visibility can be set only when a group is '
                   'created; it is not editable.Visibility is supported only for unified groups; it is not supported '
                   'for security groups. Returned by default.', arg_group='Group')
        c.argument('allow_external_senders', arg_type=get_three_state_flag(), help='Indicates if people external to '
                   'the organization can send messages to the group. Default value is false. Returned only on $select.',
                   arg_group='Group')
        c.argument('auto_subscribe_new_members', arg_type=get_three_state_flag(), help='Indicates if new members added '
                   'to the group will be auto-subscribed to receive email notifications. You can set this property in '
                   'a PATCH request for the group; do not set it in the initial POST request that creates the group. '
                   'Default value is false. Returned only on $select.', arg_group='Group')
        c.argument('hide_from_address_lists', arg_type=get_three_state_flag(), help='True if the group is not '
                   'displayed in certain parts of the Outlook UI: the Address Book, address lists for selecting '
                   'message recipients, and the Browse Groups dialog for searching groups; otherwise, false. Default '
                   'value is false. Returned only on $select.', arg_group='Group')
        c.argument('hide_from_outlook_clients', arg_type=get_three_state_flag(), help='True if the group is not '
                   'displayed in Outlook clients, such as Outlook for Windows and Outlook on the web; otherwise, '
                   'false. Default value is false. Returned only on $select.', arg_group='Group')
        c.argument('is_subscribed_by_mail', arg_type=get_three_state_flag(), help='Indicates whether the signed-in '
                   'user is subscribed to receive email conversations. Default value is true. Returned only on '
                   '$select.', arg_group='Group')
        c.argument('unseen_count', type=int, help='Count of conversations that have received new posts since the '
                   'signed-in user last visited the group. Returned only on $select.', arg_group='Group')
        c.argument('group_is_archived', arg_type=get_three_state_flag(), help='', arg_group='Group')
        c.argument('app_role_assignments', action=AddAppRoleAssignments, nargs='+', help='', arg_group='Group')
        c.argument('created_on_behalf_of', action=AddCreatedOnBehalfOf, nargs='+', help='Represents an Azure Active '
                   'Directory object. The directoryObject type is the base type for many other directory entity types.',
                   arg_group='Group')
        c.argument('member_of', action=AddMemberOf, nargs='+', help='Groups that this group is a member of. HTTP '
                   'Methods: GET (supported for all groups). Read-only. Nullable.', arg_group='Group')
        c.argument('microsoft_graph_group_members', action=AddMicrosoftGraphGroupMembers, nargs='+', help='Users and '
                   'groups that are members of this group. HTTP Methods: GET (supported for all groups), POST '
                   '(supported for Microsoft 365 groups, security groups and mail-enabled security groups), DELETE '
                   '(supported for Microsoft 365 groups and security groups) Nullable.', arg_group='Group')
        c.argument('members_with_license_errors', action=AddMembersWithLicenseErrors, nargs='+', help='A list of group '
                   'members with license errors from this group-based license assignment. Read-only.',
                   arg_group='Group')
        c.argument('owners', action=AddOwners, nargs='+', help='The owners of the group. The owners are a set of '
                   'non-admin users who are allowed to modify this object. Limited to 100 owners. HTTP Methods: GET '
                   '(supported for all groups), POST (supported for Microsoft 365 groups, security groups and '
                   'mail-enabled security groups), DELETE (supported for Microsoft 365 groups and security groups). '
                   'Nullable.', arg_group='Group')
        c.argument('settings', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('transitive_member_of', action=AddTransitiveMemberOf, nargs='+', help='', arg_group='Group')
        c.argument('transitive_members', action=AddTransitiveMembers, nargs='+', help='', arg_group='Group')
        c.argument('accepted_senders', action=AddAcceptedSenders, nargs='+', help='The list of users or groups that '
                   'are allowed to create post\'s or calendar events in this group. If this list is non-empty then '
                   'only users or groups listed here are allowed to post.', arg_group='Group')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Read-only. '
                   'Expected value: json-string/@json-file.', arg_group='Group')
        c.argument('conversations', type=validate_file_or_dict, help='The group\'s conversations. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('events', type=validate_file_or_dict, help='The group\'s calendar events. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('photo', action=AddGroupsPhoto, nargs='+', help='profilePhoto', arg_group='Group')
        c.argument('photos', action=AddPhotos, nargs='+', help='The profile photos owned by the group. Read-only. '
                   'Nullable.', arg_group='Group')
        c.argument('rejected_senders', action=AddRejectedSenders, nargs='+', help='The list of users or groups that '
                   'are not allowed to create posts or calendar events in this group. Nullable', arg_group='Group')
        c.argument('threads', type=validate_file_or_dict, help='The group\'s conversation threads. Nullable. Expected '
                   'value: json-string/@json-file.', arg_group='Group')
        c.argument('drive', type=validate_file_or_dict, help='drive Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('drives', type=validate_file_or_dict, help='The group\'s drives. Read-only. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('sites', type=validate_file_or_dict, help='The list of SharePoint sites in this group. Access the '
                   'default site with /sites/root. Expected value: json-string/@json-file.', arg_group='Group')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the group. Read-only. Nullable.', arg_group='Group')
        c.argument('group_lifecycle_policies', action=AddGroupLifecyclePolicies, nargs='+', help='The collection of '
                   'lifecycle policies for this group. Read-only. Nullable.', arg_group='Group')
        c.argument('planner', type=validate_file_or_dict, help='plannerGroup Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('onenote', type=validate_file_or_dict, help='onenote Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('team', type=validate_file_or_dict, help='team Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('id2', type=str, help='Read-only.', arg_group='Schedule')
        c.argument('enabled', arg_type=get_three_state_flag(), help='Indicates whether the schedule is enabled for the '
                   'team. Required.', arg_group='Schedule')
        c.argument('offer_shift_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether offer '
                   'shift requests are enabled for the schedule.', arg_group='Schedule')
        c.argument('open_shifts_enabled', arg_type=get_three_state_flag(), help='Indicates whether open shifts are '
                   'enabled for the schedule.', arg_group='Schedule')
        c.argument('provision_status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed', 'Failed']),
                   help='', arg_group='Schedule')
        c.argument('provision_status_code', type=str, help='Additional information about why schedule provisioning '
                   'failed.', arg_group='Schedule')
        c.argument('swap_shifts_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether swap '
                   'shifts requests are enabled for the schedule.', arg_group='Schedule')
        c.argument('time_clock_enabled', arg_type=get_three_state_flag(), help='Indicates whether time clock is '
                   'enabled for the schedule.', arg_group='Schedule')
        c.argument('time_off_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether time off '
                   'requests are enabled for the schedule.', arg_group='Schedule')
        c.argument('time_zone', type=str, help='Indicates the time zone of the schedule team using tz database format. '
                   'Required.', arg_group='Schedule')
        c.argument('workforce_integration_ids', nargs='+', help='', arg_group='Schedule')
        c.argument('offer_shift_requests', action=AddOfferShiftRequests, nargs='+', help='', arg_group='Schedule')
        c.argument('open_shift_change_requests', action=AddOpenShiftChangeRequests, nargs='+', help='',
                   arg_group='Schedule')
        c.argument('open_shifts', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Schedule')
        c.argument('scheduling_groups', action=AddSchedulingGroups, nargs='+', help='The logical grouping of users in '
                   'the schedule (usually by role).', arg_group='Schedule')
        c.argument('shifts', type=validate_file_or_dict, help='The shifts in the schedule. Expected value: '
                   'json-string/@json-file.', arg_group='Schedule')
        c.argument('swap_shifts_change_requests', action=AddSwapShiftsChangeRequests, nargs='+', help='',
                   arg_group='Schedule')
        c.argument('time_off_reasons', action=AddTimeOffReasons, nargs='+', help='The set of reasons for a time off in '
                   'the schedule.', arg_group='Schedule')
        c.argument('time_off_requests', action=AddTimeOffRequests, nargs='+', help='', arg_group='Schedule')
        c.argument('times_off', type=validate_file_or_dict, help='The instances of times off in the schedule. Expected '
                   'value: json-string/@json-file.', arg_group='Schedule')

    with self.argument_context('teams team delete-team') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team show-team') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team archive') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('should_set_spo_site_read_only_for_members', arg_type=get_three_state_flag(), help='')

    with self.argument_context('teams team clone') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('display_name', type=str, help='')
        c.argument('description', type=str, help='')
        c.argument('mail_nickname', type=str, help='')
        c.argument('classification', type=str, help='')
        c.argument('visibility', arg_type=get_enum_type(['private', 'public', 'hiddenMembership',
                                                        'unknownFutureValue']), help='')
        c.argument('parts_to_clone', arg_type=get_enum_type(['apps', 'tabs', 'settings', 'channels', 'members']),
                   help='')

    with self.argument_context('teams team create-channel') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('description', type=str, help='Optional textual description for the channel.')
        c.argument('display_name', type=str, help='Channel name as it will appear to the user in Microsoft Teams.')
        c.argument('email', type=str, help='The email address for sending messages to the channel. Read-only.')
        c.argument('membership_type', arg_type=get_enum_type(['standard', 'private', 'unknownFutureValue']), help='')
        c.argument('web_url', type=str, help='A hyperlink that will navigate to the channel in Microsoft Teams. This '
                   'is the URL that you get when you right-click a channel in Microsoft Teams and select Get link to '
                   'channel. This URL should be treated as an opaque blob, and not parsed. Read-only.')
        c.argument('files_folder', type=validate_file_or_dict,
                   help='driveItem Expected value: json-string/@json-file.')
        c.argument('members', action=AddTeamsMembers, nargs='+', help='')
        c.argument('messages', type=validate_file_or_dict, help='A collection of all the messages in the channel. A '
                   'navigation property. Nullable. Expected value: json-string/@json-file.')
        c.argument('tabs', type=validate_file_or_dict, help='A collection of all the tabs in the channel. A navigation '
                   'property. Expected value: json-string/@json-file.')

    with self.argument_context('teams team create-installed-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('teams_app_definition', action=AddTeamsAppDefinition, nargs='+', help='teamsAppDefinition')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Teams App')
        c.argument('display_name', type=str, help='The name of the catalog app provided by the app developer in the '
                   'Microsoft Teams zip app package.', arg_group='Teams App')
        c.argument('distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded',
                                                                  'unknownFutureValue']), help='', arg_group='Teams '
                   'App')
        c.argument('external_id', type=str, help='The ID of the catalog provided by the app developer in the Microsoft '
                   'Teams zip app package.', arg_group='Teams App')
        c.argument('app_definitions', action=AddAppDefinitions, nargs='+', help='The details for each version of the '
                   'app.', arg_group='Teams App')

    with self.argument_context('teams team create-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The display name of the user.')
        c.argument('roles', nargs='+', help='The roles for that user.')

    with self.argument_context('teams team create-operation') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attempts_count', type=int, help='Number of times the operation was attempted before being marked '
                   'successful or failed.')
        c.argument('created_date_time', help='Time when the operation was created.')
        c.argument('error', action=AddError, nargs='+', help='operationError')
        c.argument('last_action_date_time', help='Time when the async operation was last updated.')
        c.argument('operation_type', arg_type=get_enum_type(['invalid', 'cloneTeam', 'archiveTeam', 'unarchiveTeam',
                                                             'createTeam', 'unknownFutureValue']), help='')
        c.argument('status', arg_type=get_enum_type(['invalid', 'notStarted', 'inProgress', 'succeeded', 'failed',
                                                     'unknownFutureValue']), help='')
        c.argument('target_resource_id', type=str, help='The ID of the object that\'s created or modified as result of '
                   'this async operation, typically a team.')
        c.argument('target_resource_location', type=str, help='The location of the object that\'s created or modified '
                   'as result of this async operation. This URL should be treated as an opaque value and not parsed '
                   'into its component paths.')

    with self.argument_context('teams team delete-channel') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team delete-installed-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team delete-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team delete-operation') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_async_operation_id', type=str, help='key: id of teamsAsyncOperation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team delete-primary-channel') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team delete-ref-group') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team delete-ref-template') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team delete-schedule') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team list-channel') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team list-installed-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team list-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team list-operation') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team set-ref-group') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams team set-ref-template') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams team show-channel') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team show-group') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team show-installed-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team show-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team show-operation') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_async_operation_id', type=str, help='key: id of teamsAsyncOperation')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team show-primary-channel') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team show-ref-group') as c:
        c.argument('team_id', type=str, help='key: id of team')

    with self.argument_context('teams team show-ref-template') as c:
        c.argument('team_id', type=str, help='key: id of team')

    with self.argument_context('teams team show-schedule') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team show-template') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team unarchive') as c:
        c.argument('team_id', type=str, help='key: id of team')

    with self.argument_context('teams team update-channel') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('description', type=str, help='Optional textual description for the channel.')
        c.argument('display_name', type=str, help='Channel name as it will appear to the user in Microsoft Teams.')
        c.argument('email', type=str, help='The email address for sending messages to the channel. Read-only.')
        c.argument('membership_type', arg_type=get_enum_type(['standard', 'private', 'unknownFutureValue']), help='')
        c.argument('web_url', type=str, help='A hyperlink that will navigate to the channel in Microsoft Teams. This '
                   'is the URL that you get when you right-click a channel in Microsoft Teams and select Get link to '
                   'channel. This URL should be treated as an opaque blob, and not parsed. Read-only.')
        c.argument('files_folder', type=validate_file_or_dict,
                   help='driveItem Expected value: json-string/@json-file.')
        c.argument('members', action=AddTeamsMembers, nargs='+', help='')
        c.argument('messages', type=validate_file_or_dict, help='A collection of all the messages in the channel. A '
                   'navigation property. Nullable. Expected value: json-string/@json-file.')
        c.argument('tabs', type=validate_file_or_dict, help='A collection of all the tabs in the channel. A navigation '
                   'property. Expected value: json-string/@json-file.')

    with self.argument_context('teams team update-installed-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('teams_app_definition', action=AddTeamsAppDefinition, nargs='+', help='teamsAppDefinition')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Teams App')
        c.argument('display_name', type=str, help='The name of the catalog app provided by the app developer in the '
                   'Microsoft Teams zip app package.', arg_group='Teams App')
        c.argument('distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded',
                                                                  'unknownFutureValue']), help='', arg_group='Teams '
                   'App')
        c.argument('external_id', type=str, help='The ID of the catalog provided by the app developer in the Microsoft '
                   'Teams zip app package.', arg_group='Teams App')
        c.argument('app_definitions', action=AddAppDefinitions, nargs='+', help='The details for each version of the '
                   'app.', arg_group='Teams App')

    with self.argument_context('teams team update-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The display name of the user.')
        c.argument('roles', nargs='+', help='The roles for that user.')

    with self.argument_context('teams team update-operation') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_async_operation_id', type=str, help='key: id of teamsAsyncOperation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attempts_count', type=int, help='Number of times the operation was attempted before being marked '
                   'successful or failed.')
        c.argument('created_date_time', help='Time when the operation was created.')
        c.argument('error', action=AddError, nargs='+', help='operationError')
        c.argument('last_action_date_time', help='Time when the async operation was last updated.')
        c.argument('operation_type', arg_type=get_enum_type(['invalid', 'cloneTeam', 'archiveTeam', 'unarchiveTeam',
                                                             'createTeam', 'unknownFutureValue']), help='')
        c.argument('status', arg_type=get_enum_type(['invalid', 'notStarted', 'inProgress', 'succeeded', 'failed',
                                                     'unknownFutureValue']), help='')
        c.argument('target_resource_id', type=str, help='The ID of the object that\'s created or modified as result of '
                   'this async operation, typically a team.')
        c.argument('target_resource_location', type=str, help='The location of the object that\'s created or modified '
                   'as result of this async operation. This URL should be treated as an opaque value and not parsed '
                   'into its component paths.')

    with self.argument_context('teams team update-primary-channel') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('description', type=str, help='Optional textual description for the channel.')
        c.argument('display_name', type=str, help='Channel name as it will appear to the user in Microsoft Teams.')
        c.argument('email', type=str, help='The email address for sending messages to the channel. Read-only.')
        c.argument('membership_type', arg_type=get_enum_type(['standard', 'private', 'unknownFutureValue']), help='')
        c.argument('web_url', type=str, help='A hyperlink that will navigate to the channel in Microsoft Teams. This '
                   'is the URL that you get when you right-click a channel in Microsoft Teams and select Get link to '
                   'channel. This URL should be treated as an opaque blob, and not parsed. Read-only.')
        c.argument('files_folder', type=validate_file_or_dict,
                   help='driveItem Expected value: json-string/@json-file.')
        c.argument('members', action=AddTeamsMembers, nargs='+', help='')
        c.argument('messages', type=validate_file_or_dict, help='A collection of all the messages in the channel. A '
                   'navigation property. Nullable. Expected value: json-string/@json-file.')
        c.argument('tabs', type=validate_file_or_dict, help='A collection of all the tabs in the channel. A navigation '
                   'property. Expected value: json-string/@json-file.')

    with self.argument_context('teams team update-schedule') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('enabled', arg_type=get_three_state_flag(), help='Indicates whether the schedule is enabled for the '
                   'team. Required.')
        c.argument('offer_shift_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether offer '
                   'shift requests are enabled for the schedule.')
        c.argument('open_shifts_enabled', arg_type=get_three_state_flag(), help='Indicates whether open shifts are '
                   'enabled for the schedule.')
        c.argument('provision_status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed', 'Failed']),
                   help='')
        c.argument('provision_status_code', type=str, help='Additional information about why schedule provisioning '
                   'failed.')
        c.argument('swap_shifts_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether swap '
                   'shifts requests are enabled for the schedule.')
        c.argument('time_clock_enabled', arg_type=get_three_state_flag(), help='Indicates whether time clock is '
                   'enabled for the schedule.')
        c.argument('time_off_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether time off '
                   'requests are enabled for the schedule.')
        c.argument('time_zone', type=str, help='Indicates the time zone of the schedule team using tz database format. '
                   'Required.')
        c.argument('workforce_integration_ids', nargs='+', help='')
        c.argument('offer_shift_requests', action=AddOfferShiftRequests, nargs='+', help='')
        c.argument('open_shift_change_requests', action=AddOpenShiftChangeRequests, nargs='+', help='')
        c.argument('open_shifts', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('scheduling_groups', action=AddSchedulingGroups, nargs='+', help='The logical grouping of users in '
                   'the schedule (usually by role).')
        c.argument('shifts', type=validate_file_or_dict, help='The shifts in the schedule. Expected value: '
                   'json-string/@json-file.')
        c.argument('swap_shifts_change_requests', action=AddSwapShiftsChangeRequests, nargs='+', help='')
        c.argument('time_off_reasons', action=AddTimeOffReasons, nargs='+', help='The set of reasons for a time off in '
                   'the schedule.')
        c.argument('time_off_requests', action=AddTimeOffRequests, nargs='+', help='')
        c.argument('times_off', type=validate_file_or_dict, help='The instances of times off in the schedule. Expected '
                   'value: json-string/@json-file.')

    with self.argument_context('teams team-channel create-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The display name of the user.')
        c.argument('roles', nargs='+', help='The roles for that user.')

    with self.argument_context('teams team-channel create-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='+', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='+', help='itemBody')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent', 'unknownFutureValue']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', type=validate_file_or_dict, help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel. Expected value: json-string/@json-file.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing', 'unknownFutureValue']),
                   help='')
        c.argument('reactions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='+', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess',
                                                         'blockAccessExternal']), help='',
                                                         arg_group='Policy Violation')
        c.argument('justification_text', type=str, help='', arg_group='Policy Violation')
        c.argument('policy_tip', action=AddPolicyTip, nargs='+', help='chatMessagePolicyViolationPolicyTip',
                   arg_group='Policy Violation')
        c.argument('user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']), help='',
                   arg_group='Policy Violation')
        c.argument('verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride',
                                                              'allowOverrideWithoutJustification',
                                                              'allowOverrideWithJustification']), help='',
                   arg_group='Policy Violation')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='From')

    with self.argument_context('teams team-channel create-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('configuration', action=AddConfiguration, nargs='+', help='teamsTabConfiguration')
        c.argument('display_name', type=str, help='Name of the tab.')
        c.argument('web_url', type=str, help='Deep link URL of the tab instance. Read only.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Teams App')
        c.argument('microsoft_graph_teams_app_display_name', type=str, help='The name of the catalog app provided by '
                   'the app developer in the Microsoft Teams zip app package.', arg_group='Teams App')
        c.argument('distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded',
                                                                  'unknownFutureValue']), help='', arg_group='Teams '
                   'App')
        c.argument('external_id', type=str, help='The ID of the catalog provided by the app developer in the Microsoft '
                   'Teams zip app package.', arg_group='Teams App')
        c.argument('app_definitions', action=AddAppDefinitions, nargs='+', help='The details for each version of the '
                   'app.', arg_group='Teams App')

    with self.argument_context('teams team-channel delete-file-folder') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-channel delete-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-channel delete-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-channel delete-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-channel list-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-channel list-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-channel list-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-channel show-file-folder') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-channel show-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-channel show-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-channel show-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-channel update-file-folder') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/@json-file.')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('audio', action=AddAudio, nargs='+', help='audio')
        c.argument('content', help='The content stream, if the item represents a file.')
        c.argument('c_tag', type=str, help='An eTag for the content of the item. This eTag is not changed if only the '
                   'metadata is changed. Note This property is not returned if the item is a folder. Read-only.')
        c.argument('file_system_info', action=AddFileSystemInfo, nargs='+', help='fileSystemInfo')
        c.argument('image', action=AddImage, nargs='+', help='image')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('photo', action=AddTeamsChannelsPhoto, nargs='+', help='photo')
        c.argument('publication', action=AddPublication, nargs='+', help='publicationFacet')
        c.argument('root', type=validate_file_or_dict, help='root Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('size', type=int, help='Size of the item in bytes. Read-only.')
        c.argument('video', action=AddVideo, nargs='+', help='video')
        c.argument('web_dav_url', type=str, help='WebDAV compatible URL for the item.')
        c.argument('children', type=validate_file_or_dict, help='Collection containing Item objects for the immediate '
                   'children of Item. Only items representing folders have children. Read-only. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('permissions', type=validate_file_or_dict, help='The set of permissions for the item. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('subscriptions', action=AddSubscriptions, nargs='+', help='The set of subscriptions on the item. '
                   'Only supported on the root of a drive.')
        c.argument('thumbnails', type=validate_file_or_dict, help='Collection containing [ThumbnailSet][] objects '
                   'associated with the item. For more info, see [getting thumbnails][]. Read-only. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('versions', action=AddVersions, nargs='+', help='The list of previous versions of the item. For '
                   'more info, see [getting previous versions][]. Read-only. Nullable.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='List Item')
        c.argument('microsoft_graph_base_item_created_date_time_created_date_time', help='Date and time of item '
                   'creation. Read-only.', arg_group='List Item')
        c.argument('microsoft_graph_base_item_description', type=str, help='Provides a user-visible description of the '
                   'item. Optional.', arg_group='List Item')
        c.argument('microsoft_graph_base_item_e_tag', type=str, help='ETag for the item. Read-only.', arg_group='List '
                   'Item')
        c.argument('microsoft_graph_base_item_last_modified_date_time_last_modified_date_time', help='Date and time '
                   'the item was last modified. Read-only.', arg_group='List Item')
        c.argument('microsoft_graph_base_item_name', type=str, help='The name of the item. Read-write.',
                   arg_group='List Item')
        c.argument('microsoft_graph_base_item_web_url', type=str, help='URL that displays the resource in the browser. '
                   'Read-only.', arg_group='List Item')
        c.argument('microsoft_graph_user_created_by_user', type=validate_file_or_dict, help='Represents an Azure '
                   'Active Directory user object. Expected value: json-string/@json-file.', arg_group='List Item')
        c.argument('microsoft_graph_user_last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure '
                   'Active Directory user object. Expected value: json-string/@json-file.', arg_group='List Item')
        c.argument('microsoft_graph_item_reference_drive_id', type=str, help='Unique identifier of the drive instance '
                   'that contains the item. Read-only.', arg_group='List Item Parent Reference')
        c.argument('microsoft_graph_item_reference_drive_type', type=str, help='Identifies the type of drive. See '
                   '[drive][] resource for values.', arg_group='List Item Parent Reference')
        c.argument('id1', type=str, help='Unique identifier of the item in the drive. Read-only.', arg_group='List '
                   'Item Parent Reference')
        c.argument('name1', type=str, help='The name of the item being referenced. Read-only.', arg_group='List Item '
                   'Parent Reference')
        c.argument('microsoft_graph_item_reference_path', type=str, help='Path that can be used to navigate to the '
                   'item. Read-only.', arg_group='List Item Parent Reference')
        c.argument('microsoft_graph_item_reference_share_id', type=str, help='A unique identifier for a shared '
                   'resource that can be accessed via the [Shares][] API.', arg_group='List Item Parent Reference')
        c.argument('sharepoint_ids1', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='List Item '
                   'Parent Reference')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='',
                   arg_group='List Item Parent Reference')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='List Item Last '
                   'Modified By')
        c.argument('device1', action=AddApplication, nargs='+', help='identity',
                   arg_group='List Item Last Modified By')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='List Item Last Modified By')
        c.argument('application2', action=AddApplication, nargs='+', help='identity',
                   arg_group='List Item Created By')
        c.argument('device2', action=AddApplication, nargs='+', help='identity', arg_group='List Item Created By')
        c.argument('user2', action=AddApplication, nargs='+', help='identity', arg_group='List Item Created By')
        c.argument('list_item_content_type', action=AddListItemContentType, nargs='+', help='contentTypeInfo',
                   arg_group='List Item')
        c.argument('sharepoint_ids2', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='List Item')
        c.argument('analytics', type=validate_file_or_dict, help='itemAnalytics Expected value: '
                   'json-string/@json-file.', arg_group='List Item')
        c.argument('drive_item', type=validate_file_or_dict, help='driveItem Expected value: json-string/@json-file.',
                   arg_group='List Item')
        c.argument('fields', action=AddFields, nargs='+', help='fieldValueSet', arg_group='List Item')
        c.argument('microsoft_graph_list_item_versions', type=validate_file_or_dict, help='The list of previous '
                   'versions of the list item. Expected value: json-string/@json-file.', arg_group='List Item')
        c.argument('id2', type=str, help='Read-only.', arg_group='Analytics')
        c.argument('all_time', type=validate_file_or_dict, help='itemActivityStat Expected value: '
                   'json-string/@json-file.', arg_group='Analytics')
        c.argument('item_activity_stats', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Analytics')
        c.argument('last_seven_days', type=validate_file_or_dict, help='itemActivityStat Expected value: '
                   'json-string/@json-file.', arg_group='Analytics')
        c.argument('id3', type=str, help='Read-only.', arg_group='Workbook')
        c.argument('microsoft_graph_workbook_application', action=AddMicrosoftGraphWorkbookApplication, nargs='+',
                   help='workbookApplication', arg_group='Workbook')
        c.argument('comments', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Workbook')
        c.argument('functions', action=AddFunctions, nargs='+', help='workbookFunctions', arg_group='Workbook')
        c.argument('names', type=validate_file_or_dict, help='Represents a collection of workbook scoped named items '
                   '(named ranges and constants). Read-only. Expected value: json-string/@json-file.',
                   arg_group='Workbook')
        c.argument('operations', type=validate_file_or_dict, help='The status of workbook operations. Getting an '
                   'operation collection is not supported, but you can get the status of a long-running operation if '
                   'the Location header is returned in the response. Read-only. Expected value: '
                   'json-string/@json-file.', arg_group='Workbook')
        c.argument('tables', type=validate_file_or_dict, help='Represents a collection of tables associated with the '
                   'workbook. Read-only. Expected value: json-string/@json-file.', arg_group='Workbook')
        c.argument('worksheets', type=validate_file_or_dict, help='Represents a collection of worksheets associated '
                   'with the workbook. Read-only. Expected value: json-string/@json-file.', arg_group='Workbook')
        c.argument('microsoft_graph_special_folder_name', type=str, help='The unique identifier for this item in the '
                   '/drive/special collection', arg_group='Special Folder')
        c.argument('owner', type=validate_file_or_dict, help='identitySet Expected value: json-string/@json-file.',
                   arg_group='Shared')
        c.argument('scope', type=str, help='Indicates the scope of how the item is shared: anonymous, organization, or '
                   'users. Read-only.', arg_group='Shared')
        c.argument('shared_by', type=validate_file_or_dict, help='identitySet Expected value: json-string/@json-file.',
                   arg_group='Shared')
        c.argument('shared_date_time', help='The UTC date and time when the item was shared. Read-only.',
                   arg_group='Shared')
        c.argument('on_click_telemetry_url', type=str, help='A callback URL that can be used to record telemetry '
                   'information. The application should issue a GET on this URL if the user interacts with this item '
                   'to improve the quality of results.', arg_group='Search Result')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Remote Item')
        c.argument('microsoft_graph_remote_item_created_date_time_created_date_time', help='Date and time of item '
                   'creation. Read-only.', arg_group='Remote Item')
        c.argument('file', type=validate_file_or_dict, help='file Expected value: json-string/@json-file.',
                   arg_group='Remote Item')
        c.argument('microsoft_graph_file_system_info_file_system_info', action=AddFileSystemInfo, nargs='+',
                   help='fileSystemInfo', arg_group='Remote Item')
        c.argument('folder', type=validate_file_or_dict, help='folder Expected value: json-string/@json-file.',
                   arg_group='Remote Item')
        c.argument('microsoft_graph_remote_item_id', type=str, help='Unique identifier for the remote item in its '
                   'drive. Read-only.', arg_group='Remote Item')
        c.argument('microsoft_graph_image', action=AddImage, nargs='+', help='image', arg_group='Remote Item')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Remote Item')
        c.argument('microsoft_graph_remote_item_last_modified_date_time_last_modified_date_time', help='Date and time '
                   'the item was last modified. Read-only.', arg_group='Remote Item')
        c.argument('microsoft_graph_remote_item_name', type=str, help='Optional. Filename of the remote item. '
                   'Read-only.', arg_group='Remote Item')
        c.argument('package', action=AddPackage, nargs='+', help='package', arg_group='Remote Item')
        c.argument('parent_reference', type=validate_file_or_dict, help='itemReference Expected value: '
                   'json-string/@json-file.', arg_group='Remote Item')
        c.argument('shared', type=validate_file_or_dict, help='shared Expected value: json-string/@json-file.',
                   arg_group='Remote Item')
        c.argument('sharepoint_ids3', action=AddSharepointIds, nargs='+', help='sharepointIds',
                   arg_group='Remote Item')
        c.argument('integer_size', type=int, help='Size of the remote item. Read-only.', arg_group='Remote Item')
        c.argument('special_folder', action=AddSpecialFolder, nargs='+', help='specialFolder',
                   arg_group='Remote Item')
        c.argument('microsoft_graph_video', action=AddVideo, nargs='+', help='video', arg_group='Remote Item')
        c.argument('microsoft_graph_remote_item_web_dav_url_web_dav_url', type=str, help='DAV compatible URL for the '
                   'item.', arg_group='Remote Item')
        c.argument('microsoft_graph_remote_item_web_url', type=str, help='URL that displays the resource in the '
                   'browser. Read-only.', arg_group='Remote Item')
        c.argument('queued_date_time', help='Date and time the pending binary operation was queued in UTC time. '
                   'Read-only.', arg_group='Pending Operations Pending Content Update')
        c.argument('type_', options_list=['--type'], type=str, help='A string indicating the type of package. While '
                   'oneNote is the only currently defined value, you should expect other package types to be returned '
                   'and handle them accordingly.', arg_group='Package')
        c.argument('child_count', type=int, help='Number of children contained immediately within this container.',
                   arg_group='Folder')
        c.argument('view', action=AddView, nargs='+', help='folderView', arg_group='Folder')
        c.argument('hashes', action=AddHashes, nargs='+', help='hashes', arg_group='File')
        c.argument('mime_type', type=str, help='The MIME type for the file. This is determined by logic on the server '
                   'and might not be the value provided when the file was uploaded. Read-only.', arg_group='File')
        c.argument('processing_metadata', arg_type=get_three_state_flag(), help='', arg_group='File')
        c.argument('state', type=str, help='Represents the state of the deleted item.', arg_group='Deleted')

    with self.argument_context('teams team-channel update-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The display name of the user.')
        c.argument('roles', nargs='+', help='The roles for that user.')

    with self.argument_context('teams team-channel update-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='+', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='+', help='itemBody')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent', 'unknownFutureValue']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', type=validate_file_or_dict, help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel. Expected value: json-string/@json-file.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing', 'unknownFutureValue']),
                   help='')
        c.argument('reactions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='+', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess',
                                                         'blockAccessExternal']), help='',
                                                         arg_group='Policy Violation')
        c.argument('justification_text', type=str, help='', arg_group='Policy Violation')
        c.argument('policy_tip', action=AddPolicyTip, nargs='+', help='chatMessagePolicyViolationPolicyTip',
                   arg_group='Policy Violation')
        c.argument('user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']), help='',
                   arg_group='Policy Violation')
        c.argument('verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride',
                                                              'allowOverrideWithoutJustification',
                                                              'allowOverrideWithJustification']), help='',
                   arg_group='Policy Violation')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='From')

    with self.argument_context('teams team-channel update-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('configuration', action=AddConfiguration, nargs='+', help='teamsTabConfiguration')
        c.argument('display_name', type=str, help='Name of the tab.')
        c.argument('web_url', type=str, help='Deep link URL of the tab instance. Read only.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Teams App')
        c.argument('microsoft_graph_teams_app_display_name', type=str, help='The name of the catalog app provided by '
                   'the app developer in the Microsoft Teams zip app package.', arg_group='Teams App')
        c.argument('distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded',
                                                                  'unknownFutureValue']), help='', arg_group='Teams '
                   'App')
        c.argument('external_id', type=str, help='The ID of the catalog provided by the app developer in the Microsoft '
                   'Teams zip app package.', arg_group='Teams App')
        c.argument('app_definitions', action=AddAppDefinitions, nargs='+', help='The details for each version of the '
                   'app.', arg_group='Teams App')

    with self.argument_context('teams team-channel-message create-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('teams team-channel-message create-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='+', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='+', help='itemBody')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent', 'unknownFutureValue']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', type=validate_file_or_dict, help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel. Expected value: json-string/@json-file.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing', 'unknownFutureValue']),
                   help='')
        c.argument('reactions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='+', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess',
                                                         'blockAccessExternal']), help='',
                                                         arg_group='Policy Violation')
        c.argument('justification_text', type=str, help='', arg_group='Policy Violation')
        c.argument('policy_tip', action=AddPolicyTip, nargs='+', help='chatMessagePolicyViolationPolicyTip',
                   arg_group='Policy Violation')
        c.argument('user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']), help='',
                   arg_group='Policy Violation')
        c.argument('verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride',
                                                              'allowOverrideWithoutJustification',
                                                              'allowOverrideWithJustification']), help='',
                   arg_group='Policy Violation')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='From')

    with self.argument_context('teams team-channel-message delete-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-channel-message delete-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-channel-message list-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-channel-message list-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-channel-message show-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-channel-message show-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-channel-message update-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('teams team-channel-message update-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='+', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='+', help='itemBody')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent', 'unknownFutureValue']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', type=validate_file_or_dict, help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel. Expected value: json-string/@json-file.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing', 'unknownFutureValue']),
                   help='')
        c.argument('reactions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='+', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess',
                                                         'blockAccessExternal']), help='',
                                                         arg_group='Policy Violation')
        c.argument('justification_text', type=str, help='', arg_group='Policy Violation')
        c.argument('policy_tip', action=AddPolicyTip, nargs='+', help='chatMessagePolicyViolationPolicyTip',
                   arg_group='Policy Violation')
        c.argument('user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']), help='',
                   arg_group='Policy Violation')
        c.argument('verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride',
                                                              'allowOverrideWithoutJustification',
                                                              'allowOverrideWithJustification']), help='',
                   arg_group='Policy Violation')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='From')

    with self.argument_context('teams team-channel-tab delete-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-channel-tab set-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams team-channel-tab show-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')

    with self.argument_context('teams team-channel-tab show-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('channel_id', type=str, help='key: id of channel')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-installed-app delete-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-installed-app delete-ref-team-app-definition') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-installed-app set-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams team-installed-app set-ref-team-app-definition') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams team-installed-app show-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')

    with self.argument_context('teams team-installed-app show-ref-team-app-definition') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')

    with self.argument_context('teams team-installed-app show-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-installed-app show-team-app-definition') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-installed-app upgrade') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_app_installation_id', type=str, help='key: id of teamsAppInstallation')

    with self.argument_context('teams team-primary-channel create-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The display name of the user.')
        c.argument('roles', nargs='+', help='The roles for that user.')

    with self.argument_context('teams team-primary-channel create-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='+', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='+', help='itemBody')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent', 'unknownFutureValue']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', type=validate_file_or_dict, help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel. Expected value: json-string/@json-file.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing', 'unknownFutureValue']),
                   help='')
        c.argument('reactions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='+', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess',
                                                         'blockAccessExternal']), help='',
                                                         arg_group='Policy Violation')
        c.argument('justification_text', type=str, help='', arg_group='Policy Violation')
        c.argument('policy_tip', action=AddPolicyTip, nargs='+', help='chatMessagePolicyViolationPolicyTip',
                   arg_group='Policy Violation')
        c.argument('user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']), help='',
                   arg_group='Policy Violation')
        c.argument('verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride',
                                                              'allowOverrideWithoutJustification',
                                                              'allowOverrideWithJustification']), help='',
                   arg_group='Policy Violation')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='From')

    with self.argument_context('teams team-primary-channel create-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('configuration', action=AddConfiguration, nargs='+', help='teamsTabConfiguration')
        c.argument('display_name', type=str, help='Name of the tab.')
        c.argument('web_url', type=str, help='Deep link URL of the tab instance. Read only.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Teams App')
        c.argument('microsoft_graph_teams_app_display_name', type=str, help='The name of the catalog app provided by '
                   'the app developer in the Microsoft Teams zip app package.', arg_group='Teams App')
        c.argument('distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded',
                                                                  'unknownFutureValue']), help='', arg_group='Teams '
                   'App')
        c.argument('external_id', type=str, help='The ID of the catalog provided by the app developer in the Microsoft '
                   'Teams zip app package.', arg_group='Teams App')
        c.argument('app_definitions', action=AddAppDefinitions, nargs='+', help='The details for each version of the '
                   'app.', arg_group='Teams App')

    with self.argument_context('teams team-primary-channel delete-file-folder') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-primary-channel delete-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-primary-channel delete-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-primary-channel delete-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-primary-channel list-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-primary-channel list-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-primary-channel list-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-primary-channel show-file-folder') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-primary-channel show-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-primary-channel show-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-primary-channel show-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-primary-channel update-file-folder') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Date and time of item creation. Read-only.')
        c.argument('description', type=str, help='Provides a user-visible description of the item. Optional.')
        c.argument('e_tag', type=str, help='ETag for the item. Read-only.')
        c.argument('last_modified_date_time', help='Date and time the item was last modified. Read-only.')
        c.argument('name', type=str, help='The name of the item. Read-write.')
        c.argument('web_url', type=str, help='URL that displays the resource in the browser. Read-only.')
        c.argument('created_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/@json-file.')
        c.argument('last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure Active Directory '
                   'user object. Expected value: json-string/@json-file.')
        c.argument('drive_id', type=str, help='Unique identifier of the drive instance that contains the item. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('drive_type', type=str, help='Identifies the type of drive. See [drive][] resource for values.',
                   arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_id', type=str, help='Unique identifier of the item in the drive. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('microsoft_graph_item_reference_name', type=str, help='The name of the item being referenced. '
                   'Read-only.', arg_group='Parent Reference')
        c.argument('path', type=str, help='Path that can be used to navigate to the item. Read-only.',
                   arg_group='Parent Reference')
        c.argument('share_id', type=str, help='A unique identifier for a shared resource that can be accessed via the '
                   '[Shares][] API.', arg_group='Parent Reference')
        c.argument('sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='Parent '
                   'Reference')
        c.argument('site_id', type=str, help='', arg_group='Parent Reference')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('microsoft_graph_identity_application', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_device', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')
        c.argument('audio', action=AddAudio, nargs='+', help='audio')
        c.argument('content', help='The content stream, if the item represents a file.')
        c.argument('c_tag', type=str, help='An eTag for the content of the item. This eTag is not changed if only the '
                   'metadata is changed. Note This property is not returned if the item is a folder. Read-only.')
        c.argument('file_system_info', action=AddFileSystemInfo, nargs='+', help='fileSystemInfo')
        c.argument('image', action=AddImage, nargs='+', help='image')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('photo', action=AddTeamsChannelsPhoto, nargs='+', help='photo')
        c.argument('publication', action=AddPublication, nargs='+', help='publicationFacet')
        c.argument('root', type=validate_file_or_dict, help='root Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_sharepoint_ids', action=AddSharepointIds, nargs='+', help='sharepointIds')
        c.argument('size', type=int, help='Size of the item in bytes. Read-only.')
        c.argument('video', action=AddVideo, nargs='+', help='video')
        c.argument('web_dav_url', type=str, help='WebDAV compatible URL for the item.')
        c.argument('children', type=validate_file_or_dict, help='Collection containing Item objects for the immediate '
                   'children of Item. Only items representing folders have children. Read-only. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('permissions', type=validate_file_or_dict, help='The set of permissions for the item. Read-only. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('subscriptions', action=AddSubscriptions, nargs='+', help='The set of subscriptions on the item. '
                   'Only supported on the root of a drive.')
        c.argument('thumbnails', type=validate_file_or_dict, help='Collection containing [ThumbnailSet][] objects '
                   'associated with the item. For more info, see [getting thumbnails][]. Read-only. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('versions', action=AddVersions, nargs='+', help='The list of previous versions of the item. For '
                   'more info, see [getting previous versions][]. Read-only. Nullable.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='List Item')
        c.argument('microsoft_graph_base_item_created_date_time_created_date_time', help='Date and time of item '
                   'creation. Read-only.', arg_group='List Item')
        c.argument('microsoft_graph_base_item_description', type=str, help='Provides a user-visible description of the '
                   'item. Optional.', arg_group='List Item')
        c.argument('microsoft_graph_base_item_e_tag', type=str, help='ETag for the item. Read-only.', arg_group='List '
                   'Item')
        c.argument('microsoft_graph_base_item_last_modified_date_time_last_modified_date_time', help='Date and time '
                   'the item was last modified. Read-only.', arg_group='List Item')
        c.argument('microsoft_graph_base_item_name', type=str, help='The name of the item. Read-write.',
                   arg_group='List Item')
        c.argument('microsoft_graph_base_item_web_url', type=str, help='URL that displays the resource in the browser. '
                   'Read-only.', arg_group='List Item')
        c.argument('microsoft_graph_user_created_by_user', type=validate_file_or_dict, help='Represents an Azure '
                   'Active Directory user object. Expected value: json-string/@json-file.', arg_group='List Item')
        c.argument('microsoft_graph_user_last_modified_by_user', type=validate_file_or_dict, help='Represents an Azure '
                   'Active Directory user object. Expected value: json-string/@json-file.', arg_group='List Item')
        c.argument('microsoft_graph_item_reference_drive_id', type=str, help='Unique identifier of the drive instance '
                   'that contains the item. Read-only.', arg_group='List Item Parent Reference')
        c.argument('microsoft_graph_item_reference_drive_type', type=str, help='Identifies the type of drive. See '
                   '[drive][] resource for values.', arg_group='List Item Parent Reference')
        c.argument('id1', type=str, help='Unique identifier of the item in the drive. Read-only.', arg_group='List '
                   'Item Parent Reference')
        c.argument('name1', type=str, help='The name of the item being referenced. Read-only.', arg_group='List Item '
                   'Parent Reference')
        c.argument('microsoft_graph_item_reference_path', type=str, help='Path that can be used to navigate to the '
                   'item. Read-only.', arg_group='List Item Parent Reference')
        c.argument('microsoft_graph_item_reference_share_id', type=str, help='A unique identifier for a shared '
                   'resource that can be accessed via the [Shares][] API.', arg_group='List Item Parent Reference')
        c.argument('sharepoint_ids1', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='List Item '
                   'Parent Reference')
        c.argument('microsoft_graph_item_reference_site_id', type=str, help='',
                   arg_group='List Item Parent Reference')
        c.argument('application1', action=AddApplication, nargs='+', help='identity', arg_group='List Item Last '
                   'Modified By')
        c.argument('device1', action=AddApplication, nargs='+', help='identity',
                   arg_group='List Item Last Modified By')
        c.argument('user1', action=AddApplication, nargs='+', help='identity', arg_group='List Item Last Modified By')
        c.argument('application2', action=AddApplication, nargs='+', help='identity',
                   arg_group='List Item Created By')
        c.argument('device2', action=AddApplication, nargs='+', help='identity', arg_group='List Item Created By')
        c.argument('user2', action=AddApplication, nargs='+', help='identity', arg_group='List Item Created By')
        c.argument('list_item_content_type', action=AddListItemContentType, nargs='+', help='contentTypeInfo',
                   arg_group='List Item')
        c.argument('sharepoint_ids2', action=AddSharepointIds, nargs='+', help='sharepointIds', arg_group='List Item')
        c.argument('analytics', type=validate_file_or_dict, help='itemAnalytics Expected value: '
                   'json-string/@json-file.', arg_group='List Item')
        c.argument('drive_item', type=validate_file_or_dict, help='driveItem Expected value: json-string/@json-file.',
                   arg_group='List Item')
        c.argument('fields', action=AddFields, nargs='+', help='fieldValueSet', arg_group='List Item')
        c.argument('microsoft_graph_list_item_versions', type=validate_file_or_dict, help='The list of previous '
                   'versions of the list item. Expected value: json-string/@json-file.', arg_group='List Item')
        c.argument('id2', type=str, help='Read-only.', arg_group='Analytics')
        c.argument('all_time', type=validate_file_or_dict, help='itemActivityStat Expected value: '
                   'json-string/@json-file.', arg_group='Analytics')
        c.argument('item_activity_stats', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Analytics')
        c.argument('last_seven_days', type=validate_file_or_dict, help='itemActivityStat Expected value: '
                   'json-string/@json-file.', arg_group='Analytics')
        c.argument('id3', type=str, help='Read-only.', arg_group='Workbook')
        c.argument('microsoft_graph_workbook_application', action=AddMicrosoftGraphWorkbookApplication, nargs='+',
                   help='workbookApplication', arg_group='Workbook')
        c.argument('comments', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Workbook')
        c.argument('functions', action=AddFunctions, nargs='+', help='workbookFunctions', arg_group='Workbook')
        c.argument('names', type=validate_file_or_dict, help='Represents a collection of workbook scoped named items '
                   '(named ranges and constants). Read-only. Expected value: json-string/@json-file.',
                   arg_group='Workbook')
        c.argument('operations', type=validate_file_or_dict, help='The status of workbook operations. Getting an '
                   'operation collection is not supported, but you can get the status of a long-running operation if '
                   'the Location header is returned in the response. Read-only. Expected value: '
                   'json-string/@json-file.', arg_group='Workbook')
        c.argument('tables', type=validate_file_or_dict, help='Represents a collection of tables associated with the '
                   'workbook. Read-only. Expected value: json-string/@json-file.', arg_group='Workbook')
        c.argument('worksheets', type=validate_file_or_dict, help='Represents a collection of worksheets associated '
                   'with the workbook. Read-only. Expected value: json-string/@json-file.', arg_group='Workbook')
        c.argument('microsoft_graph_special_folder_name', type=str, help='The unique identifier for this item in the '
                   '/drive/special collection', arg_group='Special Folder')
        c.argument('owner', type=validate_file_or_dict, help='identitySet Expected value: json-string/@json-file.',
                   arg_group='Shared')
        c.argument('scope', type=str, help='Indicates the scope of how the item is shared: anonymous, organization, or '
                   'users. Read-only.', arg_group='Shared')
        c.argument('shared_by', type=validate_file_or_dict, help='identitySet Expected value: json-string/@json-file.',
                   arg_group='Shared')
        c.argument('shared_date_time', help='The UTC date and time when the item was shared. Read-only.',
                   arg_group='Shared')
        c.argument('on_click_telemetry_url', type=str, help='A callback URL that can be used to record telemetry '
                   'information. The application should issue a GET on this URL if the user interacts with this item '
                   'to improve the quality of results.', arg_group='Search Result')
        c.argument('created_by', type=validate_file_or_dict,
                   help='identitySet Expected value: json-string/@json-file.', arg_group='Remote Item')
        c.argument('microsoft_graph_remote_item_created_date_time_created_date_time', help='Date and time of item '
                   'creation. Read-only.', arg_group='Remote Item')
        c.argument('file', type=validate_file_or_dict, help='file Expected value: json-string/@json-file.',
                   arg_group='Remote Item')
        c.argument('microsoft_graph_file_system_info_file_system_info', action=AddFileSystemInfo, nargs='+',
                   help='fileSystemInfo', arg_group='Remote Item')
        c.argument('folder', type=validate_file_or_dict, help='folder Expected value: json-string/@json-file.',
                   arg_group='Remote Item')
        c.argument('microsoft_graph_remote_item_id', type=str, help='Unique identifier for the remote item in its '
                   'drive. Read-only.', arg_group='Remote Item')
        c.argument('microsoft_graph_image', action=AddImage, nargs='+', help='image', arg_group='Remote Item')
        c.argument('last_modified_by', type=validate_file_or_dict, help='identitySet Expected value: '
                   'json-string/@json-file.', arg_group='Remote Item')
        c.argument('microsoft_graph_remote_item_last_modified_date_time_last_modified_date_time', help='Date and time '
                   'the item was last modified. Read-only.', arg_group='Remote Item')
        c.argument('microsoft_graph_remote_item_name', type=str, help='Optional. Filename of the remote item. '
                   'Read-only.', arg_group='Remote Item')
        c.argument('package', action=AddPackage, nargs='+', help='package', arg_group='Remote Item')
        c.argument('parent_reference', type=validate_file_or_dict, help='itemReference Expected value: '
                   'json-string/@json-file.', arg_group='Remote Item')
        c.argument('shared', type=validate_file_or_dict, help='shared Expected value: json-string/@json-file.',
                   arg_group='Remote Item')
        c.argument('sharepoint_ids3', action=AddSharepointIds, nargs='+', help='sharepointIds',
                   arg_group='Remote Item')
        c.argument('integer_size', type=int, help='Size of the remote item. Read-only.', arg_group='Remote Item')
        c.argument('special_folder', action=AddSpecialFolder, nargs='+', help='specialFolder',
                   arg_group='Remote Item')
        c.argument('microsoft_graph_video', action=AddVideo, nargs='+', help='video', arg_group='Remote Item')
        c.argument('microsoft_graph_remote_item_web_dav_url_web_dav_url', type=str, help='DAV compatible URL for the '
                   'item.', arg_group='Remote Item')
        c.argument('microsoft_graph_remote_item_web_url', type=str, help='URL that displays the resource in the '
                   'browser. Read-only.', arg_group='Remote Item')
        c.argument('queued_date_time', help='Date and time the pending binary operation was queued in UTC time. '
                   'Read-only.', arg_group='Pending Operations Pending Content Update')
        c.argument('type_', options_list=['--type'], type=str, help='A string indicating the type of package. While '
                   'oneNote is the only currently defined value, you should expect other package types to be returned '
                   'and handle them accordingly.', arg_group='Package')
        c.argument('child_count', type=int, help='Number of children contained immediately within this container.',
                   arg_group='Folder')
        c.argument('view', action=AddView, nargs='+', help='folderView', arg_group='Folder')
        c.argument('hashes', action=AddHashes, nargs='+', help='hashes', arg_group='File')
        c.argument('mime_type', type=str, help='The MIME type for the file. This is determined by logic on the server '
                   'and might not be the value provided when the file was uploaded. Read-only.', arg_group='File')
        c.argument('processing_metadata', arg_type=get_three_state_flag(), help='', arg_group='File')
        c.argument('state', type=str, help='Represents the state of the deleted item.', arg_group='Deleted')

    with self.argument_context('teams team-primary-channel update-member') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('conversation_member_id', type=str, help='key: id of conversationMember')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The display name of the user.')
        c.argument('roles', nargs='+', help='The roles for that user.')

    with self.argument_context('teams team-primary-channel update-message') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='+', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='+', help='itemBody')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent', 'unknownFutureValue']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', type=validate_file_or_dict, help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel. Expected value: json-string/@json-file.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing', 'unknownFutureValue']),
                   help='')
        c.argument('reactions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='+', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess',
                                                         'blockAccessExternal']), help='',
                                                         arg_group='Policy Violation')
        c.argument('justification_text', type=str, help='', arg_group='Policy Violation')
        c.argument('policy_tip', action=AddPolicyTip, nargs='+', help='chatMessagePolicyViolationPolicyTip',
                   arg_group='Policy Violation')
        c.argument('user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']), help='',
                   arg_group='Policy Violation')
        c.argument('verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride',
                                                              'allowOverrideWithoutJustification',
                                                              'allowOverrideWithJustification']), help='',
                   arg_group='Policy Violation')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='From')

    with self.argument_context('teams team-primary-channel update-tab') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('configuration', action=AddConfiguration, nargs='+', help='teamsTabConfiguration')
        c.argument('display_name', type=str, help='Name of the tab.')
        c.argument('web_url', type=str, help='Deep link URL of the tab instance. Read only.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Teams App')
        c.argument('microsoft_graph_teams_app_display_name', type=str, help='The name of the catalog app provided by '
                   'the app developer in the Microsoft Teams zip app package.', arg_group='Teams App')
        c.argument('distribution_method', arg_type=get_enum_type(['store', 'organization', 'sideloaded',
                                                                  'unknownFutureValue']), help='', arg_group='Teams '
                   'App')
        c.argument('external_id', type=str, help='The ID of the catalog provided by the app developer in the Microsoft '
                   'Teams zip app package.', arg_group='Teams App')
        c.argument('app_definitions', action=AddAppDefinitions, nargs='+', help='The details for each version of the '
                   'app.', arg_group='Teams App')

    with self.argument_context('teams team-primary-channel-message create-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('teams team-primary-channel-message create-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='+', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='+', help='itemBody')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent', 'unknownFutureValue']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', type=validate_file_or_dict, help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel. Expected value: json-string/@json-file.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing', 'unknownFutureValue']),
                   help='')
        c.argument('reactions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='+', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess',
                                                         'blockAccessExternal']), help='',
                                                         arg_group='Policy Violation')
        c.argument('justification_text', type=str, help='', arg_group='Policy Violation')
        c.argument('policy_tip', action=AddPolicyTip, nargs='+', help='chatMessagePolicyViolationPolicyTip',
                   arg_group='Policy Violation')
        c.argument('user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']), help='',
                   arg_group='Policy Violation')
        c.argument('verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride',
                                                              'allowOverrideWithoutJustification',
                                                              'allowOverrideWithJustification']), help='',
                   arg_group='Policy Violation')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='From')

    with self.argument_context('teams team-primary-channel-message delete-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-primary-channel-message delete-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-primary-channel-message list-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-primary-channel-message list-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-primary-channel-message show-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-primary-channel-message show-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-primary-channel-message update-hosted-content') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_hosted_content_id', type=str, help='key: id of chatMessageHostedContent')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('teams team-primary-channel-message update-reply') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('chat_message_id', type=str, help='key: id of chatMessage')
        c.argument('chat_message_id1', type=str, help='key: id of chatMessage')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('attachments', action=AddAttachments, nargs='+', help='Attached files. Attachments are currently '
                   'read-only – sending attachments is not supported.')
        c.argument('body', action=AddBody, nargs='+', help='itemBody')
        c.argument('created_date_time', help='Read only. Timestamp of when the chat message was created.')
        c.argument('deleted_date_time', help='Read only. Timestamp at which the chat message was deleted, or null if '
                   'not deleted.')
        c.argument('etag', type=str, help='Read-only. Version number of the chat message.')
        c.argument('importance', arg_type=get_enum_type(['normal', 'high', 'urgent', 'unknownFutureValue']), help='')
        c.argument('last_edited_date_time', help='Read only. Timestamp when edits to the chat message were made. '
                   'Triggers an \'Edited\' flag in the Microsoft Teams UI. If no edits are made the value is null.')
        c.argument('last_modified_date_time', help='Read only. Timestamp when the chat message is created (initial '
                   'setting) or edited, including when a reaction is added or removed.')
        c.argument('locale', type=str, help='Locale of the chat message set by the client.')
        c.argument('mentions', type=validate_file_or_dict, help='List of entities mentioned in the chat message. '
                   'Currently supports user, bot, team, channel. Expected value: json-string/@json-file.')
        c.argument('message_type', arg_type=get_enum_type(['message', 'chatEvent', 'typing', 'unknownFutureValue']),
                   help='')
        c.argument('reactions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('reply_to_id', type=str, help='Read-only. Id of the parent chat message or root chat message of the '
                   'thread. (Only applies to chat messages in channels not chats)')
        c.argument('subject', type=str, help='The subject of the chat message, in plaintext.')
        c.argument('summary', type=str, help='Summary text of the chat message that could be used for push '
                   'notifications and summary views or fall back views. Only applies to channel chat messages, not '
                   'chat messages in a chat.')
        c.argument('web_url', type=str, help='')
        c.argument('hosted_contents', action=AddHostedContents, nargs='+', help='')
        c.argument('replies', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('dlp_action', arg_type=get_enum_type(['none', 'notifySender', 'blockAccess',
                                                         'blockAccessExternal']), help='',
                                                         arg_group='Policy Violation')
        c.argument('justification_text', type=str, help='', arg_group='Policy Violation')
        c.argument('policy_tip', action=AddPolicyTip, nargs='+', help='chatMessagePolicyViolationPolicyTip',
                   arg_group='Policy Violation')
        c.argument('user_action', arg_type=get_enum_type(['none', 'override', 'reportFalsePositive']), help='',
                   arg_group='Policy Violation')
        c.argument('verdict_details', arg_type=get_enum_type(['none', 'allowFalsePositiveOverride',
                                                              'allowOverrideWithoutJustification',
                                                              'allowOverrideWithJustification']), help='',
                   arg_group='Policy Violation')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='From')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='From')

    with self.argument_context('teams team-primary-channel-tab delete-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-primary-channel-tab set-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams team-primary-channel-tab show-ref-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')

    with self.argument_context('teams team-primary-channel-tab show-team-app') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('teams_tab_id', type=str, help='key: id of teamsTab')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule create-offer-shift-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system',
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('recipient_action_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('recipient_action_message', type=str, help='Custom message sent by recipient of the offer shift '
                   'request.')
        c.argument('recipient_user_id', type=str, help='User ID of the recipient of the offer shift request.')
        c.argument('sender_shift_id', type=str, help='User ID of the sender of the offer shift request.')

    with self.argument_context('teams team-schedule create-open-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('draft_open_shift', action=AddDraftOpenShift, nargs='+', help='openShiftItem')
        c.argument('scheduling_group_id', type=str,
                   help='ID for the scheduling group that the open shift belongs to.')
        c.argument('shared_open_shift', action=AddDraftOpenShift, nargs='+', help='openShiftItem')

    with self.argument_context('teams team-schedule create-open-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system',
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('open_shift_id', type=str, help='ID for the open shift.')

    with self.argument_context('teams team-schedule create-scheduling-group') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('display_name', type=str, help='The display name for the schedulingGroup. Required.')
        c.argument('is_active', arg_type=get_three_state_flag(), help='Indicates whether the schedulingGroup can be '
                   'used when creating new entities or updating existing ones. Required.')
        c.argument('user_ids', nargs='+', help='The list of user IDs that are a member of the schedulingGroup. '
                   'Required.')

    with self.argument_context('teams team-schedule create-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('scheduling_group_id', type=str, help='ID of the scheduling group the shift is part of. Required.')
        c.argument('user_id', type=str, help='ID of the user assigned to the shift. Required.')
        c.argument('end_date_time', help='', arg_group='Shared Shift')
        c.argument('start_date_time', help='', arg_group='Shared Shift')
        c.argument('theme', arg_type=get_enum_type(['white', 'blue', 'green', 'purple', 'pink', 'yellow', 'gray',
                                                    'darkBlue', 'darkGreen', 'darkPurple', 'darkPink', 'darkYellow',
                                                    'unknownFutureValue']), help='', arg_group='Shared Shift')
        c.argument('activities', action=AddActivities, nargs='+', help='An incremental part of a shift which can cover '
                   'details of when and where an employee is during their shift. For example, an assignment or a '
                   'scheduled break or lunch. Required.', arg_group='Shared Shift')
        c.argument('display_name', type=str, help='The shift label of the shiftItem.', arg_group='Shared Shift')
        c.argument('notes', type=str, help='The shift notes for the shiftItem.', arg_group='Shared Shift')
        c.argument('microsoft_graph_schedule_entity_end_date_time_end_date_time', help='', arg_group='Draft Shift')
        c.argument('microsoft_graph_schedule_entity_start_date_time_start_date_time', help='',
                   arg_group='Draft Shift')
        c.argument('microsoft_graph_schedule_entity_theme', arg_type=get_enum_type(['white', 'blue', 'green', 'purple',
                                                                                    'pink', 'yellow', 'gray',
                                                                                    'darkBlue', 'darkGreen',
                                                                                    'darkPurple', 'darkPink',
                                                                                    'darkYellow',
                                                                                   'unknownFutureValue']), help='',
                   arg_group='Draft Shift')
        c.argument('microsoft_graph_shift_item_activities', action=AddActivities, nargs='+', help='An incremental part '
                   'of a shift which can cover details of when and where an employee is during their shift. For '
                   'example, an assignment or a scheduled break or lunch. Required.', arg_group='Draft Shift')
        c.argument('microsoft_graph_shift_item_display_name', type=str, help='The shift label of the shiftItem.',
                   arg_group='Draft Shift')
        c.argument('microsoft_graph_shift_item_notes', type=str, help='The shift notes for the shiftItem.',
                   arg_group='Draft Shift')

    with self.argument_context('teams team-schedule create-swap-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system',
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('recipient_action_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('recipient_action_message', type=str, help='Custom message sent by recipient of the offer shift '
                   'request.')
        c.argument('recipient_user_id', type=str, help='User ID of the recipient of the offer shift request.')
        c.argument('sender_shift_id', type=str, help='User ID of the sender of the offer shift request.')
        c.argument('recipient_shift_id', type=str, help='ShiftId for the recipient user with whom the request is to '
                   'swap.')

    with self.argument_context('teams team-schedule create-time-off') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('draft_time_off', action=AddDraftTimeOff, nargs='+', help='timeOffItem')
        c.argument('shared_time_off', action=AddDraftTimeOff, nargs='+', help='timeOffItem')
        c.argument('user_id', type=str, help='ID of the user assigned to the timeOff. Required.')

    with self.argument_context('teams team-schedule create-time-off-reason') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('display_name', type=str, help='The name of the timeOffReason. Required.')
        c.argument('icon_type', arg_type=get_enum_type(['none', 'car', 'calendar', 'running', 'plane', 'firstAid',
                                                        'doctor', 'notWorking', 'clock', 'juryDuty', 'globe', 'cup',
                                                        'phone', 'weather', 'umbrella', 'piggyBank', 'dog', 'cake',
                                                        'trafficCone', 'pin', 'sunny', 'unknownFutureValue']),
                                                        help='')
        c.argument('is_active', arg_type=get_three_state_flag(), help='Indicates whether the timeOffReason can be used '
                   'when creating new entities or updating existing ones. Required.')

    with self.argument_context('teams team-schedule create-time-off-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system',
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('end_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('start_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('time_off_reason_id', type=str, help='The reason for the time off.')

    with self.argument_context('teams team-schedule delete-offer-shift-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('offer_shift_request_id', type=str, help='key: id of offerShiftRequest')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-schedule delete-open-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('open_shift_id', type=str, help='key: id of openShift')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-schedule delete-open-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('open_shift_change_request_id', type=str, help='key: id of openShiftChangeRequest')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-schedule delete-scheduling-group') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('scheduling_group_id', type=str, help='key: id of schedulingGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-schedule delete-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('shift_id', type=str, help='key: id of shift')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-schedule delete-swap-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('swap_shifts_change_request_id', type=str, help='key: id of swapShiftsChangeRequest')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-schedule delete-time-off') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_id', type=str, help='key: id of timeOff')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-schedule delete-time-off-reason') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_reason_id', type=str, help='key: id of timeOffReason')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-schedule delete-time-off-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_request_id', type=str, help='key: id of timeOffRequest')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams team-schedule list-offer-shift-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule list-open-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule list-open-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule list-scheduling-group') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule list-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule list-swap-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule list-time-off') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule list-time-off-reason') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule list-time-off-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule share') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('notify_team', arg_type=get_three_state_flag(), help='')
        c.argument('start_date_time', help='')
        c.argument('end_date_time', help='')

    with self.argument_context('teams team-schedule show-offer-shift-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('offer_shift_request_id', type=str, help='key: id of offerShiftRequest')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule show-open-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('open_shift_id', type=str, help='key: id of openShift')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule show-open-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('open_shift_change_request_id', type=str, help='key: id of openShiftChangeRequest')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule show-scheduling-group') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('scheduling_group_id', type=str, help='key: id of schedulingGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule show-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('shift_id', type=str, help='key: id of shift')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule show-swap-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('swap_shifts_change_request_id', type=str, help='key: id of swapShiftsChangeRequest')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule show-time-off') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_id', type=str, help='key: id of timeOff')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule show-time-off-reason') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_reason_id', type=str, help='key: id of timeOffReason')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule show-time-off-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_request_id', type=str, help='key: id of timeOffRequest')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams team-schedule update-offer-shift-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('offer_shift_request_id', type=str, help='key: id of offerShiftRequest')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system',
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('recipient_action_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('recipient_action_message', type=str, help='Custom message sent by recipient of the offer shift '
                   'request.')
        c.argument('recipient_user_id', type=str, help='User ID of the recipient of the offer shift request.')
        c.argument('sender_shift_id', type=str, help='User ID of the sender of the offer shift request.')

    with self.argument_context('teams team-schedule update-open-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('open_shift_id', type=str, help='key: id of openShift')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('draft_open_shift', action=AddDraftOpenShift, nargs='+', help='openShiftItem')
        c.argument('scheduling_group_id', type=str,
                   help='ID for the scheduling group that the open shift belongs to.')
        c.argument('shared_open_shift', action=AddDraftOpenShift, nargs='+', help='openShiftItem')

    with self.argument_context('teams team-schedule update-open-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('open_shift_change_request_id', type=str, help='key: id of openShiftChangeRequest')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system',
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('open_shift_id', type=str, help='ID for the open shift.')

    with self.argument_context('teams team-schedule update-scheduling-group') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('scheduling_group_id', type=str, help='key: id of schedulingGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('display_name', type=str, help='The display name for the schedulingGroup. Required.')
        c.argument('is_active', arg_type=get_three_state_flag(), help='Indicates whether the schedulingGroup can be '
                   'used when creating new entities or updating existing ones. Required.')
        c.argument('user_ids', nargs='+', help='The list of user IDs that are a member of the schedulingGroup. '
                   'Required.')

    with self.argument_context('teams team-schedule update-shift') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('shift_id', type=str, help='key: id of shift')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('scheduling_group_id', type=str, help='ID of the scheduling group the shift is part of. Required.')
        c.argument('user_id', type=str, help='ID of the user assigned to the shift. Required.')
        c.argument('end_date_time', help='', arg_group='Shared Shift')
        c.argument('start_date_time', help='', arg_group='Shared Shift')
        c.argument('theme', arg_type=get_enum_type(['white', 'blue', 'green', 'purple', 'pink', 'yellow', 'gray',
                                                    'darkBlue', 'darkGreen', 'darkPurple', 'darkPink', 'darkYellow',
                                                    'unknownFutureValue']), help='', arg_group='Shared Shift')
        c.argument('activities', action=AddActivities, nargs='+', help='An incremental part of a shift which can cover '
                   'details of when and where an employee is during their shift. For example, an assignment or a '
                   'scheduled break or lunch. Required.', arg_group='Shared Shift')
        c.argument('display_name', type=str, help='The shift label of the shiftItem.', arg_group='Shared Shift')
        c.argument('notes', type=str, help='The shift notes for the shiftItem.', arg_group='Shared Shift')
        c.argument('microsoft_graph_schedule_entity_end_date_time_end_date_time', help='', arg_group='Draft Shift')
        c.argument('microsoft_graph_schedule_entity_start_date_time_start_date_time', help='',
                   arg_group='Draft Shift')
        c.argument('microsoft_graph_schedule_entity_theme', arg_type=get_enum_type(['white', 'blue', 'green', 'purple',
                                                                                    'pink', 'yellow', 'gray',
                                                                                    'darkBlue', 'darkGreen',
                                                                                    'darkPurple', 'darkPink',
                                                                                    'darkYellow',
                                                                                   'unknownFutureValue']), help='',
                   arg_group='Draft Shift')
        c.argument('microsoft_graph_shift_item_activities', action=AddActivities, nargs='+', help='An incremental part '
                   'of a shift which can cover details of when and where an employee is during their shift. For '
                   'example, an assignment or a scheduled break or lunch. Required.', arg_group='Draft Shift')
        c.argument('microsoft_graph_shift_item_display_name', type=str, help='The shift label of the shiftItem.',
                   arg_group='Draft Shift')
        c.argument('microsoft_graph_shift_item_notes', type=str, help='The shift notes for the shiftItem.',
                   arg_group='Draft Shift')

    with self.argument_context('teams team-schedule update-swap-shift-change-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('swap_shifts_change_request_id', type=str, help='key: id of swapShiftsChangeRequest')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system',
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('recipient_action_date_time', help='The Timestamp type represents date and time information using '
                   'ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look '
                   'like this: \'2014-01-01T00:00:00Z\'')
        c.argument('recipient_action_message', type=str, help='Custom message sent by recipient of the offer shift '
                   'request.')
        c.argument('recipient_user_id', type=str, help='User ID of the recipient of the offer shift request.')
        c.argument('sender_shift_id', type=str, help='User ID of the sender of the offer shift request.')
        c.argument('recipient_shift_id', type=str, help='ShiftId for the recipient user with whom the request is to '
                   'swap.')

    with self.argument_context('teams team-schedule update-time-off') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_id', type=str, help='key: id of timeOff')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('draft_time_off', action=AddDraftTimeOff, nargs='+', help='timeOffItem')
        c.argument('shared_time_off', action=AddDraftTimeOff, nargs='+', help='timeOffItem')
        c.argument('user_id', type=str, help='ID of the user assigned to the timeOff. Required.')

    with self.argument_context('teams team-schedule update-time-off-reason') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_reason_id', type=str, help='key: id of timeOffReason')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('display_name', type=str, help='The name of the timeOffReason. Required.')
        c.argument('icon_type', arg_type=get_enum_type(['none', 'car', 'calendar', 'running', 'plane', 'firstAid',
                                                        'doctor', 'notWorking', 'clock', 'juryDuty', 'globe', 'cup',
                                                        'phone', 'weather', 'umbrella', 'piggyBank', 'dog', 'cake',
                                                        'trafficCone', 'pin', 'sunny', 'unknownFutureValue']),
                                                        help='')
        c.argument('is_active', arg_type=get_three_state_flag(), help='Indicates whether the timeOffReason can be used '
                   'when creating new entities or updating existing ones. Required.')

    with self.argument_context('teams team-schedule update-time-off-request') as c:
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('time_off_request_id', type=str, help='key: id of timeOffRequest')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('assigned_to', arg_type=get_enum_type(['sender', 'recipient', 'manager', 'system',
                                                          'unknownFutureValue']), help='')
        c.argument('manager_action_date_time', help='')
        c.argument('manager_action_message', type=str, help='')
        c.argument('manager_user_id', type=str, help='')
        c.argument('sender_date_time', help='')
        c.argument('sender_message', type=str, help='')
        c.argument('sender_user_id', type=str, help='')
        c.argument('state', arg_type=get_enum_type(['pending', 'approved', 'declined', 'unknownFutureValue']),
                   help='')
        c.argument('end_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('start_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('time_off_reason_id', type=str, help='The reason for the time off.')

    with self.argument_context('teams teamwork-teamwork show-teamwork') as c:
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams teamwork-teamwork update-teamwork') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('workforce_integrations', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('teams teamwork create-workforce-integration') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('api_version', type=int, help='API version for the call back URL. Start with 1.')
        c.argument('display_name', type=str, help='Name of the workforce integration.')
        c.argument('encryption', action=AddEncryption, nargs='+', help='workforceIntegrationEncryption')
        c.argument('is_active', arg_type=get_three_state_flag(), help='Indicates whether this workforce integration is '
                   'currently active and available.')
        c.argument('supported_entities', arg_type=get_enum_type(['none', 'shift', 'swapRequest',
                                                                 'userShiftPreferences', 'openShift',
                                                                 'openShiftRequest', 'offerShiftRequest',
                                                                 'unknownFutureValue']), help='')
        c.argument('url', type=str, help='Workforce Integration URL for callbacks from the Shifts service.')

    with self.argument_context('teams teamwork delete-workforce-integration') as c:
        c.argument('workforce_integration_id', type=str, help='key: id of workforceIntegration')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams teamwork list-workforce-integration') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams teamwork show-workforce-integration') as c:
        c.argument('workforce_integration_id', type=str, help='key: id of workforceIntegration')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams teamwork update-workforce-integration') as c:
        c.argument('workforce_integration_id', type=str, help='key: id of workforceIntegration')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Last Modified By')
        c.argument('api_version', type=int, help='API version for the call back URL. Start with 1.')
        c.argument('display_name', type=str, help='Name of the workforce integration.')
        c.argument('encryption', action=AddEncryption, nargs='+', help='workforceIntegrationEncryption')
        c.argument('is_active', arg_type=get_three_state_flag(), help='Indicates whether this workforce integration is '
                   'currently active and available.')
        c.argument('supported_entities', arg_type=get_enum_type(['none', 'shift', 'swapRequest',
                                                                 'userShiftPreferences', 'openShift',
                                                                 'openShiftRequest', 'offerShiftRequest',
                                                                 'unknownFutureValue']), help='')
        c.argument('url', type=str, help='Workforce Integration URL for callbacks from the Shifts service.')

    with self.argument_context('teams user create-joined-team') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('classification', type=str, help='An optional label. Typically describes the data or business '
                   'sensitivity of the team. Must match one of a pre-configured set in the tenant\'s directory.')
        c.argument('description', type=str, help='An optional description for the team.')
        c.argument('display_name', type=str, help='The name of the team.')
        c.argument('fun_settings', action=AddFunSettings, nargs='+', help='teamFunSettings')
        c.argument('guest_settings', action=AddGuestSettings, nargs='+', help='teamGuestSettings')
        c.argument('internal_id', type=str, help='A unique ID for the team that has been used in a few places such as '
                   'the audit log/Office 365 Management Activity API.')
        c.argument('is_archived', arg_type=get_three_state_flag(), help='Whether this team is in read-only mode.')
        c.argument('member_settings', action=AddMemberSettings, nargs='+', help='teamMemberSettings')
        c.argument('messaging_settings', action=AddMessagingSettings, nargs='+', help='teamMessagingSettings')
        c.argument('specialization', arg_type=get_enum_type(['none', 'educationStandard', 'educationClass',
                                                             'educationProfessionalLearningCommunity',
                                                             'educationStaff', 'healthcareStandard',
                                                             'healthcareCareCoordination', 'unknownFutureValue']),
                   help='')
        c.argument('visibility', arg_type=get_enum_type(['private', 'public', 'hiddenMembership',
                                                        'unknownFutureValue']), help='')
        c.argument('web_url', type=str, help='A hyperlink that will go to the team in the Microsoft Teams client. This '
                   'is the URL that you get when you right-click a team in the Microsoft Teams client and select Get '
                   'link to team. This URL should be treated as an opaque blob, and not parsed.')
        c.argument('channels', type=validate_file_or_dict, help='The collection of channels & messages associated with '
                   'the team. Expected value: json-string/@json-file.')
        c.argument('installed_apps', type=validate_file_or_dict, help='The apps installed in this team. Expected '
                   'value: json-string/@json-file.')
        c.argument('members', action=AddGroupsMembers, nargs='+', help='Members and owners of the team.')
        c.argument('operations', type=validate_file_or_dict, help='The async operations that ran or are running on '
                   'this team. Expected value: json-string/@json-file.')
        c.argument('primary_channel', type=validate_file_or_dict, help='channel Expected value: '
                   'json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Template')
        c.argument('id1', type=str, help='Read-only.', arg_group='Group')
        c.argument('deleted_date_time', help='', arg_group='Group')
        c.argument('assigned_labels', action=AddAssignedLabels, nargs='+', help='The list of sensitivity label pairs '
                   '(label ID, label name) associated with an Microsoft 365 group. Returned only on $select. '
                   'Read-only.', arg_group='Group')
        c.argument('assigned_licenses', action=AddAssignedLicenses, nargs='+', help='The licenses that are assigned to '
                   'the group. Returned only on $select. Read-only.', arg_group='Group')
        c.argument('microsoft_graph_group_classification', type=str, help='Describes a classification for the group '
                   '(such as low, medium or high business impact). Valid values for this property are defined by '
                   'creating a ClassificationList setting value, based on the template definition.Returned by default.',
                   arg_group='Group')
        c.argument('created_date_time', help='Timestamp of when the group was created. The value cannot be modified '
                   'and is automatically populated when the group is created. The Timestamp type represents date and '
                   'time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan '
                   '1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Returned by default. Read-only.',
                   arg_group='Group')
        c.argument('microsoft_graph_group_description', type=str, help='An optional description for the group. '
                   'Returned by default.', arg_group='Group')
        c.argument('microsoft_graph_group_display_name', type=str, help='The display name for the group. This property '
                   'is required when a group is created and cannot be cleared during updates. Returned by default. '
                   'Supports $filter and $orderby.', arg_group='Group')
        c.argument('expiration_date_time', help='Timestamp of when the group is set to expire. The value cannot be '
                   'modified and is automatically populated when the group is created. The Timestamp type represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Returned by default. Read-only.',
                   arg_group='Group')
        c.argument('group_types', nargs='+', help='Specifies the group type and its membership.  If the collection '
                   'contains Unified, the group is a Microsoft 365 group; otherwise, it\'s either a security group or '
                   'distribution group. For details, see groups overview.If the collection includes DynamicMembership, '
                   'the group has dynamic membership; otherwise, membership is static.  Returned by default. Supports '
                   '$filter.', arg_group='Group')
        c.argument('has_members_with_license_errors', arg_type=get_three_state_flag(), help='Indicates whether there '
                   'are members in this group that have license errors from its group-based license assignment. This '
                   'property is never returned on a GET operation. You can use it as a $filter argument to get groups '
                   'that have members with license errors (that is, filter for this property being true). See an '
                   'example.', arg_group='Group')
        c.argument('license_processing_state', action=AddLicenseProcessingState, nargs='+',
                   help='licenseProcessingState', arg_group='Group')
        c.argument('mail', type=str, help='The SMTP address for the group, for example, \'serviceadmins@contoso.onmicro'
                   'soft.com\'. Returned by default. Read-only. Supports $filter.', arg_group='Group')
        c.argument('mail_enabled', arg_type=get_three_state_flag(), help='Specifies whether the group is mail-enabled. '
                   'Returned by default.', arg_group='Group')
        c.argument('mail_nickname', type=str, help='The mail alias for the group, unique in the organization. This '
                   'property must be specified when a group is created. Returned by default. Supports $filter.',
                   arg_group='Group')
        c.argument('membership_rule', type=str, help='The rule that determines members for this group if the group is '
                   'a dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of '
                   'the membership rule, see Membership Rules syntax. Returned by default.', arg_group='Group')
        c.argument('membership_rule_processing_state', type=str, help='Indicates whether the dynamic membership '
                   'processing is on or paused. Possible values are \'On\' or \'Paused\'. Returned by default.',
                   arg_group='Group')
        c.argument('on_premises_domain_name', type=str, help='Contains the on-premises domain FQDN, also called '
                   'dnsDomainName synchronized from the on-premises directory. The property is only populated for '
                   'customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD '
                   'Connect.Returned by default. Read-only.', arg_group='Group')
        c.argument('on_premises_last_sync_date_time', help='Indicates the last time at which the group was synced with '
                   'the on-premises directory.The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'. Returned by default. Read-only. Supports $filter.', arg_group='Group')
        c.argument('on_premises_net_bios_name', type=str, help='Contains the on-premises netBios name synchronized '
                   'from the on-premises directory. The property is only populated for customers who are synchronizing '
                   'their on-premises directory to Azure Active Directory via Azure AD Connect.Returned by default. '
                   'Read-only.', arg_group='Group')
        c.argument('on_premises_provisioning_errors', action=AddOnPremisesProvisioningErrors, nargs='+', help='Errors '
                   'when using Microsoft synchronization product during provisioning. Returned by default.',
                   arg_group='Group')
        c.argument('on_premises_sam_account_name', type=str, help='Contains the on-premises SAM account name '
                   'synchronized from the on-premises directory. The property is only populated for customers who are '
                   'synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect.Returned '
                   'by default. Read-only.', arg_group='Group')
        c.argument('on_premises_security_identifier', type=str, help='Contains the on-premises security identifier '
                   '(SID) for the group that was synchronized from on-premises to the cloud. Returned by default. '
                   'Read-only.', arg_group='Group')
        c.argument('on_premises_sync_enabled', arg_type=get_three_state_flag(), help='true if this group is synced '
                   'from an on-premises directory; false if this group was originally synced from an on-premises '
                   'directory but is no longer synced; null if this object has never been synced from an on-premises '
                   'directory (default). Returned by default. Read-only. Supports $filter.', arg_group='Group')
        c.argument('preferred_data_location', type=str, help='The preferred data location for the group. For more '
                   'information, see  OneDrive Online Multi-Geo. Returned by default.', arg_group='Group')
        c.argument('preferred_language', type=str, help='The preferred language for an Microsoft 365 group. Should '
                   'follow ISO 639-1 Code; for example \'en-US\'. Returned by default.', arg_group='Group')
        c.argument('proxy_addresses', nargs='+', help='Email addresses for the group that direct to the same group '
                   'mailbox. For example: [\'SMTP: bob@contoso.com\', \'smtp: bob@sales.contoso.com\']. The any '
                   'operator is required to filter expressions on multi-valued properties. Returned by default. '
                   'Read-only. Not nullable. Supports $filter.', arg_group='Group')
        c.argument('renewed_date_time', help='Timestamp of when the group was last renewed. This cannot be modified '
                   'directly and is only updated via the renew service action. The Timestamp type represents date and '
                   'time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan '
                   '1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Returned by default. Read-only.',
                   arg_group='Group')
        c.argument('security_enabled', arg_type=get_three_state_flag(), help='Specifies whether the group is a '
                   'security group. Returned by default. Supports $filter.', arg_group='Group')
        c.argument('security_identifier', type=str, help='Security identifier of the group, used in Windows scenarios. '
                   'Returned by default.', arg_group='Group')
        c.argument('theme', type=str, help='Specifies an Microsoft 365 group\'s color theme. Possible values are Teal, '
                   'Purple, Green, Blue, Pink, Orange or Red. Returned by default.', arg_group='Group')
        c.argument('microsoft_graph_group_visibility', type=str, help='Specifies the visibility of a Microsoft 365 '
                   'group. Possible values are: Private, Public, or Hiddenmembership; blank values are treated as '
                   'public.  See group visibility options to learn more.Visibility can be set only when a group is '
                   'created; it is not editable.Visibility is supported only for unified groups; it is not supported '
                   'for security groups. Returned by default.', arg_group='Group')
        c.argument('allow_external_senders', arg_type=get_three_state_flag(), help='Indicates if people external to '
                   'the organization can send messages to the group. Default value is false. Returned only on $select.',
                   arg_group='Group')
        c.argument('auto_subscribe_new_members', arg_type=get_three_state_flag(), help='Indicates if new members added '
                   'to the group will be auto-subscribed to receive email notifications. You can set this property in '
                   'a PATCH request for the group; do not set it in the initial POST request that creates the group. '
                   'Default value is false. Returned only on $select.', arg_group='Group')
        c.argument('hide_from_address_lists', arg_type=get_three_state_flag(), help='True if the group is not '
                   'displayed in certain parts of the Outlook UI: the Address Book, address lists for selecting '
                   'message recipients, and the Browse Groups dialog for searching groups; otherwise, false. Default '
                   'value is false. Returned only on $select.', arg_group='Group')
        c.argument('hide_from_outlook_clients', arg_type=get_three_state_flag(), help='True if the group is not '
                   'displayed in Outlook clients, such as Outlook for Windows and Outlook on the web; otherwise, '
                   'false. Default value is false. Returned only on $select.', arg_group='Group')
        c.argument('is_subscribed_by_mail', arg_type=get_three_state_flag(), help='Indicates whether the signed-in '
                   'user is subscribed to receive email conversations. Default value is true. Returned only on '
                   '$select.', arg_group='Group')
        c.argument('unseen_count', type=int, help='Count of conversations that have received new posts since the '
                   'signed-in user last visited the group. Returned only on $select.', arg_group='Group')
        c.argument('group_is_archived', arg_type=get_three_state_flag(), help='', arg_group='Group')
        c.argument('app_role_assignments', action=AddAppRoleAssignments, nargs='+', help='', arg_group='Group')
        c.argument('created_on_behalf_of', action=AddCreatedOnBehalfOf, nargs='+', help='Represents an Azure Active '
                   'Directory object. The directoryObject type is the base type for many other directory entity types.',
                   arg_group='Group')
        c.argument('member_of', action=AddMemberOf, nargs='+', help='Groups that this group is a member of. HTTP '
                   'Methods: GET (supported for all groups). Read-only. Nullable.', arg_group='Group')
        c.argument('microsoft_graph_group_members', action=AddMicrosoftGraphGroupMembers, nargs='+', help='Users and '
                   'groups that are members of this group. HTTP Methods: GET (supported for all groups), POST '
                   '(supported for Microsoft 365 groups, security groups and mail-enabled security groups), DELETE '
                   '(supported for Microsoft 365 groups and security groups) Nullable.', arg_group='Group')
        c.argument('members_with_license_errors', action=AddMembersWithLicenseErrors, nargs='+', help='A list of group '
                   'members with license errors from this group-based license assignment. Read-only.',
                   arg_group='Group')
        c.argument('owners', action=AddOwners, nargs='+', help='The owners of the group. The owners are a set of '
                   'non-admin users who are allowed to modify this object. Limited to 100 owners. HTTP Methods: GET '
                   '(supported for all groups), POST (supported for Microsoft 365 groups, security groups and '
                   'mail-enabled security groups), DELETE (supported for Microsoft 365 groups and security groups). '
                   'Nullable.', arg_group='Group')
        c.argument('settings', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('transitive_member_of', action=AddTransitiveMemberOf, nargs='+', help='', arg_group='Group')
        c.argument('transitive_members', action=AddTransitiveMembers, nargs='+', help='', arg_group='Group')
        c.argument('accepted_senders', action=AddAcceptedSenders, nargs='+', help='The list of users or groups that '
                   'are allowed to create post\'s or calendar events in this group. If this list is non-empty then '
                   'only users or groups listed here are allowed to post.', arg_group='Group')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Read-only. '
                   'Expected value: json-string/@json-file.', arg_group='Group')
        c.argument('conversations', type=validate_file_or_dict, help='The group\'s conversations. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('events', type=validate_file_or_dict, help='The group\'s calendar events. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('photo', action=AddGroupsPhoto, nargs='+', help='profilePhoto', arg_group='Group')
        c.argument('photos', action=AddPhotos, nargs='+', help='The profile photos owned by the group. Read-only. '
                   'Nullable.', arg_group='Group')
        c.argument('rejected_senders', action=AddRejectedSenders, nargs='+', help='The list of users or groups that '
                   'are not allowed to create posts or calendar events in this group. Nullable', arg_group='Group')
        c.argument('threads', type=validate_file_or_dict, help='The group\'s conversation threads. Nullable. Expected '
                   'value: json-string/@json-file.', arg_group='Group')
        c.argument('drive', type=validate_file_or_dict, help='drive Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('drives', type=validate_file_or_dict, help='The group\'s drives. Read-only. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('sites', type=validate_file_or_dict, help='The list of SharePoint sites in this group. Access the '
                   'default site with /sites/root. Expected value: json-string/@json-file.', arg_group='Group')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the group. Read-only. Nullable.', arg_group='Group')
        c.argument('group_lifecycle_policies', action=AddGroupLifecyclePolicies, nargs='+', help='The collection of '
                   'lifecycle policies for this group. Read-only. Nullable.', arg_group='Group')
        c.argument('planner', type=validate_file_or_dict, help='plannerGroup Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('onenote', type=validate_file_or_dict, help='onenote Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('team', type=validate_file_or_dict, help='team Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('id2', type=str, help='Read-only.', arg_group='Schedule')
        c.argument('enabled', arg_type=get_three_state_flag(), help='Indicates whether the schedule is enabled for the '
                   'team. Required.', arg_group='Schedule')
        c.argument('offer_shift_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether offer '
                   'shift requests are enabled for the schedule.', arg_group='Schedule')
        c.argument('open_shifts_enabled', arg_type=get_three_state_flag(), help='Indicates whether open shifts are '
                   'enabled for the schedule.', arg_group='Schedule')
        c.argument('provision_status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed', 'Failed']),
                   help='', arg_group='Schedule')
        c.argument('provision_status_code', type=str, help='Additional information about why schedule provisioning '
                   'failed.', arg_group='Schedule')
        c.argument('swap_shifts_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether swap '
                   'shifts requests are enabled for the schedule.', arg_group='Schedule')
        c.argument('time_clock_enabled', arg_type=get_three_state_flag(), help='Indicates whether time clock is '
                   'enabled for the schedule.', arg_group='Schedule')
        c.argument('time_off_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether time off '
                   'requests are enabled for the schedule.', arg_group='Schedule')
        c.argument('time_zone', type=str, help='Indicates the time zone of the schedule team using tz database format. '
                   'Required.', arg_group='Schedule')
        c.argument('workforce_integration_ids', nargs='+', help='', arg_group='Schedule')
        c.argument('offer_shift_requests', action=AddOfferShiftRequests, nargs='+', help='', arg_group='Schedule')
        c.argument('open_shift_change_requests', action=AddOpenShiftChangeRequests, nargs='+', help='',
                   arg_group='Schedule')
        c.argument('open_shifts', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Schedule')
        c.argument('scheduling_groups', action=AddSchedulingGroups, nargs='+', help='The logical grouping of users in '
                   'the schedule (usually by role).', arg_group='Schedule')
        c.argument('shifts', type=validate_file_or_dict, help='The shifts in the schedule. Expected value: '
                   'json-string/@json-file.', arg_group='Schedule')
        c.argument('swap_shifts_change_requests', action=AddSwapShiftsChangeRequests, nargs='+', help='',
                   arg_group='Schedule')
        c.argument('time_off_reasons', action=AddTimeOffReasons, nargs='+', help='The set of reasons for a time off in '
                   'the schedule.', arg_group='Schedule')
        c.argument('time_off_requests', action=AddTimeOffRequests, nargs='+', help='', arg_group='Schedule')
        c.argument('times_off', type=validate_file_or_dict, help='The instances of times off in the schedule. Expected '
                   'value: json-string/@json-file.', arg_group='Schedule')

    with self.argument_context('teams user delete-joined-team') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('teams user list-joined-team') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams user show-joined-team') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('teams user update-joined-team') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('team_id', type=str, help='key: id of team')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('classification', type=str, help='An optional label. Typically describes the data or business '
                   'sensitivity of the team. Must match one of a pre-configured set in the tenant\'s directory.')
        c.argument('description', type=str, help='An optional description for the team.')
        c.argument('display_name', type=str, help='The name of the team.')
        c.argument('fun_settings', action=AddFunSettings, nargs='+', help='teamFunSettings')
        c.argument('guest_settings', action=AddGuestSettings, nargs='+', help='teamGuestSettings')
        c.argument('internal_id', type=str, help='A unique ID for the team that has been used in a few places such as '
                   'the audit log/Office 365 Management Activity API.')
        c.argument('is_archived', arg_type=get_three_state_flag(), help='Whether this team is in read-only mode.')
        c.argument('member_settings', action=AddMemberSettings, nargs='+', help='teamMemberSettings')
        c.argument('messaging_settings', action=AddMessagingSettings, nargs='+', help='teamMessagingSettings')
        c.argument('specialization', arg_type=get_enum_type(['none', 'educationStandard', 'educationClass',
                                                             'educationProfessionalLearningCommunity',
                                                             'educationStaff', 'healthcareStandard',
                                                             'healthcareCareCoordination', 'unknownFutureValue']),
                   help='')
        c.argument('visibility', arg_type=get_enum_type(['private', 'public', 'hiddenMembership',
                                                        'unknownFutureValue']), help='')
        c.argument('web_url', type=str, help='A hyperlink that will go to the team in the Microsoft Teams client. This '
                   'is the URL that you get when you right-click a team in the Microsoft Teams client and select Get '
                   'link to team. This URL should be treated as an opaque blob, and not parsed.')
        c.argument('channels', type=validate_file_or_dict, help='The collection of channels & messages associated with '
                   'the team. Expected value: json-string/@json-file.')
        c.argument('installed_apps', type=validate_file_or_dict, help='The apps installed in this team. Expected '
                   'value: json-string/@json-file.')
        c.argument('members', action=AddGroupsMembers, nargs='+', help='Members and owners of the team.')
        c.argument('operations', type=validate_file_or_dict, help='The async operations that ran or are running on '
                   'this team. Expected value: json-string/@json-file.')
        c.argument('primary_channel', type=validate_file_or_dict, help='channel Expected value: '
                   'json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Template')
        c.argument('id1', type=str, help='Read-only.', arg_group='Group')
        c.argument('deleted_date_time', help='', arg_group='Group')
        c.argument('assigned_labels', action=AddAssignedLabels, nargs='+', help='The list of sensitivity label pairs '
                   '(label ID, label name) associated with an Microsoft 365 group. Returned only on $select. '
                   'Read-only.', arg_group='Group')
        c.argument('assigned_licenses', action=AddAssignedLicenses, nargs='+', help='The licenses that are assigned to '
                   'the group. Returned only on $select. Read-only.', arg_group='Group')
        c.argument('microsoft_graph_group_classification', type=str, help='Describes a classification for the group '
                   '(such as low, medium or high business impact). Valid values for this property are defined by '
                   'creating a ClassificationList setting value, based on the template definition.Returned by default.',
                   arg_group='Group')
        c.argument('created_date_time', help='Timestamp of when the group was created. The value cannot be modified '
                   'and is automatically populated when the group is created. The Timestamp type represents date and '
                   'time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan '
                   '1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Returned by default. Read-only.',
                   arg_group='Group')
        c.argument('microsoft_graph_group_description', type=str, help='An optional description for the group. '
                   'Returned by default.', arg_group='Group')
        c.argument('microsoft_graph_group_display_name', type=str, help='The display name for the group. This property '
                   'is required when a group is created and cannot be cleared during updates. Returned by default. '
                   'Supports $filter and $orderby.', arg_group='Group')
        c.argument('expiration_date_time', help='Timestamp of when the group is set to expire. The value cannot be '
                   'modified and is automatically populated when the group is created. The Timestamp type represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Returned by default. Read-only.',
                   arg_group='Group')
        c.argument('group_types', nargs='+', help='Specifies the group type and its membership.  If the collection '
                   'contains Unified, the group is a Microsoft 365 group; otherwise, it\'s either a security group or '
                   'distribution group. For details, see groups overview.If the collection includes DynamicMembership, '
                   'the group has dynamic membership; otherwise, membership is static.  Returned by default. Supports '
                   '$filter.', arg_group='Group')
        c.argument('has_members_with_license_errors', arg_type=get_three_state_flag(), help='Indicates whether there '
                   'are members in this group that have license errors from its group-based license assignment. This '
                   'property is never returned on a GET operation. You can use it as a $filter argument to get groups '
                   'that have members with license errors (that is, filter for this property being true). See an '
                   'example.', arg_group='Group')
        c.argument('license_processing_state', action=AddLicenseProcessingState, nargs='+',
                   help='licenseProcessingState', arg_group='Group')
        c.argument('mail', type=str, help='The SMTP address for the group, for example, \'serviceadmins@contoso.onmicro'
                   'soft.com\'. Returned by default. Read-only. Supports $filter.', arg_group='Group')
        c.argument('mail_enabled', arg_type=get_three_state_flag(), help='Specifies whether the group is mail-enabled. '
                   'Returned by default.', arg_group='Group')
        c.argument('mail_nickname', type=str, help='The mail alias for the group, unique in the organization. This '
                   'property must be specified when a group is created. Returned by default. Supports $filter.',
                   arg_group='Group')
        c.argument('membership_rule', type=str, help='The rule that determines members for this group if the group is '
                   'a dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of '
                   'the membership rule, see Membership Rules syntax. Returned by default.', arg_group='Group')
        c.argument('membership_rule_processing_state', type=str, help='Indicates whether the dynamic membership '
                   'processing is on or paused. Possible values are \'On\' or \'Paused\'. Returned by default.',
                   arg_group='Group')
        c.argument('on_premises_domain_name', type=str, help='Contains the on-premises domain FQDN, also called '
                   'dnsDomainName synchronized from the on-premises directory. The property is only populated for '
                   'customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD '
                   'Connect.Returned by default. Read-only.', arg_group='Group')
        c.argument('on_premises_last_sync_date_time', help='Indicates the last time at which the group was synced with '
                   'the on-premises directory.The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'. Returned by default. Read-only. Supports $filter.', arg_group='Group')
        c.argument('on_premises_net_bios_name', type=str, help='Contains the on-premises netBios name synchronized '
                   'from the on-premises directory. The property is only populated for customers who are synchronizing '
                   'their on-premises directory to Azure Active Directory via Azure AD Connect.Returned by default. '
                   'Read-only.', arg_group='Group')
        c.argument('on_premises_provisioning_errors', action=AddOnPremisesProvisioningErrors, nargs='+', help='Errors '
                   'when using Microsoft synchronization product during provisioning. Returned by default.',
                   arg_group='Group')
        c.argument('on_premises_sam_account_name', type=str, help='Contains the on-premises SAM account name '
                   'synchronized from the on-premises directory. The property is only populated for customers who are '
                   'synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect.Returned '
                   'by default. Read-only.', arg_group='Group')
        c.argument('on_premises_security_identifier', type=str, help='Contains the on-premises security identifier '
                   '(SID) for the group that was synchronized from on-premises to the cloud. Returned by default. '
                   'Read-only.', arg_group='Group')
        c.argument('on_premises_sync_enabled', arg_type=get_three_state_flag(), help='true if this group is synced '
                   'from an on-premises directory; false if this group was originally synced from an on-premises '
                   'directory but is no longer synced; null if this object has never been synced from an on-premises '
                   'directory (default). Returned by default. Read-only. Supports $filter.', arg_group='Group')
        c.argument('preferred_data_location', type=str, help='The preferred data location for the group. For more '
                   'information, see  OneDrive Online Multi-Geo. Returned by default.', arg_group='Group')
        c.argument('preferred_language', type=str, help='The preferred language for an Microsoft 365 group. Should '
                   'follow ISO 639-1 Code; for example \'en-US\'. Returned by default.', arg_group='Group')
        c.argument('proxy_addresses', nargs='+', help='Email addresses for the group that direct to the same group '
                   'mailbox. For example: [\'SMTP: bob@contoso.com\', \'smtp: bob@sales.contoso.com\']. The any '
                   'operator is required to filter expressions on multi-valued properties. Returned by default. '
                   'Read-only. Not nullable. Supports $filter.', arg_group='Group')
        c.argument('renewed_date_time', help='Timestamp of when the group was last renewed. This cannot be modified '
                   'directly and is only updated via the renew service action. The Timestamp type represents date and '
                   'time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan '
                   '1, 2014 would look like this: \'2014-01-01T00:00:00Z\'. Returned by default. Read-only.',
                   arg_group='Group')
        c.argument('security_enabled', arg_type=get_three_state_flag(), help='Specifies whether the group is a '
                   'security group. Returned by default. Supports $filter.', arg_group='Group')
        c.argument('security_identifier', type=str, help='Security identifier of the group, used in Windows scenarios. '
                   'Returned by default.', arg_group='Group')
        c.argument('theme', type=str, help='Specifies an Microsoft 365 group\'s color theme. Possible values are Teal, '
                   'Purple, Green, Blue, Pink, Orange or Red. Returned by default.', arg_group='Group')
        c.argument('microsoft_graph_group_visibility', type=str, help='Specifies the visibility of a Microsoft 365 '
                   'group. Possible values are: Private, Public, or Hiddenmembership; blank values are treated as '
                   'public.  See group visibility options to learn more.Visibility can be set only when a group is '
                   'created; it is not editable.Visibility is supported only for unified groups; it is not supported '
                   'for security groups. Returned by default.', arg_group='Group')
        c.argument('allow_external_senders', arg_type=get_three_state_flag(), help='Indicates if people external to '
                   'the organization can send messages to the group. Default value is false. Returned only on $select.',
                   arg_group='Group')
        c.argument('auto_subscribe_new_members', arg_type=get_three_state_flag(), help='Indicates if new members added '
                   'to the group will be auto-subscribed to receive email notifications. You can set this property in '
                   'a PATCH request for the group; do not set it in the initial POST request that creates the group. '
                   'Default value is false. Returned only on $select.', arg_group='Group')
        c.argument('hide_from_address_lists', arg_type=get_three_state_flag(), help='True if the group is not '
                   'displayed in certain parts of the Outlook UI: the Address Book, address lists for selecting '
                   'message recipients, and the Browse Groups dialog for searching groups; otherwise, false. Default '
                   'value is false. Returned only on $select.', arg_group='Group')
        c.argument('hide_from_outlook_clients', arg_type=get_three_state_flag(), help='True if the group is not '
                   'displayed in Outlook clients, such as Outlook for Windows and Outlook on the web; otherwise, '
                   'false. Default value is false. Returned only on $select.', arg_group='Group')
        c.argument('is_subscribed_by_mail', arg_type=get_three_state_flag(), help='Indicates whether the signed-in '
                   'user is subscribed to receive email conversations. Default value is true. Returned only on '
                   '$select.', arg_group='Group')
        c.argument('unseen_count', type=int, help='Count of conversations that have received new posts since the '
                   'signed-in user last visited the group. Returned only on $select.', arg_group='Group')
        c.argument('group_is_archived', arg_type=get_three_state_flag(), help='', arg_group='Group')
        c.argument('app_role_assignments', action=AddAppRoleAssignments, nargs='+', help='', arg_group='Group')
        c.argument('created_on_behalf_of', action=AddCreatedOnBehalfOf, nargs='+', help='Represents an Azure Active '
                   'Directory object. The directoryObject type is the base type for many other directory entity types.',
                   arg_group='Group')
        c.argument('member_of', action=AddMemberOf, nargs='+', help='Groups that this group is a member of. HTTP '
                   'Methods: GET (supported for all groups). Read-only. Nullable.', arg_group='Group')
        c.argument('microsoft_graph_group_members', action=AddMicrosoftGraphGroupMembers, nargs='+', help='Users and '
                   'groups that are members of this group. HTTP Methods: GET (supported for all groups), POST '
                   '(supported for Microsoft 365 groups, security groups and mail-enabled security groups), DELETE '
                   '(supported for Microsoft 365 groups and security groups) Nullable.', arg_group='Group')
        c.argument('members_with_license_errors', action=AddMembersWithLicenseErrors, nargs='+', help='A list of group '
                   'members with license errors from this group-based license assignment. Read-only.',
                   arg_group='Group')
        c.argument('owners', action=AddOwners, nargs='+', help='The owners of the group. The owners are a set of '
                   'non-admin users who are allowed to modify this object. Limited to 100 owners. HTTP Methods: GET '
                   '(supported for all groups), POST (supported for Microsoft 365 groups, security groups and '
                   'mail-enabled security groups), DELETE (supported for Microsoft 365 groups and security groups). '
                   'Nullable.', arg_group='Group')
        c.argument('settings', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('transitive_member_of', action=AddTransitiveMemberOf, nargs='+', help='', arg_group='Group')
        c.argument('transitive_members', action=AddTransitiveMembers, nargs='+', help='', arg_group='Group')
        c.argument('accepted_senders', action=AddAcceptedSenders, nargs='+', help='The list of users or groups that '
                   'are allowed to create post\'s or calendar events in this group. If this list is non-empty then '
                   'only users or groups listed here are allowed to post.', arg_group='Group')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Read-only. '
                   'Expected value: json-string/@json-file.', arg_group='Group')
        c.argument('conversations', type=validate_file_or_dict, help='The group\'s conversations. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('events', type=validate_file_or_dict, help='The group\'s calendar events. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('photo', action=AddGroupsPhoto, nargs='+', help='profilePhoto', arg_group='Group')
        c.argument('photos', action=AddPhotos, nargs='+', help='The profile photos owned by the group. Read-only. '
                   'Nullable.', arg_group='Group')
        c.argument('rejected_senders', action=AddRejectedSenders, nargs='+', help='The list of users or groups that '
                   'are not allowed to create posts or calendar events in this group. Nullable', arg_group='Group')
        c.argument('threads', type=validate_file_or_dict, help='The group\'s conversation threads. Nullable. Expected '
                   'value: json-string/@json-file.', arg_group='Group')
        c.argument('drive', type=validate_file_or_dict, help='drive Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('drives', type=validate_file_or_dict, help='The group\'s drives. Read-only. Expected value: '
                   'json-string/@json-file.', arg_group='Group')
        c.argument('sites', type=validate_file_or_dict, help='The list of SharePoint sites in this group. Access the '
                   'default site with /sites/root. Expected value: json-string/@json-file.', arg_group='Group')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the group. Read-only. Nullable.', arg_group='Group')
        c.argument('group_lifecycle_policies', action=AddGroupLifecyclePolicies, nargs='+', help='The collection of '
                   'lifecycle policies for this group. Read-only. Nullable.', arg_group='Group')
        c.argument('planner', type=validate_file_or_dict, help='plannerGroup Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('onenote', type=validate_file_or_dict, help='onenote Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('team', type=validate_file_or_dict, help='team Expected value: json-string/@json-file.',
                   arg_group='Group')
        c.argument('id2', type=str, help='Read-only.', arg_group='Schedule')
        c.argument('enabled', arg_type=get_three_state_flag(), help='Indicates whether the schedule is enabled for the '
                   'team. Required.', arg_group='Schedule')
        c.argument('offer_shift_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether offer '
                   'shift requests are enabled for the schedule.', arg_group='Schedule')
        c.argument('open_shifts_enabled', arg_type=get_three_state_flag(), help='Indicates whether open shifts are '
                   'enabled for the schedule.', arg_group='Schedule')
        c.argument('provision_status', arg_type=get_enum_type(['NotStarted', 'Running', 'Completed', 'Failed']),
                   help='', arg_group='Schedule')
        c.argument('provision_status_code', type=str, help='Additional information about why schedule provisioning '
                   'failed.', arg_group='Schedule')
        c.argument('swap_shifts_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether swap '
                   'shifts requests are enabled for the schedule.', arg_group='Schedule')
        c.argument('time_clock_enabled', arg_type=get_three_state_flag(), help='Indicates whether time clock is '
                   'enabled for the schedule.', arg_group='Schedule')
        c.argument('time_off_requests_enabled', arg_type=get_three_state_flag(), help='Indicates whether time off '
                   'requests are enabled for the schedule.', arg_group='Schedule')
        c.argument('time_zone', type=str, help='Indicates the time zone of the schedule team using tz database format. '
                   'Required.', arg_group='Schedule')
        c.argument('workforce_integration_ids', nargs='+', help='', arg_group='Schedule')
        c.argument('offer_shift_requests', action=AddOfferShiftRequests, nargs='+', help='', arg_group='Schedule')
        c.argument('open_shift_change_requests', action=AddOpenShiftChangeRequests, nargs='+', help='',
                   arg_group='Schedule')
        c.argument('open_shifts', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.',
                   arg_group='Schedule')
        c.argument('scheduling_groups', action=AddSchedulingGroups, nargs='+', help='The logical grouping of users in '
                   'the schedule (usually by role).', arg_group='Schedule')
        c.argument('shifts', type=validate_file_or_dict, help='The shifts in the schedule. Expected value: '
                   'json-string/@json-file.', arg_group='Schedule')
        c.argument('swap_shifts_change_requests', action=AddSwapShiftsChangeRequests, nargs='+', help='',
                   arg_group='Schedule')
        c.argument('time_off_reasons', action=AddTimeOffReasons, nargs='+', help='The set of reasons for a time off in '
                   'the schedule.', arg_group='Schedule')
        c.argument('time_off_requests', action=AddTimeOffRequests, nargs='+', help='', arg_group='Schedule')
        c.argument('times_off', type=validate_file_or_dict, help='The instances of times off in the schedule. Expected '
                   'value: json-string/@json-file.', arg_group='Schedule')
