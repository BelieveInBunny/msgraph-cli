# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._reports_enums import *


class CollectionOfDirectoryAudit(msrest.serialization.Model):
    """Collection of directoryAudit.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~reports.models.MicrosoftGraphDirectoryAudit]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDirectoryAudit]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphDirectoryAudit"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfDirectoryAudit, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfRestrictedSignIn(msrest.serialization.Model):
    """Collection of restrictedSignIn.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~reports.models.MicrosoftGraphRestrictedSignIn]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphRestrictedSignIn]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphRestrictedSignIn"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfRestrictedSignIn, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfSignIn(msrest.serialization.Model):
    """Collection of signIn.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~reports.models.MicrosoftGraphSignIn]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSignIn]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphSignIn"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfSignIn, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class MicrosoftGraphAppIdentity(msrest.serialization.Model):
    """appIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_id: Refers to the Unique GUID representing Application Id in the Azure Active
     Directory.
    :type app_id: str
    :param display_name: Refers to the Application Name displayed in the Azure Portal.
    :type display_name: str
    :param service_principal_id: Refers to the Unique GUID indicating Service Principal Id in Azure
     Active Directory for the corresponding App.
    :type service_principal_id: str
    :param service_principal_name: Refers to the Service Principal Name is the Application name in
     the tenant.
    :type service_principal_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'service_principal_id': {'key': 'servicePrincipalId', 'type': 'str'},
        'service_principal_name': {'key': 'servicePrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        app_id: Optional[str] = None,
        display_name: Optional[str] = None,
        service_principal_id: Optional[str] = None,
        service_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAppIdentity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.app_id = app_id
        self.display_name = display_name
        self.service_principal_id = service_principal_id
        self.service_principal_name = service_principal_name


class MicrosoftGraphAppliedConditionalAccessPolicy(msrest.serialization.Model):
    """appliedConditionalAccessPolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: Refers to the Name of the conditional access policy (example: 'Require MFA
     for Salesforce').
    :type display_name: str
    :param enforced_grant_controls: Refers to the grant controls enforced by the conditional access
     policy (example: 'Require multi-factor authentication').
    :type enforced_grant_controls: list[str]
    :param enforced_session_controls: Refers to the session controls enforced by the conditional
     access policy (example: 'Require app enforced controls').
    :type enforced_session_controls: list[str]
    :param id: Unique GUID of the conditional access policy.
    :type id: str
    :param result:  Possible values include: "success", "failure", "notApplied", "notEnabled",
     "unknown", "unknownFutureValue".
    :type result: str or ~reports.models.MicrosoftGraphAppliedConditionalAccessPolicyResult
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'enforced_grant_controls': {'key': 'enforcedGrantControls', 'type': '[str]'},
        'enforced_session_controls': {'key': 'enforcedSessionControls', 'type': '[str]'},
        'id': {'key': 'id', 'type': 'str'},
        'result': {'key': 'result', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        enforced_grant_controls: Optional[List[str]] = None,
        enforced_session_controls: Optional[List[str]] = None,
        id: Optional[str] = None,
        result: Optional[Union[str, "MicrosoftGraphAppliedConditionalAccessPolicyResult"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphAppliedConditionalAccessPolicy, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.enforced_grant_controls = enforced_grant_controls
        self.enforced_session_controls = enforced_session_controls
        self.id = id
        self.result = result


class MicrosoftGraphAuditActivityInitiator(msrest.serialization.Model):
    """auditActivityInitiator.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app: appIdentity.
    :type app: ~reports.models.MicrosoftGraphAppIdentity
    :param user: userIdentity.
    :type user: ~reports.models.MicrosoftGraphUserIdentity
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'app': {'key': 'app', 'type': 'MicrosoftGraphAppIdentity'},
        'user': {'key': 'user', 'type': 'MicrosoftGraphUserIdentity'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        app: Optional["MicrosoftGraphAppIdentity"] = None,
        user: Optional["MicrosoftGraphUserIdentity"] = None,
        **kwargs
    ):
        super(MicrosoftGraphAuditActivityInitiator, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.app = app
        self.user = user


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id


class MicrosoftGraphAuditLogRoot(MicrosoftGraphEntity):
    """auditLogRoot.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param directory_audits: Read-only. Nullable.
    :type directory_audits: list[~reports.models.MicrosoftGraphDirectoryAudit]
    :param restricted_sign_ins:
    :type restricted_sign_ins: list[~reports.models.MicrosoftGraphRestrictedSignIn]
    :param sign_ins: Read-only. Nullable.
    :type sign_ins: list[~reports.models.MicrosoftGraphSignIn]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'directory_audits': {'key': 'directoryAudits', 'type': '[MicrosoftGraphDirectoryAudit]'},
        'restricted_sign_ins': {'key': 'restrictedSignIns', 'type': '[MicrosoftGraphRestrictedSignIn]'},
        'sign_ins': {'key': 'signIns', 'type': '[MicrosoftGraphSignIn]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        directory_audits: Optional[List["MicrosoftGraphDirectoryAudit"]] = None,
        restricted_sign_ins: Optional[List["MicrosoftGraphRestrictedSignIn"]] = None,
        sign_ins: Optional[List["MicrosoftGraphSignIn"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphAuditLogRoot, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.directory_audits = directory_audits
        self.restricted_sign_ins = restricted_sign_ins
        self.sign_ins = sign_ins


class MicrosoftGraphDeviceDetail(msrest.serialization.Model):
    """deviceDetail.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param browser: Indicates the browser information of the used for signing in.
    :type browser: str
    :param device_id: Refers to the UniqueID of the device used for signing in.
    :type device_id: str
    :param display_name: Refers to the name of the device used for signing in.
    :type display_name: str
    :param is_compliant: Indicates whether the device is compliant.
    :type is_compliant: bool
    :param is_managed: Indicates whether the device is managed.
    :type is_managed: bool
    :param operating_system: Indicates the operating system name and version used for signing in.
    :type operating_system: str
    :param trust_type: Provides information about whether the signed-in device is Workplace Joined,
     AzureAD Joined, Domain Joined.
    :type trust_type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'browser': {'key': 'browser', 'type': 'str'},
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_compliant': {'key': 'isCompliant', 'type': 'bool'},
        'is_managed': {'key': 'isManaged', 'type': 'bool'},
        'operating_system': {'key': 'operatingSystem', 'type': 'str'},
        'trust_type': {'key': 'trustType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        browser: Optional[str] = None,
        device_id: Optional[str] = None,
        display_name: Optional[str] = None,
        is_compliant: Optional[bool] = None,
        is_managed: Optional[bool] = None,
        operating_system: Optional[str] = None,
        trust_type: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDeviceDetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.browser = browser
        self.device_id = device_id
        self.display_name = display_name
        self.is_compliant = is_compliant
        self.is_managed = is_managed
        self.operating_system = operating_system
        self.trust_type = trust_type


class MicrosoftGraphDirectoryAudit(MicrosoftGraphEntity):
    """directoryAudit.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param activity_date_time: Indicates the date and time the activity was performed. The
     Timestamp type is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type activity_date_time: ~datetime.datetime
    :param activity_display_name: Indicates the activity name or the operation name (examples:
     'Create User' and 'Add member to group'). For full list, see Azure AD activity list.
    :type activity_display_name: str
    :param additional_details: Indicates additional details on the activity.
    :type additional_details: list[~reports.models.MicrosoftGraphKeyValue]
    :param category: Indicates which resource category that's targeted by the activity. (For
     example: User Management, Group Management etc..).
    :type category: str
    :param correlation_id: Indicates a unique ID that helps correlate activities that span across
     various services. Can be used to trace logs across services.
    :type correlation_id: str
    :param initiated_by: auditActivityInitiator.
    :type initiated_by: ~reports.models.MicrosoftGraphAuditActivityInitiator
    :param logged_by_service: Indicates information on which service initiated the activity (For
     example: Self-service Password Management, Core Directory, B2C, Invited Users, Microsoft
     Identity Manager, Privileged Identity Management.
    :type logged_by_service: str
    :param operation_type:
    :type operation_type: str
    :param result:  Possible values include: "success", "failure", "timeout", "unknownFutureValue".
    :type result: str or ~reports.models.MicrosoftGraphOperationResult
    :param result_reason: Describes cause of 'failure' or 'timeout' results.
    :type result_reason: str
    :param target_resources: Indicates information on which resource was changed due to the
     activity. Target Resource Type can be User, Device, Directory, App, Role, Group, Policy or
     Other.
    :type target_resources: list[~reports.models.MicrosoftGraphTargetResource]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'activity_date_time': {'key': 'activityDateTime', 'type': 'iso-8601'},
        'activity_display_name': {'key': 'activityDisplayName', 'type': 'str'},
        'additional_details': {'key': 'additionalDetails', 'type': '[MicrosoftGraphKeyValue]'},
        'category': {'key': 'category', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'initiated_by': {'key': 'initiatedBy', 'type': 'MicrosoftGraphAuditActivityInitiator'},
        'logged_by_service': {'key': 'loggedByService', 'type': 'str'},
        'operation_type': {'key': 'operationType', 'type': 'str'},
        'result': {'key': 'result', 'type': 'str'},
        'result_reason': {'key': 'resultReason', 'type': 'str'},
        'target_resources': {'key': 'targetResources', 'type': '[MicrosoftGraphTargetResource]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        activity_date_time: Optional[datetime.datetime] = None,
        activity_display_name: Optional[str] = None,
        additional_details: Optional[List["MicrosoftGraphKeyValue"]] = None,
        category: Optional[str] = None,
        correlation_id: Optional[str] = None,
        initiated_by: Optional["MicrosoftGraphAuditActivityInitiator"] = None,
        logged_by_service: Optional[str] = None,
        operation_type: Optional[str] = None,
        result: Optional[Union[str, "MicrosoftGraphOperationResult"]] = None,
        result_reason: Optional[str] = None,
        target_resources: Optional[List["MicrosoftGraphTargetResource"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphDirectoryAudit, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.activity_date_time = activity_date_time
        self.activity_display_name = activity_display_name
        self.additional_details = additional_details
        self.category = category
        self.correlation_id = correlation_id
        self.initiated_by = initiated_by
        self.logged_by_service = logged_by_service
        self.operation_type = operation_type
        self.result = result
        self.result_reason = result_reason
        self.target_resources = target_resources


class MicrosoftGraphGeoCoordinates(msrest.serialization.Model):
    """geoCoordinates.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param altitude: Optional. The altitude (height), in feet,  above sea level for the item. Read-
     only.
    :type altitude: float
    :param latitude: Optional. The latitude, in decimal, for the item. Read-only.
    :type latitude: float
    :param longitude: Optional. The longitude, in decimal, for the item. Read-only.
    :type longitude: float
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'altitude': {'key': 'altitude', 'type': 'float'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        altitude: Optional[float] = None,
        latitude: Optional[float] = None,
        longitude: Optional[float] = None,
        **kwargs
    ):
        super(MicrosoftGraphGeoCoordinates, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.altitude = altitude
        self.latitude = latitude
        self.longitude = longitude


class MicrosoftGraphKeyValue(msrest.serialization.Model):
    """keyValue.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param key: Key for the key-value pair.
    :type key: str
    :param value: Value for the key-value pair.
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'key': {'key': 'key', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        key: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphKeyValue, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.key = key
        self.value = value


class MicrosoftGraphModifiedProperty(msrest.serialization.Model):
    """modifiedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: Indicates the property name of the target attribute that was changed.
    :type display_name: str
    :param new_value: Indicates the updated value for the propery.
    :type new_value: str
    :param old_value: Indicates the previous value (before the update) for the property.
    :type old_value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'new_value': {'key': 'newValue', 'type': 'str'},
        'old_value': {'key': 'oldValue', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        new_value: Optional[str] = None,
        old_value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphModifiedProperty, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.new_value = new_value
        self.old_value = old_value


class MicrosoftGraphReport(msrest.serialization.Model):
    """Device Configuration profile History reports.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param content: Not yet documented.
    :type content: bytes
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'base64'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        content: Optional[bytes] = None,
        **kwargs
    ):
        super(MicrosoftGraphReport, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.content = content


class MicrosoftGraphReportRoot(MicrosoftGraphEntity):
    """The resource that represents an instance of History Reports.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(MicrosoftGraphReportRoot, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties


class MicrosoftGraphSignIn(MicrosoftGraphEntity):
    """signIn.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_display_name: App name displayed in the Azure Portal.
    :type app_display_name: str
    :param app_id: Unique GUID representing the app ID in the Azure Active Directory.
    :type app_id: str
    :param applied_conditional_access_policies:
    :type applied_conditional_access_policies:
     list[~reports.models.MicrosoftGraphAppliedConditionalAccessPolicy]
    :param client_app_used: Identifies the legacy client used for sign-in activity.  Includes
     Browser, Exchange Active Sync, modern clients, IMAP, MAPI, SMTP, and POP.
    :type client_app_used: str
    :param conditional_access_status:  Possible values include: "success", "failure", "notApplied",
     "unknownFutureValue".
    :type conditional_access_status: str or ~reports.models.MicrosoftGraphConditionalAccessStatus
    :param correlation_id: The request ID sent from the client when the sign-in is initiated; used
     to troubleshoot sign-in activity.
    :type correlation_id: str
    :param created_date_time: Date and time (UTC) the sign-in was initiated. Example: midnight on
     Jan 1, 2014 is reported as '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param device_detail: deviceDetail.
    :type device_detail: ~reports.models.MicrosoftGraphDeviceDetail
    :param ip_address: IP address of the client used to sign in.
    :type ip_address: str
    :param is_interactive: Indicates if a sign-in is interactive or not.
    :type is_interactive: bool
    :param location: signInLocation.
    :type location: ~reports.models.MicrosoftGraphSignInLocation
    :param resource_display_name: Name of the resource the user signed into.
    :type resource_display_name: str
    :param resource_id: ID of the resource that the user signed into.
    :type resource_id: str
    :param risk_detail:  Possible values include: "none", "adminGeneratedTemporaryPassword",
     "userPerformedSecuredPasswordChange", "userPerformedSecuredPasswordReset",
     "adminConfirmedSigninSafe", "aiConfirmedSigninSafe", "userPassedMFADrivenByRiskBasedPolicy",
     "adminDismissedAllRiskForUser", "adminConfirmedSigninCompromised", "hidden",
     "adminConfirmedUserCompromised", "unknownFutureValue".
    :type risk_detail: str or ~reports.models.MicrosoftGraphRiskDetail
    :param risk_event_types: Risk event types associated with the sign-in. The possible values are:
     unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
     malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
     investigationsThreatIntelligence,  generic, and unknownFutureValue.
    :type risk_event_types: list[str or ~reports.models.MicrosoftGraphRiskEventType]
    :param risk_event_types_v2: The list of risk event types associated with the sign-in. Possible
     values: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
     malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
     investigationsThreatIntelligence,  generic, or unknownFutureValue.
    :type risk_event_types_v2: list[str]
    :param risk_level_aggregated:  Possible values include: "low", "medium", "high", "hidden",
     "none", "unknownFutureValue".
    :type risk_level_aggregated: str or ~reports.models.MicrosoftGraphRiskLevel
    :param risk_level_during_sign_in:  Possible values include: "low", "medium", "high", "hidden",
     "none", "unknownFutureValue".
    :type risk_level_during_sign_in: str or ~reports.models.MicrosoftGraphRiskLevel
    :param risk_state:  Possible values include: "none", "confirmedSafe", "remediated",
     "dismissed", "atRisk", "confirmedCompromised", "unknownFutureValue".
    :type risk_state: str or ~reports.models.MicrosoftGraphRiskState
    :param status: signInStatus.
    :type status: ~reports.models.MicrosoftGraphSignInStatus
    :param user_display_name: Display name of the user that initiated the sign-in.
    :type user_display_name: str
    :param user_id: ID of the user that initiated the sign-in.
    :type user_id: str
    :param user_principal_name: User principal name of the user that initiated the sign-in.
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'applied_conditional_access_policies': {'key': 'appliedConditionalAccessPolicies', 'type': '[MicrosoftGraphAppliedConditionalAccessPolicy]'},
        'client_app_used': {'key': 'clientAppUsed', 'type': 'str'},
        'conditional_access_status': {'key': 'conditionalAccessStatus', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'device_detail': {'key': 'deviceDetail', 'type': 'MicrosoftGraphDeviceDetail'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'is_interactive': {'key': 'isInteractive', 'type': 'bool'},
        'location': {'key': 'location', 'type': 'MicrosoftGraphSignInLocation'},
        'resource_display_name': {'key': 'resourceDisplayName', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'risk_detail': {'key': 'riskDetail', 'type': 'str'},
        'risk_event_types': {'key': 'riskEventTypes', 'type': '[str]'},
        'risk_event_types_v2': {'key': 'riskEventTypes_v2', 'type': '[str]'},
        'risk_level_aggregated': {'key': 'riskLevelAggregated', 'type': 'str'},
        'risk_level_during_sign_in': {'key': 'riskLevelDuringSignIn', 'type': 'str'},
        'risk_state': {'key': 'riskState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'MicrosoftGraphSignInStatus'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        app_display_name: Optional[str] = None,
        app_id: Optional[str] = None,
        applied_conditional_access_policies: Optional[List["MicrosoftGraphAppliedConditionalAccessPolicy"]] = None,
        client_app_used: Optional[str] = None,
        conditional_access_status: Optional[Union[str, "MicrosoftGraphConditionalAccessStatus"]] = None,
        correlation_id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        device_detail: Optional["MicrosoftGraphDeviceDetail"] = None,
        ip_address: Optional[str] = None,
        is_interactive: Optional[bool] = None,
        location: Optional["MicrosoftGraphSignInLocation"] = None,
        resource_display_name: Optional[str] = None,
        resource_id: Optional[str] = None,
        risk_detail: Optional[Union[str, "MicrosoftGraphRiskDetail"]] = None,
        risk_event_types: Optional[List[Union[str, "MicrosoftGraphRiskEventType"]]] = None,
        risk_event_types_v2: Optional[List[str]] = None,
        risk_level_aggregated: Optional[Union[str, "MicrosoftGraphRiskLevel"]] = None,
        risk_level_during_sign_in: Optional[Union[str, "MicrosoftGraphRiskLevel"]] = None,
        risk_state: Optional[Union[str, "MicrosoftGraphRiskState"]] = None,
        status: Optional["MicrosoftGraphSignInStatus"] = None,
        user_display_name: Optional[str] = None,
        user_id: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSignIn, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.app_display_name = app_display_name
        self.app_id = app_id
        self.applied_conditional_access_policies = applied_conditional_access_policies
        self.client_app_used = client_app_used
        self.conditional_access_status = conditional_access_status
        self.correlation_id = correlation_id
        self.created_date_time = created_date_time
        self.device_detail = device_detail
        self.ip_address = ip_address
        self.is_interactive = is_interactive
        self.location = location
        self.resource_display_name = resource_display_name
        self.resource_id = resource_id
        self.risk_detail = risk_detail
        self.risk_event_types = risk_event_types
        self.risk_event_types_v2 = risk_event_types_v2
        self.risk_level_aggregated = risk_level_aggregated
        self.risk_level_during_sign_in = risk_level_during_sign_in
        self.risk_state = risk_state
        self.status = status
        self.user_display_name = user_display_name
        self.user_id = user_id
        self.user_principal_name = user_principal_name


class MicrosoftGraphRestrictedSignIn(MicrosoftGraphSignIn):
    """restrictedSignIn.

    :param id: Read-only.
    :type id: str
    :param app_display_name: App name displayed in the Azure Portal.
    :type app_display_name: str
    :param app_id: Unique GUID representing the app ID in the Azure Active Directory.
    :type app_id: str
    :param applied_conditional_access_policies:
    :type applied_conditional_access_policies:
     list[~reports.models.MicrosoftGraphAppliedConditionalAccessPolicy]
    :param client_app_used: Identifies the legacy client used for sign-in activity.  Includes
     Browser, Exchange Active Sync, modern clients, IMAP, MAPI, SMTP, and POP.
    :type client_app_used: str
    :param conditional_access_status:  Possible values include: "success", "failure", "notApplied",
     "unknownFutureValue".
    :type conditional_access_status: str or ~reports.models.MicrosoftGraphConditionalAccessStatus
    :param correlation_id: The request ID sent from the client when the sign-in is initiated; used
     to troubleshoot sign-in activity.
    :type correlation_id: str
    :param created_date_time: Date and time (UTC) the sign-in was initiated. Example: midnight on
     Jan 1, 2014 is reported as '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param device_detail: deviceDetail.
    :type device_detail: ~reports.models.MicrosoftGraphDeviceDetail
    :param ip_address: IP address of the client used to sign in.
    :type ip_address: str
    :param is_interactive: Indicates if a sign-in is interactive or not.
    :type is_interactive: bool
    :param location: signInLocation.
    :type location: ~reports.models.MicrosoftGraphSignInLocation
    :param resource_display_name: Name of the resource the user signed into.
    :type resource_display_name: str
    :param resource_id: ID of the resource that the user signed into.
    :type resource_id: str
    :param risk_detail:  Possible values include: "none", "adminGeneratedTemporaryPassword",
     "userPerformedSecuredPasswordChange", "userPerformedSecuredPasswordReset",
     "adminConfirmedSigninSafe", "aiConfirmedSigninSafe", "userPassedMFADrivenByRiskBasedPolicy",
     "adminDismissedAllRiskForUser", "adminConfirmedSigninCompromised", "hidden",
     "adminConfirmedUserCompromised", "unknownFutureValue".
    :type risk_detail: str or ~reports.models.MicrosoftGraphRiskDetail
    :param risk_event_types: Risk event types associated with the sign-in. The possible values are:
     unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
     malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
     investigationsThreatIntelligence,  generic, and unknownFutureValue.
    :type risk_event_types: list[str or ~reports.models.MicrosoftGraphRiskEventType]
    :param risk_event_types_v2: The list of risk event types associated with the sign-in. Possible
     values: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
     malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
     investigationsThreatIntelligence,  generic, or unknownFutureValue.
    :type risk_event_types_v2: list[str]
    :param risk_level_aggregated:  Possible values include: "low", "medium", "high", "hidden",
     "none", "unknownFutureValue".
    :type risk_level_aggregated: str or ~reports.models.MicrosoftGraphRiskLevel
    :param risk_level_during_sign_in:  Possible values include: "low", "medium", "high", "hidden",
     "none", "unknownFutureValue".
    :type risk_level_during_sign_in: str or ~reports.models.MicrosoftGraphRiskLevel
    :param risk_state:  Possible values include: "none", "confirmedSafe", "remediated",
     "dismissed", "atRisk", "confirmedCompromised", "unknownFutureValue".
    :type risk_state: str or ~reports.models.MicrosoftGraphRiskState
    :param status: signInStatus.
    :type status: ~reports.models.MicrosoftGraphSignInStatus
    :param user_display_name: Display name of the user that initiated the sign-in.
    :type user_display_name: str
    :param user_id: ID of the user that initiated the sign-in.
    :type user_id: str
    :param user_principal_name: User principal name of the user that initiated the sign-in.
    :type user_principal_name: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param target_tenant_id:
    :type target_tenant_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'applied_conditional_access_policies': {'key': 'appliedConditionalAccessPolicies', 'type': '[MicrosoftGraphAppliedConditionalAccessPolicy]'},
        'client_app_used': {'key': 'clientAppUsed', 'type': 'str'},
        'conditional_access_status': {'key': 'conditionalAccessStatus', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'device_detail': {'key': 'deviceDetail', 'type': 'MicrosoftGraphDeviceDetail'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'is_interactive': {'key': 'isInteractive', 'type': 'bool'},
        'location': {'key': 'location', 'type': 'MicrosoftGraphSignInLocation'},
        'resource_display_name': {'key': 'resourceDisplayName', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'risk_detail': {'key': 'riskDetail', 'type': 'str'},
        'risk_event_types': {'key': 'riskEventTypes', 'type': '[str]'},
        'risk_event_types_v2': {'key': 'riskEventTypes_v2', 'type': '[str]'},
        'risk_level_aggregated': {'key': 'riskLevelAggregated', 'type': 'str'},
        'risk_level_during_sign_in': {'key': 'riskLevelDuringSignIn', 'type': 'str'},
        'risk_state': {'key': 'riskState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'MicrosoftGraphSignInStatus'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'target_tenant_id': {'key': 'targetTenantId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        app_display_name: Optional[str] = None,
        app_id: Optional[str] = None,
        applied_conditional_access_policies: Optional[List["MicrosoftGraphAppliedConditionalAccessPolicy"]] = None,
        client_app_used: Optional[str] = None,
        conditional_access_status: Optional[Union[str, "MicrosoftGraphConditionalAccessStatus"]] = None,
        correlation_id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        device_detail: Optional["MicrosoftGraphDeviceDetail"] = None,
        ip_address: Optional[str] = None,
        is_interactive: Optional[bool] = None,
        location: Optional["MicrosoftGraphSignInLocation"] = None,
        resource_display_name: Optional[str] = None,
        resource_id: Optional[str] = None,
        risk_detail: Optional[Union[str, "MicrosoftGraphRiskDetail"]] = None,
        risk_event_types: Optional[List[Union[str, "MicrosoftGraphRiskEventType"]]] = None,
        risk_event_types_v2: Optional[List[str]] = None,
        risk_level_aggregated: Optional[Union[str, "MicrosoftGraphRiskLevel"]] = None,
        risk_level_during_sign_in: Optional[Union[str, "MicrosoftGraphRiskLevel"]] = None,
        risk_state: Optional[Union[str, "MicrosoftGraphRiskState"]] = None,
        status: Optional["MicrosoftGraphSignInStatus"] = None,
        user_display_name: Optional[str] = None,
        user_id: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        target_tenant_id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphRestrictedSignIn, self).__init__(id=id, app_display_name=app_display_name, app_id=app_id, applied_conditional_access_policies=applied_conditional_access_policies, client_app_used=client_app_used, conditional_access_status=conditional_access_status, correlation_id=correlation_id, created_date_time=created_date_time, device_detail=device_detail, ip_address=ip_address, is_interactive=is_interactive, location=location, resource_display_name=resource_display_name, resource_id=resource_id, risk_detail=risk_detail, risk_event_types=risk_event_types, risk_event_types_v2=risk_event_types_v2, risk_level_aggregated=risk_level_aggregated, risk_level_during_sign_in=risk_level_during_sign_in, risk_state=risk_state, status=status, user_display_name=user_display_name, user_id=user_id, user_principal_name=user_principal_name, **kwargs)
        self.additional_properties = additional_properties
        self.target_tenant_id = target_tenant_id


class MicrosoftGraphSignInLocation(msrest.serialization.Model):
    """signInLocation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param city: Provides the city where the sign-in originated. This is calculated using
     latitude/longitude information from the sign-in activity.
    :type city: str
    :param country_or_region: Provides the country code info (2 letter code) where the sign-in
     originated.  This is calculated using latitude/longitude information from the sign-in activity.
    :type country_or_region: str
    :param geo_coordinates: geoCoordinates.
    :type geo_coordinates: ~reports.models.MicrosoftGraphGeoCoordinates
    :param state: Provides the State where the sign-in originated. This is calculated using
     latitude/longitude information from the sign-in activity.
    :type state: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'city': {'key': 'city', 'type': 'str'},
        'country_or_region': {'key': 'countryOrRegion', 'type': 'str'},
        'geo_coordinates': {'key': 'geoCoordinates', 'type': 'MicrosoftGraphGeoCoordinates'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        city: Optional[str] = None,
        country_or_region: Optional[str] = None,
        geo_coordinates: Optional["MicrosoftGraphGeoCoordinates"] = None,
        state: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSignInLocation, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.city = city
        self.country_or_region = country_or_region
        self.geo_coordinates = geo_coordinates
        self.state = state


class MicrosoftGraphSignInStatus(msrest.serialization.Model):
    """signInStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param additional_details: Provides additional details on the sign-in activity.
    :type additional_details: str
    :param error_code: Provides the 5-6digit error code that's generated during a sign-in failure.
     Check out the list of error codes and messages.
    :type error_code: int
    :param failure_reason: Provides the error message or the reason for failure for the
     corresponding sign-in activity. Check out the list of error codes and messages.
    :type failure_reason: str
    """

    _validation = {
        'error_code': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'additional_details': {'key': 'additionalDetails', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'int'},
        'failure_reason': {'key': 'failureReason', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        additional_details: Optional[str] = None,
        error_code: Optional[int] = None,
        failure_reason: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSignInStatus, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.additional_details = additional_details
        self.error_code = error_code
        self.failure_reason = failure_reason


class MicrosoftGraphTargetResource(msrest.serialization.Model):
    """targetResource.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: Indicates the visible name defined for the resource. Typically specified
     when the resource is created.
    :type display_name: str
    :param group_type:  Possible values include: "unifiedGroups", "azureAD", "unknownFutureValue".
    :type group_type: str or ~reports.models.MicrosoftGraphGroupType
    :param id: Indicates the unique ID of the resource.
    :type id: str
    :param modified_properties: Indicates name, old value and new value of each attribute that
     changed. Property values depend on the operation type.
    :type modified_properties: list[~reports.models.MicrosoftGraphModifiedProperty]
    :param type: Describes the resource type.  Example values include Application, Group,
     ServicePrincipal, and User.
    :type type: str
    :param user_principal_name: When type is set to User, this includes the user name that
     initiated the action; null for other types.
    :type user_principal_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'group_type': {'key': 'groupType', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'modified_properties': {'key': 'modifiedProperties', 'type': '[MicrosoftGraphModifiedProperty]'},
        'type': {'key': 'type', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        group_type: Optional[Union[str, "MicrosoftGraphGroupType"]] = None,
        id: Optional[str] = None,
        modified_properties: Optional[List["MicrosoftGraphModifiedProperty"]] = None,
        type: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTargetResource, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.group_type = group_type
        self.id = id
        self.modified_properties = modified_properties
        self.type = type
        self.user_principal_name = user_principal_name


class MicrosoftGraphUserIdentity(msrest.serialization.Model):
    """userIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The identity's display name. Note that this may not always be available or
     up-to-date.
    :type display_name: str
    :param id: Unique identifier for the identity.
    :type id: str
    :param ip_address: Indicates the client IP address used by user performing the activity (audit
     log only).
    :type ip_address: str
    :param user_principal_name: The userPrincipalName attribute of the user.
    :type user_principal_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        id: Optional[str] = None,
        ip_address: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserIdentity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.id = id
        self.ip_address = ip_address
        self.user_principal_name = user_principal_name


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~reports.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        *,
        error: "OdataErrorMain",
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.error = error


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~reports.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        details: Optional[List["OdataErrorDetail"]] = None,
        innererror: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror
