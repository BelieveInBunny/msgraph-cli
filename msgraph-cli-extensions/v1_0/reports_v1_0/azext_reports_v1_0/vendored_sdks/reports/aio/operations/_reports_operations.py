# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class ReportsOperations:
    """ReportsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~reports.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def device_configuration_device_activity(
        self,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function deviceConfigurationDeviceActivity.

        Invoke function deviceConfigurationDeviceActivity.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.device_configuration_device_activity.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    device_configuration_device_activity.metadata = {'url': '/reports/microsoft.graph.deviceConfigurationDeviceActivity()'}  # type: ignore

    async def device_configuration_user_activity(
        self,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function deviceConfigurationUserActivity.

        Invoke function deviceConfigurationUserActivity.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.device_configuration_user_activity.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    device_configuration_user_activity.metadata = {'url': '/reports/microsoft.graph.deviceConfigurationUserActivity()'}  # type: ignore

    async def get_email_activity_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getEmailActivityCounts.

        Invoke function getEmailActivityCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_email_activity_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_email_activity_counts.metadata = {'url': '/reports/microsoft.graph.getEmailActivityCounts(period=\'{period}\')'}  # type: ignore

    async def get_email_activity_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getEmailActivityUserCounts.

        Invoke function getEmailActivityUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_email_activity_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_email_activity_user_counts.metadata = {'url': '/reports/microsoft.graph.getEmailActivityUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_email_activity_user_detail_fe32(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getEmailActivityUserDetail.

        Invoke function getEmailActivityUserDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_email_activity_user_detail_fe32.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_email_activity_user_detail_fe32.metadata = {'url': '/reports/microsoft.graph.getEmailActivityUserDetail(date={date})'}  # type: ignore

    async def get_email_activity_user_detail_ddb2(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getEmailActivityUserDetail.

        Invoke function getEmailActivityUserDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_email_activity_user_detail_ddb2.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_email_activity_user_detail_ddb2.metadata = {'url': '/reports/microsoft.graph.getEmailActivityUserDetail(period=\'{period}\')'}  # type: ignore

    async def get_email_app_usage_apps_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getEmailAppUsageAppsUserCounts.

        Invoke function getEmailAppUsageAppsUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_email_app_usage_apps_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_email_app_usage_apps_user_counts.metadata = {'url': '/reports/microsoft.graph.getEmailAppUsageAppsUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_email_app_usage_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getEmailAppUsageUserCounts.

        Invoke function getEmailAppUsageUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_email_app_usage_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_email_app_usage_user_counts.metadata = {'url': '/reports/microsoft.graph.getEmailAppUsageUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_email_app_usage_user_detail62_ec(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getEmailAppUsageUserDetail.

        Invoke function getEmailAppUsageUserDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_email_app_usage_user_detail62_ec.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_email_app_usage_user_detail62_ec.metadata = {'url': '/reports/microsoft.graph.getEmailAppUsageUserDetail(date={date})'}  # type: ignore

    async def get_email_app_usage_user_detail546_b(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getEmailAppUsageUserDetail.

        Invoke function getEmailAppUsageUserDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_email_app_usage_user_detail546_b.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_email_app_usage_user_detail546_b.metadata = {'url': '/reports/microsoft.graph.getEmailAppUsageUserDetail(period=\'{period}\')'}  # type: ignore

    async def get_email_app_usage_versions_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getEmailAppUsageVersionsUserCounts.

        Invoke function getEmailAppUsageVersionsUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_email_app_usage_versions_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_email_app_usage_versions_user_counts.metadata = {'url': '/reports/microsoft.graph.getEmailAppUsageVersionsUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_mailbox_usage_detail(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getMailboxUsageDetail.

        Invoke function getMailboxUsageDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_mailbox_usage_detail.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mailbox_usage_detail.metadata = {'url': '/reports/microsoft.graph.getMailboxUsageDetail(period=\'{period}\')'}  # type: ignore

    async def get_mailbox_usage_mailbox_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getMailboxUsageMailboxCounts.

        Invoke function getMailboxUsageMailboxCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_mailbox_usage_mailbox_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mailbox_usage_mailbox_counts.metadata = {'url': '/reports/microsoft.graph.getMailboxUsageMailboxCounts(period=\'{period}\')'}  # type: ignore

    async def get_mailbox_usage_quota_status_mailbox_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getMailboxUsageQuotaStatusMailboxCounts.

        Invoke function getMailboxUsageQuotaStatusMailboxCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_mailbox_usage_quota_status_mailbox_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mailbox_usage_quota_status_mailbox_counts.metadata = {'url': '/reports/microsoft.graph.getMailboxUsageQuotaStatusMailboxCounts(period=\'{period}\')'}  # type: ignore

    async def get_mailbox_usage_storage(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getMailboxUsageStorage.

        Invoke function getMailboxUsageStorage.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_mailbox_usage_storage.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mailbox_usage_storage.metadata = {'url': '/reports/microsoft.graph.getMailboxUsageStorage(period=\'{period}\')'}  # type: ignore

    async def get_office365_activation_counts(
        self,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOffice365ActivationCounts.

        Invoke function getOffice365ActivationCounts.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_office365_activation_counts.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_office365_activation_counts.metadata = {'url': '/reports/microsoft.graph.getOffice365ActivationCounts()'}  # type: ignore

    async def get_office365_activations_user_counts(
        self,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOffice365ActivationsUserCounts.

        Invoke function getOffice365ActivationsUserCounts.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_office365_activations_user_counts.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_office365_activations_user_counts.metadata = {'url': '/reports/microsoft.graph.getOffice365ActivationsUserCounts()'}  # type: ignore

    async def get_office365_activations_user_detail(
        self,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOffice365ActivationsUserDetail.

        Invoke function getOffice365ActivationsUserDetail.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_office365_activations_user_detail.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_office365_activations_user_detail.metadata = {'url': '/reports/microsoft.graph.getOffice365ActivationsUserDetail()'}  # type: ignore

    async def get_office365_active_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOffice365ActiveUserCounts.

        Invoke function getOffice365ActiveUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_office365_active_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_office365_active_user_counts.metadata = {'url': '/reports/microsoft.graph.getOffice365ActiveUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_office365_active_user_detail_d389(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOffice365ActiveUserDetail.

        Invoke function getOffice365ActiveUserDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_office365_active_user_detail_d389.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_office365_active_user_detail_d389.metadata = {'url': '/reports/microsoft.graph.getOffice365ActiveUserDetail(date={date})'}  # type: ignore

    async def get_office365_active_user_detail68_ad(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOffice365ActiveUserDetail.

        Invoke function getOffice365ActiveUserDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_office365_active_user_detail68_ad.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_office365_active_user_detail68_ad.metadata = {'url': '/reports/microsoft.graph.getOffice365ActiveUserDetail(period=\'{period}\')'}  # type: ignore

    async def get_office365_groups_activity_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOffice365GroupsActivityCounts.

        Invoke function getOffice365GroupsActivityCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_office365_groups_activity_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_office365_groups_activity_counts.metadata = {'url': '/reports/microsoft.graph.getOffice365GroupsActivityCounts(period=\'{period}\')'}  # type: ignore

    async def get_office365_groups_activity_detail81_cc(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOffice365GroupsActivityDetail.

        Invoke function getOffice365GroupsActivityDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_office365_groups_activity_detail81_cc.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_office365_groups_activity_detail81_cc.metadata = {'url': '/reports/microsoft.graph.getOffice365GroupsActivityDetail(date={date})'}  # type: ignore

    async def get_office365_groups_activity_detail38_f6(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOffice365GroupsActivityDetail.

        Invoke function getOffice365GroupsActivityDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_office365_groups_activity_detail38_f6.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_office365_groups_activity_detail38_f6.metadata = {'url': '/reports/microsoft.graph.getOffice365GroupsActivityDetail(period=\'{period}\')'}  # type: ignore

    async def get_office365_groups_activity_file_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOffice365GroupsActivityFileCounts.

        Invoke function getOffice365GroupsActivityFileCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_office365_groups_activity_file_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_office365_groups_activity_file_counts.metadata = {'url': '/reports/microsoft.graph.getOffice365GroupsActivityFileCounts(period=\'{period}\')'}  # type: ignore

    async def get_office365_groups_activity_group_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOffice365GroupsActivityGroupCounts.

        Invoke function getOffice365GroupsActivityGroupCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_office365_groups_activity_group_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_office365_groups_activity_group_counts.metadata = {'url': '/reports/microsoft.graph.getOffice365GroupsActivityGroupCounts(period=\'{period}\')'}  # type: ignore

    async def get_office365_groups_activity_storage(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOffice365GroupsActivityStorage.

        Invoke function getOffice365GroupsActivityStorage.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_office365_groups_activity_storage.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_office365_groups_activity_storage.metadata = {'url': '/reports/microsoft.graph.getOffice365GroupsActivityStorage(period=\'{period}\')'}  # type: ignore

    async def get_office365_services_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOffice365ServicesUserCounts.

        Invoke function getOffice365ServicesUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_office365_services_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_office365_services_user_counts.metadata = {'url': '/reports/microsoft.graph.getOffice365ServicesUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_one_drive_activity_file_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOneDriveActivityFileCounts.

        Invoke function getOneDriveActivityFileCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_one_drive_activity_file_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_one_drive_activity_file_counts.metadata = {'url': '/reports/microsoft.graph.getOneDriveActivityFileCounts(period=\'{period}\')'}  # type: ignore

    async def get_one_drive_activity_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOneDriveActivityUserCounts.

        Invoke function getOneDriveActivityUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_one_drive_activity_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_one_drive_activity_user_counts.metadata = {'url': '/reports/microsoft.graph.getOneDriveActivityUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_one_drive_activity_user_detail05_f1(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOneDriveActivityUserDetail.

        Invoke function getOneDriveActivityUserDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_one_drive_activity_user_detail05_f1.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_one_drive_activity_user_detail05_f1.metadata = {'url': '/reports/microsoft.graph.getOneDriveActivityUserDetail(date={date})'}  # type: ignore

    async def get_one_drive_activity_user_detail_c424(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOneDriveActivityUserDetail.

        Invoke function getOneDriveActivityUserDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_one_drive_activity_user_detail_c424.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_one_drive_activity_user_detail_c424.metadata = {'url': '/reports/microsoft.graph.getOneDriveActivityUserDetail(period=\'{period}\')'}  # type: ignore

    async def get_one_drive_usage_account_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOneDriveUsageAccountCounts.

        Invoke function getOneDriveUsageAccountCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_one_drive_usage_account_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_one_drive_usage_account_counts.metadata = {'url': '/reports/microsoft.graph.getOneDriveUsageAccountCounts(period=\'{period}\')'}  # type: ignore

    async def get_one_drive_usage_account_detail_e827(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOneDriveUsageAccountDetail.

        Invoke function getOneDriveUsageAccountDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_one_drive_usage_account_detail_e827.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_one_drive_usage_account_detail_e827.metadata = {'url': '/reports/microsoft.graph.getOneDriveUsageAccountDetail(date={date})'}  # type: ignore

    async def get_one_drive_usage_account_detail_dd7_f(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOneDriveUsageAccountDetail.

        Invoke function getOneDriveUsageAccountDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_one_drive_usage_account_detail_dd7_f.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_one_drive_usage_account_detail_dd7_f.metadata = {'url': '/reports/microsoft.graph.getOneDriveUsageAccountDetail(period=\'{period}\')'}  # type: ignore

    async def get_one_drive_usage_file_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOneDriveUsageFileCounts.

        Invoke function getOneDriveUsageFileCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_one_drive_usage_file_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_one_drive_usage_file_counts.metadata = {'url': '/reports/microsoft.graph.getOneDriveUsageFileCounts(period=\'{period}\')'}  # type: ignore

    async def get_one_drive_usage_storage(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getOneDriveUsageStorage.

        Invoke function getOneDriveUsageStorage.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_one_drive_usage_storage.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_one_drive_usage_storage.metadata = {'url': '/reports/microsoft.graph.getOneDriveUsageStorage(period=\'{period}\')'}  # type: ignore

    async def get_share_point_activity_file_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSharePointActivityFileCounts.

        Invoke function getSharePointActivityFileCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_share_point_activity_file_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_share_point_activity_file_counts.metadata = {'url': '/reports/microsoft.graph.getSharePointActivityFileCounts(period=\'{period}\')'}  # type: ignore

    async def get_share_point_activity_pages(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSharePointActivityPages.

        Invoke function getSharePointActivityPages.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_share_point_activity_pages.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_share_point_activity_pages.metadata = {'url': '/reports/microsoft.graph.getSharePointActivityPages(period=\'{period}\')'}  # type: ignore

    async def get_share_point_activity_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSharePointActivityUserCounts.

        Invoke function getSharePointActivityUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_share_point_activity_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_share_point_activity_user_counts.metadata = {'url': '/reports/microsoft.graph.getSharePointActivityUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_share_point_activity_user_detail_f3_be(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSharePointActivityUserDetail.

        Invoke function getSharePointActivityUserDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_share_point_activity_user_detail_f3_be.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_share_point_activity_user_detail_f3_be.metadata = {'url': '/reports/microsoft.graph.getSharePointActivityUserDetail(date={date})'}  # type: ignore

    async def get_share_point_activity_user_detail_b778(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSharePointActivityUserDetail.

        Invoke function getSharePointActivityUserDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_share_point_activity_user_detail_b778.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_share_point_activity_user_detail_b778.metadata = {'url': '/reports/microsoft.graph.getSharePointActivityUserDetail(period=\'{period}\')'}  # type: ignore

    async def get_share_point_site_usage_detail_d27_a(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSharePointSiteUsageDetail.

        Invoke function getSharePointSiteUsageDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_share_point_site_usage_detail_d27_a.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_share_point_site_usage_detail_d27_a.metadata = {'url': '/reports/microsoft.graph.getSharePointSiteUsageDetail(date={date})'}  # type: ignore

    async def get_share_point_site_usage_detail204_b(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSharePointSiteUsageDetail.

        Invoke function getSharePointSiteUsageDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_share_point_site_usage_detail204_b.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_share_point_site_usage_detail204_b.metadata = {'url': '/reports/microsoft.graph.getSharePointSiteUsageDetail(period=\'{period}\')'}  # type: ignore

    async def get_share_point_site_usage_file_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSharePointSiteUsageFileCounts.

        Invoke function getSharePointSiteUsageFileCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_share_point_site_usage_file_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_share_point_site_usage_file_counts.metadata = {'url': '/reports/microsoft.graph.getSharePointSiteUsageFileCounts(period=\'{period}\')'}  # type: ignore

    async def get_share_point_site_usage_pages(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSharePointSiteUsagePages.

        Invoke function getSharePointSiteUsagePages.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_share_point_site_usage_pages.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_share_point_site_usage_pages.metadata = {'url': '/reports/microsoft.graph.getSharePointSiteUsagePages(period=\'{period}\')'}  # type: ignore

    async def get_share_point_site_usage_site_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSharePointSiteUsageSiteCounts.

        Invoke function getSharePointSiteUsageSiteCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_share_point_site_usage_site_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_share_point_site_usage_site_counts.metadata = {'url': '/reports/microsoft.graph.getSharePointSiteUsageSiteCounts(period=\'{period}\')'}  # type: ignore

    async def get_share_point_site_usage_storage(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSharePointSiteUsageStorage.

        Invoke function getSharePointSiteUsageStorage.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_share_point_site_usage_storage.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_share_point_site_usage_storage.metadata = {'url': '/reports/microsoft.graph.getSharePointSiteUsageStorage(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_activity_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessActivityCounts.

        Invoke function getSkypeForBusinessActivityCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_activity_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_activity_counts.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessActivityCounts(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_activity_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessActivityUserCounts.

        Invoke function getSkypeForBusinessActivityUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_activity_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_activity_user_counts.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessActivityUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_activity_user_detail_e4_c9(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessActivityUserDetail.

        Invoke function getSkypeForBusinessActivityUserDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_activity_user_detail_e4_c9.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_activity_user_detail_e4_c9.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessActivityUserDetail(date={date})'}  # type: ignore

    async def get_skype_for_business_activity_user_detail744_e(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessActivityUserDetail.

        Invoke function getSkypeForBusinessActivityUserDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_activity_user_detail744_e.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_activity_user_detail744_e.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessActivityUserDetail(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_device_usage_distribution_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessDeviceUsageDistributionUserCounts.

        Invoke function getSkypeForBusinessDeviceUsageDistributionUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_device_usage_distribution_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_device_usage_distribution_user_counts.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessDeviceUsageDistributionUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_device_usage_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessDeviceUsageUserCounts.

        Invoke function getSkypeForBusinessDeviceUsageUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_device_usage_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_device_usage_user_counts.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessDeviceUsageUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_device_usage_user_detail_a692(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessDeviceUsageUserDetail.

        Invoke function getSkypeForBusinessDeviceUsageUserDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_device_usage_user_detail_a692.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_device_usage_user_detail_a692.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessDeviceUsageUserDetail(date={date})'}  # type: ignore

    async def get_skype_for_business_device_usage_user_detail_e753(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessDeviceUsageUserDetail.

        Invoke function getSkypeForBusinessDeviceUsageUserDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_device_usage_user_detail_e753.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_device_usage_user_detail_e753.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessDeviceUsageUserDetail(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_organizer_activity_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessOrganizerActivityCounts.

        Invoke function getSkypeForBusinessOrganizerActivityCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_organizer_activity_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_organizer_activity_counts.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessOrganizerActivityCounts(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_organizer_activity_minute_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessOrganizerActivityMinuteCounts.

        Invoke function getSkypeForBusinessOrganizerActivityMinuteCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_organizer_activity_minute_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_organizer_activity_minute_counts.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessOrganizerActivityMinuteCounts(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_organizer_activity_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessOrganizerActivityUserCounts.

        Invoke function getSkypeForBusinessOrganizerActivityUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_organizer_activity_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_organizer_activity_user_counts.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessOrganizerActivityUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_participant_activity_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessParticipantActivityCounts.

        Invoke function getSkypeForBusinessParticipantActivityCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_participant_activity_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_participant_activity_counts.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessParticipantActivityCounts(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_participant_activity_minute_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessParticipantActivityMinuteCounts.

        Invoke function getSkypeForBusinessParticipantActivityMinuteCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_participant_activity_minute_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_participant_activity_minute_counts.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessParticipantActivityMinuteCounts(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_participant_activity_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessParticipantActivityUserCounts.

        Invoke function getSkypeForBusinessParticipantActivityUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_participant_activity_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_participant_activity_user_counts.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessParticipantActivityUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_peer_to_peer_activity_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessPeerToPeerActivityCounts.

        Invoke function getSkypeForBusinessPeerToPeerActivityCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_peer_to_peer_activity_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_peer_to_peer_activity_counts.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessPeerToPeerActivityCounts(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_peer_to_peer_activity_minute_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessPeerToPeerActivityMinuteCounts.

        Invoke function getSkypeForBusinessPeerToPeerActivityMinuteCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_peer_to_peer_activity_minute_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_peer_to_peer_activity_minute_counts.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessPeerToPeerActivityMinuteCounts(period=\'{period}\')'}  # type: ignore

    async def get_skype_for_business_peer_to_peer_activity_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getSkypeForBusinessPeerToPeerActivityUserCounts.

        Invoke function getSkypeForBusinessPeerToPeerActivityUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_skype_for_business_peer_to_peer_activity_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_skype_for_business_peer_to_peer_activity_user_counts.metadata = {'url': '/reports/microsoft.graph.getSkypeForBusinessPeerToPeerActivityUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_teams_device_usage_distribution_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getTeamsDeviceUsageDistributionUserCounts.

        Invoke function getTeamsDeviceUsageDistributionUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_teams_device_usage_distribution_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_teams_device_usage_distribution_user_counts.metadata = {'url': '/reports/microsoft.graph.getTeamsDeviceUsageDistributionUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_teams_device_usage_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getTeamsDeviceUsageUserCounts.

        Invoke function getTeamsDeviceUsageUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_teams_device_usage_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_teams_device_usage_user_counts.metadata = {'url': '/reports/microsoft.graph.getTeamsDeviceUsageUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_teams_device_usage_user_detail7148(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getTeamsDeviceUsageUserDetail.

        Invoke function getTeamsDeviceUsageUserDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_teams_device_usage_user_detail7148.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_teams_device_usage_user_detail7148.metadata = {'url': '/reports/microsoft.graph.getTeamsDeviceUsageUserDetail(date={date})'}  # type: ignore

    async def get_teams_device_usage_user_detail7565(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getTeamsDeviceUsageUserDetail.

        Invoke function getTeamsDeviceUsageUserDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_teams_device_usage_user_detail7565.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_teams_device_usage_user_detail7565.metadata = {'url': '/reports/microsoft.graph.getTeamsDeviceUsageUserDetail(period=\'{period}\')'}  # type: ignore

    async def get_teams_user_activity_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getTeamsUserActivityCounts.

        Invoke function getTeamsUserActivityCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_teams_user_activity_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_teams_user_activity_counts.metadata = {'url': '/reports/microsoft.graph.getTeamsUserActivityCounts(period=\'{period}\')'}  # type: ignore

    async def get_teams_user_activity_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getTeamsUserActivityUserCounts.

        Invoke function getTeamsUserActivityUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_teams_user_activity_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_teams_user_activity_user_counts.metadata = {'url': '/reports/microsoft.graph.getTeamsUserActivityUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_teams_user_activity_user_detail_a3_f1(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getTeamsUserActivityUserDetail.

        Invoke function getTeamsUserActivityUserDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_teams_user_activity_user_detail_a3_f1.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_teams_user_activity_user_detail_a3_f1.metadata = {'url': '/reports/microsoft.graph.getTeamsUserActivityUserDetail(date={date})'}  # type: ignore

    async def get_teams_user_activity_user_detail_eb13(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getTeamsUserActivityUserDetail.

        Invoke function getTeamsUserActivityUserDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_teams_user_activity_user_detail_eb13.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_teams_user_activity_user_detail_eb13.metadata = {'url': '/reports/microsoft.graph.getTeamsUserActivityUserDetail(period=\'{period}\')'}  # type: ignore

    async def get_yammer_activity_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getYammerActivityCounts.

        Invoke function getYammerActivityCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_yammer_activity_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_yammer_activity_counts.metadata = {'url': '/reports/microsoft.graph.getYammerActivityCounts(period=\'{period}\')'}  # type: ignore

    async def get_yammer_activity_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getYammerActivityUserCounts.

        Invoke function getYammerActivityUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_yammer_activity_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_yammer_activity_user_counts.metadata = {'url': '/reports/microsoft.graph.getYammerActivityUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_yammer_activity_user_detail_ac30(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getYammerActivityUserDetail.

        Invoke function getYammerActivityUserDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_yammer_activity_user_detail_ac30.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_yammer_activity_user_detail_ac30.metadata = {'url': '/reports/microsoft.graph.getYammerActivityUserDetail(date={date})'}  # type: ignore

    async def get_yammer_activity_user_detail15_a5(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getYammerActivityUserDetail.

        Invoke function getYammerActivityUserDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_yammer_activity_user_detail15_a5.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_yammer_activity_user_detail15_a5.metadata = {'url': '/reports/microsoft.graph.getYammerActivityUserDetail(period=\'{period}\')'}  # type: ignore

    async def get_yammer_device_usage_distribution_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getYammerDeviceUsageDistributionUserCounts.

        Invoke function getYammerDeviceUsageDistributionUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_yammer_device_usage_distribution_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_yammer_device_usage_distribution_user_counts.metadata = {'url': '/reports/microsoft.graph.getYammerDeviceUsageDistributionUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_yammer_device_usage_user_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getYammerDeviceUsageUserCounts.

        Invoke function getYammerDeviceUsageUserCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_yammer_device_usage_user_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_yammer_device_usage_user_counts.metadata = {'url': '/reports/microsoft.graph.getYammerDeviceUsageUserCounts(period=\'{period}\')'}  # type: ignore

    async def get_yammer_device_usage_user_detail_d0_ac(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getYammerDeviceUsageUserDetail.

        Invoke function getYammerDeviceUsageUserDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_yammer_device_usage_user_detail_d0_ac.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_yammer_device_usage_user_detail_d0_ac.metadata = {'url': '/reports/microsoft.graph.getYammerDeviceUsageUserDetail(date={date})'}  # type: ignore

    async def get_yammer_device_usage_user_detail_cfad(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getYammerDeviceUsageUserDetail.

        Invoke function getYammerDeviceUsageUserDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_yammer_device_usage_user_detail_cfad.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_yammer_device_usage_user_detail_cfad.metadata = {'url': '/reports/microsoft.graph.getYammerDeviceUsageUserDetail(period=\'{period}\')'}  # type: ignore

    async def get_yammer_groups_activity_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getYammerGroupsActivityCounts.

        Invoke function getYammerGroupsActivityCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_yammer_groups_activity_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_yammer_groups_activity_counts.metadata = {'url': '/reports/microsoft.graph.getYammerGroupsActivityCounts(period=\'{period}\')'}  # type: ignore

    async def get_yammer_groups_activity_detail_da9_a(
        self,
        date: datetime.date,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getYammerGroupsActivityDetail.

        Invoke function getYammerGroupsActivityDetail.

        :param date:
        :type date: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_yammer_groups_activity_detail_da9_a.metadata['url']  # type: ignore
        path_format_arguments = {
            'date': self._serialize.url("date", date, 'date'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_yammer_groups_activity_detail_da9_a.metadata = {'url': '/reports/microsoft.graph.getYammerGroupsActivityDetail(date={date})'}  # type: ignore

    async def get_yammer_groups_activity_detail0_d7_d(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getYammerGroupsActivityDetail.

        Invoke function getYammerGroupsActivityDetail.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_yammer_groups_activity_detail0_d7_d.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_yammer_groups_activity_detail0_d7_d.metadata = {'url': '/reports/microsoft.graph.getYammerGroupsActivityDetail(period=\'{period}\')'}  # type: ignore

    async def get_yammer_groups_activity_group_counts(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function getYammerGroupsActivityGroupCounts.

        Invoke function getYammerGroupsActivityGroupCounts.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_yammer_groups_activity_group_counts.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_yammer_groups_activity_group_counts.metadata = {'url': '/reports/microsoft.graph.getYammerGroupsActivityGroupCounts(period=\'{period}\')'}  # type: ignore

    async def managed_device_enrollment_failure_details027_e(
        self,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function managedDeviceEnrollmentFailureDetails.

        Invoke function managedDeviceEnrollmentFailureDetails.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.managed_device_enrollment_failure_details027_e.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    managed_device_enrollment_failure_details027_e.metadata = {'url': '/reports/microsoft.graph.managedDeviceEnrollmentFailureDetails()'}  # type: ignore

    async def managed_device_enrollment_failure_details2_b3_d(
        self,
        skip: int,
        top: int,
        filter: str,
        skip_token: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function managedDeviceEnrollmentFailureDetails.

        Invoke function managedDeviceEnrollmentFailureDetails.

        :param skip:
        :type skip: int
        :param top:
        :type top: int
        :param filter:
        :type filter: str
        :param skip_token:
        :type skip_token: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.managed_device_enrollment_failure_details2_b3_d.metadata['url']  # type: ignore
        path_format_arguments = {
            'skip': self._serialize.url("skip", skip, 'int', maximum=2147483647, minimum=-2147483648),
            'top': self._serialize.url("top", top, 'int', maximum=2147483647, minimum=-2147483648),
            'filter': self._serialize.url("filter", filter, 'str'),
            'skipToken': self._serialize.url("skip_token", skip_token, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    managed_device_enrollment_failure_details2_b3_d.metadata = {'url': '/reports/microsoft.graph.managedDeviceEnrollmentFailureDetails(skip={skip},top={top},filter=\'{filter}\',skipToken=\'{skipToken}\')'}  # type: ignore

    async def managed_device_enrollment_top_failures4669(
        self,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function managedDeviceEnrollmentTopFailures.

        Invoke function managedDeviceEnrollmentTopFailures.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.managed_device_enrollment_top_failures4669.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    managed_device_enrollment_top_failures4669.metadata = {'url': '/reports/microsoft.graph.managedDeviceEnrollmentTopFailures()'}  # type: ignore

    async def managed_device_enrollment_top_failures_afd1(
        self,
        period: str,
        **kwargs
    ) -> "models.MicrosoftGraphReport":
        """Invoke function managedDeviceEnrollmentTopFailures.

        Invoke function managedDeviceEnrollmentTopFailures.

        :param period:
        :type period: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphReport, or the result of cls(response)
        :rtype: ~reports.models.MicrosoftGraphReport
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphReport"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.managed_device_enrollment_top_failures_afd1.metadata['url']  # type: ignore
        path_format_arguments = {
            'period': self._serialize.url("period", period, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphReport', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    managed_device_enrollment_top_failures_afd1.metadata = {'url': '/reports/microsoft.graph.managedDeviceEnrollmentTopFailures(period=\'{period}\')'}  # type: ignore
