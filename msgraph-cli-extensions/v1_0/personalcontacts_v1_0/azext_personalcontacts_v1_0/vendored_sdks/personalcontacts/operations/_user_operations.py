# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class UserOperations(object):
    """UserOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~personal_contacts.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_contact_folder(
        self,
        user_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Get6ItemsItem"]]]
        select=None,  # type: Optional[List[Union[str, "models.Get7ItemsItem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get8ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfContactFolder"]
        """Get contactFolders from users.

        Get contactFolders from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~personal_contacts.models.Get6ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~personal_contacts.models.Get7ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~personal_contacts.models.Get8ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfContactFolder or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~personal_contacts.models.CollectionOfContactFolder]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfContactFolder"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_contact_folder.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfContactFolder', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_contact_folder.metadata = {'url': '/users/{user-id}/contactFolders'}  # type: ignore

    def create_contact_folder(
        self,
        user_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        parent_folder_id=None,  # type: Optional[str]
        child_folders=None,  # type: Optional[List["models.MicrosoftGraphContactFolder"]]
        contacts=None,  # type: Optional[List["models.MicrosoftGraphContact"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphContactFolder"
        """Create new navigation property to contactFolders for users.

        Create new navigation property to contactFolders for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: The folder's display name.
        :type display_name: str
        :param parent_folder_id: The ID of the folder's parent folder.
        :type parent_folder_id: str
        :param child_folders: The collection of child folders in the folder. Navigation property. Read-
         only. Nullable.
        :type child_folders: list[~personal_contacts.models.MicrosoftGraphContactFolder]
        :param contacts: The contacts in the folder. Navigation property. Read-only. Nullable.
        :type contacts: list[~personal_contacts.models.MicrosoftGraphContact]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the contactFolder. Read-only. Nullable.
        :type multi_value_extended_properties: list[~personal_contacts.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the contactFolder. Read-only. Nullable.
        :type single_value_extended_properties: list[~personal_contacts.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphContactFolder, or the result of cls(response)
        :rtype: ~personal_contacts.models.MicrosoftGraphContactFolder
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphContactFolder"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphContactFolder(id=id, display_name=display_name, parent_folder_id=parent_folder_id, child_folders=child_folders, contacts=contacts, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_contact_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphContactFolder')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphContactFolder', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_contact_folder.metadata = {'url': '/users/{user-id}/contactFolders'}  # type: ignore

    def get_contact_folder(
        self,
        user_id,  # type: str
        contact_folder_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Get2ItemsItem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get3ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphContactFolder"
        """Get contactFolders from users.

        Get contactFolders from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param contact_folder_id: key: id of contactFolder.
        :type contact_folder_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~personal_contacts.models.Get2ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~personal_contacts.models.Get3ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphContactFolder, or the result of cls(response)
        :rtype: ~personal_contacts.models.MicrosoftGraphContactFolder
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphContactFolder"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_contact_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphContactFolder', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_contact_folder.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}'}  # type: ignore

    def update_contact_folder(
        self,
        user_id,  # type: str
        contact_folder_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        parent_folder_id=None,  # type: Optional[str]
        child_folders=None,  # type: Optional[List["models.MicrosoftGraphContactFolder"]]
        contacts=None,  # type: Optional[List["models.MicrosoftGraphContact"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property contactFolders in users.

        Update the navigation property contactFolders in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param contact_folder_id: key: id of contactFolder.
        :type contact_folder_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: The folder's display name.
        :type display_name: str
        :param parent_folder_id: The ID of the folder's parent folder.
        :type parent_folder_id: str
        :param child_folders: The collection of child folders in the folder. Navigation property. Read-
         only. Nullable.
        :type child_folders: list[~personal_contacts.models.MicrosoftGraphContactFolder]
        :param contacts: The contacts in the folder. Navigation property. Read-only. Nullable.
        :type contacts: list[~personal_contacts.models.MicrosoftGraphContact]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the contactFolder. Read-only. Nullable.
        :type multi_value_extended_properties: list[~personal_contacts.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the contactFolder. Read-only. Nullable.
        :type single_value_extended_properties: list[~personal_contacts.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphContactFolder(id=id, display_name=display_name, parent_folder_id=parent_folder_id, child_folders=child_folders, contacts=contacts, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_contact_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphContactFolder')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_contact_folder.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}'}  # type: ignore

    def delete_contact_folder(
        self,
        user_id,  # type: str
        contact_folder_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property contactFolders for users.

        Delete navigation property contactFolders for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param contact_folder_id: key: id of contactFolder.
        :type contact_folder_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_contact_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_contact_folder.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}'}  # type: ignore

    def list_contact(
        self,
        user_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum29"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum30"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum31"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfContact0"]
        """Get contacts from users.

        Get contacts from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~personal_contacts.models.Enum29]
        :param select: Select properties to be returned.
        :type select: list[str or ~personal_contacts.models.Enum30]
        :param expand: Expand related entities.
        :type expand: list[str or ~personal_contacts.models.Enum31]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfContact0 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~personal_contacts.models.CollectionOfContact0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfContact0"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_contact.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfContact0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_contact.metadata = {'url': '/users/{user-id}/contacts'}  # type: ignore

    def create_contact(
        self,
        user_id,  # type: str
        id=None,  # type: Optional[str]
        categories=None,  # type: Optional[List[str]]
        change_key=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        assistant_name=None,  # type: Optional[str]
        birthday=None,  # type: Optional[datetime.datetime]
        business_address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        business_home_page=None,  # type: Optional[str]
        business_phones=None,  # type: Optional[List[str]]
        children=None,  # type: Optional[List[str]]
        company_name=None,  # type: Optional[str]
        department=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        email_addresses=None,  # type: Optional[List["models.MicrosoftGraphEmailAddress"]]
        file_as=None,  # type: Optional[str]
        generation=None,  # type: Optional[str]
        given_name=None,  # type: Optional[str]
        home_address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        home_phones=None,  # type: Optional[List[str]]
        im_addresses=None,  # type: Optional[List[str]]
        initials=None,  # type: Optional[str]
        job_title=None,  # type: Optional[str]
        manager=None,  # type: Optional[str]
        middle_name=None,  # type: Optional[str]
        mobile_phone=None,  # type: Optional[str]
        nick_name=None,  # type: Optional[str]
        office_location=None,  # type: Optional[str]
        other_address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        parent_folder_id=None,  # type: Optional[str]
        personal_notes=None,  # type: Optional[str]
        profession=None,  # type: Optional[str]
        spouse_name=None,  # type: Optional[str]
        surname=None,  # type: Optional[str]
        title=None,  # type: Optional[str]
        yomi_company_name=None,  # type: Optional[str]
        yomi_given_name=None,  # type: Optional[str]
        yomi_surname=None,  # type: Optional[str]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        photo=None,  # type: Optional["models.MicrosoftGraphProfilePhoto"]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphContact"
        """Create new navigation property to contacts for users.

        Create new navigation property to contacts for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param assistant_name: The name of the contact's assistant.
        :type assistant_name: str
        :param birthday: The contact's birthday. The Timestamp type represents date and time
         information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
         1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type birthday: ~datetime.datetime
        :param business_address: physicalAddress.
        :type business_address: ~personal_contacts.models.MicrosoftGraphPhysicalAddress
        :param business_home_page: The business home page of the contact.
        :type business_home_page: str
        :param business_phones: The contact's business phone numbers.
        :type business_phones: list[str]
        :param children: The names of the contact's children.
        :type children: list[str]
        :param company_name: The name of the contact's company.
        :type company_name: str
        :param department: The contact's department.
        :type department: str
        :param display_name: The contact's display name. You can specify the display name in a create
         or update operation. Note that later updates to other properties may cause an automatically
         generated value to overwrite the displayName value you have specified. To preserve a pre-
         existing value, always include it as displayName in an update operation.
        :type display_name: str
        :param email_addresses: The contact's email addresses.
        :type email_addresses: list[~personal_contacts.models.MicrosoftGraphEmailAddress]
        :param file_as: The name the contact is filed under.
        :type file_as: str
        :param generation: The contact's generation.
        :type generation: str
        :param given_name: The contact's given name.
        :type given_name: str
        :param home_address: physicalAddress.
        :type home_address: ~personal_contacts.models.MicrosoftGraphPhysicalAddress
        :param home_phones: The contact's home phone numbers.
        :type home_phones: list[str]
        :param im_addresses: The contact's instant messaging (IM) addresses.
        :type im_addresses: list[str]
        :param initials: The contact's initials.
        :type initials: str
        :param job_title: The contact’s job title.
        :type job_title: str
        :param manager: The name of the contact's manager.
        :type manager: str
        :param middle_name: The contact's middle name.
        :type middle_name: str
        :param mobile_phone: The contact's mobile phone number.
        :type mobile_phone: str
        :param nick_name: The contact's nickname.
        :type nick_name: str
        :param office_location: The location of the contact's office.
        :type office_location: str
        :param other_address: physicalAddress.
        :type other_address: ~personal_contacts.models.MicrosoftGraphPhysicalAddress
        :param parent_folder_id: The ID of the contact's parent folder.
        :type parent_folder_id: str
        :param personal_notes: The user's notes about the contact.
        :type personal_notes: str
        :param profession: The contact's profession.
        :type profession: str
        :param spouse_name: The name of the contact's spouse/partner.
        :type spouse_name: str
        :param surname: The contact's surname.
        :type surname: str
        :param title: The contact's title.
        :type title: str
        :param yomi_company_name: The phonetic Japanese company name of the contact.
        :type yomi_company_name: str
        :param yomi_given_name: The phonetic Japanese given name (first name) of the contact.
        :type yomi_given_name: str
        :param yomi_surname: The phonetic Japanese surname (last name)  of the contact.
        :type yomi_surname: str
        :param extensions: The collection of open extensions defined for the contact. Read-only.
         Nullable.
        :type extensions: list[~personal_contacts.models.MicrosoftGraphExtension]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the contact. Read-only. Nullable.
        :type multi_value_extended_properties: list[~personal_contacts.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param photo: profilePhoto.
        :type photo: ~personal_contacts.models.MicrosoftGraphProfilePhoto
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the contact. Read-only. Nullable.
        :type single_value_extended_properties: list[~personal_contacts.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphContact, or the result of cls(response)
        :rtype: ~personal_contacts.models.MicrosoftGraphContact
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphContact"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphContact(id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, assistant_name=assistant_name, birthday=birthday, business_address=business_address, business_home_page=business_home_page, business_phones=business_phones, children=children, company_name=company_name, department=department, display_name=display_name, email_addresses=email_addresses, file_as=file_as, generation=generation, given_name=given_name, home_address=home_address, home_phones=home_phones, im_addresses=im_addresses, initials=initials, job_title=job_title, manager=manager, middle_name=middle_name, mobile_phone=mobile_phone, nick_name=nick_name, office_location=office_location, other_address=other_address, parent_folder_id=parent_folder_id, personal_notes=personal_notes, profession=profession, spouse_name=spouse_name, surname=surname, title=title, yomi_company_name=yomi_company_name, yomi_given_name=yomi_given_name, yomi_surname=yomi_surname, extensions=extensions, multi_value_extended_properties=multi_value_extended_properties, photo=photo, single_value_extended_properties=single_value_extended_properties)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_contact.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphContact')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphContact', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_contact.metadata = {'url': '/users/{user-id}/contacts'}  # type: ignore

    def get_contact(
        self,
        user_id,  # type: str
        contact_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum32"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum33"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphContact"
        """Get contacts from users.

        Get contacts from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param contact_id: key: id of contact.
        :type contact_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~personal_contacts.models.Enum32]
        :param expand: Expand related entities.
        :type expand: list[str or ~personal_contacts.models.Enum33]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphContact, or the result of cls(response)
        :rtype: ~personal_contacts.models.MicrosoftGraphContact
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphContact"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_contact.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphContact', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_contact.metadata = {'url': '/users/{user-id}/contacts/{contact-id}'}  # type: ignore

    def update_contact(
        self,
        user_id,  # type: str
        contact_id,  # type: str
        id=None,  # type: Optional[str]
        categories=None,  # type: Optional[List[str]]
        change_key=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        assistant_name=None,  # type: Optional[str]
        birthday=None,  # type: Optional[datetime.datetime]
        business_address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        business_home_page=None,  # type: Optional[str]
        business_phones=None,  # type: Optional[List[str]]
        children=None,  # type: Optional[List[str]]
        company_name=None,  # type: Optional[str]
        department=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        email_addresses=None,  # type: Optional[List["models.MicrosoftGraphEmailAddress"]]
        file_as=None,  # type: Optional[str]
        generation=None,  # type: Optional[str]
        given_name=None,  # type: Optional[str]
        home_address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        home_phones=None,  # type: Optional[List[str]]
        im_addresses=None,  # type: Optional[List[str]]
        initials=None,  # type: Optional[str]
        job_title=None,  # type: Optional[str]
        manager=None,  # type: Optional[str]
        middle_name=None,  # type: Optional[str]
        mobile_phone=None,  # type: Optional[str]
        nick_name=None,  # type: Optional[str]
        office_location=None,  # type: Optional[str]
        other_address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        parent_folder_id=None,  # type: Optional[str]
        personal_notes=None,  # type: Optional[str]
        profession=None,  # type: Optional[str]
        spouse_name=None,  # type: Optional[str]
        surname=None,  # type: Optional[str]
        title=None,  # type: Optional[str]
        yomi_company_name=None,  # type: Optional[str]
        yomi_given_name=None,  # type: Optional[str]
        yomi_surname=None,  # type: Optional[str]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        photo=None,  # type: Optional["models.MicrosoftGraphProfilePhoto"]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property contacts in users.

        Update the navigation property contacts in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param contact_id: key: id of contact.
        :type contact_id: str
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param assistant_name: The name of the contact's assistant.
        :type assistant_name: str
        :param birthday: The contact's birthday. The Timestamp type represents date and time
         information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
         1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type birthday: ~datetime.datetime
        :param business_address: physicalAddress.
        :type business_address: ~personal_contacts.models.MicrosoftGraphPhysicalAddress
        :param business_home_page: The business home page of the contact.
        :type business_home_page: str
        :param business_phones: The contact's business phone numbers.
        :type business_phones: list[str]
        :param children: The names of the contact's children.
        :type children: list[str]
        :param company_name: The name of the contact's company.
        :type company_name: str
        :param department: The contact's department.
        :type department: str
        :param display_name: The contact's display name. You can specify the display name in a create
         or update operation. Note that later updates to other properties may cause an automatically
         generated value to overwrite the displayName value you have specified. To preserve a pre-
         existing value, always include it as displayName in an update operation.
        :type display_name: str
        :param email_addresses: The contact's email addresses.
        :type email_addresses: list[~personal_contacts.models.MicrosoftGraphEmailAddress]
        :param file_as: The name the contact is filed under.
        :type file_as: str
        :param generation: The contact's generation.
        :type generation: str
        :param given_name: The contact's given name.
        :type given_name: str
        :param home_address: physicalAddress.
        :type home_address: ~personal_contacts.models.MicrosoftGraphPhysicalAddress
        :param home_phones: The contact's home phone numbers.
        :type home_phones: list[str]
        :param im_addresses: The contact's instant messaging (IM) addresses.
        :type im_addresses: list[str]
        :param initials: The contact's initials.
        :type initials: str
        :param job_title: The contact’s job title.
        :type job_title: str
        :param manager: The name of the contact's manager.
        :type manager: str
        :param middle_name: The contact's middle name.
        :type middle_name: str
        :param mobile_phone: The contact's mobile phone number.
        :type mobile_phone: str
        :param nick_name: The contact's nickname.
        :type nick_name: str
        :param office_location: The location of the contact's office.
        :type office_location: str
        :param other_address: physicalAddress.
        :type other_address: ~personal_contacts.models.MicrosoftGraphPhysicalAddress
        :param parent_folder_id: The ID of the contact's parent folder.
        :type parent_folder_id: str
        :param personal_notes: The user's notes about the contact.
        :type personal_notes: str
        :param profession: The contact's profession.
        :type profession: str
        :param spouse_name: The name of the contact's spouse/partner.
        :type spouse_name: str
        :param surname: The contact's surname.
        :type surname: str
        :param title: The contact's title.
        :type title: str
        :param yomi_company_name: The phonetic Japanese company name of the contact.
        :type yomi_company_name: str
        :param yomi_given_name: The phonetic Japanese given name (first name) of the contact.
        :type yomi_given_name: str
        :param yomi_surname: The phonetic Japanese surname (last name)  of the contact.
        :type yomi_surname: str
        :param extensions: The collection of open extensions defined for the contact. Read-only.
         Nullable.
        :type extensions: list[~personal_contacts.models.MicrosoftGraphExtension]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the contact. Read-only. Nullable.
        :type multi_value_extended_properties: list[~personal_contacts.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param photo: profilePhoto.
        :type photo: ~personal_contacts.models.MicrosoftGraphProfilePhoto
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the contact. Read-only. Nullable.
        :type single_value_extended_properties: list[~personal_contacts.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphContact(id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, assistant_name=assistant_name, birthday=birthday, business_address=business_address, business_home_page=business_home_page, business_phones=business_phones, children=children, company_name=company_name, department=department, display_name=display_name, email_addresses=email_addresses, file_as=file_as, generation=generation, given_name=given_name, home_address=home_address, home_phones=home_phones, im_addresses=im_addresses, initials=initials, job_title=job_title, manager=manager, middle_name=middle_name, mobile_phone=mobile_phone, nick_name=nick_name, office_location=office_location, other_address=other_address, parent_folder_id=parent_folder_id, personal_notes=personal_notes, profession=profession, spouse_name=spouse_name, surname=surname, title=title, yomi_company_name=yomi_company_name, yomi_given_name=yomi_given_name, yomi_surname=yomi_surname, extensions=extensions, multi_value_extended_properties=multi_value_extended_properties, photo=photo, single_value_extended_properties=single_value_extended_properties)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_contact.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphContact')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_contact.metadata = {'url': '/users/{user-id}/contacts/{contact-id}'}  # type: ignore

    def delete_contact(
        self,
        user_id,  # type: str
        contact_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property contacts for users.

        Delete navigation property contacts for users.

        :param user_id: key: id of user.
        :type user_id: str
        :param contact_id: key: id of contact.
        :type contact_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_contact.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_contact.metadata = {'url': '/users/{user-id}/contacts/{contact-id}'}  # type: ignore
