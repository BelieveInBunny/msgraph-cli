# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class collectionofcontact(msrest.serialization.Model):
    """Collection of contact.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.microsoftgraphcontact]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcontact]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphcontact"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofcontact, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofcontact0(msrest.serialization.Model):
    """Collection of contact.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.microsoftgraphcontact]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcontact]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphcontact"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofcontact0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofcontactfolder(msrest.serialization.Model):
    """Collection of contactFolder.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.microsoftgraphcontactfolder]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcontactfolder]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphcontactfolder"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofcontactfolder, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofcontactfolder0(msrest.serialization.Model):
    """Collection of contactFolder.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.microsoftgraphcontactfolder]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcontactfolder]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphcontactfolder"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofcontactfolder0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofextension(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphextension"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofextension, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofextension0(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphextension"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofextension0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofmultivaluelegacyextendedproperty(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphmultivaluelegacyextendedproperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofmultivaluelegacyextendedproperty0(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphmultivaluelegacyextendedproperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofmultivaluelegacyextendedproperty1(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphmultivaluelegacyextendedproperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofmultivaluelegacyextendedproperty1, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsinglevaluelegacyextendedproperty(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsinglevaluelegacyextendedproperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsinglevaluelegacyextendedproperty0(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsinglevaluelegacyextendedproperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty0, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class collectionofsinglevaluelegacyextendedproperty1(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~personal_contacts.models.microsoftgraphsinglevaluelegacyextendedproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["microsoftgraphsinglevaluelegacyextendedproperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(collectionofsinglevaluelegacyextendedproperty1, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class microsoftgraphentity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        id: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphentity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id


class microsoftgraphoutlookitem(microsoftgraphentity):
    """outlookItem.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        categories: Optional[List[str]] = None,
        change_key: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(microsoftgraphoutlookitem, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.categories = categories
        self.change_key = change_key
        self.created_date_time = created_date_time
        self.last_modified_date_time = last_modified_date_time


class microsoftgraphcontact(microsoftgraphoutlookitem):
    """contact.

    :param id: Read-only.
    :type id: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param assistant_name: The name of the contact's assistant.
    :type assistant_name: str
    :param birthday: The contact's birthday. The Timestamp type represents date and time
     information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
     1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type birthday: ~datetime.datetime
    :param business_address: physicalAddress.
    :type business_address: ~personal_contacts.models.microsoftgraphphysicaladdress
    :param business_home_page: The business home page of the contact.
    :type business_home_page: str
    :param business_phones: The contact's business phone numbers.
    :type business_phones: list[str]
    :param children: The names of the contact's children.
    :type children: list[str]
    :param company_name: The name of the contact's company.
    :type company_name: str
    :param department: The contact's department.
    :type department: str
    :param display_name: The contact's display name. You can specify the display name in a create
     or update operation. Note that later updates to other properties may cause an automatically
     generated value to overwrite the displayName value you have specified. To preserve a pre-
     existing value, always include it as displayName in an update operation.
    :type display_name: str
    :param email_addresses: The contact's email addresses.
    :type email_addresses: list[~personal_contacts.models.microsoftgraphemailaddress]
    :param file_as: The name the contact is filed under.
    :type file_as: str
    :param generation: The contact's generation.
    :type generation: str
    :param given_name: The contact's given name.
    :type given_name: str
    :param home_address: physicalAddress.
    :type home_address: ~personal_contacts.models.microsoftgraphphysicaladdress
    :param home_phones: The contact's home phone numbers.
    :type home_phones: list[str]
    :param im_addresses: The contact's instant messaging (IM) addresses.
    :type im_addresses: list[str]
    :param initials: The contact's initials.
    :type initials: str
    :param job_title: The contact’s job title.
    :type job_title: str
    :param manager: The name of the contact's manager.
    :type manager: str
    :param middle_name: The contact's middle name.
    :type middle_name: str
    :param mobile_phone: The contact's mobile phone number.
    :type mobile_phone: str
    :param nick_name: The contact's nickname.
    :type nick_name: str
    :param office_location: The location of the contact's office.
    :type office_location: str
    :param other_address: physicalAddress.
    :type other_address: ~personal_contacts.models.microsoftgraphphysicaladdress
    :param parent_folder_id: The ID of the contact's parent folder.
    :type parent_folder_id: str
    :param personal_notes: The user's notes about the contact.
    :type personal_notes: str
    :param profession: The contact's profession.
    :type profession: str
    :param spouse_name: The name of the contact's spouse/partner.
    :type spouse_name: str
    :param surname: The contact's surname.
    :type surname: str
    :param title: The contact's title.
    :type title: str
    :param yomi_company_name: The phonetic Japanese company name of the contact.
    :type yomi_company_name: str
    :param yomi_given_name: The phonetic Japanese given name (first name) of the contact.
    :type yomi_given_name: str
    :param yomi_surname: The phonetic Japanese surname (last name)  of the contact.
    :type yomi_surname: str
    :param extensions: The collection of open extensions defined for the contact. Read-only.
     Nullable.
    :type extensions: list[~personal_contacts.models.microsoftgraphextension]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the contact. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~personal_contacts.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param photo: profilePhoto.
    :type photo: ~personal_contacts.models.microsoftgraphprofilephoto
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the contact. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~personal_contacts.models.microsoftgraphsinglevaluelegacyextendedproperty]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'assistant_name': {'key': 'assistantName', 'type': 'str'},
        'birthday': {'key': 'birthday', 'type': 'iso-8601'},
        'business_address': {'key': 'businessAddress', 'type': 'microsoftgraphphysicaladdress'},
        'business_home_page': {'key': 'businessHomePage', 'type': 'str'},
        'business_phones': {'key': 'businessPhones', 'type': '[str]'},
        'children': {'key': 'children', 'type': '[str]'},
        'company_name': {'key': 'companyName', 'type': 'str'},
        'department': {'key': 'department', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'email_addresses': {'key': 'emailAddresses', 'type': '[microsoftgraphemailaddress]'},
        'file_as': {'key': 'fileAs', 'type': 'str'},
        'generation': {'key': 'generation', 'type': 'str'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'home_address': {'key': 'homeAddress', 'type': 'microsoftgraphphysicaladdress'},
        'home_phones': {'key': 'homePhones', 'type': '[str]'},
        'im_addresses': {'key': 'imAddresses', 'type': '[str]'},
        'initials': {'key': 'initials', 'type': 'str'},
        'job_title': {'key': 'jobTitle', 'type': 'str'},
        'manager': {'key': 'manager', 'type': 'str'},
        'middle_name': {'key': 'middleName', 'type': 'str'},
        'mobile_phone': {'key': 'mobilePhone', 'type': 'str'},
        'nick_name': {'key': 'nickName', 'type': 'str'},
        'office_location': {'key': 'officeLocation', 'type': 'str'},
        'other_address': {'key': 'otherAddress', 'type': 'microsoftgraphphysicaladdress'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'personal_notes': {'key': 'personalNotes', 'type': 'str'},
        'profession': {'key': 'profession', 'type': 'str'},
        'spouse_name': {'key': 'spouseName', 'type': 'str'},
        'surname': {'key': 'surname', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'yomi_company_name': {'key': 'yomiCompanyName', 'type': 'str'},
        'yomi_given_name': {'key': 'yomiGivenName', 'type': 'str'},
        'yomi_surname': {'key': 'yomiSurname', 'type': 'str'},
        'extensions': {'key': 'extensions', 'type': '[microsoftgraphextension]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'photo': {'key': 'photo', 'type': 'microsoftgraphprofilephoto'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        categories: Optional[List[str]] = None,
        change_key: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        assistant_name: Optional[str] = None,
        birthday: Optional[datetime.datetime] = None,
        business_address: Optional["microsoftgraphphysicaladdress"] = None,
        business_home_page: Optional[str] = None,
        business_phones: Optional[List[str]] = None,
        children: Optional[List[str]] = None,
        company_name: Optional[str] = None,
        department: Optional[str] = None,
        display_name: Optional[str] = None,
        email_addresses: Optional[List["microsoftgraphemailaddress"]] = None,
        file_as: Optional[str] = None,
        generation: Optional[str] = None,
        given_name: Optional[str] = None,
        home_address: Optional["microsoftgraphphysicaladdress"] = None,
        home_phones: Optional[List[str]] = None,
        im_addresses: Optional[List[str]] = None,
        initials: Optional[str] = None,
        job_title: Optional[str] = None,
        manager: Optional[str] = None,
        middle_name: Optional[str] = None,
        mobile_phone: Optional[str] = None,
        nick_name: Optional[str] = None,
        office_location: Optional[str] = None,
        other_address: Optional["microsoftgraphphysicaladdress"] = None,
        parent_folder_id: Optional[str] = None,
        personal_notes: Optional[str] = None,
        profession: Optional[str] = None,
        spouse_name: Optional[str] = None,
        surname: Optional[str] = None,
        title: Optional[str] = None,
        yomi_company_name: Optional[str] = None,
        yomi_given_name: Optional[str] = None,
        yomi_surname: Optional[str] = None,
        extensions: Optional[List["microsoftgraphextension"]] = None,
        multi_value_extended_properties: Optional[List["microsoftgraphmultivaluelegacyextendedproperty"]] = None,
        photo: Optional["microsoftgraphprofilephoto"] = None,
        single_value_extended_properties: Optional[List["microsoftgraphsinglevaluelegacyextendedproperty"]] = None,
        **kwargs
    ):
        super(microsoftgraphcontact, self).__init__(id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, **kwargs)
        self.additional_properties = additional_properties
        self.assistant_name = assistant_name
        self.birthday = birthday
        self.business_address = business_address
        self.business_home_page = business_home_page
        self.business_phones = business_phones
        self.children = children
        self.company_name = company_name
        self.department = department
        self.display_name = display_name
        self.email_addresses = email_addresses
        self.file_as = file_as
        self.generation = generation
        self.given_name = given_name
        self.home_address = home_address
        self.home_phones = home_phones
        self.im_addresses = im_addresses
        self.initials = initials
        self.job_title = job_title
        self.manager = manager
        self.middle_name = middle_name
        self.mobile_phone = mobile_phone
        self.nick_name = nick_name
        self.office_location = office_location
        self.other_address = other_address
        self.parent_folder_id = parent_folder_id
        self.personal_notes = personal_notes
        self.profession = profession
        self.spouse_name = spouse_name
        self.surname = surname
        self.title = title
        self.yomi_company_name = yomi_company_name
        self.yomi_given_name = yomi_given_name
        self.yomi_surname = yomi_surname
        self.extensions = extensions
        self.multi_value_extended_properties = multi_value_extended_properties
        self.photo = photo
        self.single_value_extended_properties = single_value_extended_properties


class microsoftgraphcontactfolder(microsoftgraphentity):
    """contactFolder.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The folder's display name.
    :type display_name: str
    :param parent_folder_id: The ID of the folder's parent folder.
    :type parent_folder_id: str
    :param child_folders: The collection of child folders in the folder. Navigation property. Read-
     only. Nullable.
    :type child_folders: list[~personal_contacts.models.microsoftgraphcontactfolder]
    :param contacts: The contacts in the folder. Navigation property. Read-only. Nullable.
    :type contacts: list[~personal_contacts.models.microsoftgraphcontact]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the contactFolder. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~personal_contacts.models.microsoftgraphmultivaluelegacyextendedproperty]
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the contactFolder. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~personal_contacts.models.microsoftgraphsinglevaluelegacyextendedproperty]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'child_folders': {'key': 'childFolders', 'type': '[microsoftgraphcontactfolder]'},
        'contacts': {'key': 'contacts', 'type': '[microsoftgraphcontact]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[microsoftgraphmultivaluelegacyextendedproperty]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[microsoftgraphsinglevaluelegacyextendedproperty]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        display_name: Optional[str] = None,
        parent_folder_id: Optional[str] = None,
        child_folders: Optional[List["microsoftgraphcontactfolder"]] = None,
        contacts: Optional[List["microsoftgraphcontact"]] = None,
        multi_value_extended_properties: Optional[List["microsoftgraphmultivaluelegacyextendedproperty"]] = None,
        single_value_extended_properties: Optional[List["microsoftgraphsinglevaluelegacyextendedproperty"]] = None,
        **kwargs
    ):
        super(microsoftgraphcontactfolder, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.display_name = display_name
        self.parent_folder_id = parent_folder_id
        self.child_folders = child_folders
        self.contacts = contacts
        self.multi_value_extended_properties = multi_value_extended_properties
        self.single_value_extended_properties = single_value_extended_properties


class microsoftgraphemailaddress(msrest.serialization.Model):
    """emailAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: The email address of the person or entity.
    :type address: str
    :param name: The display name of the person or entity.
    :type name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        address: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphemailaddress, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.address = address
        self.name = name


class microsoftgraphextension(microsoftgraphentity):
    """extension.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(microsoftgraphextension, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties


class microsoftgraphmultivaluelegacyextendedproperty(microsoftgraphentity):
    """multiValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value: A collection of property values.
    :type value: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List[str]] = None,
        **kwargs
    ):
        super(microsoftgraphmultivaluelegacyextendedproperty, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.value = value


class microsoftgraphphysicaladdress(msrest.serialization.Model):
    """physicalAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param city: The city.
    :type city: str
    :param country_or_region: The country or region. It's a free-format string value, for example,
     'United States'.
    :type country_or_region: str
    :param postal_code: The postal code.
    :type postal_code: str
    :param state: The state.
    :type state: str
    :param street: The street.
    :type street: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'city': {'key': 'city', 'type': 'str'},
        'country_or_region': {'key': 'countryOrRegion', 'type': 'str'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'street': {'key': 'street', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        city: Optional[str] = None,
        country_or_region: Optional[str] = None,
        postal_code: Optional[str] = None,
        state: Optional[str] = None,
        street: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphphysicaladdress, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.city = city
        self.country_or_region = country_or_region
        self.postal_code = postal_code
        self.state = state
        self.street = street


class microsoftgraphprofilephoto(microsoftgraphentity):
    """profilePhoto.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param height: The height of the photo. Read-only.
    :type height: int
    :param width: The width of the photo. Read-only.
    :type width: int
    """

    _validation = {
        'height': {'maximum': 2147483647, 'minimum': -2147483648},
        'width': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'height': {'key': 'height', 'type': 'int'},
        'width': {'key': 'width', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        height: Optional[int] = None,
        width: Optional[int] = None,
        **kwargs
    ):
        super(microsoftgraphprofilephoto, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.height = height
        self.width = width


class microsoftgraphsinglevaluelegacyextendedproperty(microsoftgraphentity):
    """singleValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value: A property value.
    :type value: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(microsoftgraphsinglevaluelegacyextendedproperty, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.value = value


class odataerror(msrest.serialization.Model):
    """odataerror.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~personal_contacts.models.odataerrormain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'odataerrormain'},
    }

    def __init__(
        self,
        *,
        error: "odataerrormain",
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(odataerror, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.error = error


class odataerrordetail(msrest.serialization.Model):
    """odataerrordetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        super(odataerrordetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target


class odataerrormain(msrest.serialization.Model):
    """odataerrormain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~personal_contacts.models.odataerrordetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[odataerrordetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        details: Optional[List["odataerrordetail"]] = None,
        innererror: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(odataerrormain, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror
