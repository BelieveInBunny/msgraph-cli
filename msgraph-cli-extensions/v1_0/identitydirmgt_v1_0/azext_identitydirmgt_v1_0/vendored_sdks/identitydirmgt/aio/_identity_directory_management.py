# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.core import AsyncPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import IdentityDirectoryManagementConfiguration
from .operations import contactsorgcontactOperations
from .operations import contactsOperations
from .operations import contractscontractOperations
from .operations import contractsOperations
from .operations import devicesdeviceOperations
from .operations import devicesOperations
from .operations import directorydirectoryOperations
from .operations import directoryOperations
from .operations import directoryadministrativeunitsOperations
from .operations import directoryrolesdirectoryroleOperations
from .operations import directoryrolesOperations
from .operations import directoryroletemplatesdirectoryroletemplateOperations
from .operations import directoryroletemplatesOperations
from .operations import domainsdomainOperations
from .operations import domainsOperations
from .operations import organizationorganizationOperations
from .operations import organizationOperations
from .operations import subscribedskussubscribedskuOperations
from .operations import usersOperations
from .. import models


class IdentityDirectoryManagement(object):
    """IdentityDirectoryManagement.

    :ivar contactsorgcontact: contactsorgcontactOperations operations
    :vartype contactsorgcontact: identity_directory_management.aio.operations.contactsorgcontactOperations
    :ivar contacts: contactsOperations operations
    :vartype contacts: identity_directory_management.aio.operations.contactsOperations
    :ivar contractscontract: contractscontractOperations operations
    :vartype contractscontract: identity_directory_management.aio.operations.contractscontractOperations
    :ivar contracts: contractsOperations operations
    :vartype contracts: identity_directory_management.aio.operations.contractsOperations
    :ivar devicesdevice: devicesdeviceOperations operations
    :vartype devicesdevice: identity_directory_management.aio.operations.devicesdeviceOperations
    :ivar devices: devicesOperations operations
    :vartype devices: identity_directory_management.aio.operations.devicesOperations
    :ivar directorydirectory: directorydirectoryOperations operations
    :vartype directorydirectory: identity_directory_management.aio.operations.directorydirectoryOperations
    :ivar directory: directoryOperations operations
    :vartype directory: identity_directory_management.aio.operations.directoryOperations
    :ivar directoryadministrativeunits: directoryadministrativeunitsOperations operations
    :vartype directoryadministrativeunits: identity_directory_management.aio.operations.directoryadministrativeunitsOperations
    :ivar directoryrolesdirectoryrole: directoryrolesdirectoryroleOperations operations
    :vartype directoryrolesdirectoryrole: identity_directory_management.aio.operations.directoryrolesdirectoryroleOperations
    :ivar directoryroles: directoryrolesOperations operations
    :vartype directoryroles: identity_directory_management.aio.operations.directoryrolesOperations
    :ivar directoryroletemplatesdirectoryroletemplate: directoryroletemplatesdirectoryroletemplateOperations operations
    :vartype directoryroletemplatesdirectoryroletemplate: identity_directory_management.aio.operations.directoryroletemplatesdirectoryroletemplateOperations
    :ivar directoryroletemplates: directoryroletemplatesOperations operations
    :vartype directoryroletemplates: identity_directory_management.aio.operations.directoryroletemplatesOperations
    :ivar domainsdomain: domainsdomainOperations operations
    :vartype domainsdomain: identity_directory_management.aio.operations.domainsdomainOperations
    :ivar domains: domainsOperations operations
    :vartype domains: identity_directory_management.aio.operations.domainsOperations
    :ivar organizationorganization: organizationorganizationOperations operations
    :vartype organizationorganization: identity_directory_management.aio.operations.organizationorganizationOperations
    :ivar organization: organizationOperations operations
    :vartype organization: identity_directory_management.aio.operations.organizationOperations
    :ivar subscribedskussubscribedsku: subscribedskussubscribedskuOperations operations
    :vartype subscribedskussubscribedsku: identity_directory_management.aio.operations.subscribedskussubscribedskuOperations
    :ivar users: usersOperations operations
    :vartype users: identity_directory_management.aio.operations.usersOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://graph.microsoft.com/v1.0'
        self._config = IdentityDirectoryManagementConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.contactsorgcontact = contactsorgcontactOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.contacts = contactsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.contractscontract = contractscontractOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.contracts = contractsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.devicesdevice = devicesdeviceOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.devices = devicesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directorydirectory = directorydirectoryOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directory = directoryOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directoryadministrativeunits = directoryadministrativeunitsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directoryrolesdirectoryrole = directoryrolesdirectoryroleOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directoryroles = directoryrolesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directoryroletemplatesdirectoryroletemplate = directoryroletemplatesdirectoryroletemplateOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.directoryroletemplates = directoryroletemplatesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.domainsdomain = domainsdomainOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.domains = domainsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.organizationorganization = organizationorganizationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.organization = organizationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.subscribedskussubscribedsku = subscribedskussubscribedskuOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.users = usersOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "IdentityDirectoryManagement":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
