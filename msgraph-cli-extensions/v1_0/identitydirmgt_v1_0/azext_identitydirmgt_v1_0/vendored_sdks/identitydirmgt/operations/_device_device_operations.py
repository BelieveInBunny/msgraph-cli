# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class DeviceDeviceOperations(object):
    """DeviceDeviceOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_directory_management.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_device(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum19"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum20"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum21"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfDevice"]
        """Get entities from devices.

        Get entities from devices.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_directory_management.models.Enum19]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_directory_management.models.Enum20]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_directory_management.models.Enum21]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfDevice or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_directory_management.models.CollectionOfDevice]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfDevice"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_device.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfDevice', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_device.metadata = {'url': '/devices'}  # type: ignore

    def create_device(
        self,
        id=None,  # type: Optional[str]
        deleted_date_time=None,  # type: Optional[datetime.datetime]
        account_enabled=None,  # type: Optional[bool]
        alternative_security_ids=None,  # type: Optional[List["models.MicrosoftGraphAlternativeSecurityId"]]
        approximate_last_sign_in_date_time=None,  # type: Optional[datetime.datetime]
        compliance_expiration_date_time=None,  # type: Optional[datetime.datetime]
        device_id=None,  # type: Optional[str]
        device_metadata=None,  # type: Optional[str]
        device_version=None,  # type: Optional[int]
        display_name=None,  # type: Optional[str]
        is_compliant=None,  # type: Optional[bool]
        is_managed=None,  # type: Optional[bool]
        mdm_app_id=None,  # type: Optional[str]
        on_premises_last_sync_date_time=None,  # type: Optional[datetime.datetime]
        on_premises_sync_enabled=None,  # type: Optional[bool]
        operating_system=None,  # type: Optional[str]
        operating_system_version=None,  # type: Optional[str]
        physical_ids=None,  # type: Optional[List[str]]
        profile_type=None,  # type: Optional[str]
        system_labels=None,  # type: Optional[List[str]]
        trust_type=None,  # type: Optional[str]
        member_of=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        registered_owners=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        registered_users=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        transitive_member_of=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphDevice"
        """Add new entity to devices.

        Add new entity to devices.

        :param id: Read-only.
        :type id: str
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param account_enabled: true if the account is enabled; otherwise, false. Required.
        :type account_enabled: bool
        :param alternative_security_ids: For internal use only. Not nullable.
        :type alternative_security_ids: list[~identity_directory_management.models.MicrosoftGraphAlternativeSecurityId]
        :param approximate_last_sign_in_date_time: The timestamp type represents date and time
         information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
         1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
        :type approximate_last_sign_in_date_time: ~datetime.datetime
        :param compliance_expiration_date_time: The timestamp when the device is no longer deemed
         compliant. The timestamp type represents date and time information using ISO 8601 format and is
         always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this:
         '2014-01-01T00:00:00Z'. Read-only.
        :type compliance_expiration_date_time: ~datetime.datetime
        :param device_id: Unique identifier set by Azure Device Registration Service at the time of
         registration.
        :type device_id: str
        :param device_metadata: For interal use only. Set to null.
        :type device_metadata: str
        :param device_version: For interal use only.
        :type device_version: int
        :param display_name: The display name for the device. Required.
        :type display_name: str
        :param is_compliant: true if the device complies with Mobile Device Management (MDM) policies;
         otherwise, false. Read-only. This can only be updated by Intune for any device OS type or by an
         approved MDM app for Windows OS devices.
        :type is_compliant: bool
        :param is_managed: true if the device is managed by a Mobile Device Management (MDM) app;
         otherwise, false. This can only be updated by Intune for any device OS type or by an approved
         MDM app for Windows OS devices.
        :type is_managed: bool
        :param mdm_app_id: Application identifier used to register device into MDM. Read-only. Supports
         $filter.
        :type mdm_app_id: str
        :param on_premises_last_sync_date_time: The last time at which the object was synced with the
         on-premises directory.The Timestamp type represents date and time information using ISO 8601
         format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z' Read-only.
        :type on_premises_last_sync_date_time: ~datetime.datetime
        :param on_premises_sync_enabled: true if this object is synced from an on-premises directory;
         false if this object was originally synced from an on-premises directory but is no longer
         synced; null if this object has never been synced from an on-premises directory (default).
         Read-only.
        :type on_premises_sync_enabled: bool
        :param operating_system: The type of operating system on the device. Required.
        :type operating_system: str
        :param operating_system_version: The version of the operating system on the device. Required.
        :type operating_system_version: str
        :param physical_ids: For interal use only. Not nullable.
        :type physical_ids: list[str]
        :param profile_type: The profile type of the device. Possible values:RegisteredDevice
         (default)SecureVMPrinterSharedIoT.
        :type profile_type: str
        :param system_labels: List of labels applied to the device by the system.
        :type system_labels: list[str]
        :param trust_type: Type of trust for the joined device. Read-only. Possible values: Workplace -
         indicates bring your own personal devicesAzureAd - Cloud only joined devicesServerAd - on-
         premises domain joined devices joined to Azure AD. For more details, see Introduction to device
         management in Azure Active Directory.
        :type trust_type: str
        :param member_of: Groups that this group is a member of. HTTP Methods: GET (supported for all
         groups). Read-only. Nullable.
        :type member_of: list[~identity_directory_management.models.MicrosoftGraphDirectoryObject]
        :param registered_owners: The user that cloud joined the device or registered their personal
         device. The registered owner is set at the time of registration. Currently, there can be only
         one owner. Read-only. Nullable.
        :type registered_owners: list[~identity_directory_management.models.MicrosoftGraphDirectoryObject]
        :param registered_users: Collection of registered users of the device. For cloud joined devices
         and registered personal devices, registered users are set to the same value as registered
         owners at the time of registration. Read-only. Nullable.
        :type registered_users: list[~identity_directory_management.models.MicrosoftGraphDirectoryObject]
        :param transitive_member_of:
        :type transitive_member_of: list[~identity_directory_management.models.MicrosoftGraphDirectoryObject]
        :param extensions: The collection of open extensions defined for the device. Read-only.
         Nullable.
        :type extensions: list[~identity_directory_management.models.MicrosoftGraphExtension]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDevice, or the result of cls(response)
        :rtype: ~identity_directory_management.models.MicrosoftGraphDevice
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDevice"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphDevice(id=id, deleted_date_time=deleted_date_time, account_enabled=account_enabled, alternative_security_ids=alternative_security_ids, approximate_last_sign_in_date_time=approximate_last_sign_in_date_time, compliance_expiration_date_time=compliance_expiration_date_time, device_id=device_id, device_metadata=device_metadata, device_version=device_version, display_name=display_name, is_compliant=is_compliant, is_managed=is_managed, mdm_app_id=mdm_app_id, on_premises_last_sync_date_time=on_premises_last_sync_date_time, on_premises_sync_enabled=on_premises_sync_enabled, operating_system=operating_system, operating_system_version=operating_system_version, physical_ids=physical_ids, profile_type=profile_type, system_labels=system_labels, trust_type=trust_type, member_of=member_of, registered_owners=registered_owners, registered_users=registered_users, transitive_member_of=transitive_member_of, extensions=extensions)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_device.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphDevice')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDevice', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_device.metadata = {'url': '/devices'}  # type: ignore

    def get_device(
        self,
        device_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum22"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum23"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphDevice"
        """Get entity from devices by key.

        Get entity from devices by key.

        :param device_id: key: id of device.
        :type device_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_directory_management.models.Enum22]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_directory_management.models.Enum23]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDevice, or the result of cls(response)
        :rtype: ~identity_directory_management.models.MicrosoftGraphDevice
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDevice"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_device.metadata['url']  # type: ignore
        path_format_arguments = {
            'device-id': self._serialize.url("device_id", device_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDevice', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_device.metadata = {'url': '/devices/{device-id}'}  # type: ignore

    def update_device(
        self,
        device_id,  # type: str
        id=None,  # type: Optional[str]
        deleted_date_time=None,  # type: Optional[datetime.datetime]
        account_enabled=None,  # type: Optional[bool]
        alternative_security_ids=None,  # type: Optional[List["models.MicrosoftGraphAlternativeSecurityId"]]
        approximate_last_sign_in_date_time=None,  # type: Optional[datetime.datetime]
        compliance_expiration_date_time=None,  # type: Optional[datetime.datetime]
        microsoft_graph_device_id=None,  # type: Optional[str]
        device_metadata=None,  # type: Optional[str]
        device_version=None,  # type: Optional[int]
        display_name=None,  # type: Optional[str]
        is_compliant=None,  # type: Optional[bool]
        is_managed=None,  # type: Optional[bool]
        mdm_app_id=None,  # type: Optional[str]
        on_premises_last_sync_date_time=None,  # type: Optional[datetime.datetime]
        on_premises_sync_enabled=None,  # type: Optional[bool]
        operating_system=None,  # type: Optional[str]
        operating_system_version=None,  # type: Optional[str]
        physical_ids=None,  # type: Optional[List[str]]
        profile_type=None,  # type: Optional[str]
        system_labels=None,  # type: Optional[List[str]]
        trust_type=None,  # type: Optional[str]
        member_of=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        registered_owners=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        registered_users=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        transitive_member_of=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update entity in devices.

        Update entity in devices.

        :param device_id: key: id of device.
        :type device_id: str
        :param id: Read-only.
        :type id: str
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param account_enabled: true if the account is enabled; otherwise, false. Required.
        :type account_enabled: bool
        :param alternative_security_ids: For internal use only. Not nullable.
        :type alternative_security_ids: list[~identity_directory_management.models.MicrosoftGraphAlternativeSecurityId]
        :param approximate_last_sign_in_date_time: The timestamp type represents date and time
         information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
         1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
        :type approximate_last_sign_in_date_time: ~datetime.datetime
        :param compliance_expiration_date_time: The timestamp when the device is no longer deemed
         compliant. The timestamp type represents date and time information using ISO 8601 format and is
         always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this:
         '2014-01-01T00:00:00Z'. Read-only.
        :type compliance_expiration_date_time: ~datetime.datetime
        :param microsoft_graph_device_id: Unique identifier set by Azure Device Registration Service at
         the time of registration.
        :type microsoft_graph_device_id: str
        :param device_metadata: For interal use only. Set to null.
        :type device_metadata: str
        :param device_version: For interal use only.
        :type device_version: int
        :param display_name: The display name for the device. Required.
        :type display_name: str
        :param is_compliant: true if the device complies with Mobile Device Management (MDM) policies;
         otherwise, false. Read-only. This can only be updated by Intune for any device OS type or by an
         approved MDM app for Windows OS devices.
        :type is_compliant: bool
        :param is_managed: true if the device is managed by a Mobile Device Management (MDM) app;
         otherwise, false. This can only be updated by Intune for any device OS type or by an approved
         MDM app for Windows OS devices.
        :type is_managed: bool
        :param mdm_app_id: Application identifier used to register device into MDM. Read-only. Supports
         $filter.
        :type mdm_app_id: str
        :param on_premises_last_sync_date_time: The last time at which the object was synced with the
         on-premises directory.The Timestamp type represents date and time information using ISO 8601
         format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z' Read-only.
        :type on_premises_last_sync_date_time: ~datetime.datetime
        :param on_premises_sync_enabled: true if this object is synced from an on-premises directory;
         false if this object was originally synced from an on-premises directory but is no longer
         synced; null if this object has never been synced from an on-premises directory (default).
         Read-only.
        :type on_premises_sync_enabled: bool
        :param operating_system: The type of operating system on the device. Required.
        :type operating_system: str
        :param operating_system_version: The version of the operating system on the device. Required.
        :type operating_system_version: str
        :param physical_ids: For interal use only. Not nullable.
        :type physical_ids: list[str]
        :param profile_type: The profile type of the device. Possible values:RegisteredDevice
         (default)SecureVMPrinterSharedIoT.
        :type profile_type: str
        :param system_labels: List of labels applied to the device by the system.
        :type system_labels: list[str]
        :param trust_type: Type of trust for the joined device. Read-only. Possible values: Workplace -
         indicates bring your own personal devicesAzureAd - Cloud only joined devicesServerAd - on-
         premises domain joined devices joined to Azure AD. For more details, see Introduction to device
         management in Azure Active Directory.
        :type trust_type: str
        :param member_of: Groups that this group is a member of. HTTP Methods: GET (supported for all
         groups). Read-only. Nullable.
        :type member_of: list[~identity_directory_management.models.MicrosoftGraphDirectoryObject]
        :param registered_owners: The user that cloud joined the device or registered their personal
         device. The registered owner is set at the time of registration. Currently, there can be only
         one owner. Read-only. Nullable.
        :type registered_owners: list[~identity_directory_management.models.MicrosoftGraphDirectoryObject]
        :param registered_users: Collection of registered users of the device. For cloud joined devices
         and registered personal devices, registered users are set to the same value as registered
         owners at the time of registration. Read-only. Nullable.
        :type registered_users: list[~identity_directory_management.models.MicrosoftGraphDirectoryObject]
        :param transitive_member_of:
        :type transitive_member_of: list[~identity_directory_management.models.MicrosoftGraphDirectoryObject]
        :param extensions: The collection of open extensions defined for the device. Read-only.
         Nullable.
        :type extensions: list[~identity_directory_management.models.MicrosoftGraphExtension]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphDevice(id=id, deleted_date_time=deleted_date_time, account_enabled=account_enabled, alternative_security_ids=alternative_security_ids, approximate_last_sign_in_date_time=approximate_last_sign_in_date_time, compliance_expiration_date_time=compliance_expiration_date_time, device_id=microsoft_graph_device_id, device_metadata=device_metadata, device_version=device_version, display_name=display_name, is_compliant=is_compliant, is_managed=is_managed, mdm_app_id=mdm_app_id, on_premises_last_sync_date_time=on_premises_last_sync_date_time, on_premises_sync_enabled=on_premises_sync_enabled, operating_system=operating_system, operating_system_version=operating_system_version, physical_ids=physical_ids, profile_type=profile_type, system_labels=system_labels, trust_type=trust_type, member_of=member_of, registered_owners=registered_owners, registered_users=registered_users, transitive_member_of=transitive_member_of, extensions=extensions)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_device.metadata['url']  # type: ignore
        path_format_arguments = {
            'device-id': self._serialize.url("device_id", device_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphDevice')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_device.metadata = {'url': '/devices/{device-id}'}  # type: ignore

    def delete_device(
        self,
        device_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete entity from devices.

        Delete entity from devices.

        :param device_id: key: id of device.
        :type device_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_device.metadata['url']  # type: ignore
        path_format_arguments = {
            'device-id': self._serialize.url("device_id", device_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_device.metadata = {'url': '/devices/{device-id}'}  # type: ignore
