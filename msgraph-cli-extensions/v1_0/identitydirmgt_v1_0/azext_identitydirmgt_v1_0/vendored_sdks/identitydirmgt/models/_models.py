# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class collectionofadministrativeunit(msrest.serialization.Model):
    """Collection of administrativeUnit.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphadministrativeunit]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphadministrativeunit]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofadministrativeunit, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofcontract(msrest.serialization.Model):
    """Collection of contract.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphcontract]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphcontract]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofcontract, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdevice(msrest.serialization.Model):
    """Collection of device.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdevice]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdevice]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdevice, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject0(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject1(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject2(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject3(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject3, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject4(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject4, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject5(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject5, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject6(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject6, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject7(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject7, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject8(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject8, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject9(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject9, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryrole(msrest.serialization.Model):
    """Collection of directoryRole.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdirectoryrole]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryrole]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryrole, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryroletemplate(msrest.serialization.Model):
    """Collection of directoryRoleTemplate.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdirectoryroletemplate]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryroletemplate]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryroletemplate, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdomain(msrest.serialization.Model):
    """Collection of domain.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdomain]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdomain]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdomain, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdomaindnsrecord(msrest.serialization.Model):
    """Collection of domainDnsRecord.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdomaindnsrecord]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdomaindnsrecord]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdomaindnsrecord, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdomaindnsrecord0(msrest.serialization.Model):
    """Collection of domainDnsRecord.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphdomaindnsrecord]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdomaindnsrecord]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdomaindnsrecord0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension0(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextension1(msrest.serialization.Model):
    """Collection of extension.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphextension]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextension]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextension1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject0(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject1(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject2(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject3(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject3, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject4(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject4, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject5(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject5, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject6(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject6, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject7(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject7, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject8(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject8, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoforganization(msrest.serialization.Model):
    """Collection of organization.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphorganization]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphorganization]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoforganization, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoforgcontact(msrest.serialization.Model):
    """Collection of orgContact.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphorgcontact]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphorgcontact]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoforgcontact, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofscopedrolemembership(msrest.serialization.Model):
    """Collection of scopedRoleMembership.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphscopedrolemembership]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphscopedrolemembership]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofscopedrolemembership, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofscopedrolemembership0(msrest.serialization.Model):
    """Collection of scopedRoleMembership.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphscopedrolemembership]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphscopedrolemembership]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofscopedrolemembership0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofscopedrolemembership1(msrest.serialization.Model):
    """Collection of scopedRoleMembership.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphscopedrolemembership]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphscopedrolemembership]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofscopedrolemembership1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofsubscribedsku(msrest.serialization.Model):
    """Collection of subscribedSku.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~identity_directory_management.models.microsoftgraphsubscribedsku]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphsubscribedsku]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofsubscribedsku, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class microsoftgraphentity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)


class microsoftgraphdirectoryobject(microsoftgraphentity):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphdirectoryobject, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.deleted_date_time = kwargs.get('deleted_date_time', None)


class microsoftgraphadministrativeunit(microsoftgraphdirectoryobject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description: An optional description for the administrative unit.
    :type description: str
    :param display_name: Display name for the administrative unit.
    :type display_name: str
    :param visibility: Controls whether the adminstrative unit and its members are hidden or
     public. Can be set to HiddenMembership or Public. If not set, default behavior is Public. When
     set to HiddenMembership, only members of the administrative unit can list other members of the
     adminstrative unit.
    :type visibility: str
    :param members: Users and groups that are members of this Adminsitrative Unit. HTTP Methods:
     GET (list members), POST (add members), DELETE (remove members).
    :type members: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param scoped_role_members: Scoped-role members of this Administrative Unit.  HTTP Methods: GET
     (list scopedRoleMemberships), POST (add scopedRoleMembership), DELETE (remove
     scopedRoleMembership).
    :type scoped_role_members:
     list[~identity_directory_management.models.microsoftgraphscopedrolemembership]
    :param extensions:
    :type extensions: list[~identity_directory_management.models.microsoftgraphextension]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'visibility': {'key': 'visibility', 'type': 'str'},
        'members': {'key': 'members', 'type': '[microsoftgraphdirectoryobject]'},
        'scoped_role_members': {'key': 'scopedRoleMembers', 'type': '[microsoftgraphscopedrolemembership]'},
        'extensions': {'key': 'extensions', 'type': '[microsoftgraphextension]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphadministrativeunit, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.visibility = kwargs.get('visibility', None)
        self.members = kwargs.get('members', None)
        self.scoped_role_members = kwargs.get('scoped_role_members', None)
        self.extensions = kwargs.get('extensions', None)


class microsoftgraphalternativesecurityid(msrest.serialization.Model):
    """alternativeSecurityId.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param identity_provider: For internal use only.
    :type identity_provider: str
    :param key: For internal use only.
    :type key: bytes
    :param type: For internal use only.
    :type type: int
    """

    _validation = {
        'type': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'identity_provider': {'key': 'identityProvider', 'type': 'str'},
        'key': {'key': 'key', 'type': 'base64'},
        'type': {'key': 'type', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphalternativesecurityid, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.identity_provider = kwargs.get('identity_provider', None)
        self.key = kwargs.get('key', None)
        self.type = kwargs.get('type', None)


class microsoftgraphassignedplan(msrest.serialization.Model):
    """assignedPlan.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param assigned_date_time: The date and time at which the plan was assigned; for example:
     2013-01-02T19:32:30Z. The Timestamp type represents date and time information using ISO 8601
     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type assigned_date_time: ~datetime.datetime
    :param capability_status: For example, 'Enabled'.
    :type capability_status: str
    :param service: The name of the service; for example, 'Exchange'.
    :type service: str
    :param service_plan_id: A GUID that identifies the service plan.
    :type service_plan_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'assigned_date_time': {'key': 'assignedDateTime', 'type': 'iso-8601'},
        'capability_status': {'key': 'capabilityStatus', 'type': 'str'},
        'service': {'key': 'service', 'type': 'str'},
        'service_plan_id': {'key': 'servicePlanId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphassignedplan, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.assigned_date_time = kwargs.get('assigned_date_time', None)
        self.capability_status = kwargs.get('capability_status', None)
        self.service = kwargs.get('service', None)
        self.service_plan_id = kwargs.get('service_plan_id', None)


class microsoftgraphcertificateauthority(msrest.serialization.Model):
    """certificateAuthority.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param certificate: Required. The base64 encoded string representing the public certificate.
    :type certificate: bytes
    :param certificate_revocation_list_url: The URL of the certificate revocation list.
    :type certificate_revocation_list_url: str
    :param delta_certificate_revocation_list_url: The URL contains the list of all revoked
     certificates since the last time a full certificate revocaton list was created.
    :type delta_certificate_revocation_list_url: str
    :param is_root_authority: Required. true if the trusted certificate is a root authority, false
     if the trusted certificate is an intermediate authority.
    :type is_root_authority: bool
    :param issuer: The issuer of the certificate, calculated from the certificate value. Read-only.
    :type issuer: str
    :param issuer_ski: The subject key identifier of the certificate, calculated from the
     certificate value. Read-only.
    :type issuer_ski: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'certificate': {'key': 'certificate', 'type': 'base64'},
        'certificate_revocation_list_url': {'key': 'certificateRevocationListUrl', 'type': 'str'},
        'delta_certificate_revocation_list_url': {'key': 'deltaCertificateRevocationListUrl', 'type': 'str'},
        'is_root_authority': {'key': 'isRootAuthority', 'type': 'bool'},
        'issuer': {'key': 'issuer', 'type': 'str'},
        'issuer_ski': {'key': 'issuerSki', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphcertificateauthority, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.certificate = kwargs.get('certificate', None)
        self.certificate_revocation_list_url = kwargs.get('certificate_revocation_list_url', None)
        self.delta_certificate_revocation_list_url = kwargs.get('delta_certificate_revocation_list_url', None)
        self.is_root_authority = kwargs.get('is_root_authority', None)
        self.issuer = kwargs.get('issuer', None)
        self.issuer_ski = kwargs.get('issuer_ski', None)


class microsoftgraphcertificatebasedauthconfiguration(microsoftgraphentity):
    """certificateBasedAuthConfiguration.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param certificate_authorities: Collection of certificate authorities which creates a trusted
     certificate chain.
    :type certificate_authorities:
     list[~identity_directory_management.models.microsoftgraphcertificateauthority]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'certificate_authorities': {'key': 'certificateAuthorities', 'type': '[microsoftgraphcertificateauthority]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphcertificatebasedauthconfiguration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.certificate_authorities = kwargs.get('certificate_authorities', None)


class microsoftgraphcontract(microsoftgraphdirectoryobject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param contract_type: Type of contract.Possible values are: SyndicationPartner - Partner that
     exclusively resells and manages O365 and Intune for this customer. They resell and support
     their customers. BreadthPartner - Partner has the ability to provide administrative support for
     this customer. However, the partner is not allowed to resell to the customer.ResellerPartner -
     Partner that is similar to a syndication partner, except that the partner doesn’t have
     exclusive access to a tenant. In the syndication case, the customer cannot buy additional
     direct subscriptions from Microsoft or from other partners.
    :type contract_type: str
    :param customer_id: The unique identifier for the customer tenant referenced by this
     partnership. Corresponds to the id property of the customer tenant's organization resource.
    :type customer_id: str
    :param default_domain_name: A copy of the customer tenant's default domain name. The copy is
     made when the partnership with the customer is established. It is not automatically updated if
     the customer tenant's default domain name changes.
    :type default_domain_name: str
    :param display_name: A copy of the customer tenant's display name. The copy is made when the
     partnership with the customer is established. It is not automatically updated if the customer
     tenant's display name changes.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'contract_type': {'key': 'contractType', 'type': 'str'},
        'customer_id': {'key': 'customerId', 'type': 'str'},
        'default_domain_name': {'key': 'defaultDomainName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphcontract, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.contract_type = kwargs.get('contract_type', None)
        self.customer_id = kwargs.get('customer_id', None)
        self.default_domain_name = kwargs.get('default_domain_name', None)
        self.display_name = kwargs.get('display_name', None)


class microsoftgraphdevice(microsoftgraphdirectoryobject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_enabled: true if the account is enabled; otherwise, false. Required.
    :type account_enabled: bool
    :param alternative_security_ids: For internal use only. Not nullable.
    :type alternative_security_ids:
     list[~identity_directory_management.models.microsoftgraphalternativesecurityid]
    :param approximate_last_sign_in_date_time: The timestamp type represents date and time
     information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
     1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type approximate_last_sign_in_date_time: ~datetime.datetime
    :param compliance_expiration_date_time: The timestamp when the device is no longer deemed
     compliant. The timestamp type represents date and time information using ISO 8601 format and is
     always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this:
     '2014-01-01T00:00:00Z'. Read-only.
    :type compliance_expiration_date_time: ~datetime.datetime
    :param device_id: Unique identifier set by Azure Device Registration Service at the time of
     registration.
    :type device_id: str
    :param device_metadata: For interal use only. Set to null.
    :type device_metadata: str
    :param device_version: For interal use only.
    :type device_version: int
    :param display_name: The display name for the device. Required.
    :type display_name: str
    :param is_compliant: true if the device complies with Mobile Device Management (MDM) policies;
     otherwise, false. Read-only. This can only be updated by Intune for any device OS type or by an
     approved MDM app for Windows OS devices.
    :type is_compliant: bool
    :param is_managed: true if the device is managed by a Mobile Device Management (MDM) app;
     otherwise, false. This can only be updated by Intune for any device OS type or by an approved
     MDM app for Windows OS devices.
    :type is_managed: bool
    :param mdm_app_id: Application identifier used to register device into MDM. Read-only. Supports
     $filter.
    :type mdm_app_id: str
    :param on_premises_last_sync_date_time: The last time at which the object was synced with the
     on-premises directory.The Timestamp type represents date and time information using ISO 8601
     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z' Read-only.
    :type on_premises_last_sync_date_time: ~datetime.datetime
    :param on_premises_sync_enabled: true if this object is synced from an on-premises directory;
     false if this object was originally synced from an on-premises directory but is no longer
     synced; null if this object has never been synced from an on-premises directory (default).
     Read-only.
    :type on_premises_sync_enabled: bool
    :param operating_system: The type of operating system on the device. Required.
    :type operating_system: str
    :param operating_system_version: The version of the operating system on the device. Required.
    :type operating_system_version: str
    :param physical_ids: For interal use only. Not nullable.
    :type physical_ids: list[str]
    :param profile_type: The profile type of the device. Possible values:RegisteredDevice
     (default)SecureVMPrinterSharedIoT.
    :type profile_type: str
    :param system_labels: List of labels applied to the device by the system.
    :type system_labels: list[str]
    :param trust_type: Type of trust for the joined device. Read-only. Possible values: Workplace -
     indicates bring your own personal devicesAzureAd - Cloud only joined devicesServerAd - on-
     premises domain joined devices joined to Azure AD. For more details, see Introduction to device
     management in Azure Active Directory.
    :type trust_type: str
    :param member_of: Groups that this group is a member of. HTTP Methods: GET (supported for all
     groups). Read-only. Nullable.
    :type member_of: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param registered_owners: The user that cloud joined the device or registered their personal
     device. The registered owner is set at the time of registration. Currently, there can be only
     one owner. Read-only. Nullable.
    :type registered_owners:
     list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param registered_users: Collection of registered users of the device. For cloud joined devices
     and registered personal devices, registered users are set to the same value as registered
     owners at the time of registration. Read-only. Nullable.
    :type registered_users:
     list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param transitive_member_of:
    :type transitive_member_of:
     list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param extensions: The collection of open extensions defined for the device. Read-only.
     Nullable.
    :type extensions: list[~identity_directory_management.models.microsoftgraphextension]
    """

    _validation = {
        'device_version': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_enabled': {'key': 'accountEnabled', 'type': 'bool'},
        'alternative_security_ids': {'key': 'alternativeSecurityIds', 'type': '[microsoftgraphalternativesecurityid]'},
        'approximate_last_sign_in_date_time': {'key': 'approximateLastSignInDateTime', 'type': 'iso-8601'},
        'compliance_expiration_date_time': {'key': 'complianceExpirationDateTime', 'type': 'iso-8601'},
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'device_metadata': {'key': 'deviceMetadata', 'type': 'str'},
        'device_version': {'key': 'deviceVersion', 'type': 'int'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_compliant': {'key': 'isCompliant', 'type': 'bool'},
        'is_managed': {'key': 'isManaged', 'type': 'bool'},
        'mdm_app_id': {'key': 'mdmAppId', 'type': 'str'},
        'on_premises_last_sync_date_time': {'key': 'onPremisesLastSyncDateTime', 'type': 'iso-8601'},
        'on_premises_sync_enabled': {'key': 'onPremisesSyncEnabled', 'type': 'bool'},
        'operating_system': {'key': 'operatingSystem', 'type': 'str'},
        'operating_system_version': {'key': 'operatingSystemVersion', 'type': 'str'},
        'physical_ids': {'key': 'physicalIds', 'type': '[str]'},
        'profile_type': {'key': 'profileType', 'type': 'str'},
        'system_labels': {'key': 'systemLabels', 'type': '[str]'},
        'trust_type': {'key': 'trustType', 'type': 'str'},
        'member_of': {'key': 'memberOf', 'type': '[microsoftgraphdirectoryobject]'},
        'registered_owners': {'key': 'registeredOwners', 'type': '[microsoftgraphdirectoryobject]'},
        'registered_users': {'key': 'registeredUsers', 'type': '[microsoftgraphdirectoryobject]'},
        'transitive_member_of': {'key': 'transitiveMemberOf', 'type': '[microsoftgraphdirectoryobject]'},
        'extensions': {'key': 'extensions', 'type': '[microsoftgraphextension]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphdevice, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.account_enabled = kwargs.get('account_enabled', None)
        self.alternative_security_ids = kwargs.get('alternative_security_ids', None)
        self.approximate_last_sign_in_date_time = kwargs.get('approximate_last_sign_in_date_time', None)
        self.compliance_expiration_date_time = kwargs.get('compliance_expiration_date_time', None)
        self.device_id = kwargs.get('device_id', None)
        self.device_metadata = kwargs.get('device_metadata', None)
        self.device_version = kwargs.get('device_version', None)
        self.display_name = kwargs.get('display_name', None)
        self.is_compliant = kwargs.get('is_compliant', None)
        self.is_managed = kwargs.get('is_managed', None)
        self.mdm_app_id = kwargs.get('mdm_app_id', None)
        self.on_premises_last_sync_date_time = kwargs.get('on_premises_last_sync_date_time', None)
        self.on_premises_sync_enabled = kwargs.get('on_premises_sync_enabled', None)
        self.operating_system = kwargs.get('operating_system', None)
        self.operating_system_version = kwargs.get('operating_system_version', None)
        self.physical_ids = kwargs.get('physical_ids', None)
        self.profile_type = kwargs.get('profile_type', None)
        self.system_labels = kwargs.get('system_labels', None)
        self.trust_type = kwargs.get('trust_type', None)
        self.member_of = kwargs.get('member_of', None)
        self.registered_owners = kwargs.get('registered_owners', None)
        self.registered_users = kwargs.get('registered_users', None)
        self.transitive_member_of = kwargs.get('transitive_member_of', None)
        self.extensions = kwargs.get('extensions', None)


class microsoftgraphdirectory(microsoftgraphentity):
    """directory.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param administrative_units:
    :type administrative_units:
     list[~identity_directory_management.models.microsoftgraphadministrativeunit]
    :param deleted_items: Recently deleted items. Read-only. Nullable.
    :type deleted_items: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'administrative_units': {'key': 'administrativeUnits', 'type': '[microsoftgraphadministrativeunit]'},
        'deleted_items': {'key': 'deletedItems', 'type': '[microsoftgraphdirectoryobject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphdirectory, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.administrative_units = kwargs.get('administrative_units', None)
        self.deleted_items = kwargs.get('deleted_items', None)


class microsoftgraphdirectoryrole(microsoftgraphdirectoryobject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description: The description for the directory role. Read-only.
    :type description: str
    :param display_name: The display name for the directory role. Read-only.
    :type display_name: str
    :param role_template_id: The id of the directoryRoleTemplate that this role is based on. The
     property must be specified when activating a directory role in a tenant with a POST operation.
     After the directory role has been activated, the property is read only.
    :type role_template_id: str
    :param members: Users that are members of this directory role. HTTP Methods: GET, POST, DELETE.
     Read-only. Nullable.
    :type members: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param scoped_members:
    :type scoped_members:
     list[~identity_directory_management.models.microsoftgraphscopedrolemembership]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'role_template_id': {'key': 'roleTemplateId', 'type': 'str'},
        'members': {'key': 'members', 'type': '[microsoftgraphdirectoryobject]'},
        'scoped_members': {'key': 'scopedMembers', 'type': '[microsoftgraphscopedrolemembership]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphdirectoryrole, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.role_template_id = kwargs.get('role_template_id', None)
        self.members = kwargs.get('members', None)
        self.scoped_members = kwargs.get('scoped_members', None)


class microsoftgraphdirectoryroletemplate(microsoftgraphdirectoryobject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description: The description to set for the directory role. Read-only.
    :type description: str
    :param display_name: The display name to set for the directory role. Read-only.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphdirectoryroletemplate, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)


class microsoftgraphdomain(microsoftgraphentity):
    """domain.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param authentication_type: Indicates the configured authentication type for the domain. The
     value is either Managed or Federated. Managed indicates a cloud managed domain where Azure AD
     performs user authentication.Federated indicates authentication is federated with an identity
     provider such as the tenant's on-premises Active Directory via Active Directory Federation
     Services. This property is read-only and is not nullable.
    :type authentication_type: str
    :param availability_status: This property is always null except when the verify action is used.
     When the verify action is used, a domain entity is returned in the response. The
     availabilityStatus property of the domain entity in the response is either AvailableImmediately
     or EmailVerifiedDomainTakeoverScheduled.
    :type availability_status: str
    :param is_admin_managed: The value of the property is false if the DNS record management of the
     domain has been delegated to Microsoft 365. Otherwise, the value is true. Not nullable.
    :type is_admin_managed: bool
    :param is_default: True if this is the default domain that is used for user creation. There is
     only one default domain per company. Not nullable.
    :type is_default: bool
    :param is_initial: True if this is the initial domain created by Microsoft Online Services
     (companyname.onmicrosoft.com). There is only one initial domain per company. Not nullable.
    :type is_initial: bool
    :param is_root: True if the domain is a verified root domain. Otherwise, false if the domain is
     a subdomain or unverified. Not nullable.
    :type is_root: bool
    :param is_verified: True if the domain has completed domain ownership verification. Not
     nullable.
    :type is_verified: bool
    :param manufacturer:
    :type manufacturer: str
    :param model:
    :type model: str
    :param password_notification_window_in_days: Specifies the number of days before a user
     receives notification that their password will expire. If the property is not set, a default
     value of 14 days will be used.
    :type password_notification_window_in_days: int
    :param password_validity_period_in_days: Specifies the length of time that a password is valid
     before it must be changed. If the property is not set, a default value of 90 days will be used.
    :type password_validity_period_in_days: int
    :param state: domainState.
    :type state: ~identity_directory_management.models.microsoftgraphdomainstate
    :param supported_services: The capabilities assigned to the domain.Can include 0, 1 or more of
     following values: Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline,
     SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer,
     Intune The values which you can add/remove using Graph API include: Email,
     OfficeCommunicationsOnline, YammerNot nullable.
    :type supported_services: list[str]
    :param domain_name_references: Read-only, Nullable.
    :type domain_name_references:
     list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param service_configuration_records: DNS records the customer adds to the DNS zone file of the
     domain before the domain can be used by Microsoft Online services.Read-only, Nullable.
    :type service_configuration_records:
     list[~identity_directory_management.models.microsoftgraphdomaindnsrecord]
    :param verification_dns_records: DNS records that the customer adds to the DNS zone file of the
     domain before the customer can complete domain ownership verification with Azure AD.Read-only,
     Nullable.
    :type verification_dns_records:
     list[~identity_directory_management.models.microsoftgraphdomaindnsrecord]
    """

    _validation = {
        'password_notification_window_in_days': {'maximum': 2147483647, 'minimum': -2147483648},
        'password_validity_period_in_days': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'availability_status': {'key': 'availabilityStatus', 'type': 'str'},
        'is_admin_managed': {'key': 'isAdminManaged', 'type': 'bool'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'is_initial': {'key': 'isInitial', 'type': 'bool'},
        'is_root': {'key': 'isRoot', 'type': 'bool'},
        'is_verified': {'key': 'isVerified', 'type': 'bool'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'password_notification_window_in_days': {'key': 'passwordNotificationWindowInDays', 'type': 'int'},
        'password_validity_period_in_days': {'key': 'passwordValidityPeriodInDays', 'type': 'int'},
        'state': {'key': 'state', 'type': 'microsoftgraphdomainstate'},
        'supported_services': {'key': 'supportedServices', 'type': '[str]'},
        'domain_name_references': {'key': 'domainNameReferences', 'type': '[microsoftgraphdirectoryobject]'},
        'service_configuration_records': {'key': 'serviceConfigurationRecords', 'type': '[microsoftgraphdomaindnsrecord]'},
        'verification_dns_records': {'key': 'verificationDnsRecords', 'type': '[microsoftgraphdomaindnsrecord]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphdomain, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.authentication_type = kwargs.get('authentication_type', None)
        self.availability_status = kwargs.get('availability_status', None)
        self.is_admin_managed = kwargs.get('is_admin_managed', None)
        self.is_default = kwargs.get('is_default', None)
        self.is_initial = kwargs.get('is_initial', None)
        self.is_root = kwargs.get('is_root', None)
        self.is_verified = kwargs.get('is_verified', None)
        self.manufacturer = kwargs.get('manufacturer', None)
        self.model = kwargs.get('model', None)
        self.password_notification_window_in_days = kwargs.get('password_notification_window_in_days', None)
        self.password_validity_period_in_days = kwargs.get('password_validity_period_in_days', None)
        self.state = kwargs.get('state', None)
        self.supported_services = kwargs.get('supported_services', None)
        self.domain_name_references = kwargs.get('domain_name_references', None)
        self.service_configuration_records = kwargs.get('service_configuration_records', None)
        self.verification_dns_records = kwargs.get('verification_dns_records', None)


class microsoftgraphdomaindnsrecord(microsoftgraphentity):
    """domainDnsRecord.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_optional: If false, this record must be configured by the customer at the DNS host
     for Microsoft Online Services to operate correctly with the domain.
    :type is_optional: bool
    :param label: Value used when configuring the name of the DNS record at the DNS host.
    :type label: str
    :param record_type: Indicates what type of DNS record this entity represents.The value can be
     one of the following: CName, Mx, Srv, TxtKey.
    :type record_type: str
    :param supported_service: Microsoft Online Service or feature that has a dependency on this DNS
     record.Can be one of the following values: null, Email, Sharepoint, EmailInternalRelayOnly,
     OfficeCommunicationsOnline, SharePointDefaultDomain, FullRedelegation, SharePointPublic,
     OrgIdAuthentication, Yammer, Intune.
    :type supported_service: str
    :param ttl: Value to use when configuring the time-to-live (ttl) property of the DNS record at
     the DNS host. Not nullable.
    :type ttl: int
    """

    _validation = {
        'ttl': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_optional': {'key': 'isOptional', 'type': 'bool'},
        'label': {'key': 'label', 'type': 'str'},
        'record_type': {'key': 'recordType', 'type': 'str'},
        'supported_service': {'key': 'supportedService', 'type': 'str'},
        'ttl': {'key': 'ttl', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphdomaindnsrecord, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_optional = kwargs.get('is_optional', None)
        self.label = kwargs.get('label', None)
        self.record_type = kwargs.get('record_type', None)
        self.supported_service = kwargs.get('supported_service', None)
        self.ttl = kwargs.get('ttl', None)


class microsoftgraphdomainstate(msrest.serialization.Model):
    """domainState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_action_date_time: Timestamp for when the last activity occurred. The value is
     updated when an operation is scheduled, the asynchronous task starts, and when the operation
     completes.
    :type last_action_date_time: ~datetime.datetime
    :param operation: Type of asynchronous operation. The values can be ForceDelete or
     Verification.
    :type operation: str
    :param status: Current status of the operation.  Scheduled - Operation has been scheduled but
     has not started.  InProgress - Task has started and is in progress.  Failed - Operation has
     failed.
    :type status: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'operation': {'key': 'operation', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphdomainstate, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.last_action_date_time = kwargs.get('last_action_date_time', None)
        self.operation = kwargs.get('operation', None)
        self.status = kwargs.get('status', None)


class microsoftgraphextension(microsoftgraphentity):
    """extension.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphextension, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class microsoftgraphextensionproperty(microsoftgraphdirectoryobject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_display_name: Display name of the application object on which this extension
     property is defined. Read-only.
    :type app_display_name: str
    :param data_type: Specifies the data type of the value the extension property can hold.
     Following values are supported. Not nullable. Binary - 256 bytes maximumBooleanDateTime - Must
     be specified in ISO 8601 format. Will be stored in UTC.Integer - 32-bit value.LargeInteger -
     64-bit value.String - 256 characters maximum.
    :type data_type: str
    :param is_synced_from_on_premises: Indicates if this extension property was sycned from
     onpremises directory using Azure AD Connect. Read-only.
    :type is_synced_from_on_premises: bool
    :param name: Name of the extension property. Not nullable.
    :type name: str
    :param target_objects: Following values are supported. Not nullable.
     UserGroupOrganizationDeviceApplication.
    :type target_objects: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'data_type': {'key': 'dataType', 'type': 'str'},
        'is_synced_from_on_premises': {'key': 'isSyncedFromOnPremises', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'target_objects': {'key': 'targetObjects', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphextensionproperty, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_display_name = kwargs.get('app_display_name', None)
        self.data_type = kwargs.get('data_type', None)
        self.is_synced_from_on_premises = kwargs.get('is_synced_from_on_premises', None)
        self.name = kwargs.get('name', None)
        self.target_objects = kwargs.get('target_objects', None)


class microsoftgraphidentity(msrest.serialization.Model):
    """identity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    :param id: Unique identifier for the identity.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphidentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.id = kwargs.get('id', None)


class microsoftgraphlicenseunitsdetail(msrest.serialization.Model):
    """licenseUnitsDetail.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param enabled: The number of units that are enabled.
    :type enabled: int
    :param suspended: The number of units that are suspended.
    :type suspended: int
    :param warning: The number of units that are in warning status.
    :type warning: int
    """

    _validation = {
        'enabled': {'maximum': 2147483647, 'minimum': -2147483648},
        'suspended': {'maximum': 2147483647, 'minimum': -2147483648},
        'warning': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'enabled': {'key': 'enabled', 'type': 'int'},
        'suspended': {'key': 'suspended', 'type': 'int'},
        'warning': {'key': 'warning', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphlicenseunitsdetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.enabled = kwargs.get('enabled', None)
        self.suspended = kwargs.get('suspended', None)
        self.warning = kwargs.get('warning', None)


class microsoftgraphonpremisesprovisioningerror(msrest.serialization.Model):
    """onPremisesProvisioningError.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param category: Category of the provisioning error. Note: Currently, there is only one
     possible value. Possible value: PropertyConflict - indicates a property value is not unique.
     Other objects contain the same value for the property.
    :type category: str
    :param occurred_date_time: The date and time at which the error occurred.
    :type occurred_date_time: ~datetime.datetime
    :param property_causing_error: Name of the directory property causing the error. Current
     possible values: UserPrincipalName or ProxyAddress.
    :type property_causing_error: str
    :param value: Value of the property causing the error.
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'category': {'key': 'category', 'type': 'str'},
        'occurred_date_time': {'key': 'occurredDateTime', 'type': 'iso-8601'},
        'property_causing_error': {'key': 'propertyCausingError', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphonpremisesprovisioningerror, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.category = kwargs.get('category', None)
        self.occurred_date_time = kwargs.get('occurred_date_time', None)
        self.property_causing_error = kwargs.get('property_causing_error', None)
        self.value = kwargs.get('value', None)


class microsoftgraphorganization(microsoftgraphdirectoryobject):
    """The organization resource represents an instance of global settings and resources which operate and are provisioned at the tenant-level.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param assigned_plans: The collection of service plans associated with the tenant. Not
     nullable.
    :type assigned_plans: list[~identity_directory_management.models.microsoftgraphassignedplan]
    :param business_phones: Telephone number for the organization. NOTE: Although this is a string
     collection, only one number can be set for this property.
    :type business_phones: list[str]
    :param city: City name of the address for the organization.
    :type city: str
    :param country: Country/region name of the address for the organization.
    :type country: str
    :param country_letter_code: Country/region abbreviation for the organization.
    :type country_letter_code: str
    :param created_date_time: Timestamp of when the organization was created. The value cannot be
     modified and is automatically populated when the organization is created. The Timestamp type
     represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type created_date_time: ~datetime.datetime
    :param display_name: The display name for the tenant.
    :type display_name: str
    :param marketing_notification_emails: Not nullable.
    :type marketing_notification_emails: list[str]
    :param on_premises_last_sync_date_time: The time and date at which the tenant was last synced
     with the on-premise directory. The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'. Read-only.
    :type on_premises_last_sync_date_time: ~datetime.datetime
    :param on_premises_sync_enabled: true if this object is synced from an on-premises directory;
     false if this object was originally synced from an on-premises directory but is no longer
     synced; null if this object has never been synced from an on-premises directory (default).
    :type on_premises_sync_enabled: bool
    :param postal_code: Postal code of the address for the organization.
    :type postal_code: str
    :param preferred_language: The preferred language for the organization. Should follow ISO 639-1
     Code; for example 'en'.
    :type preferred_language: str
    :param privacy_profile: privacyProfile.
    :type privacy_profile: ~identity_directory_management.models.microsoftgraphprivacyprofile
    :param provisioned_plans: Not nullable.
    :type provisioned_plans:
     list[~identity_directory_management.models.microsoftgraphprovisionedplan]
    :param security_compliance_notification_mails:
    :type security_compliance_notification_mails: list[str]
    :param security_compliance_notification_phones:
    :type security_compliance_notification_phones: list[str]
    :param state: State name of the address for the organization.
    :type state: str
    :param street: Street name of the address for organization.
    :type street: str
    :param technical_notification_mails: Not nullable.
    :type technical_notification_mails: list[str]
    :param tenant_type:
    :type tenant_type: str
    :param verified_domains: The collection of domains associated with this tenant. Not nullable.
    :type verified_domains:
     list[~identity_directory_management.models.microsoftgraphverifieddomain]
    :param mobile_device_management_authority:  Possible values include: "unknown", "intune",
     "sccm", "office365".
    :type mobile_device_management_authority: str or
     ~identity_directory_management.models.Microsoftgraphmdmauthority
    :param certificate_based_auth_configuration: Navigation property to manage certificate-based
     authentication configuration. Only a single instance of certificateBasedAuthConfiguration can
     be created in the collection.
    :type certificate_based_auth_configuration:
     list[~identity_directory_management.models.microsoftgraphcertificatebasedauthconfiguration]
    :param extensions: The collection of open extensions defined for the organization. Read-only.
     Nullable.
    :type extensions: list[~identity_directory_management.models.microsoftgraphextension]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'assigned_plans': {'key': 'assignedPlans', 'type': '[microsoftgraphassignedplan]'},
        'business_phones': {'key': 'businessPhones', 'type': '[str]'},
        'city': {'key': 'city', 'type': 'str'},
        'country': {'key': 'country', 'type': 'str'},
        'country_letter_code': {'key': 'countryLetterCode', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'marketing_notification_emails': {'key': 'marketingNotificationEmails', 'type': '[str]'},
        'on_premises_last_sync_date_time': {'key': 'onPremisesLastSyncDateTime', 'type': 'iso-8601'},
        'on_premises_sync_enabled': {'key': 'onPremisesSyncEnabled', 'type': 'bool'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'preferred_language': {'key': 'preferredLanguage', 'type': 'str'},
        'privacy_profile': {'key': 'privacyProfile', 'type': 'microsoftgraphprivacyprofile'},
        'provisioned_plans': {'key': 'provisionedPlans', 'type': '[microsoftgraphprovisionedplan]'},
        'security_compliance_notification_mails': {'key': 'securityComplianceNotificationMails', 'type': '[str]'},
        'security_compliance_notification_phones': {'key': 'securityComplianceNotificationPhones', 'type': '[str]'},
        'state': {'key': 'state', 'type': 'str'},
        'street': {'key': 'street', 'type': 'str'},
        'technical_notification_mails': {'key': 'technicalNotificationMails', 'type': '[str]'},
        'tenant_type': {'key': 'tenantType', 'type': 'str'},
        'verified_domains': {'key': 'verifiedDomains', 'type': '[microsoftgraphverifieddomain]'},
        'mobile_device_management_authority': {'key': 'mobileDeviceManagementAuthority', 'type': 'str'},
        'certificate_based_auth_configuration': {'key': 'certificateBasedAuthConfiguration', 'type': '[microsoftgraphcertificatebasedauthconfiguration]'},
        'extensions': {'key': 'extensions', 'type': '[microsoftgraphextension]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphorganization, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.assigned_plans = kwargs.get('assigned_plans', None)
        self.business_phones = kwargs.get('business_phones', None)
        self.city = kwargs.get('city', None)
        self.country = kwargs.get('country', None)
        self.country_letter_code = kwargs.get('country_letter_code', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.display_name = kwargs.get('display_name', None)
        self.marketing_notification_emails = kwargs.get('marketing_notification_emails', None)
        self.on_premises_last_sync_date_time = kwargs.get('on_premises_last_sync_date_time', None)
        self.on_premises_sync_enabled = kwargs.get('on_premises_sync_enabled', None)
        self.postal_code = kwargs.get('postal_code', None)
        self.preferred_language = kwargs.get('preferred_language', None)
        self.privacy_profile = kwargs.get('privacy_profile', None)
        self.provisioned_plans = kwargs.get('provisioned_plans', None)
        self.security_compliance_notification_mails = kwargs.get('security_compliance_notification_mails', None)
        self.security_compliance_notification_phones = kwargs.get('security_compliance_notification_phones', None)
        self.state = kwargs.get('state', None)
        self.street = kwargs.get('street', None)
        self.technical_notification_mails = kwargs.get('technical_notification_mails', None)
        self.tenant_type = kwargs.get('tenant_type', None)
        self.verified_domains = kwargs.get('verified_domains', None)
        self.mobile_device_management_authority = kwargs.get('mobile_device_management_authority', None)
        self.certificate_based_auth_configuration = kwargs.get('certificate_based_auth_configuration', None)
        self.extensions = kwargs.get('extensions', None)


class microsoftgraphorgcontact(microsoftgraphdirectoryobject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param addresses:
    :type addresses:
     list[~identity_directory_management.models.microsoftgraphphysicalofficeaddress]
    :param company_name:
    :type company_name: str
    :param department:
    :type department: str
    :param display_name:
    :type display_name: str
    :param given_name:
    :type given_name: str
    :param job_title:
    :type job_title: str
    :param mail:
    :type mail: str
    :param mail_nickname:
    :type mail_nickname: str
    :param on_premises_last_sync_date_time:
    :type on_premises_last_sync_date_time: ~datetime.datetime
    :param on_premises_provisioning_errors:
    :type on_premises_provisioning_errors:
     list[~identity_directory_management.models.microsoftgraphonpremisesprovisioningerror]
    :param on_premises_sync_enabled:
    :type on_premises_sync_enabled: bool
    :param phones:
    :type phones: list[~identity_directory_management.models.microsoftgraphphone]
    :param proxy_addresses:
    :type proxy_addresses: list[str]
    :param surname:
    :type surname: str
    :param direct_reports:
    :type direct_reports: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param manager: Represents an Azure Active Directory object. The directoryObject type is the
     base type for many other directory entity types.
    :type manager: ~identity_directory_management.models.microsoftgraphdirectoryobject
    :param member_of:
    :type member_of: list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    :param transitive_member_of:
    :type transitive_member_of:
     list[~identity_directory_management.models.microsoftgraphdirectoryobject]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'addresses': {'key': 'addresses', 'type': '[microsoftgraphphysicalofficeaddress]'},
        'company_name': {'key': 'companyName', 'type': 'str'},
        'department': {'key': 'department', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'job_title': {'key': 'jobTitle', 'type': 'str'},
        'mail': {'key': 'mail', 'type': 'str'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'on_premises_last_sync_date_time': {'key': 'onPremisesLastSyncDateTime', 'type': 'iso-8601'},
        'on_premises_provisioning_errors': {'key': 'onPremisesProvisioningErrors', 'type': '[microsoftgraphonpremisesprovisioningerror]'},
        'on_premises_sync_enabled': {'key': 'onPremisesSyncEnabled', 'type': 'bool'},
        'phones': {'key': 'phones', 'type': '[microsoftgraphphone]'},
        'proxy_addresses': {'key': 'proxyAddresses', 'type': '[str]'},
        'surname': {'key': 'surname', 'type': 'str'},
        'direct_reports': {'key': 'directReports', 'type': '[microsoftgraphdirectoryobject]'},
        'manager': {'key': 'manager', 'type': 'microsoftgraphdirectoryobject'},
        'member_of': {'key': 'memberOf', 'type': '[microsoftgraphdirectoryobject]'},
        'transitive_member_of': {'key': 'transitiveMemberOf', 'type': '[microsoftgraphdirectoryobject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphorgcontact, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.addresses = kwargs.get('addresses', None)
        self.company_name = kwargs.get('company_name', None)
        self.department = kwargs.get('department', None)
        self.display_name = kwargs.get('display_name', None)
        self.given_name = kwargs.get('given_name', None)
        self.job_title = kwargs.get('job_title', None)
        self.mail = kwargs.get('mail', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
        self.on_premises_last_sync_date_time = kwargs.get('on_premises_last_sync_date_time', None)
        self.on_premises_provisioning_errors = kwargs.get('on_premises_provisioning_errors', None)
        self.on_premises_sync_enabled = kwargs.get('on_premises_sync_enabled', None)
        self.phones = kwargs.get('phones', None)
        self.proxy_addresses = kwargs.get('proxy_addresses', None)
        self.surname = kwargs.get('surname', None)
        self.direct_reports = kwargs.get('direct_reports', None)
        self.manager = kwargs.get('manager', None)
        self.member_of = kwargs.get('member_of', None)
        self.transitive_member_of = kwargs.get('transitive_member_of', None)


class microsoftgraphphone(msrest.serialization.Model):
    """phone.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param language:
    :type language: str
    :param number: The phone number.
    :type number: str
    :param region:
    :type region: str
    :param type:  Possible values include: "home", "business", "mobile", "other", "assistant",
     "homeFax", "businessFax", "otherFax", "pager", "radio".
    :type type: str or ~identity_directory_management.models.Microsoftgraphphonetype
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'language': {'key': 'language', 'type': 'str'},
        'number': {'key': 'number', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphphone, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.language = kwargs.get('language', None)
        self.number = kwargs.get('number', None)
        self.region = kwargs.get('region', None)
        self.type = kwargs.get('type', None)


class microsoftgraphphysicalofficeaddress(msrest.serialization.Model):
    """physicalOfficeAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param city: The city.
    :type city: str
    :param country_or_region: The country or region. It's a free-format string value, for example,
     'United States'.
    :type country_or_region: str
    :param office_location: Office location such as building and office number for an
     organizational contact.
    :type office_location: str
    :param postal_code: The postal code.
    :type postal_code: str
    :param state: The state.
    :type state: str
    :param street: The street.
    :type street: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'city': {'key': 'city', 'type': 'str'},
        'country_or_region': {'key': 'countryOrRegion', 'type': 'str'},
        'office_location': {'key': 'officeLocation', 'type': 'str'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'street': {'key': 'street', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphphysicalofficeaddress, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.city = kwargs.get('city', None)
        self.country_or_region = kwargs.get('country_or_region', None)
        self.office_location = kwargs.get('office_location', None)
        self.postal_code = kwargs.get('postal_code', None)
        self.state = kwargs.get('state', None)
        self.street = kwargs.get('street', None)


class microsoftgraphprivacyprofile(msrest.serialization.Model):
    """privacyProfile.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param contact_email: A valid smtp email address for the privacy statement contact. Not
     required.
    :type contact_email: str
    :param statement_url: A valid URL format that begins with http:// or https://. Maximum length
     is 255 characters. The URL that directs to the company's privacy statement. Not required.
    :type statement_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'contact_email': {'key': 'contactEmail', 'type': 'str'},
        'statement_url': {'key': 'statementUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprivacyprofile, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.contact_email = kwargs.get('contact_email', None)
        self.statement_url = kwargs.get('statement_url', None)


class microsoftgraphprovisionedplan(msrest.serialization.Model):
    """provisionedPlan.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param capability_status: For example, 'Enabled'.
    :type capability_status: str
    :param provisioning_status: For example, 'Success'.
    :type provisioning_status: str
    :param service: The name of the service; for example, 'AccessControlS2S'.
    :type service: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'capability_status': {'key': 'capabilityStatus', 'type': 'str'},
        'provisioning_status': {'key': 'provisioningStatus', 'type': 'str'},
        'service': {'key': 'service', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphprovisionedplan, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.capability_status = kwargs.get('capability_status', None)
        self.provisioning_status = kwargs.get('provisioning_status', None)
        self.service = kwargs.get('service', None)


class microsoftgraphscopedrolemembership(microsoftgraphentity):
    """scopedRoleMembership.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param administrative_unit_id: Unique identifier for the administrative unit that the directory
     role is scoped to.
    :type administrative_unit_id: str
    :param role_id: Unique identifier for the directory role that the member is in.
    :type role_id: str
    :param role_member_info: identity.
    :type role_member_info: ~identity_directory_management.models.microsoftgraphidentity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'administrative_unit_id': {'key': 'administrativeUnitId', 'type': 'str'},
        'role_id': {'key': 'roleId', 'type': 'str'},
        'role_member_info': {'key': 'roleMemberInfo', 'type': 'microsoftgraphidentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphscopedrolemembership, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.administrative_unit_id = kwargs.get('administrative_unit_id', None)
        self.role_id = kwargs.get('role_id', None)
        self.role_member_info = kwargs.get('role_member_info', None)


class microsoftgraphserviceplaninfo(msrest.serialization.Model):
    """servicePlanInfo.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param applies_to: The object the service plan can be assigned to. Possible values:'User' -
     service plan can be assigned to individual users.'Company' - service plan can be assigned to
     the entire tenant.
    :type applies_to: str
    :param provisioning_status: The provisioning status of the service plan. Possible
     values:'Success' - Service is fully provisioned.'Disabled' - Service has been
     disabled.'PendingInput' - Service is not yet provisioned; awaiting service
     confirmation.'PendingActivation' - Service is provisioned but requires explicit activation by
     administrator (for example, Intune_O365 service plan)'PendingProvisioning' - Microsoft has
     added a new service to the product SKU and it has not been activated in the tenant, yet.
    :type provisioning_status: str
    :param service_plan_id: The unique identifier of the service plan.
    :type service_plan_id: str
    :param service_plan_name: The name of the service plan.
    :type service_plan_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'applies_to': {'key': 'appliesTo', 'type': 'str'},
        'provisioning_status': {'key': 'provisioningStatus', 'type': 'str'},
        'service_plan_id': {'key': 'servicePlanId', 'type': 'str'},
        'service_plan_name': {'key': 'servicePlanName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphserviceplaninfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.applies_to = kwargs.get('applies_to', None)
        self.provisioning_status = kwargs.get('provisioning_status', None)
        self.service_plan_id = kwargs.get('service_plan_id', None)
        self.service_plan_name = kwargs.get('service_plan_name', None)


class microsoftgraphsubscribedsku(microsoftgraphentity):
    """subscribedSku.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param applies_to: For example, 'User' or 'Company'.
    :type applies_to: str
    :param capability_status: Possible values are: Enabled, Warning, Suspended, Deleted, LockedOut.
    :type capability_status: str
    :param consumed_units: The number of licenses that have been assigned.
    :type consumed_units: int
    :param prepaid_units: licenseUnitsDetail.
    :type prepaid_units: ~identity_directory_management.models.microsoftgraphlicenseunitsdetail
    :param service_plans: Information about the service plans that are available with the SKU. Not
     nullable.
    :type service_plans: list[~identity_directory_management.models.microsoftgraphserviceplaninfo]
    :param sku_id: The unique identifier (GUID) for the service SKU.
    :type sku_id: str
    :param sku_part_number: The SKU part number; for example: 'AAD_PREMIUM' or 'RMSBASIC'. To get a
     list of commercial subscriptions that an organization has acquired, see List subscribedSkus.
    :type sku_part_number: str
    """

    _validation = {
        'consumed_units': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'applies_to': {'key': 'appliesTo', 'type': 'str'},
        'capability_status': {'key': 'capabilityStatus', 'type': 'str'},
        'consumed_units': {'key': 'consumedUnits', 'type': 'int'},
        'prepaid_units': {'key': 'prepaidUnits', 'type': 'microsoftgraphlicenseunitsdetail'},
        'service_plans': {'key': 'servicePlans', 'type': '[microsoftgraphserviceplaninfo]'},
        'sku_id': {'key': 'skuId', 'type': 'str'},
        'sku_part_number': {'key': 'skuPartNumber', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphsubscribedsku, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.applies_to = kwargs.get('applies_to', None)
        self.capability_status = kwargs.get('capability_status', None)
        self.consumed_units = kwargs.get('consumed_units', None)
        self.prepaid_units = kwargs.get('prepaid_units', None)
        self.service_plans = kwargs.get('service_plans', None)
        self.sku_id = kwargs.get('sku_id', None)
        self.sku_part_number = kwargs.get('sku_part_number', None)


class microsoftgraphverifieddomain(msrest.serialization.Model):
    """verifiedDomain.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param capabilities: For example, 'Email', 'OfficeCommunicationsOnline'.
    :type capabilities: str
    :param is_default: true if this is the default domain associated with the tenant; otherwise,
     false.
    :type is_default: bool
    :param is_initial: true if this is the initial domain associated with the tenant; otherwise,
     false.
    :type is_initial: bool
    :param name: The domain name; for example, 'contoso.onmicrosoft.com'.
    :type name: str
    :param type: For example, 'Managed'.
    :type type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'capabilities': {'key': 'capabilities', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'is_initial': {'key': 'isInitial', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphverifieddomain, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.capabilities = kwargs.get('capabilities', None)
        self.is_default = kwargs.get('is_default', None)
        self.is_initial = kwargs.get('is_initial', None)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)


class odataerror(msrest.serialization.Model):
    """odataerror.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~identity_directory_management.models.odataerrormain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'odataerrormain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerror, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.error = kwargs['error']


class odataerrordetail(msrest.serialization.Model):
    """odataerrordetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerrordetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class odataerrormain(msrest.serialization.Model):
    """odataerrormain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~identity_directory_management.models.odataerrordetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[odataerrordetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerrormain, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)


class paths116bv3cdirectoryroletemplatesdirectoryroletemplateidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths116bv3cdirectoryroletemplatesdirectoryroletemplateidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths116bv3cdirectoryroletemplatesdirectoryroletemplateidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class paths11g1vgqorganizationmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths11g1vgqorganizationmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    :param types:
    :type types: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
        'types': {'key': 'types', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths11g1vgqorganizationmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)
        self.types = kwargs.get('types', None)


class paths12azg33contactsmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths12azg33contactsmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    :param types:
    :type types: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
        'types': {'key': 'types', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths12azg33contactsmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)
        self.types = kwargs.get('types', None)


class paths14vnqnudirectoryrolesdirectoryroleidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths14vnqnudirectoryrolesdirectoryroleidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths14vnqnudirectoryrolesdirectoryroleidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)


class paths1540tevdevicesmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1540tevdevicesmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_synced_from_on_premises:
    :type is_synced_from_on_premises: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_synced_from_on_premises': {'key': 'isSyncedFromOnPremises', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1540tevdevicesmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_synced_from_on_premises = kwargs.get('is_synced_from_on_premises', False)


class paths1545w8ndevicesmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1545w8ndevicesmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    :param types:
    :type types: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
        'types': {'key': 'types', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1545w8ndevicesmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)
        self.types = kwargs.get('types', None)


class paths175njh2contactsorgcontactidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths175njh2contactsorgcontactidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param group_ids:
    :type group_ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'group_ids': {'key': 'groupIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths175njh2contactsorgcontactidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.group_ids = kwargs.get('group_ids', None)


class paths17jleimdevicesdeviceidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths17jleimdevicesdeviceidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths17jleimdevicesdeviceidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)


class paths1binbx4directoryroletemplatesmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1binbx4directoryroletemplatesmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param entity_type:
    :type entity_type: str
    :param display_name:
    :type display_name: str
    :param mail_nickname:
    :type mail_nickname: str
    :param on_behalf_of_user_id:
    :type on_behalf_of_user_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'entity_type': {'key': 'entityType', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'on_behalf_of_user_id': {'key': 'onBehalfOfUserId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1binbx4directoryroletemplatesmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.entity_type = kwargs.get('entity_type', None)
        self.display_name = kwargs.get('display_name', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
        self.on_behalf_of_user_id = kwargs.get('on_behalf_of_user_id', None)


class paths1e8tfraorganizationmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1e8tfraorganizationmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_synced_from_on_premises:
    :type is_synced_from_on_premises: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_synced_from_on_premises': {'key': 'isSyncedFromOnPremises', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1e8tfraorganizationmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_synced_from_on_premises = kwargs.get('is_synced_from_on_premises', False)


class paths1g440inorganizationmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1g440inorganizationmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param entity_type:
    :type entity_type: str
    :param display_name:
    :type display_name: str
    :param mail_nickname:
    :type mail_nickname: str
    :param on_behalf_of_user_id:
    :type on_behalf_of_user_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'entity_type': {'key': 'entityType', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'on_behalf_of_user_id': {'key': 'onBehalfOfUserId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1g440inorganizationmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.entity_type = kwargs.get('entity_type', None)
        self.display_name = kwargs.get('display_name', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
        self.on_behalf_of_user_id = kwargs.get('on_behalf_of_user_id', None)


class paths1hzls82organizationidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1hzls82organizationidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1hzls82organizationidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class paths1i0tqyfdirectoryrolesmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1i0tqyfdirectoryrolesmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param entity_type:
    :type entity_type: str
    :param display_name:
    :type display_name: str
    :param mail_nickname:
    :type mail_nickname: str
    :param on_behalf_of_user_id:
    :type on_behalf_of_user_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'entity_type': {'key': 'entityType', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'on_behalf_of_user_id': {'key': 'onBehalfOfUserId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1i0tqyfdirectoryrolesmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.entity_type = kwargs.get('entity_type', None)
        self.display_name = kwargs.get('display_name', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
        self.on_behalf_of_user_id = kwargs.get('on_behalf_of_user_id', None)


class paths1ig9rahdirectoryrolesmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1ig9rahdirectoryrolesmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    :param types:
    :type types: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
        'types': {'key': 'types', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1ig9rahdirectoryrolesmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)
        self.types = kwargs.get('types', None)


class paths1l581ifcontactsmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1l581ifcontactsmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_synced_from_on_premises:
    :type is_synced_from_on_premises: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_synced_from_on_premises': {'key': 'isSyncedFromOnPremises', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1l581ifcontactsmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_synced_from_on_premises = kwargs.get('is_synced_from_on_premises', False)


class paths1m18ohpcontactsorgcontactidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1m18ohpcontactsorgcontactidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1m18ohpcontactsorgcontactidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class paths1qbmtipdevicesdeviceidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1qbmtipdevicesdeviceidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1qbmtipdevicesdeviceidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class paths1t6lra6contractsmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1t6lra6contractsmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    :param types:
    :type types: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
        'types': {'key': 'types', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1t6lra6contractsmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)
        self.types = kwargs.get('types', None)


class paths1vbpok7directoryrolesmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1vbpok7directoryrolesmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_synced_from_on_premises:
    :type is_synced_from_on_premises: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_synced_from_on_premises': {'key': 'isSyncedFromOnPremises', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1vbpok7directoryrolesmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_synced_from_on_premises = kwargs.get('is_synced_from_on_premises', False)


class paths1yxqrp7organizationidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1yxqrp7organizationidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1yxqrp7organizationidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)


class paths2yqm8dcontractsmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths2yqm8dcontractsmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_synced_from_on_premises:
    :type is_synced_from_on_premises: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_synced_from_on_premises': {'key': 'isSyncedFromOnPremises', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths2yqm8dcontractsmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_synced_from_on_premises = kwargs.get('is_synced_from_on_premises', False)


class paths30m7s8contractscontractidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths30m7s8contractscontractidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param group_ids:
    :type group_ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'group_ids': {'key': 'groupIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths30m7s8contractscontractidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.group_ids = kwargs.get('group_ids', None)


class paths3y2p0kcontactsorgcontactidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths3y2p0kcontactsorgcontactidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths3y2p0kcontactsorgcontactidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class paths6crxp6contractscontractidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths6crxp6contractscontractidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths6crxp6contractscontractidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class paths6ovq2ldirectoryroletemplatesmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths6ovq2ldirectoryroletemplatesmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    :param types:
    :type types: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
        'types': {'key': 'types', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths6ovq2ldirectoryroletemplatesmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)
        self.types = kwargs.get('types', None)


class paths7cg04scontactsmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths7cg04scontactsmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param entity_type:
    :type entity_type: str
    :param display_name:
    :type display_name: str
    :param mail_nickname:
    :type mail_nickname: str
    :param on_behalf_of_user_id:
    :type on_behalf_of_user_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'entity_type': {'key': 'entityType', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'on_behalf_of_user_id': {'key': 'onBehalfOfUserId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths7cg04scontactsmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.entity_type = kwargs.get('entity_type', None)
        self.display_name = kwargs.get('display_name', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
        self.on_behalf_of_user_id = kwargs.get('on_behalf_of_user_id', None)


class paths7x6xkrdevicesmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths7x6xkrdevicesmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param entity_type:
    :type entity_type: str
    :param display_name:
    :type display_name: str
    :param mail_nickname:
    :type mail_nickname: str
    :param on_behalf_of_user_id:
    :type on_behalf_of_user_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'entity_type': {'key': 'entityType', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'on_behalf_of_user_id': {'key': 'onBehalfOfUserId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths7x6xkrdevicesmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.entity_type = kwargs.get('entity_type', None)
        self.display_name = kwargs.get('display_name', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
        self.on_behalf_of_user_id = kwargs.get('on_behalf_of_user_id', None)


class paths8ke2vbcontactsorgcontactidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths8ke2vbcontactsorgcontactidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths8ke2vbcontactsorgcontactidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)


class paths9kz3qjdirectoryrolesdirectoryroleidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths9kz3qjdirectoryrolesdirectoryroleidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths9kz3qjdirectoryrolesdirectoryroleidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class paths9pdmsbcontractscontractidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths9pdmsbcontractscontractidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths9pdmsbcontractscontractidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class pathsbwhfj9directoryrolesdirectoryroleidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsbwhfj9directoryrolesdirectoryroleidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param group_ids:
    :type group_ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'group_ids': {'key': 'groupIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsbwhfj9directoryrolesdirectoryroleidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.group_ids = kwargs.get('group_ids', None)


class pathsglwoxydirectoryroletemplatesmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsglwoxydirectoryroletemplatesmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_synced_from_on_premises:
    :type is_synced_from_on_premises: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_synced_from_on_premises': {'key': 'isSyncedFromOnPremises', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsglwoxydirectoryroletemplatesmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_synced_from_on_premises = kwargs.get('is_synced_from_on_premises', False)


class pathsmf08mlorganizationidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsmf08mlorganizationidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param group_ids:
    :type group_ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'group_ids': {'key': 'groupIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsmf08mlorganizationidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.group_ids = kwargs.get('group_ids', None)


class pathsmwgbeodirectoryroletemplatesdirectoryroletemplateidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsmwgbeodirectoryroletemplatesdirectoryroletemplateidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param group_ids:
    :type group_ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'group_ids': {'key': 'groupIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsmwgbeodirectoryroletemplatesdirectoryroletemplateidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.group_ids = kwargs.get('group_ids', None)


class pathsntst38devicesdeviceidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsntst38devicesdeviceidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param group_ids:
    :type group_ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'group_ids': {'key': 'groupIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsntst38devicesdeviceidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.group_ids = kwargs.get('group_ids', None)


class pathsoikz69devicesdeviceidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsoikz69devicesdeviceidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsoikz69devicesdeviceidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class pathsplvqruorganizationidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsplvqruorganizationidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsplvqruorganizationidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class pathsq8r6udirectoryrolesdirectoryroleidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsq8r6udirectoryrolesdirectoryroleidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsq8r6udirectoryrolesdirectoryroleidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class pathsu5phcgdirectoryroletemplatesdirectoryroletemplateidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsu5phcgdirectoryroletemplatesdirectoryroletemplateidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsu5phcgdirectoryroletemplatesdirectoryroletemplateidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class pathsuasdopdomainsdomainidmicrosoftgraphforcedeletepostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsuasdopdomainsdomainidmicrosoftgraphforcedeletepostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param disable_user_accounts:
    :type disable_user_accounts: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'disable_user_accounts': {'key': 'disableUserAccounts', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsuasdopdomainsdomainidmicrosoftgraphforcedeletepostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.disable_user_accounts = kwargs.get('disable_user_accounts', False)


class pathsxq94ujcontractscontractidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsxq94ujcontractscontractidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsxq94ujcontractscontractidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)


class pathsykfgk1directoryroletemplatesdirectoryroletemplateidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsykfgk1directoryroletemplatesdirectoryroletemplateidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsykfgk1directoryroletemplatesdirectoryroletemplateidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)


class pathszahmwmcontractsmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathszahmwmcontractsmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param entity_type:
    :type entity_type: str
    :param display_name:
    :type display_name: str
    :param mail_nickname:
    :type mail_nickname: str
    :param on_behalf_of_user_id:
    :type on_behalf_of_user_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'entity_type': {'key': 'entityType', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'on_behalf_of_user_id': {'key': 'onBehalfOfUserId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathszahmwmcontractsmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.entity_type = kwargs.get('entity_type', None)
        self.display_name = kwargs.get('display_name', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
        self.on_behalf_of_user_id = kwargs.get('on_behalf_of_user_id', None)
