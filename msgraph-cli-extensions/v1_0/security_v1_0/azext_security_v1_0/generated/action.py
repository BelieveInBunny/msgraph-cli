# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddAverageComparativeScores(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddAverageComparativeScores, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'average-score':
                d['average_score'] = v[0]
            elif kl == 'basis':
                d['basis'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter average_comparative_scores. All possible '
                               'keys are: average-score, basis'.format(k))
        return d


class AddControlScores(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddControlScores, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'control-category':
                d['control_category'] = v[0]
            elif kl == 'control-name':
                d['control_name'] = v[0]
            elif kl == 'description':
                d['description'] = v[0]
            elif kl == 'score':
                d['score'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter control_scores. All possible keys are: '
                               'control-category, control-name, description, score'.format(k))
        return d


class AddVendorInformation(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.vendor_information = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'provider':
                d['provider'] = v[0]
            elif kl == 'provider-version':
                d['provider_version'] = v[0]
            elif kl == 'sub-provider':
                d['sub_provider'] = v[0]
            elif kl == 'vendor':
                d['vendor'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter vendor_information. All possible keys '
                               'are: provider, provider-version, sub-provider, vendor'.format(k))
        return d


class AddControlStateUpdates(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddControlStateUpdates, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'assigned-to':
                d['assigned_to'] = v[0]
            elif kl == 'comment':
                d['comment'] = v[0]
            elif kl == 'state':
                d['state'] = v[0]
            elif kl == 'updated-by':
                d['updated_by'] = v[0]
            elif kl == 'updated-date-time':
                d['updated_date_time'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter control_state_updates. All possible keys '
                               'are: assigned-to, comment, state, updated-by, updated-date-time'.format(k))
        return d
