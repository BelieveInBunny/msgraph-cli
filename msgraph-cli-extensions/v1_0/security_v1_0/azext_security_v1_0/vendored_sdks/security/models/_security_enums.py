# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum19(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIVITYGROUPNAME = "activityGroupName"
    ASSIGNEDTO = "assignedTo"
    AZURESUBSCRIPTIONID = "azureSubscriptionId"
    AZURETENANTID = "azureTenantId"
    CATEGORY = "category"
    CLOSEDDATETIME = "closedDateTime"
    CLOUDAPPSTATES = "cloudAppStates"
    COMMENTS = "comments"
    CONFIDENCE = "confidence"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    DETECTIONIDS = "detectionIds"
    EVENTDATETIME = "eventDateTime"
    FEEDBACK = "feedback"
    FILESTATES = "fileStates"
    HISTORYSTATES = "historyStates"
    HOSTSTATES = "hostStates"
    INCIDENTIDS = "incidentIds"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    MALWARESTATES = "malwareStates"
    NETWORKCONNECTIONS = "networkConnections"
    PROCESSES = "processes"
    RECOMMENDEDACTIONS = "recommendedActions"
    REGISTRYKEYSTATES = "registryKeyStates"
    SECURITYRESOURCES = "securityResources"
    SEVERITY = "severity"
    SOURCEMATERIALS = "sourceMaterials"
    STATUS = "status"
    TAGS = "tags"
    TITLE = "title"
    TRIGGERS = "triggers"
    USERSTATES = "userStates"
    VENDORINFORMATION = "vendorInformation"
    VULNERABILITYSTATES = "vulnerabilityStates"

class Enum20(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACTIONTYPE = "actionType"
    ACTIONTYPEDESC = "actionType desc"
    ACTIONURL = "actionUrl"
    ACTIONURLDESC = "actionUrl desc"
    AZURETENANTID = "azureTenantId"
    AZURETENANTIDDESC = "azureTenantId desc"
    COMPLIANCEINFORMATION = "complianceInformation"
    COMPLIANCEINFORMATIONDESC = "complianceInformation desc"
    CONTROLCATEGORY = "controlCategory"
    CONTROLCATEGORYDESC = "controlCategory desc"
    CONTROLSTATEUPDATES = "controlStateUpdates"
    CONTROLSTATEUPDATESDESC = "controlStateUpdates desc"
    DEPRECATED = "deprecated"
    DEPRECATEDDESC = "deprecated desc"
    IMPLEMENTATIONCOST = "implementationCost"
    IMPLEMENTATIONCOSTDESC = "implementationCost desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    MAXSCORE = "maxScore"
    MAXSCOREDESC = "maxScore desc"
    RANK = "rank"
    RANKDESC = "rank desc"
    REMEDIATION = "remediation"
    REMEDIATIONDESC = "remediation desc"
    REMEDIATIONIMPACT = "remediationImpact"
    REMEDIATIONIMPACTDESC = "remediationImpact desc"
    SERVICE = "service"
    SERVICEDESC = "service desc"
    THREATS = "threats"
    THREATSDESC = "threats desc"
    TIER = "tier"
    TIERDESC = "tier desc"
    TITLE = "title"
    TITLEDESC = "title desc"
    USERIMPACT = "userImpact"
    USERIMPACTDESC = "userImpact desc"
    VENDORINFORMATION = "vendorInformation"
    VENDORINFORMATIONDESC = "vendorInformation desc"

class Enum21(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIONTYPE = "actionType"
    ACTIONURL = "actionUrl"
    AZURETENANTID = "azureTenantId"
    COMPLIANCEINFORMATION = "complianceInformation"
    CONTROLCATEGORY = "controlCategory"
    CONTROLSTATEUPDATES = "controlStateUpdates"
    DEPRECATED = "deprecated"
    IMPLEMENTATIONCOST = "implementationCost"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    MAXSCORE = "maxScore"
    RANK = "rank"
    REMEDIATION = "remediation"
    REMEDIATIONIMPACT = "remediationImpact"
    SERVICE = "service"
    THREATS = "threats"
    TIER = "tier"
    TITLE = "title"
    USERIMPACT = "userImpact"
    VENDORINFORMATION = "vendorInformation"

class Enum22(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIONTYPE = "actionType"
    ACTIONURL = "actionUrl"
    AZURETENANTID = "azureTenantId"
    COMPLIANCEINFORMATION = "complianceInformation"
    CONTROLCATEGORY = "controlCategory"
    CONTROLSTATEUPDATES = "controlStateUpdates"
    DEPRECATED = "deprecated"
    IMPLEMENTATIONCOST = "implementationCost"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    MAXSCORE = "maxScore"
    RANK = "rank"
    REMEDIATION = "remediation"
    REMEDIATIONIMPACT = "remediationImpact"
    SERVICE = "service"
    THREATS = "threats"
    TIER = "tier"
    TITLE = "title"
    USERIMPACT = "userImpact"
    VENDORINFORMATION = "vendorInformation"

class Enum23(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACTIVEUSERCOUNT = "activeUserCount"
    ACTIVEUSERCOUNTDESC = "activeUserCount desc"
    AVERAGECOMPARATIVESCORES = "averageComparativeScores"
    AVERAGECOMPARATIVESCORESDESC = "averageComparativeScores desc"
    AZURETENANTID = "azureTenantId"
    AZURETENANTIDDESC = "azureTenantId desc"
    CONTROLSCORES = "controlScores"
    CONTROLSCORESDESC = "controlScores desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    CURRENTSCORE = "currentScore"
    CURRENTSCOREDESC = "currentScore desc"
    ENABLEDSERVICES = "enabledServices"
    ENABLEDSERVICESDESC = "enabledServices desc"
    LICENSEDUSERCOUNT = "licensedUserCount"
    LICENSEDUSERCOUNTDESC = "licensedUserCount desc"
    MAXSCORE = "maxScore"
    MAXSCOREDESC = "maxScore desc"
    VENDORINFORMATION = "vendorInformation"
    VENDORINFORMATIONDESC = "vendorInformation desc"

class Enum24(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIVEUSERCOUNT = "activeUserCount"
    AVERAGECOMPARATIVESCORES = "averageComparativeScores"
    AZURETENANTID = "azureTenantId"
    CONTROLSCORES = "controlScores"
    CREATEDDATETIME = "createdDateTime"
    CURRENTSCORE = "currentScore"
    ENABLEDSERVICES = "enabledServices"
    LICENSEDUSERCOUNT = "licensedUserCount"
    MAXSCORE = "maxScore"
    VENDORINFORMATION = "vendorInformation"

class Enum25(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIVEUSERCOUNT = "activeUserCount"
    AVERAGECOMPARATIVESCORES = "averageComparativeScores"
    AZURETENANTID = "azureTenantId"
    CONTROLSCORES = "controlScores"
    CREATEDDATETIME = "createdDateTime"
    CURRENTSCORE = "currentScore"
    ENABLEDSERVICES = "enabledServices"
    LICENSEDUSERCOUNT = "licensedUserCount"
    MAXSCORE = "maxScore"
    VENDORINFORMATION = "vendorInformation"

class Get0itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ALERTS = "alerts"
    SECURESCORECONTROLPROFILES = "secureScoreControlProfiles"
    SECURESCORES = "secureScores"

class Get1itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ALERTS = "alerts"
    SECURESCORECONTROLPROFILES = "secureScoreControlProfiles"
    SECURESCORES = "secureScores"

class Get5itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    IDDESC = "id desc"
    ACTIVITYGROUPNAME = "activityGroupName"
    ACTIVITYGROUPNAMEDESC = "activityGroupName desc"
    ASSIGNEDTO = "assignedTo"
    ASSIGNEDTODESC = "assignedTo desc"
    AZURESUBSCRIPTIONID = "azureSubscriptionId"
    AZURESUBSCRIPTIONIDDESC = "azureSubscriptionId desc"
    AZURETENANTID = "azureTenantId"
    AZURETENANTIDDESC = "azureTenantId desc"
    CATEGORY = "category"
    CATEGORYDESC = "category desc"
    CLOSEDDATETIME = "closedDateTime"
    CLOSEDDATETIMEDESC = "closedDateTime desc"
    CLOUDAPPSTATES = "cloudAppStates"
    CLOUDAPPSTATESDESC = "cloudAppStates desc"
    COMMENTS = "comments"
    COMMENTSDESC = "comments desc"
    CONFIDENCE = "confidence"
    CONFIDENCEDESC = "confidence desc"
    CREATEDDATETIME = "createdDateTime"
    CREATEDDATETIMEDESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTIONDESC = "description desc"
    DETECTIONIDS = "detectionIds"
    DETECTIONIDSDESC = "detectionIds desc"
    EVENTDATETIME = "eventDateTime"
    EVENTDATETIMEDESC = "eventDateTime desc"
    FEEDBACK = "feedback"
    FEEDBACKDESC = "feedback desc"
    FILESTATES = "fileStates"
    FILESTATESDESC = "fileStates desc"
    HISTORYSTATES = "historyStates"
    HISTORYSTATESDESC = "historyStates desc"
    HOSTSTATES = "hostStates"
    HOSTSTATESDESC = "hostStates desc"
    INCIDENTIDS = "incidentIds"
    INCIDENTIDSDESC = "incidentIds desc"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    LASTMODIFIEDDATETIMEDESC = "lastModifiedDateTime desc"
    MALWARESTATES = "malwareStates"
    MALWARESTATESDESC = "malwareStates desc"
    NETWORKCONNECTIONS = "networkConnections"
    NETWORKCONNECTIONSDESC = "networkConnections desc"
    PROCESSES = "processes"
    PROCESSESDESC = "processes desc"
    RECOMMENDEDACTIONS = "recommendedActions"
    RECOMMENDEDACTIONSDESC = "recommendedActions desc"
    REGISTRYKEYSTATES = "registryKeyStates"
    REGISTRYKEYSTATESDESC = "registryKeyStates desc"
    SECURITYRESOURCES = "securityResources"
    SECURITYRESOURCESDESC = "securityResources desc"
    SEVERITY = "severity"
    SEVERITYDESC = "severity desc"
    SOURCEMATERIALS = "sourceMaterials"
    SOURCEMATERIALSDESC = "sourceMaterials desc"
    STATUS = "status"
    STATUSDESC = "status desc"
    TAGS = "tags"
    TAGSDESC = "tags desc"
    TITLE = "title"
    TITLEDESC = "title desc"
    TRIGGERS = "triggers"
    TRIGGERSDESC = "triggers desc"
    USERSTATES = "userStates"
    USERSTATESDESC = "userStates desc"
    VENDORINFORMATION = "vendorInformation"
    VENDORINFORMATIONDESC = "vendorInformation desc"
    VULNERABILITYSTATES = "vulnerabilityStates"
    VULNERABILITYSTATESDESC = "vulnerabilityStates desc"

class Get6itemsitem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIVITYGROUPNAME = "activityGroupName"
    ASSIGNEDTO = "assignedTo"
    AZURESUBSCRIPTIONID = "azureSubscriptionId"
    AZURETENANTID = "azureTenantId"
    CATEGORY = "category"
    CLOSEDDATETIME = "closedDateTime"
    CLOUDAPPSTATES = "cloudAppStates"
    COMMENTS = "comments"
    CONFIDENCE = "confidence"
    CREATEDDATETIME = "createdDateTime"
    DESCRIPTION = "description"
    DETECTIONIDS = "detectionIds"
    EVENTDATETIME = "eventDateTime"
    FEEDBACK = "feedback"
    FILESTATES = "fileStates"
    HISTORYSTATES = "historyStates"
    HOSTSTATES = "hostStates"
    INCIDENTIDS = "incidentIds"
    LASTMODIFIEDDATETIME = "lastModifiedDateTime"
    MALWARESTATES = "malwareStates"
    NETWORKCONNECTIONS = "networkConnections"
    PROCESSES = "processes"
    RECOMMENDEDACTIONS = "recommendedActions"
    REGISTRYKEYSTATES = "registryKeyStates"
    SECURITYRESOURCES = "securityResources"
    SEVERITY = "severity"
    SOURCEMATERIALS = "sourceMaterials"
    STATUS = "status"
    TAGS = "tags"
    TITLE = "title"
    TRIGGERS = "triggers"
    USERSTATES = "userStates"
    VENDORINFORMATION = "vendorInformation"
    VULNERABILITYSTATES = "vulnerabilityStates"

class Microsoftgraphalertfeedback(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    TRUEPOSITIVE = "truePositive"
    FALSEPOSITIVE = "falsePositive"
    BENIGNPOSITIVE = "benignPositive"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphalertseverity(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    INFORMATIONAL = "informational"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphalertstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    NEWALERT = "newAlert"
    INPROGRESS = "inProgress"
    RESOLVED = "resolved"
    DISMISSED = "dismissed"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphconnectiondirection(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    INBOUND = "inbound"
    OUTBOUND = "outbound"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphconnectionstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    ATTEMPTED = "attempted"
    SUCCEEDED = "succeeded"
    BLOCKED = "blocked"
    FAILED = "failed"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphemailrole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    SENDER = "sender"
    RECIPIENT = "recipient"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphfilehashtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    SHA1 = "sha1"
    SHA256 = "sha256"
    MD5 = "md5"
    AUTHENTICODEHASH256 = "authenticodeHash256"
    LSHASH = "lsHash"
    CTPH = "ctph"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphlogontype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    INTERACTIVE = "interactive"
    REMOTEINTERACTIVE = "remoteInteractive"
    NETWORK = "network"
    BATCH = "batch"
    SERVICE = "service"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphprocessintegritylevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    UNTRUSTED = "untrusted"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    SYSTEM = "system"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphregistryhive(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    CURRENTCONFIG = "currentConfig"
    CURRENTUSER = "currentUser"
    LOCALMACHINESAM = "localMachineSam"
    LOCALMACHINESECURITY = "localMachineSecurity"
    LOCALMACHINESOFTWARE = "localMachineSoftware"
    LOCALMACHINESYSTEM = "localMachineSystem"
    USERSDEFAULT = "usersDefault"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphregistryoperation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    CREATE = "create"
    MODIFY = "modify"
    DELETE = "delete"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphregistryvaluetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    BINARY = "binary"
    DWORD = "dword"
    DWORDLITTLEENDIAN = "dwordLittleEndian"
    DWORDBIGENDIAN = "dwordBigEndian"
    EXPANDSZ = "expandSz"
    LINK = "link"
    MULTISZ = "multiSz"
    NONE = "none"
    QWORD = "qword"
    QWORDLITTLEENDIAN = "qwordlittleEndian"
    SZ = "sz"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphsecuritynetworkprotocol(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    IP = "ip"
    ICMP = "icmp"
    UNKNOWN = "unknown"
    IGMP = "igmp"
    GGP = "ggp"
    IPV4 = "ipv4"
    TCP = "tcp"
    PUP = "pup"
    UDP = "udp"
    IDP = "idp"
    IPV6 = "ipv6"
    IPV6ROUTINGHEADER = "ipv6RoutingHeader"
    IPV6FRAGMENTHEADER = "ipv6FragmentHeader"
    IPSECENCAPSULATINGSECURITYPAYLOAD = "ipSecEncapsulatingSecurityPayload"
    IPSECAUTHENTICATIONHEADER = "ipSecAuthenticationHeader"
    ICMPV6 = "icmpV6"
    IPV6NONEXTHEADER = "ipv6NoNextHeader"
    IPV6DESTINATIONOPTIONS = "ipv6DestinationOptions"
    ND = "nd"
    RAW = "raw"
    IPX = "ipx"
    SPX = "spx"
    SPXII = "spxII"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphsecurityresourcetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    ATTACKED = "attacked"
    RELATED = "related"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"

class Microsoftgraphuseraccountsecuritytype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    STANDARD = "standard"
    POWER = "power"
    ADMINISTRATOR = "administrator"
    UNKNOWNFUTUREVALUE = "unknownFutureValue"
