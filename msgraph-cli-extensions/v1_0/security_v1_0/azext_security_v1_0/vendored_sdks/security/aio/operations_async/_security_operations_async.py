# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class SecurityOperations:
    """SecurityOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~security.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_alert(
        self,
        orderby: Optional[List[Union[str, "models.Get5ItemsItem"]]] = None,
        select: Optional[List[Union[str, "models.Get6ItemsItem"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfAlert"]:
        """Get alerts from Security.

        Get alerts from Security.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~security.models.Get5ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~security.models.Get6ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAlert or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~security.models.CollectionOfAlert]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAlert"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_alert.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAlert', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_alert.metadata = {'url': '/Security/alerts'}  # type: ignore

    async def create_alert(
        self,
        body: "models.MicrosoftGraphAlert",
        **kwargs
    ) -> "models.MicrosoftGraphAlert":
        """Create new navigation property to alerts for Security.

        Create new navigation property to alerts for Security.

        :param body: New navigation property.
        :type body: ~security.models.MicrosoftGraphAlert
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAlert, or the result of cls(response)
        :rtype: ~security.models.MicrosoftGraphAlert
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAlert"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_alert.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAlert')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAlert', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_alert.metadata = {'url': '/Security/alerts'}  # type: ignore

    async def get_alert(
        self,
        alert_id: str,
        select: Optional[List[Union[str, "models.Enum19"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAlert":
        """Get alerts from Security.

        Get alerts from Security.

        :param alert_id: key: id of alert.
        :type alert_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~security.models.Enum19]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAlert, or the result of cls(response)
        :rtype: ~security.models.MicrosoftGraphAlert
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAlert"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_alert.metadata['url']  # type: ignore
        path_format_arguments = {
            'alert-id': self._serialize.url("alert_id", alert_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAlert', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_alert.metadata = {'url': '/Security/alerts/{alert-id}'}  # type: ignore

    async def update_alert(
        self,
        alert_id: str,
        body: "models.MicrosoftGraphAlert",
        **kwargs
    ) -> None:
        """Update the navigation property alerts in Security.

        Update the navigation property alerts in Security.

        :param alert_id: key: id of alert.
        :type alert_id: str
        :param body: New navigation property values.
        :type body: ~security.models.MicrosoftGraphAlert
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_alert.metadata['url']  # type: ignore
        path_format_arguments = {
            'alert-id': self._serialize.url("alert_id", alert_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAlert')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_alert.metadata = {'url': '/Security/alerts/{alert-id}'}  # type: ignore

    async def delete_alert(
        self,
        alert_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property alerts for Security.

        Delete navigation property alerts for Security.

        :param alert_id: key: id of alert.
        :type alert_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_alert.metadata['url']  # type: ignore
        path_format_arguments = {
            'alert-id': self._serialize.url("alert_id", alert_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_alert.metadata = {'url': '/Security/alerts/{alert-id}'}  # type: ignore

    def list_secure_score_control_profile(
        self,
        orderby: Optional[List[Union[str, "models.Enum20"]]] = None,
        select: Optional[List[Union[str, "models.Enum21"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfSecureScoreControlProfile"]:
        """Get secureScoreControlProfiles from Security.

        Get secureScoreControlProfiles from Security.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~security.models.Enum20]
        :param select: Select properties to be returned.
        :type select: list[str or ~security.models.Enum21]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSecureScoreControlProfile or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~security.models.CollectionOfSecureScoreControlProfile]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSecureScoreControlProfile"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_secure_score_control_profile.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSecureScoreControlProfile', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_secure_score_control_profile.metadata = {'url': '/Security/secureScoreControlProfiles'}  # type: ignore

    async def create_secure_score_control_profile(
        self,
        id: Optional[str] = None,
        action_type: Optional[str] = None,
        action_url: Optional[str] = None,
        azure_tenant_id: Optional[str] = None,
        compliance_information: Optional[List["models.MicrosoftGraphComplianceInformation"]] = None,
        control_category: Optional[str] = None,
        control_state_updates: Optional[List["models.MicrosoftGraphSecureScoreControlStateUpdate"]] = None,
        deprecated: Optional[bool] = None,
        implementation_cost: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        max_score: Optional[float] = None,
        rank: Optional[int] = None,
        remediation: Optional[str] = None,
        remediation_impact: Optional[str] = None,
        service: Optional[str] = None,
        threats: Optional[List[str]] = None,
        tier: Optional[str] = None,
        title: Optional[str] = None,
        user_impact: Optional[str] = None,
        vendor_information: Optional["models.MicrosoftGraphSecurityVendorInformation"] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSecureScoreControlProfile":
        """Create new navigation property to secureScoreControlProfiles for Security.

        Create new navigation property to secureScoreControlProfiles for Security.

        :param id: Read-only.
        :type id: str
        :param action_type: Control action type (Config, Review, Behavior).
        :type action_type: str
        :param action_url: URL to where the control can be actioned.
        :type action_url: str
        :param azure_tenant_id: GUID string for tenant ID.
        :type azure_tenant_id: str
        :param compliance_information:
        :type compliance_information: list[~security.models.MicrosoftGraphComplianceInformation]
        :param control_category: Control action category (Identity, Data, Device, Apps,
         Infrastructure).
        :type control_category: str
        :param control_state_updates:
        :type control_state_updates: list[~security.models.MicrosoftGraphSecureScoreControlStateUpdate]
        :param deprecated: Flag to indicate if a control is depreciated.
        :type deprecated: bool
        :param implementation_cost: Resource cost of implemmentating control (low, moderate, high).
        :type implementation_cost: str
        :param last_modified_date_time: Time at which the control profile entity was last modified. The
         Timestamp type represents date and time.
        :type last_modified_date_time: ~datetime.datetime
        :param max_score: max attainable score for the control.
        :type max_score: float
        :param rank: Microsoft's stack ranking of control.
        :type rank: int
        :param remediation: Description of what the control will help remediate.
        :type remediation: str
        :param remediation_impact: Description of the impact on users of the remediation.
        :type remediation_impact: str
        :param service: Service that owns the control (Exchange, Sharepoint, Azure AD).
        :type service: str
        :param threats: List of threats the control mitigates
         (accountBreach,dataDeletion,dataExfiltration,dataSpillage,.
        :type threats: list[str]
        :param tier:
        :type tier: str
        :param title: Title of the control.
        :type title: str
        :param user_impact:
        :type user_impact: str
        :param vendor_information: securityVendorInformation.
        :type vendor_information: ~security.models.MicrosoftGraphSecurityVendorInformation
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSecureScoreControlProfile, or the result of cls(response)
        :rtype: ~security.models.MicrosoftGraphSecureScoreControlProfile
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSecureScoreControlProfile"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSecureScoreControlProfile(id=id, action_type=action_type, action_url=action_url, azure_tenant_id=azure_tenant_id, compliance_information=compliance_information, control_category=control_category, control_state_updates=control_state_updates, deprecated=deprecated, implementation_cost=implementation_cost, last_modified_date_time=last_modified_date_time, max_score=max_score, rank=rank, remediation=remediation, remediation_impact=remediation_impact, service=service, threats=threats, tier=tier, title=title, user_impact=user_impact, vendor_information=vendor_information)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_secure_score_control_profile.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSecureScoreControlProfile')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSecureScoreControlProfile', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_secure_score_control_profile.metadata = {'url': '/Security/secureScoreControlProfiles'}  # type: ignore

    async def get_secure_score_control_profile(
        self,
        secure_score_control_profile_id: str,
        select: Optional[List[Union[str, "models.Enum22"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSecureScoreControlProfile":
        """Get secureScoreControlProfiles from Security.

        Get secureScoreControlProfiles from Security.

        :param secure_score_control_profile_id: key: id of secureScoreControlProfile.
        :type secure_score_control_profile_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~security.models.Enum22]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSecureScoreControlProfile, or the result of cls(response)
        :rtype: ~security.models.MicrosoftGraphSecureScoreControlProfile
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSecureScoreControlProfile"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_secure_score_control_profile.metadata['url']  # type: ignore
        path_format_arguments = {
            'secureScoreControlProfile-id': self._serialize.url("secure_score_control_profile_id", secure_score_control_profile_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSecureScoreControlProfile', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_secure_score_control_profile.metadata = {'url': '/Security/secureScoreControlProfiles/{secureScoreControlProfile-id}'}  # type: ignore

    async def update_secure_score_control_profile(
        self,
        secure_score_control_profile_id: str,
        id: Optional[str] = None,
        action_type: Optional[str] = None,
        action_url: Optional[str] = None,
        azure_tenant_id: Optional[str] = None,
        compliance_information: Optional[List["models.MicrosoftGraphComplianceInformation"]] = None,
        control_category: Optional[str] = None,
        control_state_updates: Optional[List["models.MicrosoftGraphSecureScoreControlStateUpdate"]] = None,
        deprecated: Optional[bool] = None,
        implementation_cost: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        max_score: Optional[float] = None,
        rank: Optional[int] = None,
        remediation: Optional[str] = None,
        remediation_impact: Optional[str] = None,
        service: Optional[str] = None,
        threats: Optional[List[str]] = None,
        tier: Optional[str] = None,
        title: Optional[str] = None,
        user_impact: Optional[str] = None,
        vendor_information: Optional["models.MicrosoftGraphSecurityVendorInformation"] = None,
        **kwargs
    ) -> None:
        """Update the navigation property secureScoreControlProfiles in Security.

        Update the navigation property secureScoreControlProfiles in Security.

        :param secure_score_control_profile_id: key: id of secureScoreControlProfile.
        :type secure_score_control_profile_id: str
        :param id: Read-only.
        :type id: str
        :param action_type: Control action type (Config, Review, Behavior).
        :type action_type: str
        :param action_url: URL to where the control can be actioned.
        :type action_url: str
        :param azure_tenant_id: GUID string for tenant ID.
        :type azure_tenant_id: str
        :param compliance_information:
        :type compliance_information: list[~security.models.MicrosoftGraphComplianceInformation]
        :param control_category: Control action category (Identity, Data, Device, Apps,
         Infrastructure).
        :type control_category: str
        :param control_state_updates:
        :type control_state_updates: list[~security.models.MicrosoftGraphSecureScoreControlStateUpdate]
        :param deprecated: Flag to indicate if a control is depreciated.
        :type deprecated: bool
        :param implementation_cost: Resource cost of implemmentating control (low, moderate, high).
        :type implementation_cost: str
        :param last_modified_date_time: Time at which the control profile entity was last modified. The
         Timestamp type represents date and time.
        :type last_modified_date_time: ~datetime.datetime
        :param max_score: max attainable score for the control.
        :type max_score: float
        :param rank: Microsoft's stack ranking of control.
        :type rank: int
        :param remediation: Description of what the control will help remediate.
        :type remediation: str
        :param remediation_impact: Description of the impact on users of the remediation.
        :type remediation_impact: str
        :param service: Service that owns the control (Exchange, Sharepoint, Azure AD).
        :type service: str
        :param threats: List of threats the control mitigates
         (accountBreach,dataDeletion,dataExfiltration,dataSpillage,.
        :type threats: list[str]
        :param tier:
        :type tier: str
        :param title: Title of the control.
        :type title: str
        :param user_impact:
        :type user_impact: str
        :param vendor_information: securityVendorInformation.
        :type vendor_information: ~security.models.MicrosoftGraphSecurityVendorInformation
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSecureScoreControlProfile(id=id, action_type=action_type, action_url=action_url, azure_tenant_id=azure_tenant_id, compliance_information=compliance_information, control_category=control_category, control_state_updates=control_state_updates, deprecated=deprecated, implementation_cost=implementation_cost, last_modified_date_time=last_modified_date_time, max_score=max_score, rank=rank, remediation=remediation, remediation_impact=remediation_impact, service=service, threats=threats, tier=tier, title=title, user_impact=user_impact, vendor_information=vendor_information)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_secure_score_control_profile.metadata['url']  # type: ignore
        path_format_arguments = {
            'secureScoreControlProfile-id': self._serialize.url("secure_score_control_profile_id", secure_score_control_profile_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSecureScoreControlProfile')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_secure_score_control_profile.metadata = {'url': '/Security/secureScoreControlProfiles/{secureScoreControlProfile-id}'}  # type: ignore

    async def delete_secure_score_control_profile(
        self,
        secure_score_control_profile_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property secureScoreControlProfiles for Security.

        Delete navigation property secureScoreControlProfiles for Security.

        :param secure_score_control_profile_id: key: id of secureScoreControlProfile.
        :type secure_score_control_profile_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_secure_score_control_profile.metadata['url']  # type: ignore
        path_format_arguments = {
            'secureScoreControlProfile-id': self._serialize.url("secure_score_control_profile_id", secure_score_control_profile_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_secure_score_control_profile.metadata = {'url': '/Security/secureScoreControlProfiles/{secureScoreControlProfile-id}'}  # type: ignore

    def list_secure_score(
        self,
        orderby: Optional[List[Union[str, "models.Enum23"]]] = None,
        select: Optional[List[Union[str, "models.Enum24"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfSecureScore"]:
        """Get secureScores from Security.

        Get secureScores from Security.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~security.models.Enum23]
        :param select: Select properties to be returned.
        :type select: list[str or ~security.models.Enum24]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSecureScore or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~security.models.CollectionOfSecureScore]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSecureScore"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_secure_score.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSecureScore', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_secure_score.metadata = {'url': '/Security/secureScores'}  # type: ignore

    async def create_secure_score(
        self,
        id: Optional[str] = None,
        active_user_count: Optional[int] = None,
        average_comparative_scores: Optional[List["models.MicrosoftGraphAverageComparativeScore"]] = None,
        azure_tenant_id: Optional[str] = None,
        control_scores: Optional[List["models.MicrosoftGraphControlScore"]] = None,
        created_date_time: Optional[datetime.datetime] = None,
        current_score: Optional[float] = None,
        enabled_services: Optional[List[str]] = None,
        licensed_user_count: Optional[int] = None,
        max_score: Optional[float] = None,
        vendor_information: Optional["models.MicrosoftGraphSecurityVendorInformation"] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSecureScore":
        """Create new navigation property to secureScores for Security.

        Create new navigation property to secureScores for Security.

        :param id: Read-only.
        :type id: str
        :param active_user_count: Active user count of the given tenant.
        :type active_user_count: int
        :param average_comparative_scores: Average score by different scopes (for example, average by
         industry, average by seating) and control category (Identity, Data, Device, Apps,
         Infrastructure) within the scope.
        :type average_comparative_scores: list[~security.models.MicrosoftGraphAverageComparativeScore]
        :param azure_tenant_id: GUID string for tenant ID.
        :type azure_tenant_id: str
        :param control_scores: Contains tenant scores for a set of controls.
        :type control_scores: list[~security.models.MicrosoftGraphControlScore]
        :param created_date_time: The date when the entity is created.
        :type created_date_time: ~datetime.datetime
        :param current_score: Tenant current attained score on specified date.
        :type current_score: float
        :param enabled_services: Microsoft-provided services for the tenant (for example, Exchange
         online, Skype, Sharepoint).
        :type enabled_services: list[str]
        :param licensed_user_count: Licensed user count of the given tenant.
        :type licensed_user_count: int
        :param max_score: Tenant maximum possible score on specified date.
        :type max_score: float
        :param vendor_information: securityVendorInformation.
        :type vendor_information: ~security.models.MicrosoftGraphSecurityVendorInformation
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSecureScore, or the result of cls(response)
        :rtype: ~security.models.MicrosoftGraphSecureScore
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSecureScore"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSecureScore(id=id, active_user_count=active_user_count, average_comparative_scores=average_comparative_scores, azure_tenant_id=azure_tenant_id, control_scores=control_scores, created_date_time=created_date_time, current_score=current_score, enabled_services=enabled_services, licensed_user_count=licensed_user_count, max_score=max_score, vendor_information=vendor_information)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_secure_score.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSecureScore')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSecureScore', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_secure_score.metadata = {'url': '/Security/secureScores'}  # type: ignore

    async def get_secure_score(
        self,
        secure_score_id: str,
        select: Optional[List[Union[str, "models.Enum25"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSecureScore":
        """Get secureScores from Security.

        Get secureScores from Security.

        :param secure_score_id: key: id of secureScore.
        :type secure_score_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~security.models.Enum25]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSecureScore, or the result of cls(response)
        :rtype: ~security.models.MicrosoftGraphSecureScore
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSecureScore"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_secure_score.metadata['url']  # type: ignore
        path_format_arguments = {
            'secureScore-id': self._serialize.url("secure_score_id", secure_score_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSecureScore', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_secure_score.metadata = {'url': '/Security/secureScores/{secureScore-id}'}  # type: ignore

    async def update_secure_score(
        self,
        secure_score_id: str,
        id: Optional[str] = None,
        active_user_count: Optional[int] = None,
        average_comparative_scores: Optional[List["models.MicrosoftGraphAverageComparativeScore"]] = None,
        azure_tenant_id: Optional[str] = None,
        control_scores: Optional[List["models.MicrosoftGraphControlScore"]] = None,
        created_date_time: Optional[datetime.datetime] = None,
        current_score: Optional[float] = None,
        enabled_services: Optional[List[str]] = None,
        licensed_user_count: Optional[int] = None,
        max_score: Optional[float] = None,
        vendor_information: Optional["models.MicrosoftGraphSecurityVendorInformation"] = None,
        **kwargs
    ) -> None:
        """Update the navigation property secureScores in Security.

        Update the navigation property secureScores in Security.

        :param secure_score_id: key: id of secureScore.
        :type secure_score_id: str
        :param id: Read-only.
        :type id: str
        :param active_user_count: Active user count of the given tenant.
        :type active_user_count: int
        :param average_comparative_scores: Average score by different scopes (for example, average by
         industry, average by seating) and control category (Identity, Data, Device, Apps,
         Infrastructure) within the scope.
        :type average_comparative_scores: list[~security.models.MicrosoftGraphAverageComparativeScore]
        :param azure_tenant_id: GUID string for tenant ID.
        :type azure_tenant_id: str
        :param control_scores: Contains tenant scores for a set of controls.
        :type control_scores: list[~security.models.MicrosoftGraphControlScore]
        :param created_date_time: The date when the entity is created.
        :type created_date_time: ~datetime.datetime
        :param current_score: Tenant current attained score on specified date.
        :type current_score: float
        :param enabled_services: Microsoft-provided services for the tenant (for example, Exchange
         online, Skype, Sharepoint).
        :type enabled_services: list[str]
        :param licensed_user_count: Licensed user count of the given tenant.
        :type licensed_user_count: int
        :param max_score: Tenant maximum possible score on specified date.
        :type max_score: float
        :param vendor_information: securityVendorInformation.
        :type vendor_information: ~security.models.MicrosoftGraphSecurityVendorInformation
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSecureScore(id=id, active_user_count=active_user_count, average_comparative_scores=average_comparative_scores, azure_tenant_id=azure_tenant_id, control_scores=control_scores, created_date_time=created_date_time, current_score=current_score, enabled_services=enabled_services, licensed_user_count=licensed_user_count, max_score=max_score, vendor_information=vendor_information)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_secure_score.metadata['url']  # type: ignore
        path_format_arguments = {
            'secureScore-id': self._serialize.url("secure_score_id", secure_score_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSecureScore')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_secure_score.metadata = {'url': '/Security/secureScores/{secureScore-id}'}  # type: ignore

    async def delete_secure_score(
        self,
        secure_score_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property secureScores for Security.

        Delete navigation property secureScores for Security.

        :param secure_score_id: key: id of secureScore.
        :type secure_score_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_secure_score.metadata['url']  # type: ignore
        path_format_arguments = {
            'secureScore-id': self._serialize.url("secure_score_id", secure_score_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_secure_score.metadata = {'url': '/Security/secureScores/{secureScore-id}'}  # type: ignore
