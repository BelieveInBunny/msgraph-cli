# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class SchemaExtensionSchemaExtensionOperations(object):
    """SchemaExtensionSchemaExtensionOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~schema_extensions.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_schema_extension(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Get5ItemsItem"]]]
        select=None,  # type: Optional[List[Union[str, "models.Get6ItemsItem"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfSchemaExtension"]
        """Get entities from schemaExtensions.

        Get entities from schemaExtensions.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~schema_extensions.models.Get5ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~schema_extensions.models.Get6ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSchemaExtension or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~schema_extensions.models.CollectionOfSchemaExtension]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSchemaExtension"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_schema_extension.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSchemaExtension', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_schema_extension.metadata = {'url': '/schemaExtensions'}  # type: ignore

    def create_schema_extension(
        self,
        id=None,  # type: Optional[str]
        description=None,  # type: Optional[str]
        owner=None,  # type: Optional[str]
        properties=None,  # type: Optional[List["models.MicrosoftGraphExtensionSchemaProperty"]]
        status=None,  # type: Optional[str]
        target_types=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSchemaExtension"
        """Add new entity to schemaExtensions.

        Add new entity to schemaExtensions.

        :param id: Read-only.
        :type id: str
        :param description: Description for the schema extension.
        :type description: str
        :param owner: The appId of the application that is the owner of the schema extension. This
         property can be supplied on creation, to set the owner.  If not supplied, then the calling
         application's appId will be set as the owner. In either case, the signed-in user must be the
         owner of the application. Once set, this property is read-only and cannot be changed.
        :type owner: str
        :param properties: The collection of property names and types that make up the schema extension
         definition.
        :type properties: list[~schema_extensions.models.MicrosoftGraphExtensionSchemaProperty]
        :param status: The lifecycle state of the schema extension. Possible states are InDevelopment,
         Available, and Deprecated. Automatically set to InDevelopment on creation. Schema extensions
         provides more information on the possible state transitions and behaviors.
        :type status: str
        :param target_types: Set of Microsoft Graph types (that can support extensions) that the schema
         extension can be applied to. Select from contact, device, event, group, message, organization,
         post, or user.
        :type target_types: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSchemaExtension, or the result of cls(response)
        :rtype: ~schema_extensions.models.MicrosoftGraphSchemaExtension
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSchemaExtension"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphSchemaExtension(id=id, description=description, owner=owner, properties=properties, status=status, target_types=target_types)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_schema_extension.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphSchemaExtension')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSchemaExtension', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_schema_extension.metadata = {'url': '/schemaExtensions'}  # type: ignore

    def get_schema_extension(
        self,
        schema_extension_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Get1ItemsItem"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSchemaExtension"
        """Get entity from schemaExtensions by key.

        Get entity from schemaExtensions by key.

        :param schema_extension_id: key: id of schemaExtension.
        :type schema_extension_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~schema_extensions.models.Get1ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSchemaExtension, or the result of cls(response)
        :rtype: ~schema_extensions.models.MicrosoftGraphSchemaExtension
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSchemaExtension"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_schema_extension.metadata['url']  # type: ignore
        path_format_arguments = {
            'schemaExtension-id': self._serialize.url("schema_extension_id", schema_extension_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSchemaExtension', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_schema_extension.metadata = {'url': '/schemaExtensions/{schemaExtension-id}'}  # type: ignore

    def update_schema_extension(
        self,
        schema_extension_id,  # type: str
        id=None,  # type: Optional[str]
        description=None,  # type: Optional[str]
        owner=None,  # type: Optional[str]
        properties=None,  # type: Optional[List["models.MicrosoftGraphExtensionSchemaProperty"]]
        status=None,  # type: Optional[str]
        target_types=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update entity in schemaExtensions.

        Update entity in schemaExtensions.

        :param schema_extension_id: key: id of schemaExtension.
        :type schema_extension_id: str
        :param id: Read-only.
        :type id: str
        :param description: Description for the schema extension.
        :type description: str
        :param owner: The appId of the application that is the owner of the schema extension. This
         property can be supplied on creation, to set the owner.  If not supplied, then the calling
         application's appId will be set as the owner. In either case, the signed-in user must be the
         owner of the application. Once set, this property is read-only and cannot be changed.
        :type owner: str
        :param properties: The collection of property names and types that make up the schema extension
         definition.
        :type properties: list[~schema_extensions.models.MicrosoftGraphExtensionSchemaProperty]
        :param status: The lifecycle state of the schema extension. Possible states are InDevelopment,
         Available, and Deprecated. Automatically set to InDevelopment on creation. Schema extensions
         provides more information on the possible state transitions and behaviors.
        :type status: str
        :param target_types: Set of Microsoft Graph types (that can support extensions) that the schema
         extension can be applied to. Select from contact, device, event, group, message, organization,
         post, or user.
        :type target_types: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = models.MicrosoftGraphSchemaExtension(id=id, description=description, owner=owner, properties=properties, status=status, target_types=target_types)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_schema_extension.metadata['url']  # type: ignore
        path_format_arguments = {
            'schemaExtension-id': self._serialize.url("schema_extension_id", schema_extension_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphSchemaExtension')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_schema_extension.metadata = {'url': '/schemaExtensions/{schemaExtension-id}'}  # type: ignore

    def delete_schema_extension(
        self,
        schema_extension_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete entity from schemaExtensions.

        Delete entity from schemaExtensions.

        :param schema_extension_id: key: id of schemaExtension.
        :type schema_extension_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_schema_extension.metadata['url']  # type: ignore
        path_format_arguments = {
            'schemaExtension-id': self._serialize.url("schema_extension_id", schema_extension_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_schema_extension.metadata = {'url': '/schemaExtensions/{schemaExtension-id}'}  # type: ignore
