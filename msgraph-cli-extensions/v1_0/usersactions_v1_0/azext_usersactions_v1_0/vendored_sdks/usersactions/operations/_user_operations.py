# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class UserOperations(object):
    """UserOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~users_actions.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def assign_license(
        self,
        user_id,  # type: str
        add_licenses=None,  # type: Optional[List["models.MicrosoftGraphAssignedLicense"]]
        remove_licenses=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphUser"
        """Invoke action assignLicense.

        Invoke action assignLicense.

        :param user_id: key: id of user.
        :type user_id: str
        :param add_licenses:
        :type add_licenses: list[~users_actions.models.MicrosoftGraphAssignedLicense]
        :param remove_licenses:
        :type remove_licenses: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUser, or the result of cls(response)
        :rtype: ~users_actions.models.MicrosoftGraphUser
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUser"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsBfhtneUsersUserIdMicrosoftGraphAssignlicensePostRequestbodyContentApplicationJsonSchema(add_licenses=add_licenses, remove_licenses=remove_licenses)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.assign_license.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsBfhtneUsersUserIdMicrosoftGraphAssignlicensePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUser', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    assign_license.metadata = {'url': '/users/{user-id}/microsoft.graph.assignLicense'}  # type: ignore

    def change_password(
        self,
        user_id,  # type: str
        current_password=None,  # type: Optional[str]
        new_password=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action changePassword.

        Invoke action changePassword.

        :param user_id: key: id of user.
        :type user_id: str
        :param current_password:
        :type current_password: str
        :param new_password:
        :type new_password: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths3Mx0JpUsersUserIdMicrosoftGraphChangepasswordPostRequestbodyContentApplicationJsonSchema(current_password=current_password, new_password=new_password)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.change_password.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths3Mx0JpUsersUserIdMicrosoftGraphChangepasswordPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    change_password.metadata = {'url': '/users/{user-id}/microsoft.graph.changePassword'}  # type: ignore

    def check_member_group(
        self,
        user_id,  # type: str
        group_ids=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> List[str]
        """Invoke action checkMemberGroups.

        Invoke action checkMemberGroups.

        :param user_id: key: id of user.
        :type user_id: str
        :param group_ids:
        :type group_ids: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of str, or the result of cls(response)
        :rtype: list[str]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List[str]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsDyyrb2UsersUserIdMicrosoftGraphCheckmembergroupsPostRequestbodyContentApplicationJsonSchema(group_ids=group_ids)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.check_member_group.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsDyyrb2UsersUserIdMicrosoftGraphCheckmembergroupsPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[str]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    check_member_group.metadata = {'url': '/users/{user-id}/microsoft.graph.checkMemberGroups'}  # type: ignore

    def check_member_object(
        self,
        user_id,  # type: str
        ids=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> List[str]
        """Invoke action checkMemberObjects.

        Invoke action checkMemberObjects.

        :param user_id: key: id of user.
        :type user_id: str
        :param ids:
        :type ids: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of str, or the result of cls(response)
        :rtype: list[str]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List[str]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsJ9Yxi4UsersUserIdMicrosoftGraphCheckmemberobjectsPostRequestbodyContentApplicationJsonSchema(ids=ids)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.check_member_object.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsJ9Yxi4UsersUserIdMicrosoftGraphCheckmemberobjectsPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[str]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    check_member_object.metadata = {'url': '/users/{user-id}/microsoft.graph.checkMemberObjects'}  # type: ignore

    def export_personal_data(
        self,
        user_id,  # type: str
        storage_location=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action exportPersonalData.

        Invoke action exportPersonalData.

        :param user_id: key: id of user.
        :type user_id: str
        :param storage_location:
        :type storage_location: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths1Xhdcw6UsersUserIdMicrosoftGraphExportpersonaldataPostRequestbodyContentApplicationJsonSchema(storage_location=storage_location)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.export_personal_data.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths1Xhdcw6UsersUserIdMicrosoftGraphExportpersonaldataPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    export_personal_data.metadata = {'url': '/users/{user-id}/microsoft.graph.exportPersonalData'}  # type: ignore

    def find_meeting_time(
        self,
        user_id,  # type: str
        body,  # type: "models.PathsSzpbzfUsersUserIdMicrosoftGraphFindmeetingtimesPostRequestbodyContentApplicationJsonSchema"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMeetingTimeSuggestionsResult"
        """Invoke action findMeetingTimes.

        Invoke action findMeetingTimes.

        :param user_id: key: id of user.
        :type user_id: str
        :param body: Action parameters.
        :type body: ~users_actions.models.PathsSzpbzfUsersUserIdMicrosoftGraphFindmeetingtimesPostRequestbodyContentApplicationJsonSchema
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMeetingTimeSuggestionsResult, or the result of cls(response)
        :rtype: ~users_actions.models.MicrosoftGraphMeetingTimeSuggestionsResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMeetingTimeSuggestionsResult"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.find_meeting_time.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'PathsSzpbzfUsersUserIdMicrosoftGraphFindmeetingtimesPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMeetingTimeSuggestionsResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    find_meeting_time.metadata = {'url': '/users/{user-id}/microsoft.graph.findMeetingTimes'}  # type: ignore

    def get_mail_tip(
        self,
        user_id,  # type: str
        email_addresses=None,  # type: Optional[List[str]]
        mail_tips_options=None,  # type: Optional[Union[str, "models.MicrosoftGraphMailTipsType"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.MicrosoftGraphMailTips"]
        """Invoke action getMailTips.

        Invoke action getMailTips.

        :param user_id: key: id of user.
        :type user_id: str
        :param email_addresses:
        :type email_addresses: list[str]
        :param mail_tips_options:
        :type mail_tips_options: str or ~users_actions.models.MicrosoftGraphMailTipsType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphMailTips, or the result of cls(response)
        :rtype: list[~users_actions.models.MicrosoftGraphMailTips]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphMailTips"]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsPp15VbUsersUserIdMicrosoftGraphGetmailtipsPostRequestbodyContentApplicationJsonSchema(email_addresses=email_addresses, mail_tips_options=mail_tips_options)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.get_mail_tip.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsPp15VbUsersUserIdMicrosoftGraphGetmailtipsPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphMailTips]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mail_tip.metadata = {'url': '/users/{user-id}/microsoft.graph.getMailTips'}  # type: ignore

    def get_member_group(
        self,
        user_id,  # type: str
        security_enabled_only=False,  # type: Optional[bool]
        **kwargs  # type: Any
    ):
        # type: (...) -> List[str]
        """Invoke action getMemberGroups.

        Invoke action getMemberGroups.

        :param user_id: key: id of user.
        :type user_id: str
        :param security_enabled_only:
        :type security_enabled_only: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of str, or the result of cls(response)
        :rtype: list[str]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List[str]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths18H5WxmUsersUserIdMicrosoftGraphGetmembergroupsPostRequestbodyContentApplicationJsonSchema(security_enabled_only=security_enabled_only)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.get_member_group.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths18H5WxmUsersUserIdMicrosoftGraphGetmembergroupsPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[str]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_member_group.metadata = {'url': '/users/{user-id}/microsoft.graph.getMemberGroups'}  # type: ignore

    def get_member_object(
        self,
        user_id,  # type: str
        security_enabled_only=False,  # type: Optional[bool]
        **kwargs  # type: Any
    ):
        # type: (...) -> List[str]
        """Invoke action getMemberObjects.

        Invoke action getMemberObjects.

        :param user_id: key: id of user.
        :type user_id: str
        :param security_enabled_only:
        :type security_enabled_only: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of str, or the result of cls(response)
        :rtype: list[str]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List[str]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths5Y1AzfUsersUserIdMicrosoftGraphGetmemberobjectsPostRequestbodyContentApplicationJsonSchema(security_enabled_only=security_enabled_only)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.get_member_object.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths5Y1AzfUsersUserIdMicrosoftGraphGetmemberobjectsPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[str]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_member_object.metadata = {'url': '/users/{user-id}/microsoft.graph.getMemberObjects'}  # type: ignore

    def remove_all_device_from_management(
        self,
        user_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action removeAllDevicesFromManagement.

        Invoke action removeAllDevicesFromManagement.

        :param user_id: key: id of user.
        :type user_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.remove_all_device_from_management.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    remove_all_device_from_management.metadata = {'url': '/users/{user-id}/microsoft.graph.removeAllDevicesFromManagement'}  # type: ignore

    def reprocess_license_assignment(
        self,
        user_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphUser"
        """Invoke action reprocessLicenseAssignment.

        Invoke action reprocessLicenseAssignment.

        :param user_id: key: id of user.
        :type user_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUser, or the result of cls(response)
        :rtype: ~users_actions.models.MicrosoftGraphUser
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUser"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.reprocess_license_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUser', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    reprocess_license_assignment.metadata = {'url': '/users/{user-id}/microsoft.graph.reprocessLicenseAssignment'}  # type: ignore

    def restore(
        self,
        user_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphDirectoryObject"
        """Invoke action restore.

        Invoke action restore.

        :param user_id: key: id of user.
        :type user_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDirectoryObject, or the result of cls(response)
        :rtype: ~users_actions.models.MicrosoftGraphDirectoryObject
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDirectoryObject"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.restore.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDirectoryObject', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    restore.metadata = {'url': '/users/{user-id}/microsoft.graph.restore'}  # type: ignore

    def revoke_sign_in_session(
        self,
        user_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> bool
        """Invoke action revokeSignInSessions.

        Invoke action revokeSignInSessions.

        :param user_id: key: id of user.
        :type user_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: bool, or the result of cls(response)
        :rtype: bool
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[bool]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.revoke_sign_in_session.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('bool', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    revoke_sign_in_session.metadata = {'url': '/users/{user-id}/microsoft.graph.revokeSignInSessions'}  # type: ignore

    def send_mail(
        self,
        user_id,  # type: str
        save_to_sent_items=False,  # type: Optional[bool]
        id=None,  # type: Optional[str]
        categories=None,  # type: Optional[List[str]]
        change_key=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        bcc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        body_preview=None,  # type: Optional[str]
        cc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        conversation_id=None,  # type: Optional[str]
        conversation_index=None,  # type: Optional[bytes]
        flag=None,  # type: Optional["models.MicrosoftGraphFollowupFlag"]
        from_parameter=None,  # type: Optional["models.MicrosoftGraphRecipient"]
        has_attachments=None,  # type: Optional[bool]
        importance=None,  # type: Optional[Union[str, "models.MicrosoftGraphImportance"]]
        inference_classification=None,  # type: Optional[Union[str, "models.MicrosoftGraphInferenceClassificationType"]]
        internet_message_headers=None,  # type: Optional[List["models.MicrosoftGraphInternetMessageHeader"]]
        internet_message_id=None,  # type: Optional[str]
        is_delivery_receipt_requested=None,  # type: Optional[bool]
        is_draft=None,  # type: Optional[bool]
        is_read=None,  # type: Optional[bool]
        is_read_receipt_requested=None,  # type: Optional[bool]
        parent_folder_id=None,  # type: Optional[str]
        received_date_time=None,  # type: Optional[datetime.datetime]
        reply_to=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        sender=None,  # type: Optional["models.MicrosoftGraphRecipient"]
        sent_date_time=None,  # type: Optional[datetime.datetime]
        subject=None,  # type: Optional[str]
        to_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        unique_body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        web_link=None,  # type: Optional[str]
        attachments=None,  # type: Optional[List["models.MicrosoftGraphAttachment"]]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action sendMail.

        Invoke action sendMail.

        :param user_id: key: id of user.
        :type user_id: str
        :param save_to_sent_items:
        :type save_to_sent_items: bool
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param bcc_recipients: The Bcc: recipients for the message.
        :type bcc_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param body: itemBody.
        :type body: ~users_actions.models.MicrosoftGraphItemBody
        :param body_preview: The first 255 characters of the message body. It is in text format.
        :type body_preview: str
        :param cc_recipients: The Cc: recipients for the message.
        :type cc_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param conversation_id: The ID of the conversation the email belongs to.
        :type conversation_id: str
        :param conversation_index: Indicates the position of the message within the conversation.
        :type conversation_index: bytes
        :param flag: followupFlag.
        :type flag: ~users_actions.models.MicrosoftGraphFollowupFlag
        :param from_parameter: recipient.
        :type from_parameter: ~users_actions.models.MicrosoftGraphRecipient
        :param has_attachments: Indicates whether the message has attachments. This property doesn't
         include inline attachments, so if a message contains only inline attachments, this property is
         false. To verify the existence of inline attachments, parse the body property to look for a src
         attribute, such as :code:`<IMG src='cid:image001.jpg@01D26CD8.6C05F070'>`.
        :type has_attachments: bool
        :param importance:
        :type importance: str or ~users_actions.models.MicrosoftGraphImportance
        :param inference_classification:
        :type inference_classification: str or ~users_actions.models.MicrosoftGraphInferenceClassificationType
        :param internet_message_headers: A collection of message headers defined by RFC5322. The set
         includes message headers indicating the network path taken by a message from the sender to the
         recipient. It can also contain custom message headers that hold app data for the message.
         Returned only on applying a $select query option. Read-only.
        :type internet_message_headers: list[~users_actions.models.MicrosoftGraphInternetMessageHeader]
        :param internet_message_id: The message ID in the format specified by RFC2822.
        :type internet_message_id: str
        :param is_delivery_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_delivery_receipt_requested: bool
        :param is_draft: Indicates whether the message is a draft. A message is a draft if it hasn't
         been sent yet.
        :type is_draft: bool
        :param is_read: Indicates whether the message has been read.
        :type is_read: bool
        :param is_read_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_read_receipt_requested: bool
        :param parent_folder_id: The unique identifier for the message's parent mailFolder.
        :type parent_folder_id: str
        :param received_date_time: The date and time the message was received.
        :type received_date_time: ~datetime.datetime
        :param reply_to: The email addresses to use when replying.
        :type reply_to: list[~users_actions.models.MicrosoftGraphRecipient]
        :param sender: recipient.
        :type sender: ~users_actions.models.MicrosoftGraphRecipient
        :param sent_date_time: The date and time the message was sent.
        :type sent_date_time: ~datetime.datetime
        :param subject: The subject of the message.
        :type subject: str
        :param to_recipients: The To: recipients for the message.
        :type to_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param unique_body: itemBody.
        :type unique_body: ~users_actions.models.MicrosoftGraphItemBody
        :param web_link: The URL to open the message in Outlook Web App.You can append an ispopout
         argument to the end of the URL to change how the message is displayed. If ispopout is not
         present or if it is set to 1, then the message is shown in a popout window. If ispopout is set
         to 0, then the browser will show the message in the Outlook Web App review pane.The message
         will open in the browser if you are logged in to your mailbox via Outlook Web App. You will be
         prompted to login if you are not already logged in with the browser.This URL can be accessed
         from within an iFrame.
        :type web_link: str
        :param attachments: The fileAttachment and itemAttachment attachments for the message.
        :type attachments: list[~users_actions.models.MicrosoftGraphAttachment]
        :param extensions: The collection of open extensions defined for the message. Nullable.
        :type extensions: list[~users_actions.models.MicrosoftGraphExtension]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the message. Nullable.
        :type multi_value_extended_properties: list[~users_actions.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the message. Nullable.
        :type single_value_extended_properties: list[~users_actions.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsFh5OjtUsersUserIdMicrosoftGraphSendmailPostRequestbodyContentApplicationJsonSchema(save_to_sent_items=save_to_sent_items, id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, bcc_recipients=bcc_recipients, body=body, body_preview=body_preview, cc_recipients=cc_recipients, conversation_id=conversation_id, conversation_index=conversation_index, flag=flag, from_property=from_parameter, has_attachments=has_attachments, importance=importance, inference_classification=inference_classification, internet_message_headers=internet_message_headers, internet_message_id=internet_message_id, is_delivery_receipt_requested=is_delivery_receipt_requested, is_draft=is_draft, is_read=is_read, is_read_receipt_requested=is_read_receipt_requested, parent_folder_id=parent_folder_id, received_date_time=received_date_time, reply_to=reply_to, sender=sender, sent_date_time=sent_date_time, subject=subject, to_recipients=to_recipients, unique_body=unique_body, web_link=web_link, attachments=attachments, extensions=extensions, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.send_mail.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsFh5OjtUsersUserIdMicrosoftGraphSendmailPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    send_mail.metadata = {'url': '/users/{user-id}/microsoft.graph.sendMail'}  # type: ignore

    def translate_exchange_id(
        self,
        user_id,  # type: str
        input_ids=None,  # type: Optional[List[str]]
        target_id_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphExchangeIdFormat"]]
        source_id_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphExchangeIdFormat"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.MicrosoftGraphConvertIdResult"]
        """Invoke action translateExchangeIds.

        Invoke action translateExchangeIds.

        :param user_id: key: id of user.
        :type user_id: str
        :param input_ids:
        :type input_ids: list[str]
        :param target_id_type:
        :type target_id_type: str or ~users_actions.models.MicrosoftGraphExchangeIdFormat
        :param source_id_type:
        :type source_id_type: str or ~users_actions.models.MicrosoftGraphExchangeIdFormat
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphConvertIdResult, or the result of cls(response)
        :rtype: list[~users_actions.models.MicrosoftGraphConvertIdResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphConvertIdResult"]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsHqegrcUsersUserIdMicrosoftGraphTranslateexchangeidsPostRequestbodyContentApplicationJsonSchema(input_ids=input_ids, target_id_type=target_id_type, source_id_type=source_id_type)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.translate_exchange_id.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsHqegrcUsersUserIdMicrosoftGraphTranslateexchangeidsPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphConvertIdResult]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    translate_exchange_id.metadata = {'url': '/users/{user-id}/microsoft.graph.translateExchangeIds'}  # type: ignore

    def wipe_managed_app_registration_by_device_tag(
        self,
        user_id,  # type: str
        device_tag=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action wipeManagedAppRegistrationsByDeviceTag.

        Invoke action wipeManagedAppRegistrationsByDeviceTag.

        :param user_id: key: id of user.
        :type user_id: str
        :param device_tag:
        :type device_tag: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsVloam1UsersUserIdMicrosoftGraphWipemanagedappregistrationsbydevicetagPostRequestbodyContentApplicationJsonSchema(device_tag=device_tag)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.wipe_managed_app_registration_by_device_tag.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsVloam1UsersUserIdMicrosoftGraphWipemanagedappregistrationsbydevicetagPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    wipe_managed_app_registration_by_device_tag.metadata = {'url': '/users/{user-id}/microsoft.graph.wipeManagedAppRegistrationsByDeviceTag'}  # type: ignore

    def get_available_extension_property(
        self,
        is_synced_from_on_premises=False,  # type: Optional[bool]
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.MicrosoftGraphExtensionProperty"]
        """Invoke action getAvailableExtensionProperties.

        Invoke action getAvailableExtensionProperties.

        :param is_synced_from_on_premises:
        :type is_synced_from_on_premises: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphExtensionProperty, or the result of cls(response)
        :rtype: list[~users_actions.models.MicrosoftGraphExtensionProperty]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphExtensionProperty"]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths1RkkrvbUsersMicrosoftGraphGetavailableextensionpropertiesPostRequestbodyContentApplicationJsonSchema(is_synced_from_on_premises=is_synced_from_on_premises)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.get_available_extension_property.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths1RkkrvbUsersMicrosoftGraphGetavailableextensionpropertiesPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphExtensionProperty]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_available_extension_property.metadata = {'url': '/users/microsoft.graph.getAvailableExtensionProperties'}  # type: ignore

    def get_by_id(
        self,
        ids=None,  # type: Optional[List[str]]
        types=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.MicrosoftGraphDirectoryObject"]
        """Invoke action getByIds.

        Invoke action getByIds.

        :param ids:
        :type ids: list[str]
        :param types:
        :type types: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphDirectoryObject, or the result of cls(response)
        :rtype: list[~users_actions.models.MicrosoftGraphDirectoryObject]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphDirectoryObject"]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsBjm3ZyUsersMicrosoftGraphGetbyidsPostRequestbodyContentApplicationJsonSchema(ids=ids, types=types)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.get_by_id.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsBjm3ZyUsersMicrosoftGraphGetbyidsPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphDirectoryObject]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_by_id.metadata = {'url': '/users/microsoft.graph.getByIds'}  # type: ignore

    def validate_property(
        self,
        entity_type=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        mail_nickname=None,  # type: Optional[str]
        on_behalf_of_user_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action validateProperties.

        Invoke action validateProperties.

        :param entity_type:
        :type entity_type: str
        :param display_name:
        :type display_name: str
        :param mail_nickname:
        :type mail_nickname: str
        :param on_behalf_of_user_id:
        :type on_behalf_of_user_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths1Tz6Rb9UsersMicrosoftGraphValidatepropertiesPostRequestbodyContentApplicationJsonSchema(entity_type=entity_type, display_name=display_name, mail_nickname=mail_nickname, on_behalf_of_user_id=on_behalf_of_user_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.validate_property.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths1Tz6Rb9UsersMicrosoftGraphValidatepropertiesPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    validate_property.metadata = {'url': '/users/microsoft.graph.validateProperties'}  # type: ignore
