# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines


def usersactions_userscalendarviewattachment_create_upload_session(client,
                                                                   user_id,
                                                                   event_id,
                                                                   attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(user_id=user_id,
                                        event_id=event_id,
                                        body=body)


def usersactions_userscalendarviewcalendar_get_schedule(client,
                                                        user_id,
                                                        event_id,
                                                        schedules=None,
                                                        end_time=None,
                                                        start_time=None,
                                                        availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(user_id=user_id,
                               event_id=event_id,
                               body=body)


def usersactions_userscalendarviewinstance_accept(client,
                                                  user_id,
                                                  event_id,
                                                  event_id1,
                                                  comment=None,
                                                  send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def usersactions_userscalendarviewinstance_decline(client,
                                                   user_id,
                                                   event_id,
                                                   event_id1,
                                                   comment=None,
                                                   send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def usersactions_userscalendarviewinstance_dismiss_reminder(client,
                                                            user_id,
                                                            event_id,
                                                            event_id1):
    return client.dismiss_reminder(user_id=user_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def usersactions_userscalendarviewinstance_snooze_reminder(client,
                                                           user_id,
                                                           event_id,
                                                           event_id1,
                                                           new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def usersactions_userscalendarviewinstance_tentatively_accept(client,
                                                              user_id,
                                                              event_id,
                                                              event_id1,
                                                              comment=None,
                                                              send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def usersactions_userscalendarview_accept(client,
                                          user_id,
                                          event_id,
                                          comment=None,
                                          send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         event_id=event_id,
                         body=body)


def usersactions_userscalendarview_decline(client,
                                           user_id,
                                           event_id,
                                           comment=None,
                                           send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          event_id=event_id,
                          body=body)


def usersactions_userscalendarview_dismiss_reminder(client,
                                                    user_id,
                                                    event_id):
    return client.dismiss_reminder(user_id=user_id,
                                   event_id=event_id)


def usersactions_userscalendarview_snooze_reminder(client,
                                                   user_id,
                                                   event_id,
                                                   new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  event_id=event_id,
                                  body=body)


def usersactions_userscalendarview_tentatively_accept(client,
                                                      user_id,
                                                      event_id,
                                                      comment=None,
                                                      send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     event_id=event_id,
                                     body=body)


def usersactions_userscalendareventsattachment_create_upload_session(client,
                                                                     user_id,
                                                                     event_id,
                                                                     attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(user_id=user_id,
                                        event_id=event_id,
                                        body=body)


def usersactions_userscalendareventscalendar_get_schedule(client,
                                                          user_id,
                                                          event_id,
                                                          schedules=None,
                                                          end_time=None,
                                                          start_time=None,
                                                          availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(user_id=user_id,
                               event_id=event_id,
                               body=body)


def usersactions_userscalendareventsinstance_accept(client,
                                                    user_id,
                                                    event_id,
                                                    event_id1,
                                                    comment=None,
                                                    send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def usersactions_userscalendareventsinstance_decline(client,
                                                     user_id,
                                                     event_id,
                                                     event_id1,
                                                     comment=None,
                                                     send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def usersactions_userscalendareventsinstance_dismiss_reminder(client,
                                                              user_id,
                                                              event_id,
                                                              event_id1):
    return client.dismiss_reminder(user_id=user_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def usersactions_userscalendareventsinstance_snooze_reminder(client,
                                                             user_id,
                                                             event_id,
                                                             event_id1,
                                                             new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def usersactions_userscalendareventsinstance_tentatively_accept(client,
                                                                user_id,
                                                                event_id,
                                                                event_id1,
                                                                comment=None,
                                                                send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def usersactions_userscalendarevent_accept(client,
                                           user_id,
                                           event_id,
                                           comment=None,
                                           send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         event_id=event_id,
                         body=body)


def usersactions_userscalendarevent_decline(client,
                                            user_id,
                                            event_id,
                                            comment=None,
                                            send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          event_id=event_id,
                          body=body)


def usersactions_userscalendarevent_dismiss_reminder(client,
                                                     user_id,
                                                     event_id):
    return client.dismiss_reminder(user_id=user_id,
                                   event_id=event_id)


def usersactions_userscalendarevent_snooze_reminder(client,
                                                    user_id,
                                                    event_id,
                                                    new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  event_id=event_id,
                                  body=body)


def usersactions_userscalendarevent_tentatively_accept(client,
                                                       user_id,
                                                       event_id,
                                                       comment=None,
                                                       send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     event_id=event_id,
                                     body=body)


def usersactions_userscalendar_get_schedule(client,
                                            user_id,
                                            schedules=None,
                                            end_time=None,
                                            start_time=None,
                                            availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(user_id=user_id,
                               body=body)


def usersactions_userscalendargroupscalendarscalendarviewattachment_create_upload_session(client,
                                                                                          user_id,
                                                                                          calendar_group_id,
                                                                                          calendar_id,
                                                                                          event_id,
                                                                                          attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(user_id=user_id,
                                        calendar_group_id=calendar_group_id,
                                        calendar_id=calendar_id,
                                        event_id=event_id,
                                        body=body)


def usersactions_userscalendargroupscalendarscalendarviewcalendar_get_schedule(client,
                                                                               user_id,
                                                                               calendar_group_id,
                                                                               calendar_id,
                                                                               event_id,
                                                                               schedules=None,
                                                                               end_time=None,
                                                                               start_time=None,
                                                                               availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(user_id=user_id,
                               calendar_group_id=calendar_group_id,
                               calendar_id=calendar_id,
                               event_id=event_id,
                               body=body)


def usersactions_userscalendargroupscalendarscalendarviewinstance_accept(client,
                                                                         user_id,
                                                                         calendar_group_id,
                                                                         calendar_id,
                                                                         event_id,
                                                                         event_id1,
                                                                         comment=None,
                                                                         send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         calendar_group_id=calendar_group_id,
                         calendar_id=calendar_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def usersactions_userscalendargroupscalendarscalendarviewinstance_decline(client,
                                                                          user_id,
                                                                          calendar_group_id,
                                                                          calendar_id,
                                                                          event_id,
                                                                          event_id1,
                                                                          comment=None,
                                                                          send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          calendar_group_id=calendar_group_id,
                          calendar_id=calendar_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def usersactions_userscalendargroupscalendarscalendarviewinstance_dismiss_reminder(client,
                                                                                   user_id,
                                                                                   calendar_group_id,
                                                                                   calendar_id,
                                                                                   event_id,
                                                                                   event_id1):
    return client.dismiss_reminder(user_id=user_id,
                                   calendar_group_id=calendar_group_id,
                                   calendar_id=calendar_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def usersactions_userscalendargroupscalendarscalendarviewinstance_snooze_reminder(client,
                                                                                  user_id,
                                                                                  calendar_group_id,
                                                                                  calendar_id,
                                                                                  event_id,
                                                                                  event_id1,
                                                                                  new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  calendar_group_id=calendar_group_id,
                                  calendar_id=calendar_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def usersactions_userscalendargroupscalendarscalendarviewinstance_tentatively_accept(client,
                                                                                     user_id,
                                                                                     calendar_group_id,
                                                                                     calendar_id,
                                                                                     event_id,
                                                                                     event_id1,
                                                                                     comment=None,
                                                                                     send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     calendar_group_id=calendar_group_id,
                                     calendar_id=calendar_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def usersactions_userscalendargroupscalendarscalendarview_accept(client,
                                                                 user_id,
                                                                 calendar_group_id,
                                                                 calendar_id,
                                                                 event_id,
                                                                 comment=None,
                                                                 send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         calendar_group_id=calendar_group_id,
                         calendar_id=calendar_id,
                         event_id=event_id,
                         body=body)


def usersactions_userscalendargroupscalendarscalendarview_decline(client,
                                                                  user_id,
                                                                  calendar_group_id,
                                                                  calendar_id,
                                                                  event_id,
                                                                  comment=None,
                                                                  send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          calendar_group_id=calendar_group_id,
                          calendar_id=calendar_id,
                          event_id=event_id,
                          body=body)


def usersactions_userscalendargroupscalendarscalendarview_dismiss_reminder(client,
                                                                           user_id,
                                                                           calendar_group_id,
                                                                           calendar_id,
                                                                           event_id):
    return client.dismiss_reminder(user_id=user_id,
                                   calendar_group_id=calendar_group_id,
                                   calendar_id=calendar_id,
                                   event_id=event_id)


def usersactions_userscalendargroupscalendarscalendarview_snooze_reminder(client,
                                                                          user_id,
                                                                          calendar_group_id,
                                                                          calendar_id,
                                                                          event_id,
                                                                          new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  calendar_group_id=calendar_group_id,
                                  calendar_id=calendar_id,
                                  event_id=event_id,
                                  body=body)


def usersactions_userscalendargroupscalendarscalendarview_tentatively_accept(client,
                                                                             user_id,
                                                                             calendar_group_id,
                                                                             calendar_id,
                                                                             event_id,
                                                                             comment=None,
                                                                             send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     calendar_group_id=calendar_group_id,
                                     calendar_id=calendar_id,
                                     event_id=event_id,
                                     body=body)


def usersactions_userscalendargroupscalendarseventsattachment_create_upload_session(client,
                                                                                    user_id,
                                                                                    calendar_group_id,
                                                                                    calendar_id,
                                                                                    event_id,
                                                                                    attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(user_id=user_id,
                                        calendar_group_id=calendar_group_id,
                                        calendar_id=calendar_id,
                                        event_id=event_id,
                                        body=body)


def usersactions_userscalendargroupscalendarseventscalendar_get_schedule(client,
                                                                         user_id,
                                                                         calendar_group_id,
                                                                         calendar_id,
                                                                         event_id,
                                                                         schedules=None,
                                                                         end_time=None,
                                                                         start_time=None,
                                                                         availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(user_id=user_id,
                               calendar_group_id=calendar_group_id,
                               calendar_id=calendar_id,
                               event_id=event_id,
                               body=body)


def usersactions_userscalendargroupscalendarseventsinstance_accept(client,
                                                                   user_id,
                                                                   calendar_group_id,
                                                                   calendar_id,
                                                                   event_id,
                                                                   event_id1,
                                                                   comment=None,
                                                                   send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         calendar_group_id=calendar_group_id,
                         calendar_id=calendar_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def usersactions_userscalendargroupscalendarseventsinstance_decline(client,
                                                                    user_id,
                                                                    calendar_group_id,
                                                                    calendar_id,
                                                                    event_id,
                                                                    event_id1,
                                                                    comment=None,
                                                                    send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          calendar_group_id=calendar_group_id,
                          calendar_id=calendar_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def usersactions_userscalendargroupscalendarseventsinstance_dismiss_reminder(client,
                                                                             user_id,
                                                                             calendar_group_id,
                                                                             calendar_id,
                                                                             event_id,
                                                                             event_id1):
    return client.dismiss_reminder(user_id=user_id,
                                   calendar_group_id=calendar_group_id,
                                   calendar_id=calendar_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def usersactions_userscalendargroupscalendarseventsinstance_snooze_reminder(client,
                                                                            user_id,
                                                                            calendar_group_id,
                                                                            calendar_id,
                                                                            event_id,
                                                                            event_id1,
                                                                            new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  calendar_group_id=calendar_group_id,
                                  calendar_id=calendar_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def usersactions_userscalendargroupscalendarseventsinstance_tentatively_accept(client,
                                                                               user_id,
                                                                               calendar_group_id,
                                                                               calendar_id,
                                                                               event_id,
                                                                               event_id1,
                                                                               comment=None,
                                                                               send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     calendar_group_id=calendar_group_id,
                                     calendar_id=calendar_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def usersactions_userscalendargroupscalendarsevent_accept(client,
                                                          user_id,
                                                          calendar_group_id,
                                                          calendar_id,
                                                          event_id,
                                                          comment=None,
                                                          send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         calendar_group_id=calendar_group_id,
                         calendar_id=calendar_id,
                         event_id=event_id,
                         body=body)


def usersactions_userscalendargroupscalendarsevent_decline(client,
                                                           user_id,
                                                           calendar_group_id,
                                                           calendar_id,
                                                           event_id,
                                                           comment=None,
                                                           send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          calendar_group_id=calendar_group_id,
                          calendar_id=calendar_id,
                          event_id=event_id,
                          body=body)


def usersactions_userscalendargroupscalendarsevent_dismiss_reminder(client,
                                                                    user_id,
                                                                    calendar_group_id,
                                                                    calendar_id,
                                                                    event_id):
    return client.dismiss_reminder(user_id=user_id,
                                   calendar_group_id=calendar_group_id,
                                   calendar_id=calendar_id,
                                   event_id=event_id)


def usersactions_userscalendargroupscalendarsevent_snooze_reminder(client,
                                                                   user_id,
                                                                   calendar_group_id,
                                                                   calendar_id,
                                                                   event_id,
                                                                   new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  calendar_group_id=calendar_group_id,
                                  calendar_id=calendar_id,
                                  event_id=event_id,
                                  body=body)


def usersactions_userscalendargroupscalendarsevent_tentatively_accept(client,
                                                                      user_id,
                                                                      calendar_group_id,
                                                                      calendar_id,
                                                                      event_id,
                                                                      comment=None,
                                                                      send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     calendar_group_id=calendar_group_id,
                                     calendar_id=calendar_id,
                                     event_id=event_id,
                                     body=body)


def usersactions_userscalendargroupscalendar_get_schedule(client,
                                                          user_id,
                                                          calendar_group_id,
                                                          calendar_id,
                                                          schedules=None,
                                                          end_time=None,
                                                          start_time=None,
                                                          availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(user_id=user_id,
                               calendar_group_id=calendar_group_id,
                               calendar_id=calendar_id,
                               body=body)


def usersactions_userscalendarscalendarviewattachment_create_upload_session(client,
                                                                            user_id,
                                                                            calendar_id,
                                                                            event_id,
                                                                            attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(user_id=user_id,
                                        calendar_id=calendar_id,
                                        event_id=event_id,
                                        body=body)


def usersactions_userscalendarscalendarviewcalendar_get_schedule(client,
                                                                 user_id,
                                                                 calendar_id,
                                                                 event_id,
                                                                 schedules=None,
                                                                 end_time=None,
                                                                 start_time=None,
                                                                 availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(user_id=user_id,
                               calendar_id=calendar_id,
                               event_id=event_id,
                               body=body)


def usersactions_userscalendarscalendarviewinstance_accept(client,
                                                           user_id,
                                                           calendar_id,
                                                           event_id,
                                                           event_id1,
                                                           comment=None,
                                                           send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         calendar_id=calendar_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def usersactions_userscalendarscalendarviewinstance_decline(client,
                                                            user_id,
                                                            calendar_id,
                                                            event_id,
                                                            event_id1,
                                                            comment=None,
                                                            send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          calendar_id=calendar_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def usersactions_userscalendarscalendarviewinstance_dismiss_reminder(client,
                                                                     user_id,
                                                                     calendar_id,
                                                                     event_id,
                                                                     event_id1):
    return client.dismiss_reminder(user_id=user_id,
                                   calendar_id=calendar_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def usersactions_userscalendarscalendarviewinstance_snooze_reminder(client,
                                                                    user_id,
                                                                    calendar_id,
                                                                    event_id,
                                                                    event_id1,
                                                                    new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  calendar_id=calendar_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def usersactions_userscalendarscalendarviewinstance_tentatively_accept(client,
                                                                       user_id,
                                                                       calendar_id,
                                                                       event_id,
                                                                       event_id1,
                                                                       comment=None,
                                                                       send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     calendar_id=calendar_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def usersactions_userscalendarscalendarview_accept(client,
                                                   user_id,
                                                   calendar_id,
                                                   event_id,
                                                   comment=None,
                                                   send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         calendar_id=calendar_id,
                         event_id=event_id,
                         body=body)


def usersactions_userscalendarscalendarview_decline(client,
                                                    user_id,
                                                    calendar_id,
                                                    event_id,
                                                    comment=None,
                                                    send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          calendar_id=calendar_id,
                          event_id=event_id,
                          body=body)


def usersactions_userscalendarscalendarview_dismiss_reminder(client,
                                                             user_id,
                                                             calendar_id,
                                                             event_id):
    return client.dismiss_reminder(user_id=user_id,
                                   calendar_id=calendar_id,
                                   event_id=event_id)


def usersactions_userscalendarscalendarview_snooze_reminder(client,
                                                            user_id,
                                                            calendar_id,
                                                            event_id,
                                                            new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  calendar_id=calendar_id,
                                  event_id=event_id,
                                  body=body)


def usersactions_userscalendarscalendarview_tentatively_accept(client,
                                                               user_id,
                                                               calendar_id,
                                                               event_id,
                                                               comment=None,
                                                               send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     calendar_id=calendar_id,
                                     event_id=event_id,
                                     body=body)


def usersactions_userscalendarseventsattachment_create_upload_session(client,
                                                                      user_id,
                                                                      calendar_id,
                                                                      event_id,
                                                                      attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(user_id=user_id,
                                        calendar_id=calendar_id,
                                        event_id=event_id,
                                        body=body)


def usersactions_userscalendarseventscalendar_get_schedule(client,
                                                           user_id,
                                                           calendar_id,
                                                           event_id,
                                                           schedules=None,
                                                           end_time=None,
                                                           start_time=None,
                                                           availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(user_id=user_id,
                               calendar_id=calendar_id,
                               event_id=event_id,
                               body=body)


def usersactions_userscalendarseventsinstance_accept(client,
                                                     user_id,
                                                     calendar_id,
                                                     event_id,
                                                     event_id1,
                                                     comment=None,
                                                     send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         calendar_id=calendar_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def usersactions_userscalendarseventsinstance_decline(client,
                                                      user_id,
                                                      calendar_id,
                                                      event_id,
                                                      event_id1,
                                                      comment=None,
                                                      send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          calendar_id=calendar_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def usersactions_userscalendarseventsinstance_dismiss_reminder(client,
                                                               user_id,
                                                               calendar_id,
                                                               event_id,
                                                               event_id1):
    return client.dismiss_reminder(user_id=user_id,
                                   calendar_id=calendar_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def usersactions_userscalendarseventsinstance_snooze_reminder(client,
                                                              user_id,
                                                              calendar_id,
                                                              event_id,
                                                              event_id1,
                                                              new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  calendar_id=calendar_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def usersactions_userscalendarseventsinstance_tentatively_accept(client,
                                                                 user_id,
                                                                 calendar_id,
                                                                 event_id,
                                                                 event_id1,
                                                                 comment=None,
                                                                 send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     calendar_id=calendar_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def usersactions_userscalendarsevent_accept(client,
                                            user_id,
                                            calendar_id,
                                            event_id,
                                            comment=None,
                                            send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         calendar_id=calendar_id,
                         event_id=event_id,
                         body=body)


def usersactions_userscalendarsevent_decline(client,
                                             user_id,
                                             calendar_id,
                                             event_id,
                                             comment=None,
                                             send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          calendar_id=calendar_id,
                          event_id=event_id,
                          body=body)


def usersactions_userscalendarsevent_dismiss_reminder(client,
                                                      user_id,
                                                      calendar_id,
                                                      event_id):
    return client.dismiss_reminder(user_id=user_id,
                                   calendar_id=calendar_id,
                                   event_id=event_id)


def usersactions_userscalendarsevent_snooze_reminder(client,
                                                     user_id,
                                                     calendar_id,
                                                     event_id,
                                                     new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  calendar_id=calendar_id,
                                  event_id=event_id,
                                  body=body)


def usersactions_userscalendarsevent_tentatively_accept(client,
                                                        user_id,
                                                        calendar_id,
                                                        event_id,
                                                        comment=None,
                                                        send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     calendar_id=calendar_id,
                                     event_id=event_id,
                                     body=body)


def usersactions_userscalendar_get_schedule(client,
                                            user_id,
                                            calendar_id,
                                            schedules=None,
                                            end_time=None,
                                            start_time=None,
                                            availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(user_id=user_id,
                               calendar_id=calendar_id,
                               body=body)


def usersactions_userscalendarviewattachment_create_upload_session(client,
                                                                   user_id,
                                                                   event_id,
                                                                   attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(user_id=user_id,
                                        event_id=event_id,
                                        body=body)


def usersactions_userscalendarviewcalendarview_accept(client,
                                                      user_id,
                                                      event_id,
                                                      event_id1,
                                                      comment=None,
                                                      send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def usersactions_userscalendarviewcalendarview_decline(client,
                                                       user_id,
                                                       event_id,
                                                       event_id1,
                                                       comment=None,
                                                       send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def usersactions_userscalendarviewcalendarview_dismiss_reminder(client,
                                                                user_id,
                                                                event_id,
                                                                event_id1):
    return client.dismiss_reminder(user_id=user_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def usersactions_userscalendarviewcalendarview_snooze_reminder(client,
                                                               user_id,
                                                               event_id,
                                                               event_id1,
                                                               new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def usersactions_userscalendarviewcalendarview_tentatively_accept(client,
                                                                  user_id,
                                                                  event_id,
                                                                  event_id1,
                                                                  comment=None,
                                                                  send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def usersactions_userscalendarviewcalendarevent_accept(client,
                                                       user_id,
                                                       event_id,
                                                       event_id1,
                                                       comment=None,
                                                       send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def usersactions_userscalendarviewcalendarevent_decline(client,
                                                        user_id,
                                                        event_id,
                                                        event_id1,
                                                        comment=None,
                                                        send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def usersactions_userscalendarviewcalendarevent_dismiss_reminder(client,
                                                                 user_id,
                                                                 event_id,
                                                                 event_id1):
    return client.dismiss_reminder(user_id=user_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def usersactions_userscalendarviewcalendarevent_snooze_reminder(client,
                                                                user_id,
                                                                event_id,
                                                                event_id1,
                                                                new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def usersactions_userscalendarviewcalendarevent_tentatively_accept(client,
                                                                   user_id,
                                                                   event_id,
                                                                   event_id1,
                                                                   comment=None,
                                                                   send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def usersactions_userscalendarviewcalendar_get_schedule(client,
                                                        user_id,
                                                        event_id,
                                                        schedules=None,
                                                        end_time=None,
                                                        start_time=None,
                                                        availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(user_id=user_id,
                               event_id=event_id,
                               body=body)


def usersactions_userscalendarviewinstance_accept(client,
                                                  user_id,
                                                  event_id,
                                                  event_id1,
                                                  comment=None,
                                                  send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def usersactions_userscalendarviewinstance_decline(client,
                                                   user_id,
                                                   event_id,
                                                   event_id1,
                                                   comment=None,
                                                   send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def usersactions_userscalendarviewinstance_dismiss_reminder(client,
                                                            user_id,
                                                            event_id,
                                                            event_id1):
    return client.dismiss_reminder(user_id=user_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def usersactions_userscalendarviewinstance_snooze_reminder(client,
                                                           user_id,
                                                           event_id,
                                                           event_id1,
                                                           new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def usersactions_userscalendarviewinstance_tentatively_accept(client,
                                                              user_id,
                                                              event_id,
                                                              event_id1,
                                                              comment=None,
                                                              send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def usersactions_userscalendarview_accept(client,
                                          user_id,
                                          event_id,
                                          comment=None,
                                          send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         event_id=event_id,
                         body=body)


def usersactions_userscalendarview_decline(client,
                                           user_id,
                                           event_id,
                                           comment=None,
                                           send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          event_id=event_id,
                          body=body)


def usersactions_userscalendarview_dismiss_reminder(client,
                                                    user_id,
                                                    event_id):
    return client.dismiss_reminder(user_id=user_id,
                                   event_id=event_id)


def usersactions_userscalendarview_snooze_reminder(client,
                                                   user_id,
                                                   event_id,
                                                   new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  event_id=event_id,
                                  body=body)


def usersactions_userscalendarview_tentatively_accept(client,
                                                      user_id,
                                                      event_id,
                                                      comment=None,
                                                      send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     event_id=event_id,
                                     body=body)


def usersactions_userseventsattachment_create_upload_session(client,
                                                             user_id,
                                                             event_id,
                                                             attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(user_id=user_id,
                                        event_id=event_id,
                                        body=body)


def usersactions_userseventscalendarview_accept(client,
                                                user_id,
                                                event_id,
                                                event_id1,
                                                comment=None,
                                                send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def usersactions_userseventscalendarview_decline(client,
                                                 user_id,
                                                 event_id,
                                                 event_id1,
                                                 comment=None,
                                                 send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def usersactions_userseventscalendarview_dismiss_reminder(client,
                                                          user_id,
                                                          event_id,
                                                          event_id1):
    return client.dismiss_reminder(user_id=user_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def usersactions_userseventscalendarview_snooze_reminder(client,
                                                         user_id,
                                                         event_id,
                                                         event_id1,
                                                         new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def usersactions_userseventscalendarview_tentatively_accept(client,
                                                            user_id,
                                                            event_id,
                                                            event_id1,
                                                            comment=None,
                                                            send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def usersactions_userseventscalendarevent_accept(client,
                                                 user_id,
                                                 event_id,
                                                 event_id1,
                                                 comment=None,
                                                 send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def usersactions_userseventscalendarevent_decline(client,
                                                  user_id,
                                                  event_id,
                                                  event_id1,
                                                  comment=None,
                                                  send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def usersactions_userseventscalendarevent_dismiss_reminder(client,
                                                           user_id,
                                                           event_id,
                                                           event_id1):
    return client.dismiss_reminder(user_id=user_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def usersactions_userseventscalendarevent_snooze_reminder(client,
                                                          user_id,
                                                          event_id,
                                                          event_id1,
                                                          new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def usersactions_userseventscalendarevent_tentatively_accept(client,
                                                             user_id,
                                                             event_id,
                                                             event_id1,
                                                             comment=None,
                                                             send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def usersactions_userseventscalendar_get_schedule(client,
                                                  user_id,
                                                  event_id,
                                                  schedules=None,
                                                  end_time=None,
                                                  start_time=None,
                                                  availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(user_id=user_id,
                               event_id=event_id,
                               body=body)


def usersactions_userseventsinstance_accept(client,
                                            user_id,
                                            event_id,
                                            event_id1,
                                            comment=None,
                                            send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def usersactions_userseventsinstance_decline(client,
                                             user_id,
                                             event_id,
                                             event_id1,
                                             comment=None,
                                             send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def usersactions_userseventsinstance_dismiss_reminder(client,
                                                      user_id,
                                                      event_id,
                                                      event_id1):
    return client.dismiss_reminder(user_id=user_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def usersactions_userseventsinstance_snooze_reminder(client,
                                                     user_id,
                                                     event_id,
                                                     event_id1,
                                                     new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def usersactions_userseventsinstance_tentatively_accept(client,
                                                        user_id,
                                                        event_id,
                                                        event_id1,
                                                        comment=None,
                                                        send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def usersactions_usersevent_accept(client,
                                   user_id,
                                   event_id,
                                   comment=None,
                                   send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(user_id=user_id,
                         event_id=event_id,
                         body=body)


def usersactions_usersevent_decline(client,
                                    user_id,
                                    event_id,
                                    comment=None,
                                    send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.decline(user_id=user_id,
                          event_id=event_id,
                          body=body)


def usersactions_usersevent_dismiss_reminder(client,
                                             user_id,
                                             event_id):
    return client.dismiss_reminder(user_id=user_id,
                                   event_id=event_id)


def usersactions_usersevent_snooze_reminder(client,
                                            user_id,
                                            event_id,
                                            new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(user_id=user_id,
                                  event_id=event_id,
                                  body=body)


def usersactions_usersevent_tentatively_accept(client,
                                               user_id,
                                               event_id,
                                               comment=None,
                                               send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.tentatively_accept(user_id=user_id,
                                     event_id=event_id,
                                     body=body)


def usersactions_usersmailfolderschildfolder_copy(client,
                                                  user_id,
                                                  mail_folder_id,
                                                  mail_folder_id1,
                                                  destination_id=None):
    body = {}
    body['destination_id'] = destination_id
    return client.copy(user_id=user_id,
                       mail_folder_id=mail_folder_id,
                       mail_folder_id1=mail_folder_id1,
                       body=body)


def usersactions_usersmailfolderschildfolder_move(client,
                                                  user_id,
                                                  mail_folder_id,
                                                  mail_folder_id1,
                                                  destination_id=None):
    body = {}
    body['destination_id'] = destination_id
    return client.move(user_id=user_id,
                       mail_folder_id=mail_folder_id,
                       mail_folder_id1=mail_folder_id1,
                       body=body)


def usersactions_usersmailfoldersmessagesattachment_create_upload_session(client,
                                                                          user_id,
                                                                          mail_folder_id,
                                                                          message_id,
                                                                          attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(user_id=user_id,
                                        mail_folder_id=mail_folder_id,
                                        message_id=message_id,
                                        body=body)


def usersactions_usersmailfoldersmessage_copy(client,
                                              user_id,
                                              mail_folder_id,
                                              message_id,
                                              destination_id=None):
    body = {}
    body['destination_id'] = destination_id
    return client.copy(user_id=user_id,
                       mail_folder_id=mail_folder_id,
                       message_id=message_id,
                       body=body)


def usersactions_usersmailfoldersmessage_create_forward(client,
                                                        user_id,
                                                        mail_folder_id,
                                                        message_id,
                                                        body,
                                                        to_recipients=None,
                                                        comment=None,
                                                        id_=None,
                                                        categories=None,
                                                        change_key=None,
                                                        created_date_time=None,
                                                        last_modified_date_time=None,
                                                        bcc_recipients=None,
                                                        body_preview=None,
                                                        cc_recipients=None,
                                                        conversation_id=None,
                                                        conversation_index=None,
                                                        flag=None,
                                                        from=None,
                                                        has_attachments=None,
                                                        importance=None,
                                                        inference_classification=None,
                                                        internet_message_headers=None,
                                                        internet_message_id=None,
                                                        is_delivery_receipt_requested=None,
                                                        is_draft=None,
                                                        is_read=None,
                                                        is_read_receipt_requested=None,
                                                        parent_folder_id=None,
                                                        received_date_time=None,
                                                        reply_to=None,
                                                        sender=None,
                                                        sent_date_time=None,
                                                        subject=None,
                                                        microsoft_graph_message_to_recipients=None,
                                                        unique_body=None,
                                                        web_link=None,
                                                        attachments=None,
                                                        extensions=None,
                                                        multi_value_extended_properties=None,
                                                        single_value_extended_properties=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    body['message'] = {}
    body['message']['id'] = id_
    body['message']['categories'] = categories
    body['message']['change_key'] = change_key
    body['message']['created_date_time'] = created_date_time
    body['message']['last_modified_date_time'] = last_modified_date_time
    body['message']['bcc_recipients'] = bcc_recipients
    body['message']['body'] = body
    body['message']['body_preview'] = body_preview
    body['message']['cc_recipients'] = cc_recipients
    body['message']['conversation_id'] = conversation_id
    body['message']['conversation_index'] = conversation_index
    body['message']['flag'] = flag
    body['message']['from_property'] = from
    body['message']['has_attachments'] = has_attachments
    body['message']['importance'] = importance
    body['message']['inference_classification'] = inference_classification
    body['message']['internet_message_headers'] = internet_message_headers
    body['message']['internet_message_id'] = internet_message_id
    body['message']['is_delivery_receipt_requested'] = is_delivery_receipt_requested
    body['message']['is_draft'] = is_draft
    body['message']['is_read'] = is_read
    body['message']['is_read_receipt_requested'] = is_read_receipt_requested
    body['message']['parent_folder_id'] = parent_folder_id
    body['message']['received_date_time'] = received_date_time
    body['message']['reply_to'] = reply_to
    body['message']['sender'] = sender
    body['message']['sent_date_time'] = sent_date_time
    body['message']['subject'] = subject
    body['message']['to_recipients'] = microsoft_graph_message_to_recipients
    body['message']['unique_body'] = unique_body
    body['message']['web_link'] = web_link
    body['message']['attachments'] = attachments
    body['message']['extensions'] = extensions
    body['message']['multi_value_extended_properties'] = multi_value_extended_properties
    body['message']['single_value_extended_properties'] = single_value_extended_properties
    return client.create_forward(user_id=user_id,
                                 mail_folder_id=mail_folder_id,
                                 message_id=message_id,
                                 body=body)


def usersactions_usersmailfoldersmessage_create_reply(client,
                                                      user_id,
                                                      mail_folder_id,
                                                      message_id,
                                                      body,
                                                      comment=None,
                                                      id_=None,
                                                      categories=None,
                                                      change_key=None,
                                                      created_date_time=None,
                                                      last_modified_date_time=None,
                                                      bcc_recipients=None,
                                                      body_preview=None,
                                                      cc_recipients=None,
                                                      conversation_id=None,
                                                      conversation_index=None,
                                                      flag=None,
                                                      from=None,
                                                      has_attachments=None,
                                                      importance=None,
                                                      inference_classification=None,
                                                      internet_message_headers=None,
                                                      internet_message_id=None,
                                                      is_delivery_receipt_requested=None,
                                                      is_draft=None,
                                                      is_read=None,
                                                      is_read_receipt_requested=None,
                                                      parent_folder_id=None,
                                                      received_date_time=None,
                                                      reply_to=None,
                                                      sender=None,
                                                      sent_date_time=None,
                                                      subject=None,
                                                      to_recipients=None,
                                                      unique_body=None,
                                                      web_link=None,
                                                      attachments=None,
                                                      extensions=None,
                                                      multi_value_extended_properties=None,
                                                      single_value_extended_properties=None):
    body = {}
    body['comment'] = comment
    body['message'] = {}
    body['message']['id'] = id_
    body['message']['categories'] = categories
    body['message']['change_key'] = change_key
    body['message']['created_date_time'] = created_date_time
    body['message']['last_modified_date_time'] = last_modified_date_time
    body['message']['bcc_recipients'] = bcc_recipients
    body['message']['body'] = body
    body['message']['body_preview'] = body_preview
    body['message']['cc_recipients'] = cc_recipients
    body['message']['conversation_id'] = conversation_id
    body['message']['conversation_index'] = conversation_index
    body['message']['flag'] = flag
    body['message']['from_property'] = from
    body['message']['has_attachments'] = has_attachments
    body['message']['importance'] = importance
    body['message']['inference_classification'] = inference_classification
    body['message']['internet_message_headers'] = internet_message_headers
    body['message']['internet_message_id'] = internet_message_id
    body['message']['is_delivery_receipt_requested'] = is_delivery_receipt_requested
    body['message']['is_draft'] = is_draft
    body['message']['is_read'] = is_read
    body['message']['is_read_receipt_requested'] = is_read_receipt_requested
    body['message']['parent_folder_id'] = parent_folder_id
    body['message']['received_date_time'] = received_date_time
    body['message']['reply_to'] = reply_to
    body['message']['sender'] = sender
    body['message']['sent_date_time'] = sent_date_time
    body['message']['subject'] = subject
    body['message']['to_recipients'] = to_recipients
    body['message']['unique_body'] = unique_body
    body['message']['web_link'] = web_link
    body['message']['attachments'] = attachments
    body['message']['extensions'] = extensions
    body['message']['multi_value_extended_properties'] = multi_value_extended_properties
    body['message']['single_value_extended_properties'] = single_value_extended_properties
    return client.create_reply(user_id=user_id,
                               mail_folder_id=mail_folder_id,
                               message_id=message_id,
                               body=body)


def usersactions_usersmailfoldersmessage_create_reply_all(client,
                                                          user_id,
                                                          mail_folder_id,
                                                          message_id,
                                                          body,
                                                          comment=None,
                                                          id_=None,
                                                          categories=None,
                                                          change_key=None,
                                                          created_date_time=None,
                                                          last_modified_date_time=None,
                                                          bcc_recipients=None,
                                                          body_preview=None,
                                                          cc_recipients=None,
                                                          conversation_id=None,
                                                          conversation_index=None,
                                                          flag=None,
                                                          from=None,
                                                          has_attachments=None,
                                                          importance=None,
                                                          inference_classification=None,
                                                          internet_message_headers=None,
                                                          internet_message_id=None,
                                                          is_delivery_receipt_requested=None,
                                                          is_draft=None,
                                                          is_read=None,
                                                          is_read_receipt_requested=None,
                                                          parent_folder_id=None,
                                                          received_date_time=None,
                                                          reply_to=None,
                                                          sender=None,
                                                          sent_date_time=None,
                                                          subject=None,
                                                          to_recipients=None,
                                                          unique_body=None,
                                                          web_link=None,
                                                          attachments=None,
                                                          extensions=None,
                                                          multi_value_extended_properties=None,
                                                          single_value_extended_properties=None):
    body = {}
    body['comment'] = comment
    body['message'] = {}
    body['message']['id'] = id_
    body['message']['categories'] = categories
    body['message']['change_key'] = change_key
    body['message']['created_date_time'] = created_date_time
    body['message']['last_modified_date_time'] = last_modified_date_time
    body['message']['bcc_recipients'] = bcc_recipients
    body['message']['body'] = body
    body['message']['body_preview'] = body_preview
    body['message']['cc_recipients'] = cc_recipients
    body['message']['conversation_id'] = conversation_id
    body['message']['conversation_index'] = conversation_index
    body['message']['flag'] = flag
    body['message']['from_property'] = from
    body['message']['has_attachments'] = has_attachments
    body['message']['importance'] = importance
    body['message']['inference_classification'] = inference_classification
    body['message']['internet_message_headers'] = internet_message_headers
    body['message']['internet_message_id'] = internet_message_id
    body['message']['is_delivery_receipt_requested'] = is_delivery_receipt_requested
    body['message']['is_draft'] = is_draft
    body['message']['is_read'] = is_read
    body['message']['is_read_receipt_requested'] = is_read_receipt_requested
    body['message']['parent_folder_id'] = parent_folder_id
    body['message']['received_date_time'] = received_date_time
    body['message']['reply_to'] = reply_to
    body['message']['sender'] = sender
    body['message']['sent_date_time'] = sent_date_time
    body['message']['subject'] = subject
    body['message']['to_recipients'] = to_recipients
    body['message']['unique_body'] = unique_body
    body['message']['web_link'] = web_link
    body['message']['attachments'] = attachments
    body['message']['extensions'] = extensions
    body['message']['multi_value_extended_properties'] = multi_value_extended_properties
    body['message']['single_value_extended_properties'] = single_value_extended_properties
    return client.create_reply_all(user_id=user_id,
                                   mail_folder_id=mail_folder_id,
                                   message_id=message_id,
                                   body=body)


def usersactions_usersmailfoldersmessage_forward(client,
                                                 user_id,
                                                 mail_folder_id,
                                                 message_id,
                                                 body,
                                                 to_recipients=None,
                                                 comment=None,
                                                 id_=None,
                                                 categories=None,
                                                 change_key=None,
                                                 created_date_time=None,
                                                 last_modified_date_time=None,
                                                 bcc_recipients=None,
                                                 body_preview=None,
                                                 cc_recipients=None,
                                                 conversation_id=None,
                                                 conversation_index=None,
                                                 flag=None,
                                                 from=None,
                                                 has_attachments=None,
                                                 importance=None,
                                                 inference_classification=None,
                                                 internet_message_headers=None,
                                                 internet_message_id=None,
                                                 is_delivery_receipt_requested=None,
                                                 is_draft=None,
                                                 is_read=None,
                                                 is_read_receipt_requested=None,
                                                 parent_folder_id=None,
                                                 received_date_time=None,
                                                 reply_to=None,
                                                 sender=None,
                                                 sent_date_time=None,
                                                 subject=None,
                                                 microsoft_graph_message_to_recipients=None,
                                                 unique_body=None,
                                                 web_link=None,
                                                 attachments=None,
                                                 extensions=None,
                                                 multi_value_extended_properties=None,
                                                 single_value_extended_properties=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    body['message'] = {}
    body['message']['id'] = id_
    body['message']['categories'] = categories
    body['message']['change_key'] = change_key
    body['message']['created_date_time'] = created_date_time
    body['message']['last_modified_date_time'] = last_modified_date_time
    body['message']['bcc_recipients'] = bcc_recipients
    body['message']['body'] = body
    body['message']['body_preview'] = body_preview
    body['message']['cc_recipients'] = cc_recipients
    body['message']['conversation_id'] = conversation_id
    body['message']['conversation_index'] = conversation_index
    body['message']['flag'] = flag
    body['message']['from_property'] = from
    body['message']['has_attachments'] = has_attachments
    body['message']['importance'] = importance
    body['message']['inference_classification'] = inference_classification
    body['message']['internet_message_headers'] = internet_message_headers
    body['message']['internet_message_id'] = internet_message_id
    body['message']['is_delivery_receipt_requested'] = is_delivery_receipt_requested
    body['message']['is_draft'] = is_draft
    body['message']['is_read'] = is_read
    body['message']['is_read_receipt_requested'] = is_read_receipt_requested
    body['message']['parent_folder_id'] = parent_folder_id
    body['message']['received_date_time'] = received_date_time
    body['message']['reply_to'] = reply_to
    body['message']['sender'] = sender
    body['message']['sent_date_time'] = sent_date_time
    body['message']['subject'] = subject
    body['message']['to_recipients'] = microsoft_graph_message_to_recipients
    body['message']['unique_body'] = unique_body
    body['message']['web_link'] = web_link
    body['message']['attachments'] = attachments
    body['message']['extensions'] = extensions
    body['message']['multi_value_extended_properties'] = multi_value_extended_properties
    body['message']['single_value_extended_properties'] = single_value_extended_properties
    return client.forward(user_id=user_id,
                          mail_folder_id=mail_folder_id,
                          message_id=message_id,
                          body=body)


def usersactions_usersmailfoldersmessage_move(client,
                                              user_id,
                                              mail_folder_id,
                                              message_id,
                                              destination_id=None):
    body = {}
    body['destination_id'] = destination_id
    return client.move(user_id=user_id,
                       mail_folder_id=mail_folder_id,
                       message_id=message_id,
                       body=body)


def usersactions_usersmailfoldersmessage_reply(client,
                                               user_id,
                                               mail_folder_id,
                                               message_id,
                                               body,
                                               comment=None,
                                               id_=None,
                                               categories=None,
                                               change_key=None,
                                               created_date_time=None,
                                               last_modified_date_time=None,
                                               bcc_recipients=None,
                                               body_preview=None,
                                               cc_recipients=None,
                                               conversation_id=None,
                                               conversation_index=None,
                                               flag=None,
                                               from=None,
                                               has_attachments=None,
                                               importance=None,
                                               inference_classification=None,
                                               internet_message_headers=None,
                                               internet_message_id=None,
                                               is_delivery_receipt_requested=None,
                                               is_draft=None,
                                               is_read=None,
                                               is_read_receipt_requested=None,
                                               parent_folder_id=None,
                                               received_date_time=None,
                                               reply_to=None,
                                               sender=None,
                                               sent_date_time=None,
                                               subject=None,
                                               to_recipients=None,
                                               unique_body=None,
                                               web_link=None,
                                               attachments=None,
                                               extensions=None,
                                               multi_value_extended_properties=None,
                                               single_value_extended_properties=None):
    body = {}
    body['comment'] = comment
    body['message'] = {}
    body['message']['id'] = id_
    body['message']['categories'] = categories
    body['message']['change_key'] = change_key
    body['message']['created_date_time'] = created_date_time
    body['message']['last_modified_date_time'] = last_modified_date_time
    body['message']['bcc_recipients'] = bcc_recipients
    body['message']['body'] = body
    body['message']['body_preview'] = body_preview
    body['message']['cc_recipients'] = cc_recipients
    body['message']['conversation_id'] = conversation_id
    body['message']['conversation_index'] = conversation_index
    body['message']['flag'] = flag
    body['message']['from_property'] = from
    body['message']['has_attachments'] = has_attachments
    body['message']['importance'] = importance
    body['message']['inference_classification'] = inference_classification
    body['message']['internet_message_headers'] = internet_message_headers
    body['message']['internet_message_id'] = internet_message_id
    body['message']['is_delivery_receipt_requested'] = is_delivery_receipt_requested
    body['message']['is_draft'] = is_draft
    body['message']['is_read'] = is_read
    body['message']['is_read_receipt_requested'] = is_read_receipt_requested
    body['message']['parent_folder_id'] = parent_folder_id
    body['message']['received_date_time'] = received_date_time
    body['message']['reply_to'] = reply_to
    body['message']['sender'] = sender
    body['message']['sent_date_time'] = sent_date_time
    body['message']['subject'] = subject
    body['message']['to_recipients'] = to_recipients
    body['message']['unique_body'] = unique_body
    body['message']['web_link'] = web_link
    body['message']['attachments'] = attachments
    body['message']['extensions'] = extensions
    body['message']['multi_value_extended_properties'] = multi_value_extended_properties
    body['message']['single_value_extended_properties'] = single_value_extended_properties
    return client.reply(user_id=user_id,
                        mail_folder_id=mail_folder_id,
                        message_id=message_id,
                        body=body)


def usersactions_usersmailfoldersmessage_reply_all(client,
                                                   user_id,
                                                   mail_folder_id,
                                                   message_id,
                                                   body,
                                                   comment=None,
                                                   id_=None,
                                                   categories=None,
                                                   change_key=None,
                                                   created_date_time=None,
                                                   last_modified_date_time=None,
                                                   bcc_recipients=None,
                                                   body_preview=None,
                                                   cc_recipients=None,
                                                   conversation_id=None,
                                                   conversation_index=None,
                                                   flag=None,
                                                   from=None,
                                                   has_attachments=None,
                                                   importance=None,
                                                   inference_classification=None,
                                                   internet_message_headers=None,
                                                   internet_message_id=None,
                                                   is_delivery_receipt_requested=None,
                                                   is_draft=None,
                                                   is_read=None,
                                                   is_read_receipt_requested=None,
                                                   parent_folder_id=None,
                                                   received_date_time=None,
                                                   reply_to=None,
                                                   sender=None,
                                                   sent_date_time=None,
                                                   subject=None,
                                                   to_recipients=None,
                                                   unique_body=None,
                                                   web_link=None,
                                                   attachments=None,
                                                   extensions=None,
                                                   multi_value_extended_properties=None,
                                                   single_value_extended_properties=None):
    body = {}
    body['comment'] = comment
    body['message'] = {}
    body['message']['id'] = id_
    body['message']['categories'] = categories
    body['message']['change_key'] = change_key
    body['message']['created_date_time'] = created_date_time
    body['message']['last_modified_date_time'] = last_modified_date_time
    body['message']['bcc_recipients'] = bcc_recipients
    body['message']['body'] = body
    body['message']['body_preview'] = body_preview
    body['message']['cc_recipients'] = cc_recipients
    body['message']['conversation_id'] = conversation_id
    body['message']['conversation_index'] = conversation_index
    body['message']['flag'] = flag
    body['message']['from_property'] = from
    body['message']['has_attachments'] = has_attachments
    body['message']['importance'] = importance
    body['message']['inference_classification'] = inference_classification
    body['message']['internet_message_headers'] = internet_message_headers
    body['message']['internet_message_id'] = internet_message_id
    body['message']['is_delivery_receipt_requested'] = is_delivery_receipt_requested
    body['message']['is_draft'] = is_draft
    body['message']['is_read'] = is_read
    body['message']['is_read_receipt_requested'] = is_read_receipt_requested
    body['message']['parent_folder_id'] = parent_folder_id
    body['message']['received_date_time'] = received_date_time
    body['message']['reply_to'] = reply_to
    body['message']['sender'] = sender
    body['message']['sent_date_time'] = sent_date_time
    body['message']['subject'] = subject
    body['message']['to_recipients'] = to_recipients
    body['message']['unique_body'] = unique_body
    body['message']['web_link'] = web_link
    body['message']['attachments'] = attachments
    body['message']['extensions'] = extensions
    body['message']['multi_value_extended_properties'] = multi_value_extended_properties
    body['message']['single_value_extended_properties'] = single_value_extended_properties
    return client.reply_all(user_id=user_id,
                            mail_folder_id=mail_folder_id,
                            message_id=message_id,
                            body=body)


def usersactions_usersmailfoldersmessage_send(client,
                                              user_id,
                                              mail_folder_id,
                                              message_id):
    return client.send(user_id=user_id,
                       mail_folder_id=mail_folder_id,
                       message_id=message_id)


def usersactions_usersmailfolder_copy(client,
                                      user_id,
                                      mail_folder_id,
                                      destination_id=None):
    body = {}
    body['destination_id'] = destination_id
    return client.copy(user_id=user_id,
                       mail_folder_id=mail_folder_id,
                       body=body)


def usersactions_usersmailfolder_move(client,
                                      user_id,
                                      mail_folder_id,
                                      destination_id=None):
    body = {}
    body['destination_id'] = destination_id
    return client.move(user_id=user_id,
                       mail_folder_id=mail_folder_id,
                       body=body)


def usersactions_usersmanageddevice_bypass_activation_lock(client,
                                                           user_id,
                                                           managed_device_id):
    return client.bypass_activation_lock(user_id=user_id,
                                         managed_device_id=managed_device_id)


def usersactions_usersmanageddevice_clean_window_device(client,
                                                        user_id,
                                                        managed_device_id,
                                                        keep_user_data=None):
    if keep_user_data is None:
        keep_user_data = False
    body = {}
    body['keep_user_data'] = False if keep_user_data is None else keep_user_data
    return client.clean_windows_device(user_id=user_id,
                                       managed_device_id=managed_device_id,
                                       body=body)


def usersactions_usersmanageddevice_delete_user_from_shared_apple_device(client,
                                                                         user_id,
                                                                         managed_device_id,
                                                                         user_principal_name=None):
    body = {}
    body['user_principal_name'] = user_principal_name
    return client.delete_user_from_shared_apple_device(user_id=user_id,
                                                       managed_device_id=managed_device_id,
                                                       body=body)


def usersactions_usersmanageddevice_disable_lost_mode(client,
                                                      user_id,
                                                      managed_device_id):
    return client.disable_lost_mode(user_id=user_id,
                                    managed_device_id=managed_device_id)


def usersactions_usersmanageddevice_locate_device(client,
                                                  user_id,
                                                  managed_device_id):
    return client.locate_device(user_id=user_id,
                                managed_device_id=managed_device_id)


def usersactions_usersmanageddevice_logout_shared_apple_device_active_user(client,
                                                                           user_id,
                                                                           managed_device_id):
    return client.logout_shared_apple_device_active_user(user_id=user_id,
                                                         managed_device_id=managed_device_id)


def usersactions_usersmanageddevice_reboot_now(client,
                                               user_id,
                                               managed_device_id):
    return client.reboot_now(user_id=user_id,
                             managed_device_id=managed_device_id)


def usersactions_usersmanageddevice_recover_passcode(client,
                                                     user_id,
                                                     managed_device_id):
    return client.recover_passcode(user_id=user_id,
                                   managed_device_id=managed_device_id)


def usersactions_usersmanageddevice_remote_lock(client,
                                                user_id,
                                                managed_device_id):
    return client.remote_lock(user_id=user_id,
                              managed_device_id=managed_device_id)


def usersactions_usersmanageddevice_request_remote_assistance(client,
                                                              user_id,
                                                              managed_device_id):
    return client.request_remote_assistance(user_id=user_id,
                                            managed_device_id=managed_device_id)


def usersactions_usersmanageddevice_reset_passcode(client,
                                                   user_id,
                                                   managed_device_id):
    return client.reset_passcode(user_id=user_id,
                                 managed_device_id=managed_device_id)


def usersactions_usersmanageddevice_retire(client,
                                           user_id,
                                           managed_device_id):
    return client.retire(user_id=user_id,
                         managed_device_id=managed_device_id)


def usersactions_usersmanageddevice_shut_down(client,
                                              user_id,
                                              managed_device_id):
    return client.shut_down(user_id=user_id,
                            managed_device_id=managed_device_id)


def usersactions_usersmanageddevice_sync_device(client,
                                                user_id,
                                                managed_device_id):
    return client.sync_device(user_id=user_id,
                              managed_device_id=managed_device_id)


def usersactions_usersmanageddevice_update_window_device_account(client,
                                                                 user_id,
                                                                 managed_device_id,
                                                                 calendar_sync_enabled=None,
                                                                 device_account_email=None,
                                                                 exchange_server=None,
                                                                 password_rotation_enabled=None,
                                                                 session_initiation_protocal_address=None,
                                                                 password=None):
    body = {}
    body['update_windows_device_account_action_parameter'] = {}
    body['update_windows_device_account_action_parameter']['calendar_sync_enabled'] = calendar_sync_enabled
    body['update_windows_device_account_action_parameter']['device_account_email'] = device_account_email
    body['update_windows_device_account_action_parameter']['exchange_server'] = exchange_server
    body['update_windows_device_account_action_parameter']['password_rotation_enabled'] = password_rotation_enabled
    body['update_windows_device_account_action_parameter']['session_initiation_protocal_address'] = session_initiation_protocal_address
    body['update_windows_device_account_action_parameter']['device_account'] = {}
    body['update_windows_device_account_action_parameter']['device_account']['password'] = password
    return client.update_windows_device_account(user_id=user_id,
                                                managed_device_id=managed_device_id,
                                                body=body)


def usersactions_usersmanageddevice_window_defender_scan(client,
                                                         user_id,
                                                         managed_device_id,
                                                         quick_scan=None):
    if quick_scan is None:
        quick_scan = False
    body = {}
    body['quick_scan'] = False if quick_scan is None else quick_scan
    return client.windows_defender_scan(user_id=user_id,
                                        managed_device_id=managed_device_id,
                                        body=body)


def usersactions_usersmanageddevice_window_defender_update_signature(client,
                                                                     user_id,
                                                                     managed_device_id):
    return client.windows_defender_update_signatures(user_id=user_id,
                                                     managed_device_id=managed_device_id)


def usersactions_usersmanageddevice_wipe(client,
                                         user_id,
                                         managed_device_id,
                                         keep_enrollment_data=None,
                                         keep_user_data=None,
                                         mac_os_unlock_code=None):
    if keep_enrollment_data is None:
        keep_enrollment_data = False
    if keep_user_data is None:
        keep_user_data = False
    body = {}
    body['keep_enrollment_data'] = False if keep_enrollment_data is None else keep_enrollment_data
    body['keep_user_data'] = False if keep_user_data is None else keep_user_data
    body['mac_os_unlock_code'] = mac_os_unlock_code
    return client.wipe(user_id=user_id,
                       managed_device_id=managed_device_id,
                       body=body)


def usersactions_usersmessagesattachment_create_upload_session(client,
                                                               user_id,
                                                               message_id,
                                                               attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(user_id=user_id,
                                        message_id=message_id,
                                        body=body)


def usersactions_usersmessage_copy(client,
                                   user_id,
                                   message_id,
                                   destination_id=None):
    body = {}
    body['destination_id'] = destination_id
    return client.copy(user_id=user_id,
                       message_id=message_id,
                       body=body)


def usersactions_usersmessage_create_forward(client,
                                             user_id,
                                             message_id,
                                             body,
                                             to_recipients=None,
                                             comment=None,
                                             id_=None,
                                             categories=None,
                                             change_key=None,
                                             created_date_time=None,
                                             last_modified_date_time=None,
                                             bcc_recipients=None,
                                             body_preview=None,
                                             cc_recipients=None,
                                             conversation_id=None,
                                             conversation_index=None,
                                             flag=None,
                                             from=None,
                                             has_attachments=None,
                                             importance=None,
                                             inference_classification=None,
                                             internet_message_headers=None,
                                             internet_message_id=None,
                                             is_delivery_receipt_requested=None,
                                             is_draft=None,
                                             is_read=None,
                                             is_read_receipt_requested=None,
                                             parent_folder_id=None,
                                             received_date_time=None,
                                             reply_to=None,
                                             sender=None,
                                             sent_date_time=None,
                                             subject=None,
                                             microsoft_graph_message_to_recipients=None,
                                             unique_body=None,
                                             web_link=None,
                                             attachments=None,
                                             extensions=None,
                                             multi_value_extended_properties=None,
                                             single_value_extended_properties=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    body['message'] = {}
    body['message']['id'] = id_
    body['message']['categories'] = categories
    body['message']['change_key'] = change_key
    body['message']['created_date_time'] = created_date_time
    body['message']['last_modified_date_time'] = last_modified_date_time
    body['message']['bcc_recipients'] = bcc_recipients
    body['message']['body'] = body
    body['message']['body_preview'] = body_preview
    body['message']['cc_recipients'] = cc_recipients
    body['message']['conversation_id'] = conversation_id
    body['message']['conversation_index'] = conversation_index
    body['message']['flag'] = flag
    body['message']['from_property'] = from
    body['message']['has_attachments'] = has_attachments
    body['message']['importance'] = importance
    body['message']['inference_classification'] = inference_classification
    body['message']['internet_message_headers'] = internet_message_headers
    body['message']['internet_message_id'] = internet_message_id
    body['message']['is_delivery_receipt_requested'] = is_delivery_receipt_requested
    body['message']['is_draft'] = is_draft
    body['message']['is_read'] = is_read
    body['message']['is_read_receipt_requested'] = is_read_receipt_requested
    body['message']['parent_folder_id'] = parent_folder_id
    body['message']['received_date_time'] = received_date_time
    body['message']['reply_to'] = reply_to
    body['message']['sender'] = sender
    body['message']['sent_date_time'] = sent_date_time
    body['message']['subject'] = subject
    body['message']['to_recipients'] = microsoft_graph_message_to_recipients
    body['message']['unique_body'] = unique_body
    body['message']['web_link'] = web_link
    body['message']['attachments'] = attachments
    body['message']['extensions'] = extensions
    body['message']['multi_value_extended_properties'] = multi_value_extended_properties
    body['message']['single_value_extended_properties'] = single_value_extended_properties
    return client.create_forward(user_id=user_id,
                                 message_id=message_id,
                                 body=body)


def usersactions_usersmessage_create_reply(client,
                                           user_id,
                                           message_id,
                                           body,
                                           comment=None,
                                           id_=None,
                                           categories=None,
                                           change_key=None,
                                           created_date_time=None,
                                           last_modified_date_time=None,
                                           bcc_recipients=None,
                                           body_preview=None,
                                           cc_recipients=None,
                                           conversation_id=None,
                                           conversation_index=None,
                                           flag=None,
                                           from=None,
                                           has_attachments=None,
                                           importance=None,
                                           inference_classification=None,
                                           internet_message_headers=None,
                                           internet_message_id=None,
                                           is_delivery_receipt_requested=None,
                                           is_draft=None,
                                           is_read=None,
                                           is_read_receipt_requested=None,
                                           parent_folder_id=None,
                                           received_date_time=None,
                                           reply_to=None,
                                           sender=None,
                                           sent_date_time=None,
                                           subject=None,
                                           to_recipients=None,
                                           unique_body=None,
                                           web_link=None,
                                           attachments=None,
                                           extensions=None,
                                           multi_value_extended_properties=None,
                                           single_value_extended_properties=None):
    body = {}
    body['comment'] = comment
    body['message'] = {}
    body['message']['id'] = id_
    body['message']['categories'] = categories
    body['message']['change_key'] = change_key
    body['message']['created_date_time'] = created_date_time
    body['message']['last_modified_date_time'] = last_modified_date_time
    body['message']['bcc_recipients'] = bcc_recipients
    body['message']['body'] = body
    body['message']['body_preview'] = body_preview
    body['message']['cc_recipients'] = cc_recipients
    body['message']['conversation_id'] = conversation_id
    body['message']['conversation_index'] = conversation_index
    body['message']['flag'] = flag
    body['message']['from_property'] = from
    body['message']['has_attachments'] = has_attachments
    body['message']['importance'] = importance
    body['message']['inference_classification'] = inference_classification
    body['message']['internet_message_headers'] = internet_message_headers
    body['message']['internet_message_id'] = internet_message_id
    body['message']['is_delivery_receipt_requested'] = is_delivery_receipt_requested
    body['message']['is_draft'] = is_draft
    body['message']['is_read'] = is_read
    body['message']['is_read_receipt_requested'] = is_read_receipt_requested
    body['message']['parent_folder_id'] = parent_folder_id
    body['message']['received_date_time'] = received_date_time
    body['message']['reply_to'] = reply_to
    body['message']['sender'] = sender
    body['message']['sent_date_time'] = sent_date_time
    body['message']['subject'] = subject
    body['message']['to_recipients'] = to_recipients
    body['message']['unique_body'] = unique_body
    body['message']['web_link'] = web_link
    body['message']['attachments'] = attachments
    body['message']['extensions'] = extensions
    body['message']['multi_value_extended_properties'] = multi_value_extended_properties
    body['message']['single_value_extended_properties'] = single_value_extended_properties
    return client.create_reply(user_id=user_id,
                               message_id=message_id,
                               body=body)


def usersactions_usersmessage_create_reply_all(client,
                                               user_id,
                                               message_id,
                                               body,
                                               comment=None,
                                               id_=None,
                                               categories=None,
                                               change_key=None,
                                               created_date_time=None,
                                               last_modified_date_time=None,
                                               bcc_recipients=None,
                                               body_preview=None,
                                               cc_recipients=None,
                                               conversation_id=None,
                                               conversation_index=None,
                                               flag=None,
                                               from=None,
                                               has_attachments=None,
                                               importance=None,
                                               inference_classification=None,
                                               internet_message_headers=None,
                                               internet_message_id=None,
                                               is_delivery_receipt_requested=None,
                                               is_draft=None,
                                               is_read=None,
                                               is_read_receipt_requested=None,
                                               parent_folder_id=None,
                                               received_date_time=None,
                                               reply_to=None,
                                               sender=None,
                                               sent_date_time=None,
                                               subject=None,
                                               to_recipients=None,
                                               unique_body=None,
                                               web_link=None,
                                               attachments=None,
                                               extensions=None,
                                               multi_value_extended_properties=None,
                                               single_value_extended_properties=None):
    body = {}
    body['comment'] = comment
    body['message'] = {}
    body['message']['id'] = id_
    body['message']['categories'] = categories
    body['message']['change_key'] = change_key
    body['message']['created_date_time'] = created_date_time
    body['message']['last_modified_date_time'] = last_modified_date_time
    body['message']['bcc_recipients'] = bcc_recipients
    body['message']['body'] = body
    body['message']['body_preview'] = body_preview
    body['message']['cc_recipients'] = cc_recipients
    body['message']['conversation_id'] = conversation_id
    body['message']['conversation_index'] = conversation_index
    body['message']['flag'] = flag
    body['message']['from_property'] = from
    body['message']['has_attachments'] = has_attachments
    body['message']['importance'] = importance
    body['message']['inference_classification'] = inference_classification
    body['message']['internet_message_headers'] = internet_message_headers
    body['message']['internet_message_id'] = internet_message_id
    body['message']['is_delivery_receipt_requested'] = is_delivery_receipt_requested
    body['message']['is_draft'] = is_draft
    body['message']['is_read'] = is_read
    body['message']['is_read_receipt_requested'] = is_read_receipt_requested
    body['message']['parent_folder_id'] = parent_folder_id
    body['message']['received_date_time'] = received_date_time
    body['message']['reply_to'] = reply_to
    body['message']['sender'] = sender
    body['message']['sent_date_time'] = sent_date_time
    body['message']['subject'] = subject
    body['message']['to_recipients'] = to_recipients
    body['message']['unique_body'] = unique_body
    body['message']['web_link'] = web_link
    body['message']['attachments'] = attachments
    body['message']['extensions'] = extensions
    body['message']['multi_value_extended_properties'] = multi_value_extended_properties
    body['message']['single_value_extended_properties'] = single_value_extended_properties
    return client.create_reply_all(user_id=user_id,
                                   message_id=message_id,
                                   body=body)


def usersactions_usersmessage_forward(client,
                                      user_id,
                                      message_id,
                                      body,
                                      to_recipients=None,
                                      comment=None,
                                      id_=None,
                                      categories=None,
                                      change_key=None,
                                      created_date_time=None,
                                      last_modified_date_time=None,
                                      bcc_recipients=None,
                                      body_preview=None,
                                      cc_recipients=None,
                                      conversation_id=None,
                                      conversation_index=None,
                                      flag=None,
                                      from=None,
                                      has_attachments=None,
                                      importance=None,
                                      inference_classification=None,
                                      internet_message_headers=None,
                                      internet_message_id=None,
                                      is_delivery_receipt_requested=None,
                                      is_draft=None,
                                      is_read=None,
                                      is_read_receipt_requested=None,
                                      parent_folder_id=None,
                                      received_date_time=None,
                                      reply_to=None,
                                      sender=None,
                                      sent_date_time=None,
                                      subject=None,
                                      microsoft_graph_message_to_recipients=None,
                                      unique_body=None,
                                      web_link=None,
                                      attachments=None,
                                      extensions=None,
                                      multi_value_extended_properties=None,
                                      single_value_extended_properties=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    body['message'] = {}
    body['message']['id'] = id_
    body['message']['categories'] = categories
    body['message']['change_key'] = change_key
    body['message']['created_date_time'] = created_date_time
    body['message']['last_modified_date_time'] = last_modified_date_time
    body['message']['bcc_recipients'] = bcc_recipients
    body['message']['body'] = body
    body['message']['body_preview'] = body_preview
    body['message']['cc_recipients'] = cc_recipients
    body['message']['conversation_id'] = conversation_id
    body['message']['conversation_index'] = conversation_index
    body['message']['flag'] = flag
    body['message']['from_property'] = from
    body['message']['has_attachments'] = has_attachments
    body['message']['importance'] = importance
    body['message']['inference_classification'] = inference_classification
    body['message']['internet_message_headers'] = internet_message_headers
    body['message']['internet_message_id'] = internet_message_id
    body['message']['is_delivery_receipt_requested'] = is_delivery_receipt_requested
    body['message']['is_draft'] = is_draft
    body['message']['is_read'] = is_read
    body['message']['is_read_receipt_requested'] = is_read_receipt_requested
    body['message']['parent_folder_id'] = parent_folder_id
    body['message']['received_date_time'] = received_date_time
    body['message']['reply_to'] = reply_to
    body['message']['sender'] = sender
    body['message']['sent_date_time'] = sent_date_time
    body['message']['subject'] = subject
    body['message']['to_recipients'] = microsoft_graph_message_to_recipients
    body['message']['unique_body'] = unique_body
    body['message']['web_link'] = web_link
    body['message']['attachments'] = attachments
    body['message']['extensions'] = extensions
    body['message']['multi_value_extended_properties'] = multi_value_extended_properties
    body['message']['single_value_extended_properties'] = single_value_extended_properties
    return client.forward(user_id=user_id,
                          message_id=message_id,
                          body=body)


def usersactions_usersmessage_move(client,
                                   user_id,
                                   message_id,
                                   destination_id=None):
    body = {}
    body['destination_id'] = destination_id
    return client.move(user_id=user_id,
                       message_id=message_id,
                       body=body)


def usersactions_usersmessage_reply(client,
                                    user_id,
                                    message_id,
                                    body,
                                    comment=None,
                                    id_=None,
                                    categories=None,
                                    change_key=None,
                                    created_date_time=None,
                                    last_modified_date_time=None,
                                    bcc_recipients=None,
                                    body_preview=None,
                                    cc_recipients=None,
                                    conversation_id=None,
                                    conversation_index=None,
                                    flag=None,
                                    from=None,
                                    has_attachments=None,
                                    importance=None,
                                    inference_classification=None,
                                    internet_message_headers=None,
                                    internet_message_id=None,
                                    is_delivery_receipt_requested=None,
                                    is_draft=None,
                                    is_read=None,
                                    is_read_receipt_requested=None,
                                    parent_folder_id=None,
                                    received_date_time=None,
                                    reply_to=None,
                                    sender=None,
                                    sent_date_time=None,
                                    subject=None,
                                    to_recipients=None,
                                    unique_body=None,
                                    web_link=None,
                                    attachments=None,
                                    extensions=None,
                                    multi_value_extended_properties=None,
                                    single_value_extended_properties=None):
    body = {}
    body['comment'] = comment
    body['message'] = {}
    body['message']['id'] = id_
    body['message']['categories'] = categories
    body['message']['change_key'] = change_key
    body['message']['created_date_time'] = created_date_time
    body['message']['last_modified_date_time'] = last_modified_date_time
    body['message']['bcc_recipients'] = bcc_recipients
    body['message']['body'] = body
    body['message']['body_preview'] = body_preview
    body['message']['cc_recipients'] = cc_recipients
    body['message']['conversation_id'] = conversation_id
    body['message']['conversation_index'] = conversation_index
    body['message']['flag'] = flag
    body['message']['from_property'] = from
    body['message']['has_attachments'] = has_attachments
    body['message']['importance'] = importance
    body['message']['inference_classification'] = inference_classification
    body['message']['internet_message_headers'] = internet_message_headers
    body['message']['internet_message_id'] = internet_message_id
    body['message']['is_delivery_receipt_requested'] = is_delivery_receipt_requested
    body['message']['is_draft'] = is_draft
    body['message']['is_read'] = is_read
    body['message']['is_read_receipt_requested'] = is_read_receipt_requested
    body['message']['parent_folder_id'] = parent_folder_id
    body['message']['received_date_time'] = received_date_time
    body['message']['reply_to'] = reply_to
    body['message']['sender'] = sender
    body['message']['sent_date_time'] = sent_date_time
    body['message']['subject'] = subject
    body['message']['to_recipients'] = to_recipients
    body['message']['unique_body'] = unique_body
    body['message']['web_link'] = web_link
    body['message']['attachments'] = attachments
    body['message']['extensions'] = extensions
    body['message']['multi_value_extended_properties'] = multi_value_extended_properties
    body['message']['single_value_extended_properties'] = single_value_extended_properties
    return client.reply(user_id=user_id,
                        message_id=message_id,
                        body=body)


def usersactions_usersmessage_reply_all(client,
                                        user_id,
                                        message_id,
                                        body,
                                        comment=None,
                                        id_=None,
                                        categories=None,
                                        change_key=None,
                                        created_date_time=None,
                                        last_modified_date_time=None,
                                        bcc_recipients=None,
                                        body_preview=None,
                                        cc_recipients=None,
                                        conversation_id=None,
                                        conversation_index=None,
                                        flag=None,
                                        from=None,
                                        has_attachments=None,
                                        importance=None,
                                        inference_classification=None,
                                        internet_message_headers=None,
                                        internet_message_id=None,
                                        is_delivery_receipt_requested=None,
                                        is_draft=None,
                                        is_read=None,
                                        is_read_receipt_requested=None,
                                        parent_folder_id=None,
                                        received_date_time=None,
                                        reply_to=None,
                                        sender=None,
                                        sent_date_time=None,
                                        subject=None,
                                        to_recipients=None,
                                        unique_body=None,
                                        web_link=None,
                                        attachments=None,
                                        extensions=None,
                                        multi_value_extended_properties=None,
                                        single_value_extended_properties=None):
    body = {}
    body['comment'] = comment
    body['message'] = {}
    body['message']['id'] = id_
    body['message']['categories'] = categories
    body['message']['change_key'] = change_key
    body['message']['created_date_time'] = created_date_time
    body['message']['last_modified_date_time'] = last_modified_date_time
    body['message']['bcc_recipients'] = bcc_recipients
    body['message']['body'] = body
    body['message']['body_preview'] = body_preview
    body['message']['cc_recipients'] = cc_recipients
    body['message']['conversation_id'] = conversation_id
    body['message']['conversation_index'] = conversation_index
    body['message']['flag'] = flag
    body['message']['from_property'] = from
    body['message']['has_attachments'] = has_attachments
    body['message']['importance'] = importance
    body['message']['inference_classification'] = inference_classification
    body['message']['internet_message_headers'] = internet_message_headers
    body['message']['internet_message_id'] = internet_message_id
    body['message']['is_delivery_receipt_requested'] = is_delivery_receipt_requested
    body['message']['is_draft'] = is_draft
    body['message']['is_read'] = is_read
    body['message']['is_read_receipt_requested'] = is_read_receipt_requested
    body['message']['parent_folder_id'] = parent_folder_id
    body['message']['received_date_time'] = received_date_time
    body['message']['reply_to'] = reply_to
    body['message']['sender'] = sender
    body['message']['sent_date_time'] = sent_date_time
    body['message']['subject'] = subject
    body['message']['to_recipients'] = to_recipients
    body['message']['unique_body'] = unique_body
    body['message']['web_link'] = web_link
    body['message']['attachments'] = attachments
    body['message']['extensions'] = extensions
    body['message']['multi_value_extended_properties'] = multi_value_extended_properties
    body['message']['single_value_extended_properties'] = single_value_extended_properties
    return client.reply_all(user_id=user_id,
                            message_id=message_id,
                            body=body)


def usersactions_usersmessage_send(client,
                                   user_id,
                                   message_id):
    return client.send(user_id=user_id,
                       message_id=message_id)


def usersactions_user_assign_license(client,
                                     user_id,
                                     add_licenses=None,
                                     remove_licenses=None):
    body = {}
    body['add_licenses'] = add_licenses
    body['remove_licenses'] = remove_licenses
    return client.assign_license(user_id=user_id,
                                 body=body)


def usersactions_user_change_password(client,
                                      user_id,
                                      current_password=None,
                                      new_password=None):
    body = {}
    body['current_password'] = current_password
    body['new_password'] = new_password
    return client.change_password(user_id=user_id,
                                  body=body)


def usersactions_user_check_member_group(client,
                                         user_id,
                                         group_ids=None):
    body = {}
    body['group_ids'] = group_ids
    return client.check_member_groups(user_id=user_id,
                                      body=body)


def usersactions_user_check_member_object(client,
                                          user_id,
                                          ids=None):
    body = {}
    body['ids'] = ids
    return client.check_member_objects(user_id=user_id,
                                       body=body)


def usersactions_user_export_personal_data(client,
                                           user_id,
                                           storage_location=None):
    body = {}
    body['storage_location'] = storage_location
    return client.export_personal_data(user_id=user_id,
                                       body=body)


def usersactions_user_find_meeting_time(client,
                                        user_id,
                                        body):
    return client.find_meeting_times(user_id=user_id,
                                     body=body)


def usersactions_user_get_available_extension_property(client,
                                                       is_synced_from_on_premises=None):
    if is_synced_from_on_premises is None:
        is_synced_from_on_premises = False
    body = {}
    body['is_synced_from_on_premises'] = False if is_synced_from_on_premises is None else is_synced_from_on_premises
    return client.get_available_extension_properties(body=body)


def usersactions_user_get_by_id(client,
                                ids=None,
                                types=None):
    body = {}
    body['ids'] = ids
    body['types'] = types
    return client.get_by_ids(body=body)


def usersactions_user_get_mail_tip(client,
                                   user_id,
                                   email_addresses=None,
                                   mail_tips_options=None):
    body = {}
    body['email_addresses'] = email_addresses
    body['mail_tips_options'] = mail_tips_options
    return client.get_mail_tips(user_id=user_id,
                                body=body)


def usersactions_user_get_member_group(client,
                                       user_id,
                                       security_enabled_only=None):
    if security_enabled_only is None:
        security_enabled_only = False
    body = {}
    body['security_enabled_only'] = False if security_enabled_only is None else security_enabled_only
    return client.get_member_groups(user_id=user_id,
                                    body=body)


def usersactions_user_get_member_object(client,
                                        user_id,
                                        security_enabled_only=None):
    if security_enabled_only is None:
        security_enabled_only = False
    body = {}
    body['security_enabled_only'] = False if security_enabled_only is None else security_enabled_only
    return client.get_member_objects(user_id=user_id,
                                     body=body)


def usersactions_user_remove_all_device_from_management(client,
                                                        user_id):
    return client.remove_all_devices_from_management(user_id=user_id)


def usersactions_user_reprocess_license_assignment(client,
                                                   user_id):
    return client.reprocess_license_assignment(user_id=user_id)


def usersactions_user_restore(client,
                              user_id):
    return client.restore(user_id=user_id)


def usersactions_user_revoke_sign_in_session(client,
                                             user_id):
    return client.revoke_sign_in_sessions(user_id=user_id)


def usersactions_user_send_mail(client,
                                user_id,
                                body,
                                save_to_sent_items=None,
                                id_=None,
                                categories=None,
                                change_key=None,
                                created_date_time=None,
                                last_modified_date_time=None,
                                bcc_recipients=None,
                                body_preview=None,
                                cc_recipients=None,
                                conversation_id=None,
                                conversation_index=None,
                                flag=None,
                                from=None,
                                has_attachments=None,
                                importance=None,
                                inference_classification=None,
                                internet_message_headers=None,
                                internet_message_id=None,
                                is_delivery_receipt_requested=None,
                                is_draft=None,
                                is_read=None,
                                is_read_receipt_requested=None,
                                parent_folder_id=None,
                                received_date_time=None,
                                reply_to=None,
                                sender=None,
                                sent_date_time=None,
                                subject=None,
                                to_recipients=None,
                                unique_body=None,
                                web_link=None,
                                attachments=None,
                                extensions=None,
                                multi_value_extended_properties=None,
                                single_value_extended_properties=None):
    if save_to_sent_items is None:
        save_to_sent_items = False
    body = {}
    body['save_to_sent_items'] = False if save_to_sent_items is None else save_to_sent_items
    body['message'] = {}
    body['message']['id'] = id_
    body['message']['categories'] = categories
    body['message']['change_key'] = change_key
    body['message']['created_date_time'] = created_date_time
    body['message']['last_modified_date_time'] = last_modified_date_time
    body['message']['bcc_recipients'] = bcc_recipients
    body['message']['body'] = body
    body['message']['body_preview'] = body_preview
    body['message']['cc_recipients'] = cc_recipients
    body['message']['conversation_id'] = conversation_id
    body['message']['conversation_index'] = conversation_index
    body['message']['flag'] = flag
    body['message']['from_property'] = from
    body['message']['has_attachments'] = has_attachments
    body['message']['importance'] = importance
    body['message']['inference_classification'] = inference_classification
    body['message']['internet_message_headers'] = internet_message_headers
    body['message']['internet_message_id'] = internet_message_id
    body['message']['is_delivery_receipt_requested'] = is_delivery_receipt_requested
    body['message']['is_draft'] = is_draft
    body['message']['is_read'] = is_read
    body['message']['is_read_receipt_requested'] = is_read_receipt_requested
    body['message']['parent_folder_id'] = parent_folder_id
    body['message']['received_date_time'] = received_date_time
    body['message']['reply_to'] = reply_to
    body['message']['sender'] = sender
    body['message']['sent_date_time'] = sent_date_time
    body['message']['subject'] = subject
    body['message']['to_recipients'] = to_recipients
    body['message']['unique_body'] = unique_body
    body['message']['web_link'] = web_link
    body['message']['attachments'] = attachments
    body['message']['extensions'] = extensions
    body['message']['multi_value_extended_properties'] = multi_value_extended_properties
    body['message']['single_value_extended_properties'] = single_value_extended_properties
    return client.send_mail(user_id=user_id,
                            body=body)


def usersactions_user_translate_exchange_id(client,
                                            user_id,
                                            input_ids=None,
                                            target_id_type=None,
                                            source_id_type=None):
    body = {}
    body['input_ids'] = input_ids
    body['target_id_type'] = target_id_type
    body['source_id_type'] = source_id_type
    return client.translate_exchange_ids(user_id=user_id,
                                         body=body)


def usersactions_user_validate_property(client,
                                        entity_type=None,
                                        display_name=None,
                                        mail_nickname=None,
                                        on_behalf_of_user_id=None):
    body = {}
    body['entity_type'] = entity_type
    body['display_name'] = display_name
    body['mail_nickname'] = mail_nickname
    body['on_behalf_of_user_id'] = on_behalf_of_user_id
    return client.validate_properties(body=body)


def usersactions_user_wipe_managed_app_registration_by_device_tag(client,
                                                                  user_id,
                                                                  device_tag=None):
    body = {}
    body['device_tag'] = device_tag
    return client.wipe_managed_app_registrations_by_device_tag(user_id=user_id,
                                                               body=body)


def usersactions_usersonenotenotebook_copy_notebook(client,
                                                    user_id,
                                                    notebook_id,
                                                    group_id=None,
                                                    rename_as=None,
                                                    notebook_folder=None,
                                                    site_collection_id=None,
                                                    site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                notebook_id=notebook_id,
                                body=body)


def usersactions_usersonenotenotebook_get_notebook_from_web_url(client,
                                                                user_id,
                                                                web_url=None):
    body = {}
    body['web_url'] = web_url
    return client.get_notebook_from_web_url(user_id=user_id,
                                            body=body)


def usersactions_usersonenotenotebookssectiongroupsparentnotebook_copy_notebook(client,
                                                                                user_id,
                                                                                notebook_id,
                                                                                section_group_id,
                                                                                group_id=None,
                                                                                rename_as=None,
                                                                                notebook_folder=None,
                                                                                site_collection_id=None,
                                                                                site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                notebook_id=notebook_id,
                                section_group_id=section_group_id,
                                body=body)


def usersactions_usersonenotenotebookssectiongroupssection_copy_to_notebook(client,
                                                                            user_id,
                                                                            notebook_id,
                                                                            section_group_id,
                                                                            onenote_section_id,
                                                                            id_=None,
                                                                            group_id=None,
                                                                            rename_as=None,
                                                                            site_collection_id=None,
                                                                            site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   notebook_id=notebook_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def usersactions_usersonenotenotebookssectiongroupssection_copy_to_section_group(client,
                                                                                 user_id,
                                                                                 notebook_id,
                                                                                 section_group_id,
                                                                                 onenote_section_id,
                                                                                 id_=None,
                                                                                 group_id=None,
                                                                                 rename_as=None,
                                                                                 site_collection_id=None,
                                                                                 site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        notebook_id=notebook_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def usersactions_usersonenotenotebookssectiongroupssectionspage_copy_to_section(client,
                                                                                user_id,
                                                                                notebook_id,
                                                                                section_group_id,
                                                                                onenote_section_id,
                                                                                onenote_page_id,
                                                                                id_=None,
                                                                                group_id=None,
                                                                                site_collection_id=None,
                                                                                site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(user_id=user_id,
                                  notebook_id=notebook_id,
                                  section_group_id=section_group_id,
                                  onenote_section_id=onenote_section_id,
                                  onenote_page_id=onenote_page_id,
                                  body=body)


def usersactions_usersonenotenotebookssectiongroupssectionspage_onenote_patch_content(client,
                                                                                      user_id,
                                                                                      notebook_id,
                                                                                      section_group_id,
                                                                                      onenote_section_id,
                                                                                      onenote_page_id,
                                                                                      commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(user_id=user_id,
                                        notebook_id=notebook_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def usersactions_usersonenotenotebookssectiongroupssectionspagesparentnotebook_copy_notebook(client,
                                                                                             user_id,
                                                                                             notebook_id,
                                                                                             section_group_id,
                                                                                             onenote_section_id,
                                                                                             onenote_page_id,
                                                                                             group_id=None,
                                                                                             rename_as=None,
                                                                                             notebook_folder=None,
                                                                                             site_collection_id=None,
                                                                                             site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                notebook_id=notebook_id,
                                section_group_id=section_group_id,
                                onenote_section_id=onenote_section_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def usersactions_usersonenotenotebookssectiongroupssectionspagesparentsection_copy_to_notebook(client,
                                                                                               user_id,
                                                                                               notebook_id,
                                                                                               section_group_id,
                                                                                               onenote_section_id,
                                                                                               onenote_page_id,
                                                                                               id_=None,
                                                                                               group_id=None,
                                                                                               rename_as=None,
                                                                                               site_collection_id=None,
                                                                                               site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   notebook_id=notebook_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   body=body)


def usersactions_usersonenotenotebookssectiongroupssectionspagesparentsection_copy_to_section_group(client,
                                                                                                    user_id,
                                                                                                    notebook_id,
                                                                                                    section_group_id,
                                                                                                    onenote_section_id,
                                                                                                    onenote_page_id,
                                                                                                    id_=None,
                                                                                                    group_id=None,
                                                                                                    rename_as=None,
                                                                                                    site_collection_id=None,
                                                                                                    site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        notebook_id=notebook_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def usersactions_usersonenotenotebookssectiongroupssectionsparentnotebook_copy_notebook(client,
                                                                                        user_id,
                                                                                        notebook_id,
                                                                                        section_group_id,
                                                                                        onenote_section_id,
                                                                                        group_id=None,
                                                                                        rename_as=None,
                                                                                        notebook_folder=None,
                                                                                        site_collection_id=None,
                                                                                        site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                notebook_id=notebook_id,
                                section_group_id=section_group_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def usersactions_usersonenotenotebookssection_copy_to_notebook(client,
                                                               user_id,
                                                               notebook_id,
                                                               onenote_section_id,
                                                               id_=None,
                                                               group_id=None,
                                                               rename_as=None,
                                                               site_collection_id=None,
                                                               site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   notebook_id=notebook_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def usersactions_usersonenotenotebookssection_copy_to_section_group(client,
                                                                    user_id,
                                                                    notebook_id,
                                                                    onenote_section_id,
                                                                    id_=None,
                                                                    group_id=None,
                                                                    rename_as=None,
                                                                    site_collection_id=None,
                                                                    site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        notebook_id=notebook_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def usersactions_usersonenotenotebookssectionspage_copy_to_section(client,
                                                                   user_id,
                                                                   notebook_id,
                                                                   onenote_section_id,
                                                                   onenote_page_id,
                                                                   id_=None,
                                                                   group_id=None,
                                                                   site_collection_id=None,
                                                                   site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(user_id=user_id,
                                  notebook_id=notebook_id,
                                  onenote_section_id=onenote_section_id,
                                  onenote_page_id=onenote_page_id,
                                  body=body)


def usersactions_usersonenotenotebookssectionspage_onenote_patch_content(client,
                                                                         user_id,
                                                                         notebook_id,
                                                                         onenote_section_id,
                                                                         onenote_page_id,
                                                                         commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(user_id=user_id,
                                        notebook_id=notebook_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def usersactions_usersonenotenotebookssectionspagesparentnotebook_copy_notebook(client,
                                                                                user_id,
                                                                                notebook_id,
                                                                                onenote_section_id,
                                                                                onenote_page_id,
                                                                                group_id=None,
                                                                                rename_as=None,
                                                                                notebook_folder=None,
                                                                                site_collection_id=None,
                                                                                site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                notebook_id=notebook_id,
                                onenote_section_id=onenote_section_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def usersactions_usersonenotenotebookssectionspagesparentsection_copy_to_notebook(client,
                                                                                  user_id,
                                                                                  notebook_id,
                                                                                  onenote_section_id,
                                                                                  onenote_page_id,
                                                                                  id_=None,
                                                                                  group_id=None,
                                                                                  rename_as=None,
                                                                                  site_collection_id=None,
                                                                                  site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   notebook_id=notebook_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   body=body)


def usersactions_usersonenotenotebookssectionspagesparentsection_copy_to_section_group(client,
                                                                                       user_id,
                                                                                       notebook_id,
                                                                                       onenote_section_id,
                                                                                       onenote_page_id,
                                                                                       id_=None,
                                                                                       group_id=None,
                                                                                       rename_as=None,
                                                                                       site_collection_id=None,
                                                                                       site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        notebook_id=notebook_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def usersactions_usersonenotenotebookssectionsparentnotebook_copy_notebook(client,
                                                                           user_id,
                                                                           notebook_id,
                                                                           onenote_section_id,
                                                                           group_id=None,
                                                                           rename_as=None,
                                                                           notebook_folder=None,
                                                                           site_collection_id=None,
                                                                           site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                notebook_id=notebook_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def usersactions_usersonenotenotebookssectionsparentsectiongroupparentnotebook_copy_notebook(client,
                                                                                             user_id,
                                                                                             notebook_id,
                                                                                             onenote_section_id,
                                                                                             group_id=None,
                                                                                             rename_as=None,
                                                                                             notebook_folder=None,
                                                                                             site_collection_id=None,
                                                                                             site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                notebook_id=notebook_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def usersactions_usersonenotenotebookssectionsparentsectiongroupsection_copy_to_notebook(client,
                                                                                         user_id,
                                                                                         notebook_id,
                                                                                         onenote_section_id,
                                                                                         onenote_section_id1,
                                                                                         id_=None,
                                                                                         group_id=None,
                                                                                         rename_as=None,
                                                                                         site_collection_id=None,
                                                                                         site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   notebook_id=notebook_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def usersactions_usersonenotenotebookssectionsparentsectiongroupsection_copy_to_section_group(client,
                                                                                              user_id,
                                                                                              notebook_id,
                                                                                              onenote_section_id,
                                                                                              onenote_section_id1,
                                                                                              id_=None,
                                                                                              group_id=None,
                                                                                              rename_as=None,
                                                                                              site_collection_id=None,
                                                                                              site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        notebook_id=notebook_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def usersactions_usersonenotepage_copy_to_section(client,
                                                  user_id,
                                                  onenote_page_id,
                                                  id_=None,
                                                  group_id=None,
                                                  site_collection_id=None,
                                                  site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(user_id=user_id,
                                  onenote_page_id=onenote_page_id,
                                  body=body)


def usersactions_usersonenotepage_onenote_patch_content(client,
                                                        user_id,
                                                        onenote_page_id,
                                                        commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(user_id=user_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def usersactions_usersonenotepagesparentnotebook_copy_notebook(client,
                                                               user_id,
                                                               onenote_page_id,
                                                               group_id=None,
                                                               rename_as=None,
                                                               notebook_folder=None,
                                                               site_collection_id=None,
                                                               site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def usersactions_usersonenotepagesparentnotebooksectiongroupsparentnotebook_copy_notebook(client,
                                                                                          user_id,
                                                                                          onenote_page_id,
                                                                                          section_group_id,
                                                                                          group_id=None,
                                                                                          rename_as=None,
                                                                                          notebook_folder=None,
                                                                                          site_collection_id=None,
                                                                                          site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                onenote_page_id=onenote_page_id,
                                section_group_id=section_group_id,
                                body=body)


def usersactions_usersonenotepagesparentnotebooksectiongroupssection_copy_to_notebook(client,
                                                                                      user_id,
                                                                                      onenote_page_id,
                                                                                      section_group_id,
                                                                                      onenote_section_id,
                                                                                      id_=None,
                                                                                      group_id=None,
                                                                                      rename_as=None,
                                                                                      site_collection_id=None,
                                                                                      site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_page_id=onenote_page_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def usersactions_usersonenotepagesparentnotebooksectiongroupssection_copy_to_section_group(client,
                                                                                           user_id,
                                                                                           onenote_page_id,
                                                                                           section_group_id,
                                                                                           onenote_section_id,
                                                                                           id_=None,
                                                                                           group_id=None,
                                                                                           rename_as=None,
                                                                                           site_collection_id=None,
                                                                                           site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_page_id=onenote_page_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def usersactions_usersonenotepagesparentnotebooksectiongroupssectionspage_copy_to_section(client,
                                                                                          user_id,
                                                                                          onenote_page_id,
                                                                                          section_group_id,
                                                                                          onenote_section_id,
                                                                                          onenote_page_id1,
                                                                                          id_=None,
                                                                                          group_id=None,
                                                                                          site_collection_id=None,
                                                                                          site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(user_id=user_id,
                                  onenote_page_id=onenote_page_id,
                                  section_group_id=section_group_id,
                                  onenote_section_id=onenote_section_id,
                                  onenote_page_id1=onenote_page_id1,
                                  body=body)


def usersactions_usersonenotepagesparentnotebooksectiongroupssectionspage_onenote_patch_content(client,
                                                                                                user_id,
                                                                                                onenote_page_id,
                                                                                                section_group_id,
                                                                                                onenote_section_id,
                                                                                                onenote_page_id1,
                                                                                                commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(user_id=user_id,
                                        onenote_page_id=onenote_page_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id1=onenote_page_id1,
                                        body=body)


def usersactions_usersonenotepagesparentnotebooksectiongroupssectionsparentnotebook_copy_notebook(client,
                                                                                                  user_id,
                                                                                                  onenote_page_id,
                                                                                                  section_group_id,
                                                                                                  onenote_section_id,
                                                                                                  group_id=None,
                                                                                                  rename_as=None,
                                                                                                  notebook_folder=None,
                                                                                                  site_collection_id=None,
                                                                                                  site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                onenote_page_id=onenote_page_id,
                                section_group_id=section_group_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def usersactions_usersonenotepagesparentnotebooksection_copy_to_notebook(client,
                                                                         user_id,
                                                                         onenote_page_id,
                                                                         onenote_section_id,
                                                                         id_=None,
                                                                         group_id=None,
                                                                         rename_as=None,
                                                                         site_collection_id=None,
                                                                         site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_page_id=onenote_page_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def usersactions_usersonenotepagesparentnotebooksection_copy_to_section_group(client,
                                                                              user_id,
                                                                              onenote_page_id,
                                                                              onenote_section_id,
                                                                              id_=None,
                                                                              group_id=None,
                                                                              rename_as=None,
                                                                              site_collection_id=None,
                                                                              site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def usersactions_usersonenotepagesparentnotebooksectionspage_copy_to_section(client,
                                                                             user_id,
                                                                             onenote_page_id,
                                                                             onenote_section_id,
                                                                             onenote_page_id1,
                                                                             id_=None,
                                                                             group_id=None,
                                                                             site_collection_id=None,
                                                                             site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(user_id=user_id,
                                  onenote_page_id=onenote_page_id,
                                  onenote_section_id=onenote_section_id,
                                  onenote_page_id1=onenote_page_id1,
                                  body=body)


def usersactions_usersonenotepagesparentnotebooksectionspage_onenote_patch_content(client,
                                                                                   user_id,
                                                                                   onenote_page_id,
                                                                                   onenote_section_id,
                                                                                   onenote_page_id1,
                                                                                   commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(user_id=user_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id1=onenote_page_id1,
                                        body=body)


def usersactions_usersonenotepagesparentnotebooksectionsparentnotebook_copy_notebook(client,
                                                                                     user_id,
                                                                                     onenote_page_id,
                                                                                     onenote_section_id,
                                                                                     group_id=None,
                                                                                     rename_as=None,
                                                                                     notebook_folder=None,
                                                                                     site_collection_id=None,
                                                                                     site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                onenote_page_id=onenote_page_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def usersactions_usersonenotepagesparentnotebooksectionsparentsectiongroupparentnotebook_copy_notebook(client,
                                                                                                       user_id,
                                                                                                       onenote_page_id,
                                                                                                       onenote_section_id,
                                                                                                       group_id=None,
                                                                                                       rename_as=None,
                                                                                                       notebook_folder=None,
                                                                                                       site_collection_id=None,
                                                                                                       site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                onenote_page_id=onenote_page_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def usersactions_usersonenotepagesparentnotebooksectionsparentsectiongroupsection_copy_to_notebook(client,
                                                                                                   user_id,
                                                                                                   onenote_page_id,
                                                                                                   onenote_section_id,
                                                                                                   onenote_section_id1,
                                                                                                   id_=None,
                                                                                                   group_id=None,
                                                                                                   rename_as=None,
                                                                                                   site_collection_id=None,
                                                                                                   site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_page_id=onenote_page_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def usersactions_usersonenotepagesparentnotebooksectionsparentsectiongroupsection_copy_to_section_group(client,
                                                                                                        user_id,
                                                                                                        onenote_page_id,
                                                                                                        onenote_section_id,
                                                                                                        onenote_section_id1,
                                                                                                        id_=None,
                                                                                                        group_id=None,
                                                                                                        rename_as=None,
                                                                                                        site_collection_id=None,
                                                                                                        site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def usersactions_usersonenotepagesparentsection_copy_to_notebook(client,
                                                                 user_id,
                                                                 onenote_page_id,
                                                                 id_=None,
                                                                 group_id=None,
                                                                 rename_as=None,
                                                                 site_collection_id=None,
                                                                 site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_page_id=onenote_page_id,
                                   body=body)


def usersactions_usersonenotepagesparentsection_copy_to_section_group(client,
                                                                      user_id,
                                                                      onenote_page_id,
                                                                      id_=None,
                                                                      group_id=None,
                                                                      rename_as=None,
                                                                      site_collection_id=None,
                                                                      site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def usersactions_usersonenotepagesparentsectionpage_copy_to_section(client,
                                                                    user_id,
                                                                    onenote_page_id,
                                                                    onenote_page_id1,
                                                                    id_=None,
                                                                    group_id=None,
                                                                    site_collection_id=None,
                                                                    site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(user_id=user_id,
                                  onenote_page_id=onenote_page_id,
                                  onenote_page_id1=onenote_page_id1,
                                  body=body)


def usersactions_usersonenotepagesparentsectionpage_onenote_patch_content(client,
                                                                          user_id,
                                                                          onenote_page_id,
                                                                          onenote_page_id1,
                                                                          commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(user_id=user_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_page_id1=onenote_page_id1,
                                        body=body)


def usersactions_usersonenotepagesparentsectionparentnotebook_copy_notebook(client,
                                                                            user_id,
                                                                            onenote_page_id,
                                                                            group_id=None,
                                                                            rename_as=None,
                                                                            notebook_folder=None,
                                                                            site_collection_id=None,
                                                                            site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def usersactions_usersonenotepagesparentsectionparentnotebooksectiongroupsparentnotebook_copy_notebook(client,
                                                                                                       user_id,
                                                                                                       onenote_page_id,
                                                                                                       section_group_id,
                                                                                                       group_id=None,
                                                                                                       rename_as=None,
                                                                                                       notebook_folder=None,
                                                                                                       site_collection_id=None,
                                                                                                       site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                onenote_page_id=onenote_page_id,
                                section_group_id=section_group_id,
                                body=body)


def usersactions_usersonenotepagesparentsectionparentnotebooksectiongroupssection_copy_to_notebook(client,
                                                                                                   user_id,
                                                                                                   onenote_page_id,
                                                                                                   section_group_id,
                                                                                                   onenote_section_id,
                                                                                                   id_=None,
                                                                                                   group_id=None,
                                                                                                   rename_as=None,
                                                                                                   site_collection_id=None,
                                                                                                   site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_page_id=onenote_page_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def usersactions_usersonenotepagesparentsectionparentnotebooksectiongroupssection_copy_to_section_group(client,
                                                                                                        user_id,
                                                                                                        onenote_page_id,
                                                                                                        section_group_id,
                                                                                                        onenote_section_id,
                                                                                                        id_=None,
                                                                                                        group_id=None,
                                                                                                        rename_as=None,
                                                                                                        site_collection_id=None,
                                                                                                        site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_page_id=onenote_page_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def usersactions_usersonenotepagesparentsectionparentnotebooksection_copy_to_notebook(client,
                                                                                      user_id,
                                                                                      onenote_page_id,
                                                                                      onenote_section_id,
                                                                                      id_=None,
                                                                                      group_id=None,
                                                                                      rename_as=None,
                                                                                      site_collection_id=None,
                                                                                      site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_page_id=onenote_page_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def usersactions_usersonenotepagesparentsectionparentnotebooksection_copy_to_section_group(client,
                                                                                           user_id,
                                                                                           onenote_page_id,
                                                                                           onenote_section_id,
                                                                                           id_=None,
                                                                                           group_id=None,
                                                                                           rename_as=None,
                                                                                           site_collection_id=None,
                                                                                           site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def usersactions_usersonenotepagesparentsectiongroupparentnotebook_copy_notebook(client,
                                                                                 user_id,
                                                                                 onenote_page_id,
                                                                                 group_id=None,
                                                                                 rename_as=None,
                                                                                 notebook_folder=None,
                                                                                 site_collection_id=None,
                                                                                 site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def usersactions_usersonenotepagesparentsectiongroupparentnotebooksection_copy_to_notebook(client,
                                                                                           user_id,
                                                                                           onenote_page_id,
                                                                                           onenote_section_id,
                                                                                           id_=None,
                                                                                           group_id=None,
                                                                                           rename_as=None,
                                                                                           site_collection_id=None,
                                                                                           site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_page_id=onenote_page_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def usersactions_usersonenotepagesparentsectiongroupparentnotebooksection_copy_to_section_group(client,
                                                                                                user_id,
                                                                                                onenote_page_id,
                                                                                                onenote_section_id,
                                                                                                id_=None,
                                                                                                group_id=None,
                                                                                                rename_as=None,
                                                                                                site_collection_id=None,
                                                                                                site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def usersactions_usersonenotepagesparentsectiongroupsection_copy_to_notebook(client,
                                                                             user_id,
                                                                             onenote_page_id,
                                                                             onenote_section_id,
                                                                             id_=None,
                                                                             group_id=None,
                                                                             rename_as=None,
                                                                             site_collection_id=None,
                                                                             site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_page_id=onenote_page_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def usersactions_usersonenotepagesparentsectiongroupsection_copy_to_section_group(client,
                                                                                  user_id,
                                                                                  onenote_page_id,
                                                                                  onenote_section_id,
                                                                                  id_=None,
                                                                                  group_id=None,
                                                                                  rename_as=None,
                                                                                  site_collection_id=None,
                                                                                  site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def usersactions_usersonenotesectiongroupsparentnotebook_copy_notebook(client,
                                                                       user_id,
                                                                       section_group_id,
                                                                       group_id=None,
                                                                       rename_as=None,
                                                                       notebook_folder=None,
                                                                       site_collection_id=None,
                                                                       site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                section_group_id=section_group_id,
                                body=body)


def usersactions_usersonenotesectiongroupsparentnotebooksection_copy_to_notebook(client,
                                                                                 user_id,
                                                                                 section_group_id,
                                                                                 onenote_section_id,
                                                                                 id_=None,
                                                                                 group_id=None,
                                                                                 rename_as=None,
                                                                                 site_collection_id=None,
                                                                                 site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def usersactions_usersonenotesectiongroupsparentnotebooksection_copy_to_section_group(client,
                                                                                      user_id,
                                                                                      section_group_id,
                                                                                      onenote_section_id,
                                                                                      id_=None,
                                                                                      group_id=None,
                                                                                      rename_as=None,
                                                                                      site_collection_id=None,
                                                                                      site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def usersactions_usersonenotesectiongroupsparentnotebooksectionspage_copy_to_section(client,
                                                                                     user_id,
                                                                                     section_group_id,
                                                                                     onenote_section_id,
                                                                                     onenote_page_id,
                                                                                     id_=None,
                                                                                     group_id=None,
                                                                                     site_collection_id=None,
                                                                                     site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(user_id=user_id,
                                  section_group_id=section_group_id,
                                  onenote_section_id=onenote_section_id,
                                  onenote_page_id=onenote_page_id,
                                  body=body)


def usersactions_usersonenotesectiongroupsparentnotebooksectionspage_onenote_patch_content(client,
                                                                                           user_id,
                                                                                           section_group_id,
                                                                                           onenote_section_id,
                                                                                           onenote_page_id,
                                                                                           commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(user_id=user_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def usersactions_usersonenotesectiongroupsparentnotebooksectionspagesparentnotebook_copy_notebook(client,
                                                                                                  user_id,
                                                                                                  section_group_id,
                                                                                                  onenote_section_id,
                                                                                                  onenote_page_id,
                                                                                                  group_id=None,
                                                                                                  rename_as=None,
                                                                                                  notebook_folder=None,
                                                                                                  site_collection_id=None,
                                                                                                  site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                section_group_id=section_group_id,
                                onenote_section_id=onenote_section_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def usersactions_usersonenotesectiongroupsparentnotebooksectionspagesparentsection_copy_to_notebook(client,
                                                                                                    user_id,
                                                                                                    section_group_id,
                                                                                                    onenote_section_id,
                                                                                                    onenote_page_id,
                                                                                                    id_=None,
                                                                                                    group_id=None,
                                                                                                    rename_as=None,
                                                                                                    site_collection_id=None,
                                                                                                    site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   body=body)


def usersactions_usersonenotesectiongroupsparentnotebooksectionspagesparentsection_copy_to_section_group(client,
                                                                                                         user_id,
                                                                                                         section_group_id,
                                                                                                         onenote_section_id,
                                                                                                         onenote_page_id,
                                                                                                         id_=None,
                                                                                                         group_id=None,
                                                                                                         rename_as=None,
                                                                                                         site_collection_id=None,
                                                                                                         site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def usersactions_usersonenotesectiongroupsparentnotebooksectionsparentnotebook_copy_notebook(client,
                                                                                             user_id,
                                                                                             section_group_id,
                                                                                             onenote_section_id,
                                                                                             group_id=None,
                                                                                             rename_as=None,
                                                                                             notebook_folder=None,
                                                                                             site_collection_id=None,
                                                                                             site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                section_group_id=section_group_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def usersactions_usersonenotesectiongroupssection_copy_to_notebook(client,
                                                                   user_id,
                                                                   section_group_id,
                                                                   onenote_section_id,
                                                                   id_=None,
                                                                   group_id=None,
                                                                   rename_as=None,
                                                                   site_collection_id=None,
                                                                   site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def usersactions_usersonenotesectiongroupssection_copy_to_section_group(client,
                                                                        user_id,
                                                                        section_group_id,
                                                                        onenote_section_id,
                                                                        id_=None,
                                                                        group_id=None,
                                                                        rename_as=None,
                                                                        site_collection_id=None,
                                                                        site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def usersactions_usersonenotesectiongroupssectionspage_copy_to_section(client,
                                                                       user_id,
                                                                       section_group_id,
                                                                       onenote_section_id,
                                                                       onenote_page_id,
                                                                       id_=None,
                                                                       group_id=None,
                                                                       site_collection_id=None,
                                                                       site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(user_id=user_id,
                                  section_group_id=section_group_id,
                                  onenote_section_id=onenote_section_id,
                                  onenote_page_id=onenote_page_id,
                                  body=body)


def usersactions_usersonenotesectiongroupssectionspage_onenote_patch_content(client,
                                                                             user_id,
                                                                             section_group_id,
                                                                             onenote_section_id,
                                                                             onenote_page_id,
                                                                             commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(user_id=user_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def usersactions_usersonenotesectiongroupssectionspagesparentnotebook_copy_notebook(client,
                                                                                    user_id,
                                                                                    section_group_id,
                                                                                    onenote_section_id,
                                                                                    onenote_page_id,
                                                                                    group_id=None,
                                                                                    rename_as=None,
                                                                                    notebook_folder=None,
                                                                                    site_collection_id=None,
                                                                                    site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                section_group_id=section_group_id,
                                onenote_section_id=onenote_section_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def usersactions_usersonenotesectiongroupssectionspagesparentnotebooksection_copy_to_notebook(client,
                                                                                              user_id,
                                                                                              section_group_id,
                                                                                              onenote_section_id,
                                                                                              onenote_page_id,
                                                                                              onenote_section_id1,
                                                                                              id_=None,
                                                                                              group_id=None,
                                                                                              rename_as=None,
                                                                                              site_collection_id=None,
                                                                                              site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def usersactions_usersonenotesectiongroupssectionspagesparentnotebooksection_copy_to_section_group(client,
                                                                                                   user_id,
                                                                                                   section_group_id,
                                                                                                   onenote_section_id,
                                                                                                   onenote_page_id,
                                                                                                   onenote_section_id1,
                                                                                                   id_=None,
                                                                                                   group_id=None,
                                                                                                   rename_as=None,
                                                                                                   site_collection_id=None,
                                                                                                   site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def usersactions_usersonenotesectiongroupssectionspagesparentsection_copy_to_notebook(client,
                                                                                      user_id,
                                                                                      section_group_id,
                                                                                      onenote_section_id,
                                                                                      onenote_page_id,
                                                                                      id_=None,
                                                                                      group_id=None,
                                                                                      rename_as=None,
                                                                                      site_collection_id=None,
                                                                                      site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   body=body)


def usersactions_usersonenotesectiongroupssectionspagesparentsection_copy_to_section_group(client,
                                                                                           user_id,
                                                                                           section_group_id,
                                                                                           onenote_section_id,
                                                                                           onenote_page_id,
                                                                                           id_=None,
                                                                                           group_id=None,
                                                                                           rename_as=None,
                                                                                           site_collection_id=None,
                                                                                           site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def usersactions_usersonenotesectiongroupssectionsparentnotebook_copy_notebook(client,
                                                                               user_id,
                                                                               section_group_id,
                                                                               onenote_section_id,
                                                                               group_id=None,
                                                                               rename_as=None,
                                                                               notebook_folder=None,
                                                                               site_collection_id=None,
                                                                               site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                section_group_id=section_group_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def usersactions_usersonenotesectiongroupssectionsparentnotebooksection_copy_to_notebook(client,
                                                                                         user_id,
                                                                                         section_group_id,
                                                                                         onenote_section_id,
                                                                                         onenote_section_id1,
                                                                                         id_=None,
                                                                                         group_id=None,
                                                                                         rename_as=None,
                                                                                         site_collection_id=None,
                                                                                         site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def usersactions_usersonenotesectiongroupssectionsparentnotebooksection_copy_to_section_group(client,
                                                                                              user_id,
                                                                                              section_group_id,
                                                                                              onenote_section_id,
                                                                                              onenote_section_id1,
                                                                                              id_=None,
                                                                                              group_id=None,
                                                                                              rename_as=None,
                                                                                              site_collection_id=None,
                                                                                              site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def usersactions_usersonenotesection_copy_to_notebook(client,
                                                      user_id,
                                                      onenote_section_id,
                                                      id_=None,
                                                      group_id=None,
                                                      rename_as=None,
                                                      site_collection_id=None,
                                                      site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def usersactions_usersonenotesection_copy_to_section_group(client,
                                                           user_id,
                                                           onenote_section_id,
                                                           id_=None,
                                                           group_id=None,
                                                           rename_as=None,
                                                           site_collection_id=None,
                                                           site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def usersactions_usersonenotesectionspage_copy_to_section(client,
                                                          user_id,
                                                          onenote_section_id,
                                                          onenote_page_id,
                                                          id_=None,
                                                          group_id=None,
                                                          site_collection_id=None,
                                                          site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(user_id=user_id,
                                  onenote_section_id=onenote_section_id,
                                  onenote_page_id=onenote_page_id,
                                  body=body)


def usersactions_usersonenotesectionspage_onenote_patch_content(client,
                                                                user_id,
                                                                onenote_section_id,
                                                                onenote_page_id,
                                                                commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(user_id=user_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def usersactions_usersonenotesectionspagesparentnotebook_copy_notebook(client,
                                                                       user_id,
                                                                       onenote_section_id,
                                                                       onenote_page_id,
                                                                       group_id=None,
                                                                       rename_as=None,
                                                                       notebook_folder=None,
                                                                       site_collection_id=None,
                                                                       site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                onenote_section_id=onenote_section_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def usersactions_usersonenotesectionspagesparentnotebooksectiongroupsparentnotebook_copy_notebook(client,
                                                                                                  user_id,
                                                                                                  onenote_section_id,
                                                                                                  onenote_page_id,
                                                                                                  section_group_id,
                                                                                                  group_id=None,
                                                                                                  rename_as=None,
                                                                                                  notebook_folder=None,
                                                                                                  site_collection_id=None,
                                                                                                  site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                onenote_section_id=onenote_section_id,
                                onenote_page_id=onenote_page_id,
                                section_group_id=section_group_id,
                                body=body)


def usersactions_usersonenotesectionspagesparentnotebooksectiongroupssection_copy_to_notebook(client,
                                                                                              user_id,
                                                                                              onenote_section_id,
                                                                                              onenote_page_id,
                                                                                              section_group_id,
                                                                                              onenote_section_id1,
                                                                                              id_=None,
                                                                                              group_id=None,
                                                                                              rename_as=None,
                                                                                              site_collection_id=None,
                                                                                              site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def usersactions_usersonenotesectionspagesparentnotebooksectiongroupssection_copy_to_section_group(client,
                                                                                                   user_id,
                                                                                                   onenote_section_id,
                                                                                                   onenote_page_id,
                                                                                                   section_group_id,
                                                                                                   onenote_section_id1,
                                                                                                   id_=None,
                                                                                                   group_id=None,
                                                                                                   rename_as=None,
                                                                                                   site_collection_id=None,
                                                                                                   site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def usersactions_usersonenotesectionspagesparentnotebooksection_copy_to_notebook(client,
                                                                                 user_id,
                                                                                 onenote_section_id,
                                                                                 onenote_page_id,
                                                                                 onenote_section_id1,
                                                                                 id_=None,
                                                                                 group_id=None,
                                                                                 rename_as=None,
                                                                                 site_collection_id=None,
                                                                                 site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def usersactions_usersonenotesectionspagesparentnotebooksection_copy_to_section_group(client,
                                                                                      user_id,
                                                                                      onenote_section_id,
                                                                                      onenote_page_id,
                                                                                      onenote_section_id1,
                                                                                      id_=None,
                                                                                      group_id=None,
                                                                                      rename_as=None,
                                                                                      site_collection_id=None,
                                                                                      site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def usersactions_usersonenotesectionspagesparentsection_copy_to_notebook(client,
                                                                         user_id,
                                                                         onenote_section_id,
                                                                         onenote_page_id,
                                                                         id_=None,
                                                                         group_id=None,
                                                                         rename_as=None,
                                                                         site_collection_id=None,
                                                                         site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   body=body)


def usersactions_usersonenotesectionspagesparentsection_copy_to_section_group(client,
                                                                              user_id,
                                                                              onenote_section_id,
                                                                              onenote_page_id,
                                                                              id_=None,
                                                                              group_id=None,
                                                                              rename_as=None,
                                                                              site_collection_id=None,
                                                                              site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def usersactions_usersonenotesectionsparentnotebook_copy_notebook(client,
                                                                  user_id,
                                                                  onenote_section_id,
                                                                  group_id=None,
                                                                  rename_as=None,
                                                                  notebook_folder=None,
                                                                  site_collection_id=None,
                                                                  site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def usersactions_usersonenotesectionsparentnotebooksectiongroupsparentnotebook_copy_notebook(client,
                                                                                             user_id,
                                                                                             onenote_section_id,
                                                                                             section_group_id,
                                                                                             group_id=None,
                                                                                             rename_as=None,
                                                                                             notebook_folder=None,
                                                                                             site_collection_id=None,
                                                                                             site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                onenote_section_id=onenote_section_id,
                                section_group_id=section_group_id,
                                body=body)


def usersactions_usersonenotesectionsparentnotebooksectiongroupssection_copy_to_notebook(client,
                                                                                         user_id,
                                                                                         onenote_section_id,
                                                                                         section_group_id,
                                                                                         onenote_section_id1,
                                                                                         id_=None,
                                                                                         group_id=None,
                                                                                         rename_as=None,
                                                                                         site_collection_id=None,
                                                                                         site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_section_id=onenote_section_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def usersactions_usersonenotesectionsparentnotebooksectiongroupssection_copy_to_section_group(client,
                                                                                              user_id,
                                                                                              onenote_section_id,
                                                                                              section_group_id,
                                                                                              onenote_section_id1,
                                                                                              id_=None,
                                                                                              group_id=None,
                                                                                              rename_as=None,
                                                                                              site_collection_id=None,
                                                                                              site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_section_id=onenote_section_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def usersactions_usersonenotesectionsparentnotebooksection_copy_to_notebook(client,
                                                                            user_id,
                                                                            onenote_section_id,
                                                                            onenote_section_id1,
                                                                            id_=None,
                                                                            group_id=None,
                                                                            rename_as=None,
                                                                            site_collection_id=None,
                                                                            site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def usersactions_usersonenotesectionsparentnotebooksection_copy_to_section_group(client,
                                                                                 user_id,
                                                                                 onenote_section_id,
                                                                                 onenote_section_id1,
                                                                                 id_=None,
                                                                                 group_id=None,
                                                                                 rename_as=None,
                                                                                 site_collection_id=None,
                                                                                 site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def usersactions_usersonenotesectionsparentsectiongroupparentnotebook_copy_notebook(client,
                                                                                    user_id,
                                                                                    onenote_section_id,
                                                                                    group_id=None,
                                                                                    rename_as=None,
                                                                                    notebook_folder=None,
                                                                                    site_collection_id=None,
                                                                                    site_id=None):
    body = {}
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(user_id=user_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def usersactions_usersonenotesectionsparentsectiongroupparentnotebooksection_copy_to_notebook(client,
                                                                                              user_id,
                                                                                              onenote_section_id,
                                                                                              onenote_section_id1,
                                                                                              id_=None,
                                                                                              group_id=None,
                                                                                              rename_as=None,
                                                                                              site_collection_id=None,
                                                                                              site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def usersactions_usersonenotesectionsparentsectiongroupparentnotebooksection_copy_to_section_group(client,
                                                                                                   user_id,
                                                                                                   onenote_section_id,
                                                                                                   onenote_section_id1,
                                                                                                   id_=None,
                                                                                                   group_id=None,
                                                                                                   rename_as=None,
                                                                                                   site_collection_id=None,
                                                                                                   site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def usersactions_usersonenotesectionsparentsectiongroupsection_copy_to_notebook(client,
                                                                                user_id,
                                                                                onenote_section_id,
                                                                                onenote_section_id1,
                                                                                id_=None,
                                                                                group_id=None,
                                                                                rename_as=None,
                                                                                site_collection_id=None,
                                                                                site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(user_id=user_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def usersactions_usersonenotesectionsparentsectiongroupsection_copy_to_section_group(client,
                                                                                     user_id,
                                                                                     onenote_section_id,
                                                                                     onenote_section_id1,
                                                                                     id_=None,
                                                                                     group_id=None,
                                                                                     rename_as=None,
                                                                                     site_collection_id=None,
                                                                                     site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(user_id=user_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def usersactions_usersonlinemeeting_create_or_get(client,
                                                  user_id,
                                                  chat_info=None,
                                                  end_date_time=None,
                                                  external_id=None,
                                                  start_date_time=None,
                                                  subject=None,
                                                  attendees=None,
                                                  organizer=None):
    body = {}
    body['chat_info'] = chat_info
    body['end_date_time'] = end_date_time
    body['external_id'] = external_id
    body['start_date_time'] = start_date_time
    body['subject'] = subject
    body['participants'] = {}
    body['participants']['attendees'] = attendees
    body['participants']['organizer'] = organizer
    return client.create_or_get(user_id=user_id,
                                body=body)
