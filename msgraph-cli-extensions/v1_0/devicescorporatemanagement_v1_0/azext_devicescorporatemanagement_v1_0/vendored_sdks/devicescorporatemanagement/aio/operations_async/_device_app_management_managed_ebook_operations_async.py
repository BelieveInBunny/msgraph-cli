# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class DeviceAppManagementManagedEBookOperations:
    """DeviceAppManagementManagedEBookOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~devices_corporate_management.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_assignment(
        self,
        managed_e_book_id: str,
        orderby: Optional[List[Union[str, "models.Enum70"]]] = None,
        select: Optional[List[Union[str, "models.Enum71"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfManagedEBookAssignment"]:
        """Get assignments from deviceAppManagement.

        Get assignments from deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum70]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum71]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfManagedEBookAssignment or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfManagedEBookAssignment]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfManagedEBookAssignment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_assignment.metadata['url']  # type: ignore
                path_format_arguments = {
                    'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfManagedEBookAssignment', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_assignment.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/assignments'}  # type: ignore

    async def create_assignment(
        self,
        managed_e_book_id: str,
        id: Optional[str] = None,
        install_intent: Optional[Union[str, "models.MicrosoftGraphInstallIntent"]] = None,
        target: Optional[Dict[str, object]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedEBookAssignment":
        """Create new navigation property to assignments for deviceAppManagement.

        Create new navigation property to assignments for deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param id: Read-only.
        :type id: str
        :param install_intent:
        :type install_intent: str or ~devices_corporate_management.models.MicrosoftGraphInstallIntent
        :param target: Base type for assignment targets.
        :type target: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedEBookAssignment, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedEBookAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedEBookAssignment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphManagedEBookAssignment(id=id, install_intent=install_intent, target=target)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphManagedEBookAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedEBookAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_assignment.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/assignments'}  # type: ignore

    async def get_assignment(
        self,
        managed_e_book_id: str,
        managed_e_book_assignment_id: str,
        select: Optional[List[Union[str, "models.Enum72"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedEBookAssignment":
        """Get assignments from deviceAppManagement.

        Get assignments from deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param managed_e_book_assignment_id: key: id of managedEBookAssignment.
        :type managed_e_book_assignment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum72]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedEBookAssignment, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedEBookAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedEBookAssignment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
            'managedEBookAssignment-id': self._serialize.url("managed_e_book_assignment_id", managed_e_book_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedEBookAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_assignment.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/assignments/{managedEBookAssignment-id}'}  # type: ignore

    async def update_assignment(
        self,
        managed_e_book_id: str,
        managed_e_book_assignment_id: str,
        id: Optional[str] = None,
        install_intent: Optional[Union[str, "models.MicrosoftGraphInstallIntent"]] = None,
        target: Optional[Dict[str, object]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property assignments in deviceAppManagement.

        Update the navigation property assignments in deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param managed_e_book_assignment_id: key: id of managedEBookAssignment.
        :type managed_e_book_assignment_id: str
        :param id: Read-only.
        :type id: str
        :param install_intent:
        :type install_intent: str or ~devices_corporate_management.models.MicrosoftGraphInstallIntent
        :param target: Base type for assignment targets.
        :type target: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphManagedEBookAssignment(id=id, install_intent=install_intent, target=target)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
            'managedEBookAssignment-id': self._serialize.url("managed_e_book_assignment_id", managed_e_book_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphManagedEBookAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_assignment.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/assignments/{managedEBookAssignment-id}'}  # type: ignore

    async def delete_assignment(
        self,
        managed_e_book_id: str,
        managed_e_book_assignment_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property assignments for deviceAppManagement.

        Delete navigation property assignments for deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param managed_e_book_assignment_id: key: id of managedEBookAssignment.
        :type managed_e_book_assignment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
            'managedEBookAssignment-id': self._serialize.url("managed_e_book_assignment_id", managed_e_book_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_assignment.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/assignments/{managedEBookAssignment-id}'}  # type: ignore

    def list_device_state(
        self,
        managed_e_book_id: str,
        orderby: Optional[List[Union[str, "models.Enum73"]]] = None,
        select: Optional[List[Union[str, "models.Enum74"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfDeviceInstallState"]:
        """Get deviceStates from deviceAppManagement.

        Get deviceStates from deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum73]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum74]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfDeviceInstallState or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfDeviceInstallState]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfDeviceInstallState"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_device_state.metadata['url']  # type: ignore
                path_format_arguments = {
                    'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfDeviceInstallState', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_device_state.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/deviceStates'}  # type: ignore

    async def create_device_state(
        self,
        managed_e_book_id: str,
        id: Optional[str] = None,
        device_id: Optional[str] = None,
        device_name: Optional[str] = None,
        error_code: Optional[str] = None,
        install_state: Optional[Union[str, "models.MicrosoftGraphInstallState"]] = None,
        last_sync_date_time: Optional[datetime.datetime] = None,
        os_description: Optional[str] = None,
        os_version: Optional[str] = None,
        user_name: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphDeviceInstallState":
        """Create new navigation property to deviceStates for deviceAppManagement.

        Create new navigation property to deviceStates for deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param id: Read-only.
        :type id: str
        :param device_id: Device Id.
        :type device_id: str
        :param device_name: Device name.
        :type device_name: str
        :param error_code: The error code for install failures.
        :type error_code: str
        :param install_state:
        :type install_state: str or ~devices_corporate_management.models.MicrosoftGraphInstallState
        :param last_sync_date_time: Last sync date and time.
        :type last_sync_date_time: ~datetime.datetime
        :param os_description: OS Description.
        :type os_description: str
        :param os_version: OS Version.
        :type os_version: str
        :param user_name: Device User Name.
        :type user_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDeviceInstallState, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphDeviceInstallState
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDeviceInstallState"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphDeviceInstallState(id=id, device_id=device_id, device_name=device_name, error_code=error_code, install_state=install_state, last_sync_date_time=last_sync_date_time, os_description=os_description, os_version=os_version, user_name=user_name)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_device_state.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphDeviceInstallState')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDeviceInstallState', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_device_state.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/deviceStates'}  # type: ignore

    async def get_device_state(
        self,
        managed_e_book_id: str,
        device_install_state_id: str,
        select: Optional[List[Union[str, "models.Enum75"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphDeviceInstallState":
        """Get deviceStates from deviceAppManagement.

        Get deviceStates from deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param device_install_state_id: key: id of deviceInstallState.
        :type device_install_state_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum75]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDeviceInstallState, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphDeviceInstallState
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDeviceInstallState"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_device_state.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
            'deviceInstallState-id': self._serialize.url("device_install_state_id", device_install_state_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDeviceInstallState', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_device_state.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/deviceStates/{deviceInstallState-id}'}  # type: ignore

    async def update_device_state(
        self,
        managed_e_book_id: str,
        device_install_state_id: str,
        id: Optional[str] = None,
        device_id: Optional[str] = None,
        device_name: Optional[str] = None,
        error_code: Optional[str] = None,
        install_state: Optional[Union[str, "models.MicrosoftGraphInstallState"]] = None,
        last_sync_date_time: Optional[datetime.datetime] = None,
        os_description: Optional[str] = None,
        os_version: Optional[str] = None,
        user_name: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property deviceStates in deviceAppManagement.

        Update the navigation property deviceStates in deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param device_install_state_id: key: id of deviceInstallState.
        :type device_install_state_id: str
        :param id: Read-only.
        :type id: str
        :param device_id: Device Id.
        :type device_id: str
        :param device_name: Device name.
        :type device_name: str
        :param error_code: The error code for install failures.
        :type error_code: str
        :param install_state:
        :type install_state: str or ~devices_corporate_management.models.MicrosoftGraphInstallState
        :param last_sync_date_time: Last sync date and time.
        :type last_sync_date_time: ~datetime.datetime
        :param os_description: OS Description.
        :type os_description: str
        :param os_version: OS Version.
        :type os_version: str
        :param user_name: Device User Name.
        :type user_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphDeviceInstallState(id=id, device_id=device_id, device_name=device_name, error_code=error_code, install_state=install_state, last_sync_date_time=last_sync_date_time, os_description=os_description, os_version=os_version, user_name=user_name)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_device_state.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
            'deviceInstallState-id': self._serialize.url("device_install_state_id", device_install_state_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphDeviceInstallState')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_device_state.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/deviceStates/{deviceInstallState-id}'}  # type: ignore

    async def delete_device_state(
        self,
        managed_e_book_id: str,
        device_install_state_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property deviceStates for deviceAppManagement.

        Delete navigation property deviceStates for deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param device_install_state_id: key: id of deviceInstallState.
        :type device_install_state_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_device_state.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
            'deviceInstallState-id': self._serialize.url("device_install_state_id", device_install_state_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_device_state.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/deviceStates/{deviceInstallState-id}'}  # type: ignore

    async def get_install_summary(
        self,
        managed_e_book_id: str,
        select: Optional[List[Union[str, "models.Enum76"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEBookInstallSummary":
        """Get installSummary from deviceAppManagement.

        Get installSummary from deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum76]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEBookInstallSummary, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphEBookInstallSummary
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEBookInstallSummary"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_install_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEBookInstallSummary', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_install_summary.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/installSummary'}  # type: ignore

    async def update_install_summary(
        self,
        managed_e_book_id: str,
        id: Optional[str] = None,
        failed_device_count: Optional[int] = None,
        failed_user_count: Optional[int] = None,
        installed_device_count: Optional[int] = None,
        installed_user_count: Optional[int] = None,
        not_installed_device_count: Optional[int] = None,
        not_installed_user_count: Optional[int] = None,
        **kwargs
    ) -> None:
        """Update the navigation property installSummary in deviceAppManagement.

        Update the navigation property installSummary in deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param id: Read-only.
        :type id: str
        :param failed_device_count: Number of Devices that have failed to install this book.
        :type failed_device_count: int
        :param failed_user_count: Number of Users that have 1 or more device that failed to install
         this book.
        :type failed_user_count: int
        :param installed_device_count: Number of Devices that have successfully installed this book.
        :type installed_device_count: int
        :param installed_user_count: Number of Users whose devices have all succeeded to install this
         book.
        :type installed_user_count: int
        :param not_installed_device_count: Number of Devices that does not have this book installed.
        :type not_installed_device_count: int
        :param not_installed_user_count: Number of Users that did not install this book.
        :type not_installed_user_count: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEBookInstallSummary(id=id, failed_device_count=failed_device_count, failed_user_count=failed_user_count, installed_device_count=installed_device_count, installed_user_count=installed_user_count, not_installed_device_count=not_installed_device_count, not_installed_user_count=not_installed_user_count)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_install_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEBookInstallSummary')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_install_summary.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/installSummary'}  # type: ignore

    async def delete_install_summary(
        self,
        managed_e_book_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property installSummary for deviceAppManagement.

        Delete navigation property installSummary for deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_install_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_install_summary.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/installSummary'}  # type: ignore

    async def assign(
        self,
        managed_e_book_id: str,
        managed_e_book_assignments: Optional[List["models.MicrosoftGraphManagedEBookAssignment"]] = None,
        **kwargs
    ) -> None:
        """Invoke action assign.

        Invoke action assign.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param managed_e_book_assignments:
        :type managed_e_book_assignments: list[~devices_corporate_management.models.MicrosoftGraphManagedEBookAssignment]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsWfdti0DeviceappmanagementManagedebooksManagedebookIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema(managed_e_book_assignments=managed_e_book_assignments)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.assign.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsWfdti0DeviceappmanagementManagedebooksManagedebookIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    assign.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/microsoft.graph.assign'}  # type: ignore

    def list_user_state_summary(
        self,
        managed_e_book_id: str,
        orderby: Optional[List[Union[str, "models.Enum77"]]] = None,
        select: Optional[List[Union[str, "models.Enum78"]]] = None,
        expand: Optional[List[Union[str, "models.Enum79"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfUserInstallStateSummary"]:
        """Get userStateSummary from deviceAppManagement.

        Get userStateSummary from deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum77]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum78]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum79]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfUserInstallStateSummary or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfUserInstallStateSummary]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfUserInstallStateSummary"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_user_state_summary.metadata['url']  # type: ignore
                path_format_arguments = {
                    'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfUserInstallStateSummary', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_user_state_summary.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/userStateSummary'}  # type: ignore

    async def create_user_state_summary(
        self,
        managed_e_book_id: str,
        id: Optional[str] = None,
        failed_device_count: Optional[int] = None,
        installed_device_count: Optional[int] = None,
        not_installed_device_count: Optional[int] = None,
        user_name: Optional[str] = None,
        device_states: Optional[List["models.MicrosoftGraphDeviceInstallState"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphUserInstallStateSummary":
        """Create new navigation property to userStateSummary for deviceAppManagement.

        Create new navigation property to userStateSummary for deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param id: Read-only.
        :type id: str
        :param failed_device_count: Failed Device Count.
        :type failed_device_count: int
        :param installed_device_count: Installed Device Count.
        :type installed_device_count: int
        :param not_installed_device_count: Not installed device count.
        :type not_installed_device_count: int
        :param user_name: User name.
        :type user_name: str
        :param device_states: The install state of the eBook.
        :type device_states: list[~devices_corporate_management.models.MicrosoftGraphDeviceInstallState]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUserInstallStateSummary, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphUserInstallStateSummary
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUserInstallStateSummary"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphUserInstallStateSummary(id=id, failed_device_count=failed_device_count, installed_device_count=installed_device_count, not_installed_device_count=not_installed_device_count, user_name=user_name, device_states=device_states)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_user_state_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphUserInstallStateSummary')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUserInstallStateSummary', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_user_state_summary.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/userStateSummary'}  # type: ignore

    async def get_user_state_summary(
        self,
        managed_e_book_id: str,
        user_install_state_summary_id: str,
        select: Optional[List[Union[str, "models.Enum80"]]] = None,
        expand: Optional[List[Union[str, "models.Enum81"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphUserInstallStateSummary":
        """Get userStateSummary from deviceAppManagement.

        Get userStateSummary from deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param user_install_state_summary_id: key: id of userInstallStateSummary.
        :type user_install_state_summary_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum80]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum81]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUserInstallStateSummary, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphUserInstallStateSummary
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUserInstallStateSummary"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_user_state_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
            'userInstallStateSummary-id': self._serialize.url("user_install_state_summary_id", user_install_state_summary_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUserInstallStateSummary', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_user_state_summary.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/userStateSummary/{userInstallStateSummary-id}'}  # type: ignore

    async def update_user_state_summary(
        self,
        managed_e_book_id: str,
        user_install_state_summary_id: str,
        id: Optional[str] = None,
        failed_device_count: Optional[int] = None,
        installed_device_count: Optional[int] = None,
        not_installed_device_count: Optional[int] = None,
        user_name: Optional[str] = None,
        device_states: Optional[List["models.MicrosoftGraphDeviceInstallState"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property userStateSummary in deviceAppManagement.

        Update the navigation property userStateSummary in deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param user_install_state_summary_id: key: id of userInstallStateSummary.
        :type user_install_state_summary_id: str
        :param id: Read-only.
        :type id: str
        :param failed_device_count: Failed Device Count.
        :type failed_device_count: int
        :param installed_device_count: Installed Device Count.
        :type installed_device_count: int
        :param not_installed_device_count: Not installed device count.
        :type not_installed_device_count: int
        :param user_name: User name.
        :type user_name: str
        :param device_states: The install state of the eBook.
        :type device_states: list[~devices_corporate_management.models.MicrosoftGraphDeviceInstallState]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphUserInstallStateSummary(id=id, failed_device_count=failed_device_count, installed_device_count=installed_device_count, not_installed_device_count=not_installed_device_count, user_name=user_name, device_states=device_states)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_user_state_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
            'userInstallStateSummary-id': self._serialize.url("user_install_state_summary_id", user_install_state_summary_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphUserInstallStateSummary')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_user_state_summary.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/userStateSummary/{userInstallStateSummary-id}'}  # type: ignore

    async def delete_user_state_summary(
        self,
        managed_e_book_id: str,
        user_install_state_summary_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property userStateSummary for deviceAppManagement.

        Delete navigation property userStateSummary for deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param user_install_state_summary_id: key: id of userInstallStateSummary.
        :type user_install_state_summary_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_user_state_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
            'userInstallStateSummary-id': self._serialize.url("user_install_state_summary_id", user_install_state_summary_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_user_state_summary.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}/userStateSummary/{userInstallStateSummary-id}'}  # type: ignore
