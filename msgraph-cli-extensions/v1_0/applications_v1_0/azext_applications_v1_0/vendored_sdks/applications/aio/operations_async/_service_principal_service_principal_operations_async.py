# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class ServicePrincipalServicePrincipalOperations:
    """ServicePrincipalServicePrincipalOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~applications.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_service_principal(
        self,
        orderby: Optional[List[Union[str, "models.Enum27"]]] = None,
        select: Optional[List[Union[str, "models.Enum28"]]] = None,
        expand: Optional[List[Union[str, "models.Enum29"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfServicePrincipal"]:
        """Get entities from servicePrincipals.

        Get entities from servicePrincipals.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~applications.models.Enum27]
        :param select: Select properties to be returned.
        :type select: list[str or ~applications.models.Enum28]
        :param expand: Expand related entities.
        :type expand: list[str or ~applications.models.Enum29]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfServicePrincipal or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~applications.models.CollectionOfServicePrincipal]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfServicePrincipal"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_service_principal.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfServicePrincipal', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_service_principal.metadata = {'url': '/servicePrincipals'}  # type: ignore

    async def create_service_principal(
        self,
        id: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        account_enabled: Optional[bool] = None,
        add_ins: Optional[List["models.MicrosoftGraphAddIn"]] = None,
        alternative_names: Optional[List[str]] = None,
        app_description: Optional[str] = None,
        app_display_name: Optional[str] = None,
        app_id: Optional[str] = None,
        application_template_id: Optional[str] = None,
        app_owner_organization_id: Optional[str] = None,
        app_role_assignment_required: Optional[bool] = None,
        app_roles: Optional[List["models.MicrosoftGraphAppRole"]] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        homepage: Optional[str] = None,
        info: Optional["models.MicrosoftGraphInformationalUrl"] = None,
        key_credentials: Optional[List["models.MicrosoftGraphKeyCredential"]] = None,
        login_url: Optional[str] = None,
        logout_url: Optional[str] = None,
        notes: Optional[str] = None,
        notification_email_addresses: Optional[List[str]] = None,
        oauth2_permission_scopes: Optional[List["models.MicrosoftGraphPermissionScope"]] = None,
        password_credentials: Optional[List["models.MicrosoftGraphPasswordCredential"]] = None,
        preferred_single_sign_on_mode: Optional[str] = None,
        preferred_token_signing_key_thumbprint: Optional[str] = None,
        reply_urls: Optional[List[str]] = None,
        service_principal_names: Optional[List[str]] = None,
        service_principal_type: Optional[str] = None,
        tags: Optional[List[str]] = None,
        token_encryption_key_id: Optional[str] = None,
        app_role_assigned_to: Optional[List["models.MicrosoftGraphAppRoleAssignment"]] = None,
        app_role_assignments: Optional[List["models.MicrosoftGraphAppRoleAssignment"]] = None,
        claims_mapping_policies: Optional[List["models.MicrosoftGraphClaimsMappingPolicy"]] = None,
        created_objects: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        endpoints: Optional[List["models.MicrosoftGraphEndpoint"]] = None,
        home_realm_discovery_policies: Optional[List["models.MicrosoftGraphHomeRealmDiscoveryPolicy"]] = None,
        member_of: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        oauth2_permission_grants: Optional[List["models.MicrosoftGraphOAuth2PermissionGrant"]] = None,
        owned_objects: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        owners: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        token_issuance_policies: Optional[List["models.MicrosoftGraphTokenIssuancePolicy"]] = None,
        token_lifetime_policies: Optional[List["models.MicrosoftGraphTokenLifetimePolicy"]] = None,
        transitive_member_of: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        relay_state: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphServicePrincipal":
        """Add new entity to servicePrincipals.

        Add new entity to servicePrincipals.

        :param id: Read-only.
        :type id: str
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param account_enabled: true if the service principal account is enabled; otherwise, false.
        :type account_enabled: bool
        :param add_ins: Defines custom behavior that a consuming service can use to call an app in
         specific contexts. For example, applications that can render file streams may set the addIns
         property for its 'FileHandler' functionality. This will let services like Microsoft 365 call
         the application in the context of a document the user is working on.
        :type add_ins: list[~applications.models.MicrosoftGraphAddIn]
        :param alternative_names: Used to retrieve service principals by subscription, identify
         resource group and full resource ids for managed identities.
        :type alternative_names: list[str]
        :param app_description:
        :type app_description: str
        :param app_display_name: The display name exposed by the associated application.
        :type app_display_name: str
        :param app_id: The unique identifier for the associated application (its appId property).
        :type app_id: str
        :param application_template_id: Unique identifier of the applicationTemplate that the
         servicePrincipal was created from. Read-only.
        :type application_template_id: str
        :param app_owner_organization_id: Contains the tenant id where the application is registered.
         This is applicable only to service principals backed by applications.
        :type app_owner_organization_id: str
        :param app_role_assignment_required: Specifies whether users or other service principals need
         to be granted an app role assignment for this service principal before users can sign in or
         apps can get tokens. The default value is false. Not nullable.
        :type app_role_assignment_required: bool
        :param app_roles: The roles exposed by the application which this service principal represents.
         For more information see the appRoles property definition on the application entity. Not
         nullable.
        :type app_roles: list[~applications.models.MicrosoftGraphAppRole]
        :param description:
        :type description: str
        :param display_name: The display name for the service principal.
        :type display_name: str
        :param homepage: Home page or landing page of the application.
        :type homepage: str
        :param info: informationalUrl.
        :type info: ~applications.models.MicrosoftGraphInformationalUrl
        :param key_credentials: The collection of key credentials associated with the service
         principal. Not nullable.
        :type key_credentials: list[~applications.models.MicrosoftGraphKeyCredential]
        :param login_url: Specifies the URL where the service provider redirects the user to Azure AD
         to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the
         Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications
         configured with SAML-based single sign-on. The user launches the application from Microsoft
         365, the Azure AD My Apps, or the Azure AD SSO URL.
        :type login_url: str
        :param logout_url: Specifies the URL that will be used by Microsoft's authorization service to
         logout an user using OpenId Connect front-channel, back-channel or SAML logout protocols.
        :type logout_url: str
        :param notes:
        :type notes: str
        :param notification_email_addresses: Specifies the list of email addresses where Azure AD sends
         a notification when the active certificate is near the expiration date. This is only for the
         certificates used to sign the SAML token issued for Azure AD Gallery applications.
        :type notification_email_addresses: list[str]
        :param oauth2_permission_scopes: The delegated permissions exposed by the application. For more
         information see the oauth2PermissionScopes property on the application entity's api property.
         Not nullable.
        :type oauth2_permission_scopes: list[~applications.models.MicrosoftGraphPermissionScope]
        :param password_credentials: The collection of password credentials associated with the service
         principal. Not nullable.
        :type password_credentials: list[~applications.models.MicrosoftGraphPasswordCredential]
        :param preferred_single_sign_on_mode: Specifies the single sign-on mode configured for this
         application. Azure AD uses the preferred single sign-on mode to launch the application from
         Microsoft 365 or the Azure AD My Apps. The supported values are password, saml, external, and
         oidc.
        :type preferred_single_sign_on_mode: str
        :param preferred_token_signing_key_thumbprint:
        :type preferred_token_signing_key_thumbprint: str
        :param reply_urls: The URLs that user tokens are sent to for sign in with the associated
         application, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent
         to for the associated application. Not nullable.
        :type reply_urls: list[str]
        :param service_principal_names: Contains the list of identifiersUris, copied over from the
         associated application. Additional values can be added to hybrid applications. These values can
         be used to identify the permissions exposed by this app within Azure AD. For example,Client
         apps can specify a resource URI which is based on the values of this property to acquire an
         access token, which is the URI returned in the 'aud' claim.The any operator is required for
         filter expressions on multi-valued properties. Not nullable.
        :type service_principal_names: list[str]
        :param service_principal_type: Identifies if the service principal represents an application or
         a managed identity. This is set by Azure AD internally. For a service principal that represents
         an application this is set as Application. For a service principal that represent a managed
         identity this is set as ManagedIdentity.
        :type service_principal_type: str
        :param tags: Custom strings that can be used to categorize and identify the service principal.
         Not nullable.
        :type tags: list[str]
        :param token_encryption_key_id: Specifies the keyId of a public key from the keyCredentials
         collection. When configured, Azure AD issues tokens for this application encrypted using the
         key specified by this property. The application code that receives the encrypted token must use
         the matching private key to decrypt the token before it can be used for the signed-in user.
        :type token_encryption_key_id: str
        :param app_role_assigned_to: Principals (users, groups, and service principals) that are
         assigned to this service principal. Read-only.
        :type app_role_assigned_to: list[~applications.models.MicrosoftGraphAppRoleAssignment]
        :param app_role_assignments: Applications that this service principal is assigned to. Read-
         only. Nullable.
        :type app_role_assignments: list[~applications.models.MicrosoftGraphAppRoleAssignment]
        :param claims_mapping_policies: The claimsMappingPolicies assigned to this service principal.
        :type claims_mapping_policies: list[~applications.models.MicrosoftGraphClaimsMappingPolicy]
        :param created_objects: Directory objects created by this service principal. Read-only.
         Nullable.
        :type created_objects: list[~applications.models.MicrosoftGraphDirectoryObject]
        :param endpoints: Endpoints available for discovery. Services like Sharepoint populate this
         property with a tenant specific SharePoint endpoints that other applications can discover and
         use in their experiences.
        :type endpoints: list[~applications.models.MicrosoftGraphEndpoint]
        :param home_realm_discovery_policies: The homeRealmDiscoveryPolicies assigned to this service
         principal.
        :type home_realm_discovery_policies: list[~applications.models.MicrosoftGraphHomeRealmDiscoveryPolicy]
        :param member_of: Roles that this service principal is a member of. HTTP Methods: GET Read-
         only. Nullable.
        :type member_of: list[~applications.models.MicrosoftGraphDirectoryObject]
        :param oauth2_permission_grants: Delegated permission grants authorizing this service principal
         to access an API on behalf of a signed-in user. Read-only. Nullable.
        :type oauth2_permission_grants: list[~applications.models.MicrosoftGraphOAuth2PermissionGrant]
        :param owned_objects: Directory objects that are owned by this service principal. Read-only.
         Nullable.
        :type owned_objects: list[~applications.models.MicrosoftGraphDirectoryObject]
        :param owners: Directory objects that are owners of this servicePrincipal. The owners are a set
         of non-admin users or servicePrincipals who are allowed to modify this object. Read-only.
         Nullable.
        :type owners: list[~applications.models.MicrosoftGraphDirectoryObject]
        :param token_issuance_policies: The tokenIssuancePolicies assigned to this service principal.
        :type token_issuance_policies: list[~applications.models.MicrosoftGraphTokenIssuancePolicy]
        :param token_lifetime_policies: The tokenLifetimePolicies assigned to this service principal.
        :type token_lifetime_policies: list[~applications.models.MicrosoftGraphTokenLifetimePolicy]
        :param transitive_member_of:
        :type transitive_member_of: list[~applications.models.MicrosoftGraphDirectoryObject]
        :param relay_state: The relative URI the service provider would redirect to after completion of
         the single sign-on flow.
        :type relay_state: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphServicePrincipal, or the result of cls(response)
        :rtype: ~applications.models.MicrosoftGraphServicePrincipal
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphServicePrincipal"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphServicePrincipal(id=id, deleted_date_time=deleted_date_time, account_enabled=account_enabled, add_ins=add_ins, alternative_names=alternative_names, app_description=app_description, app_display_name=app_display_name, app_id=app_id, application_template_id=application_template_id, app_owner_organization_id=app_owner_organization_id, app_role_assignment_required=app_role_assignment_required, app_roles=app_roles, description=description, display_name=display_name, homepage=homepage, info=info, key_credentials=key_credentials, login_url=login_url, logout_url=logout_url, notes=notes, notification_email_addresses=notification_email_addresses, oauth2_permission_scopes=oauth2_permission_scopes, password_credentials=password_credentials, preferred_single_sign_on_mode=preferred_single_sign_on_mode, preferred_token_signing_key_thumbprint=preferred_token_signing_key_thumbprint, reply_urls=reply_urls, service_principal_names=service_principal_names, service_principal_type=service_principal_type, tags=tags, token_encryption_key_id=token_encryption_key_id, app_role_assigned_to=app_role_assigned_to, app_role_assignments=app_role_assignments, claims_mapping_policies=claims_mapping_policies, created_objects=created_objects, endpoints=endpoints, home_realm_discovery_policies=home_realm_discovery_policies, member_of=member_of, oauth2_permission_grants=oauth2_permission_grants, owned_objects=owned_objects, owners=owners, token_issuance_policies=token_issuance_policies, token_lifetime_policies=token_lifetime_policies, transitive_member_of=transitive_member_of, relay_state=relay_state)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_service_principal.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphServicePrincipal')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphServicePrincipal', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_service_principal.metadata = {'url': '/servicePrincipals'}  # type: ignore

    async def get_service_principal(
        self,
        service_principal_id: str,
        select: Optional[List[Union[str, "models.Enum30"]]] = None,
        expand: Optional[List[Union[str, "models.Enum31"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphServicePrincipal":
        """Get entity from servicePrincipals by key.

        Get entity from servicePrincipals by key.

        :param service_principal_id: key: id of servicePrincipal.
        :type service_principal_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~applications.models.Enum30]
        :param expand: Expand related entities.
        :type expand: list[str or ~applications.models.Enum31]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphServicePrincipal, or the result of cls(response)
        :rtype: ~applications.models.MicrosoftGraphServicePrincipal
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphServicePrincipal"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_service_principal.metadata['url']  # type: ignore
        path_format_arguments = {
            'servicePrincipal-id': self._serialize.url("service_principal_id", service_principal_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphServicePrincipal', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_service_principal.metadata = {'url': '/servicePrincipals/{servicePrincipal-id}'}  # type: ignore

    async def update_service_principal(
        self,
        service_principal_id: str,
        id: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        account_enabled: Optional[bool] = None,
        add_ins: Optional[List["models.MicrosoftGraphAddIn"]] = None,
        alternative_names: Optional[List[str]] = None,
        app_description: Optional[str] = None,
        app_display_name: Optional[str] = None,
        app_id: Optional[str] = None,
        application_template_id: Optional[str] = None,
        app_owner_organization_id: Optional[str] = None,
        app_role_assignment_required: Optional[bool] = None,
        app_roles: Optional[List["models.MicrosoftGraphAppRole"]] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        homepage: Optional[str] = None,
        info: Optional["models.MicrosoftGraphInformationalUrl"] = None,
        key_credentials: Optional[List["models.MicrosoftGraphKeyCredential"]] = None,
        login_url: Optional[str] = None,
        logout_url: Optional[str] = None,
        notes: Optional[str] = None,
        notification_email_addresses: Optional[List[str]] = None,
        oauth2_permission_scopes: Optional[List["models.MicrosoftGraphPermissionScope"]] = None,
        password_credentials: Optional[List["models.MicrosoftGraphPasswordCredential"]] = None,
        preferred_single_sign_on_mode: Optional[str] = None,
        preferred_token_signing_key_thumbprint: Optional[str] = None,
        reply_urls: Optional[List[str]] = None,
        service_principal_names: Optional[List[str]] = None,
        service_principal_type: Optional[str] = None,
        tags: Optional[List[str]] = None,
        token_encryption_key_id: Optional[str] = None,
        app_role_assigned_to: Optional[List["models.MicrosoftGraphAppRoleAssignment"]] = None,
        app_role_assignments: Optional[List["models.MicrosoftGraphAppRoleAssignment"]] = None,
        claims_mapping_policies: Optional[List["models.MicrosoftGraphClaimsMappingPolicy"]] = None,
        created_objects: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        endpoints: Optional[List["models.MicrosoftGraphEndpoint"]] = None,
        home_realm_discovery_policies: Optional[List["models.MicrosoftGraphHomeRealmDiscoveryPolicy"]] = None,
        member_of: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        oauth2_permission_grants: Optional[List["models.MicrosoftGraphOAuth2PermissionGrant"]] = None,
        owned_objects: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        owners: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        token_issuance_policies: Optional[List["models.MicrosoftGraphTokenIssuancePolicy"]] = None,
        token_lifetime_policies: Optional[List["models.MicrosoftGraphTokenLifetimePolicy"]] = None,
        transitive_member_of: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        relay_state: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update entity in servicePrincipals.

        Update entity in servicePrincipals.

        :param service_principal_id: key: id of servicePrincipal.
        :type service_principal_id: str
        :param id: Read-only.
        :type id: str
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param account_enabled: true if the service principal account is enabled; otherwise, false.
        :type account_enabled: bool
        :param add_ins: Defines custom behavior that a consuming service can use to call an app in
         specific contexts. For example, applications that can render file streams may set the addIns
         property for its 'FileHandler' functionality. This will let services like Microsoft 365 call
         the application in the context of a document the user is working on.
        :type add_ins: list[~applications.models.MicrosoftGraphAddIn]
        :param alternative_names: Used to retrieve service principals by subscription, identify
         resource group and full resource ids for managed identities.
        :type alternative_names: list[str]
        :param app_description:
        :type app_description: str
        :param app_display_name: The display name exposed by the associated application.
        :type app_display_name: str
        :param app_id: The unique identifier for the associated application (its appId property).
        :type app_id: str
        :param application_template_id: Unique identifier of the applicationTemplate that the
         servicePrincipal was created from. Read-only.
        :type application_template_id: str
        :param app_owner_organization_id: Contains the tenant id where the application is registered.
         This is applicable only to service principals backed by applications.
        :type app_owner_organization_id: str
        :param app_role_assignment_required: Specifies whether users or other service principals need
         to be granted an app role assignment for this service principal before users can sign in or
         apps can get tokens. The default value is false. Not nullable.
        :type app_role_assignment_required: bool
        :param app_roles: The roles exposed by the application which this service principal represents.
         For more information see the appRoles property definition on the application entity. Not
         nullable.
        :type app_roles: list[~applications.models.MicrosoftGraphAppRole]
        :param description:
        :type description: str
        :param display_name: The display name for the service principal.
        :type display_name: str
        :param homepage: Home page or landing page of the application.
        :type homepage: str
        :param info: informationalUrl.
        :type info: ~applications.models.MicrosoftGraphInformationalUrl
        :param key_credentials: The collection of key credentials associated with the service
         principal. Not nullable.
        :type key_credentials: list[~applications.models.MicrosoftGraphKeyCredential]
        :param login_url: Specifies the URL where the service provider redirects the user to Azure AD
         to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the
         Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications
         configured with SAML-based single sign-on. The user launches the application from Microsoft
         365, the Azure AD My Apps, or the Azure AD SSO URL.
        :type login_url: str
        :param logout_url: Specifies the URL that will be used by Microsoft's authorization service to
         logout an user using OpenId Connect front-channel, back-channel or SAML logout protocols.
        :type logout_url: str
        :param notes:
        :type notes: str
        :param notification_email_addresses: Specifies the list of email addresses where Azure AD sends
         a notification when the active certificate is near the expiration date. This is only for the
         certificates used to sign the SAML token issued for Azure AD Gallery applications.
        :type notification_email_addresses: list[str]
        :param oauth2_permission_scopes: The delegated permissions exposed by the application. For more
         information see the oauth2PermissionScopes property on the application entity's api property.
         Not nullable.
        :type oauth2_permission_scopes: list[~applications.models.MicrosoftGraphPermissionScope]
        :param password_credentials: The collection of password credentials associated with the service
         principal. Not nullable.
        :type password_credentials: list[~applications.models.MicrosoftGraphPasswordCredential]
        :param preferred_single_sign_on_mode: Specifies the single sign-on mode configured for this
         application. Azure AD uses the preferred single sign-on mode to launch the application from
         Microsoft 365 or the Azure AD My Apps. The supported values are password, saml, external, and
         oidc.
        :type preferred_single_sign_on_mode: str
        :param preferred_token_signing_key_thumbprint:
        :type preferred_token_signing_key_thumbprint: str
        :param reply_urls: The URLs that user tokens are sent to for sign in with the associated
         application, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent
         to for the associated application. Not nullable.
        :type reply_urls: list[str]
        :param service_principal_names: Contains the list of identifiersUris, copied over from the
         associated application. Additional values can be added to hybrid applications. These values can
         be used to identify the permissions exposed by this app within Azure AD. For example,Client
         apps can specify a resource URI which is based on the values of this property to acquire an
         access token, which is the URI returned in the 'aud' claim.The any operator is required for
         filter expressions on multi-valued properties. Not nullable.
        :type service_principal_names: list[str]
        :param service_principal_type: Identifies if the service principal represents an application or
         a managed identity. This is set by Azure AD internally. For a service principal that represents
         an application this is set as Application. For a service principal that represent a managed
         identity this is set as ManagedIdentity.
        :type service_principal_type: str
        :param tags: Custom strings that can be used to categorize and identify the service principal.
         Not nullable.
        :type tags: list[str]
        :param token_encryption_key_id: Specifies the keyId of a public key from the keyCredentials
         collection. When configured, Azure AD issues tokens for this application encrypted using the
         key specified by this property. The application code that receives the encrypted token must use
         the matching private key to decrypt the token before it can be used for the signed-in user.
        :type token_encryption_key_id: str
        :param app_role_assigned_to: Principals (users, groups, and service principals) that are
         assigned to this service principal. Read-only.
        :type app_role_assigned_to: list[~applications.models.MicrosoftGraphAppRoleAssignment]
        :param app_role_assignments: Applications that this service principal is assigned to. Read-
         only. Nullable.
        :type app_role_assignments: list[~applications.models.MicrosoftGraphAppRoleAssignment]
        :param claims_mapping_policies: The claimsMappingPolicies assigned to this service principal.
        :type claims_mapping_policies: list[~applications.models.MicrosoftGraphClaimsMappingPolicy]
        :param created_objects: Directory objects created by this service principal. Read-only.
         Nullable.
        :type created_objects: list[~applications.models.MicrosoftGraphDirectoryObject]
        :param endpoints: Endpoints available for discovery. Services like Sharepoint populate this
         property with a tenant specific SharePoint endpoints that other applications can discover and
         use in their experiences.
        :type endpoints: list[~applications.models.MicrosoftGraphEndpoint]
        :param home_realm_discovery_policies: The homeRealmDiscoveryPolicies assigned to this service
         principal.
        :type home_realm_discovery_policies: list[~applications.models.MicrosoftGraphHomeRealmDiscoveryPolicy]
        :param member_of: Roles that this service principal is a member of. HTTP Methods: GET Read-
         only. Nullable.
        :type member_of: list[~applications.models.MicrosoftGraphDirectoryObject]
        :param oauth2_permission_grants: Delegated permission grants authorizing this service principal
         to access an API on behalf of a signed-in user. Read-only. Nullable.
        :type oauth2_permission_grants: list[~applications.models.MicrosoftGraphOAuth2PermissionGrant]
        :param owned_objects: Directory objects that are owned by this service principal. Read-only.
         Nullable.
        :type owned_objects: list[~applications.models.MicrosoftGraphDirectoryObject]
        :param owners: Directory objects that are owners of this servicePrincipal. The owners are a set
         of non-admin users or servicePrincipals who are allowed to modify this object. Read-only.
         Nullable.
        :type owners: list[~applications.models.MicrosoftGraphDirectoryObject]
        :param token_issuance_policies: The tokenIssuancePolicies assigned to this service principal.
        :type token_issuance_policies: list[~applications.models.MicrosoftGraphTokenIssuancePolicy]
        :param token_lifetime_policies: The tokenLifetimePolicies assigned to this service principal.
        :type token_lifetime_policies: list[~applications.models.MicrosoftGraphTokenLifetimePolicy]
        :param transitive_member_of:
        :type transitive_member_of: list[~applications.models.MicrosoftGraphDirectoryObject]
        :param relay_state: The relative URI the service provider would redirect to after completion of
         the single sign-on flow.
        :type relay_state: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphServicePrincipal(id=id, deleted_date_time=deleted_date_time, account_enabled=account_enabled, add_ins=add_ins, alternative_names=alternative_names, app_description=app_description, app_display_name=app_display_name, app_id=app_id, application_template_id=application_template_id, app_owner_organization_id=app_owner_organization_id, app_role_assignment_required=app_role_assignment_required, app_roles=app_roles, description=description, display_name=display_name, homepage=homepage, info=info, key_credentials=key_credentials, login_url=login_url, logout_url=logout_url, notes=notes, notification_email_addresses=notification_email_addresses, oauth2_permission_scopes=oauth2_permission_scopes, password_credentials=password_credentials, preferred_single_sign_on_mode=preferred_single_sign_on_mode, preferred_token_signing_key_thumbprint=preferred_token_signing_key_thumbprint, reply_urls=reply_urls, service_principal_names=service_principal_names, service_principal_type=service_principal_type, tags=tags, token_encryption_key_id=token_encryption_key_id, app_role_assigned_to=app_role_assigned_to, app_role_assignments=app_role_assignments, claims_mapping_policies=claims_mapping_policies, created_objects=created_objects, endpoints=endpoints, home_realm_discovery_policies=home_realm_discovery_policies, member_of=member_of, oauth2_permission_grants=oauth2_permission_grants, owned_objects=owned_objects, owners=owners, token_issuance_policies=token_issuance_policies, token_lifetime_policies=token_lifetime_policies, transitive_member_of=transitive_member_of, relay_state=relay_state)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_service_principal.metadata['url']  # type: ignore
        path_format_arguments = {
            'servicePrincipal-id': self._serialize.url("service_principal_id", service_principal_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphServicePrincipal')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_service_principal.metadata = {'url': '/servicePrincipals/{servicePrincipal-id}'}  # type: ignore

    async def delete_service_principal(
        self,
        service_principal_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete entity from servicePrincipals.

        Delete entity from servicePrincipals.

        :param service_principal_id: key: id of servicePrincipal.
        :type service_principal_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_service_principal.metadata['url']  # type: ignore
        path_format_arguments = {
            'servicePrincipal-id': self._serialize.url("service_principal_id", service_principal_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_service_principal.metadata = {'url': '/servicePrincipals/{servicePrincipal-id}'}  # type: ignore
