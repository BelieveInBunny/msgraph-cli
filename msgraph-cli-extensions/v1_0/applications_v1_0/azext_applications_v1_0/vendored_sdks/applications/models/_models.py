# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class collectionofapplication(msrest.serialization.Model):
    """Collection of application.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphapplication]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphapplication]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofapplication, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofapproleassignment(msrest.serialization.Model):
    """Collection of appRoleAssignment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphapproleassignment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphapproleassignment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofapproleassignment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofapproleassignment0(msrest.serialization.Model):
    """Collection of appRoleAssignment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphapproleassignment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphapproleassignment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofapproleassignment0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofapproleassignment1(msrest.serialization.Model):
    """Collection of appRoleAssignment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphapproleassignment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphapproleassignment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofapproleassignment1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofapproleassignment2(msrest.serialization.Model):
    """Collection of appRoleAssignment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphapproleassignment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphapproleassignment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofapproleassignment2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofclaimsmappingpolicy(msrest.serialization.Model):
    """Collection of claimsMappingPolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphclaimsmappingpolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphclaimsmappingpolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofclaimsmappingpolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject0(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject1(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject2(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject3(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject3, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofdirectoryobject4(msrest.serialization.Model):
    """Collection of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphdirectoryobject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphdirectoryobject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofdirectoryobject4, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofendpoint(msrest.serialization.Model):
    """Collection of endpoint.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphendpoint]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphendpoint]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofendpoint, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofextensionproperty(msrest.serialization.Model):
    """Collection of extensionProperty.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphextensionproperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphextensionproperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofextensionproperty, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofhomerealmdiscoverypolicy(msrest.serialization.Model):
    """Collection of homeRealmDiscoveryPolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphhomerealmdiscoverypolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphhomerealmdiscoverypolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofhomerealmdiscoverypolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofhomerealmdiscoverypolicy0(msrest.serialization.Model):
    """Collection of homeRealmDiscoveryPolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphhomerealmdiscoverypolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphhomerealmdiscoverypolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofhomerealmdiscoverypolicy0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofclaimsmappingpolicy(msrest.serialization.Model):
    """Collection of links of claimsMappingPolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofclaimsmappingpolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject0(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject1(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject2(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject3(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject3, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofdirectoryobject4(msrest.serialization.Model):
    """Collection of links of directoryObject.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofdirectoryobject4, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofhomerealmdiscoverypolicy(msrest.serialization.Model):
    """Collection of links of homeRealmDiscoveryPolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofhomerealmdiscoverypolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofhomerealmdiscoverypolicy0(msrest.serialization.Model):
    """Collection of links of homeRealmDiscoveryPolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofhomerealmdiscoverypolicy0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksofoauth2permissiongrant(msrest.serialization.Model):
    """Collection of links of oAuth2PermissionGrant.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksofoauth2permissiongrant, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksoftokenissuancepolicy(msrest.serialization.Model):
    """Collection of links of tokenIssuancePolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksoftokenissuancepolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksoftokenissuancepolicy0(msrest.serialization.Model):
    """Collection of links of tokenIssuancePolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksoftokenissuancepolicy0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksoftokenlifetimepolicy(msrest.serialization.Model):
    """Collection of links of tokenLifetimePolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksoftokenlifetimepolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoflinksoftokenlifetimepolicy0(msrest.serialization.Model):
    """Collection of links of tokenLifetimePolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoflinksoftokenlifetimepolicy0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofoauth2permissiongrant(msrest.serialization.Model):
    """Collection of oAuth2PermissionGrant.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphoauth2permissiongrant]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphoauth2permissiongrant]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofoauth2permissiongrant, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionofserviceprincipal(msrest.serialization.Model):
    """Collection of servicePrincipal.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphserviceprincipal]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphserviceprincipal]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionofserviceprincipal, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoftokenissuancepolicy(msrest.serialization.Model):
    """Collection of tokenIssuancePolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphtokenissuancepolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphtokenissuancepolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoftokenissuancepolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoftokenissuancepolicy0(msrest.serialization.Model):
    """Collection of tokenIssuancePolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphtokenissuancepolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphtokenissuancepolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoftokenissuancepolicy0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoftokenlifetimepolicy(msrest.serialization.Model):
    """Collection of tokenLifetimePolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphtokenlifetimepolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphtokenlifetimepolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoftokenlifetimepolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class collectionoftokenlifetimepolicy0(msrest.serialization.Model):
    """Collection of tokenLifetimePolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~applications.models.microsoftgraphtokenlifetimepolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[microsoftgraphtokenlifetimepolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(collectionoftokenlifetimepolicy0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class microsoftgraphaddin(msrest.serialization.Model):
    """addIn.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id:
    :type id: str
    :param properties:
    :type properties: list[~applications.models.microsoftgraphkeyvalue]
    :param type:
    :type type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '[microsoftgraphkeyvalue]'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphaddin, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)
        self.properties = kwargs.get('properties', None)
        self.type = kwargs.get('type', None)


class microsoftgraphapiapplication(msrest.serialization.Model):
    """apiApplication.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param accept_mapped_claims: When true, allows an application to use claims mapping without
     specifying a custom signing key.
    :type accept_mapped_claims: bool
    :param known_client_applications: Used for bundling consent if you have a solution that
     contains two parts: a client app and a custom web API app. If you set the appID of the client
     app to this value, the user only consents once to the client app. Azure AD knows that
     consenting to the client means implicitly consenting to the web API and automatically
     provisions service principals for both APIs at the same time. Both the client and the web API
     app must be registered in the same tenant.
    :type known_client_applications: list[str]
    :param oauth2_permission_scopes: The definition of the delegated permissions exposed by the web
     API represented by this application registration. These delegated permissions may be requested
     by a client application, and may be granted by users or administrators during consent.
     Delegated permissions are sometimes referred to as OAuth 2.0 scopes.
    :type oauth2_permission_scopes: list[~applications.models.microsoftgraphpermissionscope]
    :param pre_authorized_applications: Lists the client applications that are pre-authorized with
     the specified delegated permissions to access this application's APIs. Users are not required
     to consent to any pre-authorized application (for the permissions specified). However, any
     additional permissions not listed in preAuthorizedApplications (requested through incremental
     consent for example) will require user consent.
    :type pre_authorized_applications:
     list[~applications.models.microsoftgraphpreauthorizedapplication]
    :param requested_access_token_version: Specifies the access token version expected by this
     resource. This changes the version and format of the JWT produced independent of the endpoint
     or client used to request the access token.  The endpoint used, v1.0 or v2.0, is chosen by the
     client and only impacts the version of id_tokens. Resources need to explicitly configure
     requestedAccessTokenVersion to indicate the supported access token format.  Possible values for
     requestedAccessTokenVersion are 1, 2, or null. If the value is null, this defaults to 1, which
     corresponds to the v1.0 endpoint.  If signInAudience on the application is configured as
     AzureADandPersonalMicrosoftAccount, the value for this property must be 2.
    :type requested_access_token_version: int
    """

    _validation = {
        'requested_access_token_version': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'accept_mapped_claims': {'key': 'acceptMappedClaims', 'type': 'bool'},
        'known_client_applications': {'key': 'knownClientApplications', 'type': '[str]'},
        'oauth2_permission_scopes': {'key': 'oauth2PermissionScopes', 'type': '[microsoftgraphpermissionscope]'},
        'pre_authorized_applications': {'key': 'preAuthorizedApplications', 'type': '[microsoftgraphpreauthorizedapplication]'},
        'requested_access_token_version': {'key': 'requestedAccessTokenVersion', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphapiapplication, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.accept_mapped_claims = kwargs.get('accept_mapped_claims', None)
        self.known_client_applications = kwargs.get('known_client_applications', None)
        self.oauth2_permission_scopes = kwargs.get('oauth2_permission_scopes', None)
        self.pre_authorized_applications = kwargs.get('pre_authorized_applications', None)
        self.requested_access_token_version = kwargs.get('requested_access_token_version', None)


class microsoftgraphentity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)


class microsoftgraphdirectoryobject(microsoftgraphentity):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphdirectoryobject, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.deleted_date_time = kwargs.get('deleted_date_time', None)


class microsoftgraphapplication(microsoftgraphdirectoryobject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param add_ins: Defines custom behavior that a consuming service can use to call an app in
     specific contexts. For example, applications that can render file streams may set the addIns
     property for its 'FileHandler' functionality. This will let services like Microsoft 365 call
     the application in the context of a document the user is working on.
    :type add_ins: list[~applications.models.microsoftgraphaddin]
    :param api: apiApplication.
    :type api: ~applications.models.microsoftgraphapiapplication
    :param app_id: The unique identifier for the application that is assigned to an application by
     Azure AD. Not nullable. Read-only.
    :type app_id: str
    :param application_template_id:
    :type application_template_id: str
    :param app_roles: The collection of roles the application declares. With app role assignments,
     these roles can be assigned to users, groups, or other applications' service principals. Not
     nullable.
    :type app_roles: list[~applications.models.microsoftgraphapprole]
    :param created_date_time: The date and time the application was registered. Read-only.
    :type created_date_time: ~datetime.datetime
    :param description:
    :type description: str
    :param display_name: The display name for the application.
    :type display_name: str
    :param group_membership_claims: Configures the groups claim issued in a user or OAuth 2.0
     access token that the application expects. To set this attribute, use one of the following
     valid string values:NoneSecurityGroup: For security groups and Azure AD rolesAll: This will get
     all of the security groups, distribution groups, and Azure AD directory roles that the signed-
     in user is a member of.
    :type group_membership_claims: str
    :param identifier_uris: The URIs that identify the application within its Azure AD tenant, or
     within a verified custom domain if the application is multi-tenant. For more information see
     Application Objects and Service Principal Objects. The any operator is required for filter
     expressions on multi-valued properties. Not nullable.
    :type identifier_uris: list[str]
    :param info: informationalUrl.
    :type info: ~applications.models.microsoftgraphinformationalurl
    :param is_device_only_auth_supported:
    :type is_device_only_auth_supported: bool
    :param is_fallback_public_client: Specifies the fallback application type as public client,
     such as an installed application running on a mobile device. The default value is false which
     means the fallback application type is confidential client such as web app. There are certain
     scenarios where Azure AD cannot determine the client application type (e.g. ROPC flow where it
     is configured without specifying a redirect URI). In those cases Azure AD will interpret the
     application type based on the value of this property.
    :type is_fallback_public_client: bool
    :param key_credentials: The collection of key credentials associated with the application Not
     nullable.
    :type key_credentials: list[~applications.models.microsoftgraphkeycredential]
    :param logo: The main logo for the application. Not nullable.
    :type logo: bytes
    :param notes:
    :type notes: str
    :param oauth2_require_post_response:
    :type oauth2_require_post_response: bool
    :param optional_claims: optionalClaims.
    :type optional_claims: ~applications.models.microsoftgraphoptionalclaims
    :param parental_control_settings: parentalControlSettings.
    :type parental_control_settings: ~applications.models.microsoftgraphparentalcontrolsettings
    :param password_credentials: The collection of password credentials associated with the
     application. Not nullable.
    :type password_credentials: list[~applications.models.microsoftgraphpasswordcredential]
    :param public_client: publicClientApplication.
    :type public_client: ~applications.models.microsoftgraphpublicclientapplication
    :param publisher_domain: The verified publisher domain for the application. Read-only.
    :type publisher_domain: str
    :param required_resource_access: Specifies resources that this application requires access to
     and the set of OAuth permission scopes and application roles that it needs under each of those
     resources. This pre-configuration of required resource access drives the consent experience.
     Not nullable.
    :type required_resource_access: list[~applications.models.microsoftgraphrequiredresourceaccess]
    :param sign_in_audience: Specifies the Microsoft accounts that are supported for the current
     application. Supported values are:AzureADMyOrg: Users with a Microsoft work or school account
     in my organization’s Azure AD tenant (single tenant)AzureADMultipleOrgs: Users with a Microsoft
     work or school account in any organization’s Azure AD tenant (multi-
     tenant)AzureADandPersonalMicrosoftAccount: Users with a personal Microsoft account, or a work
     or school account in any organization’s Azure AD tenant.
    :type sign_in_audience: str
    :param tags: A set of tags. Custom strings that can be used to categorize and identify the
     application. Not nullable.
    :type tags: list[str]
    :param token_encryption_key_id: Specifies the keyId of a public key from the keyCredentials
     collection. When configured, Azure AD encrypts all the tokens it emits by using the key this
     property points to. The application code that receives the encrypted token must use the
     matching private key to decrypt the token before it can be used for the signed-in user.
    :type token_encryption_key_id: str
    :param web: webApplication.
    :type web: ~applications.models.microsoftgraphwebapplication
    :param created_on_behalf_of: Represents an Azure Active Directory object. The directoryObject
     type is the base type for many other directory entity types.
    :type created_on_behalf_of: ~applications.models.microsoftgraphdirectoryobject
    :param extension_properties: Read-only. Nullable.
    :type extension_properties: list[~applications.models.microsoftgraphextensionproperty]
    :param home_realm_discovery_policies:
    :type home_realm_discovery_policies:
     list[~applications.models.microsoftgraphhomerealmdiscoverypolicy]
    :param owners: Directory objects that are owners of the application. The owners are a set of
     non-admin users who are allowed to modify this object. Requires version 2013-11-08 or newer.
     Read-only. Nullable.
    :type owners: list[~applications.models.microsoftgraphdirectoryobject]
    :param token_issuance_policies:
    :type token_issuance_policies: list[~applications.models.microsoftgraphtokenissuancepolicy]
    :param token_lifetime_policies:
    :type token_lifetime_policies: list[~applications.models.microsoftgraphtokenlifetimepolicy]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'add_ins': {'key': 'addIns', 'type': '[microsoftgraphaddin]'},
        'api': {'key': 'api', 'type': 'microsoftgraphapiapplication'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'application_template_id': {'key': 'applicationTemplateId', 'type': 'str'},
        'app_roles': {'key': 'appRoles', 'type': '[microsoftgraphapprole]'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'group_membership_claims': {'key': 'groupMembershipClaims', 'type': 'str'},
        'identifier_uris': {'key': 'identifierUris', 'type': '[str]'},
        'info': {'key': 'info', 'type': 'microsoftgraphinformationalurl'},
        'is_device_only_auth_supported': {'key': 'isDeviceOnlyAuthSupported', 'type': 'bool'},
        'is_fallback_public_client': {'key': 'isFallbackPublicClient', 'type': 'bool'},
        'key_credentials': {'key': 'keyCredentials', 'type': '[microsoftgraphkeycredential]'},
        'logo': {'key': 'logo', 'type': 'base64'},
        'notes': {'key': 'notes', 'type': 'str'},
        'oauth2_require_post_response': {'key': 'oauth2RequirePostResponse', 'type': 'bool'},
        'optional_claims': {'key': 'optionalClaims', 'type': 'microsoftgraphoptionalclaims'},
        'parental_control_settings': {'key': 'parentalControlSettings', 'type': 'microsoftgraphparentalcontrolsettings'},
        'password_credentials': {'key': 'passwordCredentials', 'type': '[microsoftgraphpasswordcredential]'},
        'public_client': {'key': 'publicClient', 'type': 'microsoftgraphpublicclientapplication'},
        'publisher_domain': {'key': 'publisherDomain', 'type': 'str'},
        'required_resource_access': {'key': 'requiredResourceAccess', 'type': '[microsoftgraphrequiredresourceaccess]'},
        'sign_in_audience': {'key': 'signInAudience', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'token_encryption_key_id': {'key': 'tokenEncryptionKeyId', 'type': 'str'},
        'web': {'key': 'web', 'type': 'microsoftgraphwebapplication'},
        'created_on_behalf_of': {'key': 'createdOnBehalfOf', 'type': 'microsoftgraphdirectoryobject'},
        'extension_properties': {'key': 'extensionProperties', 'type': '[microsoftgraphextensionproperty]'},
        'home_realm_discovery_policies': {'key': 'homeRealmDiscoveryPolicies', 'type': '[microsoftgraphhomerealmdiscoverypolicy]'},
        'owners': {'key': 'owners', 'type': '[microsoftgraphdirectoryobject]'},
        'token_issuance_policies': {'key': 'tokenIssuancePolicies', 'type': '[microsoftgraphtokenissuancepolicy]'},
        'token_lifetime_policies': {'key': 'tokenLifetimePolicies', 'type': '[microsoftgraphtokenlifetimepolicy]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphapplication, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.add_ins = kwargs.get('add_ins', None)
        self.api = kwargs.get('api', None)
        self.app_id = kwargs.get('app_id', None)
        self.application_template_id = kwargs.get('application_template_id', None)
        self.app_roles = kwargs.get('app_roles', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.group_membership_claims = kwargs.get('group_membership_claims', None)
        self.identifier_uris = kwargs.get('identifier_uris', None)
        self.info = kwargs.get('info', None)
        self.is_device_only_auth_supported = kwargs.get('is_device_only_auth_supported', None)
        self.is_fallback_public_client = kwargs.get('is_fallback_public_client', None)
        self.key_credentials = kwargs.get('key_credentials', None)
        self.logo = kwargs.get('logo', None)
        self.notes = kwargs.get('notes', None)
        self.oauth2_require_post_response = kwargs.get('oauth2_require_post_response', None)
        self.optional_claims = kwargs.get('optional_claims', None)
        self.parental_control_settings = kwargs.get('parental_control_settings', None)
        self.password_credentials = kwargs.get('password_credentials', None)
        self.public_client = kwargs.get('public_client', None)
        self.publisher_domain = kwargs.get('publisher_domain', None)
        self.required_resource_access = kwargs.get('required_resource_access', None)
        self.sign_in_audience = kwargs.get('sign_in_audience', None)
        self.tags = kwargs.get('tags', None)
        self.token_encryption_key_id = kwargs.get('token_encryption_key_id', None)
        self.web = kwargs.get('web', None)
        self.created_on_behalf_of = kwargs.get('created_on_behalf_of', None)
        self.extension_properties = kwargs.get('extension_properties', None)
        self.home_realm_discovery_policies = kwargs.get('home_realm_discovery_policies', None)
        self.owners = kwargs.get('owners', None)
        self.token_issuance_policies = kwargs.get('token_issuance_policies', None)
        self.token_lifetime_policies = kwargs.get('token_lifetime_policies', None)


class microsoftgraphapprole(msrest.serialization.Model):
    """appRole.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allowed_member_types: Specifies whether this app role can be assigned to users and
     groups (by setting to ['User']), to other application's (by setting to ['Application'], or both
     (by setting to ['User', 'Application']). App roles supporting assignment of other applications'
     service principals are also known as application permissions.
    :type allowed_member_types: list[str]
    :param description: The description for the app role. This is displayed when the app role is
     being assigned and, if the app role functions as an application permission, during  consent
     experiences.
    :type description: str
    :param display_name: Display name for the permission that appears in the app role assignment
     and consent experiences.
    :type display_name: str
    :param id: Unique role identifier inside the appRoles collection. When creating a new app role,
     a new Guid identifier must be provided.
    :type id: str
    :param is_enabled: When creating or updating an app role, this must be set to true (which is
     the default). To delete a role, this must first be set to false.  At that point, in a
     subsequent call, this role may be removed.
    :type is_enabled: bool
    :param origin: Specifies if the app role is defined on the application object or on the
     servicePrincipal entity. Must not be included in any POST or PATCH requests. Read-only.
    :type origin: str
    :param value: Specifies the value to include in the roles claim in ID tokens and access tokens
     authenticating an assigned user or service principal. Must not exceed 120 characters in length.
     Allowed characters are : ! # $ % & ' ( ) * + , - . / : ;  =  ? @ [ ] ^ + _  {  } ~, as well as
     characters in the ranges 0-9, A-Z and a-z. Any other character, including the space character,
     are not allowed.
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'allowed_member_types': {'key': 'allowedMemberTypes', 'type': '[str]'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'origin': {'key': 'origin', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphapprole, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allowed_member_types = kwargs.get('allowed_member_types', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.id = kwargs.get('id', None)
        self.is_enabled = kwargs.get('is_enabled', None)
        self.origin = kwargs.get('origin', None)
        self.value = kwargs.get('value', None)


class microsoftgraphapproleassignment(microsoftgraphdirectoryobject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_role_id: The identifier (id) for the app role which is assigned to the principal.
     This app role must be exposed in the appRoles property on the resource application's service
     principal (resourceId). If the resource application has not declared any app roles, a default
     app role ID of 00000000-0000-0000-0000-000000000000 can be specified to signal that the
     principal is assigned to the resource app without any specific app roles. Required on create.
     Does not support $filter.
    :type app_role_id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param principal_display_name: The display name of the user, group, or service principal that
     was granted the app role assignment. Read-only. Supports $filter (eq and startswith).
    :type principal_display_name: str
    :param principal_id: The unique identifier (id) for the user, group or service principal being
     granted the app role. Required on create. Does not support $filter.
    :type principal_id: str
    :param principal_type: The type of the assigned principal. This can either be 'User', 'Group'
     or 'ServicePrincipal'. Read-only. Does not support $filter.
    :type principal_type: str
    :param resource_display_name: The display name of the resource app's service principal to which
     the assignment is made. Does not support $filter.
    :type resource_display_name: str
    :param resource_id: The unique identifier (id) for the resource service principal for which the
     assignment is made. Required on create. Supports $filter (eq only).
    :type resource_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_role_id': {'key': 'appRoleId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'principal_display_name': {'key': 'principalDisplayName', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'principal_type': {'key': 'principalType', 'type': 'str'},
        'resource_display_name': {'key': 'resourceDisplayName', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphapproleassignment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_role_id = kwargs.get('app_role_id', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.principal_display_name = kwargs.get('principal_display_name', None)
        self.principal_id = kwargs.get('principal_id', None)
        self.principal_type = kwargs.get('principal_type', None)
        self.resource_display_name = kwargs.get('resource_display_name', None)
        self.resource_id = kwargs.get('resource_id', None)


class microsoftgraphpolicybase(microsoftgraphdirectoryobject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description: Description for this policy.
    :type description: str
    :param display_name: Display name for this policy.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphpolicybase, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)


class microsoftgraphstspolicy(microsoftgraphpolicybase):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param description: Description for this policy.
    :type description: str
    :param display_name: Display name for this policy.
    :type display_name: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param definition: A string collection containing a JSON string that defines the rules and
     settings for a policy. The syntax for the definition differs for each derived policy type.
     Required.
    :type definition: list[str]
    :param is_organization_default: If set to true, activates this policy. There can be many
     policies for the same policy type, but only one can be activated as the organization default.
     Optional, default value is false.
    :type is_organization_default: bool
    :param applies_to:
    :type applies_to: list[~applications.models.microsoftgraphdirectoryobject]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'definition': {'key': 'definition', 'type': '[str]'},
        'is_organization_default': {'key': 'isOrganizationDefault', 'type': 'bool'},
        'applies_to': {'key': 'appliesTo', 'type': '[microsoftgraphdirectoryobject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphstspolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.definition = kwargs.get('definition', None)
        self.is_organization_default = kwargs.get('is_organization_default', None)
        self.applies_to = kwargs.get('applies_to', None)


class microsoftgraphclaimsmappingpolicy(microsoftgraphstspolicy):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param description: Description for this policy.
    :type description: str
    :param display_name: Display name for this policy.
    :type display_name: str
    :param definition: A string collection containing a JSON string that defines the rules and
     settings for a policy. The syntax for the definition differs for each derived policy type.
     Required.
    :type definition: list[str]
    :param is_organization_default: If set to true, activates this policy. There can be many
     policies for the same policy type, but only one can be activated as the organization default.
     Optional, default value is false.
    :type is_organization_default: bool
    :param applies_to:
    :type applies_to: list[~applications.models.microsoftgraphdirectoryobject]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'definition': {'key': 'definition', 'type': '[str]'},
        'is_organization_default': {'key': 'isOrganizationDefault', 'type': 'bool'},
        'applies_to': {'key': 'appliesTo', 'type': '[microsoftgraphdirectoryobject]'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphclaimsmappingpolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class microsoftgraphendpoint(microsoftgraphdirectoryobject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param capability: Describes the capability that is associated with this resource. (e.g.
     Messages, Conversations, etc.)  Not nullable. Read-only.
    :type capability: str
    :param provider_id: Application id of the publishing underlying service. Not nullable. Read-
     only.
    :type provider_id: str
    :param provider_name: Name of the publishing underlying service. Read-only.
    :type provider_name: str
    :param provider_resource_id: For Microsoft 365 groups, this is set to a well-known name for the
     resource (e.g. Yammer.FeedURL etc.). Not nullable. Read-only.
    :type provider_resource_id: str
    :param uri: URL of the published resource. Not nullable. Read-only.
    :type uri: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'capability': {'key': 'capability', 'type': 'str'},
        'provider_id': {'key': 'providerId', 'type': 'str'},
        'provider_name': {'key': 'providerName', 'type': 'str'},
        'provider_resource_id': {'key': 'providerResourceId', 'type': 'str'},
        'uri': {'key': 'uri', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphendpoint, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.capability = kwargs.get('capability', None)
        self.provider_id = kwargs.get('provider_id', None)
        self.provider_name = kwargs.get('provider_name', None)
        self.provider_resource_id = kwargs.get('provider_resource_id', None)
        self.uri = kwargs.get('uri', None)


class microsoftgraphextensionproperty(microsoftgraphdirectoryobject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_display_name: Display name of the application object on which this extension
     property is defined. Read-only.
    :type app_display_name: str
    :param data_type: Specifies the data type of the value the extension property can hold.
     Following values are supported. Not nullable. Binary - 256 bytes maximumBooleanDateTime - Must
     be specified in ISO 8601 format. Will be stored in UTC.Integer - 32-bit value.LargeInteger -
     64-bit value.String - 256 characters maximum.
    :type data_type: str
    :param is_synced_from_on_premises: Indicates if this extension property was sycned from
     onpremises directory using Azure AD Connect. Read-only.
    :type is_synced_from_on_premises: bool
    :param name: Name of the extension property. Not nullable.
    :type name: str
    :param target_objects: Following values are supported. Not nullable.
     UserGroupOrganizationDeviceApplication.
    :type target_objects: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'data_type': {'key': 'dataType', 'type': 'str'},
        'is_synced_from_on_premises': {'key': 'isSyncedFromOnPremises', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'target_objects': {'key': 'targetObjects', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphextensionproperty, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_display_name = kwargs.get('app_display_name', None)
        self.data_type = kwargs.get('data_type', None)
        self.is_synced_from_on_premises = kwargs.get('is_synced_from_on_premises', None)
        self.name = kwargs.get('name', None)
        self.target_objects = kwargs.get('target_objects', None)


class microsoftgraphhomerealmdiscoverypolicy(microsoftgraphstspolicy):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param description: Description for this policy.
    :type description: str
    :param display_name: Display name for this policy.
    :type display_name: str
    :param definition: A string collection containing a JSON string that defines the rules and
     settings for a policy. The syntax for the definition differs for each derived policy type.
     Required.
    :type definition: list[str]
    :param is_organization_default: If set to true, activates this policy. There can be many
     policies for the same policy type, but only one can be activated as the organization default.
     Optional, default value is false.
    :type is_organization_default: bool
    :param applies_to:
    :type applies_to: list[~applications.models.microsoftgraphdirectoryobject]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'definition': {'key': 'definition', 'type': '[str]'},
        'is_organization_default': {'key': 'isOrganizationDefault', 'type': 'bool'},
        'applies_to': {'key': 'appliesTo', 'type': '[microsoftgraphdirectoryobject]'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphhomerealmdiscoverypolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class microsoftgraphimplicitgrantsettings(msrest.serialization.Model):
    """implicitGrantSettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param enable_access_token_issuance: Specifies whether this web application can request an
     access token using the OAuth 2.0 implicit flow.
    :type enable_access_token_issuance: bool
    :param enable_id_token_issuance: Specifies whether this web application can request an ID token
     using the OAuth 2.0 implicit flow.
    :type enable_id_token_issuance: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'enable_access_token_issuance': {'key': 'enableAccessTokenIssuance', 'type': 'bool'},
        'enable_id_token_issuance': {'key': 'enableIdTokenIssuance', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphimplicitgrantsettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.enable_access_token_issuance = kwargs.get('enable_access_token_issuance', None)
        self.enable_id_token_issuance = kwargs.get('enable_id_token_issuance', None)


class microsoftgraphinformationalurl(msrest.serialization.Model):
    """informationalUrl.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param logo_url: CDN URL to the application's logo, Read-only.
    :type logo_url: str
    :param marketing_url: Link to the application's marketing page. For example,
     https://www.contoso.com/app/marketing.
    :type marketing_url: str
    :param privacy_statement_url: Link to the application's privacy statement. For example,
     https://www.contoso.com/app/privacy.
    :type privacy_statement_url: str
    :param support_url: Link to the application's support page. For example,
     https://www.contoso.com/app/support.
    :type support_url: str
    :param terms_of_service_url: Link to the application's terms of service statement. For example,
     https://www.contoso.com/app/termsofservice.
    :type terms_of_service_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'logo_url': {'key': 'logoUrl', 'type': 'str'},
        'marketing_url': {'key': 'marketingUrl', 'type': 'str'},
        'privacy_statement_url': {'key': 'privacyStatementUrl', 'type': 'str'},
        'support_url': {'key': 'supportUrl', 'type': 'str'},
        'terms_of_service_url': {'key': 'termsOfServiceUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphinformationalurl, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.logo_url = kwargs.get('logo_url', None)
        self.marketing_url = kwargs.get('marketing_url', None)
        self.privacy_statement_url = kwargs.get('privacy_statement_url', None)
        self.support_url = kwargs.get('support_url', None)
        self.terms_of_service_url = kwargs.get('terms_of_service_url', None)


class microsoftgraphkeycredential(msrest.serialization.Model):
    """keyCredential.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param custom_key_identifier: Custom key identifier.
    :type custom_key_identifier: bytes
    :param display_name: Friendly name for the key. Optional.
    :type display_name: str
    :param end_date_time: The date and time at which the credential expires.The Timestamp type
     represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type end_date_time: ~datetime.datetime
    :param key: Value for the key credential. Should be a base 64 encoded value.
    :type key: bytes
    :param key_id: The unique identifier (GUID) for the key.
    :type key_id: str
    :param start_date_time: The date and time at which the credential becomes valid.The Timestamp
     type represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type start_date_time: ~datetime.datetime
    :param type: The type of key credential; for example, 'Symmetric'.
    :type type: str
    :param usage: A string that describes the purpose for which the key can be used; for example,
     'Verify'.
    :type usage: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'custom_key_identifier': {'key': 'customKeyIdentifier', 'type': 'base64'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'key': {'key': 'key', 'type': 'base64'},
        'key_id': {'key': 'keyId', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'type': {'key': 'type', 'type': 'str'},
        'usage': {'key': 'usage', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphkeycredential, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.custom_key_identifier = kwargs.get('custom_key_identifier', None)
        self.display_name = kwargs.get('display_name', None)
        self.end_date_time = kwargs.get('end_date_time', None)
        self.key = kwargs.get('key', None)
        self.key_id = kwargs.get('key_id', None)
        self.start_date_time = kwargs.get('start_date_time', None)
        self.type = kwargs.get('type', None)
        self.usage = kwargs.get('usage', None)


class microsoftgraphkeyvalue(msrest.serialization.Model):
    """keyValue.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param key: Key for the key-value pair.
    :type key: str
    :param value: Value for the key-value pair.
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'key': {'key': 'key', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphkeyvalue, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.key = kwargs.get('key', None)
        self.value = kwargs.get('value', None)


class microsoftgraphoauth2permissiongrant(microsoftgraphentity):
    """oAuth2PermissionGrant.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param client_id: The id of the client service principal for the application which is
     authorized to act on behalf of a signed-in user when accessing an API. Required. Supports
     $filter (eq only).
    :type client_id: str
    :param consent_type: Indicates if authorization is granted for the client application to
     impersonate all users or only a specific user. AllPrincipals indicates authorization to
     impersonate all users. Principal indicates authorization to impersonate a specific user.
     Consent on behalf of all users can be granted by an administrator. Non-admin users may be
     authorized to consent on behalf of themselves in some cases, for some delegated permissions.
     Required. Supports $filter (eq only).
    :type consent_type: str
    :param principal_id: The id of the user on behalf of whom the client is authorized to access
     the resource, when consentType is Principal. If consentType is AllPrincipals this value is
     null. Required when consentType is Principal.
    :type principal_id: str
    :param resource_id: The id of the resource service principal to which access is authorized.
     This identifies the API which the client is authorized to attempt to call on behalf of a
     signed-in user.
    :type resource_id: str
    :param scope: A space-separated list of the claim values for delegated permissions which should
     be included in access tokens for the resource application (the API). For example, openid
     User.Read GroupMember.Read.All. Each claim value should match the value field of one of the
     delegated permissions defined by the API, listed in the publishedPermissionScopes property of
     the resource service principal.
    :type scope: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'client_id': {'key': 'clientId', 'type': 'str'},
        'consent_type': {'key': 'consentType', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphoauth2permissiongrant, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.client_id = kwargs.get('client_id', None)
        self.consent_type = kwargs.get('consent_type', None)
        self.principal_id = kwargs.get('principal_id', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.scope = kwargs.get('scope', None)


class microsoftgraphoptionalclaim(msrest.serialization.Model):
    """optionalClaim.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param additional_properties1: Additional properties of the claim. If a property exists in this
     collection, it modifies the behavior of the optional claim specified in the name property.
    :type additional_properties1: list[str]
    :param essential: If the value is true, the claim specified by the client is necessary to
     ensure a smooth authorization experience for the specific task requested by the end user. The
     default value is false.
    :type essential: bool
    :param name: The name of the optional claim.
    :type name: str
    :param source: The source (directory object) of the claim. There are predefined claims and
     user-defined claims from extension properties. If the source value is null, the claim is a
     predefined optional claim. If the source value is user, the value in the name property is the
     extension property from the user object.
    :type source: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'additional_properties1': {'key': 'additionalProperties', 'type': '[str]'},
        'essential': {'key': 'essential', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphoptionalclaim, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties1 = kwargs.get('additional_properties1', None)
        self.essential = kwargs.get('essential', None)
        self.name = kwargs.get('name', None)
        self.source = kwargs.get('source', None)


class microsoftgraphoptionalclaims(msrest.serialization.Model):
    """optionalClaims.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param access_token: The optional claims returned in the JWT access token.
    :type access_token: list[~applications.models.microsoftgraphoptionalclaim]
    :param id_token: The optional claims returned in the JWT ID token.
    :type id_token: list[~applications.models.microsoftgraphoptionalclaim]
    :param saml2_token: The optional claims returned in the SAML token.
    :type saml2_token: list[~applications.models.microsoftgraphoptionalclaim]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'access_token': {'key': 'accessToken', 'type': '[microsoftgraphoptionalclaim]'},
        'id_token': {'key': 'idToken', 'type': '[microsoftgraphoptionalclaim]'},
        'saml2_token': {'key': 'saml2Token', 'type': '[microsoftgraphoptionalclaim]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphoptionalclaims, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.access_token = kwargs.get('access_token', None)
        self.id_token = kwargs.get('id_token', None)
        self.saml2_token = kwargs.get('saml2_token', None)


class microsoftgraphparentalcontrolsettings(msrest.serialization.Model):
    """parentalControlSettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param countries_blocked_for_minors: Specifies the two-letter ISO country codes. Access to the
     application will be blocked for minors from the countries specified in this list.
    :type countries_blocked_for_minors: list[str]
    :param legal_age_group_rule: Specifies the legal age group rule that applies to users of the
     app. Can be set to one of the following values: ValueDescriptionAllowDefault. Enforces the
     legal minimum. This means parental consent is required for minors in the European Union and
     Korea.RequireConsentForPrivacyServicesEnforces the user to specify date of birth to comply with
     COPPA rules. RequireConsentForMinorsRequires parental consent for ages below 18, regardless of
     country minor rules.RequireConsentForKidsRequires parental consent for ages below 14,
     regardless of country minor rules.BlockMinorsBlocks minors from using the app.
    :type legal_age_group_rule: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'countries_blocked_for_minors': {'key': 'countriesBlockedForMinors', 'type': '[str]'},
        'legal_age_group_rule': {'key': 'legalAgeGroupRule', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphparentalcontrolsettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.countries_blocked_for_minors = kwargs.get('countries_blocked_for_minors', None)
        self.legal_age_group_rule = kwargs.get('legal_age_group_rule', None)


class microsoftgraphpasswordcredential(msrest.serialization.Model):
    """passwordCredential.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param custom_key_identifier: Do not use.
    :type custom_key_identifier: bytes
    :param display_name: Friendly name for the password. Optional.
    :type display_name: str
    :param end_date_time: The date and time at which the password expires represented using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'. Optional.
    :type end_date_time: ~datetime.datetime
    :param hint: Contains the first three characters of the password. Read-only.
    :type hint: str
    :param key_id: The unique identifier for the password.
    :type key_id: str
    :param secret_text: Read-only; Contains the strong passwords generated by Azure AD that are
     16-64 characters in length. The generated password value is only returned during the initial
     POST request to addPassword. There is no way to retrieve this password in the future.
    :type secret_text: str
    :param start_date_time: The date and time at which the password becomes valid. The Timestamp
     type represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Optional.
    :type start_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'custom_key_identifier': {'key': 'customKeyIdentifier', 'type': 'base64'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'hint': {'key': 'hint', 'type': 'str'},
        'key_id': {'key': 'keyId', 'type': 'str'},
        'secret_text': {'key': 'secretText', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphpasswordcredential, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.custom_key_identifier = kwargs.get('custom_key_identifier', None)
        self.display_name = kwargs.get('display_name', None)
        self.end_date_time = kwargs.get('end_date_time', None)
        self.hint = kwargs.get('hint', None)
        self.key_id = kwargs.get('key_id', None)
        self.secret_text = kwargs.get('secret_text', None)
        self.start_date_time = kwargs.get('start_date_time', None)


class microsoftgraphpermissionscope(msrest.serialization.Model):
    """permissionScope.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param admin_consent_description: A description of the delegated permissions, intended to be
     read by an administrator granting the permission on behalf of all users. This text appears in
     tenant-wide admin consent experiences.
    :type admin_consent_description: str
    :param admin_consent_display_name: The permission's title, intended to be read by an
     administrator granting the permission on behalf of all users.
    :type admin_consent_display_name: str
    :param id: Unique delegated permission identifier inside the collection of delegated
     permissions defined for a resource application.
    :type id: str
    :param is_enabled: When creating or updating a permission, this property must be set to true
     (which is the default). To delete a permission, this property must first be set to false.  At
     that point, in a subsequent call, the permission may be removed.
    :type is_enabled: bool
    :param origin:
    :type origin: str
    :param type: Specifies whether this delegated permission should be considered safe for non-
     admin users to consent to on behalf of themselves, or whether an administrator should be
     required for consent to the permissions. This will be the default behavior, but each customer
     can choose to customize the behavior in their organization (by allowing, restricting or
     limiting user consent to this delegated permission.).
    :type type: str
    :param user_consent_description: A description of the delegated permissions, intended to be
     read by a user granting the permission on their own behalf. This text appears in consent
     experiences where the user is consenting only on behalf of themselves.
    :type user_consent_description: str
    :param user_consent_display_name: A title for the permission, intended to be read by a user
     granting the permission on their own behalf. This text appears in consent experiences where the
     user is consenting only on behalf of themselves.
    :type user_consent_display_name: str
    :param value: Specifies the value to include in the scp (scope) claim in access tokens. Must
     not exceed 120 characters in length. Allowed characters are : ! # $ % & ' ( ) * + , - . / : ;
     =  ? @ [ ] ^ + _  {  } ~, as well as characters in the ranges 0-9, A-Z and a-z. Any other
     character, including the space character, are not allowed.
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'admin_consent_description': {'key': 'adminConsentDescription', 'type': 'str'},
        'admin_consent_display_name': {'key': 'adminConsentDisplayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'origin': {'key': 'origin', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'user_consent_description': {'key': 'userConsentDescription', 'type': 'str'},
        'user_consent_display_name': {'key': 'userConsentDisplayName', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphpermissionscope, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.admin_consent_description = kwargs.get('admin_consent_description', None)
        self.admin_consent_display_name = kwargs.get('admin_consent_display_name', None)
        self.id = kwargs.get('id', None)
        self.is_enabled = kwargs.get('is_enabled', None)
        self.origin = kwargs.get('origin', None)
        self.type = kwargs.get('type', None)
        self.user_consent_description = kwargs.get('user_consent_description', None)
        self.user_consent_display_name = kwargs.get('user_consent_display_name', None)
        self.value = kwargs.get('value', None)


class microsoftgraphpreauthorizedapplication(msrest.serialization.Model):
    """preAuthorizedApplication.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_id: The unique identifier for the application.
    :type app_id: str
    :param delegated_permission_ids: The unique identifier for the oauth2PermissionScopes the
     application requires.
    :type delegated_permission_ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'delegated_permission_ids': {'key': 'delegatedPermissionIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphpreauthorizedapplication, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_id = kwargs.get('app_id', None)
        self.delegated_permission_ids = kwargs.get('delegated_permission_ids', None)


class microsoftgraphpublicclientapplication(msrest.serialization.Model):
    """publicClientApplication.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param redirect_uris: Specifies the URLs where user tokens are sent for sign-in, or the
     redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
    :type redirect_uris: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'redirect_uris': {'key': 'redirectUris', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphpublicclientapplication, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.redirect_uris = kwargs.get('redirect_uris', None)


class microsoftgraphrequiredresourceaccess(msrest.serialization.Model):
    """requiredResourceAccess.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param resource_access: The list of OAuth2.0 permission scopes and app roles that the
     application requires from the specified resource.
    :type resource_access: list[~applications.models.microsoftgraphresourceaccess]
    :param resource_app_id: The unique identifier for the resource that the application requires
     access to.  This should be equal to the appId declared on the target resource application.
    :type resource_app_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'resource_access': {'key': 'resourceAccess', 'type': '[microsoftgraphresourceaccess]'},
        'resource_app_id': {'key': 'resourceAppId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphrequiredresourceaccess, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.resource_access = kwargs.get('resource_access', None)
        self.resource_app_id = kwargs.get('resource_app_id', None)


class microsoftgraphresourceaccess(msrest.serialization.Model):
    """resourceAccess.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: The unique identifier for one of the oauth2PermissionScopes or appRole instances
     that the resource application exposes.
    :type id: str
    :param type: Specifies whether the id property references an oauth2PermissionScopes or an
     appRole. Possible values are Scope or Role.
    :type type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphresourceaccess, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)
        self.type = kwargs.get('type', None)


class microsoftgraphsamlsinglesignonsettings(msrest.serialization.Model):
    """samlSingleSignOnSettings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param relay_state: The relative URI the service provider would redirect to after completion of
     the single sign-on flow.
    :type relay_state: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'relay_state': {'key': 'relayState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphsamlsinglesignonsettings, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.relay_state = kwargs.get('relay_state', None)


class microsoftgraphserviceprincipal(microsoftgraphdirectoryobject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_enabled: true if the service principal account is enabled; otherwise, false.
    :type account_enabled: bool
    :param add_ins: Defines custom behavior that a consuming service can use to call an app in
     specific contexts. For example, applications that can render file streams may set the addIns
     property for its 'FileHandler' functionality. This will let services like Microsoft 365 call
     the application in the context of a document the user is working on.
    :type add_ins: list[~applications.models.microsoftgraphaddin]
    :param alternative_names: Used to retrieve service principals by subscription, identify
     resource group and full resource ids for managed identities.
    :type alternative_names: list[str]
    :param app_description:
    :type app_description: str
    :param app_display_name: The display name exposed by the associated application.
    :type app_display_name: str
    :param app_id: The unique identifier for the associated application (its appId property).
    :type app_id: str
    :param application_template_id: Unique identifier of the applicationTemplate that the
     servicePrincipal was created from. Read-only.
    :type application_template_id: str
    :param app_owner_organization_id: Contains the tenant id where the application is registered.
     This is applicable only to service principals backed by applications.
    :type app_owner_organization_id: str
    :param app_role_assignment_required: Specifies whether users or other service principals need
     to be granted an app role assignment for this service principal before users can sign in or
     apps can get tokens. The default value is false. Not nullable.
    :type app_role_assignment_required: bool
    :param app_roles: The roles exposed by the application which this service principal represents.
     For more information see the appRoles property definition on the application entity. Not
     nullable.
    :type app_roles: list[~applications.models.microsoftgraphapprole]
    :param description:
    :type description: str
    :param display_name: The display name for the service principal.
    :type display_name: str
    :param homepage: Home page or landing page of the application.
    :type homepage: str
    :param info: informationalUrl.
    :type info: ~applications.models.microsoftgraphinformationalurl
    :param key_credentials: The collection of key credentials associated with the service
     principal. Not nullable.
    :type key_credentials: list[~applications.models.microsoftgraphkeycredential]
    :param login_url: Specifies the URL where the service provider redirects the user to Azure AD
     to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the
     Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications
     configured with SAML-based single sign-on. The user launches the application from Microsoft
     365, the Azure AD My Apps, or the Azure AD SSO URL.
    :type login_url: str
    :param logout_url: Specifies the URL that will be used by Microsoft's authorization service to
     logout an user using OpenId Connect front-channel, back-channel or SAML logout protocols.
    :type logout_url: str
    :param notes:
    :type notes: str
    :param notification_email_addresses: Specifies the list of email addresses where Azure AD sends
     a notification when the active certificate is near the expiration date. This is only for the
     certificates used to sign the SAML token issued for Azure AD Gallery applications.
    :type notification_email_addresses: list[str]
    :param oauth2_permission_scopes: The delegated permissions exposed by the application. For more
     information see the oauth2PermissionScopes property on the application entity's api property.
     Not nullable.
    :type oauth2_permission_scopes: list[~applications.models.microsoftgraphpermissionscope]
    :param password_credentials: The collection of password credentials associated with the service
     principal. Not nullable.
    :type password_credentials: list[~applications.models.microsoftgraphpasswordcredential]
    :param preferred_single_sign_on_mode: Specifies the single sign-on mode configured for this
     application. Azure AD uses the preferred single sign-on mode to launch the application from
     Microsoft 365 or the Azure AD My Apps. The supported values are password, saml, external, and
     oidc.
    :type preferred_single_sign_on_mode: str
    :param preferred_token_signing_key_thumbprint:
    :type preferred_token_signing_key_thumbprint: str
    :param reply_urls: The URLs that user tokens are sent to for sign in with the associated
     application, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent
     to for the associated application. Not nullable.
    :type reply_urls: list[str]
    :param saml_single_sign_on_settings: samlSingleSignOnSettings.
    :type saml_single_sign_on_settings: ~applications.models.microsoftgraphsamlsinglesignonsettings
    :param service_principal_names: Contains the list of identifiersUris, copied over from the
     associated application. Additional values can be added to hybrid applications. These values can
     be used to identify the permissions exposed by this app within Azure AD. For example,Client
     apps can specify a resource URI which is based on the values of this property to acquire an
     access token, which is the URI returned in the 'aud' claim.The any operator is required for
     filter expressions on multi-valued properties. Not nullable.
    :type service_principal_names: list[str]
    :param service_principal_type: Identifies if the service principal represents an application or
     a managed identity. This is set by Azure AD internally. For a service principal that represents
     an application this is set as Application. For a service principal that represent a managed
     identity this is set as ManagedIdentity.
    :type service_principal_type: str
    :param tags: A set of tags. Custom strings that can be used to categorize and identify the
     service principal. Not nullable.
    :type tags: list[str]
    :param token_encryption_key_id: Specifies the keyId of a public key from the keyCredentials
     collection. When configured, Azure AD issues tokens for this application encrypted using the
     key specified by this property. The application code that receives the encrypted token must use
     the matching private key to decrypt the token before it can be used for the signed-in user.
    :type token_encryption_key_id: str
    :param app_role_assigned_to: Principals (users, groups, and service principals) that are
     assigned to this service principal. Read-only.
    :type app_role_assigned_to: list[~applications.models.microsoftgraphapproleassignment]
    :param app_role_assignments: Applications that this service principal is assigned to. Read-
     only. Nullable.
    :type app_role_assignments: list[~applications.models.microsoftgraphapproleassignment]
    :param claims_mapping_policies: The claimsMappingPolicies assigned to this service principal.
    :type claims_mapping_policies: list[~applications.models.microsoftgraphclaimsmappingpolicy]
    :param created_objects: Directory objects created by this service principal. Read-only.
     Nullable.
    :type created_objects: list[~applications.models.microsoftgraphdirectoryobject]
    :param endpoints: Endpoints available for discovery. Services like Sharepoint populate this
     property with a tenant specific SharePoint endpoints that other applications can discover and
     use in their experiences.
    :type endpoints: list[~applications.models.microsoftgraphendpoint]
    :param home_realm_discovery_policies: The homeRealmDiscoveryPolicies assigned to this service
     principal.
    :type home_realm_discovery_policies:
     list[~applications.models.microsoftgraphhomerealmdiscoverypolicy]
    :param member_of: Roles that this service principal is a member of. HTTP Methods: GET Read-
     only. Nullable.
    :type member_of: list[~applications.models.microsoftgraphdirectoryobject]
    :param oauth2_permission_grants: Delegated permission grants authorizing this service principal
     to access an API on behalf of a signed-in user. Read-only. Nullable.
    :type oauth2_permission_grants: list[~applications.models.microsoftgraphoauth2permissiongrant]
    :param owned_objects: Directory objects that are owned by this service principal. Read-only.
     Nullable.
    :type owned_objects: list[~applications.models.microsoftgraphdirectoryobject]
    :param owners: Directory objects that are owners of this servicePrincipal. The owners are a set
     of non-admin users or servicePrincipals who are allowed to modify this object. Read-only.
     Nullable.
    :type owners: list[~applications.models.microsoftgraphdirectoryobject]
    :param token_issuance_policies: The tokenIssuancePolicies assigned to this service principal.
    :type token_issuance_policies: list[~applications.models.microsoftgraphtokenissuancepolicy]
    :param token_lifetime_policies: The tokenLifetimePolicies assigned to this service principal.
    :type token_lifetime_policies: list[~applications.models.microsoftgraphtokenlifetimepolicy]
    :param transitive_member_of:
    :type transitive_member_of: list[~applications.models.microsoftgraphdirectoryobject]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_enabled': {'key': 'accountEnabled', 'type': 'bool'},
        'add_ins': {'key': 'addIns', 'type': '[microsoftgraphaddin]'},
        'alternative_names': {'key': 'alternativeNames', 'type': '[str]'},
        'app_description': {'key': 'appDescription', 'type': 'str'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'application_template_id': {'key': 'applicationTemplateId', 'type': 'str'},
        'app_owner_organization_id': {'key': 'appOwnerOrganizationId', 'type': 'str'},
        'app_role_assignment_required': {'key': 'appRoleAssignmentRequired', 'type': 'bool'},
        'app_roles': {'key': 'appRoles', 'type': '[microsoftgraphapprole]'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'homepage': {'key': 'homepage', 'type': 'str'},
        'info': {'key': 'info', 'type': 'microsoftgraphinformationalurl'},
        'key_credentials': {'key': 'keyCredentials', 'type': '[microsoftgraphkeycredential]'},
        'login_url': {'key': 'loginUrl', 'type': 'str'},
        'logout_url': {'key': 'logoutUrl', 'type': 'str'},
        'notes': {'key': 'notes', 'type': 'str'},
        'notification_email_addresses': {'key': 'notificationEmailAddresses', 'type': '[str]'},
        'oauth2_permission_scopes': {'key': 'oauth2PermissionScopes', 'type': '[microsoftgraphpermissionscope]'},
        'password_credentials': {'key': 'passwordCredentials', 'type': '[microsoftgraphpasswordcredential]'},
        'preferred_single_sign_on_mode': {'key': 'preferredSingleSignOnMode', 'type': 'str'},
        'preferred_token_signing_key_thumbprint': {'key': 'preferredTokenSigningKeyThumbprint', 'type': 'str'},
        'reply_urls': {'key': 'replyUrls', 'type': '[str]'},
        'saml_single_sign_on_settings': {'key': 'samlSingleSignOnSettings', 'type': 'microsoftgraphsamlsinglesignonsettings'},
        'service_principal_names': {'key': 'servicePrincipalNames', 'type': '[str]'},
        'service_principal_type': {'key': 'servicePrincipalType', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'token_encryption_key_id': {'key': 'tokenEncryptionKeyId', 'type': 'str'},
        'app_role_assigned_to': {'key': 'appRoleAssignedTo', 'type': '[microsoftgraphapproleassignment]'},
        'app_role_assignments': {'key': 'appRoleAssignments', 'type': '[microsoftgraphapproleassignment]'},
        'claims_mapping_policies': {'key': 'claimsMappingPolicies', 'type': '[microsoftgraphclaimsmappingpolicy]'},
        'created_objects': {'key': 'createdObjects', 'type': '[microsoftgraphdirectoryobject]'},
        'endpoints': {'key': 'endpoints', 'type': '[microsoftgraphendpoint]'},
        'home_realm_discovery_policies': {'key': 'homeRealmDiscoveryPolicies', 'type': '[microsoftgraphhomerealmdiscoverypolicy]'},
        'member_of': {'key': 'memberOf', 'type': '[microsoftgraphdirectoryobject]'},
        'oauth2_permission_grants': {'key': 'oauth2PermissionGrants', 'type': '[microsoftgraphoauth2permissiongrant]'},
        'owned_objects': {'key': 'ownedObjects', 'type': '[microsoftgraphdirectoryobject]'},
        'owners': {'key': 'owners', 'type': '[microsoftgraphdirectoryobject]'},
        'token_issuance_policies': {'key': 'tokenIssuancePolicies', 'type': '[microsoftgraphtokenissuancepolicy]'},
        'token_lifetime_policies': {'key': 'tokenLifetimePolicies', 'type': '[microsoftgraphtokenlifetimepolicy]'},
        'transitive_member_of': {'key': 'transitiveMemberOf', 'type': '[microsoftgraphdirectoryobject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphserviceprincipal, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.account_enabled = kwargs.get('account_enabled', None)
        self.add_ins = kwargs.get('add_ins', None)
        self.alternative_names = kwargs.get('alternative_names', None)
        self.app_description = kwargs.get('app_description', None)
        self.app_display_name = kwargs.get('app_display_name', None)
        self.app_id = kwargs.get('app_id', None)
        self.application_template_id = kwargs.get('application_template_id', None)
        self.app_owner_organization_id = kwargs.get('app_owner_organization_id', None)
        self.app_role_assignment_required = kwargs.get('app_role_assignment_required', None)
        self.app_roles = kwargs.get('app_roles', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.homepage = kwargs.get('homepage', None)
        self.info = kwargs.get('info', None)
        self.key_credentials = kwargs.get('key_credentials', None)
        self.login_url = kwargs.get('login_url', None)
        self.logout_url = kwargs.get('logout_url', None)
        self.notes = kwargs.get('notes', None)
        self.notification_email_addresses = kwargs.get('notification_email_addresses', None)
        self.oauth2_permission_scopes = kwargs.get('oauth2_permission_scopes', None)
        self.password_credentials = kwargs.get('password_credentials', None)
        self.preferred_single_sign_on_mode = kwargs.get('preferred_single_sign_on_mode', None)
        self.preferred_token_signing_key_thumbprint = kwargs.get('preferred_token_signing_key_thumbprint', None)
        self.reply_urls = kwargs.get('reply_urls', None)
        self.saml_single_sign_on_settings = kwargs.get('saml_single_sign_on_settings', None)
        self.service_principal_names = kwargs.get('service_principal_names', None)
        self.service_principal_type = kwargs.get('service_principal_type', None)
        self.tags = kwargs.get('tags', None)
        self.token_encryption_key_id = kwargs.get('token_encryption_key_id', None)
        self.app_role_assigned_to = kwargs.get('app_role_assigned_to', None)
        self.app_role_assignments = kwargs.get('app_role_assignments', None)
        self.claims_mapping_policies = kwargs.get('claims_mapping_policies', None)
        self.created_objects = kwargs.get('created_objects', None)
        self.endpoints = kwargs.get('endpoints', None)
        self.home_realm_discovery_policies = kwargs.get('home_realm_discovery_policies', None)
        self.member_of = kwargs.get('member_of', None)
        self.oauth2_permission_grants = kwargs.get('oauth2_permission_grants', None)
        self.owned_objects = kwargs.get('owned_objects', None)
        self.owners = kwargs.get('owners', None)
        self.token_issuance_policies = kwargs.get('token_issuance_policies', None)
        self.token_lifetime_policies = kwargs.get('token_lifetime_policies', None)
        self.transitive_member_of = kwargs.get('transitive_member_of', None)


class microsoftgraphtokenissuancepolicy(microsoftgraphstspolicy):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param description: Description for this policy.
    :type description: str
    :param display_name: Display name for this policy.
    :type display_name: str
    :param definition: A string collection containing a JSON string that defines the rules and
     settings for a policy. The syntax for the definition differs for each derived policy type.
     Required.
    :type definition: list[str]
    :param is_organization_default: If set to true, activates this policy. There can be many
     policies for the same policy type, but only one can be activated as the organization default.
     Optional, default value is false.
    :type is_organization_default: bool
    :param applies_to:
    :type applies_to: list[~applications.models.microsoftgraphdirectoryobject]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'definition': {'key': 'definition', 'type': '[str]'},
        'is_organization_default': {'key': 'isOrganizationDefault', 'type': 'bool'},
        'applies_to': {'key': 'appliesTo', 'type': '[microsoftgraphdirectoryobject]'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphtokenissuancepolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class microsoftgraphtokenlifetimepolicy(microsoftgraphstspolicy):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param description: Description for this policy.
    :type description: str
    :param display_name: Display name for this policy.
    :type display_name: str
    :param definition: A string collection containing a JSON string that defines the rules and
     settings for a policy. The syntax for the definition differs for each derived policy type.
     Required.
    :type definition: list[str]
    :param is_organization_default: If set to true, activates this policy. There can be many
     policies for the same policy type, but only one can be activated as the organization default.
     Optional, default value is false.
    :type is_organization_default: bool
    :param applies_to:
    :type applies_to: list[~applications.models.microsoftgraphdirectoryobject]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'definition': {'key': 'definition', 'type': '[str]'},
        'is_organization_default': {'key': 'isOrganizationDefault', 'type': 'bool'},
        'applies_to': {'key': 'appliesTo', 'type': '[microsoftgraphdirectoryobject]'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphtokenlifetimepolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)


class microsoftgraphwebapplication(msrest.serialization.Model):
    """webApplication.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param home_page_url: Home page or landing page of the application.
    :type home_page_url: str
    :param implicit_grant_settings: implicitGrantSettings.
    :type implicit_grant_settings: ~applications.models.microsoftgraphimplicitgrantsettings
    :param logout_url: Specifies the URL that will be used by Microsoft's authorization service to
     logout an user using front-channel, back-channel or SAML logout protocols.
    :type logout_url: str
    :param redirect_uris: Specifies the URLs where user tokens are sent for sign-in, or the
     redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
    :type redirect_uris: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'home_page_url': {'key': 'homePageUrl', 'type': 'str'},
        'implicit_grant_settings': {'key': 'implicitGrantSettings', 'type': 'microsoftgraphimplicitgrantsettings'},
        'logout_url': {'key': 'logoutUrl', 'type': 'str'},
        'redirect_uris': {'key': 'redirectUris', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(microsoftgraphwebapplication, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.home_page_url = kwargs.get('home_page_url', None)
        self.implicit_grant_settings = kwargs.get('implicit_grant_settings', None)
        self.logout_url = kwargs.get('logout_url', None)
        self.redirect_uris = kwargs.get('redirect_uris', None)


class odataerror(msrest.serialization.Model):
    """odataerror.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~applications.models.odataerrormain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'odataerrormain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerror, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.error = kwargs['error']


class odataerrordetail(msrest.serialization.Model):
    """odataerrordetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerrordetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class odataerrormain(msrest.serialization.Model):
    """odataerrormain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~applications.models.odataerrordetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[odataerrordetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(odataerrormain, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)


class paths141ryo0applicationsapplicationidmicrosoftgraphaddpasswordpostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths141ryo0applicationsapplicationidmicrosoftgraphaddpasswordpostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param password_credential: passwordCredential.
    :type password_credential: ~applications.models.microsoftgraphpasswordcredential
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'password_credential': {'key': 'passwordCredential', 'type': 'microsoftgraphpasswordcredential'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths141ryo0applicationsapplicationidmicrosoftgraphaddpasswordpostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.password_credential = kwargs.get('password_credential', None)


class paths15ykyvsserviceprincipalsmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths15ykyvsserviceprincipalsmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    :param types:
    :type types: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
        'types': {'key': 'types', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths15ykyvsserviceprincipalsmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)
        self.types = kwargs.get('types', None)


class paths17crvdcapplicationsapplicationidmicrosoftgraphaddkeypostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths17crvdcapplicationsapplicationidmicrosoftgraphaddkeypostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param key_credential: keyCredential.
    :type key_credential: ~applications.models.microsoftgraphkeycredential
    :param password_credential: passwordCredential.
    :type password_credential: ~applications.models.microsoftgraphpasswordcredential
    :param proof:
    :type proof: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'key_credential': {'key': 'keyCredential', 'type': 'microsoftgraphkeycredential'},
        'password_credential': {'key': 'passwordCredential', 'type': 'microsoftgraphpasswordcredential'},
        'proof': {'key': 'proof', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths17crvdcapplicationsapplicationidmicrosoftgraphaddkeypostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.key_credential = kwargs.get('key_credential', None)
        self.password_credential = kwargs.get('password_credential', None)
        self.proof = kwargs.get('proof', None)


class paths1850388serviceprincipalsserviceprincipalidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1850388serviceprincipalsserviceprincipalidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1850388serviceprincipalsserviceprincipalidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class paths1ezr0xyapplicationsapplicationidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1ezr0xyapplicationsapplicationidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1ezr0xyapplicationsapplicationidmicrosoftgraphgetmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class paths1ffhl47serviceprincipalsserviceprincipalidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1ffhl47serviceprincipalsserviceprincipalidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1ffhl47serviceprincipalsserviceprincipalidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)


class paths1hl8ameapplicationsmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1hl8ameapplicationsmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    :param types:
    :type types: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
        'types': {'key': 'types', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1hl8ameapplicationsmicrosoftgraphgetbyidspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)
        self.types = kwargs.get('types', None)


class paths1hnzvnpapplicationsapplicationidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1hnzvnpapplicationsapplicationidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param group_ids:
    :type group_ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'group_ids': {'key': 'groupIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1hnzvnpapplicationsapplicationidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.group_ids = kwargs.get('group_ids', None)


class paths1idoj4gserviceprincipalsserviceprincipalidmicrosoftgraphremovepasswordpostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1idoj4gserviceprincipalsserviceprincipalidmicrosoftgraphremovepasswordpostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param key_id:
    :type key_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'key_id': {'key': 'keyId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1idoj4gserviceprincipalsserviceprincipalidmicrosoftgraphremovepasswordpostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.key_id = kwargs.get('key_id', None)


class paths1lkksh4applicationsapplicationidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1lkksh4applicationsapplicationidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ids:
    :type ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ids': {'key': 'ids', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1lkksh4applicationsapplicationidmicrosoftgraphcheckmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ids = kwargs.get('ids', None)


class paths1md6pmhserviceprincipalsserviceprincipalidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1md6pmhserviceprincipalsserviceprincipalidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1md6pmhserviceprincipalsserviceprincipalidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class paths1omt14capplicationsmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1omt14capplicationsmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_synced_from_on_premises:
    :type is_synced_from_on_premises: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_synced_from_on_premises': {'key': 'isSyncedFromOnPremises', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1omt14capplicationsmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_synced_from_on_premises = kwargs.get('is_synced_from_on_premises', False)


class paths1uhuhlbserviceprincipalsserviceprincipalidmicrosoftgraphremovekeypostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """paths1uhuhlbserviceprincipalsserviceprincipalidmicrosoftgraphremovekeypostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param key_id:
    :type key_id: str
    :param proof:
    :type proof: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'key_id': {'key': 'keyId', 'type': 'str'},
        'proof': {'key': 'proof', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(paths1uhuhlbserviceprincipalsserviceprincipalidmicrosoftgraphremovekeypostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.key_id = kwargs.get('key_id', None)
        self.proof = kwargs.get('proof', None)


class pathsgo2t4hserviceprincipalsmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsgo2t4hserviceprincipalsmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_synced_from_on_premises:
    :type is_synced_from_on_premises: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_synced_from_on_premises': {'key': 'isSyncedFromOnPremises', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsgo2t4hserviceprincipalsmicrosoftgraphgetavailableextensionpropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_synced_from_on_premises = kwargs.get('is_synced_from_on_premises', False)


class pathshv033bapplicationsapplicationidmicrosoftgraphremovepasswordpostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathshv033bapplicationsapplicationidmicrosoftgraphremovepasswordpostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param key_id:
    :type key_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'key_id': {'key': 'keyId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathshv033bapplicationsapplicationidmicrosoftgraphremovepasswordpostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.key_id = kwargs.get('key_id', None)


class pathshxlydaapplicationsapplicationidmicrosoftgraphremovekeypostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathshxlydaapplicationsapplicationidmicrosoftgraphremovekeypostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param key_id:
    :type key_id: str
    :param proof:
    :type proof: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'key_id': {'key': 'keyId', 'type': 'str'},
        'proof': {'key': 'proof', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathshxlydaapplicationsapplicationidmicrosoftgraphremovekeypostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.key_id = kwargs.get('key_id', None)
        self.proof = kwargs.get('proof', None)


class pathsieboplserviceprincipalsserviceprincipalidmicrosoftgraphaddpasswordpostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsieboplserviceprincipalsserviceprincipalidmicrosoftgraphaddpasswordpostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param password_credential: passwordCredential.
    :type password_credential: ~applications.models.microsoftgraphpasswordcredential
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'password_credential': {'key': 'passwordCredential', 'type': 'microsoftgraphpasswordcredential'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsieboplserviceprincipalsserviceprincipalidmicrosoftgraphaddpasswordpostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.password_credential = kwargs.get('password_credential', None)


class pathslcqfowapplicationsapplicationidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathslcqfowapplicationsapplicationidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param security_enabled_only:
    :type security_enabled_only: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathslcqfowapplicationsapplicationidmicrosoftgraphgetmemberobjectspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', False)


class pathsn3fx9gserviceprincipalsserviceprincipalidmicrosoftgraphaddkeypostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsn3fx9gserviceprincipalsserviceprincipalidmicrosoftgraphaddkeypostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param key_credential: keyCredential.
    :type key_credential: ~applications.models.microsoftgraphkeycredential
    :param password_credential: passwordCredential.
    :type password_credential: ~applications.models.microsoftgraphpasswordcredential
    :param proof:
    :type proof: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'key_credential': {'key': 'keyCredential', 'type': 'microsoftgraphkeycredential'},
        'password_credential': {'key': 'passwordCredential', 'type': 'microsoftgraphpasswordcredential'},
        'proof': {'key': 'proof', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsn3fx9gserviceprincipalsserviceprincipalidmicrosoftgraphaddkeypostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.key_credential = kwargs.get('key_credential', None)
        self.password_credential = kwargs.get('password_credential', None)
        self.proof = kwargs.get('proof', None)


class pathso5kx2yserviceprincipalsserviceprincipalidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathso5kx2yserviceprincipalsserviceprincipalidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param group_ids:
    :type group_ids: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'group_ids': {'key': 'groupIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathso5kx2yserviceprincipalsserviceprincipalidmicrosoftgraphcheckmembergroupspostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.group_ids = kwargs.get('group_ids', None)


class pathsw28mefapplicationsmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsw28mefapplicationsmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param entity_type:
    :type entity_type: str
    :param display_name:
    :type display_name: str
    :param mail_nickname:
    :type mail_nickname: str
    :param on_behalf_of_user_id:
    :type on_behalf_of_user_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'entity_type': {'key': 'entityType', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'on_behalf_of_user_id': {'key': 'onBehalfOfUserId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsw28mefapplicationsmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.entity_type = kwargs.get('entity_type', None)
        self.display_name = kwargs.get('display_name', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
        self.on_behalf_of_user_id = kwargs.get('on_behalf_of_user_id', None)


class pathsyq15m4serviceprincipalsmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema(msrest.serialization.Model):
    """pathsyq15m4serviceprincipalsmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param entity_type:
    :type entity_type: str
    :param display_name:
    :type display_name: str
    :param mail_nickname:
    :type mail_nickname: str
    :param on_behalf_of_user_id:
    :type on_behalf_of_user_id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'entity_type': {'key': 'entityType', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'on_behalf_of_user_id': {'key': 'onBehalfOfUserId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(pathsyq15m4serviceprincipalsmicrosoftgraphvalidatepropertiespostrequestbodycontentapplicationjsonschema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.entity_type = kwargs.get('entity_type', None)
        self.display_name = kwargs.get('display_name', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
        self.on_behalf_of_user_id = kwargs.get('on_behalf_of_user_id', None)
