# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum101(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    INVITED_USER_DISPLAY_NAME = "invitedUserDisplayName"
    INVITED_USER_EMAIL_ADDRESS = "invitedUserEmailAddress"
    INVITED_USER_MESSAGE_INFO = "invitedUserMessageInfo"
    INVITED_USER_TYPE = "invitedUserType"
    INVITE_REDEEM_URL = "inviteRedeemUrl"
    INVITE_REDIRECT_URL = "inviteRedirectUrl"
    SEND_INVITATION_MESSAGE = "sendInvitationMessage"
    STATUS = "status"
    INVITED_USER = "invitedUser"

class Enum102(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    INVITED_USER = "invitedUser"

class Enum103(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    ACCOUNT_ENABLED = "accountEnabled"
    AGE_GROUP = "ageGroup"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_PLANS = "assignedPlans"
    BUSINESS_PHONES = "businessPhones"
    CITY = "city"
    COMPANY_NAME = "companyName"
    CONSENT_PROVIDED_FOR_MINOR = "consentProvidedForMinor"
    COUNTRY = "country"
    CREATED_DATE_TIME = "createdDateTime"
    CREATION_TYPE = "creationType"
    DEPARTMENT = "department"
    DISPLAY_NAME = "displayName"
    EMPLOYEE_ID = "employeeId"
    EXTERNAL_USER_STATE = "externalUserState"
    EXTERNAL_USER_STATE_CHANGE_DATE_TIME = "externalUserStateChangeDateTime"
    FAX_NUMBER = "faxNumber"
    GIVEN_NAME = "givenName"
    IDENTITIES = "identities"
    IM_ADDRESSES = "imAddresses"
    IS_RESOURCE_ACCOUNT = "isResourceAccount"
    JOB_TITLE = "jobTitle"
    LAST_PASSWORD_CHANGE_DATE_TIME = "lastPasswordChangeDateTime"
    LEGAL_AGE_GROUP_CLASSIFICATION = "legalAgeGroupClassification"
    LICENSE_ASSIGNMENT_STATES = "licenseAssignmentStates"
    MAIL = "mail"
    MAIL_NICKNAME = "mailNickname"
    MOBILE_PHONE = "mobilePhone"
    OFFICE_LOCATION = "officeLocation"
    ON_PREMISES_DISTINGUISHED_NAME = "onPremisesDistinguishedName"
    ON_PREMISES_DOMAIN_NAME = "onPremisesDomainName"
    ON_PREMISES_EXTENSION_ATTRIBUTES = "onPremisesExtensionAttributes"
    ON_PREMISES_IMMUTABLE_ID = "onPremisesImmutableId"
    ON_PREMISES_LAST_SYNC_DATE_TIME = "onPremisesLastSyncDateTime"
    ON_PREMISES_PROVISIONING_ERRORS = "onPremisesProvisioningErrors"
    ON_PREMISES_SAM_ACCOUNT_NAME = "onPremisesSamAccountName"
    ON_PREMISES_SECURITY_IDENTIFIER = "onPremisesSecurityIdentifier"
    ON_PREMISES_SYNC_ENABLED = "onPremisesSyncEnabled"
    ON_PREMISES_USER_PRINCIPAL_NAME = "onPremisesUserPrincipalName"
    OTHER_MAILS = "otherMails"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_PROFILE = "passwordProfile"
    POSTAL_CODE = "postalCode"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROVISIONED_PLANS = "provisionedPlans"
    PROXY_ADDRESSES = "proxyAddresses"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SIGN_IN_SESSIONS_VALID_FROM_DATE_TIME = "signInSessionsValidFromDateTime"
    STATE = "state"
    STREET_ADDRESS = "streetAddress"
    SURNAME = "surname"
    USAGE_LOCATION = "usageLocation"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_TYPE = "userType"
    MAILBOX_SETTINGS = "mailboxSettings"
    DEVICE_ENROLLMENT_LIMIT = "deviceEnrollmentLimit"
    ABOUT_ME = "aboutMe"
    BIRTHDAY = "birthday"
    HIRE_DATE = "hireDate"
    INTERESTS = "interests"
    MY_SITE = "mySite"
    PAST_PROJECTS = "pastProjects"
    PREFERRED_NAME = "preferredName"
    RESPONSIBILITIES = "responsibilities"
    SCHOOLS = "schools"
    SKILLS = "skills"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    CREATED_OBJECTS = "createdObjects"
    DIRECT_REPORTS = "directReports"
    LICENSE_DETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBER_OF = "memberOf"
    OAUTH2_PERMISSION_GRANTS = "oauth2PermissionGrants"
    OWNED_DEVICES = "ownedDevices"
    OWNED_OBJECTS = "ownedObjects"
    REGISTERED_DEVICES = "registeredDevices"
    SCOPED_ROLE_MEMBER_OF = "scopedRoleMemberOf"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    CALENDAR = "calendar"
    CALENDAR_GROUPS = "calendarGroups"
    CALENDARS = "calendars"
    CALENDAR_VIEW = "calendarView"
    CONTACT_FOLDERS = "contactFolders"
    CONTACTS = "contacts"
    EVENTS = "events"
    INFERENCE_CLASSIFICATION = "inferenceClassification"
    MAIL_FOLDERS = "mailFolders"
    MESSAGES = "messages"
    OUTLOOK = "outlook"
    PEOPLE = "people"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWED_SITES = "followedSites"
    EXTENSIONS = "extensions"
    MANAGED_DEVICES = "managedDevices"
    MANAGED_APP_REGISTRATIONS = "managedAppRegistrations"
    DEVICE_MANAGEMENT_TROUBLESHOOTING_EVENTS = "deviceManagementTroubleshootingEvents"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    ACTIVITIES = "activities"
    ONLINE_MEETINGS = "onlineMeetings"
    JOINED_TEAMS = "joinedTeams"

class Enum104(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    CREATED_OBJECTS = "createdObjects"
    DIRECT_REPORTS = "directReports"
    LICENSE_DETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBER_OF = "memberOf"
    OAUTH2_PERMISSION_GRANTS = "oauth2PermissionGrants"
    OWNED_DEVICES = "ownedDevices"
    OWNED_OBJECTS = "ownedObjects"
    REGISTERED_DEVICES = "registeredDevices"
    SCOPED_ROLE_MEMBER_OF = "scopedRoleMemberOf"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    CALENDAR = "calendar"
    CALENDAR_GROUPS = "calendarGroups"
    CALENDARS = "calendars"
    CALENDAR_VIEW = "calendarView"
    CONTACT_FOLDERS = "contactFolders"
    CONTACTS = "contacts"
    EVENTS = "events"
    INFERENCE_CLASSIFICATION = "inferenceClassification"
    MAIL_FOLDERS = "mailFolders"
    MESSAGES = "messages"
    OUTLOOK = "outlook"
    PEOPLE = "people"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWED_SITES = "followedSites"
    EXTENSIONS = "extensions"
    MANAGED_DEVICES = "managedDevices"
    MANAGED_APP_REGISTRATIONS = "managedAppRegistrations"
    DEVICE_MANAGEMENT_TROUBLESHOOTING_EVENTS = "deviceManagementTroubleshootingEvents"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    ACTIVITIES = "activities"
    ONLINE_MEETINGS = "onlineMeetings"
    JOINED_TEAMS = "joinedTeams"

class Enum105(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLIENT_ID = "clientId"
    CLIENT_ID_DESC = "clientId desc"
    CONSENT_TYPE = "consentType"
    CONSENT_TYPE_DESC = "consentType desc"
    PRINCIPAL_ID = "principalId"
    PRINCIPAL_ID_DESC = "principalId desc"
    RESOURCE_ID = "resourceId"
    RESOURCE_ID_DESC = "resourceId desc"
    SCOPE = "scope"
    SCOPE_DESC = "scope desc"

class Enum106(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_ID = "clientId"
    CONSENT_TYPE = "consentType"
    PRINCIPAL_ID = "principalId"
    RESOURCE_ID = "resourceId"
    SCOPE = "scope"

class Enum107(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_ID = "clientId"
    CONSENT_TYPE = "consentType"
    PRINCIPAL_ID = "principalId"
    RESOURCE_ID = "resourceId"
    SCOPE = "scope"

class Enum108(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CERTIFICATE_AUTHORITIES = "certificateAuthorities"
    CERTIFICATE_AUTHORITIES_DESC = "certificateAuthorities desc"

class Enum109(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CERTIFICATE_AUTHORITIES = "certificateAuthorities"

class Enum110(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CERTIFICATE_AUTHORITIES = "certificateAuthorities"
    CERTIFICATE_AUTHORITIES_DESC = "certificateAuthorities desc"

class Enum111(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ACTIVITY_BASED_TIMEOUT_POLICIES = "activityBasedTimeoutPolicies"
    CLAIMS_MAPPING_POLICIES = "claimsMappingPolicies"
    HOME_REALM_DISCOVERY_POLICIES = "homeRealmDiscoveryPolicies"
    PERMISSION_GRANT_POLICIES = "permissionGrantPolicies"
    TOKEN_ISSUANCE_POLICIES = "tokenIssuancePolicies"
    TOKEN_LIFETIME_POLICIES = "tokenLifetimePolicies"
    CONDITIONAL_ACCESS_POLICIES = "conditionalAccessPolicies"
    IDENTITY_SECURITY_DEFAULTS_ENFORCEMENT_POLICY = "identitySecurityDefaultsEnforcementPolicy"

class Enum112(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ACTIVITY_BASED_TIMEOUT_POLICIES = "activityBasedTimeoutPolicies"
    CLAIMS_MAPPING_POLICIES = "claimsMappingPolicies"
    HOME_REALM_DISCOVERY_POLICIES = "homeRealmDiscoveryPolicies"
    PERMISSION_GRANT_POLICIES = "permissionGrantPolicies"
    TOKEN_ISSUANCE_POLICIES = "tokenIssuancePolicies"
    TOKEN_LIFETIME_POLICIES = "tokenLifetimePolicies"
    CONDITIONAL_ACCESS_POLICIES = "conditionalAccessPolicies"
    IDENTITY_SECURITY_DEFAULTS_ENFORCEMENT_POLICY = "identitySecurityDefaultsEnforcementPolicy"

class Enum114(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DEFINITION = "definition"
    DEFINITION_DESC = "definition desc"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    IS_ORGANIZATION_DEFAULT_DESC = "isOrganizationDefault desc"

class Enum115(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum116(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum117(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum118(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum119(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DEFINITION = "definition"
    DEFINITION_DESC = "definition desc"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    IS_ORGANIZATION_DEFAULT_DESC = "isOrganizationDefault desc"

class Enum120(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum121(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum122(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum123(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum124(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CONDITIONS = "conditions"
    CONDITIONS_DESC = "conditions desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    GRANT_CONTROLS = "grantControls"
    GRANT_CONTROLS_DESC = "grantControls desc"
    MODIFIED_DATE_TIME = "modifiedDateTime"
    MODIFIED_DATE_TIME_DESC = "modifiedDateTime desc"
    SESSION_CONTROLS = "sessionControls"
    SESSION_CONTROLS_DESC = "sessionControls desc"
    STATE = "state"
    STATE_DESC = "state desc"

class Enum125(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONDITIONS = "conditions"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    GRANT_CONTROLS = "grantControls"
    MODIFIED_DATE_TIME = "modifiedDateTime"
    SESSION_CONTROLS = "sessionControls"
    STATE = "state"

class Enum126(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONDITIONS = "conditions"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    GRANT_CONTROLS = "grantControls"
    MODIFIED_DATE_TIME = "modifiedDateTime"
    SESSION_CONTROLS = "sessionControls"
    STATE = "state"

class Enum127(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DEFINITION = "definition"
    DEFINITION_DESC = "definition desc"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    IS_ORGANIZATION_DEFAULT_DESC = "isOrganizationDefault desc"

class Enum128(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum129(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum130(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum131(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum132(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    IS_ENABLED = "isEnabled"

class Enum133(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"

class Enum134(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    EXCLUDES = "excludes"
    INCLUDES = "includes"

class Enum135(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    EXCLUDES = "excludes"
    INCLUDES = "includes"

class Enum136(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    EXCLUDES = "excludes"
    INCLUDES = "includes"

class Enum137(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    EXCLUDES = "excludes"
    INCLUDES = "includes"

class Enum138(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLIENT_APPLICATION_IDS = "clientApplicationIds"
    CLIENT_APPLICATION_IDS_DESC = "clientApplicationIds desc"
    CLIENT_APPLICATION_PUBLISHER_IDS = "clientApplicationPublisherIds"
    CLIENT_APPLICATION_PUBLISHER_IDS_DESC = "clientApplicationPublisherIds desc"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY = "clientApplicationsFromVerifiedPublisherOnly"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY_DESC = "clientApplicationsFromVerifiedPublisherOnly desc"
    CLIENT_APPLICATION_TENANT_IDS = "clientApplicationTenantIds"
    CLIENT_APPLICATION_TENANT_IDS_DESC = "clientApplicationTenantIds desc"
    PERMISSION_CLASSIFICATION = "permissionClassification"
    PERMISSION_CLASSIFICATION_DESC = "permissionClassification desc"
    PERMISSIONS = "permissions"
    PERMISSIONS_DESC = "permissions desc"
    PERMISSION_TYPE = "permissionType"
    PERMISSION_TYPE_DESC = "permissionType desc"
    RESOURCE_APPLICATION = "resourceApplication"
    RESOURCE_APPLICATION_DESC = "resourceApplication desc"

class Enum139(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_APPLICATION_IDS = "clientApplicationIds"
    CLIENT_APPLICATION_PUBLISHER_IDS = "clientApplicationPublisherIds"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY = "clientApplicationsFromVerifiedPublisherOnly"
    CLIENT_APPLICATION_TENANT_IDS = "clientApplicationTenantIds"
    PERMISSION_CLASSIFICATION = "permissionClassification"
    PERMISSIONS = "permissions"
    PERMISSION_TYPE = "permissionType"
    RESOURCE_APPLICATION = "resourceApplication"

class Enum14(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    MODIFIED_DATE_TIME = "modifiedDateTime"
    MODIFIED_DATE_TIME_DESC = "modifiedDateTime desc"

class Enum140(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_APPLICATION_IDS = "clientApplicationIds"
    CLIENT_APPLICATION_PUBLISHER_IDS = "clientApplicationPublisherIds"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY = "clientApplicationsFromVerifiedPublisherOnly"
    CLIENT_APPLICATION_TENANT_IDS = "clientApplicationTenantIds"
    PERMISSION_CLASSIFICATION = "permissionClassification"
    PERMISSIONS = "permissions"
    PERMISSION_TYPE = "permissionType"
    RESOURCE_APPLICATION = "resourceApplication"

class Enum141(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLIENT_APPLICATION_IDS = "clientApplicationIds"
    CLIENT_APPLICATION_IDS_DESC = "clientApplicationIds desc"
    CLIENT_APPLICATION_PUBLISHER_IDS = "clientApplicationPublisherIds"
    CLIENT_APPLICATION_PUBLISHER_IDS_DESC = "clientApplicationPublisherIds desc"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY = "clientApplicationsFromVerifiedPublisherOnly"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY_DESC = "clientApplicationsFromVerifiedPublisherOnly desc"
    CLIENT_APPLICATION_TENANT_IDS = "clientApplicationTenantIds"
    CLIENT_APPLICATION_TENANT_IDS_DESC = "clientApplicationTenantIds desc"
    PERMISSION_CLASSIFICATION = "permissionClassification"
    PERMISSION_CLASSIFICATION_DESC = "permissionClassification desc"
    PERMISSIONS = "permissions"
    PERMISSIONS_DESC = "permissions desc"
    PERMISSION_TYPE = "permissionType"
    PERMISSION_TYPE_DESC = "permissionType desc"
    RESOURCE_APPLICATION = "resourceApplication"
    RESOURCE_APPLICATION_DESC = "resourceApplication desc"

class Enum142(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_APPLICATION_IDS = "clientApplicationIds"
    CLIENT_APPLICATION_PUBLISHER_IDS = "clientApplicationPublisherIds"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY = "clientApplicationsFromVerifiedPublisherOnly"
    CLIENT_APPLICATION_TENANT_IDS = "clientApplicationTenantIds"
    PERMISSION_CLASSIFICATION = "permissionClassification"
    PERMISSIONS = "permissions"
    PERMISSION_TYPE = "permissionType"
    RESOURCE_APPLICATION = "resourceApplication"

class Enum143(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_APPLICATION_IDS = "clientApplicationIds"
    CLIENT_APPLICATION_PUBLISHER_IDS = "clientApplicationPublisherIds"
    CLIENT_APPLICATIONS_FROM_VERIFIED_PUBLISHER_ONLY = "clientApplicationsFromVerifiedPublisherOnly"
    CLIENT_APPLICATION_TENANT_IDS = "clientApplicationTenantIds"
    PERMISSION_CLASSIFICATION = "permissionClassification"
    PERMISSIONS = "permissions"
    PERMISSION_TYPE = "permissionType"
    RESOURCE_APPLICATION = "resourceApplication"

class Enum144(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DEFINITION = "definition"
    DEFINITION_DESC = "definition desc"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    IS_ORGANIZATION_DEFAULT_DESC = "isOrganizationDefault desc"

class Enum145(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum146(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum147(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum148(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum149(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DEFINITION = "definition"
    DEFINITION_DESC = "definition desc"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    IS_ORGANIZATION_DEFAULT_DESC = "isOrganizationDefault desc"

class Enum15(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    DISPLAY_NAME = "displayName"
    MODIFIED_DATE_TIME = "modifiedDateTime"

class Enum150(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum151(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum152(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    DEFINITION = "definition"
    IS_ORGANIZATION_DEFAULT = "isOrganizationDefault"
    APPLIES_TO = "appliesTo"

class Enum153(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLIES_TO = "appliesTo"

class Enum16(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    DISPLAY_NAME = "displayName"
    MODIFIED_DATE_TIME = "modifiedDateTime"

class Enum17(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CONDITIONS = "conditions"
    CONDITIONS_DESC = "conditions desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    GRANT_CONTROLS = "grantControls"
    GRANT_CONTROLS_DESC = "grantControls desc"
    MODIFIED_DATE_TIME = "modifiedDateTime"
    MODIFIED_DATE_TIME_DESC = "modifiedDateTime desc"
    SESSION_CONTROLS = "sessionControls"
    SESSION_CONTROLS_DESC = "sessionControls desc"
    STATE = "state"
    STATE_DESC = "state desc"

class Enum18(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONDITIONS = "conditions"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    GRANT_CONTROLS = "grantControls"
    MODIFIED_DATE_TIME = "modifiedDateTime"
    SESSION_CONTROLS = "sessionControls"
    STATE = "state"

class Enum19(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CONDITIONS = "conditions"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    GRANT_CONTROLS = "grantControls"
    MODIFIED_DATE_TIME = "modifiedDateTime"
    SESSION_CONTROLS = "sessionControls"
    STATE = "state"

class Enum20(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLIENT_ID = "clientId"
    CLIENT_ID_DESC = "clientId desc"
    CLIENT_SECRET = "clientSecret"
    CLIENT_SECRET_DESC = "clientSecret desc"
    NAME = "name"
    NAME_DESC = "name desc"
    TYPE = "type"
    TYPE_DESC = "type desc"

class Enum21(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_ID = "clientId"
    CLIENT_SECRET = "clientSecret"
    NAME = "name"
    TYPE = "type"

class Enum22(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLIENT_ID = "clientId"
    CLIENT_SECRET = "clientSecret"
    NAME = "name"
    TYPE = "type"

class Enum23(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    THREAT_ASSESSMENT_REQUESTS = "threatAssessmentRequests"

class Enum24(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    THREAT_ASSESSMENT_REQUESTS = "threatAssessmentRequests"

class Enum31(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CATEGORY = "category"
    CATEGORY_DESC = "category desc"
    CONTENT_TYPE = "contentType"
    CONTENT_TYPE_DESC = "contentType desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    EXPECTED_ASSESSMENT = "expectedAssessment"
    EXPECTED_ASSESSMENT_DESC = "expectedAssessment desc"
    REQUEST_SOURCE = "requestSource"
    REQUEST_SOURCE_DESC = "requestSource desc"
    STATUS = "status"
    STATUS_DESC = "status desc"

class Enum32(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CATEGORY = "category"
    CONTENT_TYPE = "contentType"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    EXPECTED_ASSESSMENT = "expectedAssessment"
    REQUEST_SOURCE = "requestSource"
    STATUS = "status"
    RESULTS = "results"

class Enum33(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESULTS = "results"

class Enum34(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CATEGORY = "category"
    CONTENT_TYPE = "contentType"
    CREATED_BY = "createdBy"
    CREATED_DATE_TIME = "createdDateTime"
    EXPECTED_ASSESSMENT = "expectedAssessment"
    REQUEST_SOURCE = "requestSource"
    STATUS = "status"
    RESULTS = "results"

class Enum35(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESULTS = "results"

class Enum36(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    MESSAGE = "message"
    MESSAGE_DESC = "message desc"
    RESULT_TYPE = "resultType"
    RESULT_TYPE_DESC = "resultType desc"

class Enum37(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    MESSAGE = "message"
    RESULT_TYPE = "resultType"

class Enum38(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CREATED_DATE_TIME = "createdDateTime"
    MESSAGE = "message"
    RESULT_TYPE = "resultType"

class Enum39(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    INVITED_USER_DISPLAY_NAME = "invitedUserDisplayName"
    INVITED_USER_DISPLAY_NAME_DESC = "invitedUserDisplayName desc"
    INVITED_USER_EMAIL_ADDRESS = "invitedUserEmailAddress"
    INVITED_USER_EMAIL_ADDRESS_DESC = "invitedUserEmailAddress desc"
    INVITED_USER_MESSAGE_INFO = "invitedUserMessageInfo"
    INVITED_USER_MESSAGE_INFO_DESC = "invitedUserMessageInfo desc"
    INVITED_USER_TYPE = "invitedUserType"
    INVITED_USER_TYPE_DESC = "invitedUserType desc"
    INVITE_REDEEM_URL = "inviteRedeemUrl"
    INVITE_REDEEM_URL_DESC = "inviteRedeemUrl desc"
    INVITE_REDIRECT_URL = "inviteRedirectUrl"
    INVITE_REDIRECT_URL_DESC = "inviteRedirectUrl desc"
    SEND_INVITATION_MESSAGE = "sendInvitationMessage"
    SEND_INVITATION_MESSAGE_DESC = "sendInvitationMessage desc"
    STATUS = "status"
    STATUS_DESC = "status desc"

class Enum40(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    INVITED_USER_DISPLAY_NAME = "invitedUserDisplayName"
    INVITED_USER_EMAIL_ADDRESS = "invitedUserEmailAddress"
    INVITED_USER_MESSAGE_INFO = "invitedUserMessageInfo"
    INVITED_USER_TYPE = "invitedUserType"
    INVITE_REDEEM_URL = "inviteRedeemUrl"
    INVITE_REDIRECT_URL = "inviteRedirectUrl"
    SEND_INVITATION_MESSAGE = "sendInvitationMessage"
    STATUS = "status"
    INVITED_USER = "invitedUser"

class Enum41(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    INVITED_USER = "invitedUser"

class Enum5(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    NAMED_LOCATIONS = "namedLocations"
    POLICIES = "policies"

class Get0ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    NAMED_LOCATIONS = "namedLocations"
    POLICIES = "policies"

class Get1ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    COMPLETED_DATE_TIME = "completedDateTime"
    PROGRESS = "progress"
    STATUS = "status"
    STORAGE_LOCATION = "storageLocation"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    USER_ID = "userId"

class Get5ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    COMPLETED_DATE_TIME = "completedDateTime"
    COMPLETED_DATE_TIME_DESC = "completedDateTime desc"
    PROGRESS = "progress"
    PROGRESS_DESC = "progress desc"
    STATUS = "status"
    STATUS_DESC = "status desc"
    STORAGE_LOCATION = "storageLocation"
    STORAGE_LOCATION_DESC = "storageLocation desc"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    SUBMITTED_DATE_TIME_DESC = "submittedDateTime desc"
    USER_ID = "userId"
    USER_ID_DESC = "userId desc"

class Get6ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    COMPLETED_DATE_TIME = "completedDateTime"
    PROGRESS = "progress"
    STATUS = "status"
    STORAGE_LOCATION = "storageLocation"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    USER_ID = "userId"

class MicrosoftGraphActionState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    PENDING = "pending"
    CANCELED = "canceled"
    ACTIVE = "active"
    DONE = "done"
    FAILED = "failed"
    NOT_SUPPORTED = "notSupported"

class MicrosoftGraphAttendeeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REQUIRED = "required"
    OPTIONAL = "optional"
    RESOURCE = "resource"

class MicrosoftGraphAutomaticRepliesStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISABLED = "disabled"
    ALWAYS_ENABLED = "alwaysEnabled"
    SCHEDULED = "scheduled"

class MicrosoftGraphBodyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TEXT = "text"
    HTML = "html"

class MicrosoftGraphCalendarColor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LIGHT_BLUE = "lightBlue"
    LIGHT_GREEN = "lightGreen"
    AUTO = "auto"
    LIGHT_ORANGE = "lightOrange"
    LIGHT_GRAY = "lightGray"
    LIGHT_YELLOW = "lightYellow"
    LIGHT_TEAL = "lightTeal"
    LIGHT_PINK = "lightPink"
    LIGHT_BROWN = "lightBrown"
    LIGHT_RED = "lightRed"
    MAX_COLOR = "maxColor"

class MicrosoftGraphCalendarRoleType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    FREE_BUSY_READ = "freeBusyRead"
    LIMITED_READ = "limitedRead"
    READ = "read"
    WRITE = "write"
    DELEGATE_WITHOUT_PRIVATE_EVENT_ACCESS = "delegateWithoutPrivateEventAccess"
    DELEGATE_WITH_PRIVATE_EVENT_ACCESS = "delegateWithPrivateEventAccess"
    CUSTOM = "custom"

class MicrosoftGraphCategoryColor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRESET0 = "preset0"
    PRESET1 = "preset1"
    NONE = "none"
    PRESET2 = "preset2"
    PRESET3 = "preset3"
    PRESET4 = "preset4"
    PRESET5 = "preset5"
    PRESET6 = "preset6"
    PRESET7 = "preset7"
    PRESET8 = "preset8"
    PRESET9 = "preset9"
    PRESET10 = "preset10"
    PRESET11 = "preset11"
    PRESET12 = "preset12"
    PRESET13 = "preset13"
    PRESET14 = "preset14"
    PRESET15 = "preset15"
    PRESET16 = "preset16"
    PRESET17 = "preset17"
    PRESET18 = "preset18"
    PRESET19 = "preset19"
    PRESET20 = "preset20"
    PRESET21 = "preset21"
    PRESET22 = "preset22"
    PRESET23 = "preset23"
    PRESET24 = "preset24"

class MicrosoftGraphChannelMembershipType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STANDARD = "standard"
    PRIVATE = "private"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphChatMessageImportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphChatMessagePolicyViolationDlpActionTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    NOTIFY_SENDER = "notifySender"
    BLOCK_ACCESS = "blockAccess"
    BLOCK_ACCESS_EXTERNAL = "blockAccessExternal"

class MicrosoftGraphChatMessagePolicyViolationUserActionTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    OVERRIDE = "override"
    REPORT_FALSE_POSITIVE = "reportFalsePositive"

class MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ALLOW_FALSE_POSITIVE_OVERRIDE = "allowFalsePositiveOverride"
    ALLOW_OVERRIDE_WITHOUT_JUSTIFICATION = "allowOverrideWithoutJustification"
    ALLOW_OVERRIDE_WITH_JUSTIFICATION = "allowOverrideWithJustification"

class MicrosoftGraphChatMessageType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MESSAGE = "message"
    CHAT_EVENT = "chatEvent"
    TYPING = "typing"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphCloudAppSecuritySessionControlType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MCAS_CONFIGURED = "mcasConfigured"
    MONITOR_ONLY = "monitorOnly"
    BLOCK_DOWNLOADS = "blockDownloads"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphComplianceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPLIANT = "compliant"
    NONCOMPLIANT = "noncompliant"
    CONFLICT = "conflict"
    ERROR = "error"
    IN_GRACE_PERIOD = "inGracePeriod"
    CONFIG_MANAGER = "configManager"

class MicrosoftGraphComplianceStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    NOT_APPLICABLE = "notApplicable"
    COMPLIANT = "compliant"
    REMEDIATED = "remediated"
    NON_COMPLIANT = "nonCompliant"
    ERROR = "error"
    CONFLICT = "conflict"
    NOT_ASSIGNED = "notAssigned"

class MicrosoftGraphConditionalAccessClientApp(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ALL = "all"
    BROWSER = "browser"
    MOBILE_APPS_AND_DESKTOP_CLIENTS = "mobileAppsAndDesktopClients"
    EXCHANGE_ACTIVE_SYNC = "exchangeActiveSync"
    EAS_SUPPORTED = "easSupported"
    OTHER = "other"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphConditionalAccessDevicePlatform(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANDROID = "android"
    I_OS = "iOS"
    WINDOWS = "windows"
    WINDOWS_PHONE = "windowsPhone"
    MAC_OS = "macOS"
    ALL = "all"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphConditionalAccessGrantControl(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BLOCK = "block"
    MFA = "mfa"
    COMPLIANT_DEVICE = "compliantDevice"
    DOMAIN_JOINED_DEVICE = "domainJoinedDevice"
    APPROVED_APPLICATION = "approvedApplication"
    COMPLIANT_APPLICATION = "compliantApplication"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphConditionalAccessPolicyState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ENABLED = "enabled"
    DISABLED = "disabled"
    ENABLED_FOR_REPORTING_BUT_NOT_ENFORCED = "enabledForReportingButNotEnforced"

class MicrosoftGraphDataPolicyOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "notStarted"
    RUNNING = "running"
    COMPLETE = "complete"
    FAILED = "failed"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphDayOfWeek(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUNDAY = "sunday"
    MONDAY = "monday"
    TUESDAY = "tuesday"
    WEDNESDAY = "wednesday"
    THURSDAY = "thursday"
    FRIDAY = "friday"
    SATURDAY = "saturday"

class MicrosoftGraphDelegateMeetingMessageDeliveryOptions(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SEND_TO_DELEGATE_AND_INFORMATION_TO_PRINCIPAL = "sendToDelegateAndInformationToPrincipal"
    SEND_TO_DELEGATE_AND_PRINCIPAL = "sendToDelegateAndPrincipal"
    SEND_TO_DELEGATE_ONLY = "sendToDelegateOnly"

class MicrosoftGraphDeviceEnrollmentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    USER_ENROLLMENT = "userEnrollment"
    DEVICE_ENROLLMENT_MANAGER = "deviceEnrollmentManager"
    APPLE_BULK_WITH_USER = "appleBulkWithUser"
    APPLE_BULK_WITHOUT_USER = "appleBulkWithoutUser"
    WINDOWS_AZURE_AD_JOIN = "windowsAzureADJoin"
    WINDOWS_BULK_USERLESS = "windowsBulkUserless"
    WINDOWS_AUTO_ENROLLMENT = "windowsAutoEnrollment"
    WINDOWS_BULK_AZURE_DOMAIN_JOIN = "windowsBulkAzureDomainJoin"
    WINDOWS_CO_MANAGEMENT = "windowsCoManagement"

class MicrosoftGraphDeviceManagementExchangeAccessState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    ALLOWED = "allowed"
    BLOCKED = "blocked"
    QUARANTINED = "quarantined"

class MicrosoftGraphDeviceManagementExchangeAccessStateReason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    EXCHANGE_GLOBAL_RULE = "exchangeGlobalRule"
    EXCHANGE_INDIVIDUAL_RULE = "exchangeIndividualRule"
    EXCHANGE_DEVICE_RULE = "exchangeDeviceRule"
    EXCHANGE_UPGRADE = "exchangeUpgrade"
    EXCHANGE_MAILBOX_POLICY = "exchangeMailboxPolicy"
    OTHER = "other"
    COMPLIANT = "compliant"
    NOT_COMPLIANT = "notCompliant"
    NOT_ENROLLED = "notEnrolled"
    UNKNOWN_LOCATION = "unknownLocation"
    MFA_REQUIRED = "mfaRequired"
    AZURE_AD_BLOCK_DUE_TO_ACCESS_POLICY = "azureADBlockDueToAccessPolicy"
    COMPROMISED_PASSWORD = "compromisedPassword"
    DEVICE_NOT_KNOWN_WITH_MANAGED_APP = "deviceNotKnownWithManagedApp"

class MicrosoftGraphDeviceRegistrationState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_REGISTERED = "notRegistered"
    REGISTERED = "registered"
    REVOKED = "revoked"
    KEY_CONFLICT = "keyConflict"
    APPROVAL_PENDING = "approvalPending"
    CERTIFICATE_RESET = "certificateReset"
    NOT_REGISTERED_PENDING_ENROLLMENT = "notRegisteredPendingEnrollment"
    UNKNOWN = "unknown"

class MicrosoftGraphEventType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SINGLE_INSTANCE = "singleInstance"
    OCCURRENCE = "occurrence"
    EXCEPTION = "exception"
    SERIES_MASTER = "seriesMaster"

class MicrosoftGraphExternalAudienceScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CONTACTS_ONLY = "contactsOnly"
    ALL = "all"

class MicrosoftGraphFollowupFlagStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_FLAGGED = "notFlagged"
    COMPLETE = "complete"
    FLAGGED = "flagged"

class MicrosoftGraphFreeBusyStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FREE = "free"
    TENTATIVE = "tentative"
    UNKNOWN = "unknown"
    BUSY = "busy"
    OOF = "oof"
    WORKING_ELSEWHERE = "workingElsewhere"

class MicrosoftGraphGiphyRatingType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STRICT = "strict"
    MODERATE = "moderate"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphImportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"

class MicrosoftGraphInferenceClassificationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FOCUSED = "focused"
    OTHER = "other"

class MicrosoftGraphLocationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "default"
    CONFERENCE_ROOM = "conferenceRoom"
    HOME_ADDRESS = "homeAddress"
    BUSINESS_ADDRESS = "businessAddress"
    GEO_COORDINATES = "geoCoordinates"
    STREET_ADDRESS = "streetAddress"
    HOTEL = "hotel"
    RESTAURANT = "restaurant"
    LOCAL_BUSINESS = "localBusiness"
    POSTAL_ADDRESS = "postalAddress"

class MicrosoftGraphLocationUniqueIdType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    LOCATION_STORE = "locationStore"
    DIRECTORY = "directory"
    PRIVATE = "private"
    BING = "bing"

class MicrosoftGraphManagedAppFlaggedReason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ROOTED_DEVICE = "rootedDevice"

class MicrosoftGraphManagedDeviceOwnerType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPANY = "company"
    PERSONAL = "personal"

class MicrosoftGraphManagedDevicePartnerReportedHealthState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    ACTIVATED = "activated"
    DEACTIVATED = "deactivated"
    SECURED = "secured"
    LOW_SEVERITY = "lowSeverity"
    MEDIUM_SEVERITY = "mediumSeverity"
    HIGH_SEVERITY = "highSeverity"
    UNRESPONSIVE = "unresponsive"
    COMPROMISED = "compromised"
    MISCONFIGURED = "misconfigured"

class MicrosoftGraphManagementAgentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EAS = "eas"
    MDM = "mdm"
    EAS_MDM = "easMdm"
    INTUNE_CLIENT = "intuneClient"
    EAS_INTUNE_CLIENT = "easIntuneClient"
    CONFIGURATION_MANAGER_CLIENT = "configurationManagerClient"
    CONFIGURATION_MANAGER_CLIENT_MDM = "configurationManagerClientMdm"
    CONFIGURATION_MANAGER_CLIENT_MDM_EAS = "configurationManagerClientMdmEas"
    UNKNOWN = "unknown"
    JAMF = "jamf"
    GOOGLE_CLOUD_DEVICE_POLICY_CONTROLLER = "googleCloudDevicePolicyController"

class MicrosoftGraphMessageActionFlag(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANY = "any"
    CALL = "call"
    DO_NOT_FORWARD = "doNotForward"
    FOLLOW_UP = "followUp"
    FYI = "fyi"
    FORWARD = "forward"
    NO_RESPONSE_NECESSARY = "noResponseNecessary"
    READ = "read"
    REPLY = "reply"
    REPLY_TO_ALL = "replyToAll"
    REVIEW = "review"

class MicrosoftGraphOnenoteUserRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OWNER = "Owner"
    CONTRIBUTOR = "Contributor"
    NONE = "None"
    READER = "Reader"

class MicrosoftGraphOnlineMeetingProviderType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    SKYPE_FOR_BUSINESS = "skypeForBusiness"
    SKYPE_FOR_CONSUMER = "skypeForConsumer"
    TEAMS_FOR_BUSINESS = "teamsForBusiness"

class MicrosoftGraphOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "NotStarted"
    RUNNING = "Running"
    COMPLETED = "Completed"
    FAILED = "Failed"

class MicrosoftGraphPermissionType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    APPLICATION = "application"
    DELEGATED = "delegated"
    DELEGATED_USER_CONSENTABLE = "delegatedUserConsentable"

class MicrosoftGraphPersistentBrowserSessionMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ALWAYS = "always"
    NEVER = "never"

class MicrosoftGraphPhoneType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    HOME = "home"
    BUSINESS = "business"
    MOBILE = "mobile"
    OTHER = "other"
    ASSISTANT = "assistant"
    HOME_FAX = "homeFax"
    BUSINESS_FAX = "businessFax"
    OTHER_FAX = "otherFax"
    PAGER = "pager"
    RADIO = "radio"

class MicrosoftGraphPlannerPreviewType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUTOMATIC = "automatic"
    NO_PREVIEW = "noPreview"
    CHECKLIST = "checklist"
    DESCRIPTION = "description"
    REFERENCE = "reference"

class MicrosoftGraphPolicyPlatformType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANDROID = "android"
    I_OS = "iOS"
    MAC_OS = "macOS"
    WINDOWS_PHONE81 = "windowsPhone81"
    WINDOWS81_AND_LATER = "windows81AndLater"
    WINDOWS10_AND_LATER = "windows10AndLater"
    ANDROID_WORK_PROFILE = "androidWorkProfile"
    ALL = "all"

class MicrosoftGraphRecurrencePatternType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DAILY = "daily"
    WEEKLY = "weekly"
    ABSOLUTE_MONTHLY = "absoluteMonthly"
    RELATIVE_MONTHLY = "relativeMonthly"
    ABSOLUTE_YEARLY = "absoluteYearly"
    RELATIVE_YEARLY = "relativeYearly"

class MicrosoftGraphRecurrenceRangeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    END_DATE = "endDate"
    NO_END = "noEnd"
    NUMBERED = "numbered"

class MicrosoftGraphResponseType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ORGANIZER = "organizer"
    TENTATIVELY_ACCEPTED = "tentativelyAccepted"
    ACCEPTED = "accepted"
    DECLINED = "declined"
    NOT_RESPONDED = "notResponded"

class MicrosoftGraphRiskLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    HIDDEN = "hidden"
    NONE = "none"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphScheduleChangeRequestActor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SENDER = "sender"
    RECIPIENT = "recipient"
    MANAGER = "manager"
    SYSTEM = "system"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphScheduleChangeState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    APPROVED = "approved"
    DECLINED = "declined"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphScheduleEntityTheme(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    WHITE = "white"
    BLUE = "blue"
    GREEN = "green"
    PURPLE = "purple"
    PINK = "pink"
    YELLOW = "yellow"
    GRAY = "gray"
    DARK_BLUE = "darkBlue"
    DARK_GREEN = "darkGreen"
    DARK_PURPLE = "darkPurple"
    DARK_PINK = "darkPink"
    DARK_YELLOW = "darkYellow"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphSelectionLikelihoodInfo(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_SPECIFIED = "notSpecified"
    HIGH = "high"

class MicrosoftGraphSensitivity(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    PERSONAL = "personal"
    PRIVATE = "private"
    CONFIDENTIAL = "confidential"

class MicrosoftGraphSigninFrequencyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DAYS = "days"
    HOURS = "hours"

class MicrosoftGraphStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "active"
    UPDATED = "updated"
    DELETED = "deleted"
    IGNORED = "ignored"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamsAppDistributionMethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STORE = "store"
    ORGANIZATION = "organization"
    SIDELOADED = "sideloaded"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamsAsyncOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    NOT_STARTED = "notStarted"
    IN_PROGRESS = "inProgress"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamsAsyncOperationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    CLONE_TEAM = "cloneTeam"
    ARCHIVE_TEAM = "archiveTeam"
    UNARCHIVE_TEAM = "unarchiveTeam"
    CREATE_TEAM = "createTeam"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamSpecialization(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    EDUCATION_STANDARD = "educationStandard"
    EDUCATION_CLASS = "educationClass"
    EDUCATION_PROFESSIONAL_LEARNING_COMMUNITY = "educationProfessionalLearningCommunity"
    EDUCATION_STAFF = "educationStaff"
    HEALTHCARE_STANDARD = "healthcareStandard"
    HEALTHCARE_CARE_COORDINATION = "healthcareCareCoordination"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamVisibilityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRIVATE = "private"
    PUBLIC = "public"
    HIDDEN_MEMBERSHIP = "hiddenMembership"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphThreatAssessmentContentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MAIL = "mail"
    URL = "url"
    FILE = "file"

class MicrosoftGraphThreatAssessmentRequestSource(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNDEFINED = "undefined"
    USER = "user"
    ADMINISTRATOR = "administrator"

class MicrosoftGraphThreatAssessmentResultType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CHECK_POLICY = "checkPolicy"
    RESCAN = "rescan"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphThreatAssessmentStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    COMPLETED = "completed"

class MicrosoftGraphThreatCategory(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNDEFINED = "undefined"
    SPAM = "spam"
    PHISHING = "phishing"
    MALWARE = "malware"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphThreatExpectedAssessment(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BLOCK = "block"
    UNBLOCK = "unblock"

class MicrosoftGraphTimeOffReasonIconType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CAR = "car"
    CALENDAR = "calendar"
    RUNNING = "running"
    PLANE = "plane"
    FIRST_AID = "firstAid"
    DOCTOR = "doctor"
    NOT_WORKING = "notWorking"
    CLOCK = "clock"
    JURY_DUTY = "juryDuty"
    GLOBE = "globe"
    CUP = "cup"
    PHONE = "phone"
    WEATHER = "weather"
    UMBRELLA = "umbrella"
    PIGGY_BANK = "piggyBank"
    DOG = "dog"
    CAKE = "cake"
    TRAFFIC_CONE = "trafficCone"
    PIN = "pin"
    SUNNY = "sunny"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphWebsiteType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OTHER = "other"
    HOME = "home"
    WORK = "work"
    BLOG = "blog"
    PROFILE = "profile"

class MicrosoftGraphWeekIndex(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FIRST = "first"
    SECOND = "second"
    THIRD = "third"
    FOURTH = "fourth"
    LAST = "last"

class MicrosoftGraphWorkbookOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "notStarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
