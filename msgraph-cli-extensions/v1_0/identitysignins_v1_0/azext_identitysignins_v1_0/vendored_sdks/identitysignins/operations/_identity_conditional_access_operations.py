# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class IdentityConditionalAccessOperations(object):
    """IdentityConditionalAccessOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_sign_ins.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_named_location(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum14"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum15"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfNamedLocation"]
        """Get namedLocations from identity.

        Get namedLocations from identity.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_sign_ins.models.Enum14]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum15]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfNamedLocation or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_sign_ins.models.CollectionOfNamedLocation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfNamedLocation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_named_location.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfNamedLocation', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_named_location.metadata = {'url': '/identity/conditionalAccess/namedLocations'}  # type: ignore

    def create_named_location(
        self,
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        display_name=None,  # type: Optional[str]
        modified_date_time=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphNamedLocation"
        """Create new navigation property to namedLocations for identity.

        Create new navigation property to namedLocations for identity.

        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents creation date and time of the location
         using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would
         look like this: '2014-01-01T00:00:00Z'. Read-only.
        :type created_date_time: ~datetime.datetime
        :param display_name: Human-readable name of the location.
        :type display_name: str
        :param modified_date_time: The Timestamp type represents last modified date and time of the
         location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1,
         2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
        :type modified_date_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphNamedLocation, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphNamedLocation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphNamedLocation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphNamedLocation(id=id, created_date_time=created_date_time, display_name=display_name, modified_date_time=modified_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_named_location.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphNamedLocation')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphNamedLocation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_named_location.metadata = {'url': '/identity/conditionalAccess/namedLocations'}  # type: ignore

    def get_named_location(
        self,
        named_location_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum16"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphNamedLocation"
        """Get namedLocations from identity.

        Get namedLocations from identity.

        :param named_location_id: key: id of namedLocation.
        :type named_location_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum16]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphNamedLocation, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphNamedLocation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphNamedLocation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_named_location.metadata['url']  # type: ignore
        path_format_arguments = {
            'namedLocation-id': self._serialize.url("named_location_id", named_location_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphNamedLocation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_named_location.metadata = {'url': '/identity/conditionalAccess/namedLocations/{namedLocation-id}'}  # type: ignore

    def update_named_location(
        self,
        named_location_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        display_name=None,  # type: Optional[str]
        modified_date_time=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property namedLocations in identity.

        Update the navigation property namedLocations in identity.

        :param named_location_id: key: id of namedLocation.
        :type named_location_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents creation date and time of the location
         using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would
         look like this: '2014-01-01T00:00:00Z'. Read-only.
        :type created_date_time: ~datetime.datetime
        :param display_name: Human-readable name of the location.
        :type display_name: str
        :param modified_date_time: The Timestamp type represents last modified date and time of the
         location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1,
         2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
        :type modified_date_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphNamedLocation(id=id, created_date_time=created_date_time, display_name=display_name, modified_date_time=modified_date_time)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_named_location.metadata['url']  # type: ignore
        path_format_arguments = {
            'namedLocation-id': self._serialize.url("named_location_id", named_location_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphNamedLocation')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_named_location.metadata = {'url': '/identity/conditionalAccess/namedLocations/{namedLocation-id}'}  # type: ignore

    def delete_named_location(
        self,
        named_location_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property namedLocations for identity.

        Delete navigation property namedLocations for identity.

        :param named_location_id: key: id of namedLocation.
        :type named_location_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_named_location.metadata['url']  # type: ignore
        path_format_arguments = {
            'namedLocation-id': self._serialize.url("named_location_id", named_location_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_named_location.metadata = {'url': '/identity/conditionalAccess/namedLocations/{namedLocation-id}'}  # type: ignore

    def list_policy(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum17"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum18"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfConditionalAccessPolicy"]
        """Get policies from identity.

        Get policies from identity.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~identity_sign_ins.models.Enum17]
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum18]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfConditionalAccessPolicy or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~identity_sign_ins.models.CollectionOfConditionalAccessPolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfConditionalAccessPolicy"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_policy.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfConditionalAccessPolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_policy.metadata = {'url': '/identity/conditionalAccess/policies'}  # type: ignore

    def create_policy(
        self,
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        grant_controls=None,  # type: Optional["models.MicrosoftGraphConditionalAccessGrantControls"]
        modified_date_time=None,  # type: Optional[datetime.datetime]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphConditionalAccessPolicyState"]]
        application_enforced_restrictions=None,  # type: Optional["models.MicrosoftGraphApplicationEnforcedRestrictionsSessionControl"]
        cloud_app_security=None,  # type: Optional["models.MicrosoftGraphCloudAppSecuritySessionControl"]
        persistent_browser=None,  # type: Optional["models.MicrosoftGraphPersistentBrowserSessionControl"]
        sign_in_frequency=None,  # type: Optional["models.MicrosoftGraphSignInFrequencySessionControl"]
        applications=None,  # type: Optional["models.MicrosoftGraphConditionalAccessApplications"]
        client_app_types=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphConditionalAccessClientApp"]]]
        locations=None,  # type: Optional["models.MicrosoftGraphConditionalAccessLocations"]
        platforms=None,  # type: Optional["models.MicrosoftGraphConditionalAccessPlatforms"]
        sign_in_risk_levels=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphRiskLevel"]]]
        users=None,  # type: Optional["models.MicrosoftGraphConditionalAccessUsers"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphConditionalAccessPolicy"
        """Create new navigation property to policies for identity.

        Create new navigation property to policies for identity.

        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'. Readonly.
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param display_name: Specifies a display name for the conditionalAccessPolicy object.
        :type display_name: str
        :param grant_controls: conditionalAccessGrantControls.
        :type grant_controls: ~identity_sign_ins.models.MicrosoftGraphConditionalAccessGrantControls
        :param modified_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'. Readonly.
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_sign_ins.models.MicrosoftGraphConditionalAccessPolicyState
        :param application_enforced_restrictions: applicationEnforcedRestrictionsSessionControl.
        :type application_enforced_restrictions: ~identity_sign_ins.models.MicrosoftGraphApplicationEnforcedRestrictionsSessionControl
        :param cloud_app_security: cloudAppSecuritySessionControl.
        :type cloud_app_security: ~identity_sign_ins.models.MicrosoftGraphCloudAppSecuritySessionControl
        :param persistent_browser: persistentBrowserSessionControl.
        :type persistent_browser: ~identity_sign_ins.models.MicrosoftGraphPersistentBrowserSessionControl
        :param sign_in_frequency: signInFrequencySessionControl.
        :type sign_in_frequency: ~identity_sign_ins.models.MicrosoftGraphSignInFrequencySessionControl
        :param applications: conditionalAccessApplications.
        :type applications: ~identity_sign_ins.models.MicrosoftGraphConditionalAccessApplications
        :param client_app_types: Client application types included in the policy. Possible values are:
         all, browser, mobileAppsAndDesktopClients, exchangeActiveSync, easSupported, other.
        :type client_app_types: list[str or ~identity_sign_ins.models.MicrosoftGraphConditionalAccessClientApp]
        :param locations: conditionalAccessLocations.
        :type locations: ~identity_sign_ins.models.MicrosoftGraphConditionalAccessLocations
        :param platforms: conditionalAccessPlatforms.
        :type platforms: ~identity_sign_ins.models.MicrosoftGraphConditionalAccessPlatforms
        :param sign_in_risk_levels: Risk levels included in the policy. Possible values are: low,
         medium, high, none.
        :type sign_in_risk_levels: list[str or ~identity_sign_ins.models.MicrosoftGraphRiskLevel]
        :param users: conditionalAccessUsers.
        :type users: ~identity_sign_ins.models.MicrosoftGraphConditionalAccessUsers
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphConditionalAccessPolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphConditionalAccessPolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphConditionalAccessPolicy"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphConditionalAccessPolicy(id=id, created_date_time=created_date_time, description=description, display_name=display_name, grant_controls=grant_controls, modified_date_time=modified_date_time, state=state, application_enforced_restrictions=application_enforced_restrictions, cloud_app_security=cloud_app_security, persistent_browser=persistent_browser, sign_in_frequency=sign_in_frequency, applications=applications, client_app_types=client_app_types, locations=locations, platforms=platforms, sign_in_risk_levels=sign_in_risk_levels, users=users)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_policy.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphConditionalAccessPolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphConditionalAccessPolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_policy.metadata = {'url': '/identity/conditionalAccess/policies'}  # type: ignore

    def get_policy(
        self,
        conditional_access_policy_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum19"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphConditionalAccessPolicy"
        """Get policies from identity.

        Get policies from identity.

        :param conditional_access_policy_id: key: id of conditionalAccessPolicy.
        :type conditional_access_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~identity_sign_ins.models.Enum19]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphConditionalAccessPolicy, or the result of cls(response)
        :rtype: ~identity_sign_ins.models.MicrosoftGraphConditionalAccessPolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphConditionalAccessPolicy"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_policy.metadata['url']  # type: ignore
        path_format_arguments = {
            'conditionalAccessPolicy-id': self._serialize.url("conditional_access_policy_id", conditional_access_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphConditionalAccessPolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_policy.metadata = {'url': '/identity/conditionalAccess/policies/{conditionalAccessPolicy-id}'}  # type: ignore

    def update_policy(
        self,
        conditional_access_policy_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        grant_controls=None,  # type: Optional["models.MicrosoftGraphConditionalAccessGrantControls"]
        modified_date_time=None,  # type: Optional[datetime.datetime]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphConditionalAccessPolicyState"]]
        application_enforced_restrictions=None,  # type: Optional["models.MicrosoftGraphApplicationEnforcedRestrictionsSessionControl"]
        cloud_app_security=None,  # type: Optional["models.MicrosoftGraphCloudAppSecuritySessionControl"]
        persistent_browser=None,  # type: Optional["models.MicrosoftGraphPersistentBrowserSessionControl"]
        sign_in_frequency=None,  # type: Optional["models.MicrosoftGraphSignInFrequencySessionControl"]
        applications=None,  # type: Optional["models.MicrosoftGraphConditionalAccessApplications"]
        client_app_types=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphConditionalAccessClientApp"]]]
        locations=None,  # type: Optional["models.MicrosoftGraphConditionalAccessLocations"]
        platforms=None,  # type: Optional["models.MicrosoftGraphConditionalAccessPlatforms"]
        sign_in_risk_levels=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphRiskLevel"]]]
        users=None,  # type: Optional["models.MicrosoftGraphConditionalAccessUsers"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property policies in identity.

        Update the navigation property policies in identity.

        :param conditional_access_policy_id: key: id of conditionalAccessPolicy.
        :type conditional_access_policy_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'. Readonly.
        :type created_date_time: ~datetime.datetime
        :param description:
        :type description: str
        :param display_name: Specifies a display name for the conditionalAccessPolicy object.
        :type display_name: str
        :param grant_controls: conditionalAccessGrantControls.
        :type grant_controls: ~identity_sign_ins.models.MicrosoftGraphConditionalAccessGrantControls
        :param modified_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'. Readonly.
        :type modified_date_time: ~datetime.datetime
        :param state:
        :type state: str or ~identity_sign_ins.models.MicrosoftGraphConditionalAccessPolicyState
        :param application_enforced_restrictions: applicationEnforcedRestrictionsSessionControl.
        :type application_enforced_restrictions: ~identity_sign_ins.models.MicrosoftGraphApplicationEnforcedRestrictionsSessionControl
        :param cloud_app_security: cloudAppSecuritySessionControl.
        :type cloud_app_security: ~identity_sign_ins.models.MicrosoftGraphCloudAppSecuritySessionControl
        :param persistent_browser: persistentBrowserSessionControl.
        :type persistent_browser: ~identity_sign_ins.models.MicrosoftGraphPersistentBrowserSessionControl
        :param sign_in_frequency: signInFrequencySessionControl.
        :type sign_in_frequency: ~identity_sign_ins.models.MicrosoftGraphSignInFrequencySessionControl
        :param applications: conditionalAccessApplications.
        :type applications: ~identity_sign_ins.models.MicrosoftGraphConditionalAccessApplications
        :param client_app_types: Client application types included in the policy. Possible values are:
         all, browser, mobileAppsAndDesktopClients, exchangeActiveSync, easSupported, other.
        :type client_app_types: list[str or ~identity_sign_ins.models.MicrosoftGraphConditionalAccessClientApp]
        :param locations: conditionalAccessLocations.
        :type locations: ~identity_sign_ins.models.MicrosoftGraphConditionalAccessLocations
        :param platforms: conditionalAccessPlatforms.
        :type platforms: ~identity_sign_ins.models.MicrosoftGraphConditionalAccessPlatforms
        :param sign_in_risk_levels: Risk levels included in the policy. Possible values are: low,
         medium, high, none.
        :type sign_in_risk_levels: list[str or ~identity_sign_ins.models.MicrosoftGraphRiskLevel]
        :param users: conditionalAccessUsers.
        :type users: ~identity_sign_ins.models.MicrosoftGraphConditionalAccessUsers
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphConditionalAccessPolicy(id=id, created_date_time=created_date_time, description=description, display_name=display_name, grant_controls=grant_controls, modified_date_time=modified_date_time, state=state, application_enforced_restrictions=application_enforced_restrictions, cloud_app_security=cloud_app_security, persistent_browser=persistent_browser, sign_in_frequency=sign_in_frequency, applications=applications, client_app_types=client_app_types, locations=locations, platforms=platforms, sign_in_risk_levels=sign_in_risk_levels, users=users)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_policy.metadata['url']  # type: ignore
        path_format_arguments = {
            'conditionalAccessPolicy-id': self._serialize.url("conditional_access_policy_id", conditional_access_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphConditionalAccessPolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_policy.metadata = {'url': '/identity/conditionalAccess/policies/{conditionalAccessPolicy-id}'}  # type: ignore

    def delete_policy(
        self,
        conditional_access_policy_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property policies for identity.

        Delete navigation property policies for identity.

        :param conditional_access_policy_id: key: id of conditionalAccessPolicy.
        :type conditional_access_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_policy.metadata['url']  # type: ignore
        path_format_arguments = {
            'conditionalAccessPolicy-id': self._serialize.url("conditional_access_policy_id", conditional_access_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_policy.metadata = {'url': '/identity/conditionalAccess/policies/{conditionalAccessPolicy-id}'}  # type: ignore
