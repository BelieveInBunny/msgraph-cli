# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.mgmt.core import ARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

    from azure.core.credentials import TokenCredential

from ._configuration import PlannerConfiguration
from .operations import GroupOperations
from .operations import GroupPlannerOperations
from .operations import GroupPlannerPlanOperations
from .operations import GroupPlannerPlanBucketOperations
from .operations import GroupPlannerPlanBucketTaskOperations
from .operations import GroupPlannerPlanTaskOperations
from .operations import PlannerPlannerOperations
from .operations import PlannerOperations
from .operations import PlannerBucketOperations
from .operations import PlannerBucketTaskOperations
from .operations import PlannerPlanOperations
from .operations import PlannerPlanBucketOperations
from .operations import PlannerPlanBucketTaskOperations
from .operations import PlannerPlanTaskOperations
from .operations import PlannerTaskOperations
from .operations import UserOperations
from .operations import UserPlannerOperations
from .operations import UserPlannerPlanOperations
from .operations import UserPlannerPlanBucketOperations
from .operations import UserPlannerPlanBucketTaskOperations
from .operations import UserPlannerPlanTaskOperations
from .operations import UserPlannerTaskOperations
from . import models


class Planner(object):
    """Planner.

    :ivar group: GroupOperations operations
    :vartype group: planner.operations.GroupOperations
    :ivar group_planner: GroupPlannerOperations operations
    :vartype group_planner: planner.operations.GroupPlannerOperations
    :ivar group_planner_plan: GroupPlannerPlanOperations operations
    :vartype group_planner_plan: planner.operations.GroupPlannerPlanOperations
    :ivar group_planner_plan_bucket: GroupPlannerPlanBucketOperations operations
    :vartype group_planner_plan_bucket: planner.operations.GroupPlannerPlanBucketOperations
    :ivar group_planner_plan_bucket_task: GroupPlannerPlanBucketTaskOperations operations
    :vartype group_planner_plan_bucket_task: planner.operations.GroupPlannerPlanBucketTaskOperations
    :ivar group_planner_plan_task: GroupPlannerPlanTaskOperations operations
    :vartype group_planner_plan_task: planner.operations.GroupPlannerPlanTaskOperations
    :ivar planner_planner: PlannerPlannerOperations operations
    :vartype planner_planner: planner.operations.PlannerPlannerOperations
    :ivar planner: PlannerOperations operations
    :vartype planner: planner.operations.PlannerOperations
    :ivar planner_bucket: PlannerBucketOperations operations
    :vartype planner_bucket: planner.operations.PlannerBucketOperations
    :ivar planner_bucket_task: PlannerBucketTaskOperations operations
    :vartype planner_bucket_task: planner.operations.PlannerBucketTaskOperations
    :ivar planner_plan: PlannerPlanOperations operations
    :vartype planner_plan: planner.operations.PlannerPlanOperations
    :ivar planner_plan_bucket: PlannerPlanBucketOperations operations
    :vartype planner_plan_bucket: planner.operations.PlannerPlanBucketOperations
    :ivar planner_plan_bucket_task: PlannerPlanBucketTaskOperations operations
    :vartype planner_plan_bucket_task: planner.operations.PlannerPlanBucketTaskOperations
    :ivar planner_plan_task: PlannerPlanTaskOperations operations
    :vartype planner_plan_task: planner.operations.PlannerPlanTaskOperations
    :ivar planner_task: PlannerTaskOperations operations
    :vartype planner_task: planner.operations.PlannerTaskOperations
    :ivar user: UserOperations operations
    :vartype user: planner.operations.UserOperations
    :ivar user_planner: UserPlannerOperations operations
    :vartype user_planner: planner.operations.UserPlannerOperations
    :ivar user_planner_plan: UserPlannerPlanOperations operations
    :vartype user_planner_plan: planner.operations.UserPlannerPlanOperations
    :ivar user_planner_plan_bucket: UserPlannerPlanBucketOperations operations
    :vartype user_planner_plan_bucket: planner.operations.UserPlannerPlanBucketOperations
    :ivar user_planner_plan_bucket_task: UserPlannerPlanBucketTaskOperations operations
    :vartype user_planner_plan_bucket_task: planner.operations.UserPlannerPlanBucketTaskOperations
    :ivar user_planner_plan_task: UserPlannerPlanTaskOperations operations
    :vartype user_planner_plan_task: planner.operations.UserPlannerPlanTaskOperations
    :ivar user_planner_task: UserPlannerTaskOperations operations
    :vartype user_planner_task: planner.operations.UserPlannerTaskOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials.TokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        top=None,  # type: Optional[int]
        skip=None,  # type: Optional[int]
        search=None,  # type: Optional[str]
        filter=None,  # type: Optional[str]
        count=None,  # type: Optional[bool]
        base_url=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        if not base_url:
            base_url = 'https://graph.microsoft.com/v1.0'
        self._config = PlannerConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = ARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.group = GroupOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.group_planner = GroupPlannerOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.group_planner_plan = GroupPlannerPlanOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.group_planner_plan_bucket = GroupPlannerPlanBucketOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.group_planner_plan_bucket_task = GroupPlannerPlanBucketTaskOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.group_planner_plan_task = GroupPlannerPlanTaskOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.planner_planner = PlannerPlannerOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.planner = PlannerOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.planner_bucket = PlannerBucketOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.planner_bucket_task = PlannerBucketTaskOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.planner_plan = PlannerPlanOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.planner_plan_bucket = PlannerPlanBucketOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.planner_plan_bucket_task = PlannerPlanBucketTaskOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.planner_plan_task = PlannerPlanTaskOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.planner_task = PlannerTaskOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.user = UserOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.user_planner = UserPlannerOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.user_planner_plan = UserPlannerPlanOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.user_planner_plan_bucket = UserPlannerPlanBucketOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.user_planner_plan_bucket_task = UserPlannerPlanBucketTaskOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.user_planner_plan_task = UserPlannerPlanTaskOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.user_planner_task = UserPlannerTaskOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> Planner
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
