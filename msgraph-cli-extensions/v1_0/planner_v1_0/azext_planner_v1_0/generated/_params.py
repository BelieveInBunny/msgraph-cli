# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import get_enum_type
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_planner_v1_0.action import (
    AddCategoryDescriptions,
    AddApplication
)


def load_arguments(self, _):

    with self.argument_context('planner group delete-planner') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner group show-planner') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner group update-planner') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('plans', type=validate_file_or_dict, help='Read-only. Nullable. Returns the plannerPlans owned by '
                   'the group. Expected value: json-string/@json-file.')

    with self.argument_context('planner groupsplanner create-plan') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Read-only. Date and time at which the plan is created. The Timestamp '
                   'type represents date and time information using ISO 8601 format and is always in UTC time. For '
                   'example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('owner', type=str, help='ID of the Group that owns the plan. A valid group must exist before this '
                   'field can be set. After it is set, this property can’t be updated.')
        c.argument('title', type=str, help='Required. Title of the plan.')
        c.argument('buckets', type=validate_file_or_dict, help='Read-only. Nullable. Collection of buckets in the '
                   'plan. Expected value: json-string/@json-file.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. Collection of tasks in the plan. '
                   'Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Details')
        c.argument('category_descriptions', action=AddCategoryDescriptions, nargs='+',
                   help='plannerCategoryDescriptions', arg_group='Details')
        c.argument('shared_with', type=validate_file_or_dict, help='plannerUserIds Expected value: '
                   'json-string/@json-file.', arg_group='Details')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('planner groupsplanner delete-plan') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner groupsplanner list-plan') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplanner show-plan') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplanner update-plan') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Read-only. Date and time at which the plan is created. The Timestamp '
                   'type represents date and time information using ISO 8601 format and is always in UTC time. For '
                   'example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('owner', type=str, help='ID of the Group that owns the plan. A valid group must exist before this '
                   'field can be set. After it is set, this property can’t be updated.')
        c.argument('title', type=str, help='Required. Title of the plan.')
        c.argument('buckets', type=validate_file_or_dict, help='Read-only. Nullable. Collection of buckets in the '
                   'plan. Expected value: json-string/@json-file.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. Collection of tasks in the plan. '
                   'Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Details')
        c.argument('category_descriptions', action=AddCategoryDescriptions, nargs='+',
                   help='plannerCategoryDescriptions', arg_group='Details')
        c.argument('shared_with', type=validate_file_or_dict, help='plannerUserIds Expected value: '
                   'json-string/@json-file.', arg_group='Details')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('planner groupsplannerplan create-bucket') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('name', type=str, help='Name of the bucket.')
        c.argument('order_hint', type=str, help='Hint used to order items of this type in a list view. The format is '
                   'defined as outlined here.')
        c.argument('plan_id', type=str, help='Plan ID to which the bucket belongs.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. The collection of tasks in the '
                   'bucket. Expected value: json-string/@json-file.')

    with self.argument_context('planner groupsplannerplan create-task') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner groupsplannerplan delete-bucket') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner groupsplannerplan delete-detail') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner groupsplannerplan delete-task') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner groupsplannerplan list-bucket') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplan list-task') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplan show-bucket') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplan show-detail') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplan show-task') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplan update-bucket') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('name', type=str, help='Name of the bucket.')
        c.argument('order_hint', type=str, help='Hint used to order items of this type in a list view. The format is '
                   'defined as outlined here.')
        c.argument('plan_id', type=str, help='Plan ID to which the bucket belongs.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. The collection of tasks in the '
                   'bucket. Expected value: json-string/@json-file.')

    with self.argument_context('planner groupsplannerplan update-detail') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('category_descriptions', action=AddCategoryDescriptions, nargs='+',
                   help='plannerCategoryDescriptions')
        c.argument('shared_with', type=validate_file_or_dict, help='plannerUserIds Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner groupsplannerplan update-task') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner groupsplannerplansbucket create-task') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner groupsplannerplansbucket delete-task') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner groupsplannerplansbucket list-task') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplansbucket show-task') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplansbucket update-task') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner groupsplannerplansbucketstask delete-assigned-to-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner groupsplannerplansbucketstask delete-bucket-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner groupsplannerplansbucketstask delete-detail') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner groupsplannerplansbucketstask delete-progress-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner groupsplannerplansbucketstask show-assigned-to-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplansbucketstask show-bucket-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplansbucketstask show-detail') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplansbucketstask show-progress-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplansbucketstask update-assigned-to-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hints_by_assignee', type=validate_file_or_dict, help='plannerOrderHintsByAssignee Expected '
                   'value: json-string/@json-file.')
        c.argument('unassigned_order_hint', type=str, help='Hint value used to order the task on the AssignedTo view '
                   'of the Task Board when the task is not assigned to anyone, or if the orderHintsByAssignee '
                   'dictionary does not provide an order hint for the user the task is assigned to. The format is '
                   'defined as outlined here.')

    with self.argument_context('planner groupsplannerplansbucketstask update-bucket-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint used to order tasks in the Bucket view of the Task Board. The '
                   'format is defined as outlined here.')

    with self.argument_context('planner groupsplannerplansbucketstask update-detail') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('checklist', type=validate_file_or_dict, help='plannerChecklistItems Expected value: '
                   'json-string/@json-file.')
        c.argument('description', type=str, help='Description of the task')
        c.argument('preview_type', arg_type=get_enum_type(['automatic', 'noPreview', 'checklist', 'description',
                                                           'reference']), help='')
        c.argument('references', type=validate_file_or_dict, help='plannerExternalReferences Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner groupsplannerplansbucketstask update-progress-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint value used to order the task on the Progress view of the Task '
                   'Board. The format is defined as outlined here.')

    with self.argument_context('planner groupsplannerplanstask delete-assigned-to-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner groupsplannerplanstask delete-bucket-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner groupsplannerplanstask delete-detail') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner groupsplannerplanstask delete-progress-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner groupsplannerplanstask show-assigned-to-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplanstask show-bucket-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplanstask show-detail') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplanstask show-progress-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner groupsplannerplanstask update-assigned-to-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hints_by_assignee', type=validate_file_or_dict, help='plannerOrderHintsByAssignee Expected '
                   'value: json-string/@json-file.')
        c.argument('unassigned_order_hint', type=str, help='Hint value used to order the task on the AssignedTo view '
                   'of the Task Board when the task is not assigned to anyone, or if the orderHintsByAssignee '
                   'dictionary does not provide an order hint for the user the task is assigned to. The format is '
                   'defined as outlined here.')

    with self.argument_context('planner groupsplannerplanstask update-bucket-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint used to order tasks in the Bucket view of the Task Board. The '
                   'format is defined as outlined here.')

    with self.argument_context('planner groupsplannerplanstask update-detail') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('checklist', type=validate_file_or_dict, help='plannerChecklistItems Expected value: '
                   'json-string/@json-file.')
        c.argument('description', type=str, help='Description of the task')
        c.argument('preview_type', arg_type=get_enum_type(['automatic', 'noPreview', 'checklist', 'description',
                                                           'reference']), help='')
        c.argument('references', type=validate_file_or_dict, help='plannerExternalReferences Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner groupsplannerplanstask update-progress-task-board-format') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint value used to order the task on the Progress view of the Task '
                   'Board. The format is defined as outlined here.')

    with self.argument_context('planner planner show-planner') as c:
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner planner update-planner') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('buckets', type=validate_file_or_dict, help='Read-only. Nullable. Returns a collection of the '
                   'specified buckets Expected value: json-string/@json-file.')
        c.argument('plans', type=validate_file_or_dict, help='Read-only. Nullable. Returns a collection of the '
                   'specified plans Expected value: json-string/@json-file.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. Returns a collection of the '
                   'specified tasks Expected value: json-string/@json-file.')

    with self.argument_context('planner planner create-bucket') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('name', type=str, help='Name of the bucket.')
        c.argument('order_hint', type=str, help='Hint used to order items of this type in a list view. The format is '
                   'defined as outlined here.')
        c.argument('plan_id', type=str, help='Plan ID to which the bucket belongs.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. The collection of tasks in the '
                   'bucket. Expected value: json-string/@json-file.')

    with self.argument_context('planner planner create-plan') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Read-only. Date and time at which the plan is created. The Timestamp '
                   'type represents date and time information using ISO 8601 format and is always in UTC time. For '
                   'example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('owner', type=str, help='ID of the Group that owns the plan. A valid group must exist before this '
                   'field can be set. After it is set, this property can’t be updated.')
        c.argument('title', type=str, help='Required. Title of the plan.')
        c.argument('buckets', type=validate_file_or_dict, help='Read-only. Nullable. Collection of buckets in the '
                   'plan. Expected value: json-string/@json-file.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. Collection of tasks in the plan. '
                   'Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Details')
        c.argument('category_descriptions', action=AddCategoryDescriptions, nargs='+',
                   help='plannerCategoryDescriptions', arg_group='Details')
        c.argument('shared_with', type=validate_file_or_dict, help='plannerUserIds Expected value: '
                   'json-string/@json-file.', arg_group='Details')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('planner planner create-task') as c:
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner planner delete-bucket') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner planner delete-plan') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner planner delete-task') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner planner list-bucket') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner planner list-plan') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner planner list-task') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner planner show-bucket') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner planner show-plan') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner planner show-task') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner planner update-bucket') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('name', type=str, help='Name of the bucket.')
        c.argument('order_hint', type=str, help='Hint used to order items of this type in a list view. The format is '
                   'defined as outlined here.')
        c.argument('plan_id', type=str, help='Plan ID to which the bucket belongs.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. The collection of tasks in the '
                   'bucket. Expected value: json-string/@json-file.')

    with self.argument_context('planner planner update-plan') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Read-only. Date and time at which the plan is created. The Timestamp '
                   'type represents date and time information using ISO 8601 format and is always in UTC time. For '
                   'example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('owner', type=str, help='ID of the Group that owns the plan. A valid group must exist before this '
                   'field can be set. After it is set, this property can’t be updated.')
        c.argument('title', type=str, help='Required. Title of the plan.')
        c.argument('buckets', type=validate_file_or_dict, help='Read-only. Nullable. Collection of buckets in the '
                   'plan. Expected value: json-string/@json-file.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. Collection of tasks in the plan. '
                   'Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Details')
        c.argument('category_descriptions', action=AddCategoryDescriptions, nargs='+',
                   help='plannerCategoryDescriptions', arg_group='Details')
        c.argument('shared_with', type=validate_file_or_dict, help='plannerUserIds Expected value: '
                   'json-string/@json-file.', arg_group='Details')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('planner planner update-task') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner plannerbucket create-task') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner plannerbucket delete-task') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerbucket list-task') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerbucket show-task') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerbucket update-task') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner plannerbucketstask delete-assigned-to-task-board-format') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerbucketstask delete-bucket-task-board-format') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerbucketstask delete-detail') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerbucketstask delete-progress-task-board-format') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerbucketstask show-assigned-to-task-board-format') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerbucketstask show-bucket-task-board-format') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerbucketstask show-detail') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerbucketstask show-progress-task-board-format') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerbucketstask update-assigned-to-task-board-format') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hints_by_assignee', type=validate_file_or_dict, help='plannerOrderHintsByAssignee Expected '
                   'value: json-string/@json-file.')
        c.argument('unassigned_order_hint', type=str, help='Hint value used to order the task on the AssignedTo view '
                   'of the Task Board when the task is not assigned to anyone, or if the orderHintsByAssignee '
                   'dictionary does not provide an order hint for the user the task is assigned to. The format is '
                   'defined as outlined here.')

    with self.argument_context('planner plannerbucketstask update-bucket-task-board-format') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint used to order tasks in the Bucket view of the Task Board. The '
                   'format is defined as outlined here.')

    with self.argument_context('planner plannerbucketstask update-detail') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('checklist', type=validate_file_or_dict, help='plannerChecklistItems Expected value: '
                   'json-string/@json-file.')
        c.argument('description', type=str, help='Description of the task')
        c.argument('preview_type', arg_type=get_enum_type(['automatic', 'noPreview', 'checklist', 'description',
                                                           'reference']), help='')
        c.argument('references', type=validate_file_or_dict, help='plannerExternalReferences Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner plannerbucketstask update-progress-task-board-format') as c:
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint value used to order the task on the Progress view of the Task '
                   'Board. The format is defined as outlined here.')

    with self.argument_context('planner plannerplan create-bucket') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('name', type=str, help='Name of the bucket.')
        c.argument('order_hint', type=str, help='Hint used to order items of this type in a list view. The format is '
                   'defined as outlined here.')
        c.argument('plan_id', type=str, help='Plan ID to which the bucket belongs.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. The collection of tasks in the '
                   'bucket. Expected value: json-string/@json-file.')

    with self.argument_context('planner plannerplan create-task') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner plannerplan delete-bucket') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerplan delete-detail') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerplan delete-task') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerplan list-bucket') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplan list-task') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplan show-bucket') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplan show-detail') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplan show-task') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplan update-bucket') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('name', type=str, help='Name of the bucket.')
        c.argument('order_hint', type=str, help='Hint used to order items of this type in a list view. The format is '
                   'defined as outlined here.')
        c.argument('plan_id', type=str, help='Plan ID to which the bucket belongs.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. The collection of tasks in the '
                   'bucket. Expected value: json-string/@json-file.')

    with self.argument_context('planner plannerplan update-detail') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('category_descriptions', action=AddCategoryDescriptions, nargs='+',
                   help='plannerCategoryDescriptions')
        c.argument('shared_with', type=validate_file_or_dict, help='plannerUserIds Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner plannerplan update-task') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner plannerplansbucket create-task') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner plannerplansbucket delete-task') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerplansbucket list-task') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplansbucket show-task') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplansbucket update-task') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner plannerplansbucketstask delete-assigned-to-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerplansbucketstask delete-bucket-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerplansbucketstask delete-detail') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerplansbucketstask delete-progress-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerplansbucketstask show-assigned-to-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplansbucketstask show-bucket-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplansbucketstask show-detail') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplansbucketstask show-progress-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplansbucketstask update-assigned-to-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hints_by_assignee', type=validate_file_or_dict, help='plannerOrderHintsByAssignee Expected '
                   'value: json-string/@json-file.')
        c.argument('unassigned_order_hint', type=str, help='Hint value used to order the task on the AssignedTo view '
                   'of the Task Board when the task is not assigned to anyone, or if the orderHintsByAssignee '
                   'dictionary does not provide an order hint for the user the task is assigned to. The format is '
                   'defined as outlined here.')

    with self.argument_context('planner plannerplansbucketstask update-bucket-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint used to order tasks in the Bucket view of the Task Board. The '
                   'format is defined as outlined here.')

    with self.argument_context('planner plannerplansbucketstask update-detail') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('checklist', type=validate_file_or_dict, help='plannerChecklistItems Expected value: '
                   'json-string/@json-file.')
        c.argument('description', type=str, help='Description of the task')
        c.argument('preview_type', arg_type=get_enum_type(['automatic', 'noPreview', 'checklist', 'description',
                                                           'reference']), help='')
        c.argument('references', type=validate_file_or_dict, help='plannerExternalReferences Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner plannerplansbucketstask update-progress-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint value used to order the task on the Progress view of the Task '
                   'Board. The format is defined as outlined here.')

    with self.argument_context('planner plannerplanstask delete-assigned-to-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerplanstask delete-bucket-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerplanstask delete-detail') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerplanstask delete-progress-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannerplanstask show-assigned-to-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplanstask show-bucket-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplanstask show-detail') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplanstask show-progress-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannerplanstask update-assigned-to-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hints_by_assignee', type=validate_file_or_dict, help='plannerOrderHintsByAssignee Expected '
                   'value: json-string/@json-file.')
        c.argument('unassigned_order_hint', type=str, help='Hint value used to order the task on the AssignedTo view '
                   'of the Task Board when the task is not assigned to anyone, or if the orderHintsByAssignee '
                   'dictionary does not provide an order hint for the user the task is assigned to. The format is '
                   'defined as outlined here.')

    with self.argument_context('planner plannerplanstask update-bucket-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint used to order tasks in the Bucket view of the Task Board. The '
                   'format is defined as outlined here.')

    with self.argument_context('planner plannerplanstask update-detail') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('checklist', type=validate_file_or_dict, help='plannerChecklistItems Expected value: '
                   'json-string/@json-file.')
        c.argument('description', type=str, help='Description of the task')
        c.argument('preview_type', arg_type=get_enum_type(['automatic', 'noPreview', 'checklist', 'description',
                                                           'reference']), help='')
        c.argument('references', type=validate_file_or_dict, help='plannerExternalReferences Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner plannerplanstask update-progress-task-board-format') as c:
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint value used to order the task on the Progress view of the Task '
                   'Board. The format is defined as outlined here.')

    with self.argument_context('planner plannertask delete-assigned-to-task-board-format') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannertask delete-bucket-task-board-format') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannertask delete-detail') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannertask delete-progress-task-board-format') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner plannertask show-assigned-to-task-board-format') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannertask show-bucket-task-board-format') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannertask show-detail') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannertask show-progress-task-board-format') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner plannertask update-assigned-to-task-board-format') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hints_by_assignee', type=validate_file_or_dict, help='plannerOrderHintsByAssignee Expected '
                   'value: json-string/@json-file.')
        c.argument('unassigned_order_hint', type=str, help='Hint value used to order the task on the AssignedTo view '
                   'of the Task Board when the task is not assigned to anyone, or if the orderHintsByAssignee '
                   'dictionary does not provide an order hint for the user the task is assigned to. The format is '
                   'defined as outlined here.')

    with self.argument_context('planner plannertask update-bucket-task-board-format') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint used to order tasks in the Bucket view of the Task Board. The '
                   'format is defined as outlined here.')

    with self.argument_context('planner plannertask update-detail') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('checklist', type=validate_file_or_dict, help='plannerChecklistItems Expected value: '
                   'json-string/@json-file.')
        c.argument('description', type=str, help='Description of the task')
        c.argument('preview_type', arg_type=get_enum_type(['automatic', 'noPreview', 'checklist', 'description',
                                                           'reference']), help='')
        c.argument('references', type=validate_file_or_dict, help='plannerExternalReferences Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner plannertask update-progress-task-board-format') as c:
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint value used to order the task on the Progress view of the Task '
                   'Board. The format is defined as outlined here.')

    with self.argument_context('planner user delete-planner') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner user show-planner') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner user update-planner') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('plans', type=validate_file_or_dict, help='Read-only. Nullable. Returns the plannerTasks assigned '
                   'to the user. Expected value: json-string/@json-file.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. Returns the plannerPlans shared '
                   'with the user. Expected value: json-string/@json-file.')

    with self.argument_context('planner usersplanner create-plan') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Read-only. Date and time at which the plan is created. The Timestamp '
                   'type represents date and time information using ISO 8601 format and is always in UTC time. For '
                   'example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('owner', type=str, help='ID of the Group that owns the plan. A valid group must exist before this '
                   'field can be set. After it is set, this property can’t be updated.')
        c.argument('title', type=str, help='Required. Title of the plan.')
        c.argument('buckets', type=validate_file_or_dict, help='Read-only. Nullable. Collection of buckets in the '
                   'plan. Expected value: json-string/@json-file.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. Collection of tasks in the plan. '
                   'Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Details')
        c.argument('category_descriptions', action=AddCategoryDescriptions, nargs='+',
                   help='plannerCategoryDescriptions', arg_group='Details')
        c.argument('shared_with', type=validate_file_or_dict, help='plannerUserIds Expected value: '
                   'json-string/@json-file.', arg_group='Details')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('planner usersplanner create-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner usersplanner delete-plan') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplanner delete-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplanner list-plan') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplanner list-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplanner show-plan') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplanner show-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplanner update-plan') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('created_date_time', help='Read-only. Date and time at which the plan is created. The Timestamp '
                   'type represents date and time information using ISO 8601 format and is always in UTC time. For '
                   'example, midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('owner', type=str, help='ID of the Group that owns the plan. A valid group must exist before this '
                   'field can be set. After it is set, this property can’t be updated.')
        c.argument('title', type=str, help='Required. Title of the plan.')
        c.argument('buckets', type=validate_file_or_dict, help='Read-only. Nullable. Collection of buckets in the '
                   'plan. Expected value: json-string/@json-file.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. Collection of tasks in the plan. '
                   'Expected value: json-string/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Details')
        c.argument('category_descriptions', action=AddCategoryDescriptions, nargs='+',
                   help='plannerCategoryDescriptions', arg_group='Details')
        c.argument('shared_with', type=validate_file_or_dict, help='plannerUserIds Expected value: '
                   'json-string/@json-file.', arg_group='Details')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('planner usersplanner update-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner usersplannerplan create-bucket') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('name', type=str, help='Name of the bucket.')
        c.argument('order_hint', type=str, help='Hint used to order items of this type in a list view. The format is '
                   'defined as outlined here.')
        c.argument('plan_id', type=str, help='Plan ID to which the bucket belongs.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. The collection of tasks in the '
                   'bucket. Expected value: json-string/@json-file.')

    with self.argument_context('planner usersplannerplan create-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner usersplannerplan delete-bucket') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannerplan delete-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannerplan delete-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannerplan list-bucket') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplan list-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplan show-bucket') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplan show-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplan show-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplan update-bucket') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('name', type=str, help='Name of the bucket.')
        c.argument('order_hint', type=str, help='Hint used to order items of this type in a list view. The format is '
                   'defined as outlined here.')
        c.argument('plan_id', type=str, help='Plan ID to which the bucket belongs.')
        c.argument('tasks', type=validate_file_or_dict, help='Read-only. Nullable. The collection of tasks in the '
                   'bucket. Expected value: json-string/@json-file.')

    with self.argument_context('planner usersplannerplan update-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('category_descriptions', action=AddCategoryDescriptions, nargs='+',
                   help='plannerCategoryDescriptions')
        c.argument('shared_with', type=validate_file_or_dict, help='plannerUserIds Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner usersplannerplan update-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner usersplannerplansbucket create-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner usersplannerplansbucket delete-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannerplansbucket list-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplansbucket show-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplansbucket update-task') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner usersplannerplansbucketstask delete-assigned-to-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannerplansbucketstask delete-bucket-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannerplansbucketstask delete-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannerplansbucketstask delete-progress-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannerplansbucketstask show-assigned-to-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplansbucketstask show-bucket-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplansbucketstask show-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplansbucketstask show-progress-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplansbucketstask update-assigned-to-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hints_by_assignee', type=validate_file_or_dict, help='plannerOrderHintsByAssignee Expected '
                   'value: json-string/@json-file.')
        c.argument('unassigned_order_hint', type=str, help='Hint value used to order the task on the AssignedTo view '
                   'of the Task Board when the task is not assigned to anyone, or if the orderHintsByAssignee '
                   'dictionary does not provide an order hint for the user the task is assigned to. The format is '
                   'defined as outlined here.')

    with self.argument_context('planner usersplannerplansbucketstask update-bucket-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint used to order tasks in the Bucket view of the Task Board. The '
                   'format is defined as outlined here.')

    with self.argument_context('planner usersplannerplansbucketstask update-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('checklist', type=validate_file_or_dict, help='plannerChecklistItems Expected value: '
                   'json-string/@json-file.')
        c.argument('description', type=str, help='Description of the task')
        c.argument('preview_type', arg_type=get_enum_type(['automatic', 'noPreview', 'checklist', 'description',
                                                           'reference']), help='')
        c.argument('references', type=validate_file_or_dict, help='plannerExternalReferences Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner usersplannerplansbucketstask update-progress-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_bucket_id', type=str, help='key: id of plannerBucket')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint value used to order the task on the Progress view of the Task '
                   'Board. The format is defined as outlined here.')

    with self.argument_context('planner usersplannerplanstask delete-assigned-to-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannerplanstask delete-bucket-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannerplanstask delete-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannerplanstask delete-progress-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannerplanstask show-assigned-to-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplanstask show-bucket-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplanstask show-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplanstask show-progress-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannerplanstask update-assigned-to-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hints_by_assignee', type=validate_file_or_dict, help='plannerOrderHintsByAssignee Expected '
                   'value: json-string/@json-file.')
        c.argument('unassigned_order_hint', type=str, help='Hint value used to order the task on the AssignedTo view '
                   'of the Task Board when the task is not assigned to anyone, or if the orderHintsByAssignee '
                   'dictionary does not provide an order hint for the user the task is assigned to. The format is '
                   'defined as outlined here.')

    with self.argument_context('planner usersplannerplanstask update-bucket-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint used to order tasks in the Bucket view of the Task Board. The '
                   'format is defined as outlined here.')

    with self.argument_context('planner usersplannerplanstask update-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('checklist', type=validate_file_or_dict, help='plannerChecklistItems Expected value: '
                   'json-string/@json-file.')
        c.argument('description', type=str, help='Description of the task')
        c.argument('preview_type', arg_type=get_enum_type(['automatic', 'noPreview', 'checklist', 'description',
                                                           'reference']), help='')
        c.argument('references', type=validate_file_or_dict, help='plannerExternalReferences Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner usersplannerplanstask update-progress-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_plan_id', type=str, help='key: id of plannerPlan')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint value used to order the task on the Progress view of the Task '
                   'Board. The format is defined as outlined here.')

    with self.argument_context('planner usersplannertask delete-assigned-to-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannertask delete-bucket-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannertask delete-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannertask delete-progress-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('planner usersplannertask show-assigned-to-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannertask show-bucket-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannertask show-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannertask show-progress-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('planner usersplannertask update-assigned-to-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hints_by_assignee', type=validate_file_or_dict, help='plannerOrderHintsByAssignee Expected '
                   'value: json-string/@json-file.')
        c.argument('unassigned_order_hint', type=str, help='Hint value used to order the task on the AssignedTo view '
                   'of the Task Board when the task is not assigned to anyone, or if the orderHintsByAssignee '
                   'dictionary does not provide an order hint for the user the task is assigned to. The format is '
                   'defined as outlined here.')

    with self.argument_context('planner usersplannertask update-bucket-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint used to order tasks in the Bucket view of the Task Board. The '
                   'format is defined as outlined here.')

    with self.argument_context('planner usersplannertask update-detail') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('checklist', type=validate_file_or_dict, help='plannerChecklistItems Expected value: '
                   'json-string/@json-file.')
        c.argument('description', type=str, help='Description of the task')
        c.argument('preview_type', arg_type=get_enum_type(['automatic', 'noPreview', 'checklist', 'description',
                                                           'reference']), help='')
        c.argument('references', type=validate_file_or_dict, help='plannerExternalReferences Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('planner usersplannertask update-progress-task-board-format') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('planner_task_id', type=str, help='key: id of plannerTask')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('order_hint', type=str, help='Hint value used to order the task on the Progress view of the Task '
                   'Board. The format is defined as outlined here.')
