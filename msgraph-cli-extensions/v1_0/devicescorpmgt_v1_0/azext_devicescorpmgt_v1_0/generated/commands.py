# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from msgraph.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management_device_app_management
    devicescorpmgt_v1_0_device_app_management_device_app_management = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_devic'
        'e_app_management_operations#DeviceAppManagementDeviceAppManagementOperations.{}',
        client_factory=cf_device_app_management_device_app_management)
    with self.command_group('devicescorpmgt device-app-management-device-app-management',
                            devicescorpmgt_v1_0_device_app_management_device_app_management,
                            client_factory=cf_device_app_management_device_app_management, is_experimental=True) as g:
        g.custom_command('get-device-app-management', 'devicescorpmgt_device_app_management_device_app_management_get_d'
                         'evice_app_management')
        g.custom_command('update-device-app-management', 'devicescorpmgt_device_app_management_device_app_management_up'
                         'date_device_app_management')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management
    devicescorpmgt_v1_0_device_app_management = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_opera'
        'tions#DeviceAppManagementOperations.{}',
        client_factory=cf_device_app_management)
    with self.command_group('devicescorpmgt device-app-management', devicescorpmgt_v1_0_device_app_management,
                            client_factory=cf_device_app_management, is_experimental=True) as g:
        g.custom_command('delete', 'devicescorpmgt_device_app_management_delete', confirmation=True)
        g.custom_command('create-android-managed-app-protection', 'devicescorpmgt_device_app_management_create_android_'
                         'managed_app_protection')
        g.custom_command('create-default-managed-app-protection', 'devicescorpmgt_device_app_management_create_default_'
                         'managed_app_protection')
        g.custom_command('create-io-managed-app-protection', 'devicescorpmgt_device_app_management_create_io_managed_ap'
                         'p_protection')
        g.custom_command('create-managed-app-policy',
                         'devicescorpmgt_device_app_management_create_managed_app_policy')
        g.custom_command('create-managed-app-registration', 'devicescorpmgt_device_app_management_create_managed_app_re'
                         'gistration')
        g.custom_command('create-managed-app-statuses', 'devicescorpmgt_device_app_management_create_managed_app_status'
                         'es')
        g.custom_command('create-managed-e-book', 'devicescorpmgt_device_app_management_create_managed_e_book')
        g.custom_command('create-mdm-window-information-protection-policy', 'devicescorpmgt_device_app_management_creat'
                         'e_mdm_window_information_protection_policy')
        g.custom_command('create-mobile-app', 'devicescorpmgt_device_app_management_create_mobile_app')
        g.custom_command('create-mobile-app-category', 'devicescorpmgt_device_app_management_create_mobile_app_category'
                         '')
        g.custom_command('create-mobile-app-configuration', 'devicescorpmgt_device_app_management_create_mobile_app_con'
                         'figuration')
        g.custom_command('create-targeted-managed-app-configuration', 'devicescorpmgt_device_app_management_create_targ'
                         'eted_managed_app_configuration')
        g.custom_command('create-vpp-token', 'devicescorpmgt_device_app_management_create_vpp_token')
        g.custom_command('create-window-information-protection-policy', 'devicescorpmgt_device_app_management_create_wi'
                         'ndow_information_protection_policy')
        g.custom_command('get-android-managed-app-protection', 'devicescorpmgt_device_app_management_get_android_manage'
                         'd_app_protection')
        g.custom_command('get-default-managed-app-protection', 'devicescorpmgt_device_app_management_get_default_manage'
                         'd_app_protection')
        g.custom_command('get-io-managed-app-protection', 'devicescorpmgt_device_app_management_get_io_managed_app_prot'
                         'ection')
        g.custom_command('get-managed-app-policy', 'devicescorpmgt_device_app_management_get_managed_app_policy')
        g.custom_command('get-managed-app-registration', 'devicescorpmgt_device_app_management_get_managed_app_registra'
                         'tion')
        g.custom_command('get-managed-app-statuses', 'devicescorpmgt_device_app_management_get_managed_app_statuses')
        g.custom_command('get-managed-e-book', 'devicescorpmgt_device_app_management_get_managed_e_book')
        g.custom_command('get-mdm-window-information-protection-policy', 'devicescorpmgt_device_app_management_get_mdm_'
                         'window_information_protection_policy')
        g.custom_command('get-mobile-app', 'devicescorpmgt_device_app_management_get_mobile_app')
        g.custom_command('get-mobile-app-category', 'devicescorpmgt_device_app_management_get_mobile_app_category')
        g.custom_command('get-mobile-app-configuration', 'devicescorpmgt_device_app_management_get_mobile_app_configura'
                         'tion')
        g.custom_command('get-targeted-managed-app-configuration', 'devicescorpmgt_device_app_management_get_targeted_m'
                         'anaged_app_configuration')
        g.custom_command('get-vpp-token', 'devicescorpmgt_device_app_management_get_vpp_token')
        g.custom_command('get-window-information-protection-policy', 'devicescorpmgt_device_app_management_get_window_i'
                         'nformation_protection_policy')
        g.custom_command('list-android-managed-app-protection', 'devicescorpmgt_device_app_management_list_android_mana'
                         'ged_app_protection')
        g.custom_command('list-default-managed-app-protection', 'devicescorpmgt_device_app_management_list_default_mana'
                         'ged_app_protection')
        g.custom_command('list-io-managed-app-protection', 'devicescorpmgt_device_app_management_list_io_managed_app_pr'
                         'otection')
        g.custom_command('list-managed-app-policy', 'devicescorpmgt_device_app_management_list_managed_app_policy')
        g.custom_command('list-managed-app-registration', 'devicescorpmgt_device_app_management_list_managed_app_regist'
                         'ration')
        g.custom_command('list-managed-app-statuses',
                         'devicescorpmgt_device_app_management_list_managed_app_statuses')
        g.custom_command('list-managed-e-book', 'devicescorpmgt_device_app_management_list_managed_e_book')
        g.custom_command('list-mdm-window-information-protection-policy', 'devicescorpmgt_device_app_management_list_md'
                         'm_window_information_protection_policy')
        g.custom_command('list-mobile-app', 'devicescorpmgt_device_app_management_list_mobile_app')
        g.custom_command('list-mobile-app-category', 'devicescorpmgt_device_app_management_list_mobile_app_category')
        g.custom_command('list-mobile-app-configuration', 'devicescorpmgt_device_app_management_list_mobile_app_configu'
                         'ration')
        g.custom_command('list-targeted-managed-app-configuration', 'devicescorpmgt_device_app_management_list_targeted'
                         '_managed_app_configuration')
        g.custom_command('list-vpp-token', 'devicescorpmgt_device_app_management_list_vpp_token')
        g.custom_command('list-window-information-protection-policy', 'devicescorpmgt_device_app_management_list_window'
                         '_information_protection_policy')
        g.custom_command('sync-microsoft-store-for-business-app', 'devicescorpmgt_device_app_management_sync_microsoft_'
                         'store_for_business_app')
        g.custom_command('update-android-managed-app-protection', 'devicescorpmgt_device_app_management_update_android_'
                         'managed_app_protection')
        g.custom_command('update-default-managed-app-protection', 'devicescorpmgt_device_app_management_update_default_'
                         'managed_app_protection')
        g.custom_command('update-io-managed-app-protection', 'devicescorpmgt_device_app_management_update_io_managed_ap'
                         'p_protection')
        g.custom_command('update-managed-app-policy',
                         'devicescorpmgt_device_app_management_update_managed_app_policy')
        g.custom_command('update-managed-app-registration', 'devicescorpmgt_device_app_management_update_managed_app_re'
                         'gistration')
        g.custom_command('update-managed-app-statuses', 'devicescorpmgt_device_app_management_update_managed_app_status'
                         'es')
        g.custom_command('update-managed-e-book', 'devicescorpmgt_device_app_management_update_managed_e_book')
        g.custom_command('update-mdm-window-information-protection-policy', 'devicescorpmgt_device_app_management_updat'
                         'e_mdm_window_information_protection_policy')
        g.custom_command('update-mobile-app', 'devicescorpmgt_device_app_management_update_mobile_app')
        g.custom_command('update-mobile-app-category', 'devicescorpmgt_device_app_management_update_mobile_app_category'
                         '')
        g.custom_command('update-mobile-app-configuration', 'devicescorpmgt_device_app_management_update_mobile_app_con'
                         'figuration')
        g.custom_command('update-targeted-managed-app-configuration', 'devicescorpmgt_device_app_management_update_targ'
                         'eted_managed_app_configuration')
        g.custom_command('update-vpp-token', 'devicescorpmgt_device_app_management_update_vpp_token')
        g.custom_command('update-window-information-protection-policy', 'devicescorpmgt_device_app_management_update_wi'
                         'ndow_information_protection_policy')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management_android_managed_app_protection
    devicescorpmgt_v1_0_device_app_management_android_managed_app_protection = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_andro'
        'id_managed_app_protection_operations#DeviceAppManagementAndroidManagedAppProtectionOperations.{}',
        client_factory=cf_device_app_management_android_managed_app_protection)
    with self.command_group('devicescorpmgt device-app-management-android-managed-app-protection',
                            devicescorpmgt_v1_0_device_app_management_android_managed_app_protection,
                            client_factory=cf_device_app_management_android_managed_app_protection,
                            is_experimental=True) as g:
        g.custom_command('delete', 'devicescorpmgt_device_app_management_android_managed_app_protection_delete',
                         confirmation=True)
        g.custom_command('create-app',
                         'devicescorpmgt_device_app_management_android_managed_app_protection_create_app')
        g.custom_command('get-app', 'devicescorpmgt_device_app_management_android_managed_app_protection_get_app')
        g.custom_command('get-deployment-summary', 'devicescorpmgt_device_app_management_android_managed_app_protection'
                         '_get_deployment_summary')
        g.custom_command('list-app', 'devicescorpmgt_device_app_management_android_managed_app_protection_list_app')
        g.custom_command('update-app',
                         'devicescorpmgt_device_app_management_android_managed_app_protection_update_app')
        g.custom_command('update-deployment-summary', 'devicescorpmgt_device_app_management_android_managed_app_protect'
                         'ion_update_deployment_summary')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management_default_managed_app_protection
    devicescorpmgt_v1_0_device_app_management_default_managed_app_protection = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_defau'
        'lt_managed_app_protection_operations#DeviceAppManagementDefaultManagedAppProtectionOperations.{}',
        client_factory=cf_device_app_management_default_managed_app_protection)
    with self.command_group('devicescorpmgt device-app-management-default-managed-app-protection',
                            devicescorpmgt_v1_0_device_app_management_default_managed_app_protection,
                            client_factory=cf_device_app_management_default_managed_app_protection,
                            is_experimental=True) as g:
        g.custom_command('delete', 'devicescorpmgt_device_app_management_default_managed_app_protection_delete',
                         confirmation=True)
        g.custom_command('create-app',
                         'devicescorpmgt_device_app_management_default_managed_app_protection_create_app')
        g.custom_command('get-app', 'devicescorpmgt_device_app_management_default_managed_app_protection_get_app')
        g.custom_command('get-deployment-summary', 'devicescorpmgt_device_app_management_default_managed_app_protection'
                         '_get_deployment_summary')
        g.custom_command('list-app', 'devicescorpmgt_device_app_management_default_managed_app_protection_list_app')
        g.custom_command('update-app',
                         'devicescorpmgt_device_app_management_default_managed_app_protection_update_app')
        g.custom_command('update-deployment-summary', 'devicescorpmgt_device_app_management_default_managed_app_protect'
                         'ion_update_deployment_summary')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management_io_managed_app_protection
    devicescorpmgt_v1_0_device_app_management_io_managed_app_protection = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_io_ma'
        'naged_app_protection_operations#DeviceAppManagementIoManagedAppProtectionOperations.{}',
        client_factory=cf_device_app_management_io_managed_app_protection)
    with self.command_group('devicescorpmgt device-app-management-io-managed-app-protection',
                            devicescorpmgt_v1_0_device_app_management_io_managed_app_protection,
                            client_factory=cf_device_app_management_io_managed_app_protection,
                            is_experimental=True) as g:
        g.custom_command('delete', 'devicescorpmgt_device_app_management_io_managed_app_protection_delete',
                         confirmation=True)
        g.custom_command('create-app', 'devicescorpmgt_device_app_management_io_managed_app_protection_create_app')
        g.custom_command('get-app', 'devicescorpmgt_device_app_management_io_managed_app_protection_get_app')
        g.custom_command('get-deployment-summary', 'devicescorpmgt_device_app_management_io_managed_app_protection_get_'
                         'deployment_summary')
        g.custom_command('list-app', 'devicescorpmgt_device_app_management_io_managed_app_protection_list_app')
        g.custom_command('update-app', 'devicescorpmgt_device_app_management_io_managed_app_protection_update_app')
        g.custom_command('update-deployment-summary', 'devicescorpmgt_device_app_management_io_managed_app_protection_u'
                         'pdate_deployment_summary')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management_managed_app_policy
    devicescorpmgt_v1_0_device_app_management_managed_app_policy = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_manag'
        'ed_app_policy_operations#DeviceAppManagementManagedAppPolicyOperations.{}',
        client_factory=cf_device_app_management_managed_app_policy)
    with self.command_group('devicescorpmgt device-app-management-managed-app-policy',
                            devicescorpmgt_v1_0_device_app_management_managed_app_policy,
                            client_factory=cf_device_app_management_managed_app_policy, is_experimental=True) as g:
        g.custom_command('target-app', 'devicescorpmgt_device_app_management_managed_app_policy_target_app')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management_managed_app_registration
    devicescorpmgt_v1_0_device_app_management_managed_app_registration = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_manag'
        'ed_app_registration_operations#DeviceAppManagementManagedAppRegistrationOperations.{}',
        client_factory=cf_device_app_management_managed_app_registration)
    with self.command_group('devicescorpmgt device-app-management-managed-app-registration',
                            devicescorpmgt_v1_0_device_app_management_managed_app_registration,
                            client_factory=cf_device_app_management_managed_app_registration,
                            is_experimental=True) as g:
        g.custom_command('delete', 'devicescorpmgt_device_app_management_managed_app_registration_delete',
                         confirmation=True)
        g.custom_command('create-applied-policy', 'devicescorpmgt_device_app_management_managed_app_registration_create'
                         '_applied_policy')
        g.custom_command('create-intended-policy', 'devicescorpmgt_device_app_management_managed_app_registration_creat'
                         'e_intended_policy')
        g.custom_command('create-operation', 'devicescorpmgt_device_app_management_managed_app_registration_create_oper'
                         'ation')
        g.custom_command('get-applied-policy', 'devicescorpmgt_device_app_management_managed_app_registration_get_appli'
                         'ed_policy')
        g.custom_command('get-intended-policy', 'devicescorpmgt_device_app_management_managed_app_registration_get_inte'
                         'nded_policy')
        g.custom_command('get-operation',
                         'devicescorpmgt_device_app_management_managed_app_registration_get_operation')
        g.custom_command('get-user-id-with-flagged-app-registration', 'devicescorpmgt_device_app_management_managed_app'
                         '_registration_get_user_id_with_flagged_app_registration')
        g.custom_command('list-applied-policy', 'devicescorpmgt_device_app_management_managed_app_registration_list_app'
                         'lied_policy')
        g.custom_command('list-intended-policy', 'devicescorpmgt_device_app_management_managed_app_registration_list_in'
                         'tended_policy')
        g.custom_command('list-operation', 'devicescorpmgt_device_app_management_managed_app_registration_list_operatio'
                         'n')
        g.custom_command('update-applied-policy', 'devicescorpmgt_device_app_management_managed_app_registration_update'
                         '_applied_policy')
        g.custom_command('update-intended-policy', 'devicescorpmgt_device_app_management_managed_app_registration_updat'
                         'e_intended_policy')
        g.custom_command('update-operation', 'devicescorpmgt_device_app_management_managed_app_registration_update_oper'
                         'ation')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management_managed_app_registration_applied_policy
    devicescorpmgt_v1_0_device_app_management_managed_app_registration_applied_policy = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_manag'
        'ed_app_registration_applied_policy_operations#DeviceAppManagementManagedAppRegistrationAppliedPolicyOperations'
        '.{}',
        client_factory=cf_device_app_management_managed_app_registration_applied_policy)
    with self.command_group('devicescorpmgt device-app-management-managed-app-registration-applied-policy',
                            devicescorpmgt_v1_0_device_app_management_managed_app_registration_applied_policy,
                            client_factory=cf_device_app_management_managed_app_registration_applied_policy,
                            is_experimental=True) as g:
        g.custom_command('target-app', 'devicescorpmgt_device_app_management_managed_app_registration_applied_policy_ta'
                         'rget_app')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management_managed_app_registration_intended_policy
    devicescorpmgt_v1_0_device_app_management_managed_app_registration_intended_policy = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_manag'
        'ed_app_registration_intended_policy_operations#DeviceAppManagementManagedAppRegistrationIntendedPolicyOperatio'
        'ns.{}',
        client_factory=cf_device_app_management_managed_app_registration_intended_policy)
    with self.command_group('devicescorpmgt device-app-management-managed-app-registration-intended-policy',
                            devicescorpmgt_v1_0_device_app_management_managed_app_registration_intended_policy,
                            client_factory=cf_device_app_management_managed_app_registration_intended_policy,
                            is_experimental=True) as g:
        g.custom_command('target-app', 'devicescorpmgt_device_app_management_managed_app_registration_intended_policy_t'
                         'arget_app')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management_managed_ebook
    devicescorpmgt_v1_0_device_app_management_managed_ebook = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_manag'
        'ed_ebook_operations#DeviceAppManagementManagedEBookOperations.{}',
        client_factory=cf_device_app_management_managed_ebook)
    with self.command_group('devicescorpmgt device-app-management-managed-e-book',
                            devicescorpmgt_v1_0_device_app_management_managed_ebook,
                            client_factory=cf_device_app_management_managed_ebook, is_experimental=True) as g:
        g.custom_command('delete', 'devicescorpmgt_device_app_management_managed_e_book_delete', confirmation=True)
        g.custom_command('assign', 'devicescorpmgt_device_app_management_managed_e_book_assign')
        g.custom_command('create-assignment', 'devicescorpmgt_device_app_management_managed_e_book_create_assignment')
        g.custom_command('create-device-state', 'devicescorpmgt_device_app_management_managed_e_book_create_device_stat'
                         'e')
        g.custom_command('create-user-state-summary', 'devicescorpmgt_device_app_management_managed_e_book_create_user_'
                         'state_summary')
        g.custom_command('get-assignment', 'devicescorpmgt_device_app_management_managed_e_book_get_assignment')
        g.custom_command('get-device-state', 'devicescorpmgt_device_app_management_managed_e_book_get_device_state')
        g.custom_command('get-install-summary', 'devicescorpmgt_device_app_management_managed_e_book_get_install_summar'
                         'y')
        g.custom_command('get-user-state-summary', 'devicescorpmgt_device_app_management_managed_e_book_get_user_state_'
                         'summary')
        g.custom_command('list-assignment', 'devicescorpmgt_device_app_management_managed_e_book_list_assignment')
        g.custom_command('list-device-state', 'devicescorpmgt_device_app_management_managed_e_book_list_device_state')
        g.custom_command('list-user-state-summary', 'devicescorpmgt_device_app_management_managed_e_book_list_user_stat'
                         'e_summary')
        g.custom_command('update-assignment', 'devicescorpmgt_device_app_management_managed_e_book_update_assignment')
        g.custom_command('update-device-state', 'devicescorpmgt_device_app_management_managed_e_book_update_device_stat'
                         'e')
        g.custom_command('update-install-summary', 'devicescorpmgt_device_app_management_managed_e_book_update_install_'
                         'summary')
        g.custom_command('update-user-state-summary', 'devicescorpmgt_device_app_management_managed_e_book_update_user_'
                         'state_summary')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management_managed_ebook_user_state_summary
    devicescorpmgt_v1_0_device_app_management_managed_ebook_user_state_summary = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_manag'
        'ed_ebook_user_state_summary_operations#DeviceAppManagementManagedEBookUserStateSummaryOperations.{}',
        client_factory=cf_device_app_management_managed_ebook_user_state_summary)
    with self.command_group('devicescorpmgt device-app-management-managed-e-book-user-state-summary',
                            devicescorpmgt_v1_0_device_app_management_managed_ebook_user_state_summary,
                            client_factory=cf_device_app_management_managed_ebook_user_state_summary,
                            is_experimental=True) as g:
        g.custom_command('delete', 'devicescorpmgt_device_app_management_managed_e_book_user_state_summary_delete',
                         confirmation=True)
        g.custom_command('create-device-state', 'devicescorpmgt_device_app_management_managed_e_book_user_state_summary'
                         '_create_device_state')
        g.custom_command('get-device-state', 'devicescorpmgt_device_app_management_managed_e_book_user_state_summary_ge'
                         't_device_state')
        g.custom_command('list-device-state', 'devicescorpmgt_device_app_management_managed_e_book_user_state_summary_l'
                         'ist_device_state')
        g.custom_command('update-device-state', 'devicescorpmgt_device_app_management_managed_e_book_user_state_summary'
                         '_update_device_state')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management_mobile_app_configuration
    devicescorpmgt_v1_0_device_app_management_mobile_app_configuration = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_mobil'
        'e_app_configuration_operations#DeviceAppManagementMobileAppConfigurationOperations.{}',
        client_factory=cf_device_app_management_mobile_app_configuration)
    with self.command_group('devicescorpmgt device-app-management-mobile-app-configuration',
                            devicescorpmgt_v1_0_device_app_management_mobile_app_configuration,
                            client_factory=cf_device_app_management_mobile_app_configuration,
                            is_experimental=True) as g:
        g.custom_command('delete', 'devicescorpmgt_device_app_management_mobile_app_configuration_delete',
                         confirmation=True)
        g.custom_command('assign', 'devicescorpmgt_device_app_management_mobile_app_configuration_assign')
        g.custom_command('create-assignment', 'devicescorpmgt_device_app_management_mobile_app_configuration_create_ass'
                         'ignment')
        g.custom_command('create-device-statuses', 'devicescorpmgt_device_app_management_mobile_app_configuration_creat'
                         'e_device_statuses')
        g.custom_command('create-user-statuses', 'devicescorpmgt_device_app_management_mobile_app_configuration_create_'
                         'user_statuses')
        g.custom_command('get-assignment', 'devicescorpmgt_device_app_management_mobile_app_configuration_get_assignmen'
                         't')
        g.custom_command('get-device-status-summary', 'devicescorpmgt_device_app_management_mobile_app_configuration_ge'
                         't_device_status_summary')
        g.custom_command('get-device-statuses', 'devicescorpmgt_device_app_management_mobile_app_configuration_get_devi'
                         'ce_statuses')
        g.custom_command('get-user-status-summary', 'devicescorpmgt_device_app_management_mobile_app_configuration_get_'
                         'user_status_summary')
        g.custom_command('get-user-statuses', 'devicescorpmgt_device_app_management_mobile_app_configuration_get_user_s'
                         'tatuses')
        g.custom_command('list-assignment', 'devicescorpmgt_device_app_management_mobile_app_configuration_list_assignm'
                         'ent')
        g.custom_command('list-device-statuses', 'devicescorpmgt_device_app_management_mobile_app_configuration_list_de'
                         'vice_statuses')
        g.custom_command('list-user-statuses', 'devicescorpmgt_device_app_management_mobile_app_configuration_list_user'
                         '_statuses')
        g.custom_command('update-assignment', 'devicescorpmgt_device_app_management_mobile_app_configuration_update_ass'
                         'ignment')
        g.custom_command('update-device-status-summary', 'devicescorpmgt_device_app_management_mobile_app_configuration'
                         '_update_device_status_summary')
        g.custom_command('update-device-statuses', 'devicescorpmgt_device_app_management_mobile_app_configuration_updat'
                         'e_device_statuses')
        g.custom_command('update-user-status-summary', 'devicescorpmgt_device_app_management_mobile_app_configuration_u'
                         'pdate_user_status_summary')
        g.custom_command('update-user-statuses', 'devicescorpmgt_device_app_management_mobile_app_configuration_update_'
                         'user_statuses')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management_mobile_app
    devicescorpmgt_v1_0_device_app_management_mobile_app = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_mobil'
        'e_app_operations#DeviceAppManagementMobileAppOperations.{}',
        client_factory=cf_device_app_management_mobile_app)
    with self.command_group('devicescorpmgt device-app-management-mobile-app',
                            devicescorpmgt_v1_0_device_app_management_mobile_app,
                            client_factory=cf_device_app_management_mobile_app, is_experimental=True) as g:
        g.custom_command('delete', 'devicescorpmgt_device_app_management_mobile_app_delete', confirmation=True)
        g.custom_command('assign', 'devicescorpmgt_device_app_management_mobile_app_assign')
        g.custom_command('create-assignment', 'devicescorpmgt_device_app_management_mobile_app_create_assignment')
        g.custom_command('create-ref-category', 'devicescorpmgt_device_app_management_mobile_app_create_ref_category')
        g.custom_command('get-assignment', 'devicescorpmgt_device_app_management_mobile_app_get_assignment')
        g.custom_command('list-assignment', 'devicescorpmgt_device_app_management_mobile_app_list_assignment')
        g.custom_command('list-category', 'devicescorpmgt_device_app_management_mobile_app_list_category')
        g.custom_command('list-ref-category', 'devicescorpmgt_device_app_management_mobile_app_list_ref_category')
        g.custom_command('update-assignment', 'devicescorpmgt_device_app_management_mobile_app_update_assignment')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management_targeted_managed_app_configuration
    devicescorpmgt_v1_0_device_app_management_targeted_managed_app_configuration = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_targe'
        'ted_managed_app_configuration_operations#DeviceAppManagementTargetedManagedAppConfigurationOperations.{}',
        client_factory=cf_device_app_management_targeted_managed_app_configuration)
    with self.command_group('devicescorpmgt device-app-management-targeted-managed-app-configuration',
                            devicescorpmgt_v1_0_device_app_management_targeted_managed_app_configuration,
                            client_factory=cf_device_app_management_targeted_managed_app_configuration,
                            is_experimental=True) as g:
        g.custom_command('delete', 'devicescorpmgt_device_app_management_targeted_managed_app_configuration_delete',
                         confirmation=True)
        g.custom_command('assign', 'devicescorpmgt_device_app_management_targeted_managed_app_configuration_assign')
        g.custom_command('create-app', 'devicescorpmgt_device_app_management_targeted_managed_app_configuration_create_'
                         'app')
        g.custom_command('create-assignment', 'devicescorpmgt_device_app_management_targeted_managed_app_configuration_'
                         'create_assignment')
        g.custom_command('get-app', 'devicescorpmgt_device_app_management_targeted_managed_app_configuration_get_app')
        g.custom_command('get-assignment', 'devicescorpmgt_device_app_management_targeted_managed_app_configuration_get'
                         '_assignment')
        g.custom_command('get-deployment-summary', 'devicescorpmgt_device_app_management_targeted_managed_app_configura'
                         'tion_get_deployment_summary')
        g.custom_command('list-app',
                         'devicescorpmgt_device_app_management_targeted_managed_app_configuration_list_app')
        g.custom_command('list-assignment', 'devicescorpmgt_device_app_management_targeted_managed_app_configuration_li'
                         'st_assignment')
        g.custom_command('target-app', 'devicescorpmgt_device_app_management_targeted_managed_app_configuration_target_'
                         'app')
        g.custom_command('update-app', 'devicescorpmgt_device_app_management_targeted_managed_app_configuration_update_'
                         'app')
        g.custom_command('update-assignment', 'devicescorpmgt_device_app_management_targeted_managed_app_configuration_'
                         'update_assignment')
        g.custom_command('update-deployment-summary', 'devicescorpmgt_device_app_management_targeted_managed_app_config'
                         'uration_update_deployment_summary')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_device_app_management_vpp_token
    devicescorpmgt_v1_0_device_app_management_vpp_token = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._device_app_management_vpp_t'
        'oken_operations#DeviceAppManagementVppTokenOperations.{}',
        client_factory=cf_device_app_management_vpp_token)
    with self.command_group('devicescorpmgt device-app-management-vpp-token',
                            devicescorpmgt_v1_0_device_app_management_vpp_token,
                            client_factory=cf_device_app_management_vpp_token, is_experimental=True) as g:
        g.custom_command('sync-license', 'devicescorpmgt_device_app_management_vpp_token_sync_license')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_user
    devicescorpmgt_v1_0_user = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._user_operations#UserOperati'
        'ons.{}',
        client_factory=cf_user)
    with self.command_group('devicescorpmgt user', devicescorpmgt_v1_0_user, client_factory=cf_user,
                            is_experimental=True) as g:
        g.custom_command('delete', 'devicescorpmgt_user_delete', confirmation=True)
        g.custom_command('create-device-management-troubleshooting-event', 'devicescorpmgt_user_create_device_managemen'
                         't_troubleshooting_event')
        g.custom_command('create-managed-device', 'devicescorpmgt_user_create_managed_device')
        g.custom_command('create-ref-managed-app-registration', 'devicescorpmgt_user_create_ref_managed_app_registratio'
                         'n')
        g.custom_command('get-device-management-troubleshooting-event', 'devicescorpmgt_user_get_device_management_trou'
                         'bleshooting_event')
        g.custom_command('get-managed-device', 'devicescorpmgt_user_get_managed_device')
        g.custom_command('list-device-management-troubleshooting-event', 'devicescorpmgt_user_list_device_management_tr'
                         'oubleshooting_event')
        g.custom_command('list-managed-app-registration', 'devicescorpmgt_user_list_managed_app_registration')
        g.custom_command('list-managed-device', 'devicescorpmgt_user_list_managed_device')
        g.custom_command('list-ref-managed-app-registration', 'devicescorpmgt_user_list_ref_managed_app_registration')
        g.custom_command('update-device-management-troubleshooting-event', 'devicescorpmgt_user_update_device_managemen'
                         't_troubleshooting_event')
        g.custom_command('update-managed-device', 'devicescorpmgt_user_update_managed_device')

    from azext_devicescorpmgt_v1_0.generated._client_factory import cf_user_managed_device
    devicescorpmgt_v1_0_user_managed_device = CliCommandType(
        operations_tmpl='azext_devicescorpmgt_v1_0.vendored_sdks.devicescorpmgt.operations._user_managed_device_operati'
        'ons#UserManagedDeviceOperations.{}',
        client_factory=cf_user_managed_device)
    with self.command_group('devicescorpmgt user-managed-device', devicescorpmgt_v1_0_user_managed_device,
                            client_factory=cf_user_managed_device, is_experimental=True) as g:
        g.custom_command('delete', 'devicescorpmgt_user_managed_device_delete', confirmation=True)
        g.custom_command('create-device-compliance-policy-state', 'devicescorpmgt_user_managed_device_create_device_com'
                         'pliance_policy_state')
        g.custom_command('create-device-configuration-state', 'devicescorpmgt_user_managed_device_create_device_configu'
                         'ration_state')
        g.custom_command('get-device-category', 'devicescorpmgt_user_managed_device_get_device_category')
        g.custom_command('get-device-compliance-policy-state', 'devicescorpmgt_user_managed_device_get_device_complianc'
                         'e_policy_state')
        g.custom_command('get-device-configuration-state', 'devicescorpmgt_user_managed_device_get_device_configuration'
                         '_state')
        g.custom_command('list-device-compliance-policy-state', 'devicescorpmgt_user_managed_device_list_device_complia'
                         'nce_policy_state')
        g.custom_command('list-device-configuration-state', 'devicescorpmgt_user_managed_device_list_device_configurati'
                         'on_state')
        g.custom_command('update-device-category', 'devicescorpmgt_user_managed_device_update_device_category')
        g.custom_command('update-device-compliance-policy-state', 'devicescorpmgt_user_managed_device_update_device_com'
                         'pliance_policy_state')
        g.custom_command('update-device-configuration-state', 'devicescorpmgt_user_managed_device_update_device_configu'
                         'ration_state')
