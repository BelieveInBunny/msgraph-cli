# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CollectionOfAndroidManagedAppProtection(msrest.serialization.Model):
    """Collection of androidManagedAppProtection.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value:
     list[~devices_corporate_management.models.MicrosoftGraphAndroidManagedAppProtection]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphAndroidManagedAppProtection]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfAndroidManagedAppProtection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDefaultManagedAppProtection(msrest.serialization.Model):
    """Collection of defaultManagedAppProtection.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value:
     list[~devices_corporate_management.models.MicrosoftGraphDefaultManagedAppProtection]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDefaultManagedAppProtection]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDefaultManagedAppProtection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDeviceCompliancePolicyState(msrest.serialization.Model):
    """Collection of deviceCompliancePolicyState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value:
     list[~devices_corporate_management.models.MicrosoftGraphDeviceCompliancePolicyState]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDeviceCompliancePolicyState]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDeviceCompliancePolicyState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDeviceConfigurationState(msrest.serialization.Model):
    """Collection of deviceConfigurationState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphDeviceConfigurationState]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDeviceConfigurationState]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDeviceConfigurationState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDeviceInstallState(msrest.serialization.Model):
    """Collection of deviceInstallState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphDeviceInstallState]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDeviceInstallState]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDeviceInstallState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDeviceInstallState0(msrest.serialization.Model):
    """Collection of deviceInstallState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphDeviceInstallState]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDeviceInstallState]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDeviceInstallState0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDeviceManagementTroubleshootingEvent(msrest.serialization.Model):
    """Collection of deviceManagementTroubleshootingEvent.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value:
     list[~devices_corporate_management.models.MicrosoftGraphDeviceManagementTroubleshootingEvent]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphDeviceManagementTroubleshootingEvent]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDeviceManagementTroubleshootingEvent, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfIosManagedAppProtection(msrest.serialization.Model):
    """Collection of iosManagedAppProtection.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphIosManagedAppProtection]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphIosManagedAppProtection]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfIosManagedAppProtection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfLinksOfManagedAppRegistration(msrest.serialization.Model):
    """Collection of links of managedAppRegistration.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfLinksOfManagedAppRegistration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfLinksOfMobileAppCategory(msrest.serialization.Model):
    """Collection of links of mobileAppCategory.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[str]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[str]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfLinksOfMobileAppCategory, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedAppOperation(msrest.serialization.Model):
    """Collection of managedAppOperation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphManagedAppOperation]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedAppOperation]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedAppOperation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedAppPolicy(msrest.serialization.Model):
    """Collection of managedAppPolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphManagedAppPolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedAppPolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedAppPolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedAppPolicy0(msrest.serialization.Model):
    """Collection of managedAppPolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphManagedAppPolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedAppPolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedAppPolicy0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedAppPolicy1(msrest.serialization.Model):
    """Collection of managedAppPolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphManagedAppPolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedAppPolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedAppPolicy1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedAppRegistration(msrest.serialization.Model):
    """Collection of managedAppRegistration.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphManagedAppRegistration]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedAppRegistration]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedAppRegistration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedAppRegistration0(msrest.serialization.Model):
    """Collection of managedAppRegistration.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphManagedAppRegistration]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedAppRegistration]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedAppRegistration0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedAppStatus(msrest.serialization.Model):
    """Collection of managedAppStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphManagedAppStatus]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedAppStatus]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedAppStatus, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedDevice(msrest.serialization.Model):
    """Collection of managedDevice.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphManagedDevice]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedDevice]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedDevice, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedDeviceMobileAppConfiguration(msrest.serialization.Model):
    """Collection of managedDeviceMobileAppConfiguration.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value:
     list[~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfiguration]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedDeviceMobileAppConfiguration]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedDeviceMobileAppConfiguration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedDeviceMobileAppConfigurationAssignment(msrest.serialization.Model):
    """Collection of managedDeviceMobileAppConfigurationAssignment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value:
     list[~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedDeviceMobileAppConfigurationAssignment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedDeviceMobileAppConfigurationDeviceStatus(msrest.serialization.Model):
    """Collection of managedDeviceMobileAppConfigurationDeviceStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value:
     list[~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedDeviceMobileAppConfigurationDeviceStatus, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedDeviceMobileAppConfigurationUserStatus(msrest.serialization.Model):
    """Collection of managedDeviceMobileAppConfigurationUserStatus.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value:
     list[~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedDeviceMobileAppConfigurationUserStatus, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedEBook(msrest.serialization.Model):
    """Collection of managedEBook.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphManagedEBook]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedEBook]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedEBook, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedEBookAssignment(msrest.serialization.Model):
    """Collection of managedEBookAssignment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphManagedEBookAssignment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedEBookAssignment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedEBookAssignment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedMobileApp(msrest.serialization.Model):
    """Collection of managedMobileApp.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphManagedMobileApp]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedMobileApp]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedMobileApp, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedMobileApp0(msrest.serialization.Model):
    """Collection of managedMobileApp.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphManagedMobileApp]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedMobileApp]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedMobileApp0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedMobileApp1(msrest.serialization.Model):
    """Collection of managedMobileApp.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphManagedMobileApp]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedMobileApp]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedMobileApp1, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfManagedMobileApp2(msrest.serialization.Model):
    """Collection of managedMobileApp.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphManagedMobileApp]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphManagedMobileApp]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfManagedMobileApp2, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMdmWindowsInformationProtectionPolicy(msrest.serialization.Model):
    """Collection of mdmWindowsInformationProtectionPolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value:
     list[~devices_corporate_management.models.MicrosoftGraphMdmWindowsInformationProtectionPolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphMdmWindowsInformationProtectionPolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMdmWindowsInformationProtectionPolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMobileApp(msrest.serialization.Model):
    """Collection of mobileApp.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphMobileApp]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphMobileApp]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMobileApp, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMobileAppAssignment(msrest.serialization.Model):
    """Collection of mobileAppAssignment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphMobileAppAssignment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphMobileAppAssignment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMobileAppAssignment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMobileAppCategory(msrest.serialization.Model):
    """Collection of mobileAppCategory.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphMobileAppCategory]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphMobileAppCategory]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMobileAppCategory, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMobileAppCategory0(msrest.serialization.Model):
    """Collection of mobileAppCategory.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphMobileAppCategory]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphMobileAppCategory]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMobileAppCategory0, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfTargetedManagedAppConfiguration(msrest.serialization.Model):
    """Collection of targetedManagedAppConfiguration.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value:
     list[~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppConfiguration]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphTargetedManagedAppConfiguration]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfTargetedManagedAppConfiguration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfTargetedManagedAppPolicyAssignment(msrest.serialization.Model):
    """Collection of targetedManagedAppPolicyAssignment.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value:
     list[~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppPolicyAssignment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphTargetedManagedAppPolicyAssignment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfTargetedManagedAppPolicyAssignment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfUserInstallStateSummary(msrest.serialization.Model):
    """Collection of userInstallStateSummary.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphUserInstallStateSummary]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphUserInstallStateSummary]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfUserInstallStateSummary, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfVppToken(msrest.serialization.Model):
    """Collection of vppToken.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~devices_corporate_management.models.MicrosoftGraphVppToken]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphVppToken]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfVppToken, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfWindowsInformationProtectionPolicy(msrest.serialization.Model):
    """Collection of windowsInformationProtectionPolicy.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionPolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphWindowsInformationProtectionPolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfWindowsInformationProtectionPolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)


class MicrosoftGraphManagedAppPolicy(MicrosoftGraphEntity):
    """The ManagedAppPolicy resource represents a base type for platform specific policies.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: The date and time the policy was created.
    :type created_date_time: ~datetime.datetime
    :param description: The policy's description.
    :type description: str
    :param display_name: Policy display name.
    :type display_name: str
    :param last_modified_date_time: Last time the policy was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param version: Version of the entity.
    :type version: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedAppPolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphManagedAppProtection(MicrosoftGraphManagedAppPolicy):
    """Policy used to configure detailed management settings for a specified set of apps.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    :param created_date_time: The date and time the policy was created.
    :type created_date_time: ~datetime.datetime
    :param description: The policy's description.
    :type description: str
    :param display_name: Policy display name.
    :type display_name: str
    :param last_modified_date_time: Last time the policy was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param version: Version of the entity.
    :type version: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allowed_data_storage_locations: Data storage locations where a user may store managed
     data.
    :type allowed_data_storage_locations: list[str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataStorageLocation]
    :param allowed_inbound_data_transfer_sources:  Possible values include: "allApps",
     "managedApps", "none".
    :type allowed_inbound_data_transfer_sources: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataTransferLevel
    :param allowed_outbound_clipboard_sharing_level:  Possible values include: "allApps",
     "managedAppsWithPasteIn", "managedApps", "blocked".
    :type allowed_outbound_clipboard_sharing_level: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppClipboardSharingLevel
    :param allowed_outbound_data_transfer_destinations:  Possible values include: "allApps",
     "managedApps", "none".
    :type allowed_outbound_data_transfer_destinations: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataTransferLevel
    :param contact_sync_blocked: Indicates whether contacts can be synced to the user's device.
    :type contact_sync_blocked: bool
    :param data_backup_blocked: Indicates whether the backup of a managed app's data is blocked.
    :type data_backup_blocked: bool
    :param device_compliance_required: Indicates whether device compliance is required.
    :type device_compliance_required: bool
    :param disable_app_pin_if_device_pin_is_set: Indicates whether use of the app pin is required
     if the device pin is set.
    :type disable_app_pin_if_device_pin_is_set: bool
    :param fingerprint_blocked: Indicates whether use of the fingerprint reader is allowed in place
     of a pin if PinRequired is set to True.
    :type fingerprint_blocked: bool
    :param managed_browser:  Possible values include: "notConfigured", "microsoftEdge".
    :type managed_browser: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedBrowserType
    :param managed_browser_to_open_links_required: Indicates whether internet links should be
     opened in the managed browser app, or any custom browser specified by CustomBrowserProtocol
     (for iOS) or CustomBrowserPackageId/CustomBrowserDisplayName (for Android).
    :type managed_browser_to_open_links_required: bool
    :param maximum_pin_retries: Maximum number of incorrect pin retry attempts before the managed
     app is either blocked or wiped.
    :type maximum_pin_retries: int
    :param minimum_pin_length: Minimum pin length required for an app-level pin if PinRequired is
     set to True.
    :type minimum_pin_length: int
    :param minimum_required_app_version: Versions less than the specified version will block the
     managed app from accessing company data.
    :type minimum_required_app_version: str
    :param minimum_required_os_version: Versions less than the specified version will block the
     managed app from accessing company data.
    :type minimum_required_os_version: str
    :param minimum_warning_app_version: Versions less than the specified version will result in
     warning message on the managed app.
    :type minimum_warning_app_version: str
    :param minimum_warning_os_version: Versions less than the specified version will result in
     warning message on the managed app from accessing company data.
    :type minimum_warning_os_version: str
    :param organizational_credentials_required: Indicates whether organizational credentials are
     required for app use.
    :type organizational_credentials_required: bool
    :param period_before_pin_reset: TimePeriod before the all-level pin must be reset if
     PinRequired is set to True.
    :type period_before_pin_reset: ~datetime.timedelta
    :param period_offline_before_access_check: The period after which access is checked when the
     device is not connected to the internet.
    :type period_offline_before_access_check: ~datetime.timedelta
    :param period_offline_before_wipe_is_enforced: The amount of time an app is allowed to remain
     disconnected from the internet before all managed data it is wiped.
    :type period_offline_before_wipe_is_enforced: ~datetime.timedelta
    :param period_online_before_access_check: The period after which access is checked when the
     device is connected to the internet.
    :type period_online_before_access_check: ~datetime.timedelta
    :param pin_character_set:  Possible values include: "numeric", "alphanumericAndSymbol".
    :type pin_character_set: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppPinCharacterSet
    :param pin_required: Indicates whether an app-level pin is required.
    :type pin_required: bool
    :param print_blocked: Indicates whether printing is allowed from managed apps.
    :type print_blocked: bool
    :param save_as_blocked: Indicates whether users may use the 'Save As' menu item to save a copy
     of protected files.
    :type save_as_blocked: bool
    :param simple_pin_blocked: Indicates whether simplePin is blocked.
    :type simple_pin_blocked: bool
    """

    _validation = {
        'maximum_pin_retries': {'maximum': 2147483647, 'minimum': -2147483648},
        'minimum_pin_length': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'version': {'key': 'version', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'allowed_data_storage_locations': {'key': 'allowedDataStorageLocations', 'type': '[str]'},
        'allowed_inbound_data_transfer_sources': {'key': 'allowedInboundDataTransferSources', 'type': 'str'},
        'allowed_outbound_clipboard_sharing_level': {'key': 'allowedOutboundClipboardSharingLevel', 'type': 'str'},
        'allowed_outbound_data_transfer_destinations': {'key': 'allowedOutboundDataTransferDestinations', 'type': 'str'},
        'contact_sync_blocked': {'key': 'contactSyncBlocked', 'type': 'bool'},
        'data_backup_blocked': {'key': 'dataBackupBlocked', 'type': 'bool'},
        'device_compliance_required': {'key': 'deviceComplianceRequired', 'type': 'bool'},
        'disable_app_pin_if_device_pin_is_set': {'key': 'disableAppPinIfDevicePinIsSet', 'type': 'bool'},
        'fingerprint_blocked': {'key': 'fingerprintBlocked', 'type': 'bool'},
        'managed_browser': {'key': 'managedBrowser', 'type': 'str'},
        'managed_browser_to_open_links_required': {'key': 'managedBrowserToOpenLinksRequired', 'type': 'bool'},
        'maximum_pin_retries': {'key': 'maximumPinRetries', 'type': 'int'},
        'minimum_pin_length': {'key': 'minimumPinLength', 'type': 'int'},
        'minimum_required_app_version': {'key': 'minimumRequiredAppVersion', 'type': 'str'},
        'minimum_required_os_version': {'key': 'minimumRequiredOsVersion', 'type': 'str'},
        'minimum_warning_app_version': {'key': 'minimumWarningAppVersion', 'type': 'str'},
        'minimum_warning_os_version': {'key': 'minimumWarningOsVersion', 'type': 'str'},
        'organizational_credentials_required': {'key': 'organizationalCredentialsRequired', 'type': 'bool'},
        'period_before_pin_reset': {'key': 'periodBeforePinReset', 'type': 'duration'},
        'period_offline_before_access_check': {'key': 'periodOfflineBeforeAccessCheck', 'type': 'duration'},
        'period_offline_before_wipe_is_enforced': {'key': 'periodOfflineBeforeWipeIsEnforced', 'type': 'duration'},
        'period_online_before_access_check': {'key': 'periodOnlineBeforeAccessCheck', 'type': 'duration'},
        'pin_character_set': {'key': 'pinCharacterSet', 'type': 'str'},
        'pin_required': {'key': 'pinRequired', 'type': 'bool'},
        'print_blocked': {'key': 'printBlocked', 'type': 'bool'},
        'save_as_blocked': {'key': 'saveAsBlocked', 'type': 'bool'},
        'simple_pin_blocked': {'key': 'simplePinBlocked', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedAppProtection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.allowed_data_storage_locations = kwargs.get('allowed_data_storage_locations', None)
        self.allowed_inbound_data_transfer_sources = kwargs.get('allowed_inbound_data_transfer_sources', None)
        self.allowed_outbound_clipboard_sharing_level = kwargs.get('allowed_outbound_clipboard_sharing_level', None)
        self.allowed_outbound_data_transfer_destinations = kwargs.get('allowed_outbound_data_transfer_destinations', None)
        self.contact_sync_blocked = kwargs.get('contact_sync_blocked', None)
        self.data_backup_blocked = kwargs.get('data_backup_blocked', None)
        self.device_compliance_required = kwargs.get('device_compliance_required', None)
        self.disable_app_pin_if_device_pin_is_set = kwargs.get('disable_app_pin_if_device_pin_is_set', None)
        self.fingerprint_blocked = kwargs.get('fingerprint_blocked', None)
        self.managed_browser = kwargs.get('managed_browser', None)
        self.managed_browser_to_open_links_required = kwargs.get('managed_browser_to_open_links_required', None)
        self.maximum_pin_retries = kwargs.get('maximum_pin_retries', None)
        self.minimum_pin_length = kwargs.get('minimum_pin_length', None)
        self.minimum_required_app_version = kwargs.get('minimum_required_app_version', None)
        self.minimum_required_os_version = kwargs.get('minimum_required_os_version', None)
        self.minimum_warning_app_version = kwargs.get('minimum_warning_app_version', None)
        self.minimum_warning_os_version = kwargs.get('minimum_warning_os_version', None)
        self.organizational_credentials_required = kwargs.get('organizational_credentials_required', None)
        self.period_before_pin_reset = kwargs.get('period_before_pin_reset', None)
        self.period_offline_before_access_check = kwargs.get('period_offline_before_access_check', None)
        self.period_offline_before_wipe_is_enforced = kwargs.get('period_offline_before_wipe_is_enforced', None)
        self.period_online_before_access_check = kwargs.get('period_online_before_access_check', None)
        self.pin_character_set = kwargs.get('pin_character_set', None)
        self.pin_required = kwargs.get('pin_required', None)
        self.print_blocked = kwargs.get('print_blocked', None)
        self.save_as_blocked = kwargs.get('save_as_blocked', None)
        self.simple_pin_blocked = kwargs.get('simple_pin_blocked', None)


class MicrosoftGraphTargetedManagedAppProtection(MicrosoftGraphManagedAppProtection):
    """Policy used to configure detailed management settings targeted to specific security groups.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: The date and time the policy was created.
    :type created_date_time: ~datetime.datetime
    :param description: The policy's description.
    :type description: str
    :param display_name: Policy display name.
    :type display_name: str
    :param last_modified_date_time: Last time the policy was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param version: Version of the entity.
    :type version: str
    :param allowed_data_storage_locations: Data storage locations where a user may store managed
     data.
    :type allowed_data_storage_locations: list[str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataStorageLocation]
    :param allowed_inbound_data_transfer_sources:  Possible values include: "allApps",
     "managedApps", "none".
    :type allowed_inbound_data_transfer_sources: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataTransferLevel
    :param allowed_outbound_clipboard_sharing_level:  Possible values include: "allApps",
     "managedAppsWithPasteIn", "managedApps", "blocked".
    :type allowed_outbound_clipboard_sharing_level: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppClipboardSharingLevel
    :param allowed_outbound_data_transfer_destinations:  Possible values include: "allApps",
     "managedApps", "none".
    :type allowed_outbound_data_transfer_destinations: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataTransferLevel
    :param contact_sync_blocked: Indicates whether contacts can be synced to the user's device.
    :type contact_sync_blocked: bool
    :param data_backup_blocked: Indicates whether the backup of a managed app's data is blocked.
    :type data_backup_blocked: bool
    :param device_compliance_required: Indicates whether device compliance is required.
    :type device_compliance_required: bool
    :param disable_app_pin_if_device_pin_is_set: Indicates whether use of the app pin is required
     if the device pin is set.
    :type disable_app_pin_if_device_pin_is_set: bool
    :param fingerprint_blocked: Indicates whether use of the fingerprint reader is allowed in place
     of a pin if PinRequired is set to True.
    :type fingerprint_blocked: bool
    :param managed_browser:  Possible values include: "notConfigured", "microsoftEdge".
    :type managed_browser: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedBrowserType
    :param managed_browser_to_open_links_required: Indicates whether internet links should be
     opened in the managed browser app, or any custom browser specified by CustomBrowserProtocol
     (for iOS) or CustomBrowserPackageId/CustomBrowserDisplayName (for Android).
    :type managed_browser_to_open_links_required: bool
    :param maximum_pin_retries: Maximum number of incorrect pin retry attempts before the managed
     app is either blocked or wiped.
    :type maximum_pin_retries: int
    :param minimum_pin_length: Minimum pin length required for an app-level pin if PinRequired is
     set to True.
    :type minimum_pin_length: int
    :param minimum_required_app_version: Versions less than the specified version will block the
     managed app from accessing company data.
    :type minimum_required_app_version: str
    :param minimum_required_os_version: Versions less than the specified version will block the
     managed app from accessing company data.
    :type minimum_required_os_version: str
    :param minimum_warning_app_version: Versions less than the specified version will result in
     warning message on the managed app.
    :type minimum_warning_app_version: str
    :param minimum_warning_os_version: Versions less than the specified version will result in
     warning message on the managed app from accessing company data.
    :type minimum_warning_os_version: str
    :param organizational_credentials_required: Indicates whether organizational credentials are
     required for app use.
    :type organizational_credentials_required: bool
    :param period_before_pin_reset: TimePeriod before the all-level pin must be reset if
     PinRequired is set to True.
    :type period_before_pin_reset: ~datetime.timedelta
    :param period_offline_before_access_check: The period after which access is checked when the
     device is not connected to the internet.
    :type period_offline_before_access_check: ~datetime.timedelta
    :param period_offline_before_wipe_is_enforced: The amount of time an app is allowed to remain
     disconnected from the internet before all managed data it is wiped.
    :type period_offline_before_wipe_is_enforced: ~datetime.timedelta
    :param period_online_before_access_check: The period after which access is checked when the
     device is connected to the internet.
    :type period_online_before_access_check: ~datetime.timedelta
    :param pin_character_set:  Possible values include: "numeric", "alphanumericAndSymbol".
    :type pin_character_set: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppPinCharacterSet
    :param pin_required: Indicates whether an app-level pin is required.
    :type pin_required: bool
    :param print_blocked: Indicates whether printing is allowed from managed apps.
    :type print_blocked: bool
    :param save_as_blocked: Indicates whether users may use the 'Save As' menu item to save a copy
     of protected files.
    :type save_as_blocked: bool
    :param simple_pin_blocked: Indicates whether simplePin is blocked.
    :type simple_pin_blocked: bool
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_assigned: Indicates if the policy is deployed to any inclusion groups or not.
    :type is_assigned: bool
    :param assignments: Navigation property to list of inclusion and exclusion groups to which the
     policy is deployed.
    :type assignments:
     list[~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppPolicyAssignment]
    """

    _validation = {
        'maximum_pin_retries': {'maximum': 2147483647, 'minimum': -2147483648},
        'minimum_pin_length': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'version': {'key': 'version', 'type': 'str'},
        'allowed_data_storage_locations': {'key': 'allowedDataStorageLocations', 'type': '[str]'},
        'allowed_inbound_data_transfer_sources': {'key': 'allowedInboundDataTransferSources', 'type': 'str'},
        'allowed_outbound_clipboard_sharing_level': {'key': 'allowedOutboundClipboardSharingLevel', 'type': 'str'},
        'allowed_outbound_data_transfer_destinations': {'key': 'allowedOutboundDataTransferDestinations', 'type': 'str'},
        'contact_sync_blocked': {'key': 'contactSyncBlocked', 'type': 'bool'},
        'data_backup_blocked': {'key': 'dataBackupBlocked', 'type': 'bool'},
        'device_compliance_required': {'key': 'deviceComplianceRequired', 'type': 'bool'},
        'disable_app_pin_if_device_pin_is_set': {'key': 'disableAppPinIfDevicePinIsSet', 'type': 'bool'},
        'fingerprint_blocked': {'key': 'fingerprintBlocked', 'type': 'bool'},
        'managed_browser': {'key': 'managedBrowser', 'type': 'str'},
        'managed_browser_to_open_links_required': {'key': 'managedBrowserToOpenLinksRequired', 'type': 'bool'},
        'maximum_pin_retries': {'key': 'maximumPinRetries', 'type': 'int'},
        'minimum_pin_length': {'key': 'minimumPinLength', 'type': 'int'},
        'minimum_required_app_version': {'key': 'minimumRequiredAppVersion', 'type': 'str'},
        'minimum_required_os_version': {'key': 'minimumRequiredOsVersion', 'type': 'str'},
        'minimum_warning_app_version': {'key': 'minimumWarningAppVersion', 'type': 'str'},
        'minimum_warning_os_version': {'key': 'minimumWarningOsVersion', 'type': 'str'},
        'organizational_credentials_required': {'key': 'organizationalCredentialsRequired', 'type': 'bool'},
        'period_before_pin_reset': {'key': 'periodBeforePinReset', 'type': 'duration'},
        'period_offline_before_access_check': {'key': 'periodOfflineBeforeAccessCheck', 'type': 'duration'},
        'period_offline_before_wipe_is_enforced': {'key': 'periodOfflineBeforeWipeIsEnforced', 'type': 'duration'},
        'period_online_before_access_check': {'key': 'periodOnlineBeforeAccessCheck', 'type': 'duration'},
        'pin_character_set': {'key': 'pinCharacterSet', 'type': 'str'},
        'pin_required': {'key': 'pinRequired', 'type': 'bool'},
        'print_blocked': {'key': 'printBlocked', 'type': 'bool'},
        'save_as_blocked': {'key': 'saveAsBlocked', 'type': 'bool'},
        'simple_pin_blocked': {'key': 'simplePinBlocked', 'type': 'bool'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_assigned': {'key': 'isAssigned', 'type': 'bool'},
        'assignments': {'key': 'assignments', 'type': '[MicrosoftGraphTargetedManagedAppPolicyAssignment]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTargetedManagedAppProtection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_assigned = kwargs.get('is_assigned', None)
        self.assignments = kwargs.get('assignments', None)


class MicrosoftGraphAndroidManagedAppProtection(MicrosoftGraphTargetedManagedAppProtection):
    """Policy used to configure detailed management settings targeted to specific security groups and for a specified set of apps on an Android device.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    :param created_date_time: The date and time the policy was created.
    :type created_date_time: ~datetime.datetime
    :param description: The policy's description.
    :type description: str
    :param display_name: Policy display name.
    :type display_name: str
    :param last_modified_date_time: Last time the policy was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param version: Version of the entity.
    :type version: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allowed_data_storage_locations: Data storage locations where a user may store managed
     data.
    :type allowed_data_storage_locations: list[str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataStorageLocation]
    :param allowed_inbound_data_transfer_sources:  Possible values include: "allApps",
     "managedApps", "none".
    :type allowed_inbound_data_transfer_sources: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataTransferLevel
    :param allowed_outbound_clipboard_sharing_level:  Possible values include: "allApps",
     "managedAppsWithPasteIn", "managedApps", "blocked".
    :type allowed_outbound_clipboard_sharing_level: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppClipboardSharingLevel
    :param allowed_outbound_data_transfer_destinations:  Possible values include: "allApps",
     "managedApps", "none".
    :type allowed_outbound_data_transfer_destinations: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataTransferLevel
    :param contact_sync_blocked: Indicates whether contacts can be synced to the user's device.
    :type contact_sync_blocked: bool
    :param data_backup_blocked: Indicates whether the backup of a managed app's data is blocked.
    :type data_backup_blocked: bool
    :param device_compliance_required: Indicates whether device compliance is required.
    :type device_compliance_required: bool
    :param disable_app_pin_if_device_pin_is_set: Indicates whether use of the app pin is required
     if the device pin is set.
    :type disable_app_pin_if_device_pin_is_set: bool
    :param fingerprint_blocked: Indicates whether use of the fingerprint reader is allowed in place
     of a pin if PinRequired is set to True.
    :type fingerprint_blocked: bool
    :param managed_browser:  Possible values include: "notConfigured", "microsoftEdge".
    :type managed_browser: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedBrowserType
    :param managed_browser_to_open_links_required: Indicates whether internet links should be
     opened in the managed browser app, or any custom browser specified by CustomBrowserProtocol
     (for iOS) or CustomBrowserPackageId/CustomBrowserDisplayName (for Android).
    :type managed_browser_to_open_links_required: bool
    :param maximum_pin_retries: Maximum number of incorrect pin retry attempts before the managed
     app is either blocked or wiped.
    :type maximum_pin_retries: int
    :param minimum_pin_length: Minimum pin length required for an app-level pin if PinRequired is
     set to True.
    :type minimum_pin_length: int
    :param minimum_required_app_version: Versions less than the specified version will block the
     managed app from accessing company data.
    :type minimum_required_app_version: str
    :param minimum_required_os_version: Versions less than the specified version will block the
     managed app from accessing company data.
    :type minimum_required_os_version: str
    :param minimum_warning_app_version: Versions less than the specified version will result in
     warning message on the managed app.
    :type minimum_warning_app_version: str
    :param minimum_warning_os_version: Versions less than the specified version will result in
     warning message on the managed app from accessing company data.
    :type minimum_warning_os_version: str
    :param organizational_credentials_required: Indicates whether organizational credentials are
     required for app use.
    :type organizational_credentials_required: bool
    :param period_before_pin_reset: TimePeriod before the all-level pin must be reset if
     PinRequired is set to True.
    :type period_before_pin_reset: ~datetime.timedelta
    :param period_offline_before_access_check: The period after which access is checked when the
     device is not connected to the internet.
    :type period_offline_before_access_check: ~datetime.timedelta
    :param period_offline_before_wipe_is_enforced: The amount of time an app is allowed to remain
     disconnected from the internet before all managed data it is wiped.
    :type period_offline_before_wipe_is_enforced: ~datetime.timedelta
    :param period_online_before_access_check: The period after which access is checked when the
     device is connected to the internet.
    :type period_online_before_access_check: ~datetime.timedelta
    :param pin_character_set:  Possible values include: "numeric", "alphanumericAndSymbol".
    :type pin_character_set: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppPinCharacterSet
    :param pin_required: Indicates whether an app-level pin is required.
    :type pin_required: bool
    :param print_blocked: Indicates whether printing is allowed from managed apps.
    :type print_blocked: bool
    :param save_as_blocked: Indicates whether users may use the 'Save As' menu item to save a copy
     of protected files.
    :type save_as_blocked: bool
    :param simple_pin_blocked: Indicates whether simplePin is blocked.
    :type simple_pin_blocked: bool
    :param is_assigned: Indicates if the policy is deployed to any inclusion groups or not.
    :type is_assigned: bool
    :param assignments: Navigation property to list of inclusion and exclusion groups to which the
     policy is deployed.
    :type assignments:
     list[~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppPolicyAssignment]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param custom_browser_display_name: Friendly name of the preferred custom browser to open
     weblink on Android. When this property is configured, ManagedBrowserToOpenLinksRequired should
     be true.
    :type custom_browser_display_name: str
    :param custom_browser_package_id: Unique identifier of the preferred custom browser to open
     weblink on Android. When this property is configured, ManagedBrowserToOpenLinksRequired should
     be true.
    :type custom_browser_package_id: str
    :param deployed_app_count: Count of apps to which the current policy is deployed.
    :type deployed_app_count: int
    :param disable_app_encryption_if_device_encryption_is_enabled: When this setting is enabled,
     app level encryption is disabled if device level encryption is enabled.
    :type disable_app_encryption_if_device_encryption_is_enabled: bool
    :param encrypt_app_data: Indicates whether application data for managed apps should be
     encrypted.
    :type encrypt_app_data: bool
    :param minimum_required_patch_version: Define the oldest required Android security patch level
     a user can have to gain secure access to the app.
    :type minimum_required_patch_version: str
    :param minimum_warning_patch_version: Define the oldest recommended Android security patch
     level a user can have for secure access to the app.
    :type minimum_warning_patch_version: str
    :param screen_capture_blocked: Indicates whether a managed user can take screen captures of
     managed apps.
    :type screen_capture_blocked: bool
    :param apps: List of apps to which the policy is deployed.
    :type apps: list[~devices_corporate_management.models.MicrosoftGraphManagedMobileApp]
    :param deployment_summary: The ManagedAppEntity is the base entity type for all other entity
     types under app management workflow.
    :type deployment_summary:
     ~devices_corporate_management.models.MicrosoftGraphManagedAppPolicyDeploymentSummary
    """

    _validation = {
        'maximum_pin_retries': {'maximum': 2147483647, 'minimum': -2147483648},
        'minimum_pin_length': {'maximum': 2147483647, 'minimum': -2147483648},
        'deployed_app_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'version': {'key': 'version', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'allowed_data_storage_locations': {'key': 'allowedDataStorageLocations', 'type': '[str]'},
        'allowed_inbound_data_transfer_sources': {'key': 'allowedInboundDataTransferSources', 'type': 'str'},
        'allowed_outbound_clipboard_sharing_level': {'key': 'allowedOutboundClipboardSharingLevel', 'type': 'str'},
        'allowed_outbound_data_transfer_destinations': {'key': 'allowedOutboundDataTransferDestinations', 'type': 'str'},
        'contact_sync_blocked': {'key': 'contactSyncBlocked', 'type': 'bool'},
        'data_backup_blocked': {'key': 'dataBackupBlocked', 'type': 'bool'},
        'device_compliance_required': {'key': 'deviceComplianceRequired', 'type': 'bool'},
        'disable_app_pin_if_device_pin_is_set': {'key': 'disableAppPinIfDevicePinIsSet', 'type': 'bool'},
        'fingerprint_blocked': {'key': 'fingerprintBlocked', 'type': 'bool'},
        'managed_browser': {'key': 'managedBrowser', 'type': 'str'},
        'managed_browser_to_open_links_required': {'key': 'managedBrowserToOpenLinksRequired', 'type': 'bool'},
        'maximum_pin_retries': {'key': 'maximumPinRetries', 'type': 'int'},
        'minimum_pin_length': {'key': 'minimumPinLength', 'type': 'int'},
        'minimum_required_app_version': {'key': 'minimumRequiredAppVersion', 'type': 'str'},
        'minimum_required_os_version': {'key': 'minimumRequiredOsVersion', 'type': 'str'},
        'minimum_warning_app_version': {'key': 'minimumWarningAppVersion', 'type': 'str'},
        'minimum_warning_os_version': {'key': 'minimumWarningOsVersion', 'type': 'str'},
        'organizational_credentials_required': {'key': 'organizationalCredentialsRequired', 'type': 'bool'},
        'period_before_pin_reset': {'key': 'periodBeforePinReset', 'type': 'duration'},
        'period_offline_before_access_check': {'key': 'periodOfflineBeforeAccessCheck', 'type': 'duration'},
        'period_offline_before_wipe_is_enforced': {'key': 'periodOfflineBeforeWipeIsEnforced', 'type': 'duration'},
        'period_online_before_access_check': {'key': 'periodOnlineBeforeAccessCheck', 'type': 'duration'},
        'pin_character_set': {'key': 'pinCharacterSet', 'type': 'str'},
        'pin_required': {'key': 'pinRequired', 'type': 'bool'},
        'print_blocked': {'key': 'printBlocked', 'type': 'bool'},
        'save_as_blocked': {'key': 'saveAsBlocked', 'type': 'bool'},
        'simple_pin_blocked': {'key': 'simplePinBlocked', 'type': 'bool'},
        'is_assigned': {'key': 'isAssigned', 'type': 'bool'},
        'assignments': {'key': 'assignments', 'type': '[MicrosoftGraphTargetedManagedAppPolicyAssignment]'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'custom_browser_display_name': {'key': 'customBrowserDisplayName', 'type': 'str'},
        'custom_browser_package_id': {'key': 'customBrowserPackageId', 'type': 'str'},
        'deployed_app_count': {'key': 'deployedAppCount', 'type': 'int'},
        'disable_app_encryption_if_device_encryption_is_enabled': {'key': 'disableAppEncryptionIfDeviceEncryptionIsEnabled', 'type': 'bool'},
        'encrypt_app_data': {'key': 'encryptAppData', 'type': 'bool'},
        'minimum_required_patch_version': {'key': 'minimumRequiredPatchVersion', 'type': 'str'},
        'minimum_warning_patch_version': {'key': 'minimumWarningPatchVersion', 'type': 'str'},
        'screen_capture_blocked': {'key': 'screenCaptureBlocked', 'type': 'bool'},
        'apps': {'key': 'apps', 'type': '[MicrosoftGraphManagedMobileApp]'},
        'deployment_summary': {'key': 'deploymentSummary', 'type': 'MicrosoftGraphManagedAppPolicyDeploymentSummary'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAndroidManagedAppProtection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.custom_browser_display_name = kwargs.get('custom_browser_display_name', None)
        self.custom_browser_package_id = kwargs.get('custom_browser_package_id', None)
        self.deployed_app_count = kwargs.get('deployed_app_count', None)
        self.disable_app_encryption_if_device_encryption_is_enabled = kwargs.get('disable_app_encryption_if_device_encryption_is_enabled', None)
        self.encrypt_app_data = kwargs.get('encrypt_app_data', None)
        self.minimum_required_patch_version = kwargs.get('minimum_required_patch_version', None)
        self.minimum_warning_patch_version = kwargs.get('minimum_warning_patch_version', None)
        self.screen_capture_blocked = kwargs.get('screen_capture_blocked', None)
        self.apps = kwargs.get('apps', None)
        self.deployment_summary = kwargs.get('deployment_summary', None)


class MicrosoftGraphConfigurationManagerClientEnabledFeatures(msrest.serialization.Model):
    """configuration Manager client enabled features.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param compliance_policy: Whether compliance policy is managed by Intune.
    :type compliance_policy: bool
    :param device_configuration: Whether device configuration is managed by Intune.
    :type device_configuration: bool
    :param inventory: Whether inventory is managed by Intune.
    :type inventory: bool
    :param modern_apps: Whether modern application is managed by Intune.
    :type modern_apps: bool
    :param resource_access: Whether resource access is managed by Intune.
    :type resource_access: bool
    :param windows_update_for_business: Whether Windows Update for Business is managed by Intune.
    :type windows_update_for_business: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'compliance_policy': {'key': 'compliancePolicy', 'type': 'bool'},
        'device_configuration': {'key': 'deviceConfiguration', 'type': 'bool'},
        'inventory': {'key': 'inventory', 'type': 'bool'},
        'modern_apps': {'key': 'modernApps', 'type': 'bool'},
        'resource_access': {'key': 'resourceAccess', 'type': 'bool'},
        'windows_update_for_business': {'key': 'windowsUpdateForBusiness', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConfigurationManagerClientEnabledFeatures, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.compliance_policy = kwargs.get('compliance_policy', None)
        self.device_configuration = kwargs.get('device_configuration', None)
        self.inventory = kwargs.get('inventory', None)
        self.modern_apps = kwargs.get('modern_apps', None)
        self.resource_access = kwargs.get('resource_access', None)
        self.windows_update_for_business = kwargs.get('windows_update_for_business', None)


class MicrosoftGraphDefaultManagedAppProtection(MicrosoftGraphManagedAppProtection):
    """Policy used to configure detailed management settings for a specified set of apps for all users not targeted by a TargetedManagedAppProtection Policy.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: The date and time the policy was created.
    :type created_date_time: ~datetime.datetime
    :param description: The policy's description.
    :type description: str
    :param display_name: Policy display name.
    :type display_name: str
    :param last_modified_date_time: Last time the policy was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param version: Version of the entity.
    :type version: str
    :param allowed_data_storage_locations: Data storage locations where a user may store managed
     data.
    :type allowed_data_storage_locations: list[str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataStorageLocation]
    :param allowed_inbound_data_transfer_sources:  Possible values include: "allApps",
     "managedApps", "none".
    :type allowed_inbound_data_transfer_sources: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataTransferLevel
    :param allowed_outbound_clipboard_sharing_level:  Possible values include: "allApps",
     "managedAppsWithPasteIn", "managedApps", "blocked".
    :type allowed_outbound_clipboard_sharing_level: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppClipboardSharingLevel
    :param allowed_outbound_data_transfer_destinations:  Possible values include: "allApps",
     "managedApps", "none".
    :type allowed_outbound_data_transfer_destinations: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataTransferLevel
    :param contact_sync_blocked: Indicates whether contacts can be synced to the user's device.
    :type contact_sync_blocked: bool
    :param data_backup_blocked: Indicates whether the backup of a managed app's data is blocked.
    :type data_backup_blocked: bool
    :param device_compliance_required: Indicates whether device compliance is required.
    :type device_compliance_required: bool
    :param disable_app_pin_if_device_pin_is_set: Indicates whether use of the app pin is required
     if the device pin is set.
    :type disable_app_pin_if_device_pin_is_set: bool
    :param fingerprint_blocked: Indicates whether use of the fingerprint reader is allowed in place
     of a pin if PinRequired is set to True.
    :type fingerprint_blocked: bool
    :param managed_browser:  Possible values include: "notConfigured", "microsoftEdge".
    :type managed_browser: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedBrowserType
    :param managed_browser_to_open_links_required: Indicates whether internet links should be
     opened in the managed browser app, or any custom browser specified by CustomBrowserProtocol
     (for iOS) or CustomBrowserPackageId/CustomBrowserDisplayName (for Android).
    :type managed_browser_to_open_links_required: bool
    :param maximum_pin_retries: Maximum number of incorrect pin retry attempts before the managed
     app is either blocked or wiped.
    :type maximum_pin_retries: int
    :param minimum_pin_length: Minimum pin length required for an app-level pin if PinRequired is
     set to True.
    :type minimum_pin_length: int
    :param minimum_required_app_version: Versions less than the specified version will block the
     managed app from accessing company data.
    :type minimum_required_app_version: str
    :param minimum_required_os_version: Versions less than the specified version will block the
     managed app from accessing company data.
    :type minimum_required_os_version: str
    :param minimum_warning_app_version: Versions less than the specified version will result in
     warning message on the managed app.
    :type minimum_warning_app_version: str
    :param minimum_warning_os_version: Versions less than the specified version will result in
     warning message on the managed app from accessing company data.
    :type minimum_warning_os_version: str
    :param organizational_credentials_required: Indicates whether organizational credentials are
     required for app use.
    :type organizational_credentials_required: bool
    :param period_before_pin_reset: TimePeriod before the all-level pin must be reset if
     PinRequired is set to True.
    :type period_before_pin_reset: ~datetime.timedelta
    :param period_offline_before_access_check: The period after which access is checked when the
     device is not connected to the internet.
    :type period_offline_before_access_check: ~datetime.timedelta
    :param period_offline_before_wipe_is_enforced: The amount of time an app is allowed to remain
     disconnected from the internet before all managed data it is wiped.
    :type period_offline_before_wipe_is_enforced: ~datetime.timedelta
    :param period_online_before_access_check: The period after which access is checked when the
     device is connected to the internet.
    :type period_online_before_access_check: ~datetime.timedelta
    :param pin_character_set:  Possible values include: "numeric", "alphanumericAndSymbol".
    :type pin_character_set: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppPinCharacterSet
    :param pin_required: Indicates whether an app-level pin is required.
    :type pin_required: bool
    :param print_blocked: Indicates whether printing is allowed from managed apps.
    :type print_blocked: bool
    :param save_as_blocked: Indicates whether users may use the 'Save As' menu item to save a copy
     of protected files.
    :type save_as_blocked: bool
    :param simple_pin_blocked: Indicates whether simplePin is blocked.
    :type simple_pin_blocked: bool
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_data_encryption_type:  Possible values include: "useDeviceSettings",
     "afterDeviceRestart", "whenDeviceLockedExceptOpenFiles", "whenDeviceLocked".
    :type app_data_encryption_type: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataEncryptionType
    :param custom_settings: A set of string key and string value pairs to be sent to the affected
     users, unalterned by this service.
    :type custom_settings: list[~devices_corporate_management.models.MicrosoftGraphKeyValuePair]
    :param deployed_app_count: Count of apps to which the current policy is deployed.
    :type deployed_app_count: int
    :param disable_app_encryption_if_device_encryption_is_enabled: When this setting is enabled,
     app level encryption is disabled if device level encryption is enabled. (Android only).
    :type disable_app_encryption_if_device_encryption_is_enabled: bool
    :param encrypt_app_data: Indicates whether managed-app data should be encrypted. (Android
     only).
    :type encrypt_app_data: bool
    :param face_id_blocked: Indicates whether use of the FaceID is allowed in place of a pin if
     PinRequired is set to True. (iOS Only).
    :type face_id_blocked: bool
    :param minimum_required_patch_version: Define the oldest required Android security patch level
     a user can have to gain secure access to the app. (Android only).
    :type minimum_required_patch_version: str
    :param minimum_required_sdk_version: Versions less than the specified version will block the
     managed app from accessing company data. (iOS Only).
    :type minimum_required_sdk_version: str
    :param minimum_warning_patch_version: Define the oldest recommended Android security patch
     level a user can have for secure access to the app. (Android only).
    :type minimum_warning_patch_version: str
    :param screen_capture_blocked: Indicates whether screen capture is blocked. (Android only).
    :type screen_capture_blocked: bool
    :param apps: List of apps to which the policy is deployed.
    :type apps: list[~devices_corporate_management.models.MicrosoftGraphManagedMobileApp]
    :param deployment_summary: The ManagedAppEntity is the base entity type for all other entity
     types under app management workflow.
    :type deployment_summary:
     ~devices_corporate_management.models.MicrosoftGraphManagedAppPolicyDeploymentSummary
    """

    _validation = {
        'maximum_pin_retries': {'maximum': 2147483647, 'minimum': -2147483648},
        'minimum_pin_length': {'maximum': 2147483647, 'minimum': -2147483648},
        'deployed_app_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'version': {'key': 'version', 'type': 'str'},
        'allowed_data_storage_locations': {'key': 'allowedDataStorageLocations', 'type': '[str]'},
        'allowed_inbound_data_transfer_sources': {'key': 'allowedInboundDataTransferSources', 'type': 'str'},
        'allowed_outbound_clipboard_sharing_level': {'key': 'allowedOutboundClipboardSharingLevel', 'type': 'str'},
        'allowed_outbound_data_transfer_destinations': {'key': 'allowedOutboundDataTransferDestinations', 'type': 'str'},
        'contact_sync_blocked': {'key': 'contactSyncBlocked', 'type': 'bool'},
        'data_backup_blocked': {'key': 'dataBackupBlocked', 'type': 'bool'},
        'device_compliance_required': {'key': 'deviceComplianceRequired', 'type': 'bool'},
        'disable_app_pin_if_device_pin_is_set': {'key': 'disableAppPinIfDevicePinIsSet', 'type': 'bool'},
        'fingerprint_blocked': {'key': 'fingerprintBlocked', 'type': 'bool'},
        'managed_browser': {'key': 'managedBrowser', 'type': 'str'},
        'managed_browser_to_open_links_required': {'key': 'managedBrowserToOpenLinksRequired', 'type': 'bool'},
        'maximum_pin_retries': {'key': 'maximumPinRetries', 'type': 'int'},
        'minimum_pin_length': {'key': 'minimumPinLength', 'type': 'int'},
        'minimum_required_app_version': {'key': 'minimumRequiredAppVersion', 'type': 'str'},
        'minimum_required_os_version': {'key': 'minimumRequiredOsVersion', 'type': 'str'},
        'minimum_warning_app_version': {'key': 'minimumWarningAppVersion', 'type': 'str'},
        'minimum_warning_os_version': {'key': 'minimumWarningOsVersion', 'type': 'str'},
        'organizational_credentials_required': {'key': 'organizationalCredentialsRequired', 'type': 'bool'},
        'period_before_pin_reset': {'key': 'periodBeforePinReset', 'type': 'duration'},
        'period_offline_before_access_check': {'key': 'periodOfflineBeforeAccessCheck', 'type': 'duration'},
        'period_offline_before_wipe_is_enforced': {'key': 'periodOfflineBeforeWipeIsEnforced', 'type': 'duration'},
        'period_online_before_access_check': {'key': 'periodOnlineBeforeAccessCheck', 'type': 'duration'},
        'pin_character_set': {'key': 'pinCharacterSet', 'type': 'str'},
        'pin_required': {'key': 'pinRequired', 'type': 'bool'},
        'print_blocked': {'key': 'printBlocked', 'type': 'bool'},
        'save_as_blocked': {'key': 'saveAsBlocked', 'type': 'bool'},
        'simple_pin_blocked': {'key': 'simplePinBlocked', 'type': 'bool'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_data_encryption_type': {'key': 'appDataEncryptionType', 'type': 'str'},
        'custom_settings': {'key': 'customSettings', 'type': '[MicrosoftGraphKeyValuePair]'},
        'deployed_app_count': {'key': 'deployedAppCount', 'type': 'int'},
        'disable_app_encryption_if_device_encryption_is_enabled': {'key': 'disableAppEncryptionIfDeviceEncryptionIsEnabled', 'type': 'bool'},
        'encrypt_app_data': {'key': 'encryptAppData', 'type': 'bool'},
        'face_id_blocked': {'key': 'faceIdBlocked', 'type': 'bool'},
        'minimum_required_patch_version': {'key': 'minimumRequiredPatchVersion', 'type': 'str'},
        'minimum_required_sdk_version': {'key': 'minimumRequiredSdkVersion', 'type': 'str'},
        'minimum_warning_patch_version': {'key': 'minimumWarningPatchVersion', 'type': 'str'},
        'screen_capture_blocked': {'key': 'screenCaptureBlocked', 'type': 'bool'},
        'apps': {'key': 'apps', 'type': '[MicrosoftGraphManagedMobileApp]'},
        'deployment_summary': {'key': 'deploymentSummary', 'type': 'MicrosoftGraphManagedAppPolicyDeploymentSummary'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDefaultManagedAppProtection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_data_encryption_type = kwargs.get('app_data_encryption_type', None)
        self.custom_settings = kwargs.get('custom_settings', None)
        self.deployed_app_count = kwargs.get('deployed_app_count', None)
        self.disable_app_encryption_if_device_encryption_is_enabled = kwargs.get('disable_app_encryption_if_device_encryption_is_enabled', None)
        self.encrypt_app_data = kwargs.get('encrypt_app_data', None)
        self.face_id_blocked = kwargs.get('face_id_blocked', None)
        self.minimum_required_patch_version = kwargs.get('minimum_required_patch_version', None)
        self.minimum_required_sdk_version = kwargs.get('minimum_required_sdk_version', None)
        self.minimum_warning_patch_version = kwargs.get('minimum_warning_patch_version', None)
        self.screen_capture_blocked = kwargs.get('screen_capture_blocked', None)
        self.apps = kwargs.get('apps', None)
        self.deployment_summary = kwargs.get('deployment_summary', None)


class MicrosoftGraphDeviceActionResult(msrest.serialization.Model):
    """Device action result.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param action_name: Action name.
    :type action_name: str
    :param action_state:  Possible values include: "none", "pending", "canceled", "active", "done",
     "failed", "notSupported".
    :type action_state: str or ~devices_corporate_management.models.MicrosoftGraphActionState
    :param last_updated_date_time: Time the action state was last updated.
    :type last_updated_date_time: ~datetime.datetime
    :param start_date_time: Time the action was initiated.
    :type start_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'action_name': {'key': 'actionName', 'type': 'str'},
        'action_state': {'key': 'actionState', 'type': 'str'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceActionResult, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.action_name = kwargs.get('action_name', None)
        self.action_state = kwargs.get('action_state', None)
        self.last_updated_date_time = kwargs.get('last_updated_date_time', None)
        self.start_date_time = kwargs.get('start_date_time', None)


class MicrosoftGraphDeviceAppManagement(MicrosoftGraphEntity):
    """Singleton entity that acts as a container for all device app management functionality.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param is_enabled_for_microsoft_store_for_business: Whether the account is enabled for syncing
     applications from the Microsoft Store for Business.
    :type is_enabled_for_microsoft_store_for_business: bool
    :param microsoft_store_for_business_language: The locale information used to sync applications
     from the Microsoft Store for Business. Cultures that are specific to a country/region. The
     names of these cultures follow RFC 4646 (Windows Vista and later). The format is
     -<country/regioncode2>, where  is a lowercase two-letter code derived from ISO 639-1 and
     <country/regioncode2> is an uppercase two-letter code derived from ISO 3166. For example, en-US
     for English (United States) is a specific culture.
    :type microsoft_store_for_business_language: str
    :param microsoft_store_for_business_last_completed_application_sync_time: The last time an
     application sync from the Microsoft Store for Business was completed.
    :type microsoft_store_for_business_last_completed_application_sync_time: ~datetime.datetime
    :param microsoft_store_for_business_last_successful_sync_date_time: The last time the apps from
     the Microsoft Store for Business were synced successfully for the account.
    :type microsoft_store_for_business_last_successful_sync_date_time: ~datetime.datetime
    :param managed_e_books: The Managed eBook.
    :type managed_e_books: list[~devices_corporate_management.models.MicrosoftGraphManagedEBook]
    :param mobile_app_categories: The mobile app categories.
    :type mobile_app_categories:
     list[~devices_corporate_management.models.MicrosoftGraphMobileAppCategory]
    :param mobile_app_configurations: The Managed Device Mobile Application Configurations.
    :type mobile_app_configurations:
     list[~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfiguration]
    :param mobile_apps: The mobile apps.
    :type mobile_apps: list[~devices_corporate_management.models.MicrosoftGraphMobileApp]
    :param vpp_tokens: List of Vpp tokens for this organization.
    :type vpp_tokens: list[~devices_corporate_management.models.MicrosoftGraphVppToken]
    :param android_managed_app_protections: Android managed app policies.
    :type android_managed_app_protections:
     list[~devices_corporate_management.models.MicrosoftGraphAndroidManagedAppProtection]
    :param default_managed_app_protections: Default managed app policies.
    :type default_managed_app_protections:
     list[~devices_corporate_management.models.MicrosoftGraphDefaultManagedAppProtection]
    :param ios_managed_app_protections: iOS managed app policies.
    :type ios_managed_app_protections:
     list[~devices_corporate_management.models.MicrosoftGraphIosManagedAppProtection]
    :param managed_app_policies: Managed app policies.
    :type managed_app_policies:
     list[~devices_corporate_management.models.MicrosoftGraphManagedAppPolicy]
    :param managed_app_registrations: The managed app registrations.
    :type managed_app_registrations:
     list[~devices_corporate_management.models.MicrosoftGraphManagedAppRegistration]
    :param managed_app_statuses: The managed app statuses.
    :type managed_app_statuses:
     list[~devices_corporate_management.models.MicrosoftGraphManagedAppStatus]
    :param mdm_windows_information_protection_policies: Windows information protection for apps
     running on devices which are MDM enrolled.
    :type mdm_windows_information_protection_policies:
     list[~devices_corporate_management.models.MicrosoftGraphMdmWindowsInformationProtectionPolicy]
    :param targeted_managed_app_configurations: Targeted managed app configurations.
    :type targeted_managed_app_configurations:
     list[~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppConfiguration]
    :param windows_information_protection_policies: Windows information protection for apps running
     on devices which are not MDM enrolled.
    :type windows_information_protection_policies:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionPolicy]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'is_enabled_for_microsoft_store_for_business': {'key': 'isEnabledForMicrosoftStoreForBusiness', 'type': 'bool'},
        'microsoft_store_for_business_language': {'key': 'microsoftStoreForBusinessLanguage', 'type': 'str'},
        'microsoft_store_for_business_last_completed_application_sync_time': {'key': 'microsoftStoreForBusinessLastCompletedApplicationSyncTime', 'type': 'iso-8601'},
        'microsoft_store_for_business_last_successful_sync_date_time': {'key': 'microsoftStoreForBusinessLastSuccessfulSyncDateTime', 'type': 'iso-8601'},
        'managed_e_books': {'key': 'managedEBooks', 'type': '[MicrosoftGraphManagedEBook]'},
        'mobile_app_categories': {'key': 'mobileAppCategories', 'type': '[MicrosoftGraphMobileAppCategory]'},
        'mobile_app_configurations': {'key': 'mobileAppConfigurations', 'type': '[MicrosoftGraphManagedDeviceMobileAppConfiguration]'},
        'mobile_apps': {'key': 'mobileApps', 'type': '[MicrosoftGraphMobileApp]'},
        'vpp_tokens': {'key': 'vppTokens', 'type': '[MicrosoftGraphVppToken]'},
        'android_managed_app_protections': {'key': 'androidManagedAppProtections', 'type': '[MicrosoftGraphAndroidManagedAppProtection]'},
        'default_managed_app_protections': {'key': 'defaultManagedAppProtections', 'type': '[MicrosoftGraphDefaultManagedAppProtection]'},
        'ios_managed_app_protections': {'key': 'iosManagedAppProtections', 'type': '[MicrosoftGraphIosManagedAppProtection]'},
        'managed_app_policies': {'key': 'managedAppPolicies', 'type': '[MicrosoftGraphManagedAppPolicy]'},
        'managed_app_registrations': {'key': 'managedAppRegistrations', 'type': '[MicrosoftGraphManagedAppRegistration]'},
        'managed_app_statuses': {'key': 'managedAppStatuses', 'type': '[MicrosoftGraphManagedAppStatus]'},
        'mdm_windows_information_protection_policies': {'key': 'mdmWindowsInformationProtectionPolicies', 'type': '[MicrosoftGraphMdmWindowsInformationProtectionPolicy]'},
        'targeted_managed_app_configurations': {'key': 'targetedManagedAppConfigurations', 'type': '[MicrosoftGraphTargetedManagedAppConfiguration]'},
        'windows_information_protection_policies': {'key': 'windowsInformationProtectionPolicies', 'type': '[MicrosoftGraphWindowsInformationProtectionPolicy]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceAppManagement, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.is_enabled_for_microsoft_store_for_business = kwargs.get('is_enabled_for_microsoft_store_for_business', None)
        self.microsoft_store_for_business_language = kwargs.get('microsoft_store_for_business_language', None)
        self.microsoft_store_for_business_last_completed_application_sync_time = kwargs.get('microsoft_store_for_business_last_completed_application_sync_time', None)
        self.microsoft_store_for_business_last_successful_sync_date_time = kwargs.get('microsoft_store_for_business_last_successful_sync_date_time', None)
        self.managed_e_books = kwargs.get('managed_e_books', None)
        self.mobile_app_categories = kwargs.get('mobile_app_categories', None)
        self.mobile_app_configurations = kwargs.get('mobile_app_configurations', None)
        self.mobile_apps = kwargs.get('mobile_apps', None)
        self.vpp_tokens = kwargs.get('vpp_tokens', None)
        self.android_managed_app_protections = kwargs.get('android_managed_app_protections', None)
        self.default_managed_app_protections = kwargs.get('default_managed_app_protections', None)
        self.ios_managed_app_protections = kwargs.get('ios_managed_app_protections', None)
        self.managed_app_policies = kwargs.get('managed_app_policies', None)
        self.managed_app_registrations = kwargs.get('managed_app_registrations', None)
        self.managed_app_statuses = kwargs.get('managed_app_statuses', None)
        self.mdm_windows_information_protection_policies = kwargs.get('mdm_windows_information_protection_policies', None)
        self.targeted_managed_app_configurations = kwargs.get('targeted_managed_app_configurations', None)
        self.windows_information_protection_policies = kwargs.get('windows_information_protection_policies', None)


class MicrosoftGraphDeviceCategory(MicrosoftGraphEntity):
    """Device categories provides a way to organize your devices. Using device categories, company administrators can define their own categories that make sense to their company. These categories can then be applied to a device in the Intune Azure console or selected by a user during device enrollment. You can filter reports and create dynamic Azure Active Directory device groups based on device categories.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param description: Optional description for the device category.
    :type description: str
    :param display_name: Display name for the device category.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceCategory, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)


class MicrosoftGraphDeviceCompliancePolicySettingState(msrest.serialization.Model):
    """Device Compilance Policy Setting State for a given device.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param current_value: Current value of setting on device.
    :type current_value: str
    :param error_code: Error code for the setting.
    :type error_code: long
    :param error_description: Error description.
    :type error_description: str
    :param instance_display_name: Name of setting instance that is being reported.
    :type instance_display_name: str
    :param setting: The setting that is being reported.
    :type setting: str
    :param setting_name: Localized/user friendly setting name that is being reported.
    :type setting_name: str
    :param sources: Contributing policies.
    :type sources: list[~devices_corporate_management.models.MicrosoftGraphSettingSource]
    :param state:  Possible values include: "unknown", "notApplicable", "compliant", "remediated",
     "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~devices_corporate_management.models.MicrosoftGraphComplianceStatus
    :param user_email: UserEmail.
    :type user_email: str
    :param user_id: UserId.
    :type user_id: str
    :param user_name: UserName.
    :type user_name: str
    :param user_principal_name: UserPrincipalName.
    :type user_principal_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'current_value': {'key': 'currentValue', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'long'},
        'error_description': {'key': 'errorDescription', 'type': 'str'},
        'instance_display_name': {'key': 'instanceDisplayName', 'type': 'str'},
        'setting': {'key': 'setting', 'type': 'str'},
        'setting_name': {'key': 'settingName', 'type': 'str'},
        'sources': {'key': 'sources', 'type': '[MicrosoftGraphSettingSource]'},
        'state': {'key': 'state', 'type': 'str'},
        'user_email': {'key': 'userEmail', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceCompliancePolicySettingState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.current_value = kwargs.get('current_value', None)
        self.error_code = kwargs.get('error_code', None)
        self.error_description = kwargs.get('error_description', None)
        self.instance_display_name = kwargs.get('instance_display_name', None)
        self.setting = kwargs.get('setting', None)
        self.setting_name = kwargs.get('setting_name', None)
        self.sources = kwargs.get('sources', None)
        self.state = kwargs.get('state', None)
        self.user_email = kwargs.get('user_email', None)
        self.user_id = kwargs.get('user_id', None)
        self.user_name = kwargs.get('user_name', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class MicrosoftGraphDeviceCompliancePolicyState(MicrosoftGraphEntity):
    """Device Compliance Policy State for a given device.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The name of the policy for this policyBase.
    :type display_name: str
    :param platform_type:  Possible values include: "android", "iOS", "macOS", "windowsPhone81",
     "windows81AndLater", "windows10AndLater", "androidWorkProfile", "all".
    :type platform_type: str or
     ~devices_corporate_management.models.MicrosoftGraphPolicyPlatformType
    :param setting_count: Count of how many setting a policy holds.
    :type setting_count: int
    :param setting_states:
    :type setting_states:
     list[~devices_corporate_management.models.MicrosoftGraphDeviceCompliancePolicySettingState]
    :param state:  Possible values include: "unknown", "notApplicable", "compliant", "remediated",
     "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~devices_corporate_management.models.MicrosoftGraphComplianceStatus
    :param version: The version of the policy.
    :type version: int
    """

    _validation = {
        'setting_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'version': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'platform_type': {'key': 'platformType', 'type': 'str'},
        'setting_count': {'key': 'settingCount', 'type': 'int'},
        'setting_states': {'key': 'settingStates', 'type': '[MicrosoftGraphDeviceCompliancePolicySettingState]'},
        'state': {'key': 'state', 'type': 'str'},
        'version': {'key': 'version', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceCompliancePolicyState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.platform_type = kwargs.get('platform_type', None)
        self.setting_count = kwargs.get('setting_count', None)
        self.setting_states = kwargs.get('setting_states', None)
        self.state = kwargs.get('state', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphDeviceConfigurationSettingState(msrest.serialization.Model):
    """Device Configuration Setting State for a given device.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param current_value: Current value of setting on device.
    :type current_value: str
    :param error_code: Error code for the setting.
    :type error_code: long
    :param error_description: Error description.
    :type error_description: str
    :param instance_display_name: Name of setting instance that is being reported.
    :type instance_display_name: str
    :param setting: The setting that is being reported.
    :type setting: str
    :param setting_name: Localized/user friendly setting name that is being reported.
    :type setting_name: str
    :param sources: Contributing policies.
    :type sources: list[~devices_corporate_management.models.MicrosoftGraphSettingSource]
    :param state:  Possible values include: "unknown", "notApplicable", "compliant", "remediated",
     "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~devices_corporate_management.models.MicrosoftGraphComplianceStatus
    :param user_email: UserEmail.
    :type user_email: str
    :param user_id: UserId.
    :type user_id: str
    :param user_name: UserName.
    :type user_name: str
    :param user_principal_name: UserPrincipalName.
    :type user_principal_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'current_value': {'key': 'currentValue', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'long'},
        'error_description': {'key': 'errorDescription', 'type': 'str'},
        'instance_display_name': {'key': 'instanceDisplayName', 'type': 'str'},
        'setting': {'key': 'setting', 'type': 'str'},
        'setting_name': {'key': 'settingName', 'type': 'str'},
        'sources': {'key': 'sources', 'type': '[MicrosoftGraphSettingSource]'},
        'state': {'key': 'state', 'type': 'str'},
        'user_email': {'key': 'userEmail', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceConfigurationSettingState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.current_value = kwargs.get('current_value', None)
        self.error_code = kwargs.get('error_code', None)
        self.error_description = kwargs.get('error_description', None)
        self.instance_display_name = kwargs.get('instance_display_name', None)
        self.setting = kwargs.get('setting', None)
        self.setting_name = kwargs.get('setting_name', None)
        self.sources = kwargs.get('sources', None)
        self.state = kwargs.get('state', None)
        self.user_email = kwargs.get('user_email', None)
        self.user_id = kwargs.get('user_id', None)
        self.user_name = kwargs.get('user_name', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class MicrosoftGraphDeviceConfigurationState(MicrosoftGraphEntity):
    """Device Configuration State for a given device.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The name of the policy for this policyBase.
    :type display_name: str
    :param platform_type:  Possible values include: "android", "iOS", "macOS", "windowsPhone81",
     "windows81AndLater", "windows10AndLater", "androidWorkProfile", "all".
    :type platform_type: str or
     ~devices_corporate_management.models.MicrosoftGraphPolicyPlatformType
    :param setting_count: Count of how many setting a policy holds.
    :type setting_count: int
    :param setting_states:
    :type setting_states:
     list[~devices_corporate_management.models.MicrosoftGraphDeviceConfigurationSettingState]
    :param state:  Possible values include: "unknown", "notApplicable", "compliant", "remediated",
     "nonCompliant", "error", "conflict", "notAssigned".
    :type state: str or ~devices_corporate_management.models.MicrosoftGraphComplianceStatus
    :param version: The version of the policy.
    :type version: int
    """

    _validation = {
        'setting_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'version': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'platform_type': {'key': 'platformType', 'type': 'str'},
        'setting_count': {'key': 'settingCount', 'type': 'int'},
        'setting_states': {'key': 'settingStates', 'type': '[MicrosoftGraphDeviceConfigurationSettingState]'},
        'state': {'key': 'state', 'type': 'str'},
        'version': {'key': 'version', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceConfigurationState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.platform_type = kwargs.get('platform_type', None)
        self.setting_count = kwargs.get('setting_count', None)
        self.setting_states = kwargs.get('setting_states', None)
        self.state = kwargs.get('state', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphDeviceHealthAttestationState(msrest.serialization.Model):
    """deviceHealthAttestationState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param attestation_identity_key: TWhen an Attestation Identity Key (AIK) is present on a
     device, it indicates that the device has an endorsement key (EK) certificate.
    :type attestation_identity_key: str
    :param bit_locker_status: On or Off of BitLocker Drive Encryption.
    :type bit_locker_status: str
    :param boot_app_security_version: The security version number of the Boot Application.
    :type boot_app_security_version: str
    :param boot_debugging: When bootDebugging is enabled, the device is used in development and
     testing.
    :type boot_debugging: str
    :param boot_manager_security_version: The security version number of the Boot Application.
    :type boot_manager_security_version: str
    :param boot_manager_version: The version of the Boot Manager.
    :type boot_manager_version: str
    :param boot_revision_list_info: The Boot Revision List that was loaded during initial boot on
     the attested device.
    :type boot_revision_list_info: str
    :param code_integrity: When code integrity is enabled, code execution is restricted to
     integrity verified code.
    :type code_integrity: str
    :param code_integrity_check_version: The version of the Boot Manager.
    :type code_integrity_check_version: str
    :param code_integrity_policy: The Code Integrity policy that is controlling the security of the
     boot environment.
    :type code_integrity_policy: str
    :param content_namespace_url: The DHA report version. (Namespace version).
    :type content_namespace_url: str
    :param content_version: The HealthAttestation state schema version.
    :type content_version: str
    :param data_excution_policy: DEP Policy defines a set of hardware and software technologies
     that perform additional checks on memory.
    :type data_excution_policy: str
    :param device_health_attestation_status: The DHA report version. (Namespace version).
    :type device_health_attestation_status: str
    :param early_launch_anti_malware_driver_protection: ELAM provides protection for the computers
     in your network when they start up.
    :type early_launch_anti_malware_driver_protection: str
    :param health_attestation_supported_status: This attribute indicates if DHA is supported for
     the device.
    :type health_attestation_supported_status: str
    :param health_status_mismatch_info: This attribute appears if DHA-Service detects an integrity
     issue.
    :type health_status_mismatch_info: str
    :param issued_date_time: The DateTime when device was evaluated or issued to MDM.
    :type issued_date_time: ~datetime.datetime
    :param last_update_date_time: The Timestamp of the last update.
    :type last_update_date_time: str
    :param operating_system_kernel_debugging: When operatingSystemKernelDebugging is enabled, the
     device is used in development and testing.
    :type operating_system_kernel_debugging: str
    :param operating_system_rev_list_info: The Operating System Revision List that was loaded
     during initial boot on the attested device.
    :type operating_system_rev_list_info: str
    :param pcr0: The measurement that is captured in PCR[0].
    :type pcr0: str
    :param pcr_hash_algorithm: Informational attribute that identifies the HASH algorithm that was
     used by TPM.
    :type pcr_hash_algorithm: str
    :param reset_count: The number of times a PC device has hibernated or resumed.
    :type reset_count: long
    :param restart_count: The number of times a PC device has rebooted.
    :type restart_count: long
    :param safe_mode: Safe mode is a troubleshooting option for Windows that starts your computer
     in a limited state.
    :type safe_mode: str
    :param secure_boot: When Secure Boot is enabled, the core components must have the correct
     cryptographic signatures.
    :type secure_boot: str
    :param secure_boot_configuration_policy_finger_print: Fingerprint of the Custom Secure Boot
     Configuration Policy.
    :type secure_boot_configuration_policy_finger_print: str
    :param test_signing: When test signing is allowed, the device does not enforce signature
     validation during boot.
    :type test_signing: str
    :param tpm_version: The security version number of the Boot Application.
    :type tpm_version: str
    :param virtual_secure_mode: VSM is a container that protects high value assets from a
     compromised kernel.
    :type virtual_secure_mode: str
    :param windows_pe: Operating system running with limited services that is used to prepare a
     computer for Windows.
    :type windows_pe: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'attestation_identity_key': {'key': 'attestationIdentityKey', 'type': 'str'},
        'bit_locker_status': {'key': 'bitLockerStatus', 'type': 'str'},
        'boot_app_security_version': {'key': 'bootAppSecurityVersion', 'type': 'str'},
        'boot_debugging': {'key': 'bootDebugging', 'type': 'str'},
        'boot_manager_security_version': {'key': 'bootManagerSecurityVersion', 'type': 'str'},
        'boot_manager_version': {'key': 'bootManagerVersion', 'type': 'str'},
        'boot_revision_list_info': {'key': 'bootRevisionListInfo', 'type': 'str'},
        'code_integrity': {'key': 'codeIntegrity', 'type': 'str'},
        'code_integrity_check_version': {'key': 'codeIntegrityCheckVersion', 'type': 'str'},
        'code_integrity_policy': {'key': 'codeIntegrityPolicy', 'type': 'str'},
        'content_namespace_url': {'key': 'contentNamespaceUrl', 'type': 'str'},
        'content_version': {'key': 'contentVersion', 'type': 'str'},
        'data_excution_policy': {'key': 'dataExcutionPolicy', 'type': 'str'},
        'device_health_attestation_status': {'key': 'deviceHealthAttestationStatus', 'type': 'str'},
        'early_launch_anti_malware_driver_protection': {'key': 'earlyLaunchAntiMalwareDriverProtection', 'type': 'str'},
        'health_attestation_supported_status': {'key': 'healthAttestationSupportedStatus', 'type': 'str'},
        'health_status_mismatch_info': {'key': 'healthStatusMismatchInfo', 'type': 'str'},
        'issued_date_time': {'key': 'issuedDateTime', 'type': 'iso-8601'},
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'str'},
        'operating_system_kernel_debugging': {'key': 'operatingSystemKernelDebugging', 'type': 'str'},
        'operating_system_rev_list_info': {'key': 'operatingSystemRevListInfo', 'type': 'str'},
        'pcr0': {'key': 'pcr0', 'type': 'str'},
        'pcr_hash_algorithm': {'key': 'pcrHashAlgorithm', 'type': 'str'},
        'reset_count': {'key': 'resetCount', 'type': 'long'},
        'restart_count': {'key': 'restartCount', 'type': 'long'},
        'safe_mode': {'key': 'safeMode', 'type': 'str'},
        'secure_boot': {'key': 'secureBoot', 'type': 'str'},
        'secure_boot_configuration_policy_finger_print': {'key': 'secureBootConfigurationPolicyFingerPrint', 'type': 'str'},
        'test_signing': {'key': 'testSigning', 'type': 'str'},
        'tpm_version': {'key': 'tpmVersion', 'type': 'str'},
        'virtual_secure_mode': {'key': 'virtualSecureMode', 'type': 'str'},
        'windows_pe': {'key': 'windowsPE', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceHealthAttestationState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.attestation_identity_key = kwargs.get('attestation_identity_key', None)
        self.bit_locker_status = kwargs.get('bit_locker_status', None)
        self.boot_app_security_version = kwargs.get('boot_app_security_version', None)
        self.boot_debugging = kwargs.get('boot_debugging', None)
        self.boot_manager_security_version = kwargs.get('boot_manager_security_version', None)
        self.boot_manager_version = kwargs.get('boot_manager_version', None)
        self.boot_revision_list_info = kwargs.get('boot_revision_list_info', None)
        self.code_integrity = kwargs.get('code_integrity', None)
        self.code_integrity_check_version = kwargs.get('code_integrity_check_version', None)
        self.code_integrity_policy = kwargs.get('code_integrity_policy', None)
        self.content_namespace_url = kwargs.get('content_namespace_url', None)
        self.content_version = kwargs.get('content_version', None)
        self.data_excution_policy = kwargs.get('data_excution_policy', None)
        self.device_health_attestation_status = kwargs.get('device_health_attestation_status', None)
        self.early_launch_anti_malware_driver_protection = kwargs.get('early_launch_anti_malware_driver_protection', None)
        self.health_attestation_supported_status = kwargs.get('health_attestation_supported_status', None)
        self.health_status_mismatch_info = kwargs.get('health_status_mismatch_info', None)
        self.issued_date_time = kwargs.get('issued_date_time', None)
        self.last_update_date_time = kwargs.get('last_update_date_time', None)
        self.operating_system_kernel_debugging = kwargs.get('operating_system_kernel_debugging', None)
        self.operating_system_rev_list_info = kwargs.get('operating_system_rev_list_info', None)
        self.pcr0 = kwargs.get('pcr0', None)
        self.pcr_hash_algorithm = kwargs.get('pcr_hash_algorithm', None)
        self.reset_count = kwargs.get('reset_count', None)
        self.restart_count = kwargs.get('restart_count', None)
        self.safe_mode = kwargs.get('safe_mode', None)
        self.secure_boot = kwargs.get('secure_boot', None)
        self.secure_boot_configuration_policy_finger_print = kwargs.get('secure_boot_configuration_policy_finger_print', None)
        self.test_signing = kwargs.get('test_signing', None)
        self.tpm_version = kwargs.get('tpm_version', None)
        self.virtual_secure_mode = kwargs.get('virtual_secure_mode', None)
        self.windows_pe = kwargs.get('windows_pe', None)


class MicrosoftGraphDeviceInstallState(MicrosoftGraphEntity):
    """Contains properties for the installation state for a device.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param device_id: Device Id.
    :type device_id: str
    :param device_name: Device name.
    :type device_name: str
    :param error_code: The error code for install failures.
    :type error_code: str
    :param install_state:  Possible values include: "notApplicable", "installed", "failed",
     "notInstalled", "uninstallFailed", "unknown".
    :type install_state: str or ~devices_corporate_management.models.MicrosoftGraphInstallState
    :param last_sync_date_time: Last sync date and time.
    :type last_sync_date_time: ~datetime.datetime
    :param os_description: OS Description.
    :type os_description: str
    :param os_version: OS Version.
    :type os_version: str
    :param user_name: Device User Name.
    :type user_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'device_name': {'key': 'deviceName', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'str'},
        'install_state': {'key': 'installState', 'type': 'str'},
        'last_sync_date_time': {'key': 'lastSyncDateTime', 'type': 'iso-8601'},
        'os_description': {'key': 'osDescription', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceInstallState, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.device_id = kwargs.get('device_id', None)
        self.device_name = kwargs.get('device_name', None)
        self.error_code = kwargs.get('error_code', None)
        self.install_state = kwargs.get('install_state', None)
        self.last_sync_date_time = kwargs.get('last_sync_date_time', None)
        self.os_description = kwargs.get('os_description', None)
        self.os_version = kwargs.get('os_version', None)
        self.user_name = kwargs.get('user_name', None)


class MicrosoftGraphDeviceManagementTroubleshootingEvent(MicrosoftGraphEntity):
    """Event representing an general failure.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param correlation_id: Id used for tracing the failure in the service.
    :type correlation_id: str
    :param event_date_time: Time when the event occurred .
    :type event_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'event_date_time': {'key': 'eventDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceManagementTroubleshootingEvent, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.correlation_id = kwargs.get('correlation_id', None)
        self.event_date_time = kwargs.get('event_date_time', None)


class MicrosoftGraphEBookInstallSummary(MicrosoftGraphEntity):
    """Contains properties for the installation summary of a book for a device.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param failed_device_count: Number of Devices that have failed to install this book.
    :type failed_device_count: int
    :param failed_user_count: Number of Users that have 1 or more device that failed to install
     this book.
    :type failed_user_count: int
    :param installed_device_count: Number of Devices that have successfully installed this book.
    :type installed_device_count: int
    :param installed_user_count: Number of Users whose devices have all succeeded to install this
     book.
    :type installed_user_count: int
    :param not_installed_device_count: Number of Devices that does not have this book installed.
    :type not_installed_device_count: int
    :param not_installed_user_count: Number of Users that did not install this book.
    :type not_installed_user_count: int
    """

    _validation = {
        'failed_device_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'failed_user_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'installed_device_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'installed_user_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'not_installed_device_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'not_installed_user_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'failed_device_count': {'key': 'failedDeviceCount', 'type': 'int'},
        'failed_user_count': {'key': 'failedUserCount', 'type': 'int'},
        'installed_device_count': {'key': 'installedDeviceCount', 'type': 'int'},
        'installed_user_count': {'key': 'installedUserCount', 'type': 'int'},
        'not_installed_device_count': {'key': 'notInstalledDeviceCount', 'type': 'int'},
        'not_installed_user_count': {'key': 'notInstalledUserCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEBookInstallSummary, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.failed_device_count = kwargs.get('failed_device_count', None)
        self.failed_user_count = kwargs.get('failed_user_count', None)
        self.installed_device_count = kwargs.get('installed_device_count', None)
        self.installed_user_count = kwargs.get('installed_user_count', None)
        self.not_installed_device_count = kwargs.get('not_installed_device_count', None)
        self.not_installed_user_count = kwargs.get('not_installed_user_count', None)


class MicrosoftGraphIosManagedAppProtection(MicrosoftGraphTargetedManagedAppProtection):
    """Policy used to configure detailed management settings targeted to specific security groups and for a specified set of apps on an iOS device.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    :param created_date_time: The date and time the policy was created.
    :type created_date_time: ~datetime.datetime
    :param description: The policy's description.
    :type description: str
    :param display_name: Policy display name.
    :type display_name: str
    :param last_modified_date_time: Last time the policy was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param version: Version of the entity.
    :type version: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param allowed_data_storage_locations: Data storage locations where a user may store managed
     data.
    :type allowed_data_storage_locations: list[str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataStorageLocation]
    :param allowed_inbound_data_transfer_sources:  Possible values include: "allApps",
     "managedApps", "none".
    :type allowed_inbound_data_transfer_sources: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataTransferLevel
    :param allowed_outbound_clipboard_sharing_level:  Possible values include: "allApps",
     "managedAppsWithPasteIn", "managedApps", "blocked".
    :type allowed_outbound_clipboard_sharing_level: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppClipboardSharingLevel
    :param allowed_outbound_data_transfer_destinations:  Possible values include: "allApps",
     "managedApps", "none".
    :type allowed_outbound_data_transfer_destinations: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataTransferLevel
    :param contact_sync_blocked: Indicates whether contacts can be synced to the user's device.
    :type contact_sync_blocked: bool
    :param data_backup_blocked: Indicates whether the backup of a managed app's data is blocked.
    :type data_backup_blocked: bool
    :param device_compliance_required: Indicates whether device compliance is required.
    :type device_compliance_required: bool
    :param disable_app_pin_if_device_pin_is_set: Indicates whether use of the app pin is required
     if the device pin is set.
    :type disable_app_pin_if_device_pin_is_set: bool
    :param fingerprint_blocked: Indicates whether use of the fingerprint reader is allowed in place
     of a pin if PinRequired is set to True.
    :type fingerprint_blocked: bool
    :param managed_browser:  Possible values include: "notConfigured", "microsoftEdge".
    :type managed_browser: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedBrowserType
    :param managed_browser_to_open_links_required: Indicates whether internet links should be
     opened in the managed browser app, or any custom browser specified by CustomBrowserProtocol
     (for iOS) or CustomBrowserPackageId/CustomBrowserDisplayName (for Android).
    :type managed_browser_to_open_links_required: bool
    :param maximum_pin_retries: Maximum number of incorrect pin retry attempts before the managed
     app is either blocked or wiped.
    :type maximum_pin_retries: int
    :param minimum_pin_length: Minimum pin length required for an app-level pin if PinRequired is
     set to True.
    :type minimum_pin_length: int
    :param minimum_required_app_version: Versions less than the specified version will block the
     managed app from accessing company data.
    :type minimum_required_app_version: str
    :param minimum_required_os_version: Versions less than the specified version will block the
     managed app from accessing company data.
    :type minimum_required_os_version: str
    :param minimum_warning_app_version: Versions less than the specified version will result in
     warning message on the managed app.
    :type minimum_warning_app_version: str
    :param minimum_warning_os_version: Versions less than the specified version will result in
     warning message on the managed app from accessing company data.
    :type minimum_warning_os_version: str
    :param organizational_credentials_required: Indicates whether organizational credentials are
     required for app use.
    :type organizational_credentials_required: bool
    :param period_before_pin_reset: TimePeriod before the all-level pin must be reset if
     PinRequired is set to True.
    :type period_before_pin_reset: ~datetime.timedelta
    :param period_offline_before_access_check: The period after which access is checked when the
     device is not connected to the internet.
    :type period_offline_before_access_check: ~datetime.timedelta
    :param period_offline_before_wipe_is_enforced: The amount of time an app is allowed to remain
     disconnected from the internet before all managed data it is wiped.
    :type period_offline_before_wipe_is_enforced: ~datetime.timedelta
    :param period_online_before_access_check: The period after which access is checked when the
     device is connected to the internet.
    :type period_online_before_access_check: ~datetime.timedelta
    :param pin_character_set:  Possible values include: "numeric", "alphanumericAndSymbol".
    :type pin_character_set: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppPinCharacterSet
    :param pin_required: Indicates whether an app-level pin is required.
    :type pin_required: bool
    :param print_blocked: Indicates whether printing is allowed from managed apps.
    :type print_blocked: bool
    :param save_as_blocked: Indicates whether users may use the 'Save As' menu item to save a copy
     of protected files.
    :type save_as_blocked: bool
    :param simple_pin_blocked: Indicates whether simplePin is blocked.
    :type simple_pin_blocked: bool
    :param is_assigned: Indicates if the policy is deployed to any inclusion groups or not.
    :type is_assigned: bool
    :param assignments: Navigation property to list of inclusion and exclusion groups to which the
     policy is deployed.
    :type assignments:
     list[~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppPolicyAssignment]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_data_encryption_type:  Possible values include: "useDeviceSettings",
     "afterDeviceRestart", "whenDeviceLockedExceptOpenFiles", "whenDeviceLocked".
    :type app_data_encryption_type: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppDataEncryptionType
    :param custom_browser_protocol: A custom browser protocol to open weblink on iOS. When this
     property is configured, ManagedBrowserToOpenLinksRequired should be true.
    :type custom_browser_protocol: str
    :param deployed_app_count: Count of apps to which the current policy is deployed.
    :type deployed_app_count: int
    :param face_id_blocked: Indicates whether use of the FaceID is allowed in place of a pin if
     PinRequired is set to True.
    :type face_id_blocked: bool
    :param minimum_required_sdk_version: Versions less than the specified version will block the
     managed app from accessing company data.
    :type minimum_required_sdk_version: str
    :param apps: List of apps to which the policy is deployed.
    :type apps: list[~devices_corporate_management.models.MicrosoftGraphManagedMobileApp]
    :param deployment_summary: The ManagedAppEntity is the base entity type for all other entity
     types under app management workflow.
    :type deployment_summary:
     ~devices_corporate_management.models.MicrosoftGraphManagedAppPolicyDeploymentSummary
    """

    _validation = {
        'maximum_pin_retries': {'maximum': 2147483647, 'minimum': -2147483648},
        'minimum_pin_length': {'maximum': 2147483647, 'minimum': -2147483648},
        'deployed_app_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'version': {'key': 'version', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'allowed_data_storage_locations': {'key': 'allowedDataStorageLocations', 'type': '[str]'},
        'allowed_inbound_data_transfer_sources': {'key': 'allowedInboundDataTransferSources', 'type': 'str'},
        'allowed_outbound_clipboard_sharing_level': {'key': 'allowedOutboundClipboardSharingLevel', 'type': 'str'},
        'allowed_outbound_data_transfer_destinations': {'key': 'allowedOutboundDataTransferDestinations', 'type': 'str'},
        'contact_sync_blocked': {'key': 'contactSyncBlocked', 'type': 'bool'},
        'data_backup_blocked': {'key': 'dataBackupBlocked', 'type': 'bool'},
        'device_compliance_required': {'key': 'deviceComplianceRequired', 'type': 'bool'},
        'disable_app_pin_if_device_pin_is_set': {'key': 'disableAppPinIfDevicePinIsSet', 'type': 'bool'},
        'fingerprint_blocked': {'key': 'fingerprintBlocked', 'type': 'bool'},
        'managed_browser': {'key': 'managedBrowser', 'type': 'str'},
        'managed_browser_to_open_links_required': {'key': 'managedBrowserToOpenLinksRequired', 'type': 'bool'},
        'maximum_pin_retries': {'key': 'maximumPinRetries', 'type': 'int'},
        'minimum_pin_length': {'key': 'minimumPinLength', 'type': 'int'},
        'minimum_required_app_version': {'key': 'minimumRequiredAppVersion', 'type': 'str'},
        'minimum_required_os_version': {'key': 'minimumRequiredOsVersion', 'type': 'str'},
        'minimum_warning_app_version': {'key': 'minimumWarningAppVersion', 'type': 'str'},
        'minimum_warning_os_version': {'key': 'minimumWarningOsVersion', 'type': 'str'},
        'organizational_credentials_required': {'key': 'organizationalCredentialsRequired', 'type': 'bool'},
        'period_before_pin_reset': {'key': 'periodBeforePinReset', 'type': 'duration'},
        'period_offline_before_access_check': {'key': 'periodOfflineBeforeAccessCheck', 'type': 'duration'},
        'period_offline_before_wipe_is_enforced': {'key': 'periodOfflineBeforeWipeIsEnforced', 'type': 'duration'},
        'period_online_before_access_check': {'key': 'periodOnlineBeforeAccessCheck', 'type': 'duration'},
        'pin_character_set': {'key': 'pinCharacterSet', 'type': 'str'},
        'pin_required': {'key': 'pinRequired', 'type': 'bool'},
        'print_blocked': {'key': 'printBlocked', 'type': 'bool'},
        'save_as_blocked': {'key': 'saveAsBlocked', 'type': 'bool'},
        'simple_pin_blocked': {'key': 'simplePinBlocked', 'type': 'bool'},
        'is_assigned': {'key': 'isAssigned', 'type': 'bool'},
        'assignments': {'key': 'assignments', 'type': '[MicrosoftGraphTargetedManagedAppPolicyAssignment]'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_data_encryption_type': {'key': 'appDataEncryptionType', 'type': 'str'},
        'custom_browser_protocol': {'key': 'customBrowserProtocol', 'type': 'str'},
        'deployed_app_count': {'key': 'deployedAppCount', 'type': 'int'},
        'face_id_blocked': {'key': 'faceIdBlocked', 'type': 'bool'},
        'minimum_required_sdk_version': {'key': 'minimumRequiredSdkVersion', 'type': 'str'},
        'apps': {'key': 'apps', 'type': '[MicrosoftGraphManagedMobileApp]'},
        'deployment_summary': {'key': 'deploymentSummary', 'type': 'MicrosoftGraphManagedAppPolicyDeploymentSummary'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphIosManagedAppProtection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_data_encryption_type = kwargs.get('app_data_encryption_type', None)
        self.custom_browser_protocol = kwargs.get('custom_browser_protocol', None)
        self.deployed_app_count = kwargs.get('deployed_app_count', None)
        self.face_id_blocked = kwargs.get('face_id_blocked', None)
        self.minimum_required_sdk_version = kwargs.get('minimum_required_sdk_version', None)
        self.apps = kwargs.get('apps', None)
        self.deployment_summary = kwargs.get('deployment_summary', None)


class MicrosoftGraphKeyValuePair(msrest.serialization.Model):
    """Key value pair for storing custom settings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Name for this key-value pair.
    :type name: str
    :param value: Value for this key-value pair.
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphKeyValuePair, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class MicrosoftGraphManagedAppConfiguration(MicrosoftGraphManagedAppPolicy):
    """Configuration used to deliver a set of custom settings as-is to apps for users to whom the configuration is scoped.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    :param created_date_time: The date and time the policy was created.
    :type created_date_time: ~datetime.datetime
    :param description: The policy's description.
    :type description: str
    :param display_name: Policy display name.
    :type display_name: str
    :param last_modified_date_time: Last time the policy was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param version: Version of the entity.
    :type version: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param custom_settings: A set of string key and string value pairs to be sent to apps for users
     to whom the configuration is scoped, unalterned by this service.
    :type custom_settings: list[~devices_corporate_management.models.MicrosoftGraphKeyValuePair]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'version': {'key': 'version', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'custom_settings': {'key': 'customSettings', 'type': '[MicrosoftGraphKeyValuePair]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedAppConfiguration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.custom_settings = kwargs.get('custom_settings', None)


class MicrosoftGraphManagedAppOperation(MicrosoftGraphEntity):
    """Represents an operation applied against an app registration.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The operation name.
    :type display_name: str
    :param last_modified_date_time: The last time the app operation was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param state: The current state of the operation.
    :type state: str
    :param version: Version of the entity.
    :type version: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'state': {'key': 'state', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedAppOperation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.state = kwargs.get('state', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphManagedAppPolicyDeploymentSummary(MicrosoftGraphEntity):
    """The ManagedAppEntity is the base entity type for all other entity types under app management workflow.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param configuration_deployed_user_count: Not yet documented.
    :type configuration_deployed_user_count: int
    :param configuration_deployment_summary_per_app: Not yet documented.
    :type configuration_deployment_summary_per_app:
     list[~devices_corporate_management.models.MicrosoftGraphManagedAppPolicyDeploymentSummaryPerApp]
    :param display_name: Not yet documented.
    :type display_name: str
    :param last_refresh_time: Not yet documented.
    :type last_refresh_time: ~datetime.datetime
    :param version: Version of the entity.
    :type version: str
    """

    _validation = {
        'configuration_deployed_user_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'configuration_deployed_user_count': {'key': 'configurationDeployedUserCount', 'type': 'int'},
        'configuration_deployment_summary_per_app': {'key': 'configurationDeploymentSummaryPerApp', 'type': '[MicrosoftGraphManagedAppPolicyDeploymentSummaryPerApp]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_refresh_time': {'key': 'lastRefreshTime', 'type': 'iso-8601'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedAppPolicyDeploymentSummary, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.configuration_deployed_user_count = kwargs.get('configuration_deployed_user_count', None)
        self.configuration_deployment_summary_per_app = kwargs.get('configuration_deployment_summary_per_app', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_refresh_time = kwargs.get('last_refresh_time', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphManagedAppPolicyDeploymentSummaryPerApp(msrest.serialization.Model):
    """Represents policy deployment summary per app.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param configuration_applied_user_count: Number of users the policy is applied.
    :type configuration_applied_user_count: int
    :param mobile_app_identifier: The identifier for a mobile app.
    :type mobile_app_identifier: dict[str, object]
    """

    _validation = {
        'configuration_applied_user_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'configuration_applied_user_count': {'key': 'configurationAppliedUserCount', 'type': 'int'},
        'mobile_app_identifier': {'key': 'mobileAppIdentifier', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedAppPolicyDeploymentSummaryPerApp, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.configuration_applied_user_count = kwargs.get('configuration_applied_user_count', None)
        self.mobile_app_identifier = kwargs.get('mobile_app_identifier', None)


class MicrosoftGraphManagedAppRegistration(MicrosoftGraphEntity):
    """The ManagedAppEntity is the base entity type for all other entity types under app management workflow.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_identifier: The identifier for a mobile app.
    :type app_identifier: dict[str, object]
    :param application_version: App version.
    :type application_version: str
    :param created_date_time: Date and time of creation.
    :type created_date_time: ~datetime.datetime
    :param device_name: Host device name.
    :type device_name: str
    :param device_tag: App management SDK generated tag, which helps relate apps hosted on the same
     device. Not guaranteed to relate apps in all conditions.
    :type device_tag: str
    :param device_type: Host device type.
    :type device_type: str
    :param flagged_reasons: Zero or more reasons an app registration is flagged. E.g. app running
     on rooted device.
    :type flagged_reasons: list[str or
     ~devices_corporate_management.models.MicrosoftGraphManagedAppFlaggedReason]
    :param last_sync_date_time: Date and time of last the app synced with management service.
    :type last_sync_date_time: ~datetime.datetime
    :param management_sdk_version: App management SDK version.
    :type management_sdk_version: str
    :param platform_version: Operating System version.
    :type platform_version: str
    :param user_id: The user Id to who this app registration belongs.
    :type user_id: str
    :param version: Version of the entity.
    :type version: str
    :param applied_policies: Zero or more policys already applied on the registered app when it
     last synchronized with managment service.
    :type applied_policies:
     list[~devices_corporate_management.models.MicrosoftGraphManagedAppPolicy]
    :param intended_policies: Zero or more policies admin intended for the app as of now.
    :type intended_policies:
     list[~devices_corporate_management.models.MicrosoftGraphManagedAppPolicy]
    :param operations: Zero or more long running operations triggered on the app registration.
    :type operations: list[~devices_corporate_management.models.MicrosoftGraphManagedAppOperation]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_identifier': {'key': 'appIdentifier', 'type': '{object}'},
        'application_version': {'key': 'applicationVersion', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'device_name': {'key': 'deviceName', 'type': 'str'},
        'device_tag': {'key': 'deviceTag', 'type': 'str'},
        'device_type': {'key': 'deviceType', 'type': 'str'},
        'flagged_reasons': {'key': 'flaggedReasons', 'type': '[str]'},
        'last_sync_date_time': {'key': 'lastSyncDateTime', 'type': 'iso-8601'},
        'management_sdk_version': {'key': 'managementSdkVersion', 'type': 'str'},
        'platform_version': {'key': 'platformVersion', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'applied_policies': {'key': 'appliedPolicies', 'type': '[MicrosoftGraphManagedAppPolicy]'},
        'intended_policies': {'key': 'intendedPolicies', 'type': '[MicrosoftGraphManagedAppPolicy]'},
        'operations': {'key': 'operations', 'type': '[MicrosoftGraphManagedAppOperation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedAppRegistration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_identifier = kwargs.get('app_identifier', None)
        self.application_version = kwargs.get('application_version', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.device_name = kwargs.get('device_name', None)
        self.device_tag = kwargs.get('device_tag', None)
        self.device_type = kwargs.get('device_type', None)
        self.flagged_reasons = kwargs.get('flagged_reasons', None)
        self.last_sync_date_time = kwargs.get('last_sync_date_time', None)
        self.management_sdk_version = kwargs.get('management_sdk_version', None)
        self.platform_version = kwargs.get('platform_version', None)
        self.user_id = kwargs.get('user_id', None)
        self.version = kwargs.get('version', None)
        self.applied_policies = kwargs.get('applied_policies', None)
        self.intended_policies = kwargs.get('intended_policies', None)
        self.operations = kwargs.get('operations', None)


class MicrosoftGraphManagedAppStatus(MicrosoftGraphEntity):
    """Represents app protection and configuration status for the organization.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: Friendly name of the status report.
    :type display_name: str
    :param version: Version of the entity.
    :type version: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedAppStatus, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphManagedDevice(MicrosoftGraphEntity):
    """Devices that are managed or pre-enrolled through Intune.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param activation_lock_bypass_code: Code that allows the Activation Lock on a device to be
     bypassed.
    :type activation_lock_bypass_code: str
    :param android_security_patch_level: Android security patch level.
    :type android_security_patch_level: str
    :param azure_ad_device_id: The unique identifier for the Azure Active Directory device. Read
     only.
    :type azure_ad_device_id: str
    :param azure_ad_registered: Whether the device is Azure Active Directory registered.
    :type azure_ad_registered: bool
    :param compliance_grace_period_expiration_date_time: The DateTime when device compliance grace
     period expires.
    :type compliance_grace_period_expiration_date_time: ~datetime.datetime
    :param compliance_state:  Possible values include: "unknown", "compliant", "noncompliant",
     "conflict", "error", "inGracePeriod", "configManager".
    :type compliance_state: str or
     ~devices_corporate_management.models.MicrosoftGraphComplianceState
    :param configuration_manager_client_enabled_features: configuration Manager client enabled
     features.
    :type configuration_manager_client_enabled_features:
     ~devices_corporate_management.models.MicrosoftGraphConfigurationManagerClientEnabledFeatures
    :param device_action_results: List of ComplexType deviceActionResult objects.
    :type device_action_results:
     list[~devices_corporate_management.models.MicrosoftGraphDeviceActionResult]
    :param device_category_display_name: Device category display name.
    :type device_category_display_name: str
    :param device_enrollment_type:  Possible values include: "unknown", "userEnrollment",
     "deviceEnrollmentManager", "appleBulkWithUser", "appleBulkWithoutUser", "windowsAzureADJoin",
     "windowsBulkUserless", "windowsAutoEnrollment", "windowsBulkAzureDomainJoin",
     "windowsCoManagement".
    :type device_enrollment_type: str or
     ~devices_corporate_management.models.MicrosoftGraphDeviceEnrollmentType
    :param device_health_attestation_state: deviceHealthAttestationState.
    :type device_health_attestation_state:
     ~devices_corporate_management.models.MicrosoftGraphDeviceHealthAttestationState
    :param device_name: Name of the device.
    :type device_name: str
    :param device_registration_state:  Possible values include: "notRegistered", "registered",
     "revoked", "keyConflict", "approvalPending", "certificateReset",
     "notRegisteredPendingEnrollment", "unknown".
    :type device_registration_state: str or
     ~devices_corporate_management.models.MicrosoftGraphDeviceRegistrationState
    :param eas_activated: Whether the device is Exchange ActiveSync activated.
    :type eas_activated: bool
    :param eas_activation_date_time: Exchange ActivationSync activation time of the device.
    :type eas_activation_date_time: ~datetime.datetime
    :param eas_device_id: Exchange ActiveSync Id of the device.
    :type eas_device_id: str
    :param email_address: Email(s) for the user associated with the device.
    :type email_address: str
    :param enrolled_date_time: Enrollment time of the device.
    :type enrolled_date_time: ~datetime.datetime
    :param exchange_access_state:  Possible values include: "none", "unknown", "allowed",
     "blocked", "quarantined".
    :type exchange_access_state: str or
     ~devices_corporate_management.models.MicrosoftGraphDeviceManagementExchangeAccessState
    :param exchange_access_state_reason:  Possible values include: "none", "unknown",
     "exchangeGlobalRule", "exchangeIndividualRule", "exchangeDeviceRule", "exchangeUpgrade",
     "exchangeMailboxPolicy", "other", "compliant", "notCompliant", "notEnrolled",
     "unknownLocation", "mfaRequired", "azureADBlockDueToAccessPolicy", "compromisedPassword",
     "deviceNotKnownWithManagedApp".
    :type exchange_access_state_reason: str or
     ~devices_corporate_management.models.MicrosoftGraphDeviceManagementExchangeAccessStateReason
    :param exchange_last_successful_sync_date_time: Last time the device contacted Exchange.
    :type exchange_last_successful_sync_date_time: ~datetime.datetime
    :param free_storage_space_in_bytes: Free Storage in Bytes.
    :type free_storage_space_in_bytes: long
    :param imei: IMEI.
    :type imei: str
    :param is_encrypted: Device encryption status.
    :type is_encrypted: bool
    :param is_supervised: Device supervised status.
    :type is_supervised: bool
    :param jail_broken: whether the device is jail broken or rooted.
    :type jail_broken: str
    :param last_sync_date_time: The date and time that the device last completed a successful sync
     with Intune.
    :type last_sync_date_time: ~datetime.datetime
    :param managed_device_name: Automatically generated name to identify a device. Can be
     overwritten to a user friendly name.
    :type managed_device_name: str
    :param managed_device_owner_type:  Possible values include: "unknown", "company", "personal".
    :type managed_device_owner_type: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedDeviceOwnerType
    :param management_agent:  Possible values include: "eas", "mdm", "easMdm", "intuneClient",
     "easIntuneClient", "configurationManagerClient", "configurationManagerClientMdm",
     "configurationManagerClientMdmEas", "unknown", "jamf", "googleCloudDevicePolicyController".
    :type management_agent: str or
     ~devices_corporate_management.models.MicrosoftGraphManagementAgentType
    :param manufacturer: Manufacturer of the device.
    :type manufacturer: str
    :param meid: MEID.
    :type meid: str
    :param model: Model of the device.
    :type model: str
    :param operating_system: Operating system of the device. Windows, iOS, etc.
    :type operating_system: str
    :param os_version: Operating system version of the device.
    :type os_version: str
    :param partner_reported_threat_state:  Possible values include: "unknown", "activated",
     "deactivated", "secured", "lowSeverity", "mediumSeverity", "highSeverity", "unresponsive",
     "compromised", "misconfigured".
    :type partner_reported_threat_state: str or
     ~devices_corporate_management.models.MicrosoftGraphManagedDevicePartnerReportedHealthState
    :param phone_number: Phone number of the device.
    :type phone_number: str
    :param remote_assistance_session_error_details: An error string that identifies issues when
     creating Remote Assistance session objects.
    :type remote_assistance_session_error_details: str
    :param remote_assistance_session_url: Url that allows a Remote Assistance session to be
     established with the device.
    :type remote_assistance_session_url: str
    :param serial_number: SerialNumber.
    :type serial_number: str
    :param subscriber_carrier: Subscriber Carrier.
    :type subscriber_carrier: str
    :param total_storage_space_in_bytes: Total Storage in Bytes.
    :type total_storage_space_in_bytes: long
    :param user_display_name: User display name.
    :type user_display_name: str
    :param user_id: Unique Identifier for the user associated with the device.
    :type user_id: str
    :param user_principal_name: Device user principal name.
    :type user_principal_name: str
    :param wi_fi_mac_address: Wi-Fi MAC.
    :type wi_fi_mac_address: str
    :param device_compliance_policy_states: Device compliance policy states for this device.
    :type device_compliance_policy_states:
     list[~devices_corporate_management.models.MicrosoftGraphDeviceCompliancePolicyState]
    :param device_configuration_states: Device configuration states for this device.
    :type device_configuration_states:
     list[~devices_corporate_management.models.MicrosoftGraphDeviceConfigurationState]
    :param device_category: Device categories provides a way to organize your devices. Using device
     categories, company administrators can define their own categories that make sense to their
     company. These categories can then be applied to a device in the Intune Azure console or
     selected by a user during device enrollment. You can filter reports and create dynamic Azure
     Active Directory device groups based on device categories.
    :type device_category: ~devices_corporate_management.models.MicrosoftGraphDeviceCategory
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'activation_lock_bypass_code': {'key': 'activationLockBypassCode', 'type': 'str'},
        'android_security_patch_level': {'key': 'androidSecurityPatchLevel', 'type': 'str'},
        'azure_ad_device_id': {'key': 'azureADDeviceId', 'type': 'str'},
        'azure_ad_registered': {'key': 'azureADRegistered', 'type': 'bool'},
        'compliance_grace_period_expiration_date_time': {'key': 'complianceGracePeriodExpirationDateTime', 'type': 'iso-8601'},
        'compliance_state': {'key': 'complianceState', 'type': 'str'},
        'configuration_manager_client_enabled_features': {'key': 'configurationManagerClientEnabledFeatures', 'type': 'MicrosoftGraphConfigurationManagerClientEnabledFeatures'},
        'device_action_results': {'key': 'deviceActionResults', 'type': '[MicrosoftGraphDeviceActionResult]'},
        'device_category_display_name': {'key': 'deviceCategoryDisplayName', 'type': 'str'},
        'device_enrollment_type': {'key': 'deviceEnrollmentType', 'type': 'str'},
        'device_health_attestation_state': {'key': 'deviceHealthAttestationState', 'type': 'MicrosoftGraphDeviceHealthAttestationState'},
        'device_name': {'key': 'deviceName', 'type': 'str'},
        'device_registration_state': {'key': 'deviceRegistrationState', 'type': 'str'},
        'eas_activated': {'key': 'easActivated', 'type': 'bool'},
        'eas_activation_date_time': {'key': 'easActivationDateTime', 'type': 'iso-8601'},
        'eas_device_id': {'key': 'easDeviceId', 'type': 'str'},
        'email_address': {'key': 'emailAddress', 'type': 'str'},
        'enrolled_date_time': {'key': 'enrolledDateTime', 'type': 'iso-8601'},
        'exchange_access_state': {'key': 'exchangeAccessState', 'type': 'str'},
        'exchange_access_state_reason': {'key': 'exchangeAccessStateReason', 'type': 'str'},
        'exchange_last_successful_sync_date_time': {'key': 'exchangeLastSuccessfulSyncDateTime', 'type': 'iso-8601'},
        'free_storage_space_in_bytes': {'key': 'freeStorageSpaceInBytes', 'type': 'long'},
        'imei': {'key': 'imei', 'type': 'str'},
        'is_encrypted': {'key': 'isEncrypted', 'type': 'bool'},
        'is_supervised': {'key': 'isSupervised', 'type': 'bool'},
        'jail_broken': {'key': 'jailBroken', 'type': 'str'},
        'last_sync_date_time': {'key': 'lastSyncDateTime', 'type': 'iso-8601'},
        'managed_device_name': {'key': 'managedDeviceName', 'type': 'str'},
        'managed_device_owner_type': {'key': 'managedDeviceOwnerType', 'type': 'str'},
        'management_agent': {'key': 'managementAgent', 'type': 'str'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'meid': {'key': 'meid', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'operating_system': {'key': 'operatingSystem', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
        'partner_reported_threat_state': {'key': 'partnerReportedThreatState', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'remote_assistance_session_error_details': {'key': 'remoteAssistanceSessionErrorDetails', 'type': 'str'},
        'remote_assistance_session_url': {'key': 'remoteAssistanceSessionUrl', 'type': 'str'},
        'serial_number': {'key': 'serialNumber', 'type': 'str'},
        'subscriber_carrier': {'key': 'subscriberCarrier', 'type': 'str'},
        'total_storage_space_in_bytes': {'key': 'totalStorageSpaceInBytes', 'type': 'long'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'wi_fi_mac_address': {'key': 'wiFiMacAddress', 'type': 'str'},
        'device_compliance_policy_states': {'key': 'deviceCompliancePolicyStates', 'type': '[MicrosoftGraphDeviceCompliancePolicyState]'},
        'device_configuration_states': {'key': 'deviceConfigurationStates', 'type': '[MicrosoftGraphDeviceConfigurationState]'},
        'device_category': {'key': 'deviceCategory', 'type': 'MicrosoftGraphDeviceCategory'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedDevice, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.activation_lock_bypass_code = kwargs.get('activation_lock_bypass_code', None)
        self.android_security_patch_level = kwargs.get('android_security_patch_level', None)
        self.azure_ad_device_id = kwargs.get('azure_ad_device_id', None)
        self.azure_ad_registered = kwargs.get('azure_ad_registered', None)
        self.compliance_grace_period_expiration_date_time = kwargs.get('compliance_grace_period_expiration_date_time', None)
        self.compliance_state = kwargs.get('compliance_state', None)
        self.configuration_manager_client_enabled_features = kwargs.get('configuration_manager_client_enabled_features', None)
        self.device_action_results = kwargs.get('device_action_results', None)
        self.device_category_display_name = kwargs.get('device_category_display_name', None)
        self.device_enrollment_type = kwargs.get('device_enrollment_type', None)
        self.device_health_attestation_state = kwargs.get('device_health_attestation_state', None)
        self.device_name = kwargs.get('device_name', None)
        self.device_registration_state = kwargs.get('device_registration_state', None)
        self.eas_activated = kwargs.get('eas_activated', None)
        self.eas_activation_date_time = kwargs.get('eas_activation_date_time', None)
        self.eas_device_id = kwargs.get('eas_device_id', None)
        self.email_address = kwargs.get('email_address', None)
        self.enrolled_date_time = kwargs.get('enrolled_date_time', None)
        self.exchange_access_state = kwargs.get('exchange_access_state', None)
        self.exchange_access_state_reason = kwargs.get('exchange_access_state_reason', None)
        self.exchange_last_successful_sync_date_time = kwargs.get('exchange_last_successful_sync_date_time', None)
        self.free_storage_space_in_bytes = kwargs.get('free_storage_space_in_bytes', None)
        self.imei = kwargs.get('imei', None)
        self.is_encrypted = kwargs.get('is_encrypted', None)
        self.is_supervised = kwargs.get('is_supervised', None)
        self.jail_broken = kwargs.get('jail_broken', None)
        self.last_sync_date_time = kwargs.get('last_sync_date_time', None)
        self.managed_device_name = kwargs.get('managed_device_name', None)
        self.managed_device_owner_type = kwargs.get('managed_device_owner_type', None)
        self.management_agent = kwargs.get('management_agent', None)
        self.manufacturer = kwargs.get('manufacturer', None)
        self.meid = kwargs.get('meid', None)
        self.model = kwargs.get('model', None)
        self.operating_system = kwargs.get('operating_system', None)
        self.os_version = kwargs.get('os_version', None)
        self.partner_reported_threat_state = kwargs.get('partner_reported_threat_state', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.remote_assistance_session_error_details = kwargs.get('remote_assistance_session_error_details', None)
        self.remote_assistance_session_url = kwargs.get('remote_assistance_session_url', None)
        self.serial_number = kwargs.get('serial_number', None)
        self.subscriber_carrier = kwargs.get('subscriber_carrier', None)
        self.total_storage_space_in_bytes = kwargs.get('total_storage_space_in_bytes', None)
        self.user_display_name = kwargs.get('user_display_name', None)
        self.user_id = kwargs.get('user_id', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)
        self.wi_fi_mac_address = kwargs.get('wi_fi_mac_address', None)
        self.device_compliance_policy_states = kwargs.get('device_compliance_policy_states', None)
        self.device_configuration_states = kwargs.get('device_configuration_states', None)
        self.device_category = kwargs.get('device_category', None)


class MicrosoftGraphManagedDeviceMobileAppConfiguration(MicrosoftGraphEntity):
    """An abstract class for Mobile app configuration for enrolled devices.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: DateTime the object was created.
    :type created_date_time: ~datetime.datetime
    :param description: Admin provided description of the Device Configuration.
    :type description: str
    :param display_name: Admin provided name of the device configuration.
    :type display_name: str
    :param last_modified_date_time: DateTime the object was last modified.
    :type last_modified_date_time: ~datetime.datetime
    :param targeted_mobile_apps: the associated app.
    :type targeted_mobile_apps: list[str]
    :param version: Version of the device configuration.
    :type version: int
    :param assignments: The list of group assignemenets for app configration.
    :type assignments:
     list[~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment]
    :param device_statuses: List of ManagedDeviceMobileAppConfigurationDeviceStatus.
    :type device_statuses:
     list[~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus]
    :param device_status_summary: Contains properties, inherited properties and actions for an MDM
     mobile app configuration device status summary.
    :type device_status_summary:
     ~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary
    :param user_statuses: List of ManagedDeviceMobileAppConfigurationUserStatus.
    :type user_statuses:
     list[~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus]
    :param user_status_summary: Contains properties, inherited properties and actions for an MDM
     mobile app configuration user status summary.
    :type user_status_summary:
     ~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary
    """

    _validation = {
        'version': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'targeted_mobile_apps': {'key': 'targetedMobileApps', 'type': '[str]'},
        'version': {'key': 'version', 'type': 'int'},
        'assignments': {'key': 'assignments', 'type': '[MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment]'},
        'device_statuses': {'key': 'deviceStatuses', 'type': '[MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus]'},
        'device_status_summary': {'key': 'deviceStatusSummary', 'type': 'MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary'},
        'user_statuses': {'key': 'userStatuses', 'type': '[MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus]'},
        'user_status_summary': {'key': 'userStatusSummary', 'type': 'MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedDeviceMobileAppConfiguration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.targeted_mobile_apps = kwargs.get('targeted_mobile_apps', None)
        self.version = kwargs.get('version', None)
        self.assignments = kwargs.get('assignments', None)
        self.device_statuses = kwargs.get('device_statuses', None)
        self.device_status_summary = kwargs.get('device_status_summary', None)
        self.user_statuses = kwargs.get('user_statuses', None)
        self.user_status_summary = kwargs.get('user_status_summary', None)


class MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment(MicrosoftGraphEntity):
    """Contains the properties used to assign an MDM app configuration to a group.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param target: Base type for assignment targets.
    :type target: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'target': {'key': 'target', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.target = kwargs.get('target', None)


class MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus(MicrosoftGraphEntity):
    """Contains properties, inherited properties and actions for an MDM mobile app configuration status for a device.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param compliance_grace_period_expiration_date_time: The DateTime when device compliance grace
     period expires.
    :type compliance_grace_period_expiration_date_time: ~datetime.datetime
    :param device_display_name: Device name of the DevicePolicyStatus.
    :type device_display_name: str
    :param device_model: The device model that is being reported.
    :type device_model: str
    :param last_reported_date_time: Last modified date time of the policy report.
    :type last_reported_date_time: ~datetime.datetime
    :param status:  Possible values include: "unknown", "notApplicable", "compliant", "remediated",
     "nonCompliant", "error", "conflict", "notAssigned".
    :type status: str or ~devices_corporate_management.models.MicrosoftGraphComplianceStatus
    :param user_name: The User Name that is being reported.
    :type user_name: str
    :param user_principal_name: UserPrincipalName.
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'compliance_grace_period_expiration_date_time': {'key': 'complianceGracePeriodExpirationDateTime', 'type': 'iso-8601'},
        'device_display_name': {'key': 'deviceDisplayName', 'type': 'str'},
        'device_model': {'key': 'deviceModel', 'type': 'str'},
        'last_reported_date_time': {'key': 'lastReportedDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.compliance_grace_period_expiration_date_time = kwargs.get('compliance_grace_period_expiration_date_time', None)
        self.device_display_name = kwargs.get('device_display_name', None)
        self.device_model = kwargs.get('device_model', None)
        self.last_reported_date_time = kwargs.get('last_reported_date_time', None)
        self.status = kwargs.get('status', None)
        self.user_name = kwargs.get('user_name', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary(MicrosoftGraphEntity):
    """Contains properties, inherited properties and actions for an MDM mobile app configuration device status summary.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param configuration_version: Version of the policy for that overview.
    :type configuration_version: int
    :param error_count: Number of error devices.
    :type error_count: int
    :param failed_count: Number of failed devices.
    :type failed_count: int
    :param last_update_date_time: Last update time.
    :type last_update_date_time: ~datetime.datetime
    :param not_applicable_count: Number of not applicable devices.
    :type not_applicable_count: int
    :param pending_count: Number of pending devices.
    :type pending_count: int
    :param success_count: Number of succeeded devices.
    :type success_count: int
    """

    _validation = {
        'configuration_version': {'maximum': 2147483647, 'minimum': -2147483648},
        'error_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'failed_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'not_applicable_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'pending_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'success_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'configuration_version': {'key': 'configurationVersion', 'type': 'int'},
        'error_count': {'key': 'errorCount', 'type': 'int'},
        'failed_count': {'key': 'failedCount', 'type': 'int'},
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'iso-8601'},
        'not_applicable_count': {'key': 'notApplicableCount', 'type': 'int'},
        'pending_count': {'key': 'pendingCount', 'type': 'int'},
        'success_count': {'key': 'successCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.configuration_version = kwargs.get('configuration_version', None)
        self.error_count = kwargs.get('error_count', None)
        self.failed_count = kwargs.get('failed_count', None)
        self.last_update_date_time = kwargs.get('last_update_date_time', None)
        self.not_applicable_count = kwargs.get('not_applicable_count', None)
        self.pending_count = kwargs.get('pending_count', None)
        self.success_count = kwargs.get('success_count', None)


class MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus(MicrosoftGraphEntity):
    """Contains properties, inherited properties and actions for an MDM mobile app configuration status for a user.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param devices_count: Devices count for that user.
    :type devices_count: int
    :param last_reported_date_time: Last modified date time of the policy report.
    :type last_reported_date_time: ~datetime.datetime
    :param status:  Possible values include: "unknown", "notApplicable", "compliant", "remediated",
     "nonCompliant", "error", "conflict", "notAssigned".
    :type status: str or ~devices_corporate_management.models.MicrosoftGraphComplianceStatus
    :param user_display_name: User name of the DevicePolicyStatus.
    :type user_display_name: str
    :param user_principal_name: UserPrincipalName.
    :type user_principal_name: str
    """

    _validation = {
        'devices_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'devices_count': {'key': 'devicesCount', 'type': 'int'},
        'last_reported_date_time': {'key': 'lastReportedDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.devices_count = kwargs.get('devices_count', None)
        self.last_reported_date_time = kwargs.get('last_reported_date_time', None)
        self.status = kwargs.get('status', None)
        self.user_display_name = kwargs.get('user_display_name', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary(MicrosoftGraphEntity):
    """Contains properties, inherited properties and actions for an MDM mobile app configuration user status summary.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param configuration_version: Version of the policy for that overview.
    :type configuration_version: int
    :param error_count: Number of error Users.
    :type error_count: int
    :param failed_count: Number of failed Users.
    :type failed_count: int
    :param last_update_date_time: Last update time.
    :type last_update_date_time: ~datetime.datetime
    :param not_applicable_count: Number of not applicable users.
    :type not_applicable_count: int
    :param pending_count: Number of pending Users.
    :type pending_count: int
    :param success_count: Number of succeeded Users.
    :type success_count: int
    """

    _validation = {
        'configuration_version': {'maximum': 2147483647, 'minimum': -2147483648},
        'error_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'failed_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'not_applicable_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'pending_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'success_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'configuration_version': {'key': 'configurationVersion', 'type': 'int'},
        'error_count': {'key': 'errorCount', 'type': 'int'},
        'failed_count': {'key': 'failedCount', 'type': 'int'},
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'iso-8601'},
        'not_applicable_count': {'key': 'notApplicableCount', 'type': 'int'},
        'pending_count': {'key': 'pendingCount', 'type': 'int'},
        'success_count': {'key': 'successCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.configuration_version = kwargs.get('configuration_version', None)
        self.error_count = kwargs.get('error_count', None)
        self.failed_count = kwargs.get('failed_count', None)
        self.last_update_date_time = kwargs.get('last_update_date_time', None)
        self.not_applicable_count = kwargs.get('not_applicable_count', None)
        self.pending_count = kwargs.get('pending_count', None)
        self.success_count = kwargs.get('success_count', None)


class MicrosoftGraphManagedEBook(MicrosoftGraphEntity):
    """An abstract class containing the base properties for Managed eBook.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: The date and time when the eBook file was created.
    :type created_date_time: ~datetime.datetime
    :param description: Description.
    :type description: str
    :param display_name: Name of the eBook.
    :type display_name: str
    :param information_url: The more information Url.
    :type information_url: str
    :param large_cover: Contains properties for a generic mime content.
    :type large_cover: ~devices_corporate_management.models.MicrosoftGraphMimeContent
    :param last_modified_date_time: The date and time when the eBook was last modified.
    :type last_modified_date_time: ~datetime.datetime
    :param privacy_information_url: The privacy statement Url.
    :type privacy_information_url: str
    :param published_date_time: The date and time when the eBook was published.
    :type published_date_time: ~datetime.datetime
    :param publisher: Publisher.
    :type publisher: str
    :param assignments: The list of assignments for this eBook.
    :type assignments:
     list[~devices_corporate_management.models.MicrosoftGraphManagedEBookAssignment]
    :param device_states: The list of installation states for this eBook.
    :type device_states:
     list[~devices_corporate_management.models.MicrosoftGraphDeviceInstallState]
    :param install_summary: Contains properties for the installation summary of a book for a
     device.
    :type install_summary: ~devices_corporate_management.models.MicrosoftGraphEBookInstallSummary
    :param user_state_summary: The list of installation states for this eBook.
    :type user_state_summary:
     list[~devices_corporate_management.models.MicrosoftGraphUserInstallStateSummary]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'information_url': {'key': 'informationUrl', 'type': 'str'},
        'large_cover': {'key': 'largeCover', 'type': 'MicrosoftGraphMimeContent'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'privacy_information_url': {'key': 'privacyInformationUrl', 'type': 'str'},
        'published_date_time': {'key': 'publishedDateTime', 'type': 'iso-8601'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'assignments': {'key': 'assignments', 'type': '[MicrosoftGraphManagedEBookAssignment]'},
        'device_states': {'key': 'deviceStates', 'type': '[MicrosoftGraphDeviceInstallState]'},
        'install_summary': {'key': 'installSummary', 'type': 'MicrosoftGraphEBookInstallSummary'},
        'user_state_summary': {'key': 'userStateSummary', 'type': '[MicrosoftGraphUserInstallStateSummary]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedEBook, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.information_url = kwargs.get('information_url', None)
        self.large_cover = kwargs.get('large_cover', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.privacy_information_url = kwargs.get('privacy_information_url', None)
        self.published_date_time = kwargs.get('published_date_time', None)
        self.publisher = kwargs.get('publisher', None)
        self.assignments = kwargs.get('assignments', None)
        self.device_states = kwargs.get('device_states', None)
        self.install_summary = kwargs.get('install_summary', None)
        self.user_state_summary = kwargs.get('user_state_summary', None)


class MicrosoftGraphManagedEBookAssignment(MicrosoftGraphEntity):
    """Contains properties used to assign a eBook to a group.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param install_intent:  Possible values include: "available", "required", "uninstall",
     "availableWithoutEnrollment".
    :type install_intent: str or ~devices_corporate_management.models.MicrosoftGraphInstallIntent
    :param target: Base type for assignment targets.
    :type target: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'install_intent': {'key': 'installIntent', 'type': 'str'},
        'target': {'key': 'target', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedEBookAssignment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.install_intent = kwargs.get('install_intent', None)
        self.target = kwargs.get('target', None)


class MicrosoftGraphManagedMobileApp(MicrosoftGraphEntity):
    """The identifier for the deployment an app.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param mobile_app_identifier: The identifier for a mobile app.
    :type mobile_app_identifier: dict[str, object]
    :param version: Version of the entity.
    :type version: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'mobile_app_identifier': {'key': 'mobileAppIdentifier', 'type': '{object}'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphManagedMobileApp, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.mobile_app_identifier = kwargs.get('mobile_app_identifier', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphWindowsInformationProtection(MicrosoftGraphManagedAppPolicy):
    """Policy for Windows information protection to configure detailed management settings.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    :param created_date_time: The date and time the policy was created.
    :type created_date_time: ~datetime.datetime
    :param description: The policy's description.
    :type description: str
    :param display_name: Policy display name.
    :type display_name: str
    :param last_modified_date_time: Last time the policy was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param version: Version of the entity.
    :type version: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param azure_rights_management_services_allowed: Specifies whether to allow Azure RMS
     encryption for WIP.
    :type azure_rights_management_services_allowed: bool
    :param data_recovery_certificate: Windows Information Protection DataRecoveryCertificate.
    :type data_recovery_certificate:
     ~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionDataRecoveryCertificate
    :param enforcement_level:  Possible values include: "noProtection", "encryptAndAuditOnly",
     "encryptAuditAndPrompt", "encryptAuditAndBlock".
    :type enforcement_level: str or
     ~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionEnforcementLevel
    :param enterprise_domain: Primary enterprise domain.
    :type enterprise_domain: str
    :param enterprise_internal_proxy_servers: This is the comma-separated list of internal proxy
     servers. For example, '157.54.14.28, 157.54.11.118, 10.202.14.167, 157.53.14.163,
     157.69.210.59'. These proxies have been configured by the admin to connect to specific
     resources on the Internet. They are considered to be enterprise network locations. The proxies
     are only leveraged in configuring the EnterpriseProxiedDomains policy to force traffic to the
     matched domains through these proxies.
    :type enterprise_internal_proxy_servers:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param enterprise_ip_ranges: Sets the enterprise IP ranges that define the computers in the
     enterprise network. Data that comes from those computers will be considered part of the
     enterprise and protected. These locations will be considered a safe destination for enterprise
     data to be shared to.
    :type enterprise_ip_ranges:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionIpRangeCollection]
    :param enterprise_ip_ranges_are_authoritative: Boolean value that tells the client to accept
     the configured list and not to use heuristics to attempt to find other subnets. Default is
     false.
    :type enterprise_ip_ranges_are_authoritative: bool
    :param enterprise_network_domain_names: This is the list of domains that comprise the
     boundaries of the enterprise. Data from one of these domains that is sent to a device will be
     considered enterprise data and protected These locations will be considered a safe destination
     for enterprise data to be shared to.
    :type enterprise_network_domain_names:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param enterprise_protected_domain_names: List of enterprise domains to be protected.
    :type enterprise_protected_domain_names:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param enterprise_proxied_domains: Contains a list of Enterprise resource domains hosted in the
     cloud that need to be protected. Connections to these resources are considered enterprise data.
     If a proxy is paired with a cloud resource, traffic to the cloud resource will be routed
     through the enterprise network via the denoted proxy server (on Port 80). A proxy server used
     for this purpose must also be configured using the EnterpriseInternalProxyServers policy.
    :type enterprise_proxied_domains:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionProxiedDomainCollection]
    :param enterprise_proxy_servers: This is a list of proxy servers. Any server not on this list
     is considered non-enterprise.
    :type enterprise_proxy_servers:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param enterprise_proxy_servers_are_authoritative: Boolean value that tells the client to
     accept the configured list of proxies and not try to detect other work proxies. Default is
     false.
    :type enterprise_proxy_servers_are_authoritative: bool
    :param exempt_apps: Exempt applications can also access enterprise data, but the data handled
     by those applications are not protected. This is because some critical enterprise applications
     may have compatibility problems with encrypted data.
    :type exempt_apps:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionApp]
    :param icons_visible: Determines whether overlays are added to icons for WIP protected files in
     Explorer and enterprise only app tiles in the Start menu. Starting in Windows 10, version 1703
     this setting also configures the visibility of the WIP icon in the title bar of a WIP-protected
     app.
    :type icons_visible: bool
    :param indexing_encrypted_stores_or_items_blocked: This switch is for the Windows Search
     Indexer, to allow or disallow indexing of items.
    :type indexing_encrypted_stores_or_items_blocked: bool
    :param is_assigned: Indicates if the policy is deployed to any inclusion groups or not.
    :type is_assigned: bool
    :param neutral_domain_resources: List of domain names that can used for work or personal
     resource.
    :type neutral_domain_resources:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param protected_apps: Protected applications can access enterprise data and the data handled
     by those applications are protected with encryption.
    :type protected_apps:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionApp]
    :param protection_under_lock_config_required: Specifies whether the protection under lock
     feature (also known as encrypt under pin) should be configured.
    :type protection_under_lock_config_required: bool
    :param revoke_on_unenroll_disabled: This policy controls whether to revoke the WIP keys when a
     device unenrolls from the management service. If set to 1 (Don't revoke keys), the keys will
     not be revoked and the user will continue to have access to protected files after unenrollment.
     If the keys are not revoked, there will be no revoked file cleanup subsequently.
    :type revoke_on_unenroll_disabled: bool
    :param rights_management_services_template_id: TemplateID GUID to use for RMS encryption. The
     RMS template allows the IT admin to configure the details about who has access to RMS-protected
     file and how long they have access.
    :type rights_management_services_template_id: str
    :param smb_auto_encrypted_file_extensions: Specifies a list of file extensions, so that files
     with these extensions are encrypted when copying from an SMB share within the corporate
     boundary.
    :type smb_auto_encrypted_file_extensions:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param assignments: Navigation property to list of security groups targeted for policy.
    :type assignments:
     list[~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppPolicyAssignment]
    :param exempt_app_locker_files: Another way to input exempt apps through xml files.
    :type exempt_app_locker_files:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionAppLockerFile]
    :param protected_app_locker_files: Another way to input protected apps through xml files.
    :type protected_app_locker_files:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionAppLockerFile]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'version': {'key': 'version', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'azure_rights_management_services_allowed': {'key': 'azureRightsManagementServicesAllowed', 'type': 'bool'},
        'data_recovery_certificate': {'key': 'dataRecoveryCertificate', 'type': 'MicrosoftGraphWindowsInformationProtectionDataRecoveryCertificate'},
        'enforcement_level': {'key': 'enforcementLevel', 'type': 'str'},
        'enterprise_domain': {'key': 'enterpriseDomain', 'type': 'str'},
        'enterprise_internal_proxy_servers': {'key': 'enterpriseInternalProxyServers', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'enterprise_ip_ranges': {'key': 'enterpriseIPRanges', 'type': '[MicrosoftGraphWindowsInformationProtectionIpRangeCollection]'},
        'enterprise_ip_ranges_are_authoritative': {'key': 'enterpriseIPRangesAreAuthoritative', 'type': 'bool'},
        'enterprise_network_domain_names': {'key': 'enterpriseNetworkDomainNames', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'enterprise_protected_domain_names': {'key': 'enterpriseProtectedDomainNames', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'enterprise_proxied_domains': {'key': 'enterpriseProxiedDomains', 'type': '[MicrosoftGraphWindowsInformationProtectionProxiedDomainCollection]'},
        'enterprise_proxy_servers': {'key': 'enterpriseProxyServers', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'enterprise_proxy_servers_are_authoritative': {'key': 'enterpriseProxyServersAreAuthoritative', 'type': 'bool'},
        'exempt_apps': {'key': 'exemptApps', 'type': '[MicrosoftGraphWindowsInformationProtectionApp]'},
        'icons_visible': {'key': 'iconsVisible', 'type': 'bool'},
        'indexing_encrypted_stores_or_items_blocked': {'key': 'indexingEncryptedStoresOrItemsBlocked', 'type': 'bool'},
        'is_assigned': {'key': 'isAssigned', 'type': 'bool'},
        'neutral_domain_resources': {'key': 'neutralDomainResources', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'protected_apps': {'key': 'protectedApps', 'type': '[MicrosoftGraphWindowsInformationProtectionApp]'},
        'protection_under_lock_config_required': {'key': 'protectionUnderLockConfigRequired', 'type': 'bool'},
        'revoke_on_unenroll_disabled': {'key': 'revokeOnUnenrollDisabled', 'type': 'bool'},
        'rights_management_services_template_id': {'key': 'rightsManagementServicesTemplateId', 'type': 'str'},
        'smb_auto_encrypted_file_extensions': {'key': 'smbAutoEncryptedFileExtensions', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'assignments': {'key': 'assignments', 'type': '[MicrosoftGraphTargetedManagedAppPolicyAssignment]'},
        'exempt_app_locker_files': {'key': 'exemptAppLockerFiles', 'type': '[MicrosoftGraphWindowsInformationProtectionAppLockerFile]'},
        'protected_app_locker_files': {'key': 'protectedAppLockerFiles', 'type': '[MicrosoftGraphWindowsInformationProtectionAppLockerFile]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWindowsInformationProtection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.azure_rights_management_services_allowed = kwargs.get('azure_rights_management_services_allowed', None)
        self.data_recovery_certificate = kwargs.get('data_recovery_certificate', None)
        self.enforcement_level = kwargs.get('enforcement_level', None)
        self.enterprise_domain = kwargs.get('enterprise_domain', None)
        self.enterprise_internal_proxy_servers = kwargs.get('enterprise_internal_proxy_servers', None)
        self.enterprise_ip_ranges = kwargs.get('enterprise_ip_ranges', None)
        self.enterprise_ip_ranges_are_authoritative = kwargs.get('enterprise_ip_ranges_are_authoritative', None)
        self.enterprise_network_domain_names = kwargs.get('enterprise_network_domain_names', None)
        self.enterprise_protected_domain_names = kwargs.get('enterprise_protected_domain_names', None)
        self.enterprise_proxied_domains = kwargs.get('enterprise_proxied_domains', None)
        self.enterprise_proxy_servers = kwargs.get('enterprise_proxy_servers', None)
        self.enterprise_proxy_servers_are_authoritative = kwargs.get('enterprise_proxy_servers_are_authoritative', None)
        self.exempt_apps = kwargs.get('exempt_apps', None)
        self.icons_visible = kwargs.get('icons_visible', None)
        self.indexing_encrypted_stores_or_items_blocked = kwargs.get('indexing_encrypted_stores_or_items_blocked', None)
        self.is_assigned = kwargs.get('is_assigned', None)
        self.neutral_domain_resources = kwargs.get('neutral_domain_resources', None)
        self.protected_apps = kwargs.get('protected_apps', None)
        self.protection_under_lock_config_required = kwargs.get('protection_under_lock_config_required', None)
        self.revoke_on_unenroll_disabled = kwargs.get('revoke_on_unenroll_disabled', None)
        self.rights_management_services_template_id = kwargs.get('rights_management_services_template_id', None)
        self.smb_auto_encrypted_file_extensions = kwargs.get('smb_auto_encrypted_file_extensions', None)
        self.assignments = kwargs.get('assignments', None)
        self.exempt_app_locker_files = kwargs.get('exempt_app_locker_files', None)
        self.protected_app_locker_files = kwargs.get('protected_app_locker_files', None)


class MicrosoftGraphMdmWindowsInformationProtectionPolicy(MicrosoftGraphWindowsInformationProtection):
    """Policy for Windows information protection with MDM.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: The date and time the policy was created.
    :type created_date_time: ~datetime.datetime
    :param description: The policy's description.
    :type description: str
    :param display_name: Policy display name.
    :type display_name: str
    :param last_modified_date_time: Last time the policy was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param version: Version of the entity.
    :type version: str
    :param azure_rights_management_services_allowed: Specifies whether to allow Azure RMS
     encryption for WIP.
    :type azure_rights_management_services_allowed: bool
    :param data_recovery_certificate: Windows Information Protection DataRecoveryCertificate.
    :type data_recovery_certificate:
     ~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionDataRecoveryCertificate
    :param enforcement_level:  Possible values include: "noProtection", "encryptAndAuditOnly",
     "encryptAuditAndPrompt", "encryptAuditAndBlock".
    :type enforcement_level: str or
     ~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionEnforcementLevel
    :param enterprise_domain: Primary enterprise domain.
    :type enterprise_domain: str
    :param enterprise_internal_proxy_servers: This is the comma-separated list of internal proxy
     servers. For example, '157.54.14.28, 157.54.11.118, 10.202.14.167, 157.53.14.163,
     157.69.210.59'. These proxies have been configured by the admin to connect to specific
     resources on the Internet. They are considered to be enterprise network locations. The proxies
     are only leveraged in configuring the EnterpriseProxiedDomains policy to force traffic to the
     matched domains through these proxies.
    :type enterprise_internal_proxy_servers:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param enterprise_ip_ranges: Sets the enterprise IP ranges that define the computers in the
     enterprise network. Data that comes from those computers will be considered part of the
     enterprise and protected. These locations will be considered a safe destination for enterprise
     data to be shared to.
    :type enterprise_ip_ranges:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionIpRangeCollection]
    :param enterprise_ip_ranges_are_authoritative: Boolean value that tells the client to accept
     the configured list and not to use heuristics to attempt to find other subnets. Default is
     false.
    :type enterprise_ip_ranges_are_authoritative: bool
    :param enterprise_network_domain_names: This is the list of domains that comprise the
     boundaries of the enterprise. Data from one of these domains that is sent to a device will be
     considered enterprise data and protected These locations will be considered a safe destination
     for enterprise data to be shared to.
    :type enterprise_network_domain_names:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param enterprise_protected_domain_names: List of enterprise domains to be protected.
    :type enterprise_protected_domain_names:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param enterprise_proxied_domains: Contains a list of Enterprise resource domains hosted in the
     cloud that need to be protected. Connections to these resources are considered enterprise data.
     If a proxy is paired with a cloud resource, traffic to the cloud resource will be routed
     through the enterprise network via the denoted proxy server (on Port 80). A proxy server used
     for this purpose must also be configured using the EnterpriseInternalProxyServers policy.
    :type enterprise_proxied_domains:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionProxiedDomainCollection]
    :param enterprise_proxy_servers: This is a list of proxy servers. Any server not on this list
     is considered non-enterprise.
    :type enterprise_proxy_servers:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param enterprise_proxy_servers_are_authoritative: Boolean value that tells the client to
     accept the configured list of proxies and not try to detect other work proxies. Default is
     false.
    :type enterprise_proxy_servers_are_authoritative: bool
    :param exempt_apps: Exempt applications can also access enterprise data, but the data handled
     by those applications are not protected. This is because some critical enterprise applications
     may have compatibility problems with encrypted data.
    :type exempt_apps:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionApp]
    :param icons_visible: Determines whether overlays are added to icons for WIP protected files in
     Explorer and enterprise only app tiles in the Start menu. Starting in Windows 10, version 1703
     this setting also configures the visibility of the WIP icon in the title bar of a WIP-protected
     app.
    :type icons_visible: bool
    :param indexing_encrypted_stores_or_items_blocked: This switch is for the Windows Search
     Indexer, to allow or disallow indexing of items.
    :type indexing_encrypted_stores_or_items_blocked: bool
    :param is_assigned: Indicates if the policy is deployed to any inclusion groups or not.
    :type is_assigned: bool
    :param neutral_domain_resources: List of domain names that can used for work or personal
     resource.
    :type neutral_domain_resources:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param protected_apps: Protected applications can access enterprise data and the data handled
     by those applications are protected with encryption.
    :type protected_apps:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionApp]
    :param protection_under_lock_config_required: Specifies whether the protection under lock
     feature (also known as encrypt under pin) should be configured.
    :type protection_under_lock_config_required: bool
    :param revoke_on_unenroll_disabled: This policy controls whether to revoke the WIP keys when a
     device unenrolls from the management service. If set to 1 (Don't revoke keys), the keys will
     not be revoked and the user will continue to have access to protected files after unenrollment.
     If the keys are not revoked, there will be no revoked file cleanup subsequently.
    :type revoke_on_unenroll_disabled: bool
    :param rights_management_services_template_id: TemplateID GUID to use for RMS encryption. The
     RMS template allows the IT admin to configure the details about who has access to RMS-protected
     file and how long they have access.
    :type rights_management_services_template_id: str
    :param smb_auto_encrypted_file_extensions: Specifies a list of file extensions, so that files
     with these extensions are encrypted when copying from an SMB share within the corporate
     boundary.
    :type smb_auto_encrypted_file_extensions:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param assignments: Navigation property to list of security groups targeted for policy.
    :type assignments:
     list[~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppPolicyAssignment]
    :param exempt_app_locker_files: Another way to input exempt apps through xml files.
    :type exempt_app_locker_files:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionAppLockerFile]
    :param protected_app_locker_files: Another way to input protected apps through xml files.
    :type protected_app_locker_files:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionAppLockerFile]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'version': {'key': 'version', 'type': 'str'},
        'azure_rights_management_services_allowed': {'key': 'azureRightsManagementServicesAllowed', 'type': 'bool'},
        'data_recovery_certificate': {'key': 'dataRecoveryCertificate', 'type': 'MicrosoftGraphWindowsInformationProtectionDataRecoveryCertificate'},
        'enforcement_level': {'key': 'enforcementLevel', 'type': 'str'},
        'enterprise_domain': {'key': 'enterpriseDomain', 'type': 'str'},
        'enterprise_internal_proxy_servers': {'key': 'enterpriseInternalProxyServers', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'enterprise_ip_ranges': {'key': 'enterpriseIPRanges', 'type': '[MicrosoftGraphWindowsInformationProtectionIpRangeCollection]'},
        'enterprise_ip_ranges_are_authoritative': {'key': 'enterpriseIPRangesAreAuthoritative', 'type': 'bool'},
        'enterprise_network_domain_names': {'key': 'enterpriseNetworkDomainNames', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'enterprise_protected_domain_names': {'key': 'enterpriseProtectedDomainNames', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'enterprise_proxied_domains': {'key': 'enterpriseProxiedDomains', 'type': '[MicrosoftGraphWindowsInformationProtectionProxiedDomainCollection]'},
        'enterprise_proxy_servers': {'key': 'enterpriseProxyServers', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'enterprise_proxy_servers_are_authoritative': {'key': 'enterpriseProxyServersAreAuthoritative', 'type': 'bool'},
        'exempt_apps': {'key': 'exemptApps', 'type': '[MicrosoftGraphWindowsInformationProtectionApp]'},
        'icons_visible': {'key': 'iconsVisible', 'type': 'bool'},
        'indexing_encrypted_stores_or_items_blocked': {'key': 'indexingEncryptedStoresOrItemsBlocked', 'type': 'bool'},
        'is_assigned': {'key': 'isAssigned', 'type': 'bool'},
        'neutral_domain_resources': {'key': 'neutralDomainResources', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'protected_apps': {'key': 'protectedApps', 'type': '[MicrosoftGraphWindowsInformationProtectionApp]'},
        'protection_under_lock_config_required': {'key': 'protectionUnderLockConfigRequired', 'type': 'bool'},
        'revoke_on_unenroll_disabled': {'key': 'revokeOnUnenrollDisabled', 'type': 'bool'},
        'rights_management_services_template_id': {'key': 'rightsManagementServicesTemplateId', 'type': 'str'},
        'smb_auto_encrypted_file_extensions': {'key': 'smbAutoEncryptedFileExtensions', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'assignments': {'key': 'assignments', 'type': '[MicrosoftGraphTargetedManagedAppPolicyAssignment]'},
        'exempt_app_locker_files': {'key': 'exemptAppLockerFiles', 'type': '[MicrosoftGraphWindowsInformationProtectionAppLockerFile]'},
        'protected_app_locker_files': {'key': 'protectedAppLockerFiles', 'type': '[MicrosoftGraphWindowsInformationProtectionAppLockerFile]'},
        'additional_properties': {'key': '', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMdmWindowsInformationProtectionPolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties = kwargs.get('additional_properties', None)


class MicrosoftGraphMimeContent(msrest.serialization.Model):
    """Contains properties for a generic mime content.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param type: Indicates the content mime type.
    :type type: str
    :param value: The byte array that contains the actual content.
    :type value: bytes
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'value': {'key': 'value', 'type': 'base64'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMimeContent, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)
        self.value = kwargs.get('value', None)


class MicrosoftGraphMobileApp(MicrosoftGraphEntity):
    """An abstract class containing the base properties for Intune mobile apps.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: The date and time the app was created.
    :type created_date_time: ~datetime.datetime
    :param description: The description of the app.
    :type description: str
    :param developer: The developer of the app.
    :type developer: str
    :param display_name: The admin provided or imported title of the app.
    :type display_name: str
    :param information_url: The more information Url.
    :type information_url: str
    :param is_featured: The value indicating whether the app is marked as featured by the admin.
    :type is_featured: bool
    :param large_icon: Contains properties for a generic mime content.
    :type large_icon: ~devices_corporate_management.models.MicrosoftGraphMimeContent
    :param last_modified_date_time: The date and time the app was last modified.
    :type last_modified_date_time: ~datetime.datetime
    :param notes: Notes for the app.
    :type notes: str
    :param owner: The owner of the app.
    :type owner: str
    :param privacy_information_url: The privacy statement Url.
    :type privacy_information_url: str
    :param publisher: The publisher of the app.
    :type publisher: str
    :param publishing_state:  Possible values include: "notPublished", "processing", "published".
    :type publishing_state: str or
     ~devices_corporate_management.models.MicrosoftGraphMobileAppPublishingState
    :param assignments: The list of group assignments for this mobile app.
    :type assignments: list[~devices_corporate_management.models.MicrosoftGraphMobileAppAssignment]
    :param categories: The list of categories for this app.
    :type categories: list[~devices_corporate_management.models.MicrosoftGraphMobileAppCategory]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'developer': {'key': 'developer', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'information_url': {'key': 'informationUrl', 'type': 'str'},
        'is_featured': {'key': 'isFeatured', 'type': 'bool'},
        'large_icon': {'key': 'largeIcon', 'type': 'MicrosoftGraphMimeContent'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'notes': {'key': 'notes', 'type': 'str'},
        'owner': {'key': 'owner', 'type': 'str'},
        'privacy_information_url': {'key': 'privacyInformationUrl', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'publishing_state': {'key': 'publishingState', 'type': 'str'},
        'assignments': {'key': 'assignments', 'type': '[MicrosoftGraphMobileAppAssignment]'},
        'categories': {'key': 'categories', 'type': '[MicrosoftGraphMobileAppCategory]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMobileApp, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.description = kwargs.get('description', None)
        self.developer = kwargs.get('developer', None)
        self.display_name = kwargs.get('display_name', None)
        self.information_url = kwargs.get('information_url', None)
        self.is_featured = kwargs.get('is_featured', None)
        self.large_icon = kwargs.get('large_icon', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.notes = kwargs.get('notes', None)
        self.owner = kwargs.get('owner', None)
        self.privacy_information_url = kwargs.get('privacy_information_url', None)
        self.publisher = kwargs.get('publisher', None)
        self.publishing_state = kwargs.get('publishing_state', None)
        self.assignments = kwargs.get('assignments', None)
        self.categories = kwargs.get('categories', None)


class MicrosoftGraphMobileAppAssignment(MicrosoftGraphEntity):
    """A class containing the properties used for Group Assignment of a Mobile App.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param intent:  Possible values include: "available", "required", "uninstall",
     "availableWithoutEnrollment".
    :type intent: str or ~devices_corporate_management.models.MicrosoftGraphInstallIntent
    :param settings: Abstract class to contain properties used to assign a mobile app to a group.
    :type settings: dict[str, object]
    :param target: Base type for assignment targets.
    :type target: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'intent': {'key': 'intent', 'type': 'str'},
        'settings': {'key': 'settings', 'type': '{object}'},
        'target': {'key': 'target', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMobileAppAssignment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.intent = kwargs.get('intent', None)
        self.settings = kwargs.get('settings', None)
        self.target = kwargs.get('target', None)


class MicrosoftGraphMobileAppCategory(MicrosoftGraphEntity):
    """Contains properties for a single Intune app category.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The name of the app category.
    :type display_name: str
    :param last_modified_date_time: The date and time the mobileAppCategory was last modified.
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMobileAppCategory, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class MicrosoftGraphProxiedDomain(msrest.serialization.Model):
    """Proxied Domain.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param ip_address_or_fqdn: The IP address or FQDN.
    :type ip_address_or_fqdn: str
    :param proxy: Proxy IP or FQDN.
    :type proxy: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'ip_address_or_fqdn': {'key': 'ipAddressOrFQDN', 'type': 'str'},
        'proxy': {'key': 'proxy', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphProxiedDomain, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.ip_address_or_fqdn = kwargs.get('ip_address_or_fqdn', None)
        self.proxy = kwargs.get('proxy', None)


class MicrosoftGraphSettingSource(msrest.serialization.Model):
    """settingSource.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: Not yet documented.
    :type display_name: str
    :param id: Not yet documented.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSettingSource, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.id = kwargs.get('id', None)


class MicrosoftGraphTargetedManagedAppConfiguration(MicrosoftGraphManagedAppConfiguration):
    """Configuration used to deliver a set of custom settings as-is to all users in the targeted security group.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: The date and time the policy was created.
    :type created_date_time: ~datetime.datetime
    :param description: The policy's description.
    :type description: str
    :param display_name: Policy display name.
    :type display_name: str
    :param last_modified_date_time: Last time the policy was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param version: Version of the entity.
    :type version: str
    :param custom_settings: A set of string key and string value pairs to be sent to apps for users
     to whom the configuration is scoped, unalterned by this service.
    :type custom_settings: list[~devices_corporate_management.models.MicrosoftGraphKeyValuePair]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param deployed_app_count: Count of apps to which the current policy is deployed.
    :type deployed_app_count: int
    :param is_assigned: Indicates if the policy is deployed to any inclusion groups or not.
    :type is_assigned: bool
    :param apps: List of apps to which the policy is deployed.
    :type apps: list[~devices_corporate_management.models.MicrosoftGraphManagedMobileApp]
    :param assignments: Navigation property to list of inclusion and exclusion groups to which the
     policy is deployed.
    :type assignments:
     list[~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppPolicyAssignment]
    :param id_deployment_summary_id: Read-only.
    :type id_deployment_summary_id: str
    :param configuration_deployed_user_count: Not yet documented.
    :type configuration_deployed_user_count: int
    :param configuration_deployment_summary_per_app: Not yet documented.
    :type configuration_deployment_summary_per_app:
     list[~devices_corporate_management.models.MicrosoftGraphManagedAppPolicyDeploymentSummaryPerApp]
    :param display_name_deployment_summary_display_name: Not yet documented.
    :type display_name_deployment_summary_display_name: str
    :param last_refresh_time: Not yet documented.
    :type last_refresh_time: ~datetime.datetime
    :param version_deployment_summary_version: Version of the entity.
    :type version_deployment_summary_version: str
    """

    _validation = {
        'deployed_app_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'configuration_deployed_user_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'version': {'key': 'version', 'type': 'str'},
        'custom_settings': {'key': 'customSettings', 'type': '[MicrosoftGraphKeyValuePair]'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'deployed_app_count': {'key': 'deployedAppCount', 'type': 'int'},
        'is_assigned': {'key': 'isAssigned', 'type': 'bool'},
        'apps': {'key': 'apps', 'type': '[MicrosoftGraphManagedMobileApp]'},
        'assignments': {'key': 'assignments', 'type': '[MicrosoftGraphTargetedManagedAppPolicyAssignment]'},
        'id_deployment_summary_id': {'key': 'deploymentSummary.id', 'type': 'str'},
        'configuration_deployed_user_count': {'key': 'deploymentSummary.configurationDeployedUserCount', 'type': 'int'},
        'configuration_deployment_summary_per_app': {'key': 'deploymentSummary.configurationDeploymentSummaryPerApp', 'type': '[MicrosoftGraphManagedAppPolicyDeploymentSummaryPerApp]'},
        'display_name_deployment_summary_display_name': {'key': 'deploymentSummary.displayName', 'type': 'str'},
        'last_refresh_time': {'key': 'deploymentSummary.lastRefreshTime', 'type': 'iso-8601'},
        'version_deployment_summary_version': {'key': 'deploymentSummary.version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTargetedManagedAppConfiguration, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.deployed_app_count = kwargs.get('deployed_app_count', None)
        self.is_assigned = kwargs.get('is_assigned', None)
        self.apps = kwargs.get('apps', None)
        self.assignments = kwargs.get('assignments', None)
        self.id_deployment_summary_id = kwargs.get('id_deployment_summary_id', None)
        self.configuration_deployed_user_count = kwargs.get('configuration_deployed_user_count', None)
        self.configuration_deployment_summary_per_app = kwargs.get('configuration_deployment_summary_per_app', None)
        self.display_name_deployment_summary_display_name = kwargs.get('display_name_deployment_summary_display_name', None)
        self.last_refresh_time = kwargs.get('last_refresh_time', None)
        self.version_deployment_summary_version = kwargs.get('version_deployment_summary_version', None)


class MicrosoftGraphTargetedManagedAppPolicyAssignment(MicrosoftGraphEntity):
    """The type for deployment of groups or apps.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param target: Base type for assignment targets.
    :type target: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'target': {'key': 'target', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTargetedManagedAppPolicyAssignment, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.target = kwargs.get('target', None)


class MicrosoftGraphUserInstallStateSummary(MicrosoftGraphEntity):
    """Contains properties for the installation state summary for a user.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param failed_device_count: Failed Device Count.
    :type failed_device_count: int
    :param installed_device_count: Installed Device Count.
    :type installed_device_count: int
    :param not_installed_device_count: Not installed device count.
    :type not_installed_device_count: int
    :param user_name: User name.
    :type user_name: str
    :param device_states: The install state of the eBook.
    :type device_states:
     list[~devices_corporate_management.models.MicrosoftGraphDeviceInstallState]
    """

    _validation = {
        'failed_device_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'installed_device_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'not_installed_device_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'failed_device_count': {'key': 'failedDeviceCount', 'type': 'int'},
        'installed_device_count': {'key': 'installedDeviceCount', 'type': 'int'},
        'not_installed_device_count': {'key': 'notInstalledDeviceCount', 'type': 'int'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'device_states': {'key': 'deviceStates', 'type': '[MicrosoftGraphDeviceInstallState]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUserInstallStateSummary, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.failed_device_count = kwargs.get('failed_device_count', None)
        self.installed_device_count = kwargs.get('installed_device_count', None)
        self.not_installed_device_count = kwargs.get('not_installed_device_count', None)
        self.user_name = kwargs.get('user_name', None)
        self.device_states = kwargs.get('device_states', None)


class MicrosoftGraphVppToken(MicrosoftGraphEntity):
    """You purchase multiple licenses for iOS apps through the Apple Volume Purchase Program for Business or Education. This involves setting up an Apple VPP account from the Apple website and uploading the Apple VPP Business or Education token to Intune. You can then synchronize your volume purchase information with Intune and track your volume-purchased app use. You can upload multiple Apple VPP Business or Education tokens.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param apple_id: The apple Id associated with the given Apple Volume Purchase Program Token.
    :type apple_id: str
    :param automatically_update_apps: Whether or not apps for the VPP token will be automatically
     updated.
    :type automatically_update_apps: bool
    :param country_or_region: Whether or not apps for the VPP token will be automatically updated.
    :type country_or_region: str
    :param expiration_date_time: The expiration date time of the Apple Volume Purchase Program
     Token.
    :type expiration_date_time: ~datetime.datetime
    :param last_modified_date_time: Last modification date time associated with the Apple Volume
     Purchase Program Token.
    :type last_modified_date_time: ~datetime.datetime
    :param last_sync_date_time: The last time when an application sync was done with the Apple
     volume purchase program service using the Apple Volume Purchase Program Token.
    :type last_sync_date_time: ~datetime.datetime
    :param last_sync_status:  Possible values include: "none", "inProgress", "completed", "failed".
    :type last_sync_status: str or
     ~devices_corporate_management.models.MicrosoftGraphVppTokenSyncStatus
    :param organization_name: The organization associated with the Apple Volume Purchase Program
     Token.
    :type organization_name: str
    :param state:  Possible values include: "unknown", "valid", "expired", "invalid",
     "assignedToExternalMDM".
    :type state: str or ~devices_corporate_management.models.MicrosoftGraphVppTokenState
    :param token: The Apple Volume Purchase Program Token string downloaded from the Apple Volume
     Purchase Program.
    :type token: str
    :param vpp_token_account_type:  Possible values include: "business", "education".
    :type vpp_token_account_type: str or
     ~devices_corporate_management.models.MicrosoftGraphVppTokenAccountType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'apple_id': {'key': 'appleId', 'type': 'str'},
        'automatically_update_apps': {'key': 'automaticallyUpdateApps', 'type': 'bool'},
        'country_or_region': {'key': 'countryOrRegion', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_sync_date_time': {'key': 'lastSyncDateTime', 'type': 'iso-8601'},
        'last_sync_status': {'key': 'lastSyncStatus', 'type': 'str'},
        'organization_name': {'key': 'organizationName', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'token': {'key': 'token', 'type': 'str'},
        'vpp_token_account_type': {'key': 'vppTokenAccountType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphVppToken, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.apple_id = kwargs.get('apple_id', None)
        self.automatically_update_apps = kwargs.get('automatically_update_apps', None)
        self.country_or_region = kwargs.get('country_or_region', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.last_sync_date_time = kwargs.get('last_sync_date_time', None)
        self.last_sync_status = kwargs.get('last_sync_status', None)
        self.organization_name = kwargs.get('organization_name', None)
        self.state = kwargs.get('state', None)
        self.token = kwargs.get('token', None)
        self.vpp_token_account_type = kwargs.get('vpp_token_account_type', None)


class MicrosoftGraphWindowsInformationProtectionApp(msrest.serialization.Model):
    """App for Windows information protection.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param denied: If true, app is denied protection or exemption.
    :type denied: bool
    :param description: The app's description.
    :type description: str
    :param display_name: App display name.
    :type display_name: str
    :param product_name: The product name.
    :type product_name: str
    :param publisher_name: The publisher name.
    :type publisher_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'denied': {'key': 'denied', 'type': 'bool'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'product_name': {'key': 'productName', 'type': 'str'},
        'publisher_name': {'key': 'publisherName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWindowsInformationProtectionApp, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.denied = kwargs.get('denied', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.product_name = kwargs.get('product_name', None)
        self.publisher_name = kwargs.get('publisher_name', None)


class MicrosoftGraphWindowsInformationProtectionAppLockerFile(MicrosoftGraphEntity):
    """Windows Information Protection AppLocker File.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: The friendly name.
    :type display_name: str
    :param file: File as a byte array.
    :type file: bytes
    :param file_hash: SHA256 hash of the file.
    :type file_hash: str
    :param version: Version of the entity.
    :type version: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'file': {'key': 'file', 'type': 'base64'},
        'file_hash': {'key': 'fileHash', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWindowsInformationProtectionAppLockerFile, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.file = kwargs.get('file', None)
        self.file_hash = kwargs.get('file_hash', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphWindowsInformationProtectionDataRecoveryCertificate(msrest.serialization.Model):
    """Windows Information Protection DataRecoveryCertificate.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param certificate: Data recovery Certificate.
    :type certificate: bytes
    :param description: Data recovery Certificate description.
    :type description: str
    :param expiration_date_time: Data recovery Certificate expiration datetime.
    :type expiration_date_time: ~datetime.datetime
    :param subject_name: Data recovery Certificate subject name.
    :type subject_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'certificate': {'key': 'certificate', 'type': 'base64'},
        'description': {'key': 'description', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'subject_name': {'key': 'subjectName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWindowsInformationProtectionDataRecoveryCertificate, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.certificate = kwargs.get('certificate', None)
        self.description = kwargs.get('description', None)
        self.expiration_date_time = kwargs.get('expiration_date_time', None)
        self.subject_name = kwargs.get('subject_name', None)


class MicrosoftGraphWindowsInformationProtectionIpRangeCollection(msrest.serialization.Model):
    """Windows Information Protection IP Range Collection.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: Display name.
    :type display_name: str
    :param ranges: Collection of Internet protocol address ranges.
    :type ranges: list[dict[str, object]]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'ranges': {'key': 'ranges', 'type': '[{object}]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWindowsInformationProtectionIpRangeCollection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.ranges = kwargs.get('ranges', None)


class MicrosoftGraphWindowsInformationProtectionPolicy(MicrosoftGraphWindowsInformationProtection):
    """Policy for Windows information protection without MDM.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param created_date_time: The date and time the policy was created.
    :type created_date_time: ~datetime.datetime
    :param description: The policy's description.
    :type description: str
    :param display_name: Policy display name.
    :type display_name: str
    :param last_modified_date_time: Last time the policy was modified.
    :type last_modified_date_time: ~datetime.datetime
    :param version: Version of the entity.
    :type version: str
    :param azure_rights_management_services_allowed: Specifies whether to allow Azure RMS
     encryption for WIP.
    :type azure_rights_management_services_allowed: bool
    :param data_recovery_certificate: Windows Information Protection DataRecoveryCertificate.
    :type data_recovery_certificate:
     ~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionDataRecoveryCertificate
    :param enforcement_level:  Possible values include: "noProtection", "encryptAndAuditOnly",
     "encryptAuditAndPrompt", "encryptAuditAndBlock".
    :type enforcement_level: str or
     ~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionEnforcementLevel
    :param enterprise_domain: Primary enterprise domain.
    :type enterprise_domain: str
    :param enterprise_internal_proxy_servers: This is the comma-separated list of internal proxy
     servers. For example, '157.54.14.28, 157.54.11.118, 10.202.14.167, 157.53.14.163,
     157.69.210.59'. These proxies have been configured by the admin to connect to specific
     resources on the Internet. They are considered to be enterprise network locations. The proxies
     are only leveraged in configuring the EnterpriseProxiedDomains policy to force traffic to the
     matched domains through these proxies.
    :type enterprise_internal_proxy_servers:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param enterprise_ip_ranges: Sets the enterprise IP ranges that define the computers in the
     enterprise network. Data that comes from those computers will be considered part of the
     enterprise and protected. These locations will be considered a safe destination for enterprise
     data to be shared to.
    :type enterprise_ip_ranges:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionIpRangeCollection]
    :param enterprise_ip_ranges_are_authoritative: Boolean value that tells the client to accept
     the configured list and not to use heuristics to attempt to find other subnets. Default is
     false.
    :type enterprise_ip_ranges_are_authoritative: bool
    :param enterprise_network_domain_names: This is the list of domains that comprise the
     boundaries of the enterprise. Data from one of these domains that is sent to a device will be
     considered enterprise data and protected These locations will be considered a safe destination
     for enterprise data to be shared to.
    :type enterprise_network_domain_names:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param enterprise_protected_domain_names: List of enterprise domains to be protected.
    :type enterprise_protected_domain_names:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param enterprise_proxied_domains: Contains a list of Enterprise resource domains hosted in the
     cloud that need to be protected. Connections to these resources are considered enterprise data.
     If a proxy is paired with a cloud resource, traffic to the cloud resource will be routed
     through the enterprise network via the denoted proxy server (on Port 80). A proxy server used
     for this purpose must also be configured using the EnterpriseInternalProxyServers policy.
    :type enterprise_proxied_domains:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionProxiedDomainCollection]
    :param enterprise_proxy_servers: This is a list of proxy servers. Any server not on this list
     is considered non-enterprise.
    :type enterprise_proxy_servers:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param enterprise_proxy_servers_are_authoritative: Boolean value that tells the client to
     accept the configured list of proxies and not try to detect other work proxies. Default is
     false.
    :type enterprise_proxy_servers_are_authoritative: bool
    :param exempt_apps: Exempt applications can also access enterprise data, but the data handled
     by those applications are not protected. This is because some critical enterprise applications
     may have compatibility problems with encrypted data.
    :type exempt_apps:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionApp]
    :param icons_visible: Determines whether overlays are added to icons for WIP protected files in
     Explorer and enterprise only app tiles in the Start menu. Starting in Windows 10, version 1703
     this setting also configures the visibility of the WIP icon in the title bar of a WIP-protected
     app.
    :type icons_visible: bool
    :param indexing_encrypted_stores_or_items_blocked: This switch is for the Windows Search
     Indexer, to allow or disallow indexing of items.
    :type indexing_encrypted_stores_or_items_blocked: bool
    :param is_assigned: Indicates if the policy is deployed to any inclusion groups or not.
    :type is_assigned: bool
    :param neutral_domain_resources: List of domain names that can used for work or personal
     resource.
    :type neutral_domain_resources:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param protected_apps: Protected applications can access enterprise data and the data handled
     by those applications are protected with encryption.
    :type protected_apps:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionApp]
    :param protection_under_lock_config_required: Specifies whether the protection under lock
     feature (also known as encrypt under pin) should be configured.
    :type protection_under_lock_config_required: bool
    :param revoke_on_unenroll_disabled: This policy controls whether to revoke the WIP keys when a
     device unenrolls from the management service. If set to 1 (Don't revoke keys), the keys will
     not be revoked and the user will continue to have access to protected files after unenrollment.
     If the keys are not revoked, there will be no revoked file cleanup subsequently.
    :type revoke_on_unenroll_disabled: bool
    :param rights_management_services_template_id: TemplateID GUID to use for RMS encryption. The
     RMS template allows the IT admin to configure the details about who has access to RMS-protected
     file and how long they have access.
    :type rights_management_services_template_id: str
    :param smb_auto_encrypted_file_extensions: Specifies a list of file extensions, so that files
     with these extensions are encrypted when copying from an SMB share within the corporate
     boundary.
    :type smb_auto_encrypted_file_extensions:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionResourceCollection]
    :param assignments: Navigation property to list of security groups targeted for policy.
    :type assignments:
     list[~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppPolicyAssignment]
    :param exempt_app_locker_files: Another way to input exempt apps through xml files.
    :type exempt_app_locker_files:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionAppLockerFile]
    :param protected_app_locker_files: Another way to input protected apps through xml files.
    :type protected_app_locker_files:
     list[~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionAppLockerFile]
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param days_without_contact_before_unenroll: Offline interval before app data is wiped (days).
    :type days_without_contact_before_unenroll: int
    :param mdm_enrollment_url: Enrollment url for the MDM.
    :type mdm_enrollment_url: str
    :param minutes_of_inactivity_before_device_lock: Specifies the maximum amount of time (in
     minutes) allowed after the device is idle that will cause the device to become PIN or password
     locked.   Range is an integer X where 0 <= X <= 999.
    :type minutes_of_inactivity_before_device_lock: int
    :param number_of_past_pins_remembered: Integer value that specifies the number of past PINs
     that can be associated to a user account that can't be reused. The largest number you can
     configure for this policy setting is 50. The lowest number you can configure for this policy
     setting is 0. If this policy is set to 0, then storage of previous PINs is not required. This
     node was added in Windows 10, version 1511. Default is 0.
    :type number_of_past_pins_remembered: int
    :param password_maximum_attempt_count: The number of authentication failures allowed before the
     device will be wiped. A value of 0 disables device wipe functionality. Range is an integer X
     where 4 <= X <= 16 for desktop and 0 <= X <= 999 for mobile devices.
    :type password_maximum_attempt_count: int
    :param pin_expiration_days: Integer value specifies the period of time (in days) that a PIN can
     be used before the system requires the user to change it. The largest number you can configure
     for this policy setting is 730. The lowest number you can configure for this policy setting is
     0. If this policy is set to 0, then the user's PIN will never expire. This node was added in
     Windows 10, version 1511. Default is 0.
    :type pin_expiration_days: int
    :param pin_lowercase_letters:  Possible values include: "notAllow", "requireAtLeastOne",
     "allow".
    :type pin_lowercase_letters: str or
     ~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionPinCharacterRequirements
    :param pin_minimum_length: Integer value that sets the minimum number of characters required
     for the PIN. Default value is 4. The lowest number you can configure for this policy setting is
     4. The largest number you can configure must be less than the number configured in the Maximum
     PIN length policy setting or the number 127, whichever is the lowest.
    :type pin_minimum_length: int
    :param pin_special_characters:  Possible values include: "notAllow", "requireAtLeastOne",
     "allow".
    :type pin_special_characters: str or
     ~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionPinCharacterRequirements
    :param pin_uppercase_letters:  Possible values include: "notAllow", "requireAtLeastOne",
     "allow".
    :type pin_uppercase_letters: str or
     ~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionPinCharacterRequirements
    :param revoke_on_mdm_handoff_disabled: New property in RS2, pending documentation.
    :type revoke_on_mdm_handoff_disabled: bool
    :param windows_hello_for_business_blocked: Boolean value that sets Windows Hello for Business
     as a method for signing into Windows.
    :type windows_hello_for_business_blocked: bool
    """

    _validation = {
        'days_without_contact_before_unenroll': {'maximum': 2147483647, 'minimum': -2147483648},
        'minutes_of_inactivity_before_device_lock': {'maximum': 2147483647, 'minimum': -2147483648},
        'number_of_past_pins_remembered': {'maximum': 2147483647, 'minimum': -2147483648},
        'password_maximum_attempt_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'pin_expiration_days': {'maximum': 2147483647, 'minimum': -2147483648},
        'pin_minimum_length': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'version': {'key': 'version', 'type': 'str'},
        'azure_rights_management_services_allowed': {'key': 'azureRightsManagementServicesAllowed', 'type': 'bool'},
        'data_recovery_certificate': {'key': 'dataRecoveryCertificate', 'type': 'MicrosoftGraphWindowsInformationProtectionDataRecoveryCertificate'},
        'enforcement_level': {'key': 'enforcementLevel', 'type': 'str'},
        'enterprise_domain': {'key': 'enterpriseDomain', 'type': 'str'},
        'enterprise_internal_proxy_servers': {'key': 'enterpriseInternalProxyServers', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'enterprise_ip_ranges': {'key': 'enterpriseIPRanges', 'type': '[MicrosoftGraphWindowsInformationProtectionIpRangeCollection]'},
        'enterprise_ip_ranges_are_authoritative': {'key': 'enterpriseIPRangesAreAuthoritative', 'type': 'bool'},
        'enterprise_network_domain_names': {'key': 'enterpriseNetworkDomainNames', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'enterprise_protected_domain_names': {'key': 'enterpriseProtectedDomainNames', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'enterprise_proxied_domains': {'key': 'enterpriseProxiedDomains', 'type': '[MicrosoftGraphWindowsInformationProtectionProxiedDomainCollection]'},
        'enterprise_proxy_servers': {'key': 'enterpriseProxyServers', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'enterprise_proxy_servers_are_authoritative': {'key': 'enterpriseProxyServersAreAuthoritative', 'type': 'bool'},
        'exempt_apps': {'key': 'exemptApps', 'type': '[MicrosoftGraphWindowsInformationProtectionApp]'},
        'icons_visible': {'key': 'iconsVisible', 'type': 'bool'},
        'indexing_encrypted_stores_or_items_blocked': {'key': 'indexingEncryptedStoresOrItemsBlocked', 'type': 'bool'},
        'is_assigned': {'key': 'isAssigned', 'type': 'bool'},
        'neutral_domain_resources': {'key': 'neutralDomainResources', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'protected_apps': {'key': 'protectedApps', 'type': '[MicrosoftGraphWindowsInformationProtectionApp]'},
        'protection_under_lock_config_required': {'key': 'protectionUnderLockConfigRequired', 'type': 'bool'},
        'revoke_on_unenroll_disabled': {'key': 'revokeOnUnenrollDisabled', 'type': 'bool'},
        'rights_management_services_template_id': {'key': 'rightsManagementServicesTemplateId', 'type': 'str'},
        'smb_auto_encrypted_file_extensions': {'key': 'smbAutoEncryptedFileExtensions', 'type': '[MicrosoftGraphWindowsInformationProtectionResourceCollection]'},
        'assignments': {'key': 'assignments', 'type': '[MicrosoftGraphTargetedManagedAppPolicyAssignment]'},
        'exempt_app_locker_files': {'key': 'exemptAppLockerFiles', 'type': '[MicrosoftGraphWindowsInformationProtectionAppLockerFile]'},
        'protected_app_locker_files': {'key': 'protectedAppLockerFiles', 'type': '[MicrosoftGraphWindowsInformationProtectionAppLockerFile]'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'days_without_contact_before_unenroll': {'key': 'daysWithoutContactBeforeUnenroll', 'type': 'int'},
        'mdm_enrollment_url': {'key': 'mdmEnrollmentUrl', 'type': 'str'},
        'minutes_of_inactivity_before_device_lock': {'key': 'minutesOfInactivityBeforeDeviceLock', 'type': 'int'},
        'number_of_past_pins_remembered': {'key': 'numberOfPastPinsRemembered', 'type': 'int'},
        'password_maximum_attempt_count': {'key': 'passwordMaximumAttemptCount', 'type': 'int'},
        'pin_expiration_days': {'key': 'pinExpirationDays', 'type': 'int'},
        'pin_lowercase_letters': {'key': 'pinLowercaseLetters', 'type': 'str'},
        'pin_minimum_length': {'key': 'pinMinimumLength', 'type': 'int'},
        'pin_special_characters': {'key': 'pinSpecialCharacters', 'type': 'str'},
        'pin_uppercase_letters': {'key': 'pinUppercaseLetters', 'type': 'str'},
        'revoke_on_mdm_handoff_disabled': {'key': 'revokeOnMdmHandoffDisabled', 'type': 'bool'},
        'windows_hello_for_business_blocked': {'key': 'windowsHelloForBusinessBlocked', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWindowsInformationProtectionPolicy, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.days_without_contact_before_unenroll = kwargs.get('days_without_contact_before_unenroll', None)
        self.mdm_enrollment_url = kwargs.get('mdm_enrollment_url', None)
        self.minutes_of_inactivity_before_device_lock = kwargs.get('minutes_of_inactivity_before_device_lock', None)
        self.number_of_past_pins_remembered = kwargs.get('number_of_past_pins_remembered', None)
        self.password_maximum_attempt_count = kwargs.get('password_maximum_attempt_count', None)
        self.pin_expiration_days = kwargs.get('pin_expiration_days', None)
        self.pin_lowercase_letters = kwargs.get('pin_lowercase_letters', None)
        self.pin_minimum_length = kwargs.get('pin_minimum_length', None)
        self.pin_special_characters = kwargs.get('pin_special_characters', None)
        self.pin_uppercase_letters = kwargs.get('pin_uppercase_letters', None)
        self.revoke_on_mdm_handoff_disabled = kwargs.get('revoke_on_mdm_handoff_disabled', None)
        self.windows_hello_for_business_blocked = kwargs.get('windows_hello_for_business_blocked', None)


class MicrosoftGraphWindowsInformationProtectionProxiedDomainCollection(msrest.serialization.Model):
    """Windows Information Protection Proxied Domain Collection.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: Display name.
    :type display_name: str
    :param proxied_domains: Collection of proxied domains.
    :type proxied_domains: list[~devices_corporate_management.models.MicrosoftGraphProxiedDomain]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'proxied_domains': {'key': 'proxiedDomains', 'type': '[MicrosoftGraphProxiedDomain]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWindowsInformationProtectionProxiedDomainCollection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.proxied_domains = kwargs.get('proxied_domains', None)


class MicrosoftGraphWindowsInformationProtectionResourceCollection(msrest.serialization.Model):
    """Windows Information Protection Resource Collection.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param display_name: Display name.
    :type display_name: str
    :param resources: Collection of resources.
    :type resources: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'resources': {'key': 'resources', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWindowsInformationProtectionResourceCollection, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.resources = kwargs.get('resources', None)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~devices_corporate_management.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.error = kwargs['error']


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~devices_corporate_management.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)


class Paths12NzrcrDeviceappmanagementMobileappsMobileappIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths12NzrcrDeviceappmanagementMobileappsMobileappIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param mobile_app_assignments:
    :type mobile_app_assignments:
     list[~devices_corporate_management.models.MicrosoftGraphMobileAppAssignment]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'mobile_app_assignments': {'key': 'mobileAppAssignments', 'type': '[MicrosoftGraphMobileAppAssignment]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Paths12NzrcrDeviceappmanagementMobileappsMobileappIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.mobile_app_assignments = kwargs.get('mobile_app_assignments', None)


class Paths14Nj8OcDeviceappmanagementManagedapppoliciesManagedapppolicyIdMicrosoftGraphTargetappsPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths14Nj8OcDeviceappmanagementManagedapppoliciesManagedapppolicyIdMicrosoftGraphTargetappsPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param apps:
    :type apps: list[~devices_corporate_management.models.MicrosoftGraphManagedMobileApp]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'apps': {'key': 'apps', 'type': '[MicrosoftGraphManagedMobileApp]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Paths14Nj8OcDeviceappmanagementManagedapppoliciesManagedapppolicyIdMicrosoftGraphTargetappsPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.apps = kwargs.get('apps', None)


class Paths1Mv9GnvDeviceappmanagementManagedappregistrationsManagedappregistrationIdIntendedpoliciesManagedapppolicyIdMicrosoftGraphTargetappsPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths1Mv9GnvDeviceappmanagementManagedappregistrationsManagedappregistrationIdIntendedpoliciesManagedapppolicyIdMicrosoftGraphTargetappsPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param apps:
    :type apps: list[~devices_corporate_management.models.MicrosoftGraphManagedMobileApp]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'apps': {'key': 'apps', 'type': '[MicrosoftGraphManagedMobileApp]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Paths1Mv9GnvDeviceappmanagementManagedappregistrationsManagedappregistrationIdIntendedpoliciesManagedapppolicyIdMicrosoftGraphTargetappsPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.apps = kwargs.get('apps', None)


class Paths1Pwcjs5DeviceappmanagementMobileappconfigurationsManageddevicemobileappconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """Paths1Pwcjs5DeviceappmanagementMobileappconfigurationsManageddevicemobileappconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param assignments:
    :type assignments:
     list[~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'assignments': {'key': 'assignments', 'type': '[MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Paths1Pwcjs5DeviceappmanagementMobileappconfigurationsManageddevicemobileappconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.assignments = kwargs.get('assignments', None)


class PathsVf2Dh9DeviceappmanagementManagedappregistrationsManagedappregistrationIdAppliedpoliciesManagedapppolicyIdMicrosoftGraphTargetappsPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsVf2Dh9DeviceappmanagementManagedappregistrationsManagedappregistrationIdAppliedpoliciesManagedapppolicyIdMicrosoftGraphTargetappsPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param apps:
    :type apps: list[~devices_corporate_management.models.MicrosoftGraphManagedMobileApp]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'apps': {'key': 'apps', 'type': '[MicrosoftGraphManagedMobileApp]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PathsVf2Dh9DeviceappmanagementManagedappregistrationsManagedappregistrationIdAppliedpoliciesManagedapppolicyIdMicrosoftGraphTargetappsPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.apps = kwargs.get('apps', None)


class PathsWfdti0DeviceappmanagementManagedebooksManagedebookIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsWfdti0DeviceappmanagementManagedebooksManagedebookIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param managed_e_book_assignments:
    :type managed_e_book_assignments:
     list[~devices_corporate_management.models.MicrosoftGraphManagedEBookAssignment]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'managed_e_book_assignments': {'key': 'managedEBookAssignments', 'type': '[MicrosoftGraphManagedEBookAssignment]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PathsWfdti0DeviceappmanagementManagedebooksManagedebookIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.managed_e_book_assignments = kwargs.get('managed_e_book_assignments', None)


class PathsXzr66BDeviceappmanagementTargetedmanagedappconfigurationsTargetedmanagedappconfigurationIdMicrosoftGraphTargetappsPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsXzr66BDeviceappmanagementTargetedmanagedappconfigurationsTargetedmanagedappconfigurationIdMicrosoftGraphTargetappsPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param apps:
    :type apps: list[~devices_corporate_management.models.MicrosoftGraphManagedMobileApp]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'apps': {'key': 'apps', 'type': '[MicrosoftGraphManagedMobileApp]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PathsXzr66BDeviceappmanagementTargetedmanagedappconfigurationsTargetedmanagedappconfigurationIdMicrosoftGraphTargetappsPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.apps = kwargs.get('apps', None)


class PathsZxn05FDeviceappmanagementTargetedmanagedappconfigurationsTargetedmanagedappconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsZxn05FDeviceappmanagementTargetedmanagedappconfigurationsTargetedmanagedappconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param assignments:
    :type assignments:
     list[~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppPolicyAssignment]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'assignments': {'key': 'assignments', 'type': '[MicrosoftGraphTargetedManagedAppPolicyAssignment]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PathsZxn05FDeviceappmanagementTargetedmanagedappconfigurationsTargetedmanagedappconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.assignments = kwargs.get('assignments', None)
