# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class DeviceAppManagementMobileAppConfigurationOperations:
    """DeviceAppManagementMobileAppConfigurationOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~devices_corporate_management.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_assignment(
        self,
        managed_device_mobile_app_configuration_id: str,
        orderby: Optional[List[Union[str, "models.Enum98"]]] = None,
        select: Optional[List[Union[str, "models.Enum99"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfManagedDeviceMobileAppConfigurationAssignment"]:
        """Get assignments from deviceAppManagement.

        Get assignments from deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum98]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum99]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfManagedDeviceMobileAppConfigurationAssignment or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfManagedDeviceMobileAppConfigurationAssignment]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfManagedDeviceMobileAppConfigurationAssignment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_assignment.metadata['url']  # type: ignore
                path_format_arguments = {
                    'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfManagedDeviceMobileAppConfigurationAssignment', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_assignment.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/assignments'}  # type: ignore

    async def create_assignment(
        self,
        managed_device_mobile_app_configuration_id: str,
        id: Optional[str] = None,
        target: Optional[Dict[str, object]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment":
        """Create new navigation property to assignments for deviceAppManagement.

        Create new navigation property to assignments for deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param id: Read-only.
        :type id: str
        :param target: Base type for assignment targets.
        :type target: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment(id=id, target=target)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_assignment.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/assignments'}  # type: ignore

    async def get_assignment(
        self,
        managed_device_mobile_app_configuration_id: str,
        managed_device_mobile_app_configuration_assignment_id: str,
        select: Optional[List[Union[str, "models.Enum100"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment":
        """Get assignments from deviceAppManagement.

        Get assignments from deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param managed_device_mobile_app_configuration_assignment_id: key: id of
         managedDeviceMobileAppConfigurationAssignment.
        :type managed_device_mobile_app_configuration_assignment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum100]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
            'managedDeviceMobileAppConfigurationAssignment-id': self._serialize.url("managed_device_mobile_app_configuration_assignment_id", managed_device_mobile_app_configuration_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_assignment.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/assignments/{managedDeviceMobileAppConfigurationAssignment-id}'}  # type: ignore

    async def update_assignment(
        self,
        managed_device_mobile_app_configuration_id: str,
        managed_device_mobile_app_configuration_assignment_id: str,
        id: Optional[str] = None,
        target: Optional[Dict[str, object]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property assignments in deviceAppManagement.

        Update the navigation property assignments in deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param managed_device_mobile_app_configuration_assignment_id: key: id of
         managedDeviceMobileAppConfigurationAssignment.
        :type managed_device_mobile_app_configuration_assignment_id: str
        :param id: Read-only.
        :type id: str
        :param target: Base type for assignment targets.
        :type target: dict[str, object]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment(id=id, target=target)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
            'managedDeviceMobileAppConfigurationAssignment-id': self._serialize.url("managed_device_mobile_app_configuration_assignment_id", managed_device_mobile_app_configuration_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_assignment.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/assignments/{managedDeviceMobileAppConfigurationAssignment-id}'}  # type: ignore

    async def delete_assignment(
        self,
        managed_device_mobile_app_configuration_id: str,
        managed_device_mobile_app_configuration_assignment_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property assignments for deviceAppManagement.

        Delete navigation property assignments for deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param managed_device_mobile_app_configuration_assignment_id: key: id of
         managedDeviceMobileAppConfigurationAssignment.
        :type managed_device_mobile_app_configuration_assignment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
            'managedDeviceMobileAppConfigurationAssignment-id': self._serialize.url("managed_device_mobile_app_configuration_assignment_id", managed_device_mobile_app_configuration_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_assignment.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/assignments/{managedDeviceMobileAppConfigurationAssignment-id}'}  # type: ignore

    def list_device_statuses(
        self,
        managed_device_mobile_app_configuration_id: str,
        orderby: Optional[List[Union[str, "models.Enum101"]]] = None,
        select: Optional[List[Union[str, "models.Enum102"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfManagedDeviceMobileAppConfigurationDeviceStatus"]:
        """Get deviceStatuses from deviceAppManagement.

        Get deviceStatuses from deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum101]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum102]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfManagedDeviceMobileAppConfigurationDeviceStatus or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfManagedDeviceMobileAppConfigurationDeviceStatus]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfManagedDeviceMobileAppConfigurationDeviceStatus"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_device_statuses.metadata['url']  # type: ignore
                path_format_arguments = {
                    'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfManagedDeviceMobileAppConfigurationDeviceStatus', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_device_statuses.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatuses'}  # type: ignore

    async def create_device_statuses(
        self,
        managed_device_mobile_app_configuration_id: str,
        id: Optional[str] = None,
        compliance_grace_period_expiration_date_time: Optional[datetime.datetime] = None,
        device_display_name: Optional[str] = None,
        device_model: Optional[str] = None,
        last_reported_date_time: Optional[datetime.datetime] = None,
        status: Optional[Union[str, "models.MicrosoftGraphComplianceStatus"]] = None,
        user_name: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus":
        """Create new navigation property to deviceStatuses for deviceAppManagement.

        Create new navigation property to deviceStatuses for deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param id: Read-only.
        :type id: str
        :param compliance_grace_period_expiration_date_time: The DateTime when device compliance grace
         period expires.
        :type compliance_grace_period_expiration_date_time: ~datetime.datetime
        :param device_display_name: Device name of the DevicePolicyStatus.
        :type device_display_name: str
        :param device_model: The device model that is being reported.
        :type device_model: str
        :param last_reported_date_time: Last modified date time of the policy report.
        :type last_reported_date_time: ~datetime.datetime
        :param status:
        :type status: str or ~devices_corporate_management.models.MicrosoftGraphComplianceStatus
        :param user_name: The User Name that is being reported.
        :type user_name: str
        :param user_principal_name: UserPrincipalName.
        :type user_principal_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus(id=id, compliance_grace_period_expiration_date_time=compliance_grace_period_expiration_date_time, device_display_name=device_display_name, device_model=device_model, last_reported_date_time=last_reported_date_time, status=status, user_name=user_name, user_principal_name=user_principal_name)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_device_statuses.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_device_statuses.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatuses'}  # type: ignore

    async def get_device_statuses(
        self,
        managed_device_mobile_app_configuration_id: str,
        managed_device_mobile_app_configuration_device_status_id: str,
        select: Optional[List[Union[str, "models.Enum103"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus":
        """Get deviceStatuses from deviceAppManagement.

        Get deviceStatuses from deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param managed_device_mobile_app_configuration_device_status_id: key: id of
         managedDeviceMobileAppConfigurationDeviceStatus.
        :type managed_device_mobile_app_configuration_device_status_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum103]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_device_statuses.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
            'managedDeviceMobileAppConfigurationDeviceStatus-id': self._serialize.url("managed_device_mobile_app_configuration_device_status_id", managed_device_mobile_app_configuration_device_status_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_device_statuses.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatuses/{managedDeviceMobileAppConfigurationDeviceStatus-id}'}  # type: ignore

    async def update_device_statuses(
        self,
        managed_device_mobile_app_configuration_id: str,
        managed_device_mobile_app_configuration_device_status_id: str,
        id: Optional[str] = None,
        compliance_grace_period_expiration_date_time: Optional[datetime.datetime] = None,
        device_display_name: Optional[str] = None,
        device_model: Optional[str] = None,
        last_reported_date_time: Optional[datetime.datetime] = None,
        status: Optional[Union[str, "models.MicrosoftGraphComplianceStatus"]] = None,
        user_name: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property deviceStatuses in deviceAppManagement.

        Update the navigation property deviceStatuses in deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param managed_device_mobile_app_configuration_device_status_id: key: id of
         managedDeviceMobileAppConfigurationDeviceStatus.
        :type managed_device_mobile_app_configuration_device_status_id: str
        :param id: Read-only.
        :type id: str
        :param compliance_grace_period_expiration_date_time: The DateTime when device compliance grace
         period expires.
        :type compliance_grace_period_expiration_date_time: ~datetime.datetime
        :param device_display_name: Device name of the DevicePolicyStatus.
        :type device_display_name: str
        :param device_model: The device model that is being reported.
        :type device_model: str
        :param last_reported_date_time: Last modified date time of the policy report.
        :type last_reported_date_time: ~datetime.datetime
        :param status:
        :type status: str or ~devices_corporate_management.models.MicrosoftGraphComplianceStatus
        :param user_name: The User Name that is being reported.
        :type user_name: str
        :param user_principal_name: UserPrincipalName.
        :type user_principal_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus(id=id, compliance_grace_period_expiration_date_time=compliance_grace_period_expiration_date_time, device_display_name=device_display_name, device_model=device_model, last_reported_date_time=last_reported_date_time, status=status, user_name=user_name, user_principal_name=user_principal_name)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_device_statuses.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
            'managedDeviceMobileAppConfigurationDeviceStatus-id': self._serialize.url("managed_device_mobile_app_configuration_device_status_id", managed_device_mobile_app_configuration_device_status_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceStatus')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_device_statuses.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatuses/{managedDeviceMobileAppConfigurationDeviceStatus-id}'}  # type: ignore

    async def delete_device_statuses(
        self,
        managed_device_mobile_app_configuration_id: str,
        managed_device_mobile_app_configuration_device_status_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property deviceStatuses for deviceAppManagement.

        Delete navigation property deviceStatuses for deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param managed_device_mobile_app_configuration_device_status_id: key: id of
         managedDeviceMobileAppConfigurationDeviceStatus.
        :type managed_device_mobile_app_configuration_device_status_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_device_statuses.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
            'managedDeviceMobileAppConfigurationDeviceStatus-id': self._serialize.url("managed_device_mobile_app_configuration_device_status_id", managed_device_mobile_app_configuration_device_status_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_device_statuses.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatuses/{managedDeviceMobileAppConfigurationDeviceStatus-id}'}  # type: ignore

    async def get_device_status_summary(
        self,
        managed_device_mobile_app_configuration_id: str,
        select: Optional[List[Union[str, "models.Enum104"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary":
        """Get deviceStatusSummary from deviceAppManagement.

        Get deviceStatusSummary from deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum104]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_device_status_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_device_status_summary.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatusSummary'}  # type: ignore

    async def update_device_status_summary(
        self,
        managed_device_mobile_app_configuration_id: str,
        id: Optional[str] = None,
        configuration_version: Optional[int] = None,
        error_count: Optional[int] = None,
        failed_count: Optional[int] = None,
        last_update_date_time: Optional[datetime.datetime] = None,
        not_applicable_count: Optional[int] = None,
        pending_count: Optional[int] = None,
        success_count: Optional[int] = None,
        **kwargs
    ) -> None:
        """Update the navigation property deviceStatusSummary in deviceAppManagement.

        Update the navigation property deviceStatusSummary in deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param id: Read-only.
        :type id: str
        :param configuration_version: Version of the policy for that overview.
        :type configuration_version: int
        :param error_count: Number of error devices.
        :type error_count: int
        :param failed_count: Number of failed devices.
        :type failed_count: int
        :param last_update_date_time: Last update time.
        :type last_update_date_time: ~datetime.datetime
        :param not_applicable_count: Number of not applicable devices.
        :type not_applicable_count: int
        :param pending_count: Number of pending devices.
        :type pending_count: int
        :param success_count: Number of succeeded devices.
        :type success_count: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary(id=id, configuration_version=configuration_version, error_count=error_count, failed_count=failed_count, last_update_date_time=last_update_date_time, not_applicable_count=not_applicable_count, pending_count=pending_count, success_count=success_count)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_device_status_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphManagedDeviceMobileAppConfigurationDeviceSummary')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_device_status_summary.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatusSummary'}  # type: ignore

    async def delete_device_status_summary(
        self,
        managed_device_mobile_app_configuration_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property deviceStatusSummary for deviceAppManagement.

        Delete navigation property deviceStatusSummary for deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_device_status_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_device_status_summary.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/deviceStatusSummary'}  # type: ignore

    async def assign(
        self,
        managed_device_mobile_app_configuration_id: str,
        assignments: Optional[List["models.MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment"]] = None,
        **kwargs
    ) -> None:
        """Invoke action assign.

        Invoke action assign.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param assignments:
        :type assignments: list[~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationAssignment]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths1Pwcjs5DeviceappmanagementMobileappconfigurationsManageddevicemobileappconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema(assignments=assignments)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.assign.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths1Pwcjs5DeviceappmanagementMobileappconfigurationsManageddevicemobileappconfigurationIdMicrosoftGraphAssignPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    assign.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/microsoft.graph.assign'}  # type: ignore

    def list_user_statuses(
        self,
        managed_device_mobile_app_configuration_id: str,
        orderby: Optional[List[Union[str, "models.Enum105"]]] = None,
        select: Optional[List[Union[str, "models.Enum106"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfManagedDeviceMobileAppConfigurationUserStatus"]:
        """Get userStatuses from deviceAppManagement.

        Get userStatuses from deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum105]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum106]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfManagedDeviceMobileAppConfigurationUserStatus or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfManagedDeviceMobileAppConfigurationUserStatus]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfManagedDeviceMobileAppConfigurationUserStatus"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_user_statuses.metadata['url']  # type: ignore
                path_format_arguments = {
                    'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfManagedDeviceMobileAppConfigurationUserStatus', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_user_statuses.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatuses'}  # type: ignore

    async def create_user_statuses(
        self,
        managed_device_mobile_app_configuration_id: str,
        id: Optional[str] = None,
        devices_count: Optional[int] = None,
        last_reported_date_time: Optional[datetime.datetime] = None,
        status: Optional[Union[str, "models.MicrosoftGraphComplianceStatus"]] = None,
        user_display_name: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus":
        """Create new navigation property to userStatuses for deviceAppManagement.

        Create new navigation property to userStatuses for deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param id: Read-only.
        :type id: str
        :param devices_count: Devices count for that user.
        :type devices_count: int
        :param last_reported_date_time: Last modified date time of the policy report.
        :type last_reported_date_time: ~datetime.datetime
        :param status:
        :type status: str or ~devices_corporate_management.models.MicrosoftGraphComplianceStatus
        :param user_display_name: User name of the DevicePolicyStatus.
        :type user_display_name: str
        :param user_principal_name: UserPrincipalName.
        :type user_principal_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus(id=id, devices_count=devices_count, last_reported_date_time=last_reported_date_time, status=status, user_display_name=user_display_name, user_principal_name=user_principal_name)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_user_statuses.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_user_statuses.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatuses'}  # type: ignore

    async def get_user_statuses(
        self,
        managed_device_mobile_app_configuration_id: str,
        managed_device_mobile_app_configuration_user_status_id: str,
        select: Optional[List[Union[str, "models.Enum107"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus":
        """Get userStatuses from deviceAppManagement.

        Get userStatuses from deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param managed_device_mobile_app_configuration_user_status_id: key: id of
         managedDeviceMobileAppConfigurationUserStatus.
        :type managed_device_mobile_app_configuration_user_status_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum107]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_user_statuses.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
            'managedDeviceMobileAppConfigurationUserStatus-id': self._serialize.url("managed_device_mobile_app_configuration_user_status_id", managed_device_mobile_app_configuration_user_status_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_user_statuses.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatuses/{managedDeviceMobileAppConfigurationUserStatus-id}'}  # type: ignore

    async def update_user_statuses(
        self,
        managed_device_mobile_app_configuration_id: str,
        managed_device_mobile_app_configuration_user_status_id: str,
        id: Optional[str] = None,
        devices_count: Optional[int] = None,
        last_reported_date_time: Optional[datetime.datetime] = None,
        status: Optional[Union[str, "models.MicrosoftGraphComplianceStatus"]] = None,
        user_display_name: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property userStatuses in deviceAppManagement.

        Update the navigation property userStatuses in deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param managed_device_mobile_app_configuration_user_status_id: key: id of
         managedDeviceMobileAppConfigurationUserStatus.
        :type managed_device_mobile_app_configuration_user_status_id: str
        :param id: Read-only.
        :type id: str
        :param devices_count: Devices count for that user.
        :type devices_count: int
        :param last_reported_date_time: Last modified date time of the policy report.
        :type last_reported_date_time: ~datetime.datetime
        :param status:
        :type status: str or ~devices_corporate_management.models.MicrosoftGraphComplianceStatus
        :param user_display_name: User name of the DevicePolicyStatus.
        :type user_display_name: str
        :param user_principal_name: UserPrincipalName.
        :type user_principal_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus(id=id, devices_count=devices_count, last_reported_date_time=last_reported_date_time, status=status, user_display_name=user_display_name, user_principal_name=user_principal_name)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_user_statuses.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
            'managedDeviceMobileAppConfigurationUserStatus-id': self._serialize.url("managed_device_mobile_app_configuration_user_status_id", managed_device_mobile_app_configuration_user_status_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphManagedDeviceMobileAppConfigurationUserStatus')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_user_statuses.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatuses/{managedDeviceMobileAppConfigurationUserStatus-id}'}  # type: ignore

    async def delete_user_statuses(
        self,
        managed_device_mobile_app_configuration_id: str,
        managed_device_mobile_app_configuration_user_status_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property userStatuses for deviceAppManagement.

        Delete navigation property userStatuses for deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param managed_device_mobile_app_configuration_user_status_id: key: id of
         managedDeviceMobileAppConfigurationUserStatus.
        :type managed_device_mobile_app_configuration_user_status_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_user_statuses.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
            'managedDeviceMobileAppConfigurationUserStatus-id': self._serialize.url("managed_device_mobile_app_configuration_user_status_id", managed_device_mobile_app_configuration_user_status_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_user_statuses.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatuses/{managedDeviceMobileAppConfigurationUserStatus-id}'}  # type: ignore

    async def get_user_status_summary(
        self,
        managed_device_mobile_app_configuration_id: str,
        select: Optional[List[Union[str, "models.Enum108"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary":
        """Get userStatusSummary from deviceAppManagement.

        Get userStatusSummary from deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum108]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_user_status_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_user_status_summary.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatusSummary'}  # type: ignore

    async def update_user_status_summary(
        self,
        managed_device_mobile_app_configuration_id: str,
        id: Optional[str] = None,
        configuration_version: Optional[int] = None,
        error_count: Optional[int] = None,
        failed_count: Optional[int] = None,
        last_update_date_time: Optional[datetime.datetime] = None,
        not_applicable_count: Optional[int] = None,
        pending_count: Optional[int] = None,
        success_count: Optional[int] = None,
        **kwargs
    ) -> None:
        """Update the navigation property userStatusSummary in deviceAppManagement.

        Update the navigation property userStatusSummary in deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param id: Read-only.
        :type id: str
        :param configuration_version: Version of the policy for that overview.
        :type configuration_version: int
        :param error_count: Number of error Users.
        :type error_count: int
        :param failed_count: Number of failed Users.
        :type failed_count: int
        :param last_update_date_time: Last update time.
        :type last_update_date_time: ~datetime.datetime
        :param not_applicable_count: Number of not applicable users.
        :type not_applicable_count: int
        :param pending_count: Number of pending Users.
        :type pending_count: int
        :param success_count: Number of succeeded Users.
        :type success_count: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary(id=id, configuration_version=configuration_version, error_count=error_count, failed_count=failed_count, last_update_date_time=last_update_date_time, not_applicable_count=not_applicable_count, pending_count=pending_count, success_count=success_count)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_user_status_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphManagedDeviceMobileAppConfigurationUserSummary')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_user_status_summary.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatusSummary'}  # type: ignore

    async def delete_user_status_summary(
        self,
        managed_device_mobile_app_configuration_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property userStatusSummary for deviceAppManagement.

        Delete navigation property userStatusSummary for deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_user_status_summary.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_user_status_summary.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/userStatusSummary'}  # type: ignore
