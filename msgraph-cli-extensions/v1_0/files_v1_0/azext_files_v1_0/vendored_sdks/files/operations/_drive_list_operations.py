# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class DriveListOperations(object):
    """DriveListOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~files.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_column(
        self,
        drive_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum76"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum77"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfColumnDefinition"]
        """Get columns from drives.

        Get columns from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~files.models.Enum76]
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum77]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfColumnDefinition or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~files.models.CollectionOfColumnDefinition]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfColumnDefinition"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_column.metadata['url']  # type: ignore
                path_format_arguments = {
                    'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfColumnDefinition', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_column.metadata = {'url': '/drives/{drive-id}/list/columns'}  # type: ignore

    def create_column(
        self,
        drive_id,  # type: str
        id=None,  # type: Optional[str]
        boolean=None,  # type: Optional[Dict[str, object]]
        calculated=None,  # type: Optional["models.MicrosoftGraphCalculatedColumn"]
        choice=None,  # type: Optional["models.MicrosoftGraphChoiceColumn"]
        column_group=None,  # type: Optional[str]
        date_time=None,  # type: Optional["models.MicrosoftGraphDateTimeColumn"]
        default_value=None,  # type: Optional["models.MicrosoftGraphDefaultColumnValue"]
        description=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        enforce_unique_values=None,  # type: Optional[bool]
        geolocation=None,  # type: Optional[Dict[str, object]]
        hidden=None,  # type: Optional[bool]
        indexed=None,  # type: Optional[bool]
        lookup=None,  # type: Optional["models.MicrosoftGraphLookupColumn"]
        name=None,  # type: Optional[str]
        number=None,  # type: Optional["models.MicrosoftGraphNumberColumn"]
        person_or_group=None,  # type: Optional["models.MicrosoftGraphPersonOrGroupColumn"]
        read_only=None,  # type: Optional[bool]
        required=None,  # type: Optional[bool]
        text=None,  # type: Optional["models.MicrosoftGraphTextColumn"]
        locale=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphColumnDefinition"
        """Create new navigation property to columns for drives.

        Create new navigation property to columns for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param id: Read-only.
        :type id: str
        :param boolean: booleanColumn.
        :type boolean: dict[str, object]
        :param calculated: calculatedColumn.
        :type calculated: ~files.models.MicrosoftGraphCalculatedColumn
        :param choice: choiceColumn.
        :type choice: ~files.models.MicrosoftGraphChoiceColumn
        :param column_group: For site columns, the name of the group this column belongs to. Helps
         organize related columns.
        :type column_group: str
        :param date_time: dateTimeColumn.
        :type date_time: ~files.models.MicrosoftGraphDateTimeColumn
        :param default_value: defaultColumnValue.
        :type default_value: ~files.models.MicrosoftGraphDefaultColumnValue
        :param description: The user-facing description of the column.
        :type description: str
        :param display_name: The user-facing name of the column.
        :type display_name: str
        :param enforce_unique_values: If true, no two list items may have the same value for this
         column.
        :type enforce_unique_values: bool
        :param geolocation: geolocationColumn.
        :type geolocation: dict[str, object]
        :param hidden: Specifies whether the column is displayed in the user interface.
        :type hidden: bool
        :param indexed: Specifies whether the column values can used for sorting and searching.
        :type indexed: bool
        :param lookup: lookupColumn.
        :type lookup: ~files.models.MicrosoftGraphLookupColumn
        :param name: The API-facing name of the column as it appears in the [fields][] on a
         [listItem][]. For the user-facing name, see displayName.
        :type name: str
        :param number: numberColumn.
        :type number: ~files.models.MicrosoftGraphNumberColumn
        :param person_or_group: personOrGroupColumn.
        :type person_or_group: ~files.models.MicrosoftGraphPersonOrGroupColumn
        :param read_only: Specifies whether the column values can be modified.
        :type read_only: bool
        :param required: Specifies whether the column value is not optional.
        :type required: bool
        :param text: textColumn.
        :type text: ~files.models.MicrosoftGraphTextColumn
        :param locale: Specifies the locale from which to infer the currency symbol.
        :type locale: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphColumnDefinition, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphColumnDefinition
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphColumnDefinition"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphColumnDefinition(id=id, boolean=boolean, calculated=calculated, choice=choice, column_group=column_group, date_time=date_time, default_value=default_value, description=description, display_name=display_name, enforce_unique_values=enforce_unique_values, geolocation=geolocation, hidden=hidden, indexed=indexed, lookup=lookup, name=name, number=number, person_or_group=person_or_group, read_only=read_only, required=required, text=text, locale=locale)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_column.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphColumnDefinition')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphColumnDefinition', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_column.metadata = {'url': '/drives/{drive-id}/list/columns'}  # type: ignore

    def get_column(
        self,
        drive_id,  # type: str
        column_definition_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum78"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphColumnDefinition"
        """Get columns from drives.

        Get columns from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param column_definition_id: key: id of columnDefinition.
        :type column_definition_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum78]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphColumnDefinition, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphColumnDefinition
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphColumnDefinition"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_column.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'columnDefinition-id': self._serialize.url("column_definition_id", column_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphColumnDefinition', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_column.metadata = {'url': '/drives/{drive-id}/list/columns/{columnDefinition-id}'}  # type: ignore

    def update_column(
        self,
        drive_id,  # type: str
        column_definition_id,  # type: str
        id=None,  # type: Optional[str]
        boolean=None,  # type: Optional[Dict[str, object]]
        calculated=None,  # type: Optional["models.MicrosoftGraphCalculatedColumn"]
        choice=None,  # type: Optional["models.MicrosoftGraphChoiceColumn"]
        column_group=None,  # type: Optional[str]
        date_time=None,  # type: Optional["models.MicrosoftGraphDateTimeColumn"]
        default_value=None,  # type: Optional["models.MicrosoftGraphDefaultColumnValue"]
        description=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        enforce_unique_values=None,  # type: Optional[bool]
        geolocation=None,  # type: Optional[Dict[str, object]]
        hidden=None,  # type: Optional[bool]
        indexed=None,  # type: Optional[bool]
        lookup=None,  # type: Optional["models.MicrosoftGraphLookupColumn"]
        name=None,  # type: Optional[str]
        number=None,  # type: Optional["models.MicrosoftGraphNumberColumn"]
        person_or_group=None,  # type: Optional["models.MicrosoftGraphPersonOrGroupColumn"]
        read_only=None,  # type: Optional[bool]
        required=None,  # type: Optional[bool]
        text=None,  # type: Optional["models.MicrosoftGraphTextColumn"]
        locale=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property columns in drives.

        Update the navigation property columns in drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param column_definition_id: key: id of columnDefinition.
        :type column_definition_id: str
        :param id: Read-only.
        :type id: str
        :param boolean: booleanColumn.
        :type boolean: dict[str, object]
        :param calculated: calculatedColumn.
        :type calculated: ~files.models.MicrosoftGraphCalculatedColumn
        :param choice: choiceColumn.
        :type choice: ~files.models.MicrosoftGraphChoiceColumn
        :param column_group: For site columns, the name of the group this column belongs to. Helps
         organize related columns.
        :type column_group: str
        :param date_time: dateTimeColumn.
        :type date_time: ~files.models.MicrosoftGraphDateTimeColumn
        :param default_value: defaultColumnValue.
        :type default_value: ~files.models.MicrosoftGraphDefaultColumnValue
        :param description: The user-facing description of the column.
        :type description: str
        :param display_name: The user-facing name of the column.
        :type display_name: str
        :param enforce_unique_values: If true, no two list items may have the same value for this
         column.
        :type enforce_unique_values: bool
        :param geolocation: geolocationColumn.
        :type geolocation: dict[str, object]
        :param hidden: Specifies whether the column is displayed in the user interface.
        :type hidden: bool
        :param indexed: Specifies whether the column values can used for sorting and searching.
        :type indexed: bool
        :param lookup: lookupColumn.
        :type lookup: ~files.models.MicrosoftGraphLookupColumn
        :param name: The API-facing name of the column as it appears in the [fields][] on a
         [listItem][]. For the user-facing name, see displayName.
        :type name: str
        :param number: numberColumn.
        :type number: ~files.models.MicrosoftGraphNumberColumn
        :param person_or_group: personOrGroupColumn.
        :type person_or_group: ~files.models.MicrosoftGraphPersonOrGroupColumn
        :param read_only: Specifies whether the column values can be modified.
        :type read_only: bool
        :param required: Specifies whether the column value is not optional.
        :type required: bool
        :param text: textColumn.
        :type text: ~files.models.MicrosoftGraphTextColumn
        :param locale: Specifies the locale from which to infer the currency symbol.
        :type locale: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphColumnDefinition(id=id, boolean=boolean, calculated=calculated, choice=choice, column_group=column_group, date_time=date_time, default_value=default_value, description=description, display_name=display_name, enforce_unique_values=enforce_unique_values, geolocation=geolocation, hidden=hidden, indexed=indexed, lookup=lookup, name=name, number=number, person_or_group=person_or_group, read_only=read_only, required=required, text=text, locale=locale)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_column.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'columnDefinition-id': self._serialize.url("column_definition_id", column_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphColumnDefinition')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_column.metadata = {'url': '/drives/{drive-id}/list/columns/{columnDefinition-id}'}  # type: ignore

    def delete_column(
        self,
        drive_id,  # type: str
        column_definition_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property columns for drives.

        Delete navigation property columns for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param column_definition_id: key: id of columnDefinition.
        :type column_definition_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_column.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'columnDefinition-id': self._serialize.url("column_definition_id", column_definition_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_column.metadata = {'url': '/drives/{drive-id}/list/columns/{columnDefinition-id}'}  # type: ignore

    def list_content_type(
        self,
        drive_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum79"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum80"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum81"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfContentType"]
        """Get contentTypes from drives.

        Get contentTypes from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~files.models.Enum79]
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum80]
        :param expand: Expand related entities.
        :type expand: list[str or ~files.models.Enum81]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfContentType or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~files.models.CollectionOfContentType]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfContentType"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_content_type.metadata['url']  # type: ignore
                path_format_arguments = {
                    'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfContentType', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_content_type.metadata = {'url': '/drives/{drive-id}/list/contentTypes'}  # type: ignore

    def create_content_type(
        self,
        drive_id,  # type: str
        id=None,  # type: Optional[str]
        description=None,  # type: Optional[str]
        group=None,  # type: Optional[str]
        hidden=None,  # type: Optional[bool]
        name=None,  # type: Optional[str]
        order=None,  # type: Optional["models.MicrosoftGraphContentTypeOrder"]
        parent_id=None,  # type: Optional[str]
        read_only=None,  # type: Optional[bool]
        sealed=None,  # type: Optional[bool]
        column_links=None,  # type: Optional[List["models.MicrosoftGraphColumnLink"]]
        microsoft_graph_item_reference_drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        site_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphContentType"
        """Create new navigation property to contentTypes for drives.

        Create new navigation property to contentTypes for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param id: Read-only.
        :type id: str
        :param description: The descriptive text for the item.
        :type description: str
        :param group: The name of the group this content type belongs to. Helps organize related
         content types.
        :type group: str
        :param hidden: Indicates whether the content type is hidden in the list's 'New' menu.
        :type hidden: bool
        :param name: The name of the content type.
        :type name: str
        :param order: contentTypeOrder.
        :type order: ~files.models.MicrosoftGraphContentTypeOrder
        :param parent_id: The unique identifier of the content type.
        :type parent_id: str
        :param read_only: If true, the content type cannot be modified unless this value is first set
         to false.
        :type read_only: bool
        :param sealed: If true, the content type cannot be modified by users or through push-down
         operations. Only site collection administrators can seal or unseal content types.
        :type sealed: bool
        :param column_links: The collection of columns that are required by this content type.
        :type column_links: list[~files.models.MicrosoftGraphColumnLink]
        :param microsoft_graph_item_reference_drive_id: Unique identifier of the drive instance that
         contains the item. Read-only.
        :type microsoft_graph_item_reference_drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
        :param site_id:
        :type site_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphContentType, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphContentType
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphContentType"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphContentType(id=id, description=description, group=group, hidden=hidden, name=name, order=order, parent_id=parent_id, read_only=read_only, sealed=sealed, column_links=column_links, drive_id=microsoft_graph_item_reference_drive_id, drive_type=drive_type, id_inherited_from_id=microsoft_graph_item_reference_id, name_inherited_from_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=site_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_content_type.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphContentType')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphContentType', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_content_type.metadata = {'url': '/drives/{drive-id}/list/contentTypes'}  # type: ignore

    def get_content_type(
        self,
        drive_id,  # type: str
        content_type_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum82"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum83"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphContentType"
        """Get contentTypes from drives.

        Get contentTypes from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param content_type_id: key: id of contentType.
        :type content_type_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum82]
        :param expand: Expand related entities.
        :type expand: list[str or ~files.models.Enum83]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphContentType, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphContentType
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphContentType"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_content_type.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'contentType-id': self._serialize.url("content_type_id", content_type_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphContentType', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_content_type.metadata = {'url': '/drives/{drive-id}/list/contentTypes/{contentType-id}'}  # type: ignore

    def update_content_type(
        self,
        drive_id,  # type: str
        content_type_id,  # type: str
        id=None,  # type: Optional[str]
        description=None,  # type: Optional[str]
        group=None,  # type: Optional[str]
        hidden=None,  # type: Optional[bool]
        name=None,  # type: Optional[str]
        order=None,  # type: Optional["models.MicrosoftGraphContentTypeOrder"]
        parent_id=None,  # type: Optional[str]
        read_only=None,  # type: Optional[bool]
        sealed=None,  # type: Optional[bool]
        column_links=None,  # type: Optional[List["models.MicrosoftGraphColumnLink"]]
        microsoft_graph_item_reference_drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        site_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property contentTypes in drives.

        Update the navigation property contentTypes in drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param content_type_id: key: id of contentType.
        :type content_type_id: str
        :param id: Read-only.
        :type id: str
        :param description: The descriptive text for the item.
        :type description: str
        :param group: The name of the group this content type belongs to. Helps organize related
         content types.
        :type group: str
        :param hidden: Indicates whether the content type is hidden in the list's 'New' menu.
        :type hidden: bool
        :param name: The name of the content type.
        :type name: str
        :param order: contentTypeOrder.
        :type order: ~files.models.MicrosoftGraphContentTypeOrder
        :param parent_id: The unique identifier of the content type.
        :type parent_id: str
        :param read_only: If true, the content type cannot be modified unless this value is first set
         to false.
        :type read_only: bool
        :param sealed: If true, the content type cannot be modified by users or through push-down
         operations. Only site collection administrators can seal or unseal content types.
        :type sealed: bool
        :param column_links: The collection of columns that are required by this content type.
        :type column_links: list[~files.models.MicrosoftGraphColumnLink]
        :param microsoft_graph_item_reference_drive_id: Unique identifier of the drive instance that
         contains the item. Read-only.
        :type microsoft_graph_item_reference_drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
        :param site_id:
        :type site_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphContentType(id=id, description=description, group=group, hidden=hidden, name=name, order=order, parent_id=parent_id, read_only=read_only, sealed=sealed, column_links=column_links, drive_id=microsoft_graph_item_reference_drive_id, drive_type=drive_type, id_inherited_from_id=microsoft_graph_item_reference_id, name_inherited_from_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=site_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_content_type.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'contentType-id': self._serialize.url("content_type_id", content_type_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphContentType')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_content_type.metadata = {'url': '/drives/{drive-id}/list/contentTypes/{contentType-id}'}  # type: ignore

    def delete_content_type(
        self,
        drive_id,  # type: str
        content_type_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property contentTypes for drives.

        Delete navigation property contentTypes for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param content_type_id: key: id of contentType.
        :type content_type_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_content_type.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'contentType-id': self._serialize.url("content_type_id", content_type_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_content_type.metadata = {'url': '/drives/{drive-id}/list/contentTypes/{contentType-id}'}  # type: ignore

    def get_drive(
        self,
        drive_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum87"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum88"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphDrive"
        """Get drive from drives.

        Get drive from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum87]
        :param expand: Expand related entities.
        :type expand: list[str or ~files.models.Enum88]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDrive, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphDrive
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDrive"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_drive.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDrive', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_drive.metadata = {'url': '/drives/{drive-id}/list/drive'}  # type: ignore

    def update_drive(
        self,
        drive_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        e_tag=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        name=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        created_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        last_modified_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        microsoft_graph_item_reference_drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        site_id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        microsoft_graph_identity_id=None,  # type: Optional[str]
        microsoft_graph_identity_display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        display_name1=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        display_name2=None,  # type: Optional[str]
        id3=None,  # type: Optional[str]
        display_name3=None,  # type: Optional[str]
        id4=None,  # type: Optional[str]
        display_name4=None,  # type: Optional[str]
        id5=None,  # type: Optional[str]
        microsoft_graph_drive_type=None,  # type: Optional[str]
        share_point_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        system=None,  # type: Optional[Dict[str, object]]
        following=None,  # type: Optional[List["models.MicrosoftGraphDriveItem"]]
        items=None,  # type: Optional[List["models.MicrosoftGraphDriveItem"]]
        root=None,  # type: Optional["models.MicrosoftGraphDriveItem"]
        special=None,  # type: Optional[List["models.MicrosoftGraphDriveItem"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        microsoft_graph_base_item_created_date_time_created_date_time=None,  # type: Optional[datetime.datetime]
        microsoft_graph_base_item_description=None,  # type: Optional[str]
        microsoft_graph_base_item_e_tag=None,  # type: Optional[str]
        microsoft_graph_base_item_last_modified_date_time_last_modified_date_time=None,  # type: Optional[datetime.datetime]
        microsoft_graph_base_item_name=None,  # type: Optional[str]
        microsoft_graph_base_item_web_url=None,  # type: Optional[str]
        microsoft_graph_user_created_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        microsoft_graph_user_last_modified_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        drive_id1=None,  # type: Optional[str]
        microsoft_graph_item_reference_drive_type=None,  # type: Optional[str]
        id6=None,  # type: Optional[str]
        name1=None,  # type: Optional[str]
        microsoft_graph_item_reference_path=None,  # type: Optional[str]
        microsoft_graph_item_reference_share_id=None,  # type: Optional[str]
        microsoft_graph_sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        microsoft_graph_item_reference_site_id=None,  # type: Optional[str]
        display_name5=None,  # type: Optional[str]
        id7=None,  # type: Optional[str]
        display_name6=None,  # type: Optional[str]
        id8=None,  # type: Optional[str]
        display_name7=None,  # type: Optional[str]
        id9=None,  # type: Optional[str]
        display_name8=None,  # type: Optional[str]
        id10=None,  # type: Optional[str]
        display_name9=None,  # type: Optional[str]
        id11=None,  # type: Optional[str]
        display_name10=None,  # type: Optional[str]
        id12=None,  # type: Optional[str]
        microsoft_graph_list_display_name=None,  # type: Optional[str]
        list=None,  # type: Optional["models.MicrosoftGraphListInfo"]
        sharepoint_ids1=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        microsoft_graph_system_facet_system=None,  # type: Optional[Dict[str, object]]
        columns=None,  # type: Optional[List["models.MicrosoftGraphColumnDefinition"]]
        content_types=None,  # type: Optional[List["models.MicrosoftGraphContentType"]]
        drive=None,  # type: Optional["models.MicrosoftGraphDrive"]
        microsoft_graph_list_items=None,  # type: Optional[List["models.MicrosoftGraphListItem"]]
        subscriptions=None,  # type: Optional[List["models.MicrosoftGraphSubscription"]]
        deleted=None,  # type: Optional[int]
        remaining=None,  # type: Optional[int]
        state=None,  # type: Optional[str]
        storage_plan_information=None,  # type: Optional["models.MicrosoftGraphStoragePlanInformation"]
        total=None,  # type: Optional[int]
        used=None,  # type: Optional[int]
        display_name11=None,  # type: Optional[str]
        id13=None,  # type: Optional[str]
        display_name12=None,  # type: Optional[str]
        id14=None,  # type: Optional[str]
        display_name13=None,  # type: Optional[str]
        id15=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property drive in drives.

        Update the navigation property drive in drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: Date and time of item creation. Read-only.
        :type created_date_time: ~datetime.datetime
        :param description: Provides a user-visible description of the item. Optional.
        :type description: str
        :param e_tag: ETag for the item. Read-only.
        :type e_tag: str
        :param last_modified_date_time: Date and time the item was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param name: The name of the item. Read-write.
        :type name: str
        :param web_url: URL that displays the resource in the browser. Read-only.
        :type web_url: str
        :param created_by_user: Represents an Azure Active Directory user object.
        :type created_by_user: ~files.models.MicrosoftGraphUser
        :param last_modified_by_user: Represents an Azure Active Directory user object.
        :type last_modified_by_user: ~files.models.MicrosoftGraphUser
        :param microsoft_graph_item_reference_drive_id: Unique identifier of the drive instance that
         contains the item. Read-only.
        :type microsoft_graph_item_reference_drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
        :param site_id:
        :type site_id: str
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :param microsoft_graph_drive_type: Describes the type of drive represented by this resource.
         OneDrive personal drives will return personal. OneDrive for Business will return business.
         SharePoint document libraries will return documentLibrary. Read-only.
        :type microsoft_graph_drive_type: str
        :param share_point_ids: sharepointIds.
        :type share_point_ids: ~files.models.MicrosoftGraphSharepointIds
        :param system: systemFacet.
        :type system: dict[str, object]
        :param following: The list of items the user is following. Only in OneDrive for Business.
        :type following: list[~files.models.MicrosoftGraphDriveItem]
        :param items: All items contained in the drive. Read-only. Nullable.
        :type items: list[~files.models.MicrosoftGraphDriveItem]
        :param root: driveItem.
        :type root: ~files.models.MicrosoftGraphDriveItem
        :param special: Collection of common folders available in OneDrive. Read-only. Nullable.
        :type special: list[~files.models.MicrosoftGraphDriveItem]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param microsoft_graph_base_item_created_date_time_created_date_time: Date and time of item
         creation. Read-only.
        :type microsoft_graph_base_item_created_date_time_created_date_time: ~datetime.datetime
        :param microsoft_graph_base_item_description: Provides a user-visible description of the item.
         Optional.
        :type microsoft_graph_base_item_description: str
        :param microsoft_graph_base_item_e_tag: ETag for the item. Read-only.
        :type microsoft_graph_base_item_e_tag: str
        :param microsoft_graph_base_item_last_modified_date_time_last_modified_date_time: Date and time
         the item was last modified. Read-only.
        :type microsoft_graph_base_item_last_modified_date_time_last_modified_date_time: ~datetime.datetime
        :param microsoft_graph_base_item_name: The name of the item. Read-write.
        :type microsoft_graph_base_item_name: str
        :param microsoft_graph_base_item_web_url: URL that displays the resource in the browser. Read-
         only.
        :type microsoft_graph_base_item_web_url: str
        :param microsoft_graph_user_created_by_user: Represents an Azure Active Directory user object.
        :type microsoft_graph_user_created_by_user: ~files.models.MicrosoftGraphUser
        :param microsoft_graph_user_last_modified_by_user: Represents an Azure Active Directory user
         object.
        :type microsoft_graph_user_last_modified_by_user: ~files.models.MicrosoftGraphUser
        :param drive_id1: Unique identifier of the drive instance that contains the item. Read-only.
        :type drive_id1: str
        :param microsoft_graph_item_reference_drive_type: Identifies the type of drive. See [drive][]
         resource for values.
        :type microsoft_graph_item_reference_drive_type: str
        :param id6: Unique identifier of the item in the drive. Read-only.
        :type id6: str
        :param name1: The name of the item being referenced. Read-only.
        :type name1: str
        :param microsoft_graph_item_reference_path: Path that can be used to navigate to the item.
         Read-only.
        :type microsoft_graph_item_reference_path: str
        :param microsoft_graph_item_reference_share_id: A unique identifier for a shared resource that
         can be accessed via the [Shares][] API.
        :type microsoft_graph_item_reference_share_id: str
        :param microsoft_graph_sharepoint_ids: sharepointIds.
        :type microsoft_graph_sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
        :param microsoft_graph_item_reference_site_id:
        :type microsoft_graph_item_reference_site_id: str
        :param display_name5: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name5: str
        :param id7: Unique identifier for the identity.
        :type id7: str
        :param display_name6: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name6: str
        :param id8: Unique identifier for the identity.
        :type id8: str
        :param display_name7: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name7: str
        :param id9: Unique identifier for the identity.
        :type id9: str
        :param display_name8: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name8: str
        :param id10: Unique identifier for the identity.
        :type id10: str
        :param display_name9: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name9: str
        :param id11: Unique identifier for the identity.
        :type id11: str
        :param display_name10: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name10: str
        :param id12: Unique identifier for the identity.
        :type id12: str
        :param microsoft_graph_list_display_name: The displayable title of the list.
        :type microsoft_graph_list_display_name: str
        :param list: listInfo.
        :type list: ~files.models.MicrosoftGraphListInfo
        :param sharepoint_ids1: sharepointIds.
        :type sharepoint_ids1: ~files.models.MicrosoftGraphSharepointIds
        :param microsoft_graph_system_facet_system: systemFacet.
        :type microsoft_graph_system_facet_system: dict[str, object]
        :param columns: The collection of field definitions for this list.
        :type columns: list[~files.models.MicrosoftGraphColumnDefinition]
        :param content_types: The collection of content types present in this list.
        :type content_types: list[~files.models.MicrosoftGraphContentType]
        :param drive: drive.
        :type drive: ~files.models.MicrosoftGraphDrive
        :param microsoft_graph_list_items: All items contained in the list.
        :type microsoft_graph_list_items: list[~files.models.MicrosoftGraphListItem]
        :param subscriptions: The set of subscriptions on the list.
        :type subscriptions: list[~files.models.MicrosoftGraphSubscription]
        :param deleted: Total space consumed by files in the recycle bin, in bytes. Read-only.
        :type deleted: long
        :param remaining: Total space remaining before reaching the quota limit, in bytes. Read-only.
        :type remaining: long
        :param state: Enumeration value that indicates the state of the storage space. Read-only.
        :type state: str
        :param storage_plan_information: storagePlanInformation.
        :type storage_plan_information: ~files.models.MicrosoftGraphStoragePlanInformation
        :param total: Total allowed storage space, in bytes. Read-only.
        :type total: long
        :param used: Total space used, in bytes. Read-only.
        :type used: long
        :param display_name11: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name11: str
        :param id13: Unique identifier for the identity.
        :type id13: str
        :param display_name12: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name12: str
        :param id14: Unique identifier for the identity.
        :type id14: str
        :param display_name13: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name13: str
        :param id15: Unique identifier for the identity.
        :type id15: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphDrive(id=id, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_date_time=last_modified_date_time, name=name, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, drive_id=microsoft_graph_item_reference_drive_id, drive_type=drive_type, id_parent_reference_id=microsoft_graph_item_reference_id, name_parent_reference_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=site_id, display_name_last_modified_by_user_display_name=display_name, id_last_modified_by_user_id=microsoft_graph_identity_id, display_name_last_modified_by_device_display_name=microsoft_graph_identity_display_name, id_last_modified_by_device_id=id1, display_name_last_modified_by_application_display_name=display_name1, id_last_modified_by_application_id=id2, display_name_created_by_user_display_name=display_name2, id_created_by_user_id=id3, display_name_created_by_device_display_name=display_name3, id_created_by_device_id=id4, display_name_created_by_application_display_name=display_name4, id_created_by_application_id=id5, drive_type=microsoft_graph_drive_type, share_point_ids=share_point_ids, system=system, following=following, items=items, root=root, special=special, id_list_id=microsoft_graph_entity_id, created_date_time_list_created_date_time=microsoft_graph_base_item_created_date_time_created_date_time, description_list_description=microsoft_graph_base_item_description, e_tag_list_e_tag=microsoft_graph_base_item_e_tag, last_modified_date_time_list_last_modified_date_time=microsoft_graph_base_item_last_modified_date_time_last_modified_date_time, name_list_name=microsoft_graph_base_item_name, web_url_list_web_url=microsoft_graph_base_item_web_url, created_by_user_list_created_by_user=microsoft_graph_user_created_by_user, last_modified_by_user_list_last_modified_by_user=microsoft_graph_user_last_modified_by_user, drive_id_list_parent_reference_drive_id=drive_id1, drive_type_list_parent_reference_drive_type=microsoft_graph_item_reference_drive_type, id_list_parent_reference_id=id6, name_list_parent_reference_name=name1, path_list_parent_reference_path=microsoft_graph_item_reference_path, share_id_list_parent_reference_share_id=microsoft_graph_item_reference_share_id, sharepoint_ids_list_parent_reference_sharepoint_ids=microsoft_graph_sharepoint_ids, site_id_list_parent_reference_site_id=microsoft_graph_item_reference_site_id, display_name_list_last_modified_by_user_display_name=display_name5, id_list_last_modified_by_user_id=id7, display_name_list_last_modified_by_device_display_name=display_name6, id_list_last_modified_by_device_id=id8, display_name_list_last_modified_by_application_display_name=display_name7, id_list_last_modified_by_application_id=id9, display_name_list_created_by_user_display_name=display_name8, id_list_created_by_user_id=id10, display_name_list_created_by_device_display_name=display_name9, id_list_created_by_device_id=id11, display_name_list_created_by_application_display_name=display_name10, id_list_created_by_application_id=id12, display_name_list_display_name=microsoft_graph_list_display_name, list=list, sharepoint_ids_list_sharepoint_ids=sharepoint_ids1, system_list_system=microsoft_graph_system_facet_system, columns=columns, content_types=content_types, drive=drive, items_list_items=microsoft_graph_list_items, subscriptions=subscriptions, deleted=deleted, remaining=remaining, state=state, storage_plan_information=storage_plan_information, total=total, used=used, display_name_owner_user_display_name=display_name11, id_owner_user_id=id13, display_name_owner_device_display_name=display_name12, id_owner_device_id=id14, display_name_owner_application_display_name=display_name13, id_owner_application_id=id15)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_drive.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphDrive')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_drive.metadata = {'url': '/drives/{drive-id}/list/drive'}  # type: ignore

    def delete_drive(
        self,
        drive_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property drive for drives.

        Delete navigation property drive for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_drive.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_drive.metadata = {'url': '/drives/{drive-id}/list/drive'}  # type: ignore

    def list_item(
        self,
        drive_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum89"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum90"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum91"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfListItem"]
        """Get items from drives.

        Get items from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~files.models.Enum89]
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum90]
        :param expand: Expand related entities.
        :type expand: list[str or ~files.models.Enum91]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfListItem or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~files.models.CollectionOfListItem]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfListItem"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_item.metadata['url']  # type: ignore
                path_format_arguments = {
                    'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfListItem', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_item.metadata = {'url': '/drives/{drive-id}/list/items'}  # type: ignore

    def create_item(
        self,
        drive_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        e_tag=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        name=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        created_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        last_modified_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        microsoft_graph_item_reference_drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        site_id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        microsoft_graph_identity_id=None,  # type: Optional[str]
        microsoft_graph_identity_display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        display_name1=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        display_name2=None,  # type: Optional[str]
        id3=None,  # type: Optional[str]
        display_name3=None,  # type: Optional[str]
        id4=None,  # type: Optional[str]
        display_name4=None,  # type: Optional[str]
        id5=None,  # type: Optional[str]
        content_type_parameter=None,  # type: Optional["models.MicrosoftGraphContentTypeInfo"]
        microsoft_graph_sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        analytics=None,  # type: Optional["models.MicrosoftGraphItemAnalytics"]
        drive_item=None,  # type: Optional["models.MicrosoftGraphDriveItem"]
        versions=None,  # type: Optional[List["models.MicrosoftGraphListItemVersion"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphListItem"
        """Create new navigation property to items for drives.

        Create new navigation property to items for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: Date and time of item creation. Read-only.
        :type created_date_time: ~datetime.datetime
        :param description: Provides a user-visible description of the item. Optional.
        :type description: str
        :param e_tag: ETag for the item. Read-only.
        :type e_tag: str
        :param last_modified_date_time: Date and time the item was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param name: The name of the item. Read-write.
        :type name: str
        :param web_url: URL that displays the resource in the browser. Read-only.
        :type web_url: str
        :param created_by_user: Represents an Azure Active Directory user object.
        :type created_by_user: ~files.models.MicrosoftGraphUser
        :param last_modified_by_user: Represents an Azure Active Directory user object.
        :type last_modified_by_user: ~files.models.MicrosoftGraphUser
        :param microsoft_graph_item_reference_drive_id: Unique identifier of the drive instance that
         contains the item. Read-only.
        :type microsoft_graph_item_reference_drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
        :param site_id:
        :type site_id: str
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :param content_type_parameter: contentTypeInfo.
        :type content_type_parameter: ~files.models.MicrosoftGraphContentTypeInfo
        :param microsoft_graph_sharepoint_ids: sharepointIds.
        :type microsoft_graph_sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
        :param analytics: itemAnalytics.
        :type analytics: ~files.models.MicrosoftGraphItemAnalytics
        :param drive_item: driveItem.
        :type drive_item: ~files.models.MicrosoftGraphDriveItem
        :param versions: The list of previous versions of the list item.
        :type versions: list[~files.models.MicrosoftGraphListItemVersion]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphListItem, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphListItem
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphListItem"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphListItem(id=id, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_date_time=last_modified_date_time, name=name, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, drive_id=microsoft_graph_item_reference_drive_id, drive_type=drive_type, id_parent_reference_id=microsoft_graph_item_reference_id, name_parent_reference_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=site_id, display_name_last_modified_by_user_display_name=display_name, id_last_modified_by_user_id=microsoft_graph_identity_id, display_name_last_modified_by_device_display_name=microsoft_graph_identity_display_name, id_last_modified_by_device_id=id1, display_name_last_modified_by_application_display_name=display_name1, id_last_modified_by_application_id=id2, display_name_created_by_user_display_name=display_name2, id_created_by_user_id=id3, display_name_created_by_device_display_name=display_name3, id_created_by_device_id=id4, display_name_created_by_application_display_name=display_name4, id_created_by_application_id=id5, content_type=content_type_parameter, sharepoint_ids=microsoft_graph_sharepoint_ids, analytics=analytics, drive_item=drive_item, versions=versions, id_fields_id=microsoft_graph_entity_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_item.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphListItem')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphListItem', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_item.metadata = {'url': '/drives/{drive-id}/list/items'}  # type: ignore

    def get_item(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum92"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum93"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphListItem"
        """Get items from drives.

        Get items from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum92]
        :param expand: Expand related entities.
        :type expand: list[str or ~files.models.Enum93]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphListItem, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphListItem
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphListItem"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_item.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphListItem', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_item.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}'}  # type: ignore

    def update_item(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        description=None,  # type: Optional[str]
        e_tag=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        name=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        created_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        last_modified_by_user=None,  # type: Optional["models.MicrosoftGraphUser"]
        microsoft_graph_item_reference_drive_id=None,  # type: Optional[str]
        drive_type=None,  # type: Optional[str]
        microsoft_graph_item_reference_id=None,  # type: Optional[str]
        microsoft_graph_item_reference_name=None,  # type: Optional[str]
        path=None,  # type: Optional[str]
        share_id=None,  # type: Optional[str]
        sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        site_id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        microsoft_graph_identity_id=None,  # type: Optional[str]
        microsoft_graph_identity_display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        display_name1=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        display_name2=None,  # type: Optional[str]
        id3=None,  # type: Optional[str]
        display_name3=None,  # type: Optional[str]
        id4=None,  # type: Optional[str]
        display_name4=None,  # type: Optional[str]
        id5=None,  # type: Optional[str]
        content_type_parameter=None,  # type: Optional["models.MicrosoftGraphContentTypeInfo"]
        microsoft_graph_sharepoint_ids=None,  # type: Optional["models.MicrosoftGraphSharepointIds"]
        analytics=None,  # type: Optional["models.MicrosoftGraphItemAnalytics"]
        drive_item=None,  # type: Optional["models.MicrosoftGraphDriveItem"]
        versions=None,  # type: Optional[List["models.MicrosoftGraphListItemVersion"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property items in drives.

        Update the navigation property items in drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param id: Read-only.
        :type id: str
        :param created_date_time: Date and time of item creation. Read-only.
        :type created_date_time: ~datetime.datetime
        :param description: Provides a user-visible description of the item. Optional.
        :type description: str
        :param e_tag: ETag for the item. Read-only.
        :type e_tag: str
        :param last_modified_date_time: Date and time the item was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param name: The name of the item. Read-write.
        :type name: str
        :param web_url: URL that displays the resource in the browser. Read-only.
        :type web_url: str
        :param created_by_user: Represents an Azure Active Directory user object.
        :type created_by_user: ~files.models.MicrosoftGraphUser
        :param last_modified_by_user: Represents an Azure Active Directory user object.
        :type last_modified_by_user: ~files.models.MicrosoftGraphUser
        :param microsoft_graph_item_reference_drive_id: Unique identifier of the drive instance that
         contains the item. Read-only.
        :type microsoft_graph_item_reference_drive_id: str
        :param drive_type: Identifies the type of drive. See [drive][] resource for values.
        :type drive_type: str
        :param microsoft_graph_item_reference_id: Unique identifier of the item in the drive. Read-
         only.
        :type microsoft_graph_item_reference_id: str
        :param microsoft_graph_item_reference_name: The name of the item being referenced. Read-only.
        :type microsoft_graph_item_reference_name: str
        :param path: Path that can be used to navigate to the item. Read-only.
        :type path: str
        :param share_id: A unique identifier for a shared resource that can be accessed via the
         [Shares][] API.
        :type share_id: str
        :param sharepoint_ids: sharepointIds.
        :type sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
        :param site_id:
        :type site_id: str
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :param content_type_parameter: contentTypeInfo.
        :type content_type_parameter: ~files.models.MicrosoftGraphContentTypeInfo
        :param microsoft_graph_sharepoint_ids: sharepointIds.
        :type microsoft_graph_sharepoint_ids: ~files.models.MicrosoftGraphSharepointIds
        :param analytics: itemAnalytics.
        :type analytics: ~files.models.MicrosoftGraphItemAnalytics
        :param drive_item: driveItem.
        :type drive_item: ~files.models.MicrosoftGraphDriveItem
        :param versions: The list of previous versions of the list item.
        :type versions: list[~files.models.MicrosoftGraphListItemVersion]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphListItem(id=id, created_date_time=created_date_time, description=description, e_tag=e_tag, last_modified_date_time=last_modified_date_time, name=name, web_url=web_url, created_by_user=created_by_user, last_modified_by_user=last_modified_by_user, drive_id=microsoft_graph_item_reference_drive_id, drive_type=drive_type, id_parent_reference_id=microsoft_graph_item_reference_id, name_parent_reference_name=microsoft_graph_item_reference_name, path=path, share_id=share_id, sharepoint_ids=sharepoint_ids, site_id=site_id, display_name_last_modified_by_user_display_name=display_name, id_last_modified_by_user_id=microsoft_graph_identity_id, display_name_last_modified_by_device_display_name=microsoft_graph_identity_display_name, id_last_modified_by_device_id=id1, display_name_last_modified_by_application_display_name=display_name1, id_last_modified_by_application_id=id2, display_name_created_by_user_display_name=display_name2, id_created_by_user_id=id3, display_name_created_by_device_display_name=display_name3, id_created_by_device_id=id4, display_name_created_by_application_display_name=display_name4, id_created_by_application_id=id5, content_type=content_type_parameter, sharepoint_ids=microsoft_graph_sharepoint_ids, analytics=analytics, drive_item=drive_item, versions=versions, id_fields_id=microsoft_graph_entity_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_item.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphListItem')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_item.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}'}  # type: ignore

    def delete_item(
        self,
        drive_id,  # type: str
        list_item_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property items for drives.

        Delete navigation property items for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param list_item_id: key: id of listItem.
        :type list_item_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_item.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'listItem-id': self._serialize.url("list_item_id", list_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_item.metadata = {'url': '/drives/{drive-id}/list/items/{listItem-id}'}  # type: ignore

    def list_subscription(
        self,
        drive_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum103"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum104"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfSubscription"]
        """Get subscriptions from drives.

        Get subscriptions from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~files.models.Enum103]
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum104]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSubscription or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~files.models.CollectionOfSubscription]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSubscription"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_subscription.metadata['url']  # type: ignore
                path_format_arguments = {
                    'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSubscription', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_subscription.metadata = {'url': '/drives/{drive-id}/list/subscriptions'}  # type: ignore

    def create_subscription(
        self,
        drive_id,  # type: str
        id=None,  # type: Optional[str]
        application_id=None,  # type: Optional[str]
        change_type=None,  # type: Optional[str]
        client_state=None,  # type: Optional[str]
        creator_id=None,  # type: Optional[str]
        encryption_certificate=None,  # type: Optional[str]
        encryption_certificate_id=None,  # type: Optional[str]
        expiration_date_time=None,  # type: Optional[datetime.datetime]
        include_resource_data=None,  # type: Optional[bool]
        latest_supported_tls_version=None,  # type: Optional[str]
        lifecycle_notification_url=None,  # type: Optional[str]
        notification_url=None,  # type: Optional[str]
        resource=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSubscription"
        """Create new navigation property to subscriptions for drives.

        Create new navigation property to subscriptions for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param id: Read-only.
        :type id: str
        :param application_id: Identifier of the application used to create the subscription. Read-
         only.
        :type application_id: str
        :param change_type: Required. Indicates the type of change in the subscribed resource that will
         raise a change notification. The supported values are: created, updated, deleted. Multiple
         values can be combined using a comma-separated list.Note: Drive root item and list change
         notifications support only the updated changeType. User and group change notifications support
         updated and deleted changeType.
        :type change_type: str
        :param client_state: Optional. Specifies the value of the clientState property sent by the
         service in each change notification. The maximum length is 128 characters. The client can check
         that the change notification came from the service by comparing the value of the clientState
         property sent with the subscription with the value of the clientState property received with
         each change notification.
        :type client_state: str
        :param creator_id: Identifier of the user or service principal that created the subscription.
         If the app used delegated permissions to create the subscription, this field contains the id of
         the signed-in user the app called on behalf of. If the app used application permissions, this
         field contains the id of the service principal corresponding to the app. Read-only.
        :type creator_id: str
        :param encryption_certificate: A base64-encoded representation of a certificate with a public
         key used to encrypt resource data in change notifications. Optional. Required when
         includeResourceData is true.
        :type encryption_certificate: str
        :param encryption_certificate_id: A custom app-provided identifier to help identify the
         certificate needed to decrypt resource data. Optional.
        :type encryption_certificate_id: str
        :param expiration_date_time: Required. Specifies the date and time when the webhook
         subscription expires. The time is in UTC, and can be an amount of time from subscription
         creation that varies for the resource subscribed to.  See the table below for maximum supported
         subscription length of time.
        :type expiration_date_time: ~datetime.datetime
        :param include_resource_data: When set to true, change notifications include resource data
         (such as content of a chat message). Optional.
        :type include_resource_data: bool
        :param latest_supported_tls_version:
        :type latest_supported_tls_version: str
        :param lifecycle_notification_url:
        :type lifecycle_notification_url: str
        :param notification_url: Required. The URL of the endpoint that will receive the change
         notifications. This URL must make use of the HTTPS protocol.
        :type notification_url: str
        :param resource: Required. Specifies the resource that will be monitored for changes. Do not
         include the base URL (https://graph.microsoft.com/v1.0/). See the possible resource path values
         for each supported resource.
        :type resource: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSubscription, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphSubscription
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSubscription"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSubscription(id=id, application_id=application_id, change_type=change_type, client_state=client_state, creator_id=creator_id, encryption_certificate=encryption_certificate, encryption_certificate_id=encryption_certificate_id, expiration_date_time=expiration_date_time, include_resource_data=include_resource_data, latest_supported_tls_version=latest_supported_tls_version, lifecycle_notification_url=lifecycle_notification_url, notification_url=notification_url, resource=resource)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_subscription.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSubscription')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSubscription', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_subscription.metadata = {'url': '/drives/{drive-id}/list/subscriptions'}  # type: ignore

    def get_subscription(
        self,
        drive_id,  # type: str
        subscription_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum105"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSubscription"
        """Get subscriptions from drives.

        Get subscriptions from drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param subscription_id: key: id of subscription.
        :type subscription_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~files.models.Enum105]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSubscription, or the result of cls(response)
        :rtype: ~files.models.MicrosoftGraphSubscription
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSubscription"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_subscription.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'subscription-id': self._serialize.url("subscription_id", subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSubscription', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_subscription.metadata = {'url': '/drives/{drive-id}/list/subscriptions/{subscription-id}'}  # type: ignore

    def update_subscription(
        self,
        drive_id,  # type: str
        subscription_id,  # type: str
        id=None,  # type: Optional[str]
        application_id=None,  # type: Optional[str]
        change_type=None,  # type: Optional[str]
        client_state=None,  # type: Optional[str]
        creator_id=None,  # type: Optional[str]
        encryption_certificate=None,  # type: Optional[str]
        encryption_certificate_id=None,  # type: Optional[str]
        expiration_date_time=None,  # type: Optional[datetime.datetime]
        include_resource_data=None,  # type: Optional[bool]
        latest_supported_tls_version=None,  # type: Optional[str]
        lifecycle_notification_url=None,  # type: Optional[str]
        notification_url=None,  # type: Optional[str]
        resource=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property subscriptions in drives.

        Update the navigation property subscriptions in drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param subscription_id: key: id of subscription.
        :type subscription_id: str
        :param id: Read-only.
        :type id: str
        :param application_id: Identifier of the application used to create the subscription. Read-
         only.
        :type application_id: str
        :param change_type: Required. Indicates the type of change in the subscribed resource that will
         raise a change notification. The supported values are: created, updated, deleted. Multiple
         values can be combined using a comma-separated list.Note: Drive root item and list change
         notifications support only the updated changeType. User and group change notifications support
         updated and deleted changeType.
        :type change_type: str
        :param client_state: Optional. Specifies the value of the clientState property sent by the
         service in each change notification. The maximum length is 128 characters. The client can check
         that the change notification came from the service by comparing the value of the clientState
         property sent with the subscription with the value of the clientState property received with
         each change notification.
        :type client_state: str
        :param creator_id: Identifier of the user or service principal that created the subscription.
         If the app used delegated permissions to create the subscription, this field contains the id of
         the signed-in user the app called on behalf of. If the app used application permissions, this
         field contains the id of the service principal corresponding to the app. Read-only.
        :type creator_id: str
        :param encryption_certificate: A base64-encoded representation of a certificate with a public
         key used to encrypt resource data in change notifications. Optional. Required when
         includeResourceData is true.
        :type encryption_certificate: str
        :param encryption_certificate_id: A custom app-provided identifier to help identify the
         certificate needed to decrypt resource data. Optional.
        :type encryption_certificate_id: str
        :param expiration_date_time: Required. Specifies the date and time when the webhook
         subscription expires. The time is in UTC, and can be an amount of time from subscription
         creation that varies for the resource subscribed to.  See the table below for maximum supported
         subscription length of time.
        :type expiration_date_time: ~datetime.datetime
        :param include_resource_data: When set to true, change notifications include resource data
         (such as content of a chat message). Optional.
        :type include_resource_data: bool
        :param latest_supported_tls_version:
        :type latest_supported_tls_version: str
        :param lifecycle_notification_url:
        :type lifecycle_notification_url: str
        :param notification_url: Required. The URL of the endpoint that will receive the change
         notifications. This URL must make use of the HTTPS protocol.
        :type notification_url: str
        :param resource: Required. Specifies the resource that will be monitored for changes. Do not
         include the base URL (https://graph.microsoft.com/v1.0/). See the possible resource path values
         for each supported resource.
        :type resource: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSubscription(id=id, application_id=application_id, change_type=change_type, client_state=client_state, creator_id=creator_id, encryption_certificate=encryption_certificate, encryption_certificate_id=encryption_certificate_id, expiration_date_time=expiration_date_time, include_resource_data=include_resource_data, latest_supported_tls_version=latest_supported_tls_version, lifecycle_notification_url=lifecycle_notification_url, notification_url=notification_url, resource=resource)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_subscription.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'subscription-id': self._serialize.url("subscription_id", subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSubscription')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_subscription.metadata = {'url': '/drives/{drive-id}/list/subscriptions/{subscription-id}'}  # type: ignore

    def delete_subscription(
        self,
        drive_id,  # type: str
        subscription_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property subscriptions for drives.

        Delete navigation property subscriptions for drives.

        :param drive_id: key: id of drive.
        :type drive_id: str
        :param subscription_id: key: id of subscription.
        :type subscription_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_subscription.metadata['url']  # type: ignore
        path_format_arguments = {
            'drive-id': self._serialize.url("drive_id", drive_id, 'str'),
            'subscription-id': self._serialize.url("subscription_id", subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_subscription.metadata = {'url': '/drives/{drive-id}/list/subscriptions/{subscription-id}'}  # type: ignore
