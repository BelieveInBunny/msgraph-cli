# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.core import AsyncPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import FilesConfiguration
from .operations import drivesdriveOperations
from .operations import drivesOperations
from .operations import driveslistOperations
from .operations import driveslistcontenttypesOperations
from .operations import driveslistitemsOperations
from .operations import driveslistitemsversionsOperations
from .operations import groupsOperations
from .operations import sharesshareddriveitemOperations
from .operations import sharesOperations
from .operations import shareslistOperations
from .operations import shareslistcontenttypesOperations
from .operations import shareslistitemsOperations
from .operations import shareslistitemsversionsOperations
from .operations import shareslistitemOperations
from .operations import shareslistitemversionsOperations
from .operations import sharespermissionOperations
from .operations import usersOperations
from .. import models


class Files(object):
    """Files.

    :ivar drivesdrive: drivesdriveOperations operations
    :vartype drivesdrive: files.aio.operations.drivesdriveOperations
    :ivar drives: drivesOperations operations
    :vartype drives: files.aio.operations.drivesOperations
    :ivar driveslist: driveslistOperations operations
    :vartype driveslist: files.aio.operations.driveslistOperations
    :ivar driveslistcontenttypes: driveslistcontenttypesOperations operations
    :vartype driveslistcontenttypes: files.aio.operations.driveslistcontenttypesOperations
    :ivar driveslistitems: driveslistitemsOperations operations
    :vartype driveslistitems: files.aio.operations.driveslistitemsOperations
    :ivar driveslistitemsversions: driveslistitemsversionsOperations operations
    :vartype driveslistitemsversions: files.aio.operations.driveslistitemsversionsOperations
    :ivar groups: groupsOperations operations
    :vartype groups: files.aio.operations.groupsOperations
    :ivar sharesshareddriveitem: sharesshareddriveitemOperations operations
    :vartype sharesshareddriveitem: files.aio.operations.sharesshareddriveitemOperations
    :ivar shares: sharesOperations operations
    :vartype shares: files.aio.operations.sharesOperations
    :ivar shareslist: shareslistOperations operations
    :vartype shareslist: files.aio.operations.shareslistOperations
    :ivar shareslistcontenttypes: shareslistcontenttypesOperations operations
    :vartype shareslistcontenttypes: files.aio.operations.shareslistcontenttypesOperations
    :ivar shareslistitems: shareslistitemsOperations operations
    :vartype shareslistitems: files.aio.operations.shareslistitemsOperations
    :ivar shareslistitemsversions: shareslistitemsversionsOperations operations
    :vartype shareslistitemsversions: files.aio.operations.shareslistitemsversionsOperations
    :ivar shareslistitem: shareslistitemOperations operations
    :vartype shareslistitem: files.aio.operations.shareslistitemOperations
    :ivar shareslistitemversions: shareslistitemversionsOperations operations
    :vartype shareslistitemversions: files.aio.operations.shareslistitemversionsOperations
    :ivar sharespermission: sharespermissionOperations operations
    :vartype sharespermission: files.aio.operations.sharespermissionOperations
    :ivar users: usersOperations operations
    :vartype users: files.aio.operations.usersOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://graph.microsoft.com/v1.0'
        self._config = FilesConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.drivesdrive = drivesdriveOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.drives = drivesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.driveslist = driveslistOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.driveslistcontenttypes = driveslistcontenttypesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.driveslistitems = driveslistitemsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.driveslistitemsversions = driveslistitemsversionsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.groups = groupsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.sharesshareddriveitem = sharesshareddriveitemOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.shares = sharesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.shareslist = shareslistOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.shareslistcontenttypes = shareslistcontenttypesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.shareslistitems = shareslistitemsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.shareslistitemsversions = shareslistitemsversionsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.shareslistitem = shareslistitemOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.shareslistitemversions = shareslistitemversionsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.sharespermission = sharespermissionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.users = usersOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "Files":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
