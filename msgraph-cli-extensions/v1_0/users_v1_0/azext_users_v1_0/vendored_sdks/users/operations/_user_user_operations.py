# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class UserUserOperations(object):
    """UserUserOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~users.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_user(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Get5ItemsItem"]]]
        select=None,  # type: Optional[List[Union[str, "models.Get6ItemsItem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get7ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfUser"]
        """Get entities from users.

        Get entities from users.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~users.models.Get5ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~users.models.Get6ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~users.models.Get7ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfUser or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~users.models.CollectionOfUser]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfUser"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_user.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfUser', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_user.metadata = {'url': '/users'}  # type: ignore

    def create_user(
        self,
        id=None,  # type: Optional[str]
        deleted_date_time=None,  # type: Optional[datetime.datetime]
        account_enabled=None,  # type: Optional[bool]
        age_group=None,  # type: Optional[str]
        assigned_licenses=None,  # type: Optional[List["models.MicrosoftGraphAssignedLicense"]]
        assigned_plans=None,  # type: Optional[List["models.MicrosoftGraphAssignedPlan"]]
        business_phones=None,  # type: Optional[List[str]]
        city=None,  # type: Optional[str]
        company_name=None,  # type: Optional[str]
        consent_provided_for_minor=None,  # type: Optional[str]
        country=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        creation_type=None,  # type: Optional[str]
        department=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        employee_id=None,  # type: Optional[str]
        external_user_state=None,  # type: Optional[str]
        external_user_state_change_date_time=None,  # type: Optional[datetime.datetime]
        fax_number=None,  # type: Optional[str]
        given_name=None,  # type: Optional[str]
        identities=None,  # type: Optional[List["models.MicrosoftGraphObjectIdentity"]]
        im_addresses=None,  # type: Optional[List[str]]
        is_resource_account=None,  # type: Optional[bool]
        job_title=None,  # type: Optional[str]
        last_password_change_date_time=None,  # type: Optional[datetime.datetime]
        legal_age_group_classification=None,  # type: Optional[str]
        license_assignment_states=None,  # type: Optional[List["models.MicrosoftGraphLicenseAssignmentState"]]
        mail=None,  # type: Optional[str]
        mail_nickname=None,  # type: Optional[str]
        mobile_phone=None,  # type: Optional[str]
        office_location=None,  # type: Optional[str]
        on_premises_distinguished_name=None,  # type: Optional[str]
        on_premises_domain_name=None,  # type: Optional[str]
        on_premises_extension_attributes=None,  # type: Optional["models.MicrosoftGraphOnPremisesExtensionAttributes"]
        on_premises_immutable_id=None,  # type: Optional[str]
        on_premises_last_sync_date_time=None,  # type: Optional[datetime.datetime]
        on_premises_provisioning_errors=None,  # type: Optional[List["models.MicrosoftGraphOnPremisesProvisioningError"]]
        on_premises_sam_account_name=None,  # type: Optional[str]
        on_premises_security_identifier=None,  # type: Optional[str]
        on_premises_sync_enabled=None,  # type: Optional[bool]
        on_premises_user_principal_name=None,  # type: Optional[str]
        other_mails=None,  # type: Optional[List[str]]
        password_policies=None,  # type: Optional[str]
        password_profile=None,  # type: Optional["models.MicrosoftGraphPasswordProfile"]
        postal_code=None,  # type: Optional[str]
        preferred_language=None,  # type: Optional[str]
        provisioned_plans=None,  # type: Optional[List["models.MicrosoftGraphProvisionedPlan"]]
        proxy_addresses=None,  # type: Optional[List[str]]
        show_in_address_list=None,  # type: Optional[bool]
        sign_in_sessions_valid_from_date_time=None,  # type: Optional[datetime.datetime]
        state=None,  # type: Optional[str]
        street_address=None,  # type: Optional[str]
        surname=None,  # type: Optional[str]
        usage_location=None,  # type: Optional[str]
        user_principal_name=None,  # type: Optional[str]
        user_type=None,  # type: Optional[str]
        device_enrollment_limit=None,  # type: Optional[int]
        about_me=None,  # type: Optional[str]
        birthday=None,  # type: Optional[datetime.datetime]
        hire_date=None,  # type: Optional[datetime.datetime]
        interests=None,  # type: Optional[List[str]]
        my_site=None,  # type: Optional[str]
        past_projects=None,  # type: Optional[List[str]]
        preferred_name=None,  # type: Optional[str]
        responsibilities=None,  # type: Optional[List[str]]
        schools=None,  # type: Optional[List[str]]
        skills=None,  # type: Optional[List[str]]
        app_role_assignments=None,  # type: Optional[List["models.MicrosoftGraphAppRoleAssignment"]]
        created_objects=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        direct_reports=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        license_details=None,  # type: Optional[List["models.MicrosoftGraphLicenseDetails"]]
        manager=None,  # type: Optional["models.MicrosoftGraphDirectoryObject"]
        member_of=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        oauth2_permission_grants=None,  # type: Optional[List["models.MicrosoftGraphOAuth2PermissionGrant"]]
        owned_devices=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        owned_objects=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        registered_devices=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        scoped_role_member_of=None,  # type: Optional[List["models.MicrosoftGraphScopedRoleMembership"]]
        transitive_member_of=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        calendar=None,  # type: Optional["models.MicrosoftGraphCalendar"]
        calendar_groups=None,  # type: Optional[List["models.MicrosoftGraphCalendarGroup"]]
        calendars=None,  # type: Optional[List["models.MicrosoftGraphCalendar"]]
        calendar_view=None,  # type: Optional[List["models.MicrosoftGraphEvent"]]
        contact_folders=None,  # type: Optional[List["models.MicrosoftGraphContactFolder"]]
        contacts=None,  # type: Optional[List["models.MicrosoftGraphContact"]]
        events=None,  # type: Optional[List["models.MicrosoftGraphEvent"]]
        mail_folders=None,  # type: Optional[List["models.MicrosoftGraphMailFolder"]]
        messages=None,  # type: Optional[List["models.MicrosoftGraphMessage"]]
        people=None,  # type: Optional[List["models.MicrosoftGraphPerson"]]
        photo=None,  # type: Optional["models.MicrosoftGraphProfilePhoto"]
        photos=None,  # type: Optional[List["models.MicrosoftGraphProfilePhoto"]]
        drive=None,  # type: Optional["models.MicrosoftGraphDrive"]
        drives=None,  # type: Optional[List["models.MicrosoftGraphDrive"]]
        followed_sites=None,  # type: Optional[List["models.MicrosoftGraphSite"]]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        managed_devices=None,  # type: Optional[List["models.MicrosoftGraphManagedDevice"]]
        managed_app_registrations=None,  # type: Optional[List["models.MicrosoftGraphManagedAppRegistration"]]
        device_management_troubleshooting_events=None,  # type: Optional[List["models.MicrosoftGraphDeviceManagementTroubleshootingEvent"]]
        activities=None,  # type: Optional[List["models.MicrosoftGraphUserActivity"]]
        online_meetings=None,  # type: Optional[List["models.MicrosoftGraphOnlineMeeting"]]
        joined_teams=None,  # type: Optional[List["models.MicrosoftGraphTeam"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        notebooks=None,  # type: Optional[List["models.MicrosoftGraphNotebook"]]
        operations=None,  # type: Optional[List["models.MicrosoftGraphOnenoteOperation"]]
        pages=None,  # type: Optional[List["models.MicrosoftGraphOnenotePage"]]
        resources=None,  # type: Optional[List["models.MicrosoftGraphOnenoteResource"]]
        section_groups=None,  # type: Optional[List["models.MicrosoftGraphSectionGroup"]]
        sections=None,  # type: Optional[List["models.MicrosoftGraphOnenoteSection"]]
        id1=None,  # type: Optional[str]
        contribution_to_content_discovery_as_organization_disabled=None,  # type: Optional[bool]
        contribution_to_content_discovery_disabled=None,  # type: Optional[bool]
        id2=None,  # type: Optional[str]
        microsoft_graph_change_tracked_entity_created_date_time_created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        availability=None,  # type: Optional[List["models.MicrosoftGraphShiftAvailability"]]
        id3=None,  # type: Optional[str]
        shared=None,  # type: Optional[List["models.MicrosoftGraphSharedInsight"]]
        trending=None,  # type: Optional[List["models.MicrosoftGraphTrending"]]
        used=None,  # type: Optional[List["models.MicrosoftGraphUsedInsight"]]
        id4=None,  # type: Optional[str]
        plans=None,  # type: Optional[List["models.MicrosoftGraphPlannerPlan"]]
        tasks=None,  # type: Optional[List["models.MicrosoftGraphPlannerTask"]]
        id5=None,  # type: Optional[str]
        master_categories=None,  # type: Optional[List["models.MicrosoftGraphOutlookCategory"]]
        id6=None,  # type: Optional[str]
        overrides=None,  # type: Optional[List["models.MicrosoftGraphInferenceClassificationOverride"]]
        archive_folder=None,  # type: Optional[str]
        automatic_replies_setting=None,  # type: Optional["models.MicrosoftGraphAutomaticRepliesSetting"]
        date_format=None,  # type: Optional[str]
        delegate_meeting_message_delivery_options=None,  # type: Optional[Union[str, "models.MicrosoftGraphDelegateMeetingMessageDeliveryOptions"]]
        language=None,  # type: Optional["models.MicrosoftGraphLocaleInfo"]
        time_format=None,  # type: Optional[str]
        time_zone=None,  # type: Optional[str]
        working_hours=None,  # type: Optional["models.MicrosoftGraphWorkingHours"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphUser"
        """Add new entity to users.

        Add new entity to users.

        :param id: Read-only.
        :type id: str
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param account_enabled: true if the account is enabled; otherwise, false. This property is
         required when a user is created. Supports $filter.
        :type account_enabled: bool
        :param age_group: Sets the age group of the user. Allowed values: null, minor, notAdult and
         adult. Refer to the legal age group property definitions for further information.
        :type age_group: str
        :param assigned_licenses: The licenses that are assigned to the user. Not nullable.
        :type assigned_licenses: list[~users.models.MicrosoftGraphAssignedLicense]
        :param assigned_plans: The plans that are assigned to the user. Read-only. Not nullable.
        :type assigned_plans: list[~users.models.MicrosoftGraphAssignedPlan]
        :param business_phones: The telephone numbers for the user. NOTE: Although this is a string
         collection, only one number can be set for this property.
        :type business_phones: list[str]
        :param city: The city in which the user is located. Supports $filter.
        :type city: str
        :param company_name: The company name which the user is associated. This property can be useful
         for describing the company that an external user comes from. The maximum length of the company
         name is 64 chararcters.Returned only on $select.
        :type company_name: str
        :param consent_provided_for_minor: Sets whether consent has been obtained for minors. Allowed
         values: null, granted, denied and notRequired. Refer to the legal age group property
         definitions for further information.
        :type consent_provided_for_minor: str
        :param country: The country/region in which the user is located; for example, 'US' or 'UK'.
         Supports $filter.
        :type country: str
        :param created_date_time: The created date of the user object.
        :type created_date_time: ~datetime.datetime
        :param creation_type: Indicates whether the user account was created as a regular school or
         work account (null), an external account (Invitation), a local account for an Azure Active
         Directory B2C tenant (LocalAccount) or self-service sign-up using email verification
         (EmailVerified). Read-only.
        :type creation_type: str
        :param department: The name for the department in which the user works. Supports $filter.
        :type department: str
        :param display_name: The name displayed in the address book for the user. This is usually the
         combination of the user's first name, middle initial and last name. This property is required
         when a user is created and it cannot be cleared during updates. Supports $filter and $orderby.
        :type display_name: str
        :param employee_id: The employee identifier assigned to the user by the organization. Supports
         $filter.
        :type employee_id: str
        :param external_user_state: For an external user invited to the tenant using the invitation
         API, this property represents the invited user's invitation status. For invited users, the
         state can be PendingAcceptance or Accepted, or null for all other users. Returned only on
         $select. Supports $filter with the supported values. For example: $filter=externalUserState eq
         'PendingAcceptance'.
        :type external_user_state: str
        :param external_user_state_change_date_time: Shows the timestamp for the latest change to the
         externalUserState property. Returned only on $select.
        :type external_user_state_change_date_time: ~datetime.datetime
        :param fax_number: The fax number of the user.
        :type fax_number: str
        :param given_name: The given name (first name) of the user. Supports $filter.
        :type given_name: str
        :param identities: Represents the identities that can be used to sign in to this user account.
         An identity can be provided by Microsoft (also known as a local account), by organizations, or
         by social identity providers such as Facebook, Google, and Microsoft, and tied to a user
         account. May contain multiple items with the same signInType value. Supports $filter.
        :type identities: list[~users.models.MicrosoftGraphObjectIdentity]
        :param im_addresses: The instant message voice over IP (VOIP) session initiation protocol (SIP)
         addresses for the user. Read-only.
        :type im_addresses: list[str]
        :param is_resource_account: Do not use – reserved for future use.
        :type is_resource_account: bool
        :param job_title: The user’s job title. Supports $filter.
        :type job_title: str
        :param last_password_change_date_time: The time when this Azure AD user last changed their
         password. The date and time information uses ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type last_password_change_date_time: ~datetime.datetime
        :param legal_age_group_classification: Used by enterprise applications to determine the legal
         age group of the user. This property is read-only and calculated based on ageGroup and
         consentProvidedForMinor properties. Allowed values: null, minorWithOutParentalConsent,
         minorWithParentalConsent, minorNoParentalConsentRequired, notAdult and adult. Refer to the
         legal age group property definitions for further information.).
        :type legal_age_group_classification: str
        :param license_assignment_states: State of license assignments for this user. Read-only.
        :type license_assignment_states: list[~users.models.MicrosoftGraphLicenseAssignmentState]
        :param mail: The SMTP address for the user, for example, 'jeff@contoso.onmicrosoft.com'.
         Supports $filter.
        :type mail: str
        :param mail_nickname: The mail alias for the user. This property must be specified when a user
         is created. Supports $filter.
        :type mail_nickname: str
        :param mobile_phone: The primary cellular telephone number for the user.
        :type mobile_phone: str
        :param office_location: The office location in the user's place of business.
        :type office_location: str
        :param on_premises_distinguished_name: Contains the on-premises Active Directory distinguished
         name or DN. The property is only populated for customers who are synchronizing their on-
         premises directory to Azure Active Directory via Azure AD Connect. Read-only.
        :type on_premises_distinguished_name: str
        :param on_premises_domain_name: Contains the on-premises domainFQDN, also called dnsDomainName
         synchronized from the on-premises directory. The property is only populated for customers who
         are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect.
         Read-only.
        :type on_premises_domain_name: str
        :param on_premises_extension_attributes: onPremisesExtensionAttributes.
        :type on_premises_extension_attributes: ~users.models.MicrosoftGraphOnPremisesExtensionAttributes
        :param on_premises_immutable_id: This property is used to associate an on-premises Active
         Directory user account to their Azure AD user object. This property must be specified when
         creating a new user account in the Graph if you are using a federated domain for the user’s
         userPrincipalName (UPN) property. Important: The $ and _ characters cannot be used when
         specifying this property. Supports $filter.
        :type on_premises_immutable_id: str
        :param on_premises_last_sync_date_time: Indicates the last time at which the object was synced
         with the on-premises directory; for example: '2013-02-16T03:04:54Z'. The Timestamp type
         represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
        :type on_premises_last_sync_date_time: ~datetime.datetime
        :param on_premises_provisioning_errors: Errors when using Microsoft synchronization product
         during provisioning.
        :type on_premises_provisioning_errors: list[~users.models.MicrosoftGraphOnPremisesProvisioningError]
        :param on_premises_sam_account_name: Contains the on-premises samAccountName synchronized from
         the on-premises directory. The property is only populated for customers who are synchronizing
         their on-premises directory to Azure Active Directory via Azure AD Connect. Read-only.
        :type on_premises_sam_account_name: str
        :param on_premises_security_identifier: Contains the on-premises security identifier (SID) for
         the user that was synchronized from on-premises to the cloud. Read-only.
        :type on_premises_security_identifier: str
        :param on_premises_sync_enabled: true if this object is synced from an on-premises directory;
         false if this object was originally synced from an on-premises directory but is no longer
         synced; null if this object has never been synced from an on-premises directory (default).
         Read-only.
        :type on_premises_sync_enabled: bool
        :param on_premises_user_principal_name: Contains the on-premises userPrincipalName synchronized
         from the on-premises directory. The property is only populated for customers who are
         synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Read-
         only.
        :type on_premises_user_principal_name: str
        :param other_mails: A list of additional email addresses for the user; for example:
         ['bob@contoso.com', 'Robert@fabrikam.com']. Supports $filter.
        :type other_mails: list[str]
        :param password_policies: Specifies password policies for the user. This value is an
         enumeration with one possible value being 'DisableStrongPassword', which allows weaker
         passwords than the default policy to be specified. 'DisablePasswordExpiration' can also be
         specified. The two may be specified together; for example: 'DisablePasswordExpiration,
         DisableStrongPassword'.
        :type password_policies: str
        :param password_profile: passwordProfile.
        :type password_profile: ~users.models.MicrosoftGraphPasswordProfile
        :param postal_code: The postal code for the user's postal address. The postal code is specific
         to the user's country/region. In the United States of America, this attribute contains the ZIP
         code.
        :type postal_code: str
        :param preferred_language: The preferred language for the user. Should follow ISO 639-1 Code;
         for example 'en-US'.
        :type preferred_language: str
        :param provisioned_plans: The plans that are provisioned for the user. Read-only. Not nullable.
        :type provisioned_plans: list[~users.models.MicrosoftGraphProvisionedPlan]
        :param proxy_addresses: For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']
         The any operator is required for filter expressions on multi-valued properties. Read-only, Not
         nullable. Supports $filter.
        :type proxy_addresses: list[str]
        :param show_in_address_list: true if the Outlook global address list should contain this user,
         otherwise false. If not set, this will be treated as true. For users invited through the
         invitation manager, this property will be set to false.
        :type show_in_address_list: bool
        :param sign_in_sessions_valid_from_date_time: Any refresh tokens or sessions tokens (session
         cookies) issued before this time are invalid, and applications will get an error when using an
         invalid refresh or sessions token to acquire a delegated access token (to access APIs such as
         Microsoft Graph).  If this happens, the application will need to acquire a new refresh token by
         making a request to the authorize endpoint. Read-only. Use revokeSignInSessions to reset.
        :type sign_in_sessions_valid_from_date_time: ~datetime.datetime
        :param state: The state or province in the user's address. Supports $filter.
        :type state: str
        :param street_address: The street address of the user's place of business.
        :type street_address: str
        :param surname: The user's surname (family name or last name). Supports $filter.
        :type surname: str
        :param usage_location: A two letter country code (ISO standard 3166). Required for users that
         will be assigned licenses due to legal requirement to check for availability of services in
         countries.  Examples include: 'US', 'JP', and 'GB'. Not nullable. Supports $filter.
        :type usage_location: str
        :param user_principal_name: The user principal name (UPN) of the user. The UPN is an Internet-
         style login name for the user based on the Internet standard RFC 822. By convention, this
         should map to the user's email name. The general format is alias@domain, where domain must be
         present in the tenant’s collection of verified domains. This property is required when a user
         is created. The verified domains for the tenant can be accessed from the verifiedDomains
         property of organization. Supports $filter and $orderby.
        :type user_principal_name: str
        :param user_type: A string value that can be used to classify user types in your directory,
         such as 'Member' and 'Guest'. Supports $filter.
        :type user_type: str
        :param device_enrollment_limit: The limit on the maximum number of devices that the user is
         permitted to enroll. Allowed values are 5 or 1000.
        :type device_enrollment_limit: int
        :param about_me: A freeform text entry field for the user to describe themselves.
        :type about_me: str
        :param birthday: The birthday of the user. The Timestamp type represents date and time
         information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
         1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type birthday: ~datetime.datetime
        :param hire_date: The hire date of the user. The Timestamp type represents date and time
         information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
         1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type hire_date: ~datetime.datetime
        :param interests: A list for the user to describe their interests.
        :type interests: list[str]
        :param my_site: The URL for the user's personal site.
        :type my_site: str
        :param past_projects: A list for the user to enumerate their past projects.
        :type past_projects: list[str]
        :param preferred_name: The preferred name for the user.
        :type preferred_name: str
        :param responsibilities: A list for the user to enumerate their responsibilities.
        :type responsibilities: list[str]
        :param schools: A list for the user to enumerate the schools they have attended.
        :type schools: list[str]
        :param skills: A list for the user to enumerate their skills.
        :type skills: list[str]
        :param app_role_assignments:
        :type app_role_assignments: list[~users.models.MicrosoftGraphAppRoleAssignment]
        :param created_objects: Directory objects that were created by the user. Read-only. Nullable.
        :type created_objects: list[~users.models.MicrosoftGraphDirectoryObject]
        :param direct_reports: The users and contacts that report to the user. (The users and contacts
         that have their manager property set to this user.) Read-only. Nullable.
        :type direct_reports: list[~users.models.MicrosoftGraphDirectoryObject]
        :param license_details: A collection of this user's license details. Read-only.
        :type license_details: list[~users.models.MicrosoftGraphLicenseDetails]
        :param manager: Represents an Azure Active Directory object. The directoryObject type is the
         base type for many other directory entity types.
        :type manager: ~users.models.MicrosoftGraphDirectoryObject
        :param member_of: The groups and directory roles that the user is a member of. Read-only.
         Nullable.
        :type member_of: list[~users.models.MicrosoftGraphDirectoryObject]
        :param oauth2_permission_grants:
        :type oauth2_permission_grants: list[~users.models.MicrosoftGraphOAuth2PermissionGrant]
        :param owned_devices: Devices that are owned by the user. Read-only. Nullable.
        :type owned_devices: list[~users.models.MicrosoftGraphDirectoryObject]
        :param owned_objects: Directory objects that are owned by the user. Read-only. Nullable.
        :type owned_objects: list[~users.models.MicrosoftGraphDirectoryObject]
        :param registered_devices: Devices that are registered for the user. Read-only. Nullable.
        :type registered_devices: list[~users.models.MicrosoftGraphDirectoryObject]
        :param scoped_role_member_of:
        :type scoped_role_member_of: list[~users.models.MicrosoftGraphScopedRoleMembership]
        :param transitive_member_of:
        :type transitive_member_of: list[~users.models.MicrosoftGraphDirectoryObject]
        :param calendar: calendar.
        :type calendar: ~users.models.MicrosoftGraphCalendar
        :param calendar_groups: The user's calendar groups. Read-only. Nullable.
        :type calendar_groups: list[~users.models.MicrosoftGraphCalendarGroup]
        :param calendars: The user's calendars. Read-only. Nullable.
        :type calendars: list[~users.models.MicrosoftGraphCalendar]
        :param calendar_view: The calendar view for the calendar. Read-only. Nullable.
        :type calendar_view: list[~users.models.MicrosoftGraphEvent]
        :param contact_folders: The user's contacts folders. Read-only. Nullable.
        :type contact_folders: list[~users.models.MicrosoftGraphContactFolder]
        :param contacts: The user's contacts. Read-only. Nullable.
        :type contacts: list[~users.models.MicrosoftGraphContact]
        :param events: The user's events. Default is to show Events under the Default Calendar. Read-
         only. Nullable.
        :type events: list[~users.models.MicrosoftGraphEvent]
        :param mail_folders: The user's mail folders. Read-only. Nullable.
        :type mail_folders: list[~users.models.MicrosoftGraphMailFolder]
        :param messages: The messages in a mailbox or folder. Read-only. Nullable.
        :type messages: list[~users.models.MicrosoftGraphMessage]
        :param people: People that are relevant to the user. Read-only. Nullable.
        :type people: list[~users.models.MicrosoftGraphPerson]
        :param photo: profilePhoto.
        :type photo: ~users.models.MicrosoftGraphProfilePhoto
        :param photos:
        :type photos: list[~users.models.MicrosoftGraphProfilePhoto]
        :param drive: drive.
        :type drive: ~users.models.MicrosoftGraphDrive
        :param drives: A collection of drives available for this user. Read-only.
        :type drives: list[~users.models.MicrosoftGraphDrive]
        :param followed_sites:
        :type followed_sites: list[~users.models.MicrosoftGraphSite]
        :param extensions: The collection of open extensions defined for the user. Read-only. Nullable.
        :type extensions: list[~users.models.MicrosoftGraphExtension]
        :param managed_devices: The managed devices associated with the user.
        :type managed_devices: list[~users.models.MicrosoftGraphManagedDevice]
        :param managed_app_registrations: Zero or more managed app registrations that belong to the
         user.
        :type managed_app_registrations: list[~users.models.MicrosoftGraphManagedAppRegistration]
        :param device_management_troubleshooting_events: The list of troubleshooting events for this
         user.
        :type device_management_troubleshooting_events: list[~users.models.MicrosoftGraphDeviceManagementTroubleshootingEvent]
        :param activities: The user's activities across devices. Read-only. Nullable.
        :type activities: list[~users.models.MicrosoftGraphUserActivity]
        :param online_meetings:
        :type online_meetings: list[~users.models.MicrosoftGraphOnlineMeeting]
        :param joined_teams:
        :type joined_teams: list[~users.models.MicrosoftGraphTeam]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param notebooks: The collection of OneNote notebooks that are owned by the user or group.
         Read-only. Nullable.
        :type notebooks: list[~users.models.MicrosoftGraphNotebook]
        :param operations: The status of OneNote operations. Getting an operations collection is not
         supported, but you can get the status of long-running operations if the Operation-Location
         header is returned in the response. Read-only. Nullable.
        :type operations: list[~users.models.MicrosoftGraphOnenoteOperation]
        :param pages: The pages in all OneNote notebooks that are owned by the user or group.  Read-
         only. Nullable.
        :type pages: list[~users.models.MicrosoftGraphOnenotePage]
        :param resources: The image and other file resources in OneNote pages. Getting a resources
         collection is not supported, but you can get the binary content of a specific resource. Read-
         only. Nullable.
        :type resources: list[~users.models.MicrosoftGraphOnenoteResource]
        :param section_groups: The section groups in all OneNote notebooks that are owned by the user
         or group.  Read-only. Nullable.
        :type section_groups: list[~users.models.MicrosoftGraphSectionGroup]
        :param sections: The sections in all OneNote notebooks that are owned by the user or group.
         Read-only. Nullable.
        :type sections: list[~users.models.MicrosoftGraphOnenoteSection]
        :param id1: Read-only.
        :type id1: str
        :param contribution_to_content_discovery_as_organization_disabled:
        :type contribution_to_content_discovery_as_organization_disabled: bool
        :param contribution_to_content_discovery_disabled:
        :type contribution_to_content_discovery_disabled: bool
        :param id2: Read-only.
        :type id2: str
        :param microsoft_graph_change_tracked_entity_created_date_time_created_date_time: The Timestamp
         type represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type microsoft_graph_change_tracked_entity_created_date_time_created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~users.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~users.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~users.models.MicrosoftGraphIdentity
        :param availability: Availability of the user to be scheduled for work and its recurrence
         pattern.
        :type availability: list[~users.models.MicrosoftGraphShiftAvailability]
        :param id3: Read-only.
        :type id3: str
        :param shared: Calculated relationship identifying documents shared with or by the user. This
         includes URLs, file attachments, and reference attachments to OneDrive for Business and
         SharePoint files found in Outlook messages and meetings. This also includes URLs and reference
         attachments to Teams conversations. Ordered by recency of share.
        :type shared: list[~users.models.MicrosoftGraphSharedInsight]
        :param trending: Calculated relationship identifying documents trending around a user. Trending
         documents are calculated based on activity of the user's closest network of people and include
         files stored in OneDrive for Business and SharePoint. Trending insights help the user to
         discover potentially useful content that the user has access to, but has never viewed before.
        :type trending: list[~users.models.MicrosoftGraphTrending]
        :param used: Calculated relationship identifying the latest documents viewed or modified by a
         user, including OneDrive for Business and SharePoint documents, ranked by recency of use.
        :type used: list[~users.models.MicrosoftGraphUsedInsight]
        :param id4: Read-only.
        :type id4: str
        :param plans: Read-only. Nullable. Returns the plannerTasks assigned to the user.
        :type plans: list[~users.models.MicrosoftGraphPlannerPlan]
        :param tasks: Read-only. Nullable. Returns the plannerPlans shared with the user.
        :type tasks: list[~users.models.MicrosoftGraphPlannerTask]
        :param id5: Read-only.
        :type id5: str
        :param master_categories: A list of categories defined for the user.
        :type master_categories: list[~users.models.MicrosoftGraphOutlookCategory]
        :param id6: Read-only.
        :type id6: str
        :param overrides: A set of overrides for a user to always classify messages from specific
         senders in certain ways: focused, or other. Read-only. Nullable.
        :type overrides: list[~users.models.MicrosoftGraphInferenceClassificationOverride]
        :param archive_folder: Folder ID of an archive folder for the user.
        :type archive_folder: str
        :param automatic_replies_setting: automaticRepliesSetting.
        :type automatic_replies_setting: ~users.models.MicrosoftGraphAutomaticRepliesSetting
        :param date_format: The date format for the user's mailbox.
        :type date_format: str
        :param delegate_meeting_message_delivery_options:
        :type delegate_meeting_message_delivery_options: str or ~users.models.MicrosoftGraphDelegateMeetingMessageDeliveryOptions
        :param language: localeInfo.
        :type language: ~users.models.MicrosoftGraphLocaleInfo
        :param time_format: The time format for the user's mailbox.
        :type time_format: str
        :param time_zone: The default time zone for the user's mailbox.
        :type time_zone: str
        :param working_hours: workingHours.
        :type working_hours: ~users.models.MicrosoftGraphWorkingHours
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUser, or the result of cls(response)
        :rtype: ~users.models.MicrosoftGraphUser
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUser"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphUser(id=id, deleted_date_time=deleted_date_time, account_enabled=account_enabled, age_group=age_group, assigned_licenses=assigned_licenses, assigned_plans=assigned_plans, business_phones=business_phones, city=city, company_name=company_name, consent_provided_for_minor=consent_provided_for_minor, country=country, created_date_time=created_date_time, creation_type=creation_type, department=department, display_name=display_name, employee_id=employee_id, external_user_state=external_user_state, external_user_state_change_date_time=external_user_state_change_date_time, fax_number=fax_number, given_name=given_name, identities=identities, im_addresses=im_addresses, is_resource_account=is_resource_account, job_title=job_title, last_password_change_date_time=last_password_change_date_time, legal_age_group_classification=legal_age_group_classification, license_assignment_states=license_assignment_states, mail=mail, mail_nickname=mail_nickname, mobile_phone=mobile_phone, office_location=office_location, on_premises_distinguished_name=on_premises_distinguished_name, on_premises_domain_name=on_premises_domain_name, on_premises_extension_attributes=on_premises_extension_attributes, on_premises_immutable_id=on_premises_immutable_id, on_premises_last_sync_date_time=on_premises_last_sync_date_time, on_premises_provisioning_errors=on_premises_provisioning_errors, on_premises_sam_account_name=on_premises_sam_account_name, on_premises_security_identifier=on_premises_security_identifier, on_premises_sync_enabled=on_premises_sync_enabled, on_premises_user_principal_name=on_premises_user_principal_name, other_mails=other_mails, password_policies=password_policies, password_profile=password_profile, postal_code=postal_code, preferred_language=preferred_language, provisioned_plans=provisioned_plans, proxy_addresses=proxy_addresses, show_in_address_list=show_in_address_list, sign_in_sessions_valid_from_date_time=sign_in_sessions_valid_from_date_time, state=state, street_address=street_address, surname=surname, usage_location=usage_location, user_principal_name=user_principal_name, user_type=user_type, device_enrollment_limit=device_enrollment_limit, about_me=about_me, birthday=birthday, hire_date=hire_date, interests=interests, my_site=my_site, past_projects=past_projects, preferred_name=preferred_name, responsibilities=responsibilities, schools=schools, skills=skills, app_role_assignments=app_role_assignments, created_objects=created_objects, direct_reports=direct_reports, license_details=license_details, manager=manager, member_of=member_of, oauth2_permission_grants=oauth2_permission_grants, owned_devices=owned_devices, owned_objects=owned_objects, registered_devices=registered_devices, scoped_role_member_of=scoped_role_member_of, transitive_member_of=transitive_member_of, calendar=calendar, calendar_groups=calendar_groups, calendars=calendars, calendar_view=calendar_view, contact_folders=contact_folders, contacts=contacts, events=events, mail_folders=mail_folders, messages=messages, people=people, photo=photo, photos=photos, drive=drive, drives=drives, followed_sites=followed_sites, extensions=extensions, managed_devices=managed_devices, managed_app_registrations=managed_app_registrations, device_management_troubleshooting_events=device_management_troubleshooting_events, activities=activities, online_meetings=online_meetings, joined_teams=joined_teams, id_onenote_id=microsoft_graph_entity_id, notebooks=notebooks, operations=operations, pages=pages, resources=resources, section_groups=section_groups, sections=sections, id_settings_id=id1, contribution_to_content_discovery_as_organization_disabled=contribution_to_content_discovery_as_organization_disabled, contribution_to_content_discovery_disabled=contribution_to_content_discovery_disabled, id_settings_shift_preferences_id=id2, created_date_time_settings_shift_preferences_created_date_time=microsoft_graph_change_tracked_entity_created_date_time_created_date_time, last_modified_date_time=last_modified_date_time, application=application, device=device, user=user, availability=availability, id_insights_id=id3, shared=shared, trending=trending, used=used, id_planner_id=id4, plans=plans, tasks=tasks, id_outlook_id=id5, master_categories=master_categories, id_inference_classification_id=id6, overrides=overrides, archive_folder=archive_folder, automatic_replies_setting=automatic_replies_setting, date_format=date_format, delegate_meeting_message_delivery_options=delegate_meeting_message_delivery_options, language=language, time_format=time_format, time_zone=time_zone, working_hours=working_hours)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_user.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphUser')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUser', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_user.metadata = {'url': '/users'}  # type: ignore

    def get_user(
        self,
        user_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Get1ItemsItem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get2ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphUser"
        """Get entity from users by key.

        Get entity from users by key.

        :param user_id: key: id of user.
        :type user_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~users.models.Get1ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~users.models.Get2ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUser, or the result of cls(response)
        :rtype: ~users.models.MicrosoftGraphUser
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUser"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_user.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUser', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_user.metadata = {'url': '/users/{user-id}'}  # type: ignore

    def update_user(
        self,
        user_id,  # type: str
        id=None,  # type: Optional[str]
        deleted_date_time=None,  # type: Optional[datetime.datetime]
        account_enabled=None,  # type: Optional[bool]
        age_group=None,  # type: Optional[str]
        assigned_licenses=None,  # type: Optional[List["models.MicrosoftGraphAssignedLicense"]]
        assigned_plans=None,  # type: Optional[List["models.MicrosoftGraphAssignedPlan"]]
        business_phones=None,  # type: Optional[List[str]]
        city=None,  # type: Optional[str]
        company_name=None,  # type: Optional[str]
        consent_provided_for_minor=None,  # type: Optional[str]
        country=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        creation_type=None,  # type: Optional[str]
        department=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        employee_id=None,  # type: Optional[str]
        external_user_state=None,  # type: Optional[str]
        external_user_state_change_date_time=None,  # type: Optional[datetime.datetime]
        fax_number=None,  # type: Optional[str]
        given_name=None,  # type: Optional[str]
        identities=None,  # type: Optional[List["models.MicrosoftGraphObjectIdentity"]]
        im_addresses=None,  # type: Optional[List[str]]
        is_resource_account=None,  # type: Optional[bool]
        job_title=None,  # type: Optional[str]
        last_password_change_date_time=None,  # type: Optional[datetime.datetime]
        legal_age_group_classification=None,  # type: Optional[str]
        license_assignment_states=None,  # type: Optional[List["models.MicrosoftGraphLicenseAssignmentState"]]
        mail=None,  # type: Optional[str]
        mail_nickname=None,  # type: Optional[str]
        mobile_phone=None,  # type: Optional[str]
        office_location=None,  # type: Optional[str]
        on_premises_distinguished_name=None,  # type: Optional[str]
        on_premises_domain_name=None,  # type: Optional[str]
        on_premises_extension_attributes=None,  # type: Optional["models.MicrosoftGraphOnPremisesExtensionAttributes"]
        on_premises_immutable_id=None,  # type: Optional[str]
        on_premises_last_sync_date_time=None,  # type: Optional[datetime.datetime]
        on_premises_provisioning_errors=None,  # type: Optional[List["models.MicrosoftGraphOnPremisesProvisioningError"]]
        on_premises_sam_account_name=None,  # type: Optional[str]
        on_premises_security_identifier=None,  # type: Optional[str]
        on_premises_sync_enabled=None,  # type: Optional[bool]
        on_premises_user_principal_name=None,  # type: Optional[str]
        other_mails=None,  # type: Optional[List[str]]
        password_policies=None,  # type: Optional[str]
        password_profile=None,  # type: Optional["models.MicrosoftGraphPasswordProfile"]
        postal_code=None,  # type: Optional[str]
        preferred_language=None,  # type: Optional[str]
        provisioned_plans=None,  # type: Optional[List["models.MicrosoftGraphProvisionedPlan"]]
        proxy_addresses=None,  # type: Optional[List[str]]
        show_in_address_list=None,  # type: Optional[bool]
        sign_in_sessions_valid_from_date_time=None,  # type: Optional[datetime.datetime]
        state=None,  # type: Optional[str]
        street_address=None,  # type: Optional[str]
        surname=None,  # type: Optional[str]
        usage_location=None,  # type: Optional[str]
        user_principal_name=None,  # type: Optional[str]
        user_type=None,  # type: Optional[str]
        device_enrollment_limit=None,  # type: Optional[int]
        about_me=None,  # type: Optional[str]
        birthday=None,  # type: Optional[datetime.datetime]
        hire_date=None,  # type: Optional[datetime.datetime]
        interests=None,  # type: Optional[List[str]]
        my_site=None,  # type: Optional[str]
        past_projects=None,  # type: Optional[List[str]]
        preferred_name=None,  # type: Optional[str]
        responsibilities=None,  # type: Optional[List[str]]
        schools=None,  # type: Optional[List[str]]
        skills=None,  # type: Optional[List[str]]
        app_role_assignments=None,  # type: Optional[List["models.MicrosoftGraphAppRoleAssignment"]]
        created_objects=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        direct_reports=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        license_details=None,  # type: Optional[List["models.MicrosoftGraphLicenseDetails"]]
        manager=None,  # type: Optional["models.MicrosoftGraphDirectoryObject"]
        member_of=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        oauth2_permission_grants=None,  # type: Optional[List["models.MicrosoftGraphOAuth2PermissionGrant"]]
        owned_devices=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        owned_objects=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        registered_devices=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        scoped_role_member_of=None,  # type: Optional[List["models.MicrosoftGraphScopedRoleMembership"]]
        transitive_member_of=None,  # type: Optional[List["models.MicrosoftGraphDirectoryObject"]]
        calendar=None,  # type: Optional["models.MicrosoftGraphCalendar"]
        calendar_groups=None,  # type: Optional[List["models.MicrosoftGraphCalendarGroup"]]
        calendars=None,  # type: Optional[List["models.MicrosoftGraphCalendar"]]
        calendar_view=None,  # type: Optional[List["models.MicrosoftGraphEvent"]]
        contact_folders=None,  # type: Optional[List["models.MicrosoftGraphContactFolder"]]
        contacts=None,  # type: Optional[List["models.MicrosoftGraphContact"]]
        events=None,  # type: Optional[List["models.MicrosoftGraphEvent"]]
        mail_folders=None,  # type: Optional[List["models.MicrosoftGraphMailFolder"]]
        messages=None,  # type: Optional[List["models.MicrosoftGraphMessage"]]
        people=None,  # type: Optional[List["models.MicrosoftGraphPerson"]]
        photo=None,  # type: Optional["models.MicrosoftGraphProfilePhoto"]
        photos=None,  # type: Optional[List["models.MicrosoftGraphProfilePhoto"]]
        drive=None,  # type: Optional["models.MicrosoftGraphDrive"]
        drives=None,  # type: Optional[List["models.MicrosoftGraphDrive"]]
        followed_sites=None,  # type: Optional[List["models.MicrosoftGraphSite"]]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        managed_devices=None,  # type: Optional[List["models.MicrosoftGraphManagedDevice"]]
        managed_app_registrations=None,  # type: Optional[List["models.MicrosoftGraphManagedAppRegistration"]]
        device_management_troubleshooting_events=None,  # type: Optional[List["models.MicrosoftGraphDeviceManagementTroubleshootingEvent"]]
        activities=None,  # type: Optional[List["models.MicrosoftGraphUserActivity"]]
        online_meetings=None,  # type: Optional[List["models.MicrosoftGraphOnlineMeeting"]]
        joined_teams=None,  # type: Optional[List["models.MicrosoftGraphTeam"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        notebooks=None,  # type: Optional[List["models.MicrosoftGraphNotebook"]]
        operations=None,  # type: Optional[List["models.MicrosoftGraphOnenoteOperation"]]
        pages=None,  # type: Optional[List["models.MicrosoftGraphOnenotePage"]]
        resources=None,  # type: Optional[List["models.MicrosoftGraphOnenoteResource"]]
        section_groups=None,  # type: Optional[List["models.MicrosoftGraphSectionGroup"]]
        sections=None,  # type: Optional[List["models.MicrosoftGraphOnenoteSection"]]
        id1=None,  # type: Optional[str]
        contribution_to_content_discovery_as_organization_disabled=None,  # type: Optional[bool]
        contribution_to_content_discovery_disabled=None,  # type: Optional[bool]
        id2=None,  # type: Optional[str]
        microsoft_graph_change_tracked_entity_created_date_time_created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        availability=None,  # type: Optional[List["models.MicrosoftGraphShiftAvailability"]]
        id3=None,  # type: Optional[str]
        shared=None,  # type: Optional[List["models.MicrosoftGraphSharedInsight"]]
        trending=None,  # type: Optional[List["models.MicrosoftGraphTrending"]]
        used=None,  # type: Optional[List["models.MicrosoftGraphUsedInsight"]]
        id4=None,  # type: Optional[str]
        plans=None,  # type: Optional[List["models.MicrosoftGraphPlannerPlan"]]
        tasks=None,  # type: Optional[List["models.MicrosoftGraphPlannerTask"]]
        id5=None,  # type: Optional[str]
        master_categories=None,  # type: Optional[List["models.MicrosoftGraphOutlookCategory"]]
        id6=None,  # type: Optional[str]
        overrides=None,  # type: Optional[List["models.MicrosoftGraphInferenceClassificationOverride"]]
        archive_folder=None,  # type: Optional[str]
        automatic_replies_setting=None,  # type: Optional["models.MicrosoftGraphAutomaticRepliesSetting"]
        date_format=None,  # type: Optional[str]
        delegate_meeting_message_delivery_options=None,  # type: Optional[Union[str, "models.MicrosoftGraphDelegateMeetingMessageDeliveryOptions"]]
        language=None,  # type: Optional["models.MicrosoftGraphLocaleInfo"]
        time_format=None,  # type: Optional[str]
        time_zone=None,  # type: Optional[str]
        working_hours=None,  # type: Optional["models.MicrosoftGraphWorkingHours"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update entity in users.

        Update entity in users.

        :param user_id: key: id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param account_enabled: true if the account is enabled; otherwise, false. This property is
         required when a user is created. Supports $filter.
        :type account_enabled: bool
        :param age_group: Sets the age group of the user. Allowed values: null, minor, notAdult and
         adult. Refer to the legal age group property definitions for further information.
        :type age_group: str
        :param assigned_licenses: The licenses that are assigned to the user. Not nullable.
        :type assigned_licenses: list[~users.models.MicrosoftGraphAssignedLicense]
        :param assigned_plans: The plans that are assigned to the user. Read-only. Not nullable.
        :type assigned_plans: list[~users.models.MicrosoftGraphAssignedPlan]
        :param business_phones: The telephone numbers for the user. NOTE: Although this is a string
         collection, only one number can be set for this property.
        :type business_phones: list[str]
        :param city: The city in which the user is located. Supports $filter.
        :type city: str
        :param company_name: The company name which the user is associated. This property can be useful
         for describing the company that an external user comes from. The maximum length of the company
         name is 64 chararcters.Returned only on $select.
        :type company_name: str
        :param consent_provided_for_minor: Sets whether consent has been obtained for minors. Allowed
         values: null, granted, denied and notRequired. Refer to the legal age group property
         definitions for further information.
        :type consent_provided_for_minor: str
        :param country: The country/region in which the user is located; for example, 'US' or 'UK'.
         Supports $filter.
        :type country: str
        :param created_date_time: The created date of the user object.
        :type created_date_time: ~datetime.datetime
        :param creation_type: Indicates whether the user account was created as a regular school or
         work account (null), an external account (Invitation), a local account for an Azure Active
         Directory B2C tenant (LocalAccount) or self-service sign-up using email verification
         (EmailVerified). Read-only.
        :type creation_type: str
        :param department: The name for the department in which the user works. Supports $filter.
        :type department: str
        :param display_name: The name displayed in the address book for the user. This is usually the
         combination of the user's first name, middle initial and last name. This property is required
         when a user is created and it cannot be cleared during updates. Supports $filter and $orderby.
        :type display_name: str
        :param employee_id: The employee identifier assigned to the user by the organization. Supports
         $filter.
        :type employee_id: str
        :param external_user_state: For an external user invited to the tenant using the invitation
         API, this property represents the invited user's invitation status. For invited users, the
         state can be PendingAcceptance or Accepted, or null for all other users. Returned only on
         $select. Supports $filter with the supported values. For example: $filter=externalUserState eq
         'PendingAcceptance'.
        :type external_user_state: str
        :param external_user_state_change_date_time: Shows the timestamp for the latest change to the
         externalUserState property. Returned only on $select.
        :type external_user_state_change_date_time: ~datetime.datetime
        :param fax_number: The fax number of the user.
        :type fax_number: str
        :param given_name: The given name (first name) of the user. Supports $filter.
        :type given_name: str
        :param identities: Represents the identities that can be used to sign in to this user account.
         An identity can be provided by Microsoft (also known as a local account), by organizations, or
         by social identity providers such as Facebook, Google, and Microsoft, and tied to a user
         account. May contain multiple items with the same signInType value. Supports $filter.
        :type identities: list[~users.models.MicrosoftGraphObjectIdentity]
        :param im_addresses: The instant message voice over IP (VOIP) session initiation protocol (SIP)
         addresses for the user. Read-only.
        :type im_addresses: list[str]
        :param is_resource_account: Do not use – reserved for future use.
        :type is_resource_account: bool
        :param job_title: The user’s job title. Supports $filter.
        :type job_title: str
        :param last_password_change_date_time: The time when this Azure AD user last changed their
         password. The date and time information uses ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type last_password_change_date_time: ~datetime.datetime
        :param legal_age_group_classification: Used by enterprise applications to determine the legal
         age group of the user. This property is read-only and calculated based on ageGroup and
         consentProvidedForMinor properties. Allowed values: null, minorWithOutParentalConsent,
         minorWithParentalConsent, minorNoParentalConsentRequired, notAdult and adult. Refer to the
         legal age group property definitions for further information.).
        :type legal_age_group_classification: str
        :param license_assignment_states: State of license assignments for this user. Read-only.
        :type license_assignment_states: list[~users.models.MicrosoftGraphLicenseAssignmentState]
        :param mail: The SMTP address for the user, for example, 'jeff@contoso.onmicrosoft.com'.
         Supports $filter.
        :type mail: str
        :param mail_nickname: The mail alias for the user. This property must be specified when a user
         is created. Supports $filter.
        :type mail_nickname: str
        :param mobile_phone: The primary cellular telephone number for the user.
        :type mobile_phone: str
        :param office_location: The office location in the user's place of business.
        :type office_location: str
        :param on_premises_distinguished_name: Contains the on-premises Active Directory distinguished
         name or DN. The property is only populated for customers who are synchronizing their on-
         premises directory to Azure Active Directory via Azure AD Connect. Read-only.
        :type on_premises_distinguished_name: str
        :param on_premises_domain_name: Contains the on-premises domainFQDN, also called dnsDomainName
         synchronized from the on-premises directory. The property is only populated for customers who
         are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect.
         Read-only.
        :type on_premises_domain_name: str
        :param on_premises_extension_attributes: onPremisesExtensionAttributes.
        :type on_premises_extension_attributes: ~users.models.MicrosoftGraphOnPremisesExtensionAttributes
        :param on_premises_immutable_id: This property is used to associate an on-premises Active
         Directory user account to their Azure AD user object. This property must be specified when
         creating a new user account in the Graph if you are using a federated domain for the user’s
         userPrincipalName (UPN) property. Important: The $ and _ characters cannot be used when
         specifying this property. Supports $filter.
        :type on_premises_immutable_id: str
        :param on_premises_last_sync_date_time: Indicates the last time at which the object was synced
         with the on-premises directory; for example: '2013-02-16T03:04:54Z'. The Timestamp type
         represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
        :type on_premises_last_sync_date_time: ~datetime.datetime
        :param on_premises_provisioning_errors: Errors when using Microsoft synchronization product
         during provisioning.
        :type on_premises_provisioning_errors: list[~users.models.MicrosoftGraphOnPremisesProvisioningError]
        :param on_premises_sam_account_name: Contains the on-premises samAccountName synchronized from
         the on-premises directory. The property is only populated for customers who are synchronizing
         their on-premises directory to Azure Active Directory via Azure AD Connect. Read-only.
        :type on_premises_sam_account_name: str
        :param on_premises_security_identifier: Contains the on-premises security identifier (SID) for
         the user that was synchronized from on-premises to the cloud. Read-only.
        :type on_premises_security_identifier: str
        :param on_premises_sync_enabled: true if this object is synced from an on-premises directory;
         false if this object was originally synced from an on-premises directory but is no longer
         synced; null if this object has never been synced from an on-premises directory (default).
         Read-only.
        :type on_premises_sync_enabled: bool
        :param on_premises_user_principal_name: Contains the on-premises userPrincipalName synchronized
         from the on-premises directory. The property is only populated for customers who are
         synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Read-
         only.
        :type on_premises_user_principal_name: str
        :param other_mails: A list of additional email addresses for the user; for example:
         ['bob@contoso.com', 'Robert@fabrikam.com']. Supports $filter.
        :type other_mails: list[str]
        :param password_policies: Specifies password policies for the user. This value is an
         enumeration with one possible value being 'DisableStrongPassword', which allows weaker
         passwords than the default policy to be specified. 'DisablePasswordExpiration' can also be
         specified. The two may be specified together; for example: 'DisablePasswordExpiration,
         DisableStrongPassword'.
        :type password_policies: str
        :param password_profile: passwordProfile.
        :type password_profile: ~users.models.MicrosoftGraphPasswordProfile
        :param postal_code: The postal code for the user's postal address. The postal code is specific
         to the user's country/region. In the United States of America, this attribute contains the ZIP
         code.
        :type postal_code: str
        :param preferred_language: The preferred language for the user. Should follow ISO 639-1 Code;
         for example 'en-US'.
        :type preferred_language: str
        :param provisioned_plans: The plans that are provisioned for the user. Read-only. Not nullable.
        :type provisioned_plans: list[~users.models.MicrosoftGraphProvisionedPlan]
        :param proxy_addresses: For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']
         The any operator is required for filter expressions on multi-valued properties. Read-only, Not
         nullable. Supports $filter.
        :type proxy_addresses: list[str]
        :param show_in_address_list: true if the Outlook global address list should contain this user,
         otherwise false. If not set, this will be treated as true. For users invited through the
         invitation manager, this property will be set to false.
        :type show_in_address_list: bool
        :param sign_in_sessions_valid_from_date_time: Any refresh tokens or sessions tokens (session
         cookies) issued before this time are invalid, and applications will get an error when using an
         invalid refresh or sessions token to acquire a delegated access token (to access APIs such as
         Microsoft Graph).  If this happens, the application will need to acquire a new refresh token by
         making a request to the authorize endpoint. Read-only. Use revokeSignInSessions to reset.
        :type sign_in_sessions_valid_from_date_time: ~datetime.datetime
        :param state: The state or province in the user's address. Supports $filter.
        :type state: str
        :param street_address: The street address of the user's place of business.
        :type street_address: str
        :param surname: The user's surname (family name or last name). Supports $filter.
        :type surname: str
        :param usage_location: A two letter country code (ISO standard 3166). Required for users that
         will be assigned licenses due to legal requirement to check for availability of services in
         countries.  Examples include: 'US', 'JP', and 'GB'. Not nullable. Supports $filter.
        :type usage_location: str
        :param user_principal_name: The user principal name (UPN) of the user. The UPN is an Internet-
         style login name for the user based on the Internet standard RFC 822. By convention, this
         should map to the user's email name. The general format is alias@domain, where domain must be
         present in the tenant’s collection of verified domains. This property is required when a user
         is created. The verified domains for the tenant can be accessed from the verifiedDomains
         property of organization. Supports $filter and $orderby.
        :type user_principal_name: str
        :param user_type: A string value that can be used to classify user types in your directory,
         such as 'Member' and 'Guest'. Supports $filter.
        :type user_type: str
        :param device_enrollment_limit: The limit on the maximum number of devices that the user is
         permitted to enroll. Allowed values are 5 or 1000.
        :type device_enrollment_limit: int
        :param about_me: A freeform text entry field for the user to describe themselves.
        :type about_me: str
        :param birthday: The birthday of the user. The Timestamp type represents date and time
         information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
         1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type birthday: ~datetime.datetime
        :param hire_date: The hire date of the user. The Timestamp type represents date and time
         information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
         1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type hire_date: ~datetime.datetime
        :param interests: A list for the user to describe their interests.
        :type interests: list[str]
        :param my_site: The URL for the user's personal site.
        :type my_site: str
        :param past_projects: A list for the user to enumerate their past projects.
        :type past_projects: list[str]
        :param preferred_name: The preferred name for the user.
        :type preferred_name: str
        :param responsibilities: A list for the user to enumerate their responsibilities.
        :type responsibilities: list[str]
        :param schools: A list for the user to enumerate the schools they have attended.
        :type schools: list[str]
        :param skills: A list for the user to enumerate their skills.
        :type skills: list[str]
        :param app_role_assignments:
        :type app_role_assignments: list[~users.models.MicrosoftGraphAppRoleAssignment]
        :param created_objects: Directory objects that were created by the user. Read-only. Nullable.
        :type created_objects: list[~users.models.MicrosoftGraphDirectoryObject]
        :param direct_reports: The users and contacts that report to the user. (The users and contacts
         that have their manager property set to this user.) Read-only. Nullable.
        :type direct_reports: list[~users.models.MicrosoftGraphDirectoryObject]
        :param license_details: A collection of this user's license details. Read-only.
        :type license_details: list[~users.models.MicrosoftGraphLicenseDetails]
        :param manager: Represents an Azure Active Directory object. The directoryObject type is the
         base type for many other directory entity types.
        :type manager: ~users.models.MicrosoftGraphDirectoryObject
        :param member_of: The groups and directory roles that the user is a member of. Read-only.
         Nullable.
        :type member_of: list[~users.models.MicrosoftGraphDirectoryObject]
        :param oauth2_permission_grants:
        :type oauth2_permission_grants: list[~users.models.MicrosoftGraphOAuth2PermissionGrant]
        :param owned_devices: Devices that are owned by the user. Read-only. Nullable.
        :type owned_devices: list[~users.models.MicrosoftGraphDirectoryObject]
        :param owned_objects: Directory objects that are owned by the user. Read-only. Nullable.
        :type owned_objects: list[~users.models.MicrosoftGraphDirectoryObject]
        :param registered_devices: Devices that are registered for the user. Read-only. Nullable.
        :type registered_devices: list[~users.models.MicrosoftGraphDirectoryObject]
        :param scoped_role_member_of:
        :type scoped_role_member_of: list[~users.models.MicrosoftGraphScopedRoleMembership]
        :param transitive_member_of:
        :type transitive_member_of: list[~users.models.MicrosoftGraphDirectoryObject]
        :param calendar: calendar.
        :type calendar: ~users.models.MicrosoftGraphCalendar
        :param calendar_groups: The user's calendar groups. Read-only. Nullable.
        :type calendar_groups: list[~users.models.MicrosoftGraphCalendarGroup]
        :param calendars: The user's calendars. Read-only. Nullable.
        :type calendars: list[~users.models.MicrosoftGraphCalendar]
        :param calendar_view: The calendar view for the calendar. Read-only. Nullable.
        :type calendar_view: list[~users.models.MicrosoftGraphEvent]
        :param contact_folders: The user's contacts folders. Read-only. Nullable.
        :type contact_folders: list[~users.models.MicrosoftGraphContactFolder]
        :param contacts: The user's contacts. Read-only. Nullable.
        :type contacts: list[~users.models.MicrosoftGraphContact]
        :param events: The user's events. Default is to show Events under the Default Calendar. Read-
         only. Nullable.
        :type events: list[~users.models.MicrosoftGraphEvent]
        :param mail_folders: The user's mail folders. Read-only. Nullable.
        :type mail_folders: list[~users.models.MicrosoftGraphMailFolder]
        :param messages: The messages in a mailbox or folder. Read-only. Nullable.
        :type messages: list[~users.models.MicrosoftGraphMessage]
        :param people: People that are relevant to the user. Read-only. Nullable.
        :type people: list[~users.models.MicrosoftGraphPerson]
        :param photo: profilePhoto.
        :type photo: ~users.models.MicrosoftGraphProfilePhoto
        :param photos:
        :type photos: list[~users.models.MicrosoftGraphProfilePhoto]
        :param drive: drive.
        :type drive: ~users.models.MicrosoftGraphDrive
        :param drives: A collection of drives available for this user. Read-only.
        :type drives: list[~users.models.MicrosoftGraphDrive]
        :param followed_sites:
        :type followed_sites: list[~users.models.MicrosoftGraphSite]
        :param extensions: The collection of open extensions defined for the user. Read-only. Nullable.
        :type extensions: list[~users.models.MicrosoftGraphExtension]
        :param managed_devices: The managed devices associated with the user.
        :type managed_devices: list[~users.models.MicrosoftGraphManagedDevice]
        :param managed_app_registrations: Zero or more managed app registrations that belong to the
         user.
        :type managed_app_registrations: list[~users.models.MicrosoftGraphManagedAppRegistration]
        :param device_management_troubleshooting_events: The list of troubleshooting events for this
         user.
        :type device_management_troubleshooting_events: list[~users.models.MicrosoftGraphDeviceManagementTroubleshootingEvent]
        :param activities: The user's activities across devices. Read-only. Nullable.
        :type activities: list[~users.models.MicrosoftGraphUserActivity]
        :param online_meetings:
        :type online_meetings: list[~users.models.MicrosoftGraphOnlineMeeting]
        :param joined_teams:
        :type joined_teams: list[~users.models.MicrosoftGraphTeam]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param notebooks: The collection of OneNote notebooks that are owned by the user or group.
         Read-only. Nullable.
        :type notebooks: list[~users.models.MicrosoftGraphNotebook]
        :param operations: The status of OneNote operations. Getting an operations collection is not
         supported, but you can get the status of long-running operations if the Operation-Location
         header is returned in the response. Read-only. Nullable.
        :type operations: list[~users.models.MicrosoftGraphOnenoteOperation]
        :param pages: The pages in all OneNote notebooks that are owned by the user or group.  Read-
         only. Nullable.
        :type pages: list[~users.models.MicrosoftGraphOnenotePage]
        :param resources: The image and other file resources in OneNote pages. Getting a resources
         collection is not supported, but you can get the binary content of a specific resource. Read-
         only. Nullable.
        :type resources: list[~users.models.MicrosoftGraphOnenoteResource]
        :param section_groups: The section groups in all OneNote notebooks that are owned by the user
         or group.  Read-only. Nullable.
        :type section_groups: list[~users.models.MicrosoftGraphSectionGroup]
        :param sections: The sections in all OneNote notebooks that are owned by the user or group.
         Read-only. Nullable.
        :type sections: list[~users.models.MicrosoftGraphOnenoteSection]
        :param id1: Read-only.
        :type id1: str
        :param contribution_to_content_discovery_as_organization_disabled:
        :type contribution_to_content_discovery_as_organization_disabled: bool
        :param contribution_to_content_discovery_disabled:
        :type contribution_to_content_discovery_disabled: bool
        :param id2: Read-only.
        :type id2: str
        :param microsoft_graph_change_tracked_entity_created_date_time_created_date_time: The Timestamp
         type represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type microsoft_graph_change_tracked_entity_created_date_time_created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~users.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~users.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~users.models.MicrosoftGraphIdentity
        :param availability: Availability of the user to be scheduled for work and its recurrence
         pattern.
        :type availability: list[~users.models.MicrosoftGraphShiftAvailability]
        :param id3: Read-only.
        :type id3: str
        :param shared: Calculated relationship identifying documents shared with or by the user. This
         includes URLs, file attachments, and reference attachments to OneDrive for Business and
         SharePoint files found in Outlook messages and meetings. This also includes URLs and reference
         attachments to Teams conversations. Ordered by recency of share.
        :type shared: list[~users.models.MicrosoftGraphSharedInsight]
        :param trending: Calculated relationship identifying documents trending around a user. Trending
         documents are calculated based on activity of the user's closest network of people and include
         files stored in OneDrive for Business and SharePoint. Trending insights help the user to
         discover potentially useful content that the user has access to, but has never viewed before.
        :type trending: list[~users.models.MicrosoftGraphTrending]
        :param used: Calculated relationship identifying the latest documents viewed or modified by a
         user, including OneDrive for Business and SharePoint documents, ranked by recency of use.
        :type used: list[~users.models.MicrosoftGraphUsedInsight]
        :param id4: Read-only.
        :type id4: str
        :param plans: Read-only. Nullable. Returns the plannerTasks assigned to the user.
        :type plans: list[~users.models.MicrosoftGraphPlannerPlan]
        :param tasks: Read-only. Nullable. Returns the plannerPlans shared with the user.
        :type tasks: list[~users.models.MicrosoftGraphPlannerTask]
        :param id5: Read-only.
        :type id5: str
        :param master_categories: A list of categories defined for the user.
        :type master_categories: list[~users.models.MicrosoftGraphOutlookCategory]
        :param id6: Read-only.
        :type id6: str
        :param overrides: A set of overrides for a user to always classify messages from specific
         senders in certain ways: focused, or other. Read-only. Nullable.
        :type overrides: list[~users.models.MicrosoftGraphInferenceClassificationOverride]
        :param archive_folder: Folder ID of an archive folder for the user.
        :type archive_folder: str
        :param automatic_replies_setting: automaticRepliesSetting.
        :type automatic_replies_setting: ~users.models.MicrosoftGraphAutomaticRepliesSetting
        :param date_format: The date format for the user's mailbox.
        :type date_format: str
        :param delegate_meeting_message_delivery_options:
        :type delegate_meeting_message_delivery_options: str or ~users.models.MicrosoftGraphDelegateMeetingMessageDeliveryOptions
        :param language: localeInfo.
        :type language: ~users.models.MicrosoftGraphLocaleInfo
        :param time_format: The time format for the user's mailbox.
        :type time_format: str
        :param time_zone: The default time zone for the user's mailbox.
        :type time_zone: str
        :param working_hours: workingHours.
        :type working_hours: ~users.models.MicrosoftGraphWorkingHours
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphUser(id=id, deleted_date_time=deleted_date_time, account_enabled=account_enabled, age_group=age_group, assigned_licenses=assigned_licenses, assigned_plans=assigned_plans, business_phones=business_phones, city=city, company_name=company_name, consent_provided_for_minor=consent_provided_for_minor, country=country, created_date_time=created_date_time, creation_type=creation_type, department=department, display_name=display_name, employee_id=employee_id, external_user_state=external_user_state, external_user_state_change_date_time=external_user_state_change_date_time, fax_number=fax_number, given_name=given_name, identities=identities, im_addresses=im_addresses, is_resource_account=is_resource_account, job_title=job_title, last_password_change_date_time=last_password_change_date_time, legal_age_group_classification=legal_age_group_classification, license_assignment_states=license_assignment_states, mail=mail, mail_nickname=mail_nickname, mobile_phone=mobile_phone, office_location=office_location, on_premises_distinguished_name=on_premises_distinguished_name, on_premises_domain_name=on_premises_domain_name, on_premises_extension_attributes=on_premises_extension_attributes, on_premises_immutable_id=on_premises_immutable_id, on_premises_last_sync_date_time=on_premises_last_sync_date_time, on_premises_provisioning_errors=on_premises_provisioning_errors, on_premises_sam_account_name=on_premises_sam_account_name, on_premises_security_identifier=on_premises_security_identifier, on_premises_sync_enabled=on_premises_sync_enabled, on_premises_user_principal_name=on_premises_user_principal_name, other_mails=other_mails, password_policies=password_policies, password_profile=password_profile, postal_code=postal_code, preferred_language=preferred_language, provisioned_plans=provisioned_plans, proxy_addresses=proxy_addresses, show_in_address_list=show_in_address_list, sign_in_sessions_valid_from_date_time=sign_in_sessions_valid_from_date_time, state=state, street_address=street_address, surname=surname, usage_location=usage_location, user_principal_name=user_principal_name, user_type=user_type, device_enrollment_limit=device_enrollment_limit, about_me=about_me, birthday=birthday, hire_date=hire_date, interests=interests, my_site=my_site, past_projects=past_projects, preferred_name=preferred_name, responsibilities=responsibilities, schools=schools, skills=skills, app_role_assignments=app_role_assignments, created_objects=created_objects, direct_reports=direct_reports, license_details=license_details, manager=manager, member_of=member_of, oauth2_permission_grants=oauth2_permission_grants, owned_devices=owned_devices, owned_objects=owned_objects, registered_devices=registered_devices, scoped_role_member_of=scoped_role_member_of, transitive_member_of=transitive_member_of, calendar=calendar, calendar_groups=calendar_groups, calendars=calendars, calendar_view=calendar_view, contact_folders=contact_folders, contacts=contacts, events=events, mail_folders=mail_folders, messages=messages, people=people, photo=photo, photos=photos, drive=drive, drives=drives, followed_sites=followed_sites, extensions=extensions, managed_devices=managed_devices, managed_app_registrations=managed_app_registrations, device_management_troubleshooting_events=device_management_troubleshooting_events, activities=activities, online_meetings=online_meetings, joined_teams=joined_teams, id_onenote_id=microsoft_graph_entity_id, notebooks=notebooks, operations=operations, pages=pages, resources=resources, section_groups=section_groups, sections=sections, id_settings_id=id1, contribution_to_content_discovery_as_organization_disabled=contribution_to_content_discovery_as_organization_disabled, contribution_to_content_discovery_disabled=contribution_to_content_discovery_disabled, id_settings_shift_preferences_id=id2, created_date_time_settings_shift_preferences_created_date_time=microsoft_graph_change_tracked_entity_created_date_time_created_date_time, last_modified_date_time=last_modified_date_time, application=application, device=device, user=user, availability=availability, id_insights_id=id3, shared=shared, trending=trending, used=used, id_planner_id=id4, plans=plans, tasks=tasks, id_outlook_id=id5, master_categories=master_categories, id_inference_classification_id=id6, overrides=overrides, archive_folder=archive_folder, automatic_replies_setting=automatic_replies_setting, date_format=date_format, delegate_meeting_message_delivery_options=delegate_meeting_message_delivery_options, language=language, time_format=time_format, time_zone=time_zone, working_hours=working_hours)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_user.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphUser')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_user.metadata = {'url': '/users/{user-id}'}  # type: ignore

    def delete_user(
        self,
        user_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete entity from users.

        Delete entity from users.

        :param user_id: key: id of user.
        :type user_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_user.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_user.metadata = {'url': '/users/{user-id}'}  # type: ignore
