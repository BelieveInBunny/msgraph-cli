# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_calendar_v1_0.action import (
    AddOwner,
    AddMultiValueExtendedProperties,
    AddSingleValueExtendedProperties,
    AddAddress,
    AddGeoCoordinates
)


def load_arguments(self, _):

    with self.argument_context('calendar group create-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar group create-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar group delete-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar group delete-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar group delete-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar group list-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar group list-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar group show-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar group show-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar group show-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar group update-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar group update-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar group update-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendar create-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar groupscalendar create-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendar create-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendar create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar groupscalendar create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar groupscalendar delete-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendar delete-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendar delete-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendar delete-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendar delete-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendar list-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendar list-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendar list-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendar list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendar list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendar show-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendar show-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendar show-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendar show-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendar show-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendar update-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar groupscalendar update-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendar update-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendar update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar groupscalendar update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar groupscalendarview create-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar groupscalendarview create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar groupscalendarview create-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendarview create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar groupscalendarview create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar groupscalendarview delete-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarview delete-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarview delete-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarview delete-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarview delete-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarview delete-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarview list-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview list-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview show-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview show-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview show-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview show-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview show-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview show-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview update-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar groupscalendarview update-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar groupscalendarview update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar groupscalendarview update-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendarview update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar groupscalendarview update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar groupscalendarevent create-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar groupscalendarevent create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar groupscalendarevent create-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendarevent create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar groupscalendarevent create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar groupscalendarevent delete-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarevent delete-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarevent delete-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarevent delete-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarevent delete-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarevent delete-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarevent list-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarevent list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarevent list-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarevent list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarevent list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarevent show-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarevent show-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarevent show-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarevent show-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarevent show-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarevent show-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarevent update-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar groupscalendarevent update-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar groupscalendarevent update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar groupscalendarevent update-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendarevent update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar groupscalendarevent update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar groupscalendarview create-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar groupscalendarview create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar groupscalendarview create-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendarview create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar groupscalendarview create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar groupscalendarview delete-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarview delete-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarview delete-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarview delete-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarview delete-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarview delete-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarview list-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview list-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview show-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview show-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview show-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview show-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview show-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview show-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarview update-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar groupscalendarview update-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar groupscalendarview update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar groupscalendarview update-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendarview update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar groupscalendarview update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar groupscalendarviewcalendar create-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar groupscalendarviewcalendar create-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendarviewcalendar create-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendarviewcalendar create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar groupscalendarviewcalendar create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar groupscalendarviewcalendar delete-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarviewcalendar delete-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarviewcalendar delete-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarviewcalendar delete-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarviewcalendar delete-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupscalendarviewcalendar list-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarviewcalendar list-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarviewcalendar list-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarviewcalendar list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarviewcalendar list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarviewcalendar show-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarviewcalendar show-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarviewcalendar show-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarviewcalendar show-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarviewcalendar show-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupscalendarviewcalendar update-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar groupscalendarviewcalendar update-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendarviewcalendar update-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupscalendarviewcalendar update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar groupscalendarviewcalendar update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar groupsevent create-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar groupsevent create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar groupsevent create-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupsevent create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar groupsevent create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar groupsevent delete-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupsevent delete-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupsevent delete-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupsevent delete-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupsevent delete-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupsevent delete-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupsevent list-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupsevent list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupsevent list-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupsevent list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupsevent list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupsevent show-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupsevent show-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupsevent show-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupsevent show-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupsevent show-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupsevent show-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupsevent update-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar groupsevent update-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar groupsevent update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar groupsevent update-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupsevent update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar groupsevent update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar groupseventscalendar create-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar groupseventscalendar create-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupseventscalendar create-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupseventscalendar create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar groupseventscalendar create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar groupseventscalendar delete-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupseventscalendar delete-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupseventscalendar delete-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupseventscalendar delete-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupseventscalendar delete-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar groupseventscalendar list-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupseventscalendar list-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupseventscalendar list-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupseventscalendar list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupseventscalendar list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupseventscalendar show-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupseventscalendar show-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupseventscalendar show-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupseventscalendar show-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupseventscalendar show-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar groupseventscalendar update-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar groupseventscalendar update-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupseventscalendar update-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar groupseventscalendar update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar groupseventscalendar update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar placesplace create-place') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='physicalAddress')
        c.argument('display_name', type=str, help='The name associated with the place.')
        c.argument('geo_coordinates', action=AddGeoCoordinates, nargs='+', help='outlookGeoCoordinates')
        c.argument('phone', type=str, help='The phone number of the place.')

    with self.argument_context('calendar placesplace delete-place') as c:
        c.argument('place_id', type=str, help='key: id of place')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar placesplace list-place') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar placesplace show-place') as c:
        c.argument('place_id', type=str, help='key: id of place')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar placesplace update-place') as c:
        c.argument('place_id', type=str, help='key: id of place')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='+', help='physicalAddress')
        c.argument('display_name', type=str, help='The name associated with the place.')
        c.argument('geo_coordinates', action=AddGeoCoordinates, nargs='+', help='outlookGeoCoordinates')
        c.argument('phone', type=str, help='The phone number of the place.')

    with self.argument_context('calendar user create-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar user create-calendar-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar group. Every time the calendar '
                   'group is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct '
                   'version of the object. Read-only.')
        c.argument('class_id', help='The class identifier. Read-only.')
        c.argument('name', type=str, help='The group name.')
        c.argument('calendars', type=validate_file_or_dict, help='The calendars in the calendar group. Navigation '
                   'property. Read-only. Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('calendar user create-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar user create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar user delete-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar user delete-calendar-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar user delete-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar user delete-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar user list-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar user list-calendar-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar user list-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar user list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar user show-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar user show-calendar-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar user show-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar user show-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar user update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar user update-calendar-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar group. Every time the calendar '
                   'group is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct '
                   'version of the object. Read-only.')
        c.argument('class_id', help='The class identifier. Read-only.')
        c.argument('name', type=str, help='The group name.')
        c.argument('calendars', type=validate_file_or_dict, help='The calendars in the calendar group. Navigation '
                   'property. Read-only. Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('calendar user update-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar user update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendar create-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar userscalendar create-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendar delete-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendar delete-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendar delete-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendar delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendar delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendar list-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar list-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar show-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar show-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar show-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar update-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar userscalendar update-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendarview create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar userscalendarview create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar userscalendarview create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendarview create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendarview create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendarview delete-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarview delete-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarview delete-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarview delete-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarview delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarview delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarview list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview show-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview show-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview show-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview show-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar userscalendarview update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar userscalendarview update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar userscalendarview update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendarview update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendarview update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendarevent create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar userscalendarevent create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar userscalendarevent create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendarevent create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendarevent create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendarevent delete-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarevent delete-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarevent delete-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarevent delete-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarevent delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarevent delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarevent list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarevent list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarevent list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarevent list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarevent list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarevent show-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarevent show-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarevent show-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarevent show-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarevent show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarevent show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarevent update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar userscalendarevent update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar userscalendarevent update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar userscalendarevent update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendarevent update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendarevent update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendargroup create-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar userscalendargroup delete-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroup list-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroup show-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroup update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar userscalendargroupscalendar create-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar userscalendargroupscalendar create-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendargroupscalendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendargroupscalendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendargroupscalendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendargroupscalendar delete-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendar delete-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendar delete-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendar delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendar delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendar list-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendar list-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendar show-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendar show-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendar show-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendar show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendar show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendar update-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar userscalendargroupscalendar update-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendargroupscalendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendargroupscalendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendargroupscalendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview delete-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview delete-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview delete-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview delete-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview show-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview show-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview show-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview show-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendargroupscalendarscalendarview update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendargroupscalendarsevent create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar userscalendargroupscalendarsevent create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar userscalendargroupscalendarsevent create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendargroupscalendarsevent create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendargroupscalendarsevent create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendargroupscalendarsevent delete-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendarsevent delete-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendarsevent delete-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendarsevent delete-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendarsevent delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendarsevent delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendargroupscalendarsevent list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarsevent list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarsevent list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarsevent list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarsevent list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarsevent show-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarsevent show-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarsevent show-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarsevent show-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarsevent show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarsevent show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendargroupscalendarsevent update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar userscalendargroupscalendarsevent update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar userscalendargroupscalendarsevent update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar userscalendargroupscalendarsevent update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendargroupscalendarsevent update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendargroupscalendarsevent update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendar create-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar userscalendar create-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendar delete-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendar delete-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendar delete-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendar delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendar delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendar list-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar list-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar show-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar show-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar show-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendar update-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar userscalendar update-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendarscalendarview create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar userscalendarscalendarview create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar userscalendarscalendarview create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendarscalendarview create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendarscalendarview create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendarscalendarview delete-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarscalendarview delete-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarscalendarview delete-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarscalendarview delete-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarscalendarview delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarscalendarview delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarscalendarview list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarscalendarview list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarscalendarview list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarscalendarview list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarscalendarview list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarscalendarview show-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarscalendarview show-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarscalendarview show-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarscalendarview show-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarscalendarview show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarscalendarview show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarscalendarview update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar userscalendarscalendarview update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar userscalendarscalendarview update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar userscalendarscalendarview update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendarscalendarview update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendarscalendarview update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendarsevent create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar userscalendarsevent create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar userscalendarsevent create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendarsevent create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendarsevent create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendarsevent delete-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarsevent delete-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarsevent delete-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarsevent delete-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarsevent delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarsevent delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarsevent list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarsevent list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarsevent list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarsevent list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarsevent list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarsevent show-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarsevent show-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarsevent show-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarsevent show-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarsevent show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarsevent show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarsevent update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar userscalendarsevent update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar userscalendarsevent update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar userscalendarsevent update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendarsevent update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendarsevent update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendarview create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar userscalendarview create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar userscalendarview create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendarview create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendarview create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendarview delete-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarview delete-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarview delete-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarview delete-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarview delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarview delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarview list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview show-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview show-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview show-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview show-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarview update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar userscalendarview update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar userscalendarview update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar userscalendarview update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendarview update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendarview update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendarviewcalendar create-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar userscalendarviewcalendar create-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendarviewcalendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendarviewcalendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendarviewcalendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userscalendarviewcalendar delete-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarviewcalendar delete-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarviewcalendar delete-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarviewcalendar delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarviewcalendar delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userscalendarviewcalendar list-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarviewcalendar list-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarviewcalendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarviewcalendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarviewcalendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarviewcalendar show-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarviewcalendar show-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarviewcalendar show-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarviewcalendar show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarviewcalendar show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userscalendarviewcalendar update-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar userscalendarviewcalendar update-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendarviewcalendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userscalendarviewcalendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userscalendarviewcalendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar usersevent create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar usersevent create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar usersevent create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar usersevent create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar usersevent create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar usersevent delete-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar usersevent delete-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar usersevent delete-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar usersevent delete-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar usersevent delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar usersevent delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar usersevent list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar usersevent list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar usersevent list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar usersevent list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar usersevent list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar usersevent show-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar usersevent show-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar usersevent show-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar usersevent show-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar usersevent show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar usersevent show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar usersevent update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar usersevent update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='+', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray',
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness',
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar usersevent update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar usersevent update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar usersevent update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar usersevent update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userseventscalendar create-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar userseventscalendar create-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userseventscalendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userseventscalendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userseventscalendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar userseventscalendar delete-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userseventscalendar delete-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userseventscalendar delete-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userseventscalendar delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userseventscalendar delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar userseventscalendar list-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userseventscalendar list-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userseventscalendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userseventscalendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userseventscalendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userseventscalendar show-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userseventscalendar show-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userseventscalendar show-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userseventscalendar show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userseventscalendar show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('calendar userseventscalendar update-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='+', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='+', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write',
                                                   'delegateWithoutPrivateEventAccess',
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar userseventscalendar update-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userseventscalendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar userseventscalendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('calendar userseventscalendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')
