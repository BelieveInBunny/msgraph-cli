# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_calendar_v1_0.action import (
    AddOwner,
    AddMultiValueExtendedProperties,
    AddSingleValueExtendedProperties,
    AddAddress,
    AddGeoCoordinates
)


def load_arguments(self, _):

    with self.argument_context('calendar delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar create-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar update-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar create-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar update-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar create-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar update-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar create-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar update-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar create-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar update-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar create-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar update-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar create-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar update-instance') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar create-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-calendar-permission') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar update-calendar-view') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-event') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('place_id', type=str, help='key: id of place')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar create-place') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='physicalAddress')
        c.argument('display_name', type=str, help='The name associated with the place.')
        c.argument('geo_coordinates', action=AddGeoCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('phone', type=str, help='The phone number of the place.')

    with self.argument_context('calendar get-place') as c:
        c.argument('place_id', type=str, help='key: id of place')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-place') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-place') as c:
        c.argument('place_id', type=str, help='key: id of place')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('address', action=AddAddress, nargs='*', help='physicalAddress')
        c.argument('display_name', type=str, help='The name associated with the place.')
        c.argument('geo_coordinates', action=AddGeoCoordinates, nargs='*', help='outlookGeoCoordinates')
        c.argument('phone', type=str, help='The phone number of the place.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('if_match', type=str, help='ETag')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('calendar create-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar create-calendar-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar group. Every time the calendar '
                   'group is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct '
                   'version of the object. Read-only.')
        c.argument('class_id', help='The class identifier. Read-only.')
        c.argument('name', type=str, help='The group name.')
        c.argument('calendars', type=validate_file_or_dict, help='The calendars in the calendar group. Navigation '
                   'property. Read-only. Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('calendar create-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar update-calendar-group') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar group. Every time the calendar '
                   'group is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct '
                   'version of the object. Read-only.')
        c.argument('class_id', help='The class identifier. Read-only.')
        c.argument('name', type=str, help='The group name.')
        c.argument('calendars', type=validate_file_or_dict, help='The calendars in the calendar group. Navigation '
                   'property. Read-only. Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('calendar update-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar create-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar update-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('calendar create-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar create-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar update-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_group_id', type=str, help='key: id of calendarGroup')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar create-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('start_date_time', type=str, help='The start date and time of the time range, represented in ISO '
                   '8601 format. For example, 2019-11-08T19:00:00-08:00')
        c.argument('end_date_time', type=str, help='The end date and time of the time range, represented in ISO 8601 '
                   'format. For example, 2019-11-08T20:00:00-08:00')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar update-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('calendar_id', type=str, help='key: id of calendar')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar create-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar update-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar create-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-attachment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type', type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', type=str, help='The attachment\'s file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('calendar update-calendar') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_online_meeting_providers', nargs='*', help='Represent the online meeting service providers '
                   'that can be used to create online meetings in this calendar. Possible values are: unknown, '
                   'skypeForBusiness, skypeForConsumer, teamsForBusiness.')
        c.argument('can_edit', arg_type=get_three_state_flag(), help='True if the user can write to the calendar, '
                   'false otherwise. This property is true for the user who created the calendar. This property is '
                   'also true for a user who has been shared a calendar and granted write access.')
        c.argument('can_share', arg_type=get_three_state_flag(), help='True if the user has the permission to share '
                   'the calendar, false otherwise. Only the user who created the calendar can share it.')
        c.argument('can_view_private_items', arg_type=get_three_state_flag(), help='True if the user can read calendar '
                   'items that have been marked private, false otherwise.')
        c.argument('change_key', type=str, help='Identifies the version of the calendar object. Every time the '
                   'calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the '
                   'correct version of the object. Read-only.')
        c.argument('color', arg_type=get_enum_type(['lightBlue', 'lightGreen', 'auto', 'lightOrange', 'lightGray', ''
                                                    'lightYellow', 'lightTeal', 'lightPink', 'lightBrown', 'lightRed',
                                                    'maxColor']), help='')
        c.argument('default_online_meeting_provider', arg_type=get_enum_type(['unknown', 'skypeForBusiness', ''
                                                                              'skypeForConsumer', 'teamsForBusiness']),
                   help='')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='Indicates whether this user calendar can be '
                   'deleted from the user mailbox.')
        c.argument('is_tallying_responses', arg_type=get_three_state_flag(), help='Indicates whether this user '
                   'calendar supports tracking of meeting responses. Only meeting invites sent from users\' primary '
                   'calendars support tracking of meeting responses.')
        c.argument('name', type=str, help='The calendar name.')
        c.argument('owner', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('calendar_permissions', type=validate_file_or_dict, help='The permissions of the users with whom '
                   'the calendar is shared. Expected value: json-string/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Navigation '
                   'property. Read-only. Expected value: json-string/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The events in the calendar. Navigation property. '
                   'Read-only. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the calendar. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the calendar. Read-only. Nullable.')

    with self.argument_context('calendar update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('calendar update-instance') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('if_match', type=str, help='ETag')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('calendar create-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar create-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('calendar get-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar get-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('calendar update-calendar-permission') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('calendar_permission_id', type=str, help='key: id of calendarPermission')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('allowed_roles', nargs='*', help='List of allowed sharing or delegating permission levels for the '
                   'calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, '
                   'delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.')
        c.argument('email_address', action=AddOwner, nargs='*', help='emailAddress')
        c.argument('is_inside_organization', arg_type=get_three_state_flag(), help='True if the user in context '
                   '(sharee or delegate) is inside the same organization as the calendar owner.')
        c.argument('is_removable', arg_type=get_three_state_flag(), help='True if the user can be removed from the '
                   'list of sharees or delegates for the specified calendar, false otherwise. The \'My organization\' '
                   'user determines the permissions other people within your organization have to the given calendar. '
                   'You cannot remove \'My organization\' as a sharee to a calendar.')
        c.argument('role', arg_type=get_enum_type(['none', 'freeBusyRead', 'limitedRead', 'read', 'write', ''
                                                   'delegateWithoutPrivateEventAccess', ''
                                                   'delegateWithPrivateEventAccess', 'custom']), help='')

    with self.argument_context('calendar update-calendar-view') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-event') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('calendar update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('calendar update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')
