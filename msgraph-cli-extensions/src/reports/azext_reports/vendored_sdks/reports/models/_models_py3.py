# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._reports_enums import *


class CollectionOfApplicationSignInDetailedSummary(msrest.serialization.Model):
    """Collection of applicationSignInDetailedSummary.

    :param value:
    :type value: list[~reports.models.MicrosoftGraphApplicationSignInDetailedSummary]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphApplicationSignInDetailedSummary]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphApplicationSignInDetailedSummary"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfApplicationSignInDetailedSummary, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfCredentialUserRegistrationDetails(msrest.serialization.Model):
    """Collection of credentialUserRegistrationDetails.

    :param value:
    :type value: list[~reports.models.MicrosoftGraphCredentialUserRegistrationDetails]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphCredentialUserRegistrationDetails]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphCredentialUserRegistrationDetails"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfCredentialUserRegistrationDetails, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintUsageSummaryByPrinter(msrest.serialization.Model):
    """Collection of PrintUsageSummaryByPrinter.

    :param value:
    :type value: list[~reports.models.MicrosoftGraphPrintUsageSummaryByPrinter]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintUsageSummaryByPrinter]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphPrintUsageSummaryByPrinter"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintUsageSummaryByPrinter, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintUsageSummaryByPrinter0(msrest.serialization.Model):
    """Collection of PrintUsageSummaryByPrinter.

    :param value:
    :type value: list[~reports.models.MicrosoftGraphPrintUsageSummaryByPrinter]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintUsageSummaryByPrinter]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphPrintUsageSummaryByPrinter"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintUsageSummaryByPrinter0, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintUsageSummaryByUser(msrest.serialization.Model):
    """Collection of PrintUsageSummaryByUser.

    :param value:
    :type value: list[~reports.models.MicrosoftGraphPrintUsageSummaryByUser]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintUsageSummaryByUser]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphPrintUsageSummaryByUser"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintUsageSummaryByUser, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfPrintUsageSummaryByUser0(msrest.serialization.Model):
    """Collection of PrintUsageSummaryByUser.

    :param value:
    :type value: list[~reports.models.MicrosoftGraphPrintUsageSummaryByUser]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphPrintUsageSummaryByUser]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphPrintUsageSummaryByUser"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfPrintUsageSummaryByUser0, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfUserCredentialUsageDetails(msrest.serialization.Model):
    """Collection of userCredentialUsageDetails.

    :param value:
    :type value: list[~reports.models.MicrosoftGraphUserCredentialUsageDetails]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphUserCredentialUsageDetails]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphUserCredentialUsageDetails"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfUserCredentialUsageDetails, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = id


class MicrosoftGraphApplicationSignInDetailedSummary(MicrosoftGraphEntity):
    """applicationSignInDetailedSummary.

    :param id: Read-only.
    :type id: str
    :param app_id:
    :type app_id: str
    :param app_display_name:
    :type app_display_name: str
    :param sign_in_count:
    :type sign_in_count: long
    :param aggregated_event_date_time:
    :type aggregated_event_date_time: ~datetime.datetime
    :param error_code: Provides the 5-6digit error code that's generated during a sign-in failure.
     Check out the list of error codes and messages.
    :type error_code: int
    :param failure_reason: Provides the error message or the reason for failure for the
     corresponding sign-in activity. Check out the list of error codes and messages.
    :type failure_reason: str
    :param additional_details: Provides additional details on the sign-in activity.
    :type additional_details: str
    """

    _validation = {
        'error_code': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'sign_in_count': {'key': 'signInCount', 'type': 'long'},
        'aggregated_event_date_time': {'key': 'aggregatedEventDateTime', 'type': 'iso-8601'},
        'error_code': {'key': 'status.errorCode', 'type': 'int'},
        'failure_reason': {'key': 'status.failureReason', 'type': 'str'},
        'additional_details': {'key': 'status.additionalDetails', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        app_id: Optional[str] = None,
        app_display_name: Optional[str] = None,
        sign_in_count: Optional[int] = None,
        aggregated_event_date_time: Optional[datetime.datetime] = None,
        error_code: Optional[int] = None,
        failure_reason: Optional[str] = None,
        additional_details: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphApplicationSignInDetailedSummary, self).__init__(id=id, **kwargs)
        self.app_id = app_id
        self.app_display_name = app_display_name
        self.sign_in_count = sign_in_count
        self.aggregated_event_date_time = aggregated_event_date_time
        self.error_code = error_code
        self.failure_reason = failure_reason
        self.additional_details = additional_details


class MicrosoftGraphApplicationSignInSummary(MicrosoftGraphEntity):
    """applicationSignInSummary.

    :param id: Read-only.
    :type id: str
    :param app_display_name:
    :type app_display_name: str
    :param successful_sign_in_count:
    :type successful_sign_in_count: long
    :param failed_sign_in_count:
    :type failed_sign_in_count: long
    :param success_percentage:
    :type success_percentage: float
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'successful_sign_in_count': {'key': 'successfulSignInCount', 'type': 'long'},
        'failed_sign_in_count': {'key': 'failedSignInCount', 'type': 'long'},
        'success_percentage': {'key': 'successPercentage', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        app_display_name: Optional[str] = None,
        successful_sign_in_count: Optional[int] = None,
        failed_sign_in_count: Optional[int] = None,
        success_percentage: Optional[float] = None,
        **kwargs
    ):
        super(MicrosoftGraphApplicationSignInSummary, self).__init__(id=id, **kwargs)
        self.app_display_name = app_display_name
        self.successful_sign_in_count = successful_sign_in_count
        self.failed_sign_in_count = failed_sign_in_count
        self.success_percentage = success_percentage


class MicrosoftGraphAzureAdFeatureUsage(MicrosoftGraphEntity):
    """azureADFeatureUsage.

    :param id: Read-only.
    :type id: str
    :param snapshot_date_time:
    :type snapshot_date_time: ~datetime.datetime
    :param feature_name:
    :type feature_name: str
    :param usage:
    :type usage: int
    """

    _validation = {
        'usage': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'snapshot_date_time': {'key': 'snapshotDateTime', 'type': 'iso-8601'},
        'feature_name': {'key': 'featureName', 'type': 'str'},
        'usage': {'key': 'usage', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        snapshot_date_time: Optional[datetime.datetime] = None,
        feature_name: Optional[str] = None,
        usage: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphAzureAdFeatureUsage, self).__init__(id=id, **kwargs)
        self.snapshot_date_time = snapshot_date_time
        self.feature_name = feature_name
        self.usage = usage


class MicrosoftGraphAzureAdLicenseUsage(MicrosoftGraphEntity):
    """azureADLicenseUsage.

    :param id: Read-only.
    :type id: str
    :param snapshot_date_time:
    :type snapshot_date_time: ~datetime.datetime
    :param license_info_details:
    :type license_info_details: list[~reports.models.MicrosoftGraphLicenseInfoDetail]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'snapshot_date_time': {'key': 'snapshotDateTime', 'type': 'iso-8601'},
        'license_info_details': {'key': 'licenseInfoDetails', 'type': '[MicrosoftGraphLicenseInfoDetail]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        snapshot_date_time: Optional[datetime.datetime] = None,
        license_info_details: Optional[List["MicrosoftGraphLicenseInfoDetail"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphAzureAdLicenseUsage, self).__init__(id=id, **kwargs)
        self.snapshot_date_time = snapshot_date_time
        self.license_info_details = license_info_details


class MicrosoftGraphAzureAdUserFeatureUsage(MicrosoftGraphEntity):
    """azureADUserFeatureUsage.

    :param id: Read-only.
    :type id: str
    :param last_updated_date_time:
    :type last_updated_date_time: ~datetime.datetime
    :param user_id:
    :type user_id: str
    :param user_display_name:
    :type user_display_name: str
    :param user_principal_name:
    :type user_principal_name: str
    :param license_recommended:  Possible values include: "none", "free", "basic", "premiumP1",
     "premiumP2", "unknownFutureValue".
    :type license_recommended: str or ~reports.models.MicrosoftGraphAzureAdLicenseType
    :param license_assigned:  Possible values include: "none", "free", "basic", "premiumP1",
     "premiumP2", "unknownFutureValue".
    :type license_assigned: str or ~reports.models.MicrosoftGraphAzureAdLicenseType
    :param feature_usage_details:
    :type feature_usage_details: list[~reports.models.MicrosoftGraphFeatureUsageDetail]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'license_recommended': {'key': 'licenseRecommended', 'type': 'str'},
        'license_assigned': {'key': 'licenseAssigned', 'type': 'str'},
        'feature_usage_details': {'key': 'featureUsageDetails', 'type': '[MicrosoftGraphFeatureUsageDetail]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        last_updated_date_time: Optional[datetime.datetime] = None,
        user_id: Optional[str] = None,
        user_display_name: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        license_recommended: Optional[Union[str, "MicrosoftGraphAzureAdLicenseType"]] = None,
        license_assigned: Optional[Union[str, "MicrosoftGraphAzureAdLicenseType"]] = None,
        feature_usage_details: Optional[List["MicrosoftGraphFeatureUsageDetail"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphAzureAdUserFeatureUsage, self).__init__(id=id, **kwargs)
        self.last_updated_date_time = last_updated_date_time
        self.user_id = user_id
        self.user_display_name = user_display_name
        self.user_principal_name = user_principal_name
        self.license_recommended = license_recommended
        self.license_assigned = license_assigned
        self.feature_usage_details = feature_usage_details


class MicrosoftGraphCredentialUsageSummary(MicrosoftGraphEntity):
    """credentialUsageSummary.

    :param id: Read-only.
    :type id: str
    :param feature:  Possible values include: "registration", "reset", "unknownFutureValue".
    :type feature: str or ~reports.models.MicrosoftGraphFeatureType
    :param successful_activity_count:
    :type successful_activity_count: long
    :param failure_activity_count:
    :type failure_activity_count: long
    :param auth_method:  Possible values include: "email", "mobileSMS", "mobileCall",
     "officePhone", "securityQuestion", "appNotification", "appCode", "alternateMobileCall", "fido",
     "appPassword", "unknownFutureValue".
    :type auth_method: str or ~reports.models.MicrosoftGraphUsageAuthMethod
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'feature': {'key': 'feature', 'type': 'str'},
        'successful_activity_count': {'key': 'successfulActivityCount', 'type': 'long'},
        'failure_activity_count': {'key': 'failureActivityCount', 'type': 'long'},
        'auth_method': {'key': 'authMethod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        feature: Optional[Union[str, "MicrosoftGraphFeatureType"]] = None,
        successful_activity_count: Optional[int] = None,
        failure_activity_count: Optional[int] = None,
        auth_method: Optional[Union[str, "MicrosoftGraphUsageAuthMethod"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphCredentialUsageSummary, self).__init__(id=id, **kwargs)
        self.feature = feature
        self.successful_activity_count = successful_activity_count
        self.failure_activity_count = failure_activity_count
        self.auth_method = auth_method


class MicrosoftGraphCredentialUserRegistrationCount(MicrosoftGraphEntity):
    """credentialUserRegistrationCount.

    :param id: Read-only.
    :type id: str
    :param total_user_count:
    :type total_user_count: long
    :param user_registration_counts:
    :type user_registration_counts: list[~reports.models.MicrosoftGraphUserRegistrationCount]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'total_user_count': {'key': 'totalUserCount', 'type': 'long'},
        'user_registration_counts': {'key': 'userRegistrationCounts', 'type': '[MicrosoftGraphUserRegistrationCount]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        total_user_count: Optional[int] = None,
        user_registration_counts: Optional[List["MicrosoftGraphUserRegistrationCount"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphCredentialUserRegistrationCount, self).__init__(id=id, **kwargs)
        self.total_user_count = total_user_count
        self.user_registration_counts = user_registration_counts


class MicrosoftGraphCredentialUserRegistrationDetails(MicrosoftGraphEntity):
    """credentialUserRegistrationDetails.

    :param id: Read-only.
    :type id: str
    :param user_principal_name:
    :type user_principal_name: str
    :param user_display_name:
    :type user_display_name: str
    :param auth_methods:
    :type auth_methods: list[str or ~reports.models.MicrosoftGraphRegistrationAuthMethod]
    :param is_registered:
    :type is_registered: bool
    :param is_enabled:
    :type is_enabled: bool
    :param is_capable:
    :type is_capable: bool
    :param is_mfa_registered:
    :type is_mfa_registered: bool
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'auth_methods': {'key': 'authMethods', 'type': '[str]'},
        'is_registered': {'key': 'isRegistered', 'type': 'bool'},
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'is_capable': {'key': 'isCapable', 'type': 'bool'},
        'is_mfa_registered': {'key': 'isMfaRegistered', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        user_display_name: Optional[str] = None,
        auth_methods: Optional[List[Union[str, "MicrosoftGraphRegistrationAuthMethod"]]] = None,
        is_registered: Optional[bool] = None,
        is_enabled: Optional[bool] = None,
        is_capable: Optional[bool] = None,
        is_mfa_registered: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphCredentialUserRegistrationDetails, self).__init__(id=id, **kwargs)
        self.user_principal_name = user_principal_name
        self.user_display_name = user_display_name
        self.auth_methods = auth_methods
        self.is_registered = is_registered
        self.is_enabled = is_enabled
        self.is_capable = is_capable
        self.is_mfa_registered = is_mfa_registered


class MicrosoftGraphEmailActivitySummary(MicrosoftGraphEntity):
    """emailActivitySummary.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param send:
    :type send: long
    :param receive:
    :type receive: long
    :param read:
    :type read: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'send': {'key': 'send', 'type': 'long'},
        'receive': {'key': 'receive', 'type': 'long'},
        'read': {'key': 'read', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        send: Optional[int] = None,
        receive: Optional[int] = None,
        read: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEmailActivitySummary, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.send = send
        self.receive = receive
        self.read = read
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphEmailActivityUserDetail(MicrosoftGraphEntity):
    """emailActivityUserDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    :param display_name:
    :type display_name: str
    :param is_deleted:
    :type is_deleted: bool
    :param deleted_date:
    :type deleted_date: ~datetime.date
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param send_count:
    :type send_count: long
    :param receive_count:
    :type receive_count: long
    :param read_count:
    :type read_count: long
    :param assigned_products:
    :type assigned_products: list[str]
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'deleted_date': {'key': 'deletedDate', 'type': 'date'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'send_count': {'key': 'sendCount', 'type': 'long'},
        'receive_count': {'key': 'receiveCount', 'type': 'long'},
        'read_count': {'key': 'readCount', 'type': 'long'},
        'assigned_products': {'key': 'assignedProducts', 'type': '[str]'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        user_principal_name: Optional[str] = None,
        display_name: Optional[str] = None,
        is_deleted: Optional[bool] = None,
        deleted_date: Optional[datetime.date] = None,
        last_activity_date: Optional[datetime.date] = None,
        send_count: Optional[int] = None,
        receive_count: Optional[int] = None,
        read_count: Optional[int] = None,
        assigned_products: Optional[List[str]] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEmailActivityUserDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.user_principal_name = user_principal_name
        self.display_name = display_name
        self.is_deleted = is_deleted
        self.deleted_date = deleted_date
        self.last_activity_date = last_activity_date
        self.send_count = send_count
        self.receive_count = receive_count
        self.read_count = read_count
        self.assigned_products = assigned_products
        self.report_period = report_period


class MicrosoftGraphEmailAppUsageAppsUserCounts(MicrosoftGraphEntity):
    """emailAppUsageAppsUserCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param mail_for_mac:
    :type mail_for_mac: long
    :param outlook_for_mac:
    :type outlook_for_mac: long
    :param outlook_for_windows:
    :type outlook_for_windows: long
    :param outlook_for_mobile:
    :type outlook_for_mobile: long
    :param other_for_mobile:
    :type other_for_mobile: long
    :param outlook_for_web:
    :type outlook_for_web: long
    :param pop3_app:
    :type pop3_app: long
    :param imap4_app:
    :type imap4_app: long
    :param smtp_app:
    :type smtp_app: long
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'mail_for_mac': {'key': 'mailForMac', 'type': 'long'},
        'outlook_for_mac': {'key': 'outlookForMac', 'type': 'long'},
        'outlook_for_windows': {'key': 'outlookForWindows', 'type': 'long'},
        'outlook_for_mobile': {'key': 'outlookForMobile', 'type': 'long'},
        'other_for_mobile': {'key': 'otherForMobile', 'type': 'long'},
        'outlook_for_web': {'key': 'outlookForWeb', 'type': 'long'},
        'pop3_app': {'key': 'pop3App', 'type': 'long'},
        'imap4_app': {'key': 'imap4App', 'type': 'long'},
        'smtp_app': {'key': 'smtpApp', 'type': 'long'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        mail_for_mac: Optional[int] = None,
        outlook_for_mac: Optional[int] = None,
        outlook_for_windows: Optional[int] = None,
        outlook_for_mobile: Optional[int] = None,
        other_for_mobile: Optional[int] = None,
        outlook_for_web: Optional[int] = None,
        pop3_app: Optional[int] = None,
        imap4_app: Optional[int] = None,
        smtp_app: Optional[int] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEmailAppUsageAppsUserCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.mail_for_mac = mail_for_mac
        self.outlook_for_mac = outlook_for_mac
        self.outlook_for_windows = outlook_for_windows
        self.outlook_for_mobile = outlook_for_mobile
        self.other_for_mobile = other_for_mobile
        self.outlook_for_web = outlook_for_web
        self.pop3_app = pop3_app
        self.imap4_app = imap4_app
        self.smtp_app = smtp_app
        self.report_period = report_period


class MicrosoftGraphEmailAppUsageUserCounts(MicrosoftGraphEntity):
    """emailAppUsageUserCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param mail_for_mac:
    :type mail_for_mac: long
    :param outlook_for_mac:
    :type outlook_for_mac: long
    :param outlook_for_windows:
    :type outlook_for_windows: long
    :param outlook_for_mobile:
    :type outlook_for_mobile: long
    :param other_for_mobile:
    :type other_for_mobile: long
    :param outlook_for_web:
    :type outlook_for_web: long
    :param pop3_app:
    :type pop3_app: long
    :param imap4_app:
    :type imap4_app: long
    :param smtp_app:
    :type smtp_app: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'mail_for_mac': {'key': 'mailForMac', 'type': 'long'},
        'outlook_for_mac': {'key': 'outlookForMac', 'type': 'long'},
        'outlook_for_windows': {'key': 'outlookForWindows', 'type': 'long'},
        'outlook_for_mobile': {'key': 'outlookForMobile', 'type': 'long'},
        'other_for_mobile': {'key': 'otherForMobile', 'type': 'long'},
        'outlook_for_web': {'key': 'outlookForWeb', 'type': 'long'},
        'pop3_app': {'key': 'pop3App', 'type': 'long'},
        'imap4_app': {'key': 'imap4App', 'type': 'long'},
        'smtp_app': {'key': 'smtpApp', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        mail_for_mac: Optional[int] = None,
        outlook_for_mac: Optional[int] = None,
        outlook_for_windows: Optional[int] = None,
        outlook_for_mobile: Optional[int] = None,
        other_for_mobile: Optional[int] = None,
        outlook_for_web: Optional[int] = None,
        pop3_app: Optional[int] = None,
        imap4_app: Optional[int] = None,
        smtp_app: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEmailAppUsageUserCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.mail_for_mac = mail_for_mac
        self.outlook_for_mac = outlook_for_mac
        self.outlook_for_windows = outlook_for_windows
        self.outlook_for_mobile = outlook_for_mobile
        self.other_for_mobile = other_for_mobile
        self.outlook_for_web = outlook_for_web
        self.pop3_app = pop3_app
        self.imap4_app = imap4_app
        self.smtp_app = smtp_app
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphEmailAppUsageUserDetail(MicrosoftGraphEntity):
    """emailAppUsageUserDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    :param display_name:
    :type display_name: str
    :param is_deleted:
    :type is_deleted: bool
    :param deleted_date:
    :type deleted_date: ~datetime.date
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param mail_for_mac:
    :type mail_for_mac: list[str]
    :param outlook_for_mac:
    :type outlook_for_mac: list[str]
    :param outlook_for_windows:
    :type outlook_for_windows: list[str]
    :param outlook_for_mobile:
    :type outlook_for_mobile: list[str]
    :param other_for_mobile:
    :type other_for_mobile: list[str]
    :param outlook_for_web:
    :type outlook_for_web: list[str]
    :param pop3_app:
    :type pop3_app: list[str]
    :param imap4_app:
    :type imap4_app: list[str]
    :param smtp_app:
    :type smtp_app: list[str]
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'deleted_date': {'key': 'deletedDate', 'type': 'date'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'mail_for_mac': {'key': 'mailForMac', 'type': '[str]'},
        'outlook_for_mac': {'key': 'outlookForMac', 'type': '[str]'},
        'outlook_for_windows': {'key': 'outlookForWindows', 'type': '[str]'},
        'outlook_for_mobile': {'key': 'outlookForMobile', 'type': '[str]'},
        'other_for_mobile': {'key': 'otherForMobile', 'type': '[str]'},
        'outlook_for_web': {'key': 'outlookForWeb', 'type': '[str]'},
        'pop3_app': {'key': 'pop3App', 'type': '[str]'},
        'imap4_app': {'key': 'imap4App', 'type': '[str]'},
        'smtp_app': {'key': 'smtpApp', 'type': '[str]'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        user_principal_name: Optional[str] = None,
        display_name: Optional[str] = None,
        is_deleted: Optional[bool] = None,
        deleted_date: Optional[datetime.date] = None,
        last_activity_date: Optional[datetime.date] = None,
        mail_for_mac: Optional[List[str]] = None,
        outlook_for_mac: Optional[List[str]] = None,
        outlook_for_windows: Optional[List[str]] = None,
        outlook_for_mobile: Optional[List[str]] = None,
        other_for_mobile: Optional[List[str]] = None,
        outlook_for_web: Optional[List[str]] = None,
        pop3_app: Optional[List[str]] = None,
        imap4_app: Optional[List[str]] = None,
        smtp_app: Optional[List[str]] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEmailAppUsageUserDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.user_principal_name = user_principal_name
        self.display_name = display_name
        self.is_deleted = is_deleted
        self.deleted_date = deleted_date
        self.last_activity_date = last_activity_date
        self.mail_for_mac = mail_for_mac
        self.outlook_for_mac = outlook_for_mac
        self.outlook_for_windows = outlook_for_windows
        self.outlook_for_mobile = outlook_for_mobile
        self.other_for_mobile = other_for_mobile
        self.outlook_for_web = outlook_for_web
        self.pop3_app = pop3_app
        self.imap4_app = imap4_app
        self.smtp_app = smtp_app
        self.report_period = report_period


class MicrosoftGraphEmailAppUsageVersionsUserCounts(MicrosoftGraphEntity):
    """emailAppUsageVersionsUserCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param outlook2016:
    :type outlook2016: long
    :param outlook2013:
    :type outlook2013: long
    :param outlook2010:
    :type outlook2010: long
    :param outlook2007:
    :type outlook2007: long
    :param undetermined:
    :type undetermined: long
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'outlook2016': {'key': 'outlook2016', 'type': 'long'},
        'outlook2013': {'key': 'outlook2013', 'type': 'long'},
        'outlook2010': {'key': 'outlook2010', 'type': 'long'},
        'outlook2007': {'key': 'outlook2007', 'type': 'long'},
        'undetermined': {'key': 'undetermined', 'type': 'long'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        outlook2016: Optional[int] = None,
        outlook2013: Optional[int] = None,
        outlook2010: Optional[int] = None,
        outlook2007: Optional[int] = None,
        undetermined: Optional[int] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEmailAppUsageVersionsUserCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.outlook2016 = outlook2016
        self.outlook2013 = outlook2013
        self.outlook2010 = outlook2010
        self.outlook2007 = outlook2007
        self.undetermined = undetermined
        self.report_period = report_period


class MicrosoftGraphFeatureUsageDetail(msrest.serialization.Model):
    """featureUsageDetail.

    :param feature_name:
    :type feature_name: str
    :param license_required:  Possible values include: "none", "free", "basic", "premiumP1",
     "premiumP2", "unknownFutureValue".
    :type license_required: str or ~reports.models.MicrosoftGraphAzureAdLicenseType
    :param license_assigned:  Possible values include: "none", "free", "basic", "premiumP1",
     "premiumP2", "unknownFutureValue".
    :type license_assigned: str or ~reports.models.MicrosoftGraphAzureAdLicenseType
    :param last_used_date_time:
    :type last_used_date_time: ~datetime.datetime
    :param last_configured_date_time:
    :type last_configured_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'feature_name': {'key': 'featureName', 'type': 'str'},
        'license_required': {'key': 'licenseRequired', 'type': 'str'},
        'license_assigned': {'key': 'licenseAssigned', 'type': 'str'},
        'last_used_date_time': {'key': 'lastUsedDateTime', 'type': 'iso-8601'},
        'last_configured_date_time': {'key': 'lastConfiguredDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        feature_name: Optional[str] = None,
        license_required: Optional[Union[str, "MicrosoftGraphAzureAdLicenseType"]] = None,
        license_assigned: Optional[Union[str, "MicrosoftGraphAzureAdLicenseType"]] = None,
        last_used_date_time: Optional[datetime.datetime] = None,
        last_configured_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphFeatureUsageDetail, self).__init__(**kwargs)
        self.feature_name = feature_name
        self.license_required = license_required
        self.license_assigned = license_assigned
        self.last_used_date_time = last_used_date_time
        self.last_configured_date_time = last_configured_date_time


class MicrosoftGraphKeyValuePair(msrest.serialization.Model):
    """keyValuePair.

    :param name: Name for this key-value pair.
    :type name: str
    :param value: Value for this key-value pair.
    :type value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphKeyValuePair, self).__init__(**kwargs)
        self.name = name
        self.value = value


class MicrosoftGraphLicenseInfoDetail(msrest.serialization.Model):
    """licenseInfoDetail.

    :param license_type:  Possible values include: "none", "free", "basic", "premiumP1",
     "premiumP2", "unknownFutureValue".
    :type license_type: str or ~reports.models.MicrosoftGraphAzureAdLicenseType
    :param total_license_count:
    :type total_license_count: int
    :param total_assigned_count:
    :type total_assigned_count: int
    :param total_usage_count:
    :type total_usage_count: int
    """

    _validation = {
        'total_license_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'total_assigned_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'total_usage_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'license_type': {'key': 'licenseType', 'type': 'str'},
        'total_license_count': {'key': 'totalLicenseCount', 'type': 'int'},
        'total_assigned_count': {'key': 'totalAssignedCount', 'type': 'int'},
        'total_usage_count': {'key': 'totalUsageCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        license_type: Optional[Union[str, "MicrosoftGraphAzureAdLicenseType"]] = None,
        total_license_count: Optional[int] = None,
        total_assigned_count: Optional[int] = None,
        total_usage_count: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphLicenseInfoDetail, self).__init__(**kwargs)
        self.license_type = license_type
        self.total_license_count = total_license_count
        self.total_assigned_count = total_assigned_count
        self.total_usage_count = total_usage_count


class MicrosoftGraphMailboxUsageDetail(MicrosoftGraphEntity):
    """mailboxUsageDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    :param display_name:
    :type display_name: str
    :param is_deleted:
    :type is_deleted: bool
    :param deleted_date:
    :type deleted_date: ~datetime.date
    :param created_date:
    :type created_date: ~datetime.date
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param item_count:
    :type item_count: long
    :param storage_used_in_bytes:
    :type storage_used_in_bytes: long
    :param deleted_item_count:
    :type deleted_item_count: long
    :param deleted_item_size_in_bytes:
    :type deleted_item_size_in_bytes: long
    :param issue_warning_quota_in_bytes:
    :type issue_warning_quota_in_bytes: long
    :param prohibit_send_quota_in_bytes:
    :type prohibit_send_quota_in_bytes: long
    :param prohibit_send_receive_quota_in_bytes:
    :type prohibit_send_receive_quota_in_bytes: long
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'deleted_date': {'key': 'deletedDate', 'type': 'date'},
        'created_date': {'key': 'createdDate', 'type': 'date'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'item_count': {'key': 'itemCount', 'type': 'long'},
        'storage_used_in_bytes': {'key': 'storageUsedInBytes', 'type': 'long'},
        'deleted_item_count': {'key': 'deletedItemCount', 'type': 'long'},
        'deleted_item_size_in_bytes': {'key': 'deletedItemSizeInBytes', 'type': 'long'},
        'issue_warning_quota_in_bytes': {'key': 'issueWarningQuotaInBytes', 'type': 'long'},
        'prohibit_send_quota_in_bytes': {'key': 'prohibitSendQuotaInBytes', 'type': 'long'},
        'prohibit_send_receive_quota_in_bytes': {'key': 'prohibitSendReceiveQuotaInBytes', 'type': 'long'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        user_principal_name: Optional[str] = None,
        display_name: Optional[str] = None,
        is_deleted: Optional[bool] = None,
        deleted_date: Optional[datetime.date] = None,
        created_date: Optional[datetime.date] = None,
        last_activity_date: Optional[datetime.date] = None,
        item_count: Optional[int] = None,
        storage_used_in_bytes: Optional[int] = None,
        deleted_item_count: Optional[int] = None,
        deleted_item_size_in_bytes: Optional[int] = None,
        issue_warning_quota_in_bytes: Optional[int] = None,
        prohibit_send_quota_in_bytes: Optional[int] = None,
        prohibit_send_receive_quota_in_bytes: Optional[int] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphMailboxUsageDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.user_principal_name = user_principal_name
        self.display_name = display_name
        self.is_deleted = is_deleted
        self.deleted_date = deleted_date
        self.created_date = created_date
        self.last_activity_date = last_activity_date
        self.item_count = item_count
        self.storage_used_in_bytes = storage_used_in_bytes
        self.deleted_item_count = deleted_item_count
        self.deleted_item_size_in_bytes = deleted_item_size_in_bytes
        self.issue_warning_quota_in_bytes = issue_warning_quota_in_bytes
        self.prohibit_send_quota_in_bytes = prohibit_send_quota_in_bytes
        self.prohibit_send_receive_quota_in_bytes = prohibit_send_receive_quota_in_bytes
        self.report_period = report_period


class MicrosoftGraphMailboxUsageMailboxCounts(MicrosoftGraphEntity):
    """mailboxUsageMailboxCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param total:
    :type total: long
    :param active:
    :type active: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'total': {'key': 'total', 'type': 'long'},
        'active': {'key': 'active', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        total: Optional[int] = None,
        active: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphMailboxUsageMailboxCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.total = total
        self.active = active
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphMailboxUsageQuotaStatusMailboxCounts(MicrosoftGraphEntity):
    """mailboxUsageQuotaStatusMailboxCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param under_limit:
    :type under_limit: long
    :param warning_issued:
    :type warning_issued: long
    :param send_prohibited:
    :type send_prohibited: long
    :param send_receive_prohibited:
    :type send_receive_prohibited: long
    :param indeterminate:
    :type indeterminate: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'under_limit': {'key': 'underLimit', 'type': 'long'},
        'warning_issued': {'key': 'warningIssued', 'type': 'long'},
        'send_prohibited': {'key': 'sendProhibited', 'type': 'long'},
        'send_receive_prohibited': {'key': 'sendReceiveProhibited', 'type': 'long'},
        'indeterminate': {'key': 'indeterminate', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        under_limit: Optional[int] = None,
        warning_issued: Optional[int] = None,
        send_prohibited: Optional[int] = None,
        send_receive_prohibited: Optional[int] = None,
        indeterminate: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphMailboxUsageQuotaStatusMailboxCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.under_limit = under_limit
        self.warning_issued = warning_issued
        self.send_prohibited = send_prohibited
        self.send_receive_prohibited = send_receive_prohibited
        self.indeterminate = indeterminate
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphMailboxUsageStorage(MicrosoftGraphEntity):
    """mailboxUsageStorage.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param storage_used_in_bytes:
    :type storage_used_in_bytes: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'storage_used_in_bytes': {'key': 'storageUsedInBytes', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        storage_used_in_bytes: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphMailboxUsageStorage, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.storage_used_in_bytes = storage_used_in_bytes
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphOffice365ActivationCounts(MicrosoftGraphEntity):
    """office365ActivationCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param product_type:
    :type product_type: str
    :param windows:
    :type windows: long
    :param mac:
    :type mac: long
    :param android:
    :type android: long
    :param ios:
    :type ios: long
    :param windows10_mobile:
    :type windows10_mobile: long
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'product_type': {'key': 'productType', 'type': 'str'},
        'windows': {'key': 'windows', 'type': 'long'},
        'mac': {'key': 'mac', 'type': 'long'},
        'android': {'key': 'android', 'type': 'long'},
        'ios': {'key': 'ios', 'type': 'long'},
        'windows10_mobile': {'key': 'windows10Mobile', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        product_type: Optional[str] = None,
        windows: Optional[int] = None,
        mac: Optional[int] = None,
        android: Optional[int] = None,
        ios: Optional[int] = None,
        windows10_mobile: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphOffice365ActivationCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.product_type = product_type
        self.windows = windows
        self.mac = mac
        self.android = android
        self.ios = ios
        self.windows10_mobile = windows10_mobile


class MicrosoftGraphOffice365ActivationsUserCounts(MicrosoftGraphEntity):
    """office365ActivationsUserCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param product_type:
    :type product_type: str
    :param assigned:
    :type assigned: long
    :param activated:
    :type activated: long
    :param shared_computer_activation:
    :type shared_computer_activation: long
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'product_type': {'key': 'productType', 'type': 'str'},
        'assigned': {'key': 'assigned', 'type': 'long'},
        'activated': {'key': 'activated', 'type': 'long'},
        'shared_computer_activation': {'key': 'sharedComputerActivation', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        product_type: Optional[str] = None,
        assigned: Optional[int] = None,
        activated: Optional[int] = None,
        shared_computer_activation: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphOffice365ActivationsUserCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.product_type = product_type
        self.assigned = assigned
        self.activated = activated
        self.shared_computer_activation = shared_computer_activation


class MicrosoftGraphOffice365ActivationsUserDetail(MicrosoftGraphEntity):
    """office365ActivationsUserDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    :param display_name:
    :type display_name: str
    :param user_activation_counts:
    :type user_activation_counts: list[~reports.models.MicrosoftGraphUserActivationCounts]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'user_activation_counts': {'key': 'userActivationCounts', 'type': '[MicrosoftGraphUserActivationCounts]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        user_principal_name: Optional[str] = None,
        display_name: Optional[str] = None,
        user_activation_counts: Optional[List["MicrosoftGraphUserActivationCounts"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOffice365ActivationsUserDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.user_principal_name = user_principal_name
        self.display_name = display_name
        self.user_activation_counts = user_activation_counts


class MicrosoftGraphOffice365ActiveUserCounts(MicrosoftGraphEntity):
    """office365ActiveUserCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param office365:
    :type office365: long
    :param exchange:
    :type exchange: long
    :param one_drive:
    :type one_drive: long
    :param share_point:
    :type share_point: long
    :param skype_for_business:
    :type skype_for_business: long
    :param yammer:
    :type yammer: long
    :param teams:
    :type teams: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'office365': {'key': 'office365', 'type': 'long'},
        'exchange': {'key': 'exchange', 'type': 'long'},
        'one_drive': {'key': 'oneDrive', 'type': 'long'},
        'share_point': {'key': 'sharePoint', 'type': 'long'},
        'skype_for_business': {'key': 'skypeForBusiness', 'type': 'long'},
        'yammer': {'key': 'yammer', 'type': 'long'},
        'teams': {'key': 'teams', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        office365: Optional[int] = None,
        exchange: Optional[int] = None,
        one_drive: Optional[int] = None,
        share_point: Optional[int] = None,
        skype_for_business: Optional[int] = None,
        yammer: Optional[int] = None,
        teams: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOffice365ActiveUserCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.office365 = office365
        self.exchange = exchange
        self.one_drive = one_drive
        self.share_point = share_point
        self.skype_for_business = skype_for_business
        self.yammer = yammer
        self.teams = teams
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphOffice365ActiveUserDetail(MicrosoftGraphEntity):
    """office365ActiveUserDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    :param display_name:
    :type display_name: str
    :param is_deleted:
    :type is_deleted: bool
    :param deleted_date:
    :type deleted_date: ~datetime.date
    :param has_exchange_license:
    :type has_exchange_license: bool
    :param has_one_drive_license:
    :type has_one_drive_license: bool
    :param has_share_point_license:
    :type has_share_point_license: bool
    :param has_skype_for_business_license:
    :type has_skype_for_business_license: bool
    :param has_yammer_license:
    :type has_yammer_license: bool
    :param has_teams_license:
    :type has_teams_license: bool
    :param exchange_last_activity_date:
    :type exchange_last_activity_date: ~datetime.date
    :param one_drive_last_activity_date:
    :type one_drive_last_activity_date: ~datetime.date
    :param share_point_last_activity_date:
    :type share_point_last_activity_date: ~datetime.date
    :param skype_for_business_last_activity_date:
    :type skype_for_business_last_activity_date: ~datetime.date
    :param yammer_last_activity_date:
    :type yammer_last_activity_date: ~datetime.date
    :param teams_last_activity_date:
    :type teams_last_activity_date: ~datetime.date
    :param exchange_license_assign_date:
    :type exchange_license_assign_date: ~datetime.date
    :param one_drive_license_assign_date:
    :type one_drive_license_assign_date: ~datetime.date
    :param share_point_license_assign_date:
    :type share_point_license_assign_date: ~datetime.date
    :param skype_for_business_license_assign_date:
    :type skype_for_business_license_assign_date: ~datetime.date
    :param yammer_license_assign_date:
    :type yammer_license_assign_date: ~datetime.date
    :param teams_license_assign_date:
    :type teams_license_assign_date: ~datetime.date
    :param assigned_products:
    :type assigned_products: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'deleted_date': {'key': 'deletedDate', 'type': 'date'},
        'has_exchange_license': {'key': 'hasExchangeLicense', 'type': 'bool'},
        'has_one_drive_license': {'key': 'hasOneDriveLicense', 'type': 'bool'},
        'has_share_point_license': {'key': 'hasSharePointLicense', 'type': 'bool'},
        'has_skype_for_business_license': {'key': 'hasSkypeForBusinessLicense', 'type': 'bool'},
        'has_yammer_license': {'key': 'hasYammerLicense', 'type': 'bool'},
        'has_teams_license': {'key': 'hasTeamsLicense', 'type': 'bool'},
        'exchange_last_activity_date': {'key': 'exchangeLastActivityDate', 'type': 'date'},
        'one_drive_last_activity_date': {'key': 'oneDriveLastActivityDate', 'type': 'date'},
        'share_point_last_activity_date': {'key': 'sharePointLastActivityDate', 'type': 'date'},
        'skype_for_business_last_activity_date': {'key': 'skypeForBusinessLastActivityDate', 'type': 'date'},
        'yammer_last_activity_date': {'key': 'yammerLastActivityDate', 'type': 'date'},
        'teams_last_activity_date': {'key': 'teamsLastActivityDate', 'type': 'date'},
        'exchange_license_assign_date': {'key': 'exchangeLicenseAssignDate', 'type': 'date'},
        'one_drive_license_assign_date': {'key': 'oneDriveLicenseAssignDate', 'type': 'date'},
        'share_point_license_assign_date': {'key': 'sharePointLicenseAssignDate', 'type': 'date'},
        'skype_for_business_license_assign_date': {'key': 'skypeForBusinessLicenseAssignDate', 'type': 'date'},
        'yammer_license_assign_date': {'key': 'yammerLicenseAssignDate', 'type': 'date'},
        'teams_license_assign_date': {'key': 'teamsLicenseAssignDate', 'type': 'date'},
        'assigned_products': {'key': 'assignedProducts', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        user_principal_name: Optional[str] = None,
        display_name: Optional[str] = None,
        is_deleted: Optional[bool] = None,
        deleted_date: Optional[datetime.date] = None,
        has_exchange_license: Optional[bool] = None,
        has_one_drive_license: Optional[bool] = None,
        has_share_point_license: Optional[bool] = None,
        has_skype_for_business_license: Optional[bool] = None,
        has_yammer_license: Optional[bool] = None,
        has_teams_license: Optional[bool] = None,
        exchange_last_activity_date: Optional[datetime.date] = None,
        one_drive_last_activity_date: Optional[datetime.date] = None,
        share_point_last_activity_date: Optional[datetime.date] = None,
        skype_for_business_last_activity_date: Optional[datetime.date] = None,
        yammer_last_activity_date: Optional[datetime.date] = None,
        teams_last_activity_date: Optional[datetime.date] = None,
        exchange_license_assign_date: Optional[datetime.date] = None,
        one_drive_license_assign_date: Optional[datetime.date] = None,
        share_point_license_assign_date: Optional[datetime.date] = None,
        skype_for_business_license_assign_date: Optional[datetime.date] = None,
        yammer_license_assign_date: Optional[datetime.date] = None,
        teams_license_assign_date: Optional[datetime.date] = None,
        assigned_products: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOffice365ActiveUserDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.user_principal_name = user_principal_name
        self.display_name = display_name
        self.is_deleted = is_deleted
        self.deleted_date = deleted_date
        self.has_exchange_license = has_exchange_license
        self.has_one_drive_license = has_one_drive_license
        self.has_share_point_license = has_share_point_license
        self.has_skype_for_business_license = has_skype_for_business_license
        self.has_yammer_license = has_yammer_license
        self.has_teams_license = has_teams_license
        self.exchange_last_activity_date = exchange_last_activity_date
        self.one_drive_last_activity_date = one_drive_last_activity_date
        self.share_point_last_activity_date = share_point_last_activity_date
        self.skype_for_business_last_activity_date = skype_for_business_last_activity_date
        self.yammer_last_activity_date = yammer_last_activity_date
        self.teams_last_activity_date = teams_last_activity_date
        self.exchange_license_assign_date = exchange_license_assign_date
        self.one_drive_license_assign_date = one_drive_license_assign_date
        self.share_point_license_assign_date = share_point_license_assign_date
        self.skype_for_business_license_assign_date = skype_for_business_license_assign_date
        self.yammer_license_assign_date = yammer_license_assign_date
        self.teams_license_assign_date = teams_license_assign_date
        self.assigned_products = assigned_products


class MicrosoftGraphOffice365GroupsActivityCounts(MicrosoftGraphEntity):
    """office365GroupsActivityCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param exchange_emails_received:
    :type exchange_emails_received: long
    :param yammer_messages_posted:
    :type yammer_messages_posted: long
    :param yammer_messages_read:
    :type yammer_messages_read: long
    :param yammer_messages_liked:
    :type yammer_messages_liked: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'exchange_emails_received': {'key': 'exchangeEmailsReceived', 'type': 'long'},
        'yammer_messages_posted': {'key': 'yammerMessagesPosted', 'type': 'long'},
        'yammer_messages_read': {'key': 'yammerMessagesRead', 'type': 'long'},
        'yammer_messages_liked': {'key': 'yammerMessagesLiked', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        exchange_emails_received: Optional[int] = None,
        yammer_messages_posted: Optional[int] = None,
        yammer_messages_read: Optional[int] = None,
        yammer_messages_liked: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOffice365GroupsActivityCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.exchange_emails_received = exchange_emails_received
        self.yammer_messages_posted = yammer_messages_posted
        self.yammer_messages_read = yammer_messages_read
        self.yammer_messages_liked = yammer_messages_liked
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphOffice365GroupsActivityDetail(MicrosoftGraphEntity):
    """office365GroupsActivityDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param group_id:
    :type group_id: str
    :param group_display_name:
    :type group_display_name: str
    :param is_deleted:
    :type is_deleted: bool
    :param owner_principal_name:
    :type owner_principal_name: str
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param group_type:
    :type group_type: str
    :param member_count:
    :type member_count: long
    :param external_member_count:
    :type external_member_count: long
    :param exchange_received_email_count:
    :type exchange_received_email_count: long
    :param share_point_active_file_count:
    :type share_point_active_file_count: long
    :param yammer_posted_message_count:
    :type yammer_posted_message_count: long
    :param yammer_read_message_count:
    :type yammer_read_message_count: long
    :param yammer_liked_message_count:
    :type yammer_liked_message_count: long
    :param exchange_mailbox_total_item_count:
    :type exchange_mailbox_total_item_count: long
    :param exchange_mailbox_storage_used_in_bytes:
    :type exchange_mailbox_storage_used_in_bytes: long
    :param share_point_total_file_count:
    :type share_point_total_file_count: long
    :param share_point_site_storage_used_in_bytes:
    :type share_point_site_storage_used_in_bytes: long
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'group_id': {'key': 'groupId', 'type': 'str'},
        'group_display_name': {'key': 'groupDisplayName', 'type': 'str'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'owner_principal_name': {'key': 'ownerPrincipalName', 'type': 'str'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'group_type': {'key': 'groupType', 'type': 'str'},
        'member_count': {'key': 'memberCount', 'type': 'long'},
        'external_member_count': {'key': 'externalMemberCount', 'type': 'long'},
        'exchange_received_email_count': {'key': 'exchangeReceivedEmailCount', 'type': 'long'},
        'share_point_active_file_count': {'key': 'sharePointActiveFileCount', 'type': 'long'},
        'yammer_posted_message_count': {'key': 'yammerPostedMessageCount', 'type': 'long'},
        'yammer_read_message_count': {'key': 'yammerReadMessageCount', 'type': 'long'},
        'yammer_liked_message_count': {'key': 'yammerLikedMessageCount', 'type': 'long'},
        'exchange_mailbox_total_item_count': {'key': 'exchangeMailboxTotalItemCount', 'type': 'long'},
        'exchange_mailbox_storage_used_in_bytes': {'key': 'exchangeMailboxStorageUsedInBytes', 'type': 'long'},
        'share_point_total_file_count': {'key': 'sharePointTotalFileCount', 'type': 'long'},
        'share_point_site_storage_used_in_bytes': {'key': 'sharePointSiteStorageUsedInBytes', 'type': 'long'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        group_id: Optional[str] = None,
        group_display_name: Optional[str] = None,
        is_deleted: Optional[bool] = None,
        owner_principal_name: Optional[str] = None,
        last_activity_date: Optional[datetime.date] = None,
        group_type: Optional[str] = None,
        member_count: Optional[int] = None,
        external_member_count: Optional[int] = None,
        exchange_received_email_count: Optional[int] = None,
        share_point_active_file_count: Optional[int] = None,
        yammer_posted_message_count: Optional[int] = None,
        yammer_read_message_count: Optional[int] = None,
        yammer_liked_message_count: Optional[int] = None,
        exchange_mailbox_total_item_count: Optional[int] = None,
        exchange_mailbox_storage_used_in_bytes: Optional[int] = None,
        share_point_total_file_count: Optional[int] = None,
        share_point_site_storage_used_in_bytes: Optional[int] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOffice365GroupsActivityDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.group_id = group_id
        self.group_display_name = group_display_name
        self.is_deleted = is_deleted
        self.owner_principal_name = owner_principal_name
        self.last_activity_date = last_activity_date
        self.group_type = group_type
        self.member_count = member_count
        self.external_member_count = external_member_count
        self.exchange_received_email_count = exchange_received_email_count
        self.share_point_active_file_count = share_point_active_file_count
        self.yammer_posted_message_count = yammer_posted_message_count
        self.yammer_read_message_count = yammer_read_message_count
        self.yammer_liked_message_count = yammer_liked_message_count
        self.exchange_mailbox_total_item_count = exchange_mailbox_total_item_count
        self.exchange_mailbox_storage_used_in_bytes = exchange_mailbox_storage_used_in_bytes
        self.share_point_total_file_count = share_point_total_file_count
        self.share_point_site_storage_used_in_bytes = share_point_site_storage_used_in_bytes
        self.report_period = report_period


class MicrosoftGraphOffice365GroupsActivityFileCounts(MicrosoftGraphEntity):
    """office365GroupsActivityFileCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param total:
    :type total: long
    :param active:
    :type active: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'total': {'key': 'total', 'type': 'long'},
        'active': {'key': 'active', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        total: Optional[int] = None,
        active: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOffice365GroupsActivityFileCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.total = total
        self.active = active
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphOffice365GroupsActivityGroupCounts(MicrosoftGraphEntity):
    """office365GroupsActivityGroupCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param total:
    :type total: long
    :param active:
    :type active: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'total': {'key': 'total', 'type': 'long'},
        'active': {'key': 'active', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        total: Optional[int] = None,
        active: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOffice365GroupsActivityGroupCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.total = total
        self.active = active
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphOffice365GroupsActivityStorage(MicrosoftGraphEntity):
    """office365GroupsActivityStorage.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param mailbox_storage_used_in_bytes:
    :type mailbox_storage_used_in_bytes: long
    :param site_storage_used_in_bytes:
    :type site_storage_used_in_bytes: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'mailbox_storage_used_in_bytes': {'key': 'mailboxStorageUsedInBytes', 'type': 'long'},
        'site_storage_used_in_bytes': {'key': 'siteStorageUsedInBytes', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        mailbox_storage_used_in_bytes: Optional[int] = None,
        site_storage_used_in_bytes: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOffice365GroupsActivityStorage, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.mailbox_storage_used_in_bytes = mailbox_storage_used_in_bytes
        self.site_storage_used_in_bytes = site_storage_used_in_bytes
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphOffice365ServicesUserCounts(MicrosoftGraphEntity):
    """office365ServicesUserCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param exchange_active:
    :type exchange_active: long
    :param exchange_inactive:
    :type exchange_inactive: long
    :param one_drive_active:
    :type one_drive_active: long
    :param one_drive_inactive:
    :type one_drive_inactive: long
    :param share_point_active:
    :type share_point_active: long
    :param share_point_inactive:
    :type share_point_inactive: long
    :param skype_for_business_active:
    :type skype_for_business_active: long
    :param skype_for_business_inactive:
    :type skype_for_business_inactive: long
    :param yammer_active:
    :type yammer_active: long
    :param yammer_inactive:
    :type yammer_inactive: long
    :param teams_active:
    :type teams_active: long
    :param teams_inactive:
    :type teams_inactive: long
    :param office365_active:
    :type office365_active: long
    :param office365_inactive:
    :type office365_inactive: long
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'exchange_active': {'key': 'exchangeActive', 'type': 'long'},
        'exchange_inactive': {'key': 'exchangeInactive', 'type': 'long'},
        'one_drive_active': {'key': 'oneDriveActive', 'type': 'long'},
        'one_drive_inactive': {'key': 'oneDriveInactive', 'type': 'long'},
        'share_point_active': {'key': 'sharePointActive', 'type': 'long'},
        'share_point_inactive': {'key': 'sharePointInactive', 'type': 'long'},
        'skype_for_business_active': {'key': 'skypeForBusinessActive', 'type': 'long'},
        'skype_for_business_inactive': {'key': 'skypeForBusinessInactive', 'type': 'long'},
        'yammer_active': {'key': 'yammerActive', 'type': 'long'},
        'yammer_inactive': {'key': 'yammerInactive', 'type': 'long'},
        'teams_active': {'key': 'teamsActive', 'type': 'long'},
        'teams_inactive': {'key': 'teamsInactive', 'type': 'long'},
        'office365_active': {'key': 'office365Active', 'type': 'long'},
        'office365_inactive': {'key': 'office365Inactive', 'type': 'long'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        exchange_active: Optional[int] = None,
        exchange_inactive: Optional[int] = None,
        one_drive_active: Optional[int] = None,
        one_drive_inactive: Optional[int] = None,
        share_point_active: Optional[int] = None,
        share_point_inactive: Optional[int] = None,
        skype_for_business_active: Optional[int] = None,
        skype_for_business_inactive: Optional[int] = None,
        yammer_active: Optional[int] = None,
        yammer_inactive: Optional[int] = None,
        teams_active: Optional[int] = None,
        teams_inactive: Optional[int] = None,
        office365_active: Optional[int] = None,
        office365_inactive: Optional[int] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOffice365ServicesUserCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.exchange_active = exchange_active
        self.exchange_inactive = exchange_inactive
        self.one_drive_active = one_drive_active
        self.one_drive_inactive = one_drive_inactive
        self.share_point_active = share_point_active
        self.share_point_inactive = share_point_inactive
        self.skype_for_business_active = skype_for_business_active
        self.skype_for_business_inactive = skype_for_business_inactive
        self.yammer_active = yammer_active
        self.yammer_inactive = yammer_inactive
        self.teams_active = teams_active
        self.teams_inactive = teams_inactive
        self.office365_active = office365_active
        self.office365_inactive = office365_inactive
        self.report_period = report_period


class MicrosoftGraphOneDriveActivityUserDetail(MicrosoftGraphEntity):
    """oneDriveActivityUserDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    :param is_deleted:
    :type is_deleted: bool
    :param deleted_date:
    :type deleted_date: ~datetime.date
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param viewed_or_edited_file_count:
    :type viewed_or_edited_file_count: long
    :param synced_file_count:
    :type synced_file_count: long
    :param shared_internally_file_count:
    :type shared_internally_file_count: long
    :param shared_externally_file_count:
    :type shared_externally_file_count: long
    :param assigned_products:
    :type assigned_products: list[str]
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'deleted_date': {'key': 'deletedDate', 'type': 'date'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'viewed_or_edited_file_count': {'key': 'viewedOrEditedFileCount', 'type': 'long'},
        'synced_file_count': {'key': 'syncedFileCount', 'type': 'long'},
        'shared_internally_file_count': {'key': 'sharedInternallyFileCount', 'type': 'long'},
        'shared_externally_file_count': {'key': 'sharedExternallyFileCount', 'type': 'long'},
        'assigned_products': {'key': 'assignedProducts', 'type': '[str]'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        user_principal_name: Optional[str] = None,
        is_deleted: Optional[bool] = None,
        deleted_date: Optional[datetime.date] = None,
        last_activity_date: Optional[datetime.date] = None,
        viewed_or_edited_file_count: Optional[int] = None,
        synced_file_count: Optional[int] = None,
        shared_internally_file_count: Optional[int] = None,
        shared_externally_file_count: Optional[int] = None,
        assigned_products: Optional[List[str]] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOneDriveActivityUserDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.user_principal_name = user_principal_name
        self.is_deleted = is_deleted
        self.deleted_date = deleted_date
        self.last_activity_date = last_activity_date
        self.viewed_or_edited_file_count = viewed_or_edited_file_count
        self.synced_file_count = synced_file_count
        self.shared_internally_file_count = shared_internally_file_count
        self.shared_externally_file_count = shared_externally_file_count
        self.assigned_products = assigned_products
        self.report_period = report_period


class MicrosoftGraphOneDriveUsageAccountCounts(MicrosoftGraphEntity):
    """oneDriveUsageAccountCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param site_type:
    :type site_type: str
    :param total:
    :type total: long
    :param active:
    :type active: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'site_type': {'key': 'siteType', 'type': 'str'},
        'total': {'key': 'total', 'type': 'long'},
        'active': {'key': 'active', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        site_type: Optional[str] = None,
        total: Optional[int] = None,
        active: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOneDriveUsageAccountCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.site_type = site_type
        self.total = total
        self.active = active
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphOneDriveUsageAccountDetail(MicrosoftGraphEntity):
    """oneDriveUsageAccountDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param site_url:
    :type site_url: str
    :param owner_display_name:
    :type owner_display_name: str
    :param owner_principal_name:
    :type owner_principal_name: str
    :param is_deleted:
    :type is_deleted: bool
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param file_count:
    :type file_count: long
    :param active_file_count:
    :type active_file_count: long
    :param storage_used_in_bytes:
    :type storage_used_in_bytes: long
    :param storage_allocated_in_bytes:
    :type storage_allocated_in_bytes: long
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'site_url': {'key': 'siteUrl', 'type': 'str'},
        'owner_display_name': {'key': 'ownerDisplayName', 'type': 'str'},
        'owner_principal_name': {'key': 'ownerPrincipalName', 'type': 'str'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'file_count': {'key': 'fileCount', 'type': 'long'},
        'active_file_count': {'key': 'activeFileCount', 'type': 'long'},
        'storage_used_in_bytes': {'key': 'storageUsedInBytes', 'type': 'long'},
        'storage_allocated_in_bytes': {'key': 'storageAllocatedInBytes', 'type': 'long'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        site_url: Optional[str] = None,
        owner_display_name: Optional[str] = None,
        owner_principal_name: Optional[str] = None,
        is_deleted: Optional[bool] = None,
        last_activity_date: Optional[datetime.date] = None,
        file_count: Optional[int] = None,
        active_file_count: Optional[int] = None,
        storage_used_in_bytes: Optional[int] = None,
        storage_allocated_in_bytes: Optional[int] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOneDriveUsageAccountDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.site_url = site_url
        self.owner_display_name = owner_display_name
        self.owner_principal_name = owner_principal_name
        self.is_deleted = is_deleted
        self.last_activity_date = last_activity_date
        self.file_count = file_count
        self.active_file_count = active_file_count
        self.storage_used_in_bytes = storage_used_in_bytes
        self.storage_allocated_in_bytes = storage_allocated_in_bytes
        self.report_period = report_period


class MicrosoftGraphOneDriveUsageFileCounts(MicrosoftGraphEntity):
    """oneDriveUsageFileCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param site_type:
    :type site_type: str
    :param total:
    :type total: long
    :param active:
    :type active: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'site_type': {'key': 'siteType', 'type': 'str'},
        'total': {'key': 'total', 'type': 'long'},
        'active': {'key': 'active', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        site_type: Optional[str] = None,
        total: Optional[int] = None,
        active: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphOneDriveUsageFileCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.site_type = site_type
        self.total = total
        self.active = active
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphPrintUsageSummaryByPrinter(MicrosoftGraphEntity):
    """PrintUsageSummaryByPrinter.

    :param id: Read-only.
    :type id: str
    :param printer_id:
    :type printer_id: str
    :param usage_date:
    :type usage_date: ~datetime.date
    :param completed_black_and_white_job_count:
    :type completed_black_and_white_job_count: long
    :param completed_color_job_count:
    :type completed_color_job_count: long
    :param incomplete_job_count:
    :type incomplete_job_count: long
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'printer_id': {'key': 'printerId', 'type': 'str'},
        'usage_date': {'key': 'usageDate', 'type': 'date'},
        'completed_black_and_white_job_count': {'key': 'completedBlackAndWhiteJobCount', 'type': 'long'},
        'completed_color_job_count': {'key': 'completedColorJobCount', 'type': 'long'},
        'incomplete_job_count': {'key': 'incompleteJobCount', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        printer_id: Optional[str] = None,
        usage_date: Optional[datetime.date] = None,
        completed_black_and_white_job_count: Optional[int] = None,
        completed_color_job_count: Optional[int] = None,
        incomplete_job_count: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintUsageSummaryByPrinter, self).__init__(id=id, **kwargs)
        self.printer_id = printer_id
        self.usage_date = usage_date
        self.completed_black_and_white_job_count = completed_black_and_white_job_count
        self.completed_color_job_count = completed_color_job_count
        self.incomplete_job_count = incomplete_job_count


class MicrosoftGraphPrintUsageSummaryByUser(MicrosoftGraphEntity):
    """PrintUsageSummaryByUser.

    :param id: Read-only.
    :type id: str
    :param user_principal_name:
    :type user_principal_name: str
    :param usage_date:
    :type usage_date: ~datetime.date
    :param completed_black_and_white_job_count:
    :type completed_black_and_white_job_count: long
    :param completed_color_job_count:
    :type completed_color_job_count: long
    :param incomplete_job_count:
    :type incomplete_job_count: long
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'usage_date': {'key': 'usageDate', 'type': 'date'},
        'completed_black_and_white_job_count': {'key': 'completedBlackAndWhiteJobCount', 'type': 'long'},
        'completed_color_job_count': {'key': 'completedColorJobCount', 'type': 'long'},
        'incomplete_job_count': {'key': 'incompleteJobCount', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        usage_date: Optional[datetime.date] = None,
        completed_black_and_white_job_count: Optional[int] = None,
        completed_color_job_count: Optional[int] = None,
        incomplete_job_count: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphPrintUsageSummaryByUser, self).__init__(id=id, **kwargs)
        self.user_principal_name = user_principal_name
        self.usage_date = usage_date
        self.completed_black_and_white_job_count = completed_black_and_white_job_count
        self.completed_color_job_count = completed_color_job_count
        self.incomplete_job_count = incomplete_job_count


class MicrosoftGraphRelyingPartyDetailedSummary(MicrosoftGraphEntity):
    """relyingPartyDetailedSummary.

    :param id: Read-only.
    :type id: str
    :param relying_party_id:
    :type relying_party_id: str
    :param service_id:
    :type service_id: str
    :param relying_party_name:
    :type relying_party_name: str
    :param successful_sign_in_count:
    :type successful_sign_in_count: long
    :param failed_sign_in_count:
    :type failed_sign_in_count: long
    :param total_sign_in_count:
    :type total_sign_in_count: long
    :param sign_in_success_rate:
    :type sign_in_success_rate: float
    :param unique_user_count:
    :type unique_user_count: long
    :param migration_status:  Possible values include: "ready", "needsReview",
     "additionalStepsRequired", "unknownFutureValue".
    :type migration_status: str or ~reports.models.MicrosoftGraphMigrationStatus
    :param migration_validation_details:
    :type migration_validation_details: list[~reports.models.MicrosoftGraphKeyValuePair]
    :param reply_urls:
    :type reply_urls: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'relying_party_id': {'key': 'relyingPartyId', 'type': 'str'},
        'service_id': {'key': 'serviceId', 'type': 'str'},
        'relying_party_name': {'key': 'relyingPartyName', 'type': 'str'},
        'successful_sign_in_count': {'key': 'successfulSignInCount', 'type': 'long'},
        'failed_sign_in_count': {'key': 'failedSignInCount', 'type': 'long'},
        'total_sign_in_count': {'key': 'totalSignInCount', 'type': 'long'},
        'sign_in_success_rate': {'key': 'signInSuccessRate', 'type': 'float'},
        'unique_user_count': {'key': 'uniqueUserCount', 'type': 'long'},
        'migration_status': {'key': 'migrationStatus', 'type': 'str'},
        'migration_validation_details': {'key': 'migrationValidationDetails', 'type': '[MicrosoftGraphKeyValuePair]'},
        'reply_urls': {'key': 'replyUrls', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        relying_party_id: Optional[str] = None,
        service_id: Optional[str] = None,
        relying_party_name: Optional[str] = None,
        successful_sign_in_count: Optional[int] = None,
        failed_sign_in_count: Optional[int] = None,
        total_sign_in_count: Optional[int] = None,
        sign_in_success_rate: Optional[float] = None,
        unique_user_count: Optional[int] = None,
        migration_status: Optional[Union[str, "MicrosoftGraphMigrationStatus"]] = None,
        migration_validation_details: Optional[List["MicrosoftGraphKeyValuePair"]] = None,
        reply_urls: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphRelyingPartyDetailedSummary, self).__init__(id=id, **kwargs)
        self.relying_party_id = relying_party_id
        self.service_id = service_id
        self.relying_party_name = relying_party_name
        self.successful_sign_in_count = successful_sign_in_count
        self.failed_sign_in_count = failed_sign_in_count
        self.total_sign_in_count = total_sign_in_count
        self.sign_in_success_rate = sign_in_success_rate
        self.unique_user_count = unique_user_count
        self.migration_status = migration_status
        self.migration_validation_details = migration_validation_details
        self.reply_urls = reply_urls


class MicrosoftGraphReport(msrest.serialization.Model):
    """report.

    :param content: Not yet documented.
    :type content: bytes
    """

    _attribute_map = {
        'content': {'key': 'content', 'type': 'base64'},
    }

    def __init__(
        self,
        *,
        content: Optional[bytes] = None,
        **kwargs
    ):
        super(MicrosoftGraphReport, self).__init__(**kwargs)
        self.content = content


class MicrosoftGraphReportRoot(MicrosoftGraphEntity):
    """The resource that represents an instance of History Reports.

    :param id: Read-only.
    :type id: str
    :param application_sign_in_detailed_summary:
    :type application_sign_in_detailed_summary:
     list[~reports.models.MicrosoftGraphApplicationSignInDetailedSummary]
    :param credential_user_registration_details:
    :type credential_user_registration_details:
     list[~reports.models.MicrosoftGraphCredentialUserRegistrationDetails]
    :param user_credential_usage_details:
    :type user_credential_usage_details:
     list[~reports.models.MicrosoftGraphUserCredentialUsageDetails]
    :param daily_print_usage_summaries_by_user:
    :type daily_print_usage_summaries_by_user:
     list[~reports.models.MicrosoftGraphPrintUsageSummaryByUser]
    :param monthly_print_usage_summaries_by_user:
    :type monthly_print_usage_summaries_by_user:
     list[~reports.models.MicrosoftGraphPrintUsageSummaryByUser]
    :param daily_print_usage_summaries_by_printer:
    :type daily_print_usage_summaries_by_printer:
     list[~reports.models.MicrosoftGraphPrintUsageSummaryByPrinter]
    :param monthly_print_usage_summaries_by_printer:
    :type monthly_print_usage_summaries_by_printer:
     list[~reports.models.MicrosoftGraphPrintUsageSummaryByPrinter]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'application_sign_in_detailed_summary': {'key': 'applicationSignInDetailedSummary', 'type': '[MicrosoftGraphApplicationSignInDetailedSummary]'},
        'credential_user_registration_details': {'key': 'credentialUserRegistrationDetails', 'type': '[MicrosoftGraphCredentialUserRegistrationDetails]'},
        'user_credential_usage_details': {'key': 'userCredentialUsageDetails', 'type': '[MicrosoftGraphUserCredentialUsageDetails]'},
        'daily_print_usage_summaries_by_user': {'key': 'dailyPrintUsageSummariesByUser', 'type': '[MicrosoftGraphPrintUsageSummaryByUser]'},
        'monthly_print_usage_summaries_by_user': {'key': 'monthlyPrintUsageSummariesByUser', 'type': '[MicrosoftGraphPrintUsageSummaryByUser]'},
        'daily_print_usage_summaries_by_printer': {'key': 'dailyPrintUsageSummariesByPrinter', 'type': '[MicrosoftGraphPrintUsageSummaryByPrinter]'},
        'monthly_print_usage_summaries_by_printer': {'key': 'monthlyPrintUsageSummariesByPrinter', 'type': '[MicrosoftGraphPrintUsageSummaryByPrinter]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        application_sign_in_detailed_summary: Optional[List["MicrosoftGraphApplicationSignInDetailedSummary"]] = None,
        credential_user_registration_details: Optional[List["MicrosoftGraphCredentialUserRegistrationDetails"]] = None,
        user_credential_usage_details: Optional[List["MicrosoftGraphUserCredentialUsageDetails"]] = None,
        daily_print_usage_summaries_by_user: Optional[List["MicrosoftGraphPrintUsageSummaryByUser"]] = None,
        monthly_print_usage_summaries_by_user: Optional[List["MicrosoftGraphPrintUsageSummaryByUser"]] = None,
        daily_print_usage_summaries_by_printer: Optional[List["MicrosoftGraphPrintUsageSummaryByPrinter"]] = None,
        monthly_print_usage_summaries_by_printer: Optional[List["MicrosoftGraphPrintUsageSummaryByPrinter"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphReportRoot, self).__init__(id=id, **kwargs)
        self.application_sign_in_detailed_summary = application_sign_in_detailed_summary
        self.credential_user_registration_details = credential_user_registration_details
        self.user_credential_usage_details = user_credential_usage_details
        self.daily_print_usage_summaries_by_user = daily_print_usage_summaries_by_user
        self.monthly_print_usage_summaries_by_user = monthly_print_usage_summaries_by_user
        self.daily_print_usage_summaries_by_printer = daily_print_usage_summaries_by_printer
        self.monthly_print_usage_summaries_by_printer = monthly_print_usage_summaries_by_printer


class MicrosoftGraphSharePointActivityPages(MicrosoftGraphEntity):
    """sharePointActivityPages.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param visited_page_count:
    :type visited_page_count: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'visited_page_count': {'key': 'visitedPageCount', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        visited_page_count: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSharePointActivityPages, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.visited_page_count = visited_page_count
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSharePointActivityUserCounts(MicrosoftGraphEntity):
    """sharePointActivityUserCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param visited_page:
    :type visited_page: long
    :param viewed_or_edited:
    :type viewed_or_edited: long
    :param synced:
    :type synced: long
    :param shared_internally:
    :type shared_internally: long
    :param shared_externally:
    :type shared_externally: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'visited_page': {'key': 'visitedPage', 'type': 'long'},
        'viewed_or_edited': {'key': 'viewedOrEdited', 'type': 'long'},
        'synced': {'key': 'synced', 'type': 'long'},
        'shared_internally': {'key': 'sharedInternally', 'type': 'long'},
        'shared_externally': {'key': 'sharedExternally', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        visited_page: Optional[int] = None,
        viewed_or_edited: Optional[int] = None,
        synced: Optional[int] = None,
        shared_internally: Optional[int] = None,
        shared_externally: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSharePointActivityUserCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.visited_page = visited_page
        self.viewed_or_edited = viewed_or_edited
        self.synced = synced
        self.shared_internally = shared_internally
        self.shared_externally = shared_externally
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSharePointActivityUserDetail(MicrosoftGraphEntity):
    """sharePointActivityUserDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    :param is_deleted:
    :type is_deleted: bool
    :param deleted_date:
    :type deleted_date: ~datetime.date
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param viewed_or_edited_file_count:
    :type viewed_or_edited_file_count: long
    :param synced_file_count:
    :type synced_file_count: long
    :param shared_internally_file_count:
    :type shared_internally_file_count: long
    :param shared_externally_file_count:
    :type shared_externally_file_count: long
    :param visited_page_count:
    :type visited_page_count: long
    :param assigned_products:
    :type assigned_products: list[str]
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'deleted_date': {'key': 'deletedDate', 'type': 'date'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'viewed_or_edited_file_count': {'key': 'viewedOrEditedFileCount', 'type': 'long'},
        'synced_file_count': {'key': 'syncedFileCount', 'type': 'long'},
        'shared_internally_file_count': {'key': 'sharedInternallyFileCount', 'type': 'long'},
        'shared_externally_file_count': {'key': 'sharedExternallyFileCount', 'type': 'long'},
        'visited_page_count': {'key': 'visitedPageCount', 'type': 'long'},
        'assigned_products': {'key': 'assignedProducts', 'type': '[str]'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        user_principal_name: Optional[str] = None,
        is_deleted: Optional[bool] = None,
        deleted_date: Optional[datetime.date] = None,
        last_activity_date: Optional[datetime.date] = None,
        viewed_or_edited_file_count: Optional[int] = None,
        synced_file_count: Optional[int] = None,
        shared_internally_file_count: Optional[int] = None,
        shared_externally_file_count: Optional[int] = None,
        visited_page_count: Optional[int] = None,
        assigned_products: Optional[List[str]] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSharePointActivityUserDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.user_principal_name = user_principal_name
        self.is_deleted = is_deleted
        self.deleted_date = deleted_date
        self.last_activity_date = last_activity_date
        self.viewed_or_edited_file_count = viewed_or_edited_file_count
        self.synced_file_count = synced_file_count
        self.shared_internally_file_count = shared_internally_file_count
        self.shared_externally_file_count = shared_externally_file_count
        self.visited_page_count = visited_page_count
        self.assigned_products = assigned_products
        self.report_period = report_period


class MicrosoftGraphSharePointSiteUsageDetail(MicrosoftGraphEntity):
    """sharePointSiteUsageDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param site_id:
    :type site_id: str
    :param site_url:
    :type site_url: str
    :param owner_display_name:
    :type owner_display_name: str
    :param owner_principal_name:
    :type owner_principal_name: str
    :param is_deleted:
    :type is_deleted: bool
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param file_count:
    :type file_count: long
    :param active_file_count:
    :type active_file_count: long
    :param page_view_count:
    :type page_view_count: long
    :param visited_page_count:
    :type visited_page_count: long
    :param storage_used_in_bytes:
    :type storage_used_in_bytes: long
    :param storage_allocated_in_bytes:
    :type storage_allocated_in_bytes: long
    :param root_web_template:
    :type root_web_template: str
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'site_id': {'key': 'siteId', 'type': 'str'},
        'site_url': {'key': 'siteUrl', 'type': 'str'},
        'owner_display_name': {'key': 'ownerDisplayName', 'type': 'str'},
        'owner_principal_name': {'key': 'ownerPrincipalName', 'type': 'str'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'file_count': {'key': 'fileCount', 'type': 'long'},
        'active_file_count': {'key': 'activeFileCount', 'type': 'long'},
        'page_view_count': {'key': 'pageViewCount', 'type': 'long'},
        'visited_page_count': {'key': 'visitedPageCount', 'type': 'long'},
        'storage_used_in_bytes': {'key': 'storageUsedInBytes', 'type': 'long'},
        'storage_allocated_in_bytes': {'key': 'storageAllocatedInBytes', 'type': 'long'},
        'root_web_template': {'key': 'rootWebTemplate', 'type': 'str'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        site_id: Optional[str] = None,
        site_url: Optional[str] = None,
        owner_display_name: Optional[str] = None,
        owner_principal_name: Optional[str] = None,
        is_deleted: Optional[bool] = None,
        last_activity_date: Optional[datetime.date] = None,
        file_count: Optional[int] = None,
        active_file_count: Optional[int] = None,
        page_view_count: Optional[int] = None,
        visited_page_count: Optional[int] = None,
        storage_used_in_bytes: Optional[int] = None,
        storage_allocated_in_bytes: Optional[int] = None,
        root_web_template: Optional[str] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSharePointSiteUsageDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.site_id = site_id
        self.site_url = site_url
        self.owner_display_name = owner_display_name
        self.owner_principal_name = owner_principal_name
        self.is_deleted = is_deleted
        self.last_activity_date = last_activity_date
        self.file_count = file_count
        self.active_file_count = active_file_count
        self.page_view_count = page_view_count
        self.visited_page_count = visited_page_count
        self.storage_used_in_bytes = storage_used_in_bytes
        self.storage_allocated_in_bytes = storage_allocated_in_bytes
        self.root_web_template = root_web_template
        self.report_period = report_period


class MicrosoftGraphSharePointSiteUsageFileCounts(MicrosoftGraphEntity):
    """sharePointSiteUsageFileCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param site_type:
    :type site_type: str
    :param total:
    :type total: long
    :param active:
    :type active: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'site_type': {'key': 'siteType', 'type': 'str'},
        'total': {'key': 'total', 'type': 'long'},
        'active': {'key': 'active', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        site_type: Optional[str] = None,
        total: Optional[int] = None,
        active: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSharePointSiteUsageFileCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.site_type = site_type
        self.total = total
        self.active = active
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSharePointSiteUsagePages(MicrosoftGraphEntity):
    """sharePointSiteUsagePages.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param site_type:
    :type site_type: str
    :param page_view_count:
    :type page_view_count: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'site_type': {'key': 'siteType', 'type': 'str'},
        'page_view_count': {'key': 'pageViewCount', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        site_type: Optional[str] = None,
        page_view_count: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSharePointSiteUsagePages, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.site_type = site_type
        self.page_view_count = page_view_count
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSharePointSiteUsageSiteCounts(MicrosoftGraphEntity):
    """sharePointSiteUsageSiteCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param site_type:
    :type site_type: str
    :param total:
    :type total: long
    :param active:
    :type active: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'site_type': {'key': 'siteType', 'type': 'str'},
        'total': {'key': 'total', 'type': 'long'},
        'active': {'key': 'active', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        site_type: Optional[str] = None,
        total: Optional[int] = None,
        active: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSharePointSiteUsageSiteCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.site_type = site_type
        self.total = total
        self.active = active
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSiteActivitySummary(MicrosoftGraphEntity):
    """siteActivitySummary.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param viewed_or_edited:
    :type viewed_or_edited: long
    :param synced:
    :type synced: long
    :param shared_internally:
    :type shared_internally: long
    :param shared_externally:
    :type shared_externally: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'viewed_or_edited': {'key': 'viewedOrEdited', 'type': 'long'},
        'synced': {'key': 'synced', 'type': 'long'},
        'shared_internally': {'key': 'sharedInternally', 'type': 'long'},
        'shared_externally': {'key': 'sharedExternally', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        viewed_or_edited: Optional[int] = None,
        synced: Optional[int] = None,
        shared_internally: Optional[int] = None,
        shared_externally: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSiteActivitySummary, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.viewed_or_edited = viewed_or_edited
        self.synced = synced
        self.shared_internally = shared_internally
        self.shared_externally = shared_externally
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSiteUsageStorage(MicrosoftGraphEntity):
    """siteUsageStorage.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param site_type:
    :type site_type: str
    :param storage_used_in_bytes:
    :type storage_used_in_bytes: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'site_type': {'key': 'siteType', 'type': 'str'},
        'storage_used_in_bytes': {'key': 'storageUsedInBytes', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        site_type: Optional[str] = None,
        storage_used_in_bytes: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSiteUsageStorage, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.site_type = site_type
        self.storage_used_in_bytes = storage_used_in_bytes
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessActivityCounts(MicrosoftGraphEntity):
    """skypeForBusinessActivityCounts.

    :param id: Read-only.
    :type id: str
    :param peer_to_peer:
    :type peer_to_peer: long
    :param organized:
    :type organized: long
    :param participated:
    :type participated: long
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'peer_to_peer': {'key': 'peerToPeer', 'type': 'long'},
        'organized': {'key': 'organized', 'type': 'long'},
        'participated': {'key': 'participated', 'type': 'long'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        peer_to_peer: Optional[int] = None,
        organized: Optional[int] = None,
        participated: Optional[int] = None,
        report_refresh_date: Optional[datetime.date] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessActivityCounts, self).__init__(id=id, **kwargs)
        self.peer_to_peer = peer_to_peer
        self.organized = organized
        self.participated = participated
        self.report_refresh_date = report_refresh_date
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessActivityUserCounts(MicrosoftGraphEntity):
    """skypeForBusinessActivityUserCounts.

    :param id: Read-only.
    :type id: str
    :param peer_to_peer:
    :type peer_to_peer: long
    :param organized:
    :type organized: long
    :param participated:
    :type participated: long
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'peer_to_peer': {'key': 'peerToPeer', 'type': 'long'},
        'organized': {'key': 'organized', 'type': 'long'},
        'participated': {'key': 'participated', 'type': 'long'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        peer_to_peer: Optional[int] = None,
        organized: Optional[int] = None,
        participated: Optional[int] = None,
        report_refresh_date: Optional[datetime.date] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessActivityUserCounts, self).__init__(id=id, **kwargs)
        self.peer_to_peer = peer_to_peer
        self.organized = organized
        self.participated = participated
        self.report_refresh_date = report_refresh_date
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessActivityUserDetail(MicrosoftGraphEntity):
    """skypeForBusinessActivityUserDetail.

    :param id: Read-only.
    :type id: str
    :param total_peer_to_peer_session_count:
    :type total_peer_to_peer_session_count: long
    :param total_organized_conference_count:
    :type total_organized_conference_count: long
    :param total_participated_conference_count:
    :type total_participated_conference_count: long
    :param peer_to_peer_last_activity_date:
    :type peer_to_peer_last_activity_date: ~datetime.date
    :param organized_conference_last_activity_date:
    :type organized_conference_last_activity_date: ~datetime.date
    :param participated_conference_last_activity_date:
    :type participated_conference_last_activity_date: ~datetime.date
    :param peer_to_peer_im_count:
    :type peer_to_peer_im_count: long
    :param peer_to_peer_audio_count:
    :type peer_to_peer_audio_count: long
    :param peer_to_peer_audio_minutes:
    :type peer_to_peer_audio_minutes: long
    :param peer_to_peer_video_count:
    :type peer_to_peer_video_count: long
    :param peer_to_peer_video_minutes:
    :type peer_to_peer_video_minutes: long
    :param peer_to_peer_app_sharing_count:
    :type peer_to_peer_app_sharing_count: long
    :param peer_to_peer_file_transfer_count:
    :type peer_to_peer_file_transfer_count: long
    :param organized_conference_im_count:
    :type organized_conference_im_count: long
    :param organized_conference_audio_video_count:
    :type organized_conference_audio_video_count: long
    :param organized_conference_audio_video_minutes:
    :type organized_conference_audio_video_minutes: long
    :param organized_conference_app_sharing_count:
    :type organized_conference_app_sharing_count: long
    :param organized_conference_web_count:
    :type organized_conference_web_count: long
    :param organized_conference_dial_in_out3_rd_party_count:
    :type organized_conference_dial_in_out3_rd_party_count: long
    :param organized_conference_cloud_dial_in_out_microsoft_count:
    :type organized_conference_cloud_dial_in_out_microsoft_count: long
    :param organized_conference_cloud_dial_in_microsoft_minutes:
    :type organized_conference_cloud_dial_in_microsoft_minutes: long
    :param organized_conference_cloud_dial_out_microsoft_minutes:
    :type organized_conference_cloud_dial_out_microsoft_minutes: long
    :param participated_conference_im_count:
    :type participated_conference_im_count: long
    :param participated_conference_audio_video_count:
    :type participated_conference_audio_video_count: long
    :param participated_conference_audio_video_minutes:
    :type participated_conference_audio_video_minutes: long
    :param participated_conference_app_sharing_count:
    :type participated_conference_app_sharing_count: long
    :param participated_conference_web_count:
    :type participated_conference_web_count: long
    :param participated_conference_dial_in_out3_rd_party_count:
    :type participated_conference_dial_in_out3_rd_party_count: long
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    :param is_deleted:
    :type is_deleted: bool
    :param deleted_date:
    :type deleted_date: ~datetime.date
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param assigned_products:
    :type assigned_products: list[str]
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'total_peer_to_peer_session_count': {'key': 'totalPeerToPeerSessionCount', 'type': 'long'},
        'total_organized_conference_count': {'key': 'totalOrganizedConferenceCount', 'type': 'long'},
        'total_participated_conference_count': {'key': 'totalParticipatedConferenceCount', 'type': 'long'},
        'peer_to_peer_last_activity_date': {'key': 'peerToPeerLastActivityDate', 'type': 'date'},
        'organized_conference_last_activity_date': {'key': 'organizedConferenceLastActivityDate', 'type': 'date'},
        'participated_conference_last_activity_date': {'key': 'participatedConferenceLastActivityDate', 'type': 'date'},
        'peer_to_peer_im_count': {'key': 'peerToPeerIMCount', 'type': 'long'},
        'peer_to_peer_audio_count': {'key': 'peerToPeerAudioCount', 'type': 'long'},
        'peer_to_peer_audio_minutes': {'key': 'peerToPeerAudioMinutes', 'type': 'long'},
        'peer_to_peer_video_count': {'key': 'peerToPeerVideoCount', 'type': 'long'},
        'peer_to_peer_video_minutes': {'key': 'peerToPeerVideoMinutes', 'type': 'long'},
        'peer_to_peer_app_sharing_count': {'key': 'peerToPeerAppSharingCount', 'type': 'long'},
        'peer_to_peer_file_transfer_count': {'key': 'peerToPeerFileTransferCount', 'type': 'long'},
        'organized_conference_im_count': {'key': 'organizedConferenceIMCount', 'type': 'long'},
        'organized_conference_audio_video_count': {'key': 'organizedConferenceAudioVideoCount', 'type': 'long'},
        'organized_conference_audio_video_minutes': {'key': 'organizedConferenceAudioVideoMinutes', 'type': 'long'},
        'organized_conference_app_sharing_count': {'key': 'organizedConferenceAppSharingCount', 'type': 'long'},
        'organized_conference_web_count': {'key': 'organizedConferenceWebCount', 'type': 'long'},
        'organized_conference_dial_in_out3_rd_party_count': {'key': 'organizedConferenceDialInOut3rdPartyCount', 'type': 'long'},
        'organized_conference_cloud_dial_in_out_microsoft_count': {'key': 'organizedConferenceCloudDialInOutMicrosoftCount', 'type': 'long'},
        'organized_conference_cloud_dial_in_microsoft_minutes': {'key': 'organizedConferenceCloudDialInMicrosoftMinutes', 'type': 'long'},
        'organized_conference_cloud_dial_out_microsoft_minutes': {'key': 'organizedConferenceCloudDialOutMicrosoftMinutes', 'type': 'long'},
        'participated_conference_im_count': {'key': 'participatedConferenceIMCount', 'type': 'long'},
        'participated_conference_audio_video_count': {'key': 'participatedConferenceAudioVideoCount', 'type': 'long'},
        'participated_conference_audio_video_minutes': {'key': 'participatedConferenceAudioVideoMinutes', 'type': 'long'},
        'participated_conference_app_sharing_count': {'key': 'participatedConferenceAppSharingCount', 'type': 'long'},
        'participated_conference_web_count': {'key': 'participatedConferenceWebCount', 'type': 'long'},
        'participated_conference_dial_in_out3_rd_party_count': {'key': 'participatedConferenceDialInOut3rdPartyCount', 'type': 'long'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'deleted_date': {'key': 'deletedDate', 'type': 'date'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'assigned_products': {'key': 'assignedProducts', 'type': '[str]'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        total_peer_to_peer_session_count: Optional[int] = None,
        total_organized_conference_count: Optional[int] = None,
        total_participated_conference_count: Optional[int] = None,
        peer_to_peer_last_activity_date: Optional[datetime.date] = None,
        organized_conference_last_activity_date: Optional[datetime.date] = None,
        participated_conference_last_activity_date: Optional[datetime.date] = None,
        peer_to_peer_im_count: Optional[int] = None,
        peer_to_peer_audio_count: Optional[int] = None,
        peer_to_peer_audio_minutes: Optional[int] = None,
        peer_to_peer_video_count: Optional[int] = None,
        peer_to_peer_video_minutes: Optional[int] = None,
        peer_to_peer_app_sharing_count: Optional[int] = None,
        peer_to_peer_file_transfer_count: Optional[int] = None,
        organized_conference_im_count: Optional[int] = None,
        organized_conference_audio_video_count: Optional[int] = None,
        organized_conference_audio_video_minutes: Optional[int] = None,
        organized_conference_app_sharing_count: Optional[int] = None,
        organized_conference_web_count: Optional[int] = None,
        organized_conference_dial_in_out3_rd_party_count: Optional[int] = None,
        organized_conference_cloud_dial_in_out_microsoft_count: Optional[int] = None,
        organized_conference_cloud_dial_in_microsoft_minutes: Optional[int] = None,
        organized_conference_cloud_dial_out_microsoft_minutes: Optional[int] = None,
        participated_conference_im_count: Optional[int] = None,
        participated_conference_audio_video_count: Optional[int] = None,
        participated_conference_audio_video_minutes: Optional[int] = None,
        participated_conference_app_sharing_count: Optional[int] = None,
        participated_conference_web_count: Optional[int] = None,
        participated_conference_dial_in_out3_rd_party_count: Optional[int] = None,
        report_refresh_date: Optional[datetime.date] = None,
        user_principal_name: Optional[str] = None,
        is_deleted: Optional[bool] = None,
        deleted_date: Optional[datetime.date] = None,
        last_activity_date: Optional[datetime.date] = None,
        assigned_products: Optional[List[str]] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessActivityUserDetail, self).__init__(id=id, **kwargs)
        self.total_peer_to_peer_session_count = total_peer_to_peer_session_count
        self.total_organized_conference_count = total_organized_conference_count
        self.total_participated_conference_count = total_participated_conference_count
        self.peer_to_peer_last_activity_date = peer_to_peer_last_activity_date
        self.organized_conference_last_activity_date = organized_conference_last_activity_date
        self.participated_conference_last_activity_date = participated_conference_last_activity_date
        self.peer_to_peer_im_count = peer_to_peer_im_count
        self.peer_to_peer_audio_count = peer_to_peer_audio_count
        self.peer_to_peer_audio_minutes = peer_to_peer_audio_minutes
        self.peer_to_peer_video_count = peer_to_peer_video_count
        self.peer_to_peer_video_minutes = peer_to_peer_video_minutes
        self.peer_to_peer_app_sharing_count = peer_to_peer_app_sharing_count
        self.peer_to_peer_file_transfer_count = peer_to_peer_file_transfer_count
        self.organized_conference_im_count = organized_conference_im_count
        self.organized_conference_audio_video_count = organized_conference_audio_video_count
        self.organized_conference_audio_video_minutes = organized_conference_audio_video_minutes
        self.organized_conference_app_sharing_count = organized_conference_app_sharing_count
        self.organized_conference_web_count = organized_conference_web_count
        self.organized_conference_dial_in_out3_rd_party_count = organized_conference_dial_in_out3_rd_party_count
        self.organized_conference_cloud_dial_in_out_microsoft_count = organized_conference_cloud_dial_in_out_microsoft_count
        self.organized_conference_cloud_dial_in_microsoft_minutes = organized_conference_cloud_dial_in_microsoft_minutes
        self.organized_conference_cloud_dial_out_microsoft_minutes = organized_conference_cloud_dial_out_microsoft_minutes
        self.participated_conference_im_count = participated_conference_im_count
        self.participated_conference_audio_video_count = participated_conference_audio_video_count
        self.participated_conference_audio_video_minutes = participated_conference_audio_video_minutes
        self.participated_conference_app_sharing_count = participated_conference_app_sharing_count
        self.participated_conference_web_count = participated_conference_web_count
        self.participated_conference_dial_in_out3_rd_party_count = participated_conference_dial_in_out3_rd_party_count
        self.report_refresh_date = report_refresh_date
        self.user_principal_name = user_principal_name
        self.is_deleted = is_deleted
        self.deleted_date = deleted_date
        self.last_activity_date = last_activity_date
        self.assigned_products = assigned_products
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessDeviceUsageDistributionUserCounts(MicrosoftGraphEntity):
    """skypeForBusinessDeviceUsageDistributionUserCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param windows:
    :type windows: int
    :param windows_phone:
    :type windows_phone: int
    :param android_phone:
    :type android_phone: int
    :param i_phone:
    :type i_phone: int
    :param i_pad:
    :type i_pad: int
    :param report_period:
    :type report_period: str
    """

    _validation = {
        'windows': {'maximum': 2147483647, 'minimum': -2147483648},
        'windows_phone': {'maximum': 2147483647, 'minimum': -2147483648},
        'android_phone': {'maximum': 2147483647, 'minimum': -2147483648},
        'i_phone': {'maximum': 2147483647, 'minimum': -2147483648},
        'i_pad': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'windows': {'key': 'windows', 'type': 'int'},
        'windows_phone': {'key': 'windowsPhone', 'type': 'int'},
        'android_phone': {'key': 'androidPhone', 'type': 'int'},
        'i_phone': {'key': 'iPhone', 'type': 'int'},
        'i_pad': {'key': 'iPad', 'type': 'int'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        windows: Optional[int] = None,
        windows_phone: Optional[int] = None,
        android_phone: Optional[int] = None,
        i_phone: Optional[int] = None,
        i_pad: Optional[int] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessDeviceUsageDistributionUserCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.windows = windows
        self.windows_phone = windows_phone
        self.android_phone = android_phone
        self.i_phone = i_phone
        self.i_pad = i_pad
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessDeviceUsageUserCounts(MicrosoftGraphEntity):
    """skypeForBusinessDeviceUsageUserCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param windows:
    :type windows: int
    :param windows_phone:
    :type windows_phone: int
    :param android_phone:
    :type android_phone: int
    :param i_phone:
    :type i_phone: int
    :param i_pad:
    :type i_pad: int
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _validation = {
        'windows': {'maximum': 2147483647, 'minimum': -2147483648},
        'windows_phone': {'maximum': 2147483647, 'minimum': -2147483648},
        'android_phone': {'maximum': 2147483647, 'minimum': -2147483648},
        'i_phone': {'maximum': 2147483647, 'minimum': -2147483648},
        'i_pad': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'windows': {'key': 'windows', 'type': 'int'},
        'windows_phone': {'key': 'windowsPhone', 'type': 'int'},
        'android_phone': {'key': 'androidPhone', 'type': 'int'},
        'i_phone': {'key': 'iPhone', 'type': 'int'},
        'i_pad': {'key': 'iPad', 'type': 'int'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        windows: Optional[int] = None,
        windows_phone: Optional[int] = None,
        android_phone: Optional[int] = None,
        i_phone: Optional[int] = None,
        i_pad: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessDeviceUsageUserCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.windows = windows
        self.windows_phone = windows_phone
        self.android_phone = android_phone
        self.i_phone = i_phone
        self.i_pad = i_pad
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessDeviceUsageUserDetail(MicrosoftGraphEntity):
    """skypeForBusinessDeviceUsageUserDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param used_windows:
    :type used_windows: bool
    :param used_windows_phone:
    :type used_windows_phone: bool
    :param used_android_phone:
    :type used_android_phone: bool
    :param usedi_phone:
    :type usedi_phone: bool
    :param usedi_pad:
    :type usedi_pad: bool
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'used_windows': {'key': 'usedWindows', 'type': 'bool'},
        'used_windows_phone': {'key': 'usedWindowsPhone', 'type': 'bool'},
        'used_android_phone': {'key': 'usedAndroidPhone', 'type': 'bool'},
        'usedi_phone': {'key': 'usediPhone', 'type': 'bool'},
        'usedi_pad': {'key': 'usediPad', 'type': 'bool'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        user_principal_name: Optional[str] = None,
        last_activity_date: Optional[datetime.date] = None,
        used_windows: Optional[bool] = None,
        used_windows_phone: Optional[bool] = None,
        used_android_phone: Optional[bool] = None,
        usedi_phone: Optional[bool] = None,
        usedi_pad: Optional[bool] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessDeviceUsageUserDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.user_principal_name = user_principal_name
        self.last_activity_date = last_activity_date
        self.used_windows = used_windows
        self.used_windows_phone = used_windows_phone
        self.used_android_phone = used_android_phone
        self.usedi_phone = usedi_phone
        self.usedi_pad = usedi_pad
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessOrganizerActivityCounts(MicrosoftGraphEntity):
    """skypeForBusinessOrganizerActivityCounts.

    :param id: Read-only.
    :type id: str
    :param im:
    :type im: long
    :param audio_video:
    :type audio_video: long
    :param app_sharing:
    :type app_sharing: long
    :param web:
    :type web: long
    :param dial_in_out3_rd_party:
    :type dial_in_out3_rd_party: long
    :param dial_in_out_microsoft:
    :type dial_in_out_microsoft: long
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'im': {'key': 'im', 'type': 'long'},
        'audio_video': {'key': 'audioVideo', 'type': 'long'},
        'app_sharing': {'key': 'appSharing', 'type': 'long'},
        'web': {'key': 'web', 'type': 'long'},
        'dial_in_out3_rd_party': {'key': 'dialInOut3rdParty', 'type': 'long'},
        'dial_in_out_microsoft': {'key': 'dialInOutMicrosoft', 'type': 'long'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        im: Optional[int] = None,
        audio_video: Optional[int] = None,
        app_sharing: Optional[int] = None,
        web: Optional[int] = None,
        dial_in_out3_rd_party: Optional[int] = None,
        dial_in_out_microsoft: Optional[int] = None,
        report_refresh_date: Optional[datetime.date] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessOrganizerActivityCounts, self).__init__(id=id, **kwargs)
        self.im = im
        self.audio_video = audio_video
        self.app_sharing = app_sharing
        self.web = web
        self.dial_in_out3_rd_party = dial_in_out3_rd_party
        self.dial_in_out_microsoft = dial_in_out_microsoft
        self.report_refresh_date = report_refresh_date
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessOrganizerActivityMinuteCounts(MicrosoftGraphEntity):
    """skypeForBusinessOrganizerActivityMinuteCounts.

    :param id: Read-only.
    :type id: str
    :param audio_video:
    :type audio_video: long
    :param dial_in_microsoft:
    :type dial_in_microsoft: long
    :param dial_out_microsoft:
    :type dial_out_microsoft: long
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'audio_video': {'key': 'audioVideo', 'type': 'long'},
        'dial_in_microsoft': {'key': 'dialInMicrosoft', 'type': 'long'},
        'dial_out_microsoft': {'key': 'dialOutMicrosoft', 'type': 'long'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        audio_video: Optional[int] = None,
        dial_in_microsoft: Optional[int] = None,
        dial_out_microsoft: Optional[int] = None,
        report_refresh_date: Optional[datetime.date] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessOrganizerActivityMinuteCounts, self).__init__(id=id, **kwargs)
        self.audio_video = audio_video
        self.dial_in_microsoft = dial_in_microsoft
        self.dial_out_microsoft = dial_out_microsoft
        self.report_refresh_date = report_refresh_date
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessOrganizerActivityUserCounts(MicrosoftGraphEntity):
    """skypeForBusinessOrganizerActivityUserCounts.

    :param id: Read-only.
    :type id: str
    :param im:
    :type im: long
    :param audio_video:
    :type audio_video: long
    :param app_sharing:
    :type app_sharing: long
    :param web:
    :type web: long
    :param dial_in_out3_rd_party:
    :type dial_in_out3_rd_party: long
    :param dial_in_out_microsoft:
    :type dial_in_out_microsoft: long
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'im': {'key': 'im', 'type': 'long'},
        'audio_video': {'key': 'audioVideo', 'type': 'long'},
        'app_sharing': {'key': 'appSharing', 'type': 'long'},
        'web': {'key': 'web', 'type': 'long'},
        'dial_in_out3_rd_party': {'key': 'dialInOut3rdParty', 'type': 'long'},
        'dial_in_out_microsoft': {'key': 'dialInOutMicrosoft', 'type': 'long'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        im: Optional[int] = None,
        audio_video: Optional[int] = None,
        app_sharing: Optional[int] = None,
        web: Optional[int] = None,
        dial_in_out3_rd_party: Optional[int] = None,
        dial_in_out_microsoft: Optional[int] = None,
        report_refresh_date: Optional[datetime.date] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessOrganizerActivityUserCounts, self).__init__(id=id, **kwargs)
        self.im = im
        self.audio_video = audio_video
        self.app_sharing = app_sharing
        self.web = web
        self.dial_in_out3_rd_party = dial_in_out3_rd_party
        self.dial_in_out_microsoft = dial_in_out_microsoft
        self.report_refresh_date = report_refresh_date
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessParticipantActivityCounts(MicrosoftGraphEntity):
    """skypeForBusinessParticipantActivityCounts.

    :param id: Read-only.
    :type id: str
    :param im:
    :type im: long
    :param audio_video:
    :type audio_video: long
    :param app_sharing:
    :type app_sharing: long
    :param web:
    :type web: long
    :param dial_in_out3_rd_party:
    :type dial_in_out3_rd_party: long
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'im': {'key': 'im', 'type': 'long'},
        'audio_video': {'key': 'audioVideo', 'type': 'long'},
        'app_sharing': {'key': 'appSharing', 'type': 'long'},
        'web': {'key': 'web', 'type': 'long'},
        'dial_in_out3_rd_party': {'key': 'dialInOut3rdParty', 'type': 'long'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        im: Optional[int] = None,
        audio_video: Optional[int] = None,
        app_sharing: Optional[int] = None,
        web: Optional[int] = None,
        dial_in_out3_rd_party: Optional[int] = None,
        report_refresh_date: Optional[datetime.date] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessParticipantActivityCounts, self).__init__(id=id, **kwargs)
        self.im = im
        self.audio_video = audio_video
        self.app_sharing = app_sharing
        self.web = web
        self.dial_in_out3_rd_party = dial_in_out3_rd_party
        self.report_refresh_date = report_refresh_date
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessParticipantActivityMinuteCounts(MicrosoftGraphEntity):
    """skypeForBusinessParticipantActivityMinuteCounts.

    :param id: Read-only.
    :type id: str
    :param audiovideo:
    :type audiovideo: long
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'audiovideo': {'key': 'audiovideo', 'type': 'long'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        audiovideo: Optional[int] = None,
        report_refresh_date: Optional[datetime.date] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessParticipantActivityMinuteCounts, self).__init__(id=id, **kwargs)
        self.audiovideo = audiovideo
        self.report_refresh_date = report_refresh_date
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessParticipantActivityUserCounts(MicrosoftGraphEntity):
    """skypeForBusinessParticipantActivityUserCounts.

    :param id: Read-only.
    :type id: str
    :param im:
    :type im: long
    :param audio_video:
    :type audio_video: long
    :param app_sharing:
    :type app_sharing: long
    :param web:
    :type web: long
    :param dial_in_out3_rd_party:
    :type dial_in_out3_rd_party: long
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'im': {'key': 'im', 'type': 'long'},
        'audio_video': {'key': 'audioVideo', 'type': 'long'},
        'app_sharing': {'key': 'appSharing', 'type': 'long'},
        'web': {'key': 'web', 'type': 'long'},
        'dial_in_out3_rd_party': {'key': 'dialInOut3rdParty', 'type': 'long'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        im: Optional[int] = None,
        audio_video: Optional[int] = None,
        app_sharing: Optional[int] = None,
        web: Optional[int] = None,
        dial_in_out3_rd_party: Optional[int] = None,
        report_refresh_date: Optional[datetime.date] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessParticipantActivityUserCounts, self).__init__(id=id, **kwargs)
        self.im = im
        self.audio_video = audio_video
        self.app_sharing = app_sharing
        self.web = web
        self.dial_in_out3_rd_party = dial_in_out3_rd_party
        self.report_refresh_date = report_refresh_date
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessPeerToPeerActivityCounts(MicrosoftGraphEntity):
    """skypeForBusinessPeerToPeerActivityCounts.

    :param id: Read-only.
    :type id: str
    :param im:
    :type im: long
    :param audio:
    :type audio: long
    :param video:
    :type video: long
    :param app_sharing:
    :type app_sharing: long
    :param file_transfer:
    :type file_transfer: long
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'im': {'key': 'im', 'type': 'long'},
        'audio': {'key': 'audio', 'type': 'long'},
        'video': {'key': 'video', 'type': 'long'},
        'app_sharing': {'key': 'appSharing', 'type': 'long'},
        'file_transfer': {'key': 'fileTransfer', 'type': 'long'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        im: Optional[int] = None,
        audio: Optional[int] = None,
        video: Optional[int] = None,
        app_sharing: Optional[int] = None,
        file_transfer: Optional[int] = None,
        report_refresh_date: Optional[datetime.date] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessPeerToPeerActivityCounts, self).__init__(id=id, **kwargs)
        self.im = im
        self.audio = audio
        self.video = video
        self.app_sharing = app_sharing
        self.file_transfer = file_transfer
        self.report_refresh_date = report_refresh_date
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessPeerToPeerActivityMinuteCounts(MicrosoftGraphEntity):
    """skypeForBusinessPeerToPeerActivityMinuteCounts.

    :param id: Read-only.
    :type id: str
    :param audio:
    :type audio: long
    :param video:
    :type video: long
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'audio': {'key': 'audio', 'type': 'long'},
        'video': {'key': 'video', 'type': 'long'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        audio: Optional[int] = None,
        video: Optional[int] = None,
        report_refresh_date: Optional[datetime.date] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessPeerToPeerActivityMinuteCounts, self).__init__(id=id, **kwargs)
        self.audio = audio
        self.video = video
        self.report_refresh_date = report_refresh_date
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphSkypeForBusinessPeerToPeerActivityUserCounts(MicrosoftGraphEntity):
    """skypeForBusinessPeerToPeerActivityUserCounts.

    :param id: Read-only.
    :type id: str
    :param im:
    :type im: long
    :param audio:
    :type audio: long
    :param video:
    :type video: long
    :param app_sharing:
    :type app_sharing: long
    :param file_transfer:
    :type file_transfer: long
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'im': {'key': 'im', 'type': 'long'},
        'audio': {'key': 'audio', 'type': 'long'},
        'video': {'key': 'video', 'type': 'long'},
        'app_sharing': {'key': 'appSharing', 'type': 'long'},
        'file_transfer': {'key': 'fileTransfer', 'type': 'long'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        im: Optional[int] = None,
        audio: Optional[int] = None,
        video: Optional[int] = None,
        app_sharing: Optional[int] = None,
        file_transfer: Optional[int] = None,
        report_refresh_date: Optional[datetime.date] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSkypeForBusinessPeerToPeerActivityUserCounts, self).__init__(id=id, **kwargs)
        self.im = im
        self.audio = audio
        self.video = video
        self.app_sharing = app_sharing
        self.file_transfer = file_transfer
        self.report_refresh_date = report_refresh_date
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphTeamsDeviceUsageDistributionUserCounts(MicrosoftGraphEntity):
    """teamsDeviceUsageDistributionUserCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param web:
    :type web: long
    :param windows_phone:
    :type windows_phone: long
    :param android_phone:
    :type android_phone: long
    :param ios:
    :type ios: long
    :param mac:
    :type mac: long
    :param windows:
    :type windows: long
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'web': {'key': 'web', 'type': 'long'},
        'windows_phone': {'key': 'windowsPhone', 'type': 'long'},
        'android_phone': {'key': 'androidPhone', 'type': 'long'},
        'ios': {'key': 'ios', 'type': 'long'},
        'mac': {'key': 'mac', 'type': 'long'},
        'windows': {'key': 'windows', 'type': 'long'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        web: Optional[int] = None,
        windows_phone: Optional[int] = None,
        android_phone: Optional[int] = None,
        ios: Optional[int] = None,
        mac: Optional[int] = None,
        windows: Optional[int] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamsDeviceUsageDistributionUserCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.web = web
        self.windows_phone = windows_phone
        self.android_phone = android_phone
        self.ios = ios
        self.mac = mac
        self.windows = windows
        self.report_period = report_period


class MicrosoftGraphTeamsDeviceUsageUserCounts(MicrosoftGraphEntity):
    """teamsDeviceUsageUserCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param web:
    :type web: long
    :param windows_phone:
    :type windows_phone: long
    :param android_phone:
    :type android_phone: long
    :param ios:
    :type ios: long
    :param mac:
    :type mac: long
    :param windows:
    :type windows: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'web': {'key': 'web', 'type': 'long'},
        'windows_phone': {'key': 'windowsPhone', 'type': 'long'},
        'android_phone': {'key': 'androidPhone', 'type': 'long'},
        'ios': {'key': 'ios', 'type': 'long'},
        'mac': {'key': 'mac', 'type': 'long'},
        'windows': {'key': 'windows', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        web: Optional[int] = None,
        windows_phone: Optional[int] = None,
        android_phone: Optional[int] = None,
        ios: Optional[int] = None,
        mac: Optional[int] = None,
        windows: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamsDeviceUsageUserCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.web = web
        self.windows_phone = windows_phone
        self.android_phone = android_phone
        self.ios = ios
        self.mac = mac
        self.windows = windows
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphTeamsDeviceUsageUserDetail(MicrosoftGraphEntity):
    """teamsDeviceUsageUserDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param is_deleted:
    :type is_deleted: bool
    :param deleted_date:
    :type deleted_date: ~datetime.date
    :param used_web:
    :type used_web: bool
    :param used_windows_phone:
    :type used_windows_phone: bool
    :param usedi_os:
    :type usedi_os: bool
    :param used_mac:
    :type used_mac: bool
    :param used_android_phone:
    :type used_android_phone: bool
    :param used_windows:
    :type used_windows: bool
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'deleted_date': {'key': 'deletedDate', 'type': 'date'},
        'used_web': {'key': 'usedWeb', 'type': 'bool'},
        'used_windows_phone': {'key': 'usedWindowsPhone', 'type': 'bool'},
        'usedi_os': {'key': 'usediOS', 'type': 'bool'},
        'used_mac': {'key': 'usedMac', 'type': 'bool'},
        'used_android_phone': {'key': 'usedAndroidPhone', 'type': 'bool'},
        'used_windows': {'key': 'usedWindows', 'type': 'bool'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        user_principal_name: Optional[str] = None,
        last_activity_date: Optional[datetime.date] = None,
        is_deleted: Optional[bool] = None,
        deleted_date: Optional[datetime.date] = None,
        used_web: Optional[bool] = None,
        used_windows_phone: Optional[bool] = None,
        usedi_os: Optional[bool] = None,
        used_mac: Optional[bool] = None,
        used_android_phone: Optional[bool] = None,
        used_windows: Optional[bool] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamsDeviceUsageUserDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.user_principal_name = user_principal_name
        self.last_activity_date = last_activity_date
        self.is_deleted = is_deleted
        self.deleted_date = deleted_date
        self.used_web = used_web
        self.used_windows_phone = used_windows_phone
        self.usedi_os = usedi_os
        self.used_mac = used_mac
        self.used_android_phone = used_android_phone
        self.used_windows = used_windows
        self.report_period = report_period


class MicrosoftGraphTeamsUserActivityCounts(MicrosoftGraphEntity):
    """teamsUserActivityCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param report_date:
    :type report_date: ~datetime.date
    :param team_chat_messages:
    :type team_chat_messages: long
    :param private_chat_messages:
    :type private_chat_messages: long
    :param calls:
    :type calls: long
    :param meetings:
    :type meetings: long
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'team_chat_messages': {'key': 'teamChatMessages', 'type': 'long'},
        'private_chat_messages': {'key': 'privateChatMessages', 'type': 'long'},
        'calls': {'key': 'calls', 'type': 'long'},
        'meetings': {'key': 'meetings', 'type': 'long'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        report_date: Optional[datetime.date] = None,
        team_chat_messages: Optional[int] = None,
        private_chat_messages: Optional[int] = None,
        calls: Optional[int] = None,
        meetings: Optional[int] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamsUserActivityCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.report_date = report_date
        self.team_chat_messages = team_chat_messages
        self.private_chat_messages = private_chat_messages
        self.calls = calls
        self.meetings = meetings
        self.report_period = report_period


class MicrosoftGraphTeamsUserActivityUserCounts(MicrosoftGraphEntity):
    """teamsUserActivityUserCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param report_date:
    :type report_date: ~datetime.date
    :param team_chat_messages:
    :type team_chat_messages: long
    :param private_chat_messages:
    :type private_chat_messages: long
    :param calls:
    :type calls: long
    :param meetings:
    :type meetings: long
    :param other_actions:
    :type other_actions: long
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'team_chat_messages': {'key': 'teamChatMessages', 'type': 'long'},
        'private_chat_messages': {'key': 'privateChatMessages', 'type': 'long'},
        'calls': {'key': 'calls', 'type': 'long'},
        'meetings': {'key': 'meetings', 'type': 'long'},
        'other_actions': {'key': 'otherActions', 'type': 'long'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        report_date: Optional[datetime.date] = None,
        team_chat_messages: Optional[int] = None,
        private_chat_messages: Optional[int] = None,
        calls: Optional[int] = None,
        meetings: Optional[int] = None,
        other_actions: Optional[int] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamsUserActivityUserCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.report_date = report_date
        self.team_chat_messages = team_chat_messages
        self.private_chat_messages = private_chat_messages
        self.calls = calls
        self.meetings = meetings
        self.other_actions = other_actions
        self.report_period = report_period


class MicrosoftGraphTeamsUserActivityUserDetail(MicrosoftGraphEntity):
    """teamsUserActivityUserDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param is_deleted:
    :type is_deleted: bool
    :param deleted_date:
    :type deleted_date: ~datetime.date
    :param assigned_products:
    :type assigned_products: list[str]
    :param team_chat_message_count:
    :type team_chat_message_count: long
    :param private_chat_message_count:
    :type private_chat_message_count: long
    :param call_count:
    :type call_count: long
    :param meeting_count:
    :type meeting_count: long
    :param has_other_action:
    :type has_other_action: bool
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'deleted_date': {'key': 'deletedDate', 'type': 'date'},
        'assigned_products': {'key': 'assignedProducts', 'type': '[str]'},
        'team_chat_message_count': {'key': 'teamChatMessageCount', 'type': 'long'},
        'private_chat_message_count': {'key': 'privateChatMessageCount', 'type': 'long'},
        'call_count': {'key': 'callCount', 'type': 'long'},
        'meeting_count': {'key': 'meetingCount', 'type': 'long'},
        'has_other_action': {'key': 'hasOtherAction', 'type': 'bool'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        user_principal_name: Optional[str] = None,
        last_activity_date: Optional[datetime.date] = None,
        is_deleted: Optional[bool] = None,
        deleted_date: Optional[datetime.date] = None,
        assigned_products: Optional[List[str]] = None,
        team_chat_message_count: Optional[int] = None,
        private_chat_message_count: Optional[int] = None,
        call_count: Optional[int] = None,
        meeting_count: Optional[int] = None,
        has_other_action: Optional[bool] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphTeamsUserActivityUserDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.user_principal_name = user_principal_name
        self.last_activity_date = last_activity_date
        self.is_deleted = is_deleted
        self.deleted_date = deleted_date
        self.assigned_products = assigned_products
        self.team_chat_message_count = team_chat_message_count
        self.private_chat_message_count = private_chat_message_count
        self.call_count = call_count
        self.meeting_count = meeting_count
        self.has_other_action = has_other_action
        self.report_period = report_period


class MicrosoftGraphUserActivationCounts(msrest.serialization.Model):
    """userActivationCounts.

    :param product_type:
    :type product_type: str
    :param last_activated_date:
    :type last_activated_date: ~datetime.date
    :param windows:
    :type windows: long
    :param mac:
    :type mac: long
    :param windows10_mobile:
    :type windows10_mobile: long
    :param ios:
    :type ios: long
    :param android:
    :type android: long
    :param activated_on_shared_computer:
    :type activated_on_shared_computer: bool
    """

    _attribute_map = {
        'product_type': {'key': 'productType', 'type': 'str'},
        'last_activated_date': {'key': 'lastActivatedDate', 'type': 'date'},
        'windows': {'key': 'windows', 'type': 'long'},
        'mac': {'key': 'mac', 'type': 'long'},
        'windows10_mobile': {'key': 'windows10Mobile', 'type': 'long'},
        'ios': {'key': 'ios', 'type': 'long'},
        'android': {'key': 'android', 'type': 'long'},
        'activated_on_shared_computer': {'key': 'activatedOnSharedComputer', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        product_type: Optional[str] = None,
        last_activated_date: Optional[datetime.date] = None,
        windows: Optional[int] = None,
        mac: Optional[int] = None,
        windows10_mobile: Optional[int] = None,
        ios: Optional[int] = None,
        android: Optional[int] = None,
        activated_on_shared_computer: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserActivationCounts, self).__init__(**kwargs)
        self.product_type = product_type
        self.last_activated_date = last_activated_date
        self.windows = windows
        self.mac = mac
        self.windows10_mobile = windows10_mobile
        self.ios = ios
        self.android = android
        self.activated_on_shared_computer = activated_on_shared_computer


class MicrosoftGraphUserCredentialUsageDetails(MicrosoftGraphEntity):
    """userCredentialUsageDetails.

    :param id: Read-only.
    :type id: str
    :param feature:  Possible values include: "registration", "reset", "unknownFutureValue".
    :type feature: str or ~reports.models.MicrosoftGraphFeatureType
    :param user_principal_name:
    :type user_principal_name: str
    :param user_display_name:
    :type user_display_name: str
    :param is_success:
    :type is_success: bool
    :param auth_method:  Possible values include: "email", "mobileSMS", "mobileCall",
     "officePhone", "securityQuestion", "appNotification", "appCode", "alternateMobileCall", "fido",
     "appPassword", "unknownFutureValue".
    :type auth_method: str or ~reports.models.MicrosoftGraphUsageAuthMethod
    :param failure_reason:
    :type failure_reason: str
    :param event_date_time:
    :type event_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'feature': {'key': 'feature', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'is_success': {'key': 'isSuccess', 'type': 'bool'},
        'auth_method': {'key': 'authMethod', 'type': 'str'},
        'failure_reason': {'key': 'failureReason', 'type': 'str'},
        'event_date_time': {'key': 'eventDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        feature: Optional[Union[str, "MicrosoftGraphFeatureType"]] = None,
        user_principal_name: Optional[str] = None,
        user_display_name: Optional[str] = None,
        is_success: Optional[bool] = None,
        auth_method: Optional[Union[str, "MicrosoftGraphUsageAuthMethod"]] = None,
        failure_reason: Optional[str] = None,
        event_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserCredentialUsageDetails, self).__init__(id=id, **kwargs)
        self.feature = feature
        self.user_principal_name = user_principal_name
        self.user_display_name = user_display_name
        self.is_success = is_success
        self.auth_method = auth_method
        self.failure_reason = failure_reason
        self.event_date_time = event_date_time


class MicrosoftGraphUserRegistrationCount(msrest.serialization.Model):
    """userRegistrationCount.

    :param registration_status:  Possible values include: "registered", "enabled", "capable",
     "mfaRegistered", "unknownFutureValue".
    :type registration_status: str or ~reports.models.MicrosoftGraphRegistrationStatusType
    :param registration_count:
    :type registration_count: long
    """

    _attribute_map = {
        'registration_status': {'key': 'registrationStatus', 'type': 'str'},
        'registration_count': {'key': 'registrationCount', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        registration_status: Optional[Union[str, "MicrosoftGraphRegistrationStatusType"]] = None,
        registration_count: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserRegistrationCount, self).__init__(**kwargs)
        self.registration_status = registration_status
        self.registration_count = registration_count


class MicrosoftGraphYammerActivitySummary(MicrosoftGraphEntity):
    """yammerActivitySummary.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param liked:
    :type liked: long
    :param posted:
    :type posted: long
    :param read:
    :type read: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'liked': {'key': 'liked', 'type': 'long'},
        'posted': {'key': 'posted', 'type': 'long'},
        'read': {'key': 'read', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        liked: Optional[int] = None,
        posted: Optional[int] = None,
        read: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphYammerActivitySummary, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.liked = liked
        self.posted = posted
        self.read = read
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphYammerActivityUserDetail(MicrosoftGraphEntity):
    """yammerActivityUserDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    :param display_name:
    :type display_name: str
    :param user_state:
    :type user_state: str
    :param state_change_date:
    :type state_change_date: ~datetime.date
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param posted_count:
    :type posted_count: long
    :param read_count:
    :type read_count: long
    :param liked_count:
    :type liked_count: long
    :param assigned_products:
    :type assigned_products: list[str]
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'user_state': {'key': 'userState', 'type': 'str'},
        'state_change_date': {'key': 'stateChangeDate', 'type': 'date'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'posted_count': {'key': 'postedCount', 'type': 'long'},
        'read_count': {'key': 'readCount', 'type': 'long'},
        'liked_count': {'key': 'likedCount', 'type': 'long'},
        'assigned_products': {'key': 'assignedProducts', 'type': '[str]'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        user_principal_name: Optional[str] = None,
        display_name: Optional[str] = None,
        user_state: Optional[str] = None,
        state_change_date: Optional[datetime.date] = None,
        last_activity_date: Optional[datetime.date] = None,
        posted_count: Optional[int] = None,
        read_count: Optional[int] = None,
        liked_count: Optional[int] = None,
        assigned_products: Optional[List[str]] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphYammerActivityUserDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.user_principal_name = user_principal_name
        self.display_name = display_name
        self.user_state = user_state
        self.state_change_date = state_change_date
        self.last_activity_date = last_activity_date
        self.posted_count = posted_count
        self.read_count = read_count
        self.liked_count = liked_count
        self.assigned_products = assigned_products
        self.report_period = report_period


class MicrosoftGraphYammerDeviceUsageDistributionUserCounts(MicrosoftGraphEntity):
    """yammerDeviceUsageDistributionUserCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param web:
    :type web: int
    :param windows_phone:
    :type windows_phone: int
    :param android_phone:
    :type android_phone: int
    :param i_phone:
    :type i_phone: int
    :param i_pad:
    :type i_pad: int
    :param other:
    :type other: int
    :param report_period:
    :type report_period: str
    """

    _validation = {
        'web': {'maximum': 2147483647, 'minimum': -2147483648},
        'windows_phone': {'maximum': 2147483647, 'minimum': -2147483648},
        'android_phone': {'maximum': 2147483647, 'minimum': -2147483648},
        'i_phone': {'maximum': 2147483647, 'minimum': -2147483648},
        'i_pad': {'maximum': 2147483647, 'minimum': -2147483648},
        'other': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'web': {'key': 'web', 'type': 'int'},
        'windows_phone': {'key': 'windowsPhone', 'type': 'int'},
        'android_phone': {'key': 'androidPhone', 'type': 'int'},
        'i_phone': {'key': 'iPhone', 'type': 'int'},
        'i_pad': {'key': 'iPad', 'type': 'int'},
        'other': {'key': 'other', 'type': 'int'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        web: Optional[int] = None,
        windows_phone: Optional[int] = None,
        android_phone: Optional[int] = None,
        i_phone: Optional[int] = None,
        i_pad: Optional[int] = None,
        other: Optional[int] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphYammerDeviceUsageDistributionUserCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.web = web
        self.windows_phone = windows_phone
        self.android_phone = android_phone
        self.i_phone = i_phone
        self.i_pad = i_pad
        self.other = other
        self.report_period = report_period


class MicrosoftGraphYammerDeviceUsageUserCounts(MicrosoftGraphEntity):
    """yammerDeviceUsageUserCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param web:
    :type web: int
    :param windows_phone:
    :type windows_phone: int
    :param android_phone:
    :type android_phone: int
    :param i_phone:
    :type i_phone: int
    :param i_pad:
    :type i_pad: int
    :param other:
    :type other: int
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _validation = {
        'web': {'maximum': 2147483647, 'minimum': -2147483648},
        'windows_phone': {'maximum': 2147483647, 'minimum': -2147483648},
        'android_phone': {'maximum': 2147483647, 'minimum': -2147483648},
        'i_phone': {'maximum': 2147483647, 'minimum': -2147483648},
        'i_pad': {'maximum': 2147483647, 'minimum': -2147483648},
        'other': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'web': {'key': 'web', 'type': 'int'},
        'windows_phone': {'key': 'windowsPhone', 'type': 'int'},
        'android_phone': {'key': 'androidPhone', 'type': 'int'},
        'i_phone': {'key': 'iPhone', 'type': 'int'},
        'i_pad': {'key': 'iPad', 'type': 'int'},
        'other': {'key': 'other', 'type': 'int'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        web: Optional[int] = None,
        windows_phone: Optional[int] = None,
        android_phone: Optional[int] = None,
        i_phone: Optional[int] = None,
        i_pad: Optional[int] = None,
        other: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphYammerDeviceUsageUserCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.web = web
        self.windows_phone = windows_phone
        self.android_phone = android_phone
        self.i_phone = i_phone
        self.i_pad = i_pad
        self.other = other
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphYammerDeviceUsageUserDetail(MicrosoftGraphEntity):
    """yammerDeviceUsageUserDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param user_principal_name:
    :type user_principal_name: str
    :param display_name:
    :type display_name: str
    :param user_state:
    :type user_state: str
    :param state_change_date:
    :type state_change_date: ~datetime.date
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param used_web:
    :type used_web: bool
    :param used_windows_phone:
    :type used_windows_phone: bool
    :param used_android_phone:
    :type used_android_phone: bool
    :param usedi_phone:
    :type usedi_phone: bool
    :param usedi_pad:
    :type usedi_pad: bool
    :param used_others:
    :type used_others: bool
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'user_state': {'key': 'userState', 'type': 'str'},
        'state_change_date': {'key': 'stateChangeDate', 'type': 'date'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'used_web': {'key': 'usedWeb', 'type': 'bool'},
        'used_windows_phone': {'key': 'usedWindowsPhone', 'type': 'bool'},
        'used_android_phone': {'key': 'usedAndroidPhone', 'type': 'bool'},
        'usedi_phone': {'key': 'usediPhone', 'type': 'bool'},
        'usedi_pad': {'key': 'usediPad', 'type': 'bool'},
        'used_others': {'key': 'usedOthers', 'type': 'bool'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        user_principal_name: Optional[str] = None,
        display_name: Optional[str] = None,
        user_state: Optional[str] = None,
        state_change_date: Optional[datetime.date] = None,
        last_activity_date: Optional[datetime.date] = None,
        used_web: Optional[bool] = None,
        used_windows_phone: Optional[bool] = None,
        used_android_phone: Optional[bool] = None,
        usedi_phone: Optional[bool] = None,
        usedi_pad: Optional[bool] = None,
        used_others: Optional[bool] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphYammerDeviceUsageUserDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.user_principal_name = user_principal_name
        self.display_name = display_name
        self.user_state = user_state
        self.state_change_date = state_change_date
        self.last_activity_date = last_activity_date
        self.used_web = used_web
        self.used_windows_phone = used_windows_phone
        self.used_android_phone = used_android_phone
        self.usedi_phone = usedi_phone
        self.usedi_pad = usedi_pad
        self.used_others = used_others
        self.report_period = report_period


class MicrosoftGraphYammerGroupsActivityCounts(MicrosoftGraphEntity):
    """yammerGroupsActivityCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param liked:
    :type liked: long
    :param posted:
    :type posted: long
    :param read:
    :type read: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'liked': {'key': 'liked', 'type': 'long'},
        'posted': {'key': 'posted', 'type': 'long'},
        'read': {'key': 'read', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        liked: Optional[int] = None,
        posted: Optional[int] = None,
        read: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphYammerGroupsActivityCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.liked = liked
        self.posted = posted
        self.read = read
        self.report_date = report_date
        self.report_period = report_period


class MicrosoftGraphYammerGroupsActivityDetail(MicrosoftGraphEntity):
    """yammerGroupsActivityDetail.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param group_display_name:
    :type group_display_name: str
    :param is_deleted:
    :type is_deleted: bool
    :param owner_principal_name:
    :type owner_principal_name: str
    :param last_activity_date:
    :type last_activity_date: ~datetime.date
    :param group_type:
    :type group_type: str
    :param office365_connected:
    :type office365_connected: bool
    :param member_count:
    :type member_count: long
    :param posted_count:
    :type posted_count: long
    :param read_count:
    :type read_count: long
    :param liked_count:
    :type liked_count: long
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'group_display_name': {'key': 'groupDisplayName', 'type': 'str'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'owner_principal_name': {'key': 'ownerPrincipalName', 'type': 'str'},
        'last_activity_date': {'key': 'lastActivityDate', 'type': 'date'},
        'group_type': {'key': 'groupType', 'type': 'str'},
        'office365_connected': {'key': 'office365Connected', 'type': 'bool'},
        'member_count': {'key': 'memberCount', 'type': 'long'},
        'posted_count': {'key': 'postedCount', 'type': 'long'},
        'read_count': {'key': 'readCount', 'type': 'long'},
        'liked_count': {'key': 'likedCount', 'type': 'long'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        group_display_name: Optional[str] = None,
        is_deleted: Optional[bool] = None,
        owner_principal_name: Optional[str] = None,
        last_activity_date: Optional[datetime.date] = None,
        group_type: Optional[str] = None,
        office365_connected: Optional[bool] = None,
        member_count: Optional[int] = None,
        posted_count: Optional[int] = None,
        read_count: Optional[int] = None,
        liked_count: Optional[int] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphYammerGroupsActivityDetail, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.group_display_name = group_display_name
        self.is_deleted = is_deleted
        self.owner_principal_name = owner_principal_name
        self.last_activity_date = last_activity_date
        self.group_type = group_type
        self.office365_connected = office365_connected
        self.member_count = member_count
        self.posted_count = posted_count
        self.read_count = read_count
        self.liked_count = liked_count
        self.report_period = report_period


class MicrosoftGraphYammerGroupsActivityGroupCounts(MicrosoftGraphEntity):
    """yammerGroupsActivityGroupCounts.

    :param id: Read-only.
    :type id: str
    :param report_refresh_date:
    :type report_refresh_date: ~datetime.date
    :param total:
    :type total: long
    :param active:
    :type active: long
    :param report_date:
    :type report_date: ~datetime.date
    :param report_period:
    :type report_period: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'report_refresh_date': {'key': 'reportRefreshDate', 'type': 'date'},
        'total': {'key': 'total', 'type': 'long'},
        'active': {'key': 'active', 'type': 'long'},
        'report_date': {'key': 'reportDate', 'type': 'date'},
        'report_period': {'key': 'reportPeriod', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        report_refresh_date: Optional[datetime.date] = None,
        total: Optional[int] = None,
        active: Optional[int] = None,
        report_date: Optional[datetime.date] = None,
        report_period: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphYammerGroupsActivityGroupCounts, self).__init__(id=id, **kwargs)
        self.report_refresh_date = report_refresh_date
        self.total = total
        self.active = active
        self.report_date = report_date
        self.report_period = report_period


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~reports.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        *,
        error: "OdataErrorMain",
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = error


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~reports.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["OdataErrorDetail"]] = None,
        innererror: Optional[object] = None,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror
