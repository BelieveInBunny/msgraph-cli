# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum10(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_DISPLAY_NAME = "userDisplayName"
    AUTH_METHODS = "authMethods"
    IS_REGISTERED = "isRegistered"
    IS_ENABLED = "isEnabled"
    IS_CAPABLE = "isCapable"
    IS_MFA_REGISTERED = "isMfaRegistered"

class Enum11(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    PRINTER_ID = "printerId"
    PRINTER_ID_DESC = "printerId desc"
    USAGE_DATE = "usageDate"
    USAGE_DATE_DESC = "usageDate desc"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT = "completedBlackAndWhiteJobCount"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT_DESC = "completedBlackAndWhiteJobCount desc"
    COMPLETED_COLOR_JOB_COUNT = "completedColorJobCount"
    COMPLETED_COLOR_JOB_COUNT_DESC = "completedColorJobCount desc"
    INCOMPLETE_JOB_COUNT = "incompleteJobCount"
    INCOMPLETE_JOB_COUNT_DESC = "incompleteJobCount desc"

class Enum12(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    PRINTER_ID = "printerId"
    USAGE_DATE = "usageDate"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT = "completedBlackAndWhiteJobCount"
    COMPLETED_COLOR_JOB_COUNT = "completedColorJobCount"
    INCOMPLETE_JOB_COUNT = "incompleteJobCount"

class Enum13(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    PRINTER_ID = "printerId"
    USAGE_DATE = "usageDate"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT = "completedBlackAndWhiteJobCount"
    COMPLETED_COLOR_JOB_COUNT = "completedColorJobCount"
    INCOMPLETE_JOB_COUNT = "incompleteJobCount"

class Enum14(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_PRINCIPAL_NAME_DESC = "userPrincipalName desc"
    USAGE_DATE = "usageDate"
    USAGE_DATE_DESC = "usageDate desc"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT = "completedBlackAndWhiteJobCount"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT_DESC = "completedBlackAndWhiteJobCount desc"
    COMPLETED_COLOR_JOB_COUNT = "completedColorJobCount"
    COMPLETED_COLOR_JOB_COUNT_DESC = "completedColorJobCount desc"
    INCOMPLETE_JOB_COUNT = "incompleteJobCount"
    INCOMPLETE_JOB_COUNT_DESC = "incompleteJobCount desc"

class Enum15(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USAGE_DATE = "usageDate"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT = "completedBlackAndWhiteJobCount"
    COMPLETED_COLOR_JOB_COUNT = "completedColorJobCount"
    INCOMPLETE_JOB_COUNT = "incompleteJobCount"

class Enum16(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USAGE_DATE = "usageDate"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT = "completedBlackAndWhiteJobCount"
    COMPLETED_COLOR_JOB_COUNT = "completedColorJobCount"
    INCOMPLETE_JOB_COUNT = "incompleteJobCount"

class Enum20(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    PRINTER_ID = "printerId"
    PRINTER_ID_DESC = "printerId desc"
    USAGE_DATE = "usageDate"
    USAGE_DATE_DESC = "usageDate desc"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT = "completedBlackAndWhiteJobCount"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT_DESC = "completedBlackAndWhiteJobCount desc"
    COMPLETED_COLOR_JOB_COUNT = "completedColorJobCount"
    COMPLETED_COLOR_JOB_COUNT_DESC = "completedColorJobCount desc"
    INCOMPLETE_JOB_COUNT = "incompleteJobCount"
    INCOMPLETE_JOB_COUNT_DESC = "incompleteJobCount desc"

class Enum21(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    PRINTER_ID = "printerId"
    USAGE_DATE = "usageDate"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT = "completedBlackAndWhiteJobCount"
    COMPLETED_COLOR_JOB_COUNT = "completedColorJobCount"
    INCOMPLETE_JOB_COUNT = "incompleteJobCount"

class Enum22(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    PRINTER_ID = "printerId"
    USAGE_DATE = "usageDate"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT = "completedBlackAndWhiteJobCount"
    COMPLETED_COLOR_JOB_COUNT = "completedColorJobCount"
    INCOMPLETE_JOB_COUNT = "incompleteJobCount"

class Enum23(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_PRINCIPAL_NAME_DESC = "userPrincipalName desc"
    USAGE_DATE = "usageDate"
    USAGE_DATE_DESC = "usageDate desc"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT = "completedBlackAndWhiteJobCount"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT_DESC = "completedBlackAndWhiteJobCount desc"
    COMPLETED_COLOR_JOB_COUNT = "completedColorJobCount"
    COMPLETED_COLOR_JOB_COUNT_DESC = "completedColorJobCount desc"
    INCOMPLETE_JOB_COUNT = "incompleteJobCount"
    INCOMPLETE_JOB_COUNT_DESC = "incompleteJobCount desc"

class Enum24(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USAGE_DATE = "usageDate"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT = "completedBlackAndWhiteJobCount"
    COMPLETED_COLOR_JOB_COUNT = "completedColorJobCount"
    INCOMPLETE_JOB_COUNT = "incompleteJobCount"

class Enum25(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USAGE_DATE = "usageDate"
    COMPLETED_BLACK_AND_WHITE_JOB_COUNT = "completedBlackAndWhiteJobCount"
    COMPLETED_COLOR_JOB_COUNT = "completedColorJobCount"
    INCOMPLETE_JOB_COUNT = "incompleteJobCount"

class Enum26(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    FEATURE = "feature"
    FEATURE_DESC = "feature desc"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_PRINCIPAL_NAME_DESC = "userPrincipalName desc"
    USER_DISPLAY_NAME = "userDisplayName"
    USER_DISPLAY_NAME_DESC = "userDisplayName desc"
    IS_SUCCESS = "isSuccess"
    IS_SUCCESS_DESC = "isSuccess desc"
    AUTH_METHOD = "authMethod"
    AUTH_METHOD_DESC = "authMethod desc"
    FAILURE_REASON = "failureReason"
    FAILURE_REASON_DESC = "failureReason desc"
    EVENT_DATE_TIME = "eventDateTime"
    EVENT_DATE_TIME_DESC = "eventDateTime desc"

class Enum27(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    FEATURE = "feature"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_DISPLAY_NAME = "userDisplayName"
    IS_SUCCESS = "isSuccess"
    AUTH_METHOD = "authMethod"
    FAILURE_REASON = "failureReason"
    EVENT_DATE_TIME = "eventDateTime"

class Enum28(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    FEATURE = "feature"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_DISPLAY_NAME = "userDisplayName"
    IS_SUCCESS = "isSuccess"
    AUTH_METHOD = "authMethod"
    FAILURE_REASON = "failureReason"
    EVENT_DATE_TIME = "eventDateTime"

class Enum7(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APP_ID = "appId"
    APP_DISPLAY_NAME = "appDisplayName"
    STATUS = "status"
    SIGN_IN_COUNT = "signInCount"
    AGGREGATED_EVENT_DATE_TIME = "aggregatedEventDateTime"

class Enum8(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_PRINCIPAL_NAME_DESC = "userPrincipalName desc"
    USER_DISPLAY_NAME = "userDisplayName"
    USER_DISPLAY_NAME_DESC = "userDisplayName desc"
    AUTH_METHODS = "authMethods"
    AUTH_METHODS_DESC = "authMethods desc"
    IS_REGISTERED = "isRegistered"
    IS_REGISTERED_DESC = "isRegistered desc"
    IS_ENABLED = "isEnabled"
    IS_ENABLED_DESC = "isEnabled desc"
    IS_CAPABLE = "isCapable"
    IS_CAPABLE_DESC = "isCapable desc"
    IS_MFA_REGISTERED = "isMfaRegistered"
    IS_MFA_REGISTERED_DESC = "isMfaRegistered desc"

class Enum9(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_DISPLAY_NAME = "userDisplayName"
    AUTH_METHODS = "authMethods"
    IS_REGISTERED = "isRegistered"
    IS_ENABLED = "isEnabled"
    IS_CAPABLE = "isCapable"
    IS_MFA_REGISTERED = "isMfaRegistered"

class Get0ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APPLICATION_SIGN_IN_DETAILED_SUMMARY = "applicationSignInDetailedSummary"
    CREDENTIAL_USER_REGISTRATION_DETAILS = "credentialUserRegistrationDetails"
    USER_CREDENTIAL_USAGE_DETAILS = "userCredentialUsageDetails"
    DAILY_PRINT_USAGE_SUMMARIES_BY_USER = "dailyPrintUsageSummariesByUser"
    MONTHLY_PRINT_USAGE_SUMMARIES_BY_USER = "monthlyPrintUsageSummariesByUser"
    DAILY_PRINT_USAGE_SUMMARIES_BY_PRINTER = "dailyPrintUsageSummariesByPrinter"
    MONTHLY_PRINT_USAGE_SUMMARIES_BY_PRINTER = "monthlyPrintUsageSummariesByPrinter"

class Get1ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APPLICATION_SIGN_IN_DETAILED_SUMMARY = "applicationSignInDetailedSummary"
    CREDENTIAL_USER_REGISTRATION_DETAILS = "credentialUserRegistrationDetails"
    USER_CREDENTIAL_USAGE_DETAILS = "userCredentialUsageDetails"
    DAILY_PRINT_USAGE_SUMMARIES_BY_USER = "dailyPrintUsageSummariesByUser"
    MONTHLY_PRINT_USAGE_SUMMARIES_BY_USER = "monthlyPrintUsageSummariesByUser"
    DAILY_PRINT_USAGE_SUMMARIES_BY_PRINTER = "dailyPrintUsageSummariesByPrinter"
    MONTHLY_PRINT_USAGE_SUMMARIES_BY_PRINTER = "monthlyPrintUsageSummariesByPrinter"

class Get5ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    APP_ID = "appId"
    APP_ID_DESC = "appId desc"
    APP_DISPLAY_NAME = "appDisplayName"
    APP_DISPLAY_NAME_DESC = "appDisplayName desc"
    STATUS = "status"
    STATUS_DESC = "status desc"
    SIGN_IN_COUNT = "signInCount"
    SIGN_IN_COUNT_DESC = "signInCount desc"
    AGGREGATED_EVENT_DATE_TIME = "aggregatedEventDateTime"
    AGGREGATED_EVENT_DATE_TIME_DESC = "aggregatedEventDateTime desc"

class Get6ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    APP_ID = "appId"
    APP_DISPLAY_NAME = "appDisplayName"
    STATUS = "status"
    SIGN_IN_COUNT = "signInCount"
    AGGREGATED_EVENT_DATE_TIME = "aggregatedEventDateTime"

class MicrosoftGraphAzureAdLicenseType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    FREE = "free"
    BASIC = "basic"
    PREMIUM_P1 = "premiumP1"
    PREMIUM_P2 = "premiumP2"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphFeatureType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REGISTRATION = "registration"
    RESET = "reset"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphMigrationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    READY = "ready"
    NEEDS_REVIEW = "needsReview"
    ADDITIONAL_STEPS_REQUIRED = "additionalStepsRequired"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphRegistrationAuthMethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EMAIL = "email"
    MOBILE_PHONE = "mobilePhone"
    OFFICE_PHONE = "officePhone"
    SECURITY_QUESTION = "securityQuestion"
    APP_NOTIFICATION = "appNotification"
    APP_CODE = "appCode"
    ALTERNATE_MOBILE_PHONE = "alternateMobilePhone"
    FIDO = "fido"
    APP_PASSWORD = "appPassword"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphRegistrationStatusType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REGISTERED = "registered"
    ENABLED = "enabled"
    CAPABLE = "capable"
    MFA_REGISTERED = "mfaRegistered"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphUsageAuthMethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EMAIL = "email"
    MOBILE_SMS = "mobileSMS"
    MOBILE_CALL = "mobileCall"
    OFFICE_PHONE = "officePhone"
    SECURITY_QUESTION = "securityQuestion"
    APP_NOTIFICATION = "appNotification"
    APP_CODE = "appCode"
    ALTERNATE_MOBILE_CALL = "alternateMobileCall"
    FIDO = "fido"
    APP_PASSWORD = "appPassword"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"
