# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddApplicationSignInDetailedSummary(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddApplicationSignInDetailedSummary, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'app-id':
                d['app_id'] = v[0]
            elif kl == 'app-display-name':
                d['app_display_name'] = v[0]
            elif kl == 'sign-in-count':
                d['sign_in_count'] = v[0]
            elif kl == 'aggregated-event-date-time':
                d['aggregated_event_date_time'] = v[0]
            elif kl == 'error-code':
                d['error_code'] = v[0]
            elif kl == 'failure-reason':
                d['failure_reason'] = v[0]
            elif kl == 'additional-details':
                d['additional_details'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddCredentialUserRegistrationDetails(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCredentialUserRegistrationDetails, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'user-principal-name':
                d['user_principal_name'] = v[0]
            elif kl == 'user-display-name':
                d['user_display_name'] = v[0]
            elif kl == 'auth-methods':
                d['auth_methods'] = v
            elif kl == 'is-registered':
                d['is_registered'] = v[0]
            elif kl == 'is-enabled':
                d['is_enabled'] = v[0]
            elif kl == 'is-capable':
                d['is_capable'] = v[0]
            elif kl == 'is-mfa-registered':
                d['is_mfa_registered'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddUserCredentialUsageDetails(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddUserCredentialUsageDetails, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'feature':
                d['feature'] = v[0]
            elif kl == 'user-principal-name':
                d['user_principal_name'] = v[0]
            elif kl == 'user-display-name':
                d['user_display_name'] = v[0]
            elif kl == 'is-success':
                d['is_success'] = v[0]
            elif kl == 'auth-method':
                d['auth_method'] = v[0]
            elif kl == 'failure-reason':
                d['failure_reason'] = v[0]
            elif kl == 'event-date-time':
                d['event_date_time'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddDailyPrintUsageSummariesByUser(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddDailyPrintUsageSummariesByUser, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'user-principal-name':
                d['user_principal_name'] = v[0]
            elif kl == 'usage-date':
                d['usage_date'] = v[0]
            elif kl == 'completed-black-and-white-job-count':
                d['completed_black_and_white_job_count'] = v[0]
            elif kl == 'completed-color-job-count':
                d['completed_color_job_count'] = v[0]
            elif kl == 'incomplete-job-count':
                d['incomplete_job_count'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddMonthlyPrintUsageSummariesByUser(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddMonthlyPrintUsageSummariesByUser, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'user-principal-name':
                d['user_principal_name'] = v[0]
            elif kl == 'usage-date':
                d['usage_date'] = v[0]
            elif kl == 'completed-black-and-white-job-count':
                d['completed_black_and_white_job_count'] = v[0]
            elif kl == 'completed-color-job-count':
                d['completed_color_job_count'] = v[0]
            elif kl == 'incomplete-job-count':
                d['incomplete_job_count'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddDailyPrintUsageSummariesByPrinter(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddDailyPrintUsageSummariesByPrinter, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'printer-id':
                d['printer_id'] = v[0]
            elif kl == 'usage-date':
                d['usage_date'] = v[0]
            elif kl == 'completed-black-and-white-job-count':
                d['completed_black_and_white_job_count'] = v[0]
            elif kl == 'completed-color-job-count':
                d['completed_color_job_count'] = v[0]
            elif kl == 'incomplete-job-count':
                d['incomplete_job_count'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddMonthlyPrintUsageSummariesByPrinter(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddMonthlyPrintUsageSummariesByPrinter, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'printer-id':
                d['printer_id'] = v[0]
            elif kl == 'usage-date':
                d['usage_date'] = v[0]
            elif kl == 'completed-black-and-white-job-count':
                d['completed_black_and_white_job_count'] = v[0]
            elif kl == 'completed-color-job-count':
                d['completed_color_job_count'] = v[0]
            elif kl == 'incomplete-job-count':
                d['incomplete_job_count'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d
