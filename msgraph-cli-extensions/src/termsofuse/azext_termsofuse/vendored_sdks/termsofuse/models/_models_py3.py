# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._identity_terms_of_use_enums import *


class CollectionOfAgreement(msrest.serialization.Model):
    """Collection of agreement.

    :param value:
    :type value: list[~identity_terms_of_use.models.MicrosoftGraphAgreement]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAgreement]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphAgreement"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfAgreement, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfAgreementAcceptance(msrest.serialization.Model):
    """Collection of agreementAcceptance.

    :param value:
    :type value: list[~identity_terms_of_use.models.MicrosoftGraphAgreementAcceptance]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAgreementAcceptance]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphAgreementAcceptance"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfAgreementAcceptance, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfAgreementAcceptance0(msrest.serialization.Model):
    """Collection of agreementAcceptance.

    :param value:
    :type value: list[~identity_terms_of_use.models.MicrosoftGraphAgreementAcceptance]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAgreementAcceptance]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphAgreementAcceptance"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfAgreementAcceptance0, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfAgreementFile(msrest.serialization.Model):
    """Collection of agreementFile.

    :param value:
    :type value: list[~identity_terms_of_use.models.MicrosoftGraphAgreementFile]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAgreementFile]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphAgreementFile"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfAgreementFile, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = id


class MicrosoftGraphAgreement(MicrosoftGraphEntity):
    """agreement.

    :param id: Read-only.
    :type id: str
    :param display_name:
    :type display_name: str
    :param is_viewing_before_acceptance_required:
    :type is_viewing_before_acceptance_required: bool
    :param files:
    :type files: list[~identity_terms_of_use.models.MicrosoftGraphAgreementFile]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_viewing_before_acceptance_required': {'key': 'isViewingBeforeAcceptanceRequired', 'type': 'bool'},
        'files': {'key': 'files', 'type': '[MicrosoftGraphAgreementFile]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        is_viewing_before_acceptance_required: Optional[bool] = None,
        files: Optional[List["MicrosoftGraphAgreementFile"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphAgreement, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.is_viewing_before_acceptance_required = is_viewing_before_acceptance_required
        self.files = files


class MicrosoftGraphAgreementAcceptance(MicrosoftGraphEntity):
    """agreementAcceptance.

    :param id: Read-only.
    :type id: str
    :param agreement_id:
    :type agreement_id: str
    :param user_id:
    :type user_id: str
    :param agreement_file_id:
    :type agreement_file_id: str
    :param recorded_date_time:
    :type recorded_date_time: ~datetime.datetime
    :param user_display_name:
    :type user_display_name: str
    :param user_principal_name:
    :type user_principal_name: str
    :param user_email:
    :type user_email: str
    :param state: agreementAcceptanceState. Possible values include: "accepted", "declined".
    :type state: str or ~identity_terms_of_use.models.MicrosoftGraphAgreementAcceptanceState
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'agreement_id': {'key': 'agreementId', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'agreement_file_id': {'key': 'agreementFileId', 'type': 'str'},
        'recorded_date_time': {'key': 'recordedDateTime', 'type': 'iso-8601'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'user_email': {'key': 'userEmail', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        agreement_id: Optional[str] = None,
        user_id: Optional[str] = None,
        agreement_file_id: Optional[str] = None,
        recorded_date_time: Optional[datetime.datetime] = None,
        user_display_name: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        user_email: Optional[str] = None,
        state: Optional[Union[str, "MicrosoftGraphAgreementAcceptanceState"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphAgreementAcceptance, self).__init__(id=id, **kwargs)
        self.agreement_id = agreement_id
        self.user_id = user_id
        self.agreement_file_id = agreement_file_id
        self.recorded_date_time = recorded_date_time
        self.user_display_name = user_display_name
        self.user_principal_name = user_principal_name
        self.user_email = user_email
        self.state = state


class MicrosoftGraphAgreementFile(MicrosoftGraphEntity):
    """agreementFile.

    :param id: Read-only.
    :type id: str
    :param language:
    :type language: str
    :param file_name:
    :type file_name: str
    :param is_default:
    :type is_default: bool
    :param data:
    :type data: bytes
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'file_name': {'key': 'fileName', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'data': {'key': 'fileData.data', 'type': 'base64'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        language: Optional[str] = None,
        file_name: Optional[str] = None,
        is_default: Optional[bool] = None,
        data: Optional[bytes] = None,
        **kwargs
    ):
        super(MicrosoftGraphAgreementFile, self).__init__(id=id, **kwargs)
        self.language = language
        self.file_name = file_name
        self.is_default = is_default
        self.data = data


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~identity_terms_of_use.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        *,
        error: "OdataErrorMain",
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = error


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~identity_terms_of_use.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["OdataErrorDetail"]] = None,
        innererror: Optional[object] = None,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror
