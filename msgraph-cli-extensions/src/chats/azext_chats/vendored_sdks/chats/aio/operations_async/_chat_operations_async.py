# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class ChatOperations:
    """ChatOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~teams_chats.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_installed_app(
        self,
        chat_id: str,
        orderby: Optional[List[Union[str, "models.Enum12"]]] = None,
        select: Optional[List[Union[str, "models.Enum13"]]] = None,
        expand: Optional[List[Union[str, "models.Get8ItemsItem"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfTeamsAppInstallation"]:
        """Get installedApps from chats.

        Get installedApps from chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams_chats.models.Enum12]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams_chats.models.Enum13]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams_chats.models.Get8ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfTeamsAppInstallation or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~teams_chats.models.CollectionOfTeamsAppInstallation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfTeamsAppInstallation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_installed_app.metadata['url']  # type: ignore
                path_format_arguments = {
                    'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfTeamsAppInstallation', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_installed_app.metadata = {'url': '/chats/{chat-id}/installedApps'}  # type: ignore

    async def create_installed_app(
        self,
        chat_id: str,
        id: Optional[str] = None,
        teams_app_definition: Optional["models.MicrosoftGraphTeamsAppDefinition"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        external_id: Optional[str] = None,
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        distribution_method: Optional[Union[str, "models.MicrosoftGraphTeamsAppDistributionMethod"]] = None,
        app_definitions: Optional[List["models.MicrosoftGraphTeamsAppDefinition"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphTeamsAppInstallation":
        """Create new navigation property to installedApps for chats.

        Create new navigation property to installedApps for chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param id: Read-only.
        :type id: str
        :param teams_app_definition: teamsAppDefinition.
        :type teams_app_definition: ~teams_chats.models.MicrosoftGraphTeamsAppDefinition
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param external_id: The ID of the catalog provided by the app developer in the Microsoft Teams
         zip app package.
        :type external_id: str
        :param name:
        :type name: str
        :param display_name: The name of the catalog app provided by the app developer in the Microsoft
         Teams zip app package.
        :type display_name: str
        :param distribution_method: teamsAppDistributionMethod.
        :type distribution_method: str or ~teams_chats.models.MicrosoftGraphTeamsAppDistributionMethod
        :param app_definitions: The details for each version of the app.
        :type app_definitions: list[~teams_chats.models.MicrosoftGraphTeamsAppDefinition]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTeamsAppInstallation, or the result of cls(response)
        :rtype: ~teams_chats.models.MicrosoftGraphTeamsAppInstallation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTeamsAppInstallation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphTeamsAppInstallation(id=id, teams_app_definition=teams_app_definition, id_teams_app_id=microsoft_graph_entity_id, external_id=external_id, name=name, display_name=display_name, distribution_method=distribution_method, app_definitions=app_definitions)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_installed_app.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphTeamsAppInstallation')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTeamsAppInstallation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_installed_app.metadata = {'url': '/chats/{chat-id}/installedApps'}  # type: ignore

    async def get_installed_app(
        self,
        chat_id: str,
        teams_app_installation_id: str,
        select: Optional[List[Union[str, "models.Enum15"]]] = None,
        expand: Optional[List[Union[str, "models.Get3ItemsItem"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphTeamsAppInstallation":
        """Get installedApps from chats.

        Get installedApps from chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param teams_app_installation_id: key: teamsAppInstallation-id of teamsAppInstallation.
        :type teams_app_installation_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams_chats.models.Enum15]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams_chats.models.Get3ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTeamsAppInstallation, or the result of cls(response)
        :rtype: ~teams_chats.models.MicrosoftGraphTeamsAppInstallation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTeamsAppInstallation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_installed_app.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'teamsAppInstallation-id': self._serialize.url("teams_app_installation_id", teams_app_installation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTeamsAppInstallation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_installed_app.metadata = {'url': '/chats/{chat-id}/installedApps/{teamsAppInstallation-id}'}  # type: ignore

    async def update_installed_app(
        self,
        chat_id: str,
        teams_app_installation_id: str,
        id: Optional[str] = None,
        teams_app_definition: Optional["models.MicrosoftGraphTeamsAppDefinition"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        external_id: Optional[str] = None,
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        distribution_method: Optional[Union[str, "models.MicrosoftGraphTeamsAppDistributionMethod"]] = None,
        app_definitions: Optional[List["models.MicrosoftGraphTeamsAppDefinition"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property installedApps in chats.

        Update the navigation property installedApps in chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param teams_app_installation_id: key: teamsAppInstallation-id of teamsAppInstallation.
        :type teams_app_installation_id: str
        :param id: Read-only.
        :type id: str
        :param teams_app_definition: teamsAppDefinition.
        :type teams_app_definition: ~teams_chats.models.MicrosoftGraphTeamsAppDefinition
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param external_id: The ID of the catalog provided by the app developer in the Microsoft Teams
         zip app package.
        :type external_id: str
        :param name:
        :type name: str
        :param display_name: The name of the catalog app provided by the app developer in the Microsoft
         Teams zip app package.
        :type display_name: str
        :param distribution_method: teamsAppDistributionMethod.
        :type distribution_method: str or ~teams_chats.models.MicrosoftGraphTeamsAppDistributionMethod
        :param app_definitions: The details for each version of the app.
        :type app_definitions: list[~teams_chats.models.MicrosoftGraphTeamsAppDefinition]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphTeamsAppInstallation(id=id, teams_app_definition=teams_app_definition, id_teams_app_id=microsoft_graph_entity_id, external_id=external_id, name=name, display_name=display_name, distribution_method=distribution_method, app_definitions=app_definitions)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_installed_app.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'teamsAppInstallation-id': self._serialize.url("teams_app_installation_id", teams_app_installation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphTeamsAppInstallation')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_installed_app.metadata = {'url': '/chats/{chat-id}/installedApps/{teamsAppInstallation-id}'}  # type: ignore

    def list_member(
        self,
        chat_id: str,
        orderby: Optional[List[Union[str, "models.Enum20"]]] = None,
        select: Optional[List[Union[str, "models.Enum21"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfConversationMember"]:
        """Get members from chats.

        Get members from chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams_chats.models.Enum20]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams_chats.models.Enum21]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfConversationMember or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~teams_chats.models.CollectionOfConversationMember]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfConversationMember"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_member.metadata['url']  # type: ignore
                path_format_arguments = {
                    'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfConversationMember', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_member.metadata = {'url': '/chats/{chat-id}/members'}  # type: ignore

    async def create_member(
        self,
        chat_id: str,
        id: Optional[str] = None,
        roles: Optional[List[str]] = None,
        display_name: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphConversationMember":
        """Create new navigation property to members for chats.

        Create new navigation property to members for chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param id: Read-only.
        :type id: str
        :param roles:
        :type roles: list[str]
        :param display_name:
        :type display_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphConversationMember, or the result of cls(response)
        :rtype: ~teams_chats.models.MicrosoftGraphConversationMember
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphConversationMember"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphConversationMember(id=id, roles=roles, display_name=display_name)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_member.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphConversationMember')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphConversationMember', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_member.metadata = {'url': '/chats/{chat-id}/members'}  # type: ignore

    async def get_member(
        self,
        chat_id: str,
        conversation_member_id: str,
        select: Optional[List[Union[str, "models.Enum22"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphConversationMember":
        """Get members from chats.

        Get members from chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param conversation_member_id: key: conversationMember-id of conversationMember.
        :type conversation_member_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams_chats.models.Enum22]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphConversationMember, or the result of cls(response)
        :rtype: ~teams_chats.models.MicrosoftGraphConversationMember
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphConversationMember"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_member.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'conversationMember-id': self._serialize.url("conversation_member_id", conversation_member_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphConversationMember', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_member.metadata = {'url': '/chats/{chat-id}/members/{conversationMember-id}'}  # type: ignore

    async def update_member(
        self,
        chat_id: str,
        conversation_member_id: str,
        id: Optional[str] = None,
        roles: Optional[List[str]] = None,
        display_name: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property members in chats.

        Update the navigation property members in chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param conversation_member_id: key: conversationMember-id of conversationMember.
        :type conversation_member_id: str
        :param id: Read-only.
        :type id: str
        :param roles:
        :type roles: list[str]
        :param display_name:
        :type display_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphConversationMember(id=id, roles=roles, display_name=display_name)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_member.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'conversationMember-id': self._serialize.url("conversation_member_id", conversation_member_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphConversationMember')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_member.metadata = {'url': '/chats/{chat-id}/members/{conversationMember-id}'}  # type: ignore

    def list_message(
        self,
        chat_id: str,
        orderby: Optional[List[Union[str, "models.Enum23"]]] = None,
        select: Optional[List[Union[str, "models.Enum24"]]] = None,
        expand: Optional[List[Union[str, "models.Enum25"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfChatMessage"]:
        """Get messages from chats.

        Get messages from chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams_chats.models.Enum23]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams_chats.models.Enum24]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams_chats.models.Enum25]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfChatMessage or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~teams_chats.models.CollectionOfChatMessage]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfChatMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_message.metadata['url']  # type: ignore
                path_format_arguments = {
                    'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfChatMessage', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_message.metadata = {'url': '/chats/{chat-id}/messages'}  # type: ignore

    async def create_message(
        self,
        chat_id: str,
        id: Optional[str] = None,
        reply_to_id: Optional[str] = None,
        etag: Optional[str] = None,
        message_type: Optional[Union[str, "models.MicrosoftGraphChatMessageType"]] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        subject: Optional[str] = None,
        body: Optional["models.MicrosoftGraphItemBody"] = None,
        summary: Optional[str] = None,
        attachments: Optional[List["models.MicrosoftGraphChatMessageAttachment"]] = None,
        mentions: Optional[List["models.MicrosoftGraphChatMessageMention"]] = None,
        importance: Optional[Union[str, "models.MicrosoftGraphChatMessageImportance"]] = None,
        reactions: Optional[List["models.MicrosoftGraphChatMessageReaction"]] = None,
        locale: Optional[str] = None,
        web_url: Optional[str] = None,
        replies: Optional[List["models.MicrosoftGraphChatMessage"]] = None,
        hosted_contents: Optional[List["models.MicrosoftGraphEntity"]] = None,
        dlp_action: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes"]] = None,
        justification_text: Optional[str] = None,
        policy_tip: Optional["models.MicrosoftGraphChatMessagePolicyViolationPolicyTip"] = None,
        user_action: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes"]] = None,
        verdict_details: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes"]] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        display_name: Optional[str] = None,
        id1: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        id2: Optional[str] = None,
        display_name1: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphChatMessage":
        """Create new navigation property to messages for chats.

        Create new navigation property to messages for chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param id: Read-only.
        :type id: str
        :param reply_to_id:
        :type reply_to_id: str
        :param etag:
        :type etag: str
        :param message_type: chatMessageType.
        :type message_type: str or ~teams_chats.models.MicrosoftGraphChatMessageType
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param subject:
        :type subject: str
        :param body: itemBody.
        :type body: ~teams_chats.models.MicrosoftGraphItemBody
        :param summary:
        :type summary: str
        :param attachments:
        :type attachments: list[~teams_chats.models.MicrosoftGraphChatMessageAttachment]
        :param mentions:
        :type mentions: list[~teams_chats.models.MicrosoftGraphChatMessageMention]
        :param importance: chatMessageImportance.
        :type importance: str or ~teams_chats.models.MicrosoftGraphChatMessageImportance
        :param reactions:
        :type reactions: list[~teams_chats.models.MicrosoftGraphChatMessageReaction]
        :param locale:
        :type locale: str
        :param web_url:
        :type web_url: str
        :param replies:
        :type replies: list[~teams_chats.models.MicrosoftGraphChatMessage]
        :param hosted_contents:
        :type hosted_contents: list[~teams_chats.models.MicrosoftGraphEntity]
        :param dlp_action: chatMessagePolicyViolationDlpActionTypes.
        :type dlp_action: str or ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes
        :param justification_text:
        :type justification_text: str
        :param policy_tip: chatMessagePolicyViolationPolicyTip.
        :type policy_tip: ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationPolicyTip
        :param user_action: chatMessagePolicyViolationUserActionTypes.
        :type user_action: str or ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes
        :param verdict_details: chatMessagePolicyViolationVerdictDetailsTypes.
        :type verdict_details: str or ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphChatMessage, or the result of cls(response)
        :rtype: ~teams_chats.models.MicrosoftGraphChatMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphChatMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphChatMessage(id=id, reply_to_id=reply_to_id, etag=etag, message_type=message_type, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, deleted_date_time=deleted_date_time, subject=subject, body=body, summary=summary, attachments=attachments, mentions=mentions, importance=importance, reactions=reactions, locale=locale, web_url=web_url, replies=replies, hosted_contents=hosted_contents, dlp_action=dlp_action, justification_text=justification_text, policy_tip=policy_tip, user_action=user_action, verdict_details=verdict_details, id_from_user_id=microsoft_graph_identity_id, display_name_from_user_display_name=display_name, id_from_device_id=id1, display_name_from_device_display_name=microsoft_graph_identity_display_name, id_from_application_id=id2, display_name_from_application_display_name=display_name1)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphChatMessage')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphChatMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_message.metadata = {'url': '/chats/{chat-id}/messages'}  # type: ignore

    async def get_message(
        self,
        chat_id: str,
        chat_message_id: str,
        select: Optional[List[Union[str, "models.Enum26"]]] = None,
        expand: Optional[List[Union[str, "models.Enum27"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphChatMessage":
        """Get messages from chats.

        Get messages from chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param chat_message_id: key: chatMessage-id of chatMessage.
        :type chat_message_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams_chats.models.Enum26]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams_chats.models.Enum27]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphChatMessage, or the result of cls(response)
        :rtype: ~teams_chats.models.MicrosoftGraphChatMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphChatMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphChatMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_message.metadata = {'url': '/chats/{chat-id}/messages/{chatMessage-id}'}  # type: ignore

    async def update_message(
        self,
        chat_id: str,
        chat_message_id: str,
        id: Optional[str] = None,
        reply_to_id: Optional[str] = None,
        etag: Optional[str] = None,
        message_type: Optional[Union[str, "models.MicrosoftGraphChatMessageType"]] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        subject: Optional[str] = None,
        body: Optional["models.MicrosoftGraphItemBody"] = None,
        summary: Optional[str] = None,
        attachments: Optional[List["models.MicrosoftGraphChatMessageAttachment"]] = None,
        mentions: Optional[List["models.MicrosoftGraphChatMessageMention"]] = None,
        importance: Optional[Union[str, "models.MicrosoftGraphChatMessageImportance"]] = None,
        reactions: Optional[List["models.MicrosoftGraphChatMessageReaction"]] = None,
        locale: Optional[str] = None,
        web_url: Optional[str] = None,
        replies: Optional[List["models.MicrosoftGraphChatMessage"]] = None,
        hosted_contents: Optional[List["models.MicrosoftGraphEntity"]] = None,
        dlp_action: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes"]] = None,
        justification_text: Optional[str] = None,
        policy_tip: Optional["models.MicrosoftGraphChatMessagePolicyViolationPolicyTip"] = None,
        user_action: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes"]] = None,
        verdict_details: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes"]] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        display_name: Optional[str] = None,
        id1: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        id2: Optional[str] = None,
        display_name1: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property messages in chats.

        Update the navigation property messages in chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param chat_message_id: key: chatMessage-id of chatMessage.
        :type chat_message_id: str
        :param id: Read-only.
        :type id: str
        :param reply_to_id:
        :type reply_to_id: str
        :param etag:
        :type etag: str
        :param message_type: chatMessageType.
        :type message_type: str or ~teams_chats.models.MicrosoftGraphChatMessageType
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param subject:
        :type subject: str
        :param body: itemBody.
        :type body: ~teams_chats.models.MicrosoftGraphItemBody
        :param summary:
        :type summary: str
        :param attachments:
        :type attachments: list[~teams_chats.models.MicrosoftGraphChatMessageAttachment]
        :param mentions:
        :type mentions: list[~teams_chats.models.MicrosoftGraphChatMessageMention]
        :param importance: chatMessageImportance.
        :type importance: str or ~teams_chats.models.MicrosoftGraphChatMessageImportance
        :param reactions:
        :type reactions: list[~teams_chats.models.MicrosoftGraphChatMessageReaction]
        :param locale:
        :type locale: str
        :param web_url:
        :type web_url: str
        :param replies:
        :type replies: list[~teams_chats.models.MicrosoftGraphChatMessage]
        :param hosted_contents:
        :type hosted_contents: list[~teams_chats.models.MicrosoftGraphEntity]
        :param dlp_action: chatMessagePolicyViolationDlpActionTypes.
        :type dlp_action: str or ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes
        :param justification_text:
        :type justification_text: str
        :param policy_tip: chatMessagePolicyViolationPolicyTip.
        :type policy_tip: ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationPolicyTip
        :param user_action: chatMessagePolicyViolationUserActionTypes.
        :type user_action: str or ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes
        :param verdict_details: chatMessagePolicyViolationVerdictDetailsTypes.
        :type verdict_details: str or ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphChatMessage(id=id, reply_to_id=reply_to_id, etag=etag, message_type=message_type, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, deleted_date_time=deleted_date_time, subject=subject, body=body, summary=summary, attachments=attachments, mentions=mentions, importance=importance, reactions=reactions, locale=locale, web_url=web_url, replies=replies, hosted_contents=hosted_contents, dlp_action=dlp_action, justification_text=justification_text, policy_tip=policy_tip, user_action=user_action, verdict_details=verdict_details, id_from_user_id=microsoft_graph_identity_id, display_name_from_user_display_name=display_name, id_from_device_id=id1, display_name_from_device_display_name=microsoft_graph_identity_display_name, id_from_application_id=id2, display_name_from_application_display_name=display_name1)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphChatMessage')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_message.metadata = {'url': '/chats/{chat-id}/messages/{chatMessage-id}'}  # type: ignore

    async def all_message(
        self,
        **kwargs
    ) -> List["models.MicrosoftGraphChatMessage"]:
        """Invoke function allMessages.

        Invoke function allMessages.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphChatMessage, or the result of cls(response)
        :rtype: list[~teams_chats.models.MicrosoftGraphChatMessage]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphChatMessage"]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.all_message.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphChatMessage]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    all_message.metadata = {'url': '/chats/microsoft.graph.allMessages()'}  # type: ignore
