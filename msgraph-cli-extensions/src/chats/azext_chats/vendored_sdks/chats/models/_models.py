# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CollectionOfChat(msrest.serialization.Model):
    """Collection of chat.

    :param value:
    :type value: list[~teams_chats.models.MicrosoftGraphChat]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphChat]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfChat, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfChat0(msrest.serialization.Model):
    """Collection of chat.

    :param value:
    :type value: list[~teams_chats.models.MicrosoftGraphChat]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphChat]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfChat0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfChatMessage(msrest.serialization.Model):
    """Collection of chatMessage.

    :param value:
    :type value: list[~teams_chats.models.MicrosoftGraphChatMessage]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphChatMessage]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfChatMessage, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfChatMessage0(msrest.serialization.Model):
    """Collection of chatMessage.

    :param value:
    :type value: list[~teams_chats.models.MicrosoftGraphChatMessage]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphChatMessage]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfChatMessage0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfChatMessageHostedContent(msrest.serialization.Model):
    """Collection of chatMessageHostedContent.

    :param value:
    :type value: list[~teams_chats.models.MicrosoftGraphEntity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphEntity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfChatMessageHostedContent, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfConversationMember(msrest.serialization.Model):
    """Collection of conversationMember.

    :param value:
    :type value: list[~teams_chats.models.MicrosoftGraphConversationMember]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphConversationMember]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfConversationMember, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfTeamsAppInstallation(msrest.serialization.Model):
    """Collection of teamsAppInstallation.

    :param value:
    :type value: list[~teams_chats.models.MicrosoftGraphTeamsAppInstallation]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphTeamsAppInstallation]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfTeamsAppInstallation, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class MicrosoftGraphChat(MicrosoftGraphEntity):
    """chat.

    :param id: Read-only.
    :type id: str
    :param topic:
    :type topic: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_updated_date_time:
    :type last_updated_date_time: ~datetime.datetime
    :param members:
    :type members: list[~teams_chats.models.MicrosoftGraphConversationMember]
    :param messages:
    :type messages: list[~teams_chats.models.MicrosoftGraphChatMessage]
    :param installed_apps:
    :type installed_apps: list[~teams_chats.models.MicrosoftGraphTeamsAppInstallation]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'topic': {'key': 'topic', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'members': {'key': 'members', 'type': '[MicrosoftGraphConversationMember]'},
        'messages': {'key': 'messages', 'type': '[MicrosoftGraphChatMessage]'},
        'installed_apps': {'key': 'installedApps', 'type': '[MicrosoftGraphTeamsAppInstallation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChat, self).__init__(**kwargs)
        self.topic = kwargs.get('topic', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.last_updated_date_time = kwargs.get('last_updated_date_time', None)
        self.members = kwargs.get('members', None)
        self.messages = kwargs.get('messages', None)
        self.installed_apps = kwargs.get('installed_apps', None)


class MicrosoftGraphChatMessage(MicrosoftGraphEntity):
    """chatMessage.

    :param id: Read-only.
    :type id: str
    :param reply_to_id:
    :type reply_to_id: str
    :param etag:
    :type etag: str
    :param message_type: chatMessageType. Possible values include: "message", "chatEvent",
     "typing".
    :type message_type: str or ~teams_chats.models.MicrosoftGraphChatMessageType
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param subject:
    :type subject: str
    :param body: itemBody.
    :type body: ~teams_chats.models.MicrosoftGraphItemBody
    :param summary:
    :type summary: str
    :param attachments:
    :type attachments: list[~teams_chats.models.MicrosoftGraphChatMessageAttachment]
    :param mentions:
    :type mentions: list[~teams_chats.models.MicrosoftGraphChatMessageMention]
    :param importance: chatMessageImportance. Possible values include: "normal", "high", "urgent".
    :type importance: str or ~teams_chats.models.MicrosoftGraphChatMessageImportance
    :param reactions:
    :type reactions: list[~teams_chats.models.MicrosoftGraphChatMessageReaction]
    :param locale:
    :type locale: str
    :param web_url:
    :type web_url: str
    :param replies:
    :type replies: list[~teams_chats.models.MicrosoftGraphChatMessage]
    :param hosted_contents:
    :type hosted_contents: list[~teams_chats.models.MicrosoftGraphEntity]
    :param dlp_action: chatMessagePolicyViolationDlpActionTypes. Possible values include: "none",
     "notifySender", "blockAccess", "blockAccessExternal".
    :type dlp_action: str or
     ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes
    :param justification_text:
    :type justification_text: str
    :param policy_tip: chatMessagePolicyViolationPolicyTip.
    :type policy_tip: ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationPolicyTip
    :param user_action: chatMessagePolicyViolationUserActionTypes. Possible values include: "none",
     "override", "reportFalsePositive".
    :type user_action: str or
     ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes
    :param verdict_details: chatMessagePolicyViolationVerdictDetailsTypes. Possible values include:
     "none", "allowFalsePositiveOverride", "allowOverrideWithoutJustification",
     "allowOverrideWithJustification".
    :type verdict_details: str or
     ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes
    :param id_from_user_id: Unique identifier for the identity.
    :type id_from_user_id: str
    :param display_name_from_user_display_name: The identity's display name. Note that this may not
     always be available or up to date. For example, if a user changes their display name, the API
     may show the new value in a future response, but the items associated with the user won't show
     up as having changed when using delta.
    :type display_name_from_user_display_name: str
    :param id_from_device_id: Unique identifier for the identity.
    :type id_from_device_id: str
    :param display_name_from_device_display_name: The identity's display name. Note that this may
     not always be available or up to date. For example, if a user changes their display name, the
     API may show the new value in a future response, but the items associated with the user won't
     show up as having changed when using delta.
    :type display_name_from_device_display_name: str
    :param id_from_application_id: Unique identifier for the identity.
    :type id_from_application_id: str
    :param display_name_from_application_display_name: The identity's display name. Note that this
     may not always be available or up to date. For example, if a user changes their display name,
     the API may show the new value in a future response, but the items associated with the user
     won't show up as having changed when using delta.
    :type display_name_from_application_display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'reply_to_id': {'key': 'replyToId', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'message_type': {'key': 'messageType', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'subject': {'key': 'subject', 'type': 'str'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'summary': {'key': 'summary', 'type': 'str'},
        'attachments': {'key': 'attachments', 'type': '[MicrosoftGraphChatMessageAttachment]'},
        'mentions': {'key': 'mentions', 'type': '[MicrosoftGraphChatMessageMention]'},
        'importance': {'key': 'importance', 'type': 'str'},
        'reactions': {'key': 'reactions', 'type': '[MicrosoftGraphChatMessageReaction]'},
        'locale': {'key': 'locale', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'replies': {'key': 'replies', 'type': '[MicrosoftGraphChatMessage]'},
        'hosted_contents': {'key': 'hostedContents', 'type': '[MicrosoftGraphEntity]'},
        'dlp_action': {'key': 'policyViolation.dlpAction', 'type': 'str'},
        'justification_text': {'key': 'policyViolation.justificationText', 'type': 'str'},
        'policy_tip': {'key': 'policyViolation.policyTip', 'type': 'MicrosoftGraphChatMessagePolicyViolationPolicyTip'},
        'user_action': {'key': 'policyViolation.userAction', 'type': 'str'},
        'verdict_details': {'key': 'policyViolation.verdictDetails', 'type': 'str'},
        'id_from_user_id': {'key': 'from.user.id', 'type': 'str'},
        'display_name_from_user_display_name': {'key': 'from.user.displayName', 'type': 'str'},
        'id_from_device_id': {'key': 'from.device.id', 'type': 'str'},
        'display_name_from_device_display_name': {'key': 'from.device.displayName', 'type': 'str'},
        'id_from_application_id': {'key': 'from.application.id', 'type': 'str'},
        'display_name_from_application_display_name': {'key': 'from.application.displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChatMessage, self).__init__(**kwargs)
        self.reply_to_id = kwargs.get('reply_to_id', None)
        self.etag = kwargs.get('etag', None)
        self.message_type = kwargs.get('message_type', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.deleted_date_time = kwargs.get('deleted_date_time', None)
        self.subject = kwargs.get('subject', None)
        self.body = kwargs.get('body', None)
        self.summary = kwargs.get('summary', None)
        self.attachments = kwargs.get('attachments', None)
        self.mentions = kwargs.get('mentions', None)
        self.importance = kwargs.get('importance', None)
        self.reactions = kwargs.get('reactions', None)
        self.locale = kwargs.get('locale', None)
        self.web_url = kwargs.get('web_url', None)
        self.replies = kwargs.get('replies', None)
        self.hosted_contents = kwargs.get('hosted_contents', None)
        self.dlp_action = kwargs.get('dlp_action', None)
        self.justification_text = kwargs.get('justification_text', None)
        self.policy_tip = kwargs.get('policy_tip', None)
        self.user_action = kwargs.get('user_action', None)
        self.verdict_details = kwargs.get('verdict_details', None)
        self.id_from_user_id = kwargs.get('id_from_user_id', None)
        self.display_name_from_user_display_name = kwargs.get('display_name_from_user_display_name', None)
        self.id_from_device_id = kwargs.get('id_from_device_id', None)
        self.display_name_from_device_display_name = kwargs.get('display_name_from_device_display_name', None)
        self.id_from_application_id = kwargs.get('id_from_application_id', None)
        self.display_name_from_application_display_name = kwargs.get('display_name_from_application_display_name', None)


class MicrosoftGraphChatMessageAttachment(msrest.serialization.Model):
    """chatMessageAttachment.

    :param id:
    :type id: str
    :param content_type:
    :type content_type: str
    :param content_url:
    :type content_url: str
    :param content:
    :type content: str
    :param name:
    :type name: str
    :param thumbnail_url:
    :type thumbnail_url: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'content_url': {'key': 'contentUrl', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'thumbnail_url': {'key': 'thumbnailUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChatMessageAttachment, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.content_type = kwargs.get('content_type', None)
        self.content_url = kwargs.get('content_url', None)
        self.content = kwargs.get('content', None)
        self.name = kwargs.get('name', None)
        self.thumbnail_url = kwargs.get('thumbnail_url', None)


class MicrosoftGraphChatMessageHostedContent(MicrosoftGraphEntity):
    """chatMessageHostedContent.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChatMessageHostedContent, self).__init__(**kwargs)


class MicrosoftGraphChatMessageMention(msrest.serialization.Model):
    """chatMessageMention.

    :param id:
    :type id: int
    :param mention_text:
    :type mention_text: str
    :param id_mentioned_user_id: Unique identifier for the identity.
    :type id_mentioned_user_id: str
    :param display_name_mentioned_user_display_name: The identity's display name. Note that this
     may not always be available or up to date. For example, if a user changes their display name,
     the API may show the new value in a future response, but the items associated with the user
     won't show up as having changed when using delta.
    :type display_name_mentioned_user_display_name: str
    :param id_mentioned_device_id: Unique identifier for the identity.
    :type id_mentioned_device_id: str
    :param display_name_mentioned_device_display_name: The identity's display name. Note that this
     may not always be available or up to date. For example, if a user changes their display name,
     the API may show the new value in a future response, but the items associated with the user
     won't show up as having changed when using delta.
    :type display_name_mentioned_device_display_name: str
    :param id_mentioned_application_id: Unique identifier for the identity.
    :type id_mentioned_application_id: str
    :param display_name_mentioned_application_display_name: The identity's display name. Note that
     this may not always be available or up to date. For example, if a user changes their display
     name, the API may show the new value in a future response, but the items associated with the
     user won't show up as having changed when using delta.
    :type display_name_mentioned_application_display_name: str
    """

    _validation = {
        'id': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'mention_text': {'key': 'mentionText', 'type': 'str'},
        'id_mentioned_user_id': {'key': 'mentioned.user.id', 'type': 'str'},
        'display_name_mentioned_user_display_name': {'key': 'mentioned.user.displayName', 'type': 'str'},
        'id_mentioned_device_id': {'key': 'mentioned.device.id', 'type': 'str'},
        'display_name_mentioned_device_display_name': {'key': 'mentioned.device.displayName', 'type': 'str'},
        'id_mentioned_application_id': {'key': 'mentioned.application.id', 'type': 'str'},
        'display_name_mentioned_application_display_name': {'key': 'mentioned.application.displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChatMessageMention, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.mention_text = kwargs.get('mention_text', None)
        self.id_mentioned_user_id = kwargs.get('id_mentioned_user_id', None)
        self.display_name_mentioned_user_display_name = kwargs.get('display_name_mentioned_user_display_name', None)
        self.id_mentioned_device_id = kwargs.get('id_mentioned_device_id', None)
        self.display_name_mentioned_device_display_name = kwargs.get('display_name_mentioned_device_display_name', None)
        self.id_mentioned_application_id = kwargs.get('id_mentioned_application_id', None)
        self.display_name_mentioned_application_display_name = kwargs.get('display_name_mentioned_application_display_name', None)


class MicrosoftGraphChatMessagePolicyViolationPolicyTip(msrest.serialization.Model):
    """chatMessagePolicyViolationPolicyTip.

    :param general_text:
    :type general_text: str
    :param compliance_url:
    :type compliance_url: str
    :param matched_condition_descriptions:
    :type matched_condition_descriptions: list[str]
    """

    _attribute_map = {
        'general_text': {'key': 'generalText', 'type': 'str'},
        'compliance_url': {'key': 'complianceUrl', 'type': 'str'},
        'matched_condition_descriptions': {'key': 'matchedConditionDescriptions', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChatMessagePolicyViolationPolicyTip, self).__init__(**kwargs)
        self.general_text = kwargs.get('general_text', None)
        self.compliance_url = kwargs.get('compliance_url', None)
        self.matched_condition_descriptions = kwargs.get('matched_condition_descriptions', None)


class MicrosoftGraphChatMessageReaction(msrest.serialization.Model):
    """chatMessageReaction.

    :param reaction_type:
    :type reaction_type: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param id_user_id: Unique identifier for the identity.
    :type id_user_id: str
    :param display_name_user_display_name: The identity's display name. Note that this may not
     always be available or up to date. For example, if a user changes their display name, the API
     may show the new value in a future response, but the items associated with the user won't show
     up as having changed when using delta.
    :type display_name_user_display_name: str
    :param id_user_device_id: Unique identifier for the identity.
    :type id_user_device_id: str
    :param display_name_user_device_display_name: The identity's display name. Note that this may
     not always be available or up to date. For example, if a user changes their display name, the
     API may show the new value in a future response, but the items associated with the user won't
     show up as having changed when using delta.
    :type display_name_user_device_display_name: str
    :param id_user_application_id: Unique identifier for the identity.
    :type id_user_application_id: str
    :param display_name_user_application_display_name: The identity's display name. Note that this
     may not always be available or up to date. For example, if a user changes their display name,
     the API may show the new value in a future response, but the items associated with the user
     won't show up as having changed when using delta.
    :type display_name_user_application_display_name: str
    """

    _attribute_map = {
        'reaction_type': {'key': 'reactionType', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'id_user_id': {'key': 'user.user.id', 'type': 'str'},
        'display_name_user_display_name': {'key': 'user.user.displayName', 'type': 'str'},
        'id_user_device_id': {'key': 'user.device.id', 'type': 'str'},
        'display_name_user_device_display_name': {'key': 'user.device.displayName', 'type': 'str'},
        'id_user_application_id': {'key': 'user.application.id', 'type': 'str'},
        'display_name_user_application_display_name': {'key': 'user.application.displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphChatMessageReaction, self).__init__(**kwargs)
        self.reaction_type = kwargs.get('reaction_type', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.id_user_id = kwargs.get('id_user_id', None)
        self.display_name_user_display_name = kwargs.get('display_name_user_display_name', None)
        self.id_user_device_id = kwargs.get('id_user_device_id', None)
        self.display_name_user_device_display_name = kwargs.get('display_name_user_device_display_name', None)
        self.id_user_application_id = kwargs.get('id_user_application_id', None)
        self.display_name_user_application_display_name = kwargs.get('display_name_user_application_display_name', None)


class MicrosoftGraphConversationMember(MicrosoftGraphEntity):
    """conversationMember.

    :param id: Read-only.
    :type id: str
    :param roles:
    :type roles: list[str]
    :param display_name:
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'roles': {'key': 'roles', 'type': '[str]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConversationMember, self).__init__(**kwargs)
        self.roles = kwargs.get('roles', None)
        self.display_name = kwargs.get('display_name', None)


class MicrosoftGraphItemBody(msrest.serialization.Model):
    """itemBody.

    :param content_type: bodyType. Possible values include: "text", "html".
    :type content_type: str or ~teams_chats.models.MicrosoftGraphBodyType
    :param content: The content of the item.
    :type content: str
    """

    _attribute_map = {
        'content_type': {'key': 'contentType', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemBody, self).__init__(**kwargs)
        self.content_type = kwargs.get('content_type', None)
        self.content = kwargs.get('content', None)


class MicrosoftGraphTeamsApp(MicrosoftGraphEntity):
    """teamsApp.

    :param id: Read-only.
    :type id: str
    :param external_id: The ID of the catalog provided by the app developer in the Microsoft Teams
     zip app package.
    :type external_id: str
    :param name:
    :type name: str
    :param display_name: The name of the catalog app provided by the app developer in the Microsoft
     Teams zip app package.
    :type display_name: str
    :param distribution_method: teamsAppDistributionMethod. Possible values include: "store",
     "organization", "sideloaded", "unknownFutureValue".
    :type distribution_method: str or ~teams_chats.models.MicrosoftGraphTeamsAppDistributionMethod
    :param app_definitions: The details for each version of the app.
    :type app_definitions: list[~teams_chats.models.MicrosoftGraphTeamsAppDefinition]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'external_id': {'key': 'externalId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'distribution_method': {'key': 'distributionMethod', 'type': 'str'},
        'app_definitions': {'key': 'appDefinitions', 'type': '[MicrosoftGraphTeamsAppDefinition]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamsApp, self).__init__(**kwargs)
        self.external_id = kwargs.get('external_id', None)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)
        self.distribution_method = kwargs.get('distribution_method', None)
        self.app_definitions = kwargs.get('app_definitions', None)


class MicrosoftGraphTeamsAppDefinition(MicrosoftGraphEntity):
    """teamsAppDefinition.

    :param id: Read-only.
    :type id: str
    :param teams_app_id: The id from the Teams App manifest.
    :type teams_app_id: str
    :param display_name: The name of the app provided by the app developer.
    :type display_name: str
    :param version: The version number of the application.
    :type version: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'teams_app_id': {'key': 'teamsAppId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamsAppDefinition, self).__init__(**kwargs)
        self.teams_app_id = kwargs.get('teams_app_id', None)
        self.display_name = kwargs.get('display_name', None)
        self.version = kwargs.get('version', None)


class MicrosoftGraphTeamsAppInstallation(MicrosoftGraphEntity):
    """teamsAppInstallation.

    :param id: Read-only.
    :type id: str
    :param teams_app_definition: teamsAppDefinition.
    :type teams_app_definition: ~teams_chats.models.MicrosoftGraphTeamsAppDefinition
    :param id_teams_app_id: Read-only.
    :type id_teams_app_id: str
    :param external_id: The ID of the catalog provided by the app developer in the Microsoft Teams
     zip app package.
    :type external_id: str
    :param name:
    :type name: str
    :param display_name: The name of the catalog app provided by the app developer in the Microsoft
     Teams zip app package.
    :type display_name: str
    :param distribution_method: teamsAppDistributionMethod. Possible values include: "store",
     "organization", "sideloaded", "unknownFutureValue".
    :type distribution_method: str or ~teams_chats.models.MicrosoftGraphTeamsAppDistributionMethod
    :param app_definitions: The details for each version of the app.
    :type app_definitions: list[~teams_chats.models.MicrosoftGraphTeamsAppDefinition]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'teams_app_definition': {'key': 'teamsAppDefinition', 'type': 'MicrosoftGraphTeamsAppDefinition'},
        'id_teams_app_id': {'key': 'teamsApp.id', 'type': 'str'},
        'external_id': {'key': 'teamsApp.externalId', 'type': 'str'},
        'name': {'key': 'teamsApp.name', 'type': 'str'},
        'display_name': {'key': 'teamsApp.displayName', 'type': 'str'},
        'distribution_method': {'key': 'teamsApp.distributionMethod', 'type': 'str'},
        'app_definitions': {'key': 'teamsApp.appDefinitions', 'type': '[MicrosoftGraphTeamsAppDefinition]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTeamsAppInstallation, self).__init__(**kwargs)
        self.teams_app_definition = kwargs.get('teams_app_definition', None)
        self.id_teams_app_id = kwargs.get('id_teams_app_id', None)
        self.external_id = kwargs.get('external_id', None)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)
        self.distribution_method = kwargs.get('distribution_method', None)
        self.app_definitions = kwargs.get('app_definitions', None)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~teams_chats.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = kwargs['error']


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~teams_chats.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)
