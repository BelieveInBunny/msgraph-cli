# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CollectionOfSubscribedSku(msrest.serialization.Model):
    """Collection of subscribedSku.

    :param value:
    :type value: list[~identity_subscribed_skus.models.MicrosoftGraphSubscribedSku]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphSubscribedSku]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSubscribedSku, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class MicrosoftGraphLicenseUnitsDetail(msrest.serialization.Model):
    """licenseUnitsDetail.

    :param enabled: The number of units that are enabled.
    :type enabled: int
    :param suspended: The number of units that are suspended.
    :type suspended: int
    :param warning: The number of units that are in warning status.
    :type warning: int
    """

    _validation = {
        'enabled': {'maximum': 2147483647, 'minimum': -2147483648},
        'suspended': {'maximum': 2147483647, 'minimum': -2147483648},
        'warning': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'int'},
        'suspended': {'key': 'suspended', 'type': 'int'},
        'warning': {'key': 'warning', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLicenseUnitsDetail, self).__init__(**kwargs)
        self.enabled = kwargs.get('enabled', None)
        self.suspended = kwargs.get('suspended', None)
        self.warning = kwargs.get('warning', None)


class MicrosoftGraphServicePlanInfo(msrest.serialization.Model):
    """servicePlanInfo.

    :param service_plan_id: The unique identifier of the service plan.
    :type service_plan_id: str
    :param service_plan_name: The name of the service plan.
    :type service_plan_name: str
    :param provisioning_status: The provisioning status of the service plan. Possible
     values:'Success' - Service is fully provisioned.'Disabled' - Service has been
     disabled.'PendingInput' - Service is not yet provisioned; awaiting service
     confirmation.'PendingActivation' - Service is provisioned but requires explicit activation by
     administrator (for example, Intune_O365 service plan)'PendingProvisioning' - Microsoft has
     added a new service to the product SKU and it has not been activated in the tenant, yet.
    :type provisioning_status: str
    :param applies_to: The object the service plan can be assigned to. Possible values:'User' -
     service plan can be assigned to individual users.'Company' - service plan can be assigned to
     the entire tenant.
    :type applies_to: str
    """

    _attribute_map = {
        'service_plan_id': {'key': 'servicePlanId', 'type': 'str'},
        'service_plan_name': {'key': 'servicePlanName', 'type': 'str'},
        'provisioning_status': {'key': 'provisioningStatus', 'type': 'str'},
        'applies_to': {'key': 'appliesTo', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphServicePlanInfo, self).__init__(**kwargs)
        self.service_plan_id = kwargs.get('service_plan_id', None)
        self.service_plan_name = kwargs.get('service_plan_name', None)
        self.provisioning_status = kwargs.get('provisioning_status', None)
        self.applies_to = kwargs.get('applies_to', None)


class MicrosoftGraphSubscribedSku(MicrosoftGraphEntity):
    """subscribedSku.

    :param id: Read-only.
    :type id: str
    :param capability_status: Possible values are: Enabled, Warning, Suspended, Deleted, LockedOut.
    :type capability_status: str
    :param consumed_units: The number of licenses that have been assigned.
    :type consumed_units: int
    :param prepaid_units: licenseUnitsDetail.
    :type prepaid_units: ~identity_subscribed_skus.models.MicrosoftGraphLicenseUnitsDetail
    :param service_plans: Information about the service plans that are available with the SKU. Not
     nullable.
    :type service_plans: list[~identity_subscribed_skus.models.MicrosoftGraphServicePlanInfo]
    :param sku_id: The unique identifier (GUID) for the service SKU.
    :type sku_id: str
    :param sku_part_number: The SKU part number; for example: 'AAD_PREMIUM' or 'RMSBASIC'. To get a
     list of commercial subscriptions that an organization has acquired, see List subscribedSkus.
    :type sku_part_number: str
    :param applies_to: For example, 'User' or 'Company'.
    :type applies_to: str
    """

    _validation = {
        'consumed_units': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'capability_status': {'key': 'capabilityStatus', 'type': 'str'},
        'consumed_units': {'key': 'consumedUnits', 'type': 'int'},
        'prepaid_units': {'key': 'prepaidUnits', 'type': 'MicrosoftGraphLicenseUnitsDetail'},
        'service_plans': {'key': 'servicePlans', 'type': '[MicrosoftGraphServicePlanInfo]'},
        'sku_id': {'key': 'skuId', 'type': 'str'},
        'sku_part_number': {'key': 'skuPartNumber', 'type': 'str'},
        'applies_to': {'key': 'appliesTo', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSubscribedSku, self).__init__(**kwargs)
        self.capability_status = kwargs.get('capability_status', None)
        self.consumed_units = kwargs.get('consumed_units', None)
        self.prepaid_units = kwargs.get('prepaid_units', None)
        self.service_plans = kwargs.get('service_plans', None)
        self.sku_id = kwargs.get('sku_id', None)
        self.sku_part_number = kwargs.get('sku_part_number', None)
        self.applies_to = kwargs.get('applies_to', None)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~identity_subscribed_skus.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = kwargs['error']


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~identity_subscribed_skus.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)
