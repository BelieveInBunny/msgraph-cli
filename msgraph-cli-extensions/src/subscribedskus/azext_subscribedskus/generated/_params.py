# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azext_subscribedskus.action import (
    AddPrepaidUnits,
    AddServicePlans
)


def load_arguments(self, _):

    with self.argument_context('subscribedskus subscribed-sku-subscribed-sku update') as c:
        c.argument('subscribed_sku_id', help='key: subscribedSku-id of subscribedSku')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('capability_status', help='Possible values are: Enabled, Warning, Suspended, Deleted, LockedOut.')
        c.argument('consumed_units', help='The number of licenses that have been assigned.')
        c.argument('prepaid_units', action=AddPrepaidUnits, nargs='*', help='licenseUnitsDetail')
        c.argument('service_plans', action=AddServicePlans, nargs='*', help='Information about the service plans that '
                   'are available with the SKU. Not nullable')
        c.argument('sku_id', help='The unique identifier (GUID) for the service SKU.')
        c.argument('sku_part_number', help='The SKU part number; for example: \'AAD_PREMIUM\' or \'RMSBASIC\'. To get '
                   'a list of commercial subscriptions that an organization has acquired, see List subscribedSkus.')
        c.argument('applies_to', help='For example, \'User\' or \'Company\'.')

    with self.argument_context('subscribedskus subscribed-sku-subscribed-sku delete') as c:
        c.argument('subscribed_sku_id', help='key: subscribedSku-id of subscribedSku')
        c.argument('if_match', help='ETag')

    with self.argument_context('subscribedskus subscribed-sku-subscribed-sku create-subscribed-sku') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('capability_status', help='Possible values are: Enabled, Warning, Suspended, Deleted, LockedOut.')
        c.argument('consumed_units', help='The number of licenses that have been assigned.')
        c.argument('prepaid_units', action=AddPrepaidUnits, nargs='*', help='licenseUnitsDetail')
        c.argument('service_plans', action=AddServicePlans, nargs='*', help='Information about the service plans that '
                   'are available with the SKU. Not nullable')
        c.argument('sku_id', help='The unique identifier (GUID) for the service SKU.')
        c.argument('sku_part_number', help='The SKU part number; for example: \'AAD_PREMIUM\' or \'RMSBASIC\'. To get '
                   'a list of commercial subscriptions that an organization has acquired, see List subscribedSkus.')
        c.argument('applies_to', help='For example, \'User\' or \'Company\'.')

    with self.argument_context('subscribedskus subscribed-sku-subscribed-sku get-subscribed-sku') as c:
        c.argument('subscribed_sku_id', help='key: subscribedSku-id of subscribedSku')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('subscribedskus subscribed-sku-subscribed-sku list-subscribed-sku') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')
