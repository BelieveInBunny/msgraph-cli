# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class UserOperations(object):
    """UserOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~users_user_settings.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def get_setting(
        self,
        user_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Get1ItemsItem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get2ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphUserSettings"
        """Get settings from users.

        Get settings from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~users_user_settings.models.Get1ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~users_user_settings.models.Get2ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUserSettings, or the result of cls(response)
        :rtype: ~users_user_settings.models.MicrosoftGraphUserSettings
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUserSettings"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_setting.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUserSettings', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_setting.metadata = {'url': '/users/{user-id}/settings'}  # type: ignore

    def update_setting(
        self,
        user_id,  # type: str
        id=None,  # type: Optional[str]
        contribution_to_content_discovery_disabled=None,  # type: Optional[bool]
        contribution_to_content_discovery_as_organization_disabled=None,  # type: Optional[bool]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        application=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        device=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        user=None,  # type: Optional["models.MicrosoftGraphIdentity"]
        availability=None,  # type: Optional[List["models.MicrosoftGraphShiftAvailability"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property settings in users.

        Update the navigation property settings in users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param contribution_to_content_discovery_disabled:
        :type contribution_to_content_discovery_disabled: bool
        :param contribution_to_content_discovery_as_organization_disabled:
        :type contribution_to_content_discovery_as_organization_disabled: bool
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param application: identity.
        :type application: ~users_user_settings.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~users_user_settings.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~users_user_settings.models.MicrosoftGraphIdentity
        :param availability:
        :type availability: list[~users_user_settings.models.MicrosoftGraphShiftAvailability]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphUserSettings(id=id, contribution_to_content_discovery_disabled=contribution_to_content_discovery_disabled, contribution_to_content_discovery_as_organization_disabled=contribution_to_content_discovery_as_organization_disabled, id_shift_preferences_id=microsoft_graph_entity_id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, application=application, device=device, user=user, availability=availability)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_setting.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphUserSettings')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_setting.metadata = {'url': '/users/{user-id}/settings'}  # type: ignore
