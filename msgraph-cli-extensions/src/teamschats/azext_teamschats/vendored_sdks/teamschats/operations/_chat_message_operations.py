# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class ChatMessageOperations(object):
    """ChatMessageOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~teams_chats.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_hosted_content(
        self,
        chat_id,  # type: str
        chat_message_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum28"]]]
        select=None,  # type: Optional[List[str]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfChatMessageHostedContent"]
        """Get hostedContents from chats.

        Get hostedContents from chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param chat_message_id: key: chatMessage-id of chatMessage.
        :type chat_message_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams_chats.models.Enum28]
        :param select: Select properties to be returned.
        :type select: list[str]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfChatMessageHostedContent or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams_chats.models.CollectionOfChatMessageHostedContent]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfChatMessageHostedContent"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_hosted_content.metadata['url']  # type: ignore
                path_format_arguments = {
                    'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
                    'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfChatMessageHostedContent', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_hosted_content.metadata = {'url': '/chats/{chat-id}/messages/{chatMessage-id}/hostedContents'}  # type: ignore

    def create_hosted_content(
        self,
        chat_id,  # type: str
        chat_message_id,  # type: str
        id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphEntity"
        """Create new navigation property to hostedContents for chats.

        Create new navigation property to hostedContents for chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param chat_message_id: key: chatMessage-id of chatMessage.
        :type chat_message_id: str
        :param id: Read-only.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEntity, or the result of cls(response)
        :rtype: ~teams_chats.models.MicrosoftGraphEntity
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEntity"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEntity(id=id)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_hosted_content.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEntity')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEntity', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_hosted_content.metadata = {'url': '/chats/{chat-id}/messages/{chatMessage-id}/hostedContents'}  # type: ignore

    def get_hosted_content(
        self,
        chat_id,  # type: str
        chat_message_id,  # type: str
        chat_message_hosted_content_id,  # type: str
        select=None,  # type: Optional[List[str]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphEntity"
        """Get hostedContents from chats.

        Get hostedContents from chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param chat_message_id: key: chatMessage-id of chatMessage.
        :type chat_message_id: str
        :param chat_message_hosted_content_id: key: chatMessageHostedContent-id of
         chatMessageHostedContent.
        :type chat_message_hosted_content_id: str
        :param select: Select properties to be returned.
        :type select: list[str]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEntity, or the result of cls(response)
        :rtype: ~teams_chats.models.MicrosoftGraphEntity
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEntity"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_hosted_content.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
            'chatMessageHostedContent-id': self._serialize.url("chat_message_hosted_content_id", chat_message_hosted_content_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEntity', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_hosted_content.metadata = {'url': '/chats/{chat-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}'}  # type: ignore

    def update_hosted_content(
        self,
        chat_id,  # type: str
        chat_message_id,  # type: str
        chat_message_hosted_content_id,  # type: str
        id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property hostedContents in chats.

        Update the navigation property hostedContents in chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param chat_message_id: key: chatMessage-id of chatMessage.
        :type chat_message_id: str
        :param chat_message_hosted_content_id: key: chatMessageHostedContent-id of
         chatMessageHostedContent.
        :type chat_message_hosted_content_id: str
        :param id: Read-only.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEntity(id=id)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_hosted_content.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
            'chatMessageHostedContent-id': self._serialize.url("chat_message_hosted_content_id", chat_message_hosted_content_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEntity')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_hosted_content.metadata = {'url': '/chats/{chat-id}/messages/{chatMessage-id}/hostedContents/{chatMessageHostedContent-id}'}  # type: ignore

    def list_reply(
        self,
        chat_id,  # type: str
        chat_message_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum29"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum30"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum31"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfChatMessage0"]
        """Get replies from chats.

        Get replies from chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param chat_message_id: key: chatMessage-id of chatMessage.
        :type chat_message_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams_chats.models.Enum29]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams_chats.models.Enum30]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams_chats.models.Enum31]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfChatMessage0 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams_chats.models.CollectionOfChatMessage0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfChatMessage0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_reply.metadata['url']  # type: ignore
                path_format_arguments = {
                    'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
                    'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfChatMessage0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_reply.metadata = {'url': '/chats/{chat-id}/messages/{chatMessage-id}/replies'}  # type: ignore

    def create_reply(
        self,
        chat_id,  # type: str
        chat_message_id,  # type: str
        id=None,  # type: Optional[str]
        reply_to_id=None,  # type: Optional[str]
        etag=None,  # type: Optional[str]
        message_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessageType"]]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        deleted_date_time=None,  # type: Optional[datetime.datetime]
        subject=None,  # type: Optional[str]
        body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        summary=None,  # type: Optional[str]
        attachments=None,  # type: Optional[List["models.MicrosoftGraphChatMessageAttachment"]]
        mentions=None,  # type: Optional[List["models.MicrosoftGraphChatMessageMention"]]
        importance=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessageImportance"]]
        reactions=None,  # type: Optional[List["models.MicrosoftGraphChatMessageReaction"]]
        locale=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        replies=None,  # type: Optional[List["models.MicrosoftGraphChatMessage"]]
        hosted_contents=None,  # type: Optional[List["models.MicrosoftGraphEntity"]]
        dlp_action=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes"]]
        justification_text=None,  # type: Optional[str]
        policy_tip=None,  # type: Optional["models.MicrosoftGraphChatMessagePolicyViolationPolicyTip"]
        user_action=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes"]]
        verdict_details=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes"]]
        microsoft_graph_identity_id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        microsoft_graph_identity_display_name=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        display_name1=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphChatMessage"
        """Create new navigation property to replies for chats.

        Create new navigation property to replies for chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param chat_message_id: key: chatMessage-id of chatMessage.
        :type chat_message_id: str
        :param id: Read-only.
        :type id: str
        :param reply_to_id:
        :type reply_to_id: str
        :param etag:
        :type etag: str
        :param message_type:
        :type message_type: str or ~teams_chats.models.MicrosoftGraphChatMessageType
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param subject:
        :type subject: str
        :param body: itemBody.
        :type body: ~teams_chats.models.MicrosoftGraphItemBody
        :param summary:
        :type summary: str
        :param attachments:
        :type attachments: list[~teams_chats.models.MicrosoftGraphChatMessageAttachment]
        :param mentions:
        :type mentions: list[~teams_chats.models.MicrosoftGraphChatMessageMention]
        :param importance:
        :type importance: str or ~teams_chats.models.MicrosoftGraphChatMessageImportance
        :param reactions:
        :type reactions: list[~teams_chats.models.MicrosoftGraphChatMessageReaction]
        :param locale:
        :type locale: str
        :param web_url:
        :type web_url: str
        :param replies:
        :type replies: list[~teams_chats.models.MicrosoftGraphChatMessage]
        :param hosted_contents:
        :type hosted_contents: list[~teams_chats.models.MicrosoftGraphEntity]
        :param dlp_action:
        :type dlp_action: str or ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes
        :param justification_text:
        :type justification_text: str
        :param policy_tip: chatMessagePolicyViolationPolicyTip.
        :type policy_tip: ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationPolicyTip
        :param user_action:
        :type user_action: str or ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes
        :param verdict_details:
        :type verdict_details: str or ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphChatMessage, or the result of cls(response)
        :rtype: ~teams_chats.models.MicrosoftGraphChatMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphChatMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphChatMessage(id=id, reply_to_id=reply_to_id, etag=etag, message_type=message_type, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, deleted_date_time=deleted_date_time, subject=subject, body=body, summary=summary, attachments=attachments, mentions=mentions, importance=importance, reactions=reactions, locale=locale, web_url=web_url, replies=replies, hosted_contents=hosted_contents, dlp_action=dlp_action, justification_text=justification_text, policy_tip=policy_tip, user_action=user_action, verdict_details=verdict_details, id_from_user_id=microsoft_graph_identity_id, display_name_from_user_display_name=display_name, id_from_device_id=id1, display_name_from_device_display_name=microsoft_graph_identity_display_name, id_from_application_id=id2, display_name_from_application_display_name=display_name1)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_reply.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphChatMessage')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphChatMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_reply.metadata = {'url': '/chats/{chat-id}/messages/{chatMessage-id}/replies'}  # type: ignore

    def get_reply(
        self,
        chat_id,  # type: str
        chat_message_id,  # type: str
        chat_message_id1,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum32"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum33"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphChatMessage"
        """Get replies from chats.

        Get replies from chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param chat_message_id: key: chatMessage-id of chatMessage.
        :type chat_message_id: str
        :param chat_message_id1: key: chatMessage-id of chatMessage.
        :type chat_message_id1: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams_chats.models.Enum32]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams_chats.models.Enum33]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphChatMessage, or the result of cls(response)
        :rtype: ~teams_chats.models.MicrosoftGraphChatMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphChatMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_reply.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
            'chatMessage-id1': self._serialize.url("chat_message_id1", chat_message_id1, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphChatMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_reply.metadata = {'url': '/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}'}  # type: ignore

    def update_reply(
        self,
        chat_id,  # type: str
        chat_message_id,  # type: str
        chat_message_id1,  # type: str
        id=None,  # type: Optional[str]
        reply_to_id=None,  # type: Optional[str]
        etag=None,  # type: Optional[str]
        message_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessageType"]]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        deleted_date_time=None,  # type: Optional[datetime.datetime]
        subject=None,  # type: Optional[str]
        body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        summary=None,  # type: Optional[str]
        attachments=None,  # type: Optional[List["models.MicrosoftGraphChatMessageAttachment"]]
        mentions=None,  # type: Optional[List["models.MicrosoftGraphChatMessageMention"]]
        importance=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessageImportance"]]
        reactions=None,  # type: Optional[List["models.MicrosoftGraphChatMessageReaction"]]
        locale=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        replies=None,  # type: Optional[List["models.MicrosoftGraphChatMessage"]]
        hosted_contents=None,  # type: Optional[List["models.MicrosoftGraphEntity"]]
        dlp_action=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes"]]
        justification_text=None,  # type: Optional[str]
        policy_tip=None,  # type: Optional["models.MicrosoftGraphChatMessagePolicyViolationPolicyTip"]
        user_action=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes"]]
        verdict_details=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes"]]
        microsoft_graph_identity_id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        microsoft_graph_identity_display_name=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        display_name1=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property replies in chats.

        Update the navigation property replies in chats.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :param chat_message_id: key: chatMessage-id of chatMessage.
        :type chat_message_id: str
        :param chat_message_id1: key: chatMessage-id of chatMessage.
        :type chat_message_id1: str
        :param id: Read-only.
        :type id: str
        :param reply_to_id:
        :type reply_to_id: str
        :param etag:
        :type etag: str
        :param message_type:
        :type message_type: str or ~teams_chats.models.MicrosoftGraphChatMessageType
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param subject:
        :type subject: str
        :param body: itemBody.
        :type body: ~teams_chats.models.MicrosoftGraphItemBody
        :param summary:
        :type summary: str
        :param attachments:
        :type attachments: list[~teams_chats.models.MicrosoftGraphChatMessageAttachment]
        :param mentions:
        :type mentions: list[~teams_chats.models.MicrosoftGraphChatMessageMention]
        :param importance:
        :type importance: str or ~teams_chats.models.MicrosoftGraphChatMessageImportance
        :param reactions:
        :type reactions: list[~teams_chats.models.MicrosoftGraphChatMessageReaction]
        :param locale:
        :type locale: str
        :param web_url:
        :type web_url: str
        :param replies:
        :type replies: list[~teams_chats.models.MicrosoftGraphChatMessage]
        :param hosted_contents:
        :type hosted_contents: list[~teams_chats.models.MicrosoftGraphEntity]
        :param dlp_action:
        :type dlp_action: str or ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes
        :param justification_text:
        :type justification_text: str
        :param policy_tip: chatMessagePolicyViolationPolicyTip.
        :type policy_tip: ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationPolicyTip
        :param user_action:
        :type user_action: str or ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes
        :param verdict_details:
        :type verdict_details: str or ~teams_chats.models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphChatMessage(id=id, reply_to_id=reply_to_id, etag=etag, message_type=message_type, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, deleted_date_time=deleted_date_time, subject=subject, body=body, summary=summary, attachments=attachments, mentions=mentions, importance=importance, reactions=reactions, locale=locale, web_url=web_url, replies=replies, hosted_contents=hosted_contents, dlp_action=dlp_action, justification_text=justification_text, policy_tip=policy_tip, user_action=user_action, verdict_details=verdict_details, id_from_user_id=microsoft_graph_identity_id, display_name_from_user_display_name=display_name, id_from_device_id=id1, display_name_from_device_display_name=microsoft_graph_identity_display_name, id_from_application_id=id2, display_name_from_application_display_name=display_name1)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_reply.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
            'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
            'chatMessage-id1': self._serialize.url("chat_message_id1", chat_message_id1, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphChatMessage')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_reply.metadata = {'url': '/chats/{chat-id}/messages/{chatMessage-id}/replies/{chatMessage-id1}'}  # type: ignore

    def delta(
        self,
        chat_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.MicrosoftGraphChatMessage"]
        """Invoke function delta.

        Invoke function delta.

        :param chat_id: key: chat-id of chat.
        :type chat_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphChatMessage, or the result of cls(response)
        :rtype: list[~teams_chats.models.MicrosoftGraphChatMessage]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphChatMessage"]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.delta.metadata['url']  # type: ignore
        path_format_arguments = {
            'chat-id': self._serialize.url("chat_id", chat_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphChatMessage]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    delta.metadata = {'url': '/chats/{chat-id}/messages/microsoft.graph.delta()'}  # type: ignore
