# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum12(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum13(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Enum15(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Enum17(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    EXTERNAL_ID = "externalId"
    NAME = "name"
    DISPLAY_NAME = "displayName"
    DISTRIBUTION_METHOD = "distributionMethod"
    APP_DEFINITIONS = "appDefinitions"

class Enum18(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_DEFINITIONS = "appDefinitions"

class Enum19(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TEAMS_APP_ID = "teamsAppId"
    DISPLAY_NAME = "displayName"
    VERSION = "version"

class Enum20(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ROLES = "roles"
    ROLES_DESC = "roles desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"

class Enum21(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ROLES = "roles"
    DISPLAY_NAME = "displayName"

class Enum22(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ROLES = "roles"
    DISPLAY_NAME = "displayName"

class Enum23(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    REPLY_TO_ID = "replyToId"
    REPLY_TO_ID_DESC = "replyToId desc"
    FROM_ENUM = "from"
    FROM_DESC = "from desc"
    ETAG = "etag"
    ETAG_DESC = "etag desc"
    MESSAGE_TYPE = "messageType"
    MESSAGE_TYPE_DESC = "messageType desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    SUBJECT = "subject"
    SUBJECT_DESC = "subject desc"
    BODY = "body"
    BODY_DESC = "body desc"
    SUMMARY = "summary"
    SUMMARY_DESC = "summary desc"
    ATTACHMENTS = "attachments"
    ATTACHMENTS_DESC = "attachments desc"
    MENTIONS = "mentions"
    MENTIONS_DESC = "mentions desc"
    IMPORTANCE = "importance"
    IMPORTANCE_DESC = "importance desc"
    POLICY_VIOLATION = "policyViolation"
    POLICY_VIOLATION_DESC = "policyViolation desc"
    REACTIONS = "reactions"
    REACTIONS_DESC = "reactions desc"
    LOCALE = "locale"
    LOCALE_DESC = "locale desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum24(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    REPLY_TO_ID = "replyToId"
    FROM_ENUM = "from"
    ETAG = "etag"
    MESSAGE_TYPE = "messageType"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    SUBJECT = "subject"
    BODY = "body"
    SUMMARY = "summary"
    ATTACHMENTS = "attachments"
    MENTIONS = "mentions"
    IMPORTANCE = "importance"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    LOCALE = "locale"
    WEB_URL = "webUrl"
    REPLIES = "replies"
    HOSTED_CONTENTS = "hostedContents"

class Enum25(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    REPLIES = "replies"
    HOSTED_CONTENTS = "hostedContents"

class Enum26(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    REPLY_TO_ID = "replyToId"
    FROM_ENUM = "from"
    ETAG = "etag"
    MESSAGE_TYPE = "messageType"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    SUBJECT = "subject"
    BODY = "body"
    SUMMARY = "summary"
    ATTACHMENTS = "attachments"
    MENTIONS = "mentions"
    IMPORTANCE = "importance"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    LOCALE = "locale"
    WEB_URL = "webUrl"
    REPLIES = "replies"
    HOSTED_CONTENTS = "hostedContents"

class Enum27(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    REPLIES = "replies"
    HOSTED_CONTENTS = "hostedContents"

class Enum28(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"

class Enum29(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    REPLY_TO_ID = "replyToId"
    REPLY_TO_ID_DESC = "replyToId desc"
    FROM_ENUM = "from"
    FROM_DESC = "from desc"
    ETAG = "etag"
    ETAG_DESC = "etag desc"
    MESSAGE_TYPE = "messageType"
    MESSAGE_TYPE_DESC = "messageType desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    DELETED_DATE_TIME = "deletedDateTime"
    DELETED_DATE_TIME_DESC = "deletedDateTime desc"
    SUBJECT = "subject"
    SUBJECT_DESC = "subject desc"
    BODY = "body"
    BODY_DESC = "body desc"
    SUMMARY = "summary"
    SUMMARY_DESC = "summary desc"
    ATTACHMENTS = "attachments"
    ATTACHMENTS_DESC = "attachments desc"
    MENTIONS = "mentions"
    MENTIONS_DESC = "mentions desc"
    IMPORTANCE = "importance"
    IMPORTANCE_DESC = "importance desc"
    POLICY_VIOLATION = "policyViolation"
    POLICY_VIOLATION_DESC = "policyViolation desc"
    REACTIONS = "reactions"
    REACTIONS_DESC = "reactions desc"
    LOCALE = "locale"
    LOCALE_DESC = "locale desc"
    WEB_URL = "webUrl"
    WEB_URL_DESC = "webUrl desc"

class Enum30(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    REPLY_TO_ID = "replyToId"
    FROM_ENUM = "from"
    ETAG = "etag"
    MESSAGE_TYPE = "messageType"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    SUBJECT = "subject"
    BODY = "body"
    SUMMARY = "summary"
    ATTACHMENTS = "attachments"
    MENTIONS = "mentions"
    IMPORTANCE = "importance"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    LOCALE = "locale"
    WEB_URL = "webUrl"
    REPLIES = "replies"
    HOSTED_CONTENTS = "hostedContents"

class Enum31(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    REPLIES = "replies"
    HOSTED_CONTENTS = "hostedContents"

class Enum32(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    REPLY_TO_ID = "replyToId"
    FROM_ENUM = "from"
    ETAG = "etag"
    MESSAGE_TYPE = "messageType"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    DELETED_DATE_TIME = "deletedDateTime"
    SUBJECT = "subject"
    BODY = "body"
    SUMMARY = "summary"
    ATTACHMENTS = "attachments"
    MENTIONS = "mentions"
    IMPORTANCE = "importance"
    POLICY_VIOLATION = "policyViolation"
    REACTIONS = "reactions"
    LOCALE = "locale"
    WEB_URL = "webUrl"
    REPLIES = "replies"
    HOSTED_CONTENTS = "hostedContents"

class Enum33(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    REPLIES = "replies"
    HOSTED_CONTENTS = "hostedContents"

class Enum34(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    TOPIC = "topic"
    TOPIC_DESC = "topic desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    LAST_UPDATED_DATE_TIME_DESC = "lastUpdatedDateTime desc"

class Enum35(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TOPIC = "topic"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    MEMBERS = "members"
    MESSAGES = "messages"
    INSTALLED_APPS = "installedApps"

class Enum36(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    MEMBERS = "members"
    MESSAGES = "messages"
    INSTALLED_APPS = "installedApps"

class Enum37(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TOPIC = "topic"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    MEMBERS = "members"
    MESSAGES = "messages"
    INSTALLED_APPS = "installedApps"

class Enum38(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    MEMBERS = "members"
    MESSAGES = "messages"
    INSTALLED_APPS = "installedApps"

class Get1ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TOPIC = "topic"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    MEMBERS = "members"
    MESSAGES = "messages"
    INSTALLED_APPS = "installedApps"

class Get2ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    MEMBERS = "members"
    MESSAGES = "messages"
    INSTALLED_APPS = "installedApps"

class Get3ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class Get5ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    TOPIC = "topic"
    TOPIC_DESC = "topic desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    LAST_UPDATED_DATE_TIME_DESC = "lastUpdatedDateTime desc"

class Get6ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    TOPIC = "topic"
    CREATED_DATE_TIME = "createdDateTime"
    LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime"
    MEMBERS = "members"
    MESSAGES = "messages"
    INSTALLED_APPS = "installedApps"

class Get7ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    MEMBERS = "members"
    MESSAGES = "messages"
    INSTALLED_APPS = "installedApps"

class Get8ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    TEAMS_APP = "teamsApp"
    TEAMS_APP_DEFINITION = "teamsAppDefinition"

class MicrosoftGraphBodyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TEXT = "text"
    HTML = "html"

class MicrosoftGraphChatMessageImportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"

class MicrosoftGraphChatMessagePolicyViolationDlpActionTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    NOTIFY_SENDER = "notifySender"
    BLOCK_ACCESS = "blockAccess"
    BLOCK_ACCESS_EXTERNAL = "blockAccessExternal"

class MicrosoftGraphChatMessagePolicyViolationUserActionTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    OVERRIDE = "override"
    REPORT_FALSE_POSITIVE = "reportFalsePositive"

class MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ALLOW_FALSE_POSITIVE_OVERRIDE = "allowFalsePositiveOverride"
    ALLOW_OVERRIDE_WITHOUT_JUSTIFICATION = "allowOverrideWithoutJustification"
    ALLOW_OVERRIDE_WITH_JUSTIFICATION = "allowOverrideWithJustification"

class MicrosoftGraphChatMessageType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MESSAGE = "message"
    CHAT_EVENT = "chatEvent"
    TYPING = "typing"

class MicrosoftGraphTeamsAppDistributionMethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STORE = "store"
    ORGANIZATION = "organization"
    SIDELOADED = "sideloaded"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"
