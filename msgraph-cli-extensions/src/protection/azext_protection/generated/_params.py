# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_protection.action import (
    AddLocationGeoCoordinates,
    AddActivity
)


def load_arguments(self, _):

    with self.argument_context('protection anonymou-ip-risk-event-anonymou-ip-risk-event update') as c:
        c.argument('anonymous_ip_risk_event_id', help='key: anonymousIpRiskEvent-id of anonymousIpRiskEvent')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('risk_event_date_time', help='')
        c.argument('risk_event_type', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_event_status', arg_type=get_enum_type(['active', 'remediated', 'dismissedAsFixed', ''
                   'dismissedAsFalsePositive', 'dismissedAsIgnore', 'loginBlocked', 'closedMfaAuto', ''
                   'closedMultipleReasons']), help='riskEventStatus')
        c.argument('closed_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('user_id', help='')
        c.argument('impacted_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/@json-file.')
        c.argument('ip_address', help='')
        c.argument('location_city', help='Provides the city where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_state', help='Provides the State where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_country_or_region', help='Provides the country code info (2 letter code) where the '
                   'sign-in originated.  This is calculated using latitude/longitude information from the sign-in '
                   'activity.')
        c.argument('location_geo_coordinates', action=AddLocationGeoCoordinates, nargs='*', help='geoCoordinates')

    with self.argument_context('protection anonymou-ip-risk-event-anonymou-ip-risk-event delete') as c:
        c.argument('anonymous_ip_risk_event_id', help='key: anonymousIpRiskEvent-id of anonymousIpRiskEvent')
        c.argument('if_match', help='ETag')

    with self.argument_context('protection anonymou-ip-risk-event-anonymou-ip-risk-event create-anonymou-ip-risk-event') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('risk_event_date_time', help='')
        c.argument('risk_event_type', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_event_status', arg_type=get_enum_type(['active', 'remediated', 'dismissedAsFixed', ''
                   'dismissedAsFalsePositive', 'dismissedAsIgnore', 'loginBlocked', 'closedMfaAuto', ''
                   'closedMultipleReasons']), help='riskEventStatus')
        c.argument('closed_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('user_id', help='')
        c.argument('impacted_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/@json-file.')
        c.argument('ip_address', help='')
        c.argument('location_city', help='Provides the city where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_state', help='Provides the State where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_country_or_region', help='Provides the country code info (2 letter code) where the '
                   'sign-in originated.  This is calculated using latitude/longitude information from the sign-in '
                   'activity.')
        c.argument('location_geo_coordinates', action=AddLocationGeoCoordinates, nargs='*', help='geoCoordinates')

    with self.argument_context('protection anonymou-ip-risk-event-anonymou-ip-risk-event get-anonymou-ip-risk-event') as c:
        c.argument('anonymous_ip_risk_event_id', help='key: anonymousIpRiskEvent-id of anonymousIpRiskEvent')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection anonymou-ip-risk-event-anonymou-ip-risk-event list-anonymou-ip-risk-event') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection identity-risk-event-identity-risk-event update') as c:
        c.argument('identity_risk_event_id', help='key: identityRiskEvent-id of identityRiskEvent')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('risk_event_date_time', help='')
        c.argument('risk_event_type', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_event_status', arg_type=get_enum_type(['active', 'remediated', 'dismissedAsFixed', ''
                   'dismissedAsFalsePositive', 'dismissedAsIgnore', 'loginBlocked', 'closedMfaAuto', ''
                   'closedMultipleReasons']), help='riskEventStatus')
        c.argument('closed_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('user_id', help='')
        c.argument('impacted_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/@json-file.')

    with self.argument_context('protection identity-risk-event-identity-risk-event delete') as c:
        c.argument('identity_risk_event_id', help='key: identityRiskEvent-id of identityRiskEvent')
        c.argument('if_match', help='ETag')

    with self.argument_context('protection identity-risk-event-identity-risk-event create-identity-risk-event') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('risk_event_date_time', help='')
        c.argument('risk_event_type', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_event_status', arg_type=get_enum_type(['active', 'remediated', 'dismissedAsFixed', ''
                   'dismissedAsFalsePositive', 'dismissedAsIgnore', 'loginBlocked', 'closedMfaAuto', ''
                   'closedMultipleReasons']), help='riskEventStatus')
        c.argument('closed_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('user_id', help='')
        c.argument('impacted_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/@json-file.')

    with self.argument_context('protection identity-risk-event-identity-risk-event get-identity-risk-event') as c:
        c.argument('identity_risk_event_id', help='key: identityRiskEvent-id of identityRiskEvent')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection identity-risk-event-identity-risk-event list-identity-risk-event') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection identity-risk-event get-impacted-user') as c:
        c.argument('identity_risk_event_id', help='key: identityRiskEvent-id of identityRiskEvent')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection impossible-travel-risk-event-impossible-travel-risk-event update') as c:
        c.argument('impossible_travel_risk_event_id', help='key: impossibleTravelRiskEvent-id of '
                   'impossibleTravelRiskEvent')
        c.argument('body', type=validate_file_or_dict, help='New property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('protection impossible-travel-risk-event-impossible-travel-risk-event delete') as c:
        c.argument('impossible_travel_risk_event_id', help='key: impossibleTravelRiskEvent-id of '
                   'impossibleTravelRiskEvent')
        c.argument('if_match', help='ETag')

    with self.argument_context('protection impossible-travel-risk-event-impossible-travel-risk-event create-impossible-travel-risk-event') as c:
        c.argument('body', type=validate_file_or_dict, help='New entity Expected value: json-string/@json-file.')

    with self.argument_context('protection impossible-travel-risk-event-impossible-travel-risk-event get-impossible-travel-risk-event') as c:
        c.argument('impossible_travel_risk_event_id', help='key: impossibleTravelRiskEvent-id of '
                   'impossibleTravelRiskEvent')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection impossible-travel-risk-event-impossible-travel-risk-event list-impossible-travel-risk-event') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection leaked-credentials-risk-event-leaked-credentials-risk-event update') as c:
        c.argument('leaked_credentials_risk_event_id', help='key: leakedCredentialsRiskEvent-id of '
                   'leakedCredentialsRiskEvent')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('risk_event_date_time', help='')
        c.argument('risk_event_type', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_event_status', arg_type=get_enum_type(['active', 'remediated', 'dismissedAsFixed', ''
                   'dismissedAsFalsePositive', 'dismissedAsIgnore', 'loginBlocked', 'closedMfaAuto', ''
                   'closedMultipleReasons']), help='riskEventStatus')
        c.argument('closed_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('user_id', help='')
        c.argument('impacted_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/@json-file.')

    with self.argument_context('protection leaked-credentials-risk-event-leaked-credentials-risk-event delete') as c:
        c.argument('leaked_credentials_risk_event_id', help='key: leakedCredentialsRiskEvent-id of '
                   'leakedCredentialsRiskEvent')
        c.argument('if_match', help='ETag')

    with self.argument_context('protection leaked-credentials-risk-event-leaked-credentials-risk-event create-leaked-credentials-risk-event') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('risk_event_date_time', help='')
        c.argument('risk_event_type', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_event_status', arg_type=get_enum_type(['active', 'remediated', 'dismissedAsFixed', ''
                   'dismissedAsFalsePositive', 'dismissedAsIgnore', 'loginBlocked', 'closedMfaAuto', ''
                   'closedMultipleReasons']), help='riskEventStatus')
        c.argument('closed_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('user_id', help='')
        c.argument('impacted_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/@json-file.')

    with self.argument_context('protection leaked-credentials-risk-event-leaked-credentials-risk-event get-leaked-credentials-risk-event') as c:
        c.argument('leaked_credentials_risk_event_id', help='key: leakedCredentialsRiskEvent-id of '
                   'leakedCredentialsRiskEvent')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection leaked-credentials-risk-event-leaked-credentials-risk-event list-leaked-credentials-risk-event') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection malware-risk-event-malware-risk-event update') as c:
        c.argument('malware_risk_event_id', help='key: malwareRiskEvent-id of malwareRiskEvent')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('risk_event_date_time', help='')
        c.argument('risk_event_type', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_event_status', arg_type=get_enum_type(['active', 'remediated', 'dismissedAsFixed', ''
                   'dismissedAsFalsePositive', 'dismissedAsIgnore', 'loginBlocked', 'closedMfaAuto', ''
                   'closedMultipleReasons']), help='riskEventStatus')
        c.argument('closed_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('user_id', help='')
        c.argument('impacted_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/@json-file.')
        c.argument('ip_address', help='')
        c.argument('location_city', help='Provides the city where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_state', help='Provides the State where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_country_or_region', help='Provides the country code info (2 letter code) where the '
                   'sign-in originated.  This is calculated using latitude/longitude information from the sign-in '
                   'activity.')
        c.argument('location_geo_coordinates', action=AddLocationGeoCoordinates, nargs='*', help='geoCoordinates')
        c.argument('device_information', help='')
        c.argument('malware_name', help='')

    with self.argument_context('protection malware-risk-event-malware-risk-event delete') as c:
        c.argument('malware_risk_event_id', help='key: malwareRiskEvent-id of malwareRiskEvent')
        c.argument('if_match', help='ETag')

    with self.argument_context('protection malware-risk-event-malware-risk-event create-malware-risk-event') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('risk_event_date_time', help='')
        c.argument('risk_event_type', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_event_status', arg_type=get_enum_type(['active', 'remediated', 'dismissedAsFixed', ''
                   'dismissedAsFalsePositive', 'dismissedAsIgnore', 'loginBlocked', 'closedMfaAuto', ''
                   'closedMultipleReasons']), help='riskEventStatus')
        c.argument('closed_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('user_id', help='')
        c.argument('impacted_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/@json-file.')
        c.argument('ip_address', help='')
        c.argument('location_city', help='Provides the city where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_state', help='Provides the State where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_country_or_region', help='Provides the country code info (2 letter code) where the '
                   'sign-in originated.  This is calculated using latitude/longitude information from the sign-in '
                   'activity.')
        c.argument('location_geo_coordinates', action=AddLocationGeoCoordinates, nargs='*', help='geoCoordinates')
        c.argument('device_information', help='')
        c.argument('malware_name', help='')

    with self.argument_context('protection malware-risk-event-malware-risk-event get-malware-risk-event') as c:
        c.argument('malware_risk_event_id', help='key: malwareRiskEvent-id of malwareRiskEvent')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection malware-risk-event-malware-risk-event list-malware-risk-event') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection risk-detection-risk-detection update') as c:
        c.argument('risk_detection_id', help='key: riskDetection-id of riskDetection')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('request_id', help='')
        c.argument('correlation_id', help='')
        c.argument('risk_event_type', help='')
        c.argument('risk_type', arg_type=get_enum_type(['unlikelyTravel', 'anonymizedIPAddress', 'maliciousIPAddress',
                   'unfamiliarFeatures', 'malwareInfectedIPAddress', 'suspiciousIPAddress', 'leakedCredentials', ''
                   'investigationsThreatIntelligence', 'generic', 'adminConfirmedUserCompromised', ''
                   'mcasImpossibleTravel', 'mcasSuspiciousInboxManipulationRules', 'investigationsThreatIntelligenceSig'
                   'ninLinked', 'maliciousIPAddressValidCredentialsBlockedIP', 'unknownFutureValue']), help=''
                   'riskEventType')
        c.argument('risk_state', arg_type=get_enum_type(['none', 'confirmedSafe', 'remediated', 'dismissed', 'atRisk',
                   'confirmedCompromised', 'unknownFutureValue']), help='riskState')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_detail', arg_type=get_enum_type(['none', 'adminGeneratedTemporaryPassword', ''
                   'userPerformedSecuredPasswordChange', 'userPerformedSecuredPasswordReset', ''
                   'adminConfirmedSigninSafe', 'aiConfirmedSigninSafe', 'userPassedMFADrivenByRiskBasedPolicy', ''
                   'adminDismissedAllRiskForUser', 'adminConfirmedSigninCompromised', 'hidden', ''
                   'adminConfirmedUserCompromised', 'unknownFutureValue']), help='riskDetail')
        c.argument('source', help='')
        c.argument('detection_timing_type', arg_type=get_enum_type(['notDefined', 'realtime', 'nearRealtime',
                   'offline', 'unknownFutureValue']), help='riskDetectionTimingType')
        c.argument('activity', arg_type=get_enum_type(['signin', 'user', 'unknownFutureValue']), help='activityType')
        c.argument('token_issuer_type', arg_type=get_enum_type(['AzureAD', 'ADFederationServices',
                   'UnknownFutureValue']), help='tokenIssuerType')
        c.argument('ip_address', help='')
        c.argument('activity_date_time', help='')
        c.argument('detected_date_time', help='')
        c.argument('last_updated_date_time', help='')
        c.argument('user_id', help='')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('additional_info', help='')
        c.argument('location_city', help='Provides the city where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_state', help='Provides the State where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_country_or_region', help='Provides the country code info (2 letter code) where the '
                   'sign-in originated.  This is calculated using latitude/longitude information from the sign-in '
                   'activity.')
        c.argument('location_geo_coordinates', action=AddLocationGeoCoordinates, nargs='*', help='geoCoordinates')

    with self.argument_context('protection risk-detection-risk-detection delete') as c:
        c.argument('risk_detection_id', help='key: riskDetection-id of riskDetection')
        c.argument('if_match', help='ETag')

    with self.argument_context('protection risk-detection-risk-detection create-risk-detection') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('request_id', help='')
        c.argument('correlation_id', help='')
        c.argument('risk_event_type', help='')
        c.argument('risk_type', arg_type=get_enum_type(['unlikelyTravel', 'anonymizedIPAddress', 'maliciousIPAddress',
                   'unfamiliarFeatures', 'malwareInfectedIPAddress', 'suspiciousIPAddress', 'leakedCredentials', ''
                   'investigationsThreatIntelligence', 'generic', 'adminConfirmedUserCompromised', ''
                   'mcasImpossibleTravel', 'mcasSuspiciousInboxManipulationRules', 'investigationsThreatIntelligenceSig'
                   'ninLinked', 'maliciousIPAddressValidCredentialsBlockedIP', 'unknownFutureValue']), help=''
                   'riskEventType')
        c.argument('risk_state', arg_type=get_enum_type(['none', 'confirmedSafe', 'remediated', 'dismissed', 'atRisk',
                   'confirmedCompromised', 'unknownFutureValue']), help='riskState')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_detail', arg_type=get_enum_type(['none', 'adminGeneratedTemporaryPassword', ''
                   'userPerformedSecuredPasswordChange', 'userPerformedSecuredPasswordReset', ''
                   'adminConfirmedSigninSafe', 'aiConfirmedSigninSafe', 'userPassedMFADrivenByRiskBasedPolicy', ''
                   'adminDismissedAllRiskForUser', 'adminConfirmedSigninCompromised', 'hidden', ''
                   'adminConfirmedUserCompromised', 'unknownFutureValue']), help='riskDetail')
        c.argument('source', help='')
        c.argument('detection_timing_type', arg_type=get_enum_type(['notDefined', 'realtime', 'nearRealtime',
                   'offline', 'unknownFutureValue']), help='riskDetectionTimingType')
        c.argument('activity', arg_type=get_enum_type(['signin', 'user', 'unknownFutureValue']), help='activityType')
        c.argument('token_issuer_type', arg_type=get_enum_type(['AzureAD', 'ADFederationServices',
                   'UnknownFutureValue']), help='tokenIssuerType')
        c.argument('ip_address', help='')
        c.argument('activity_date_time', help='')
        c.argument('detected_date_time', help='')
        c.argument('last_updated_date_time', help='')
        c.argument('user_id', help='')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('additional_info', help='')
        c.argument('location_city', help='Provides the city where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_state', help='Provides the State where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_country_or_region', help='Provides the country code info (2 letter code) where the '
                   'sign-in originated.  This is calculated using latitude/longitude information from the sign-in '
                   'activity.')
        c.argument('location_geo_coordinates', action=AddLocationGeoCoordinates, nargs='*', help='geoCoordinates')

    with self.argument_context('protection risk-detection-risk-detection get-risk-detection') as c:
        c.argument('risk_detection_id', help='key: riskDetection-id of riskDetection')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection risk-detection-risk-detection list-risk-detection') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection risky-user-risky-user update') as c:
        c.argument('risky_user_id', help='key: riskyUser-id of riskyUser')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('is_deleted', arg_type=get_three_state_flag(), help='')
        c.argument('is_guest', arg_type=get_three_state_flag(), help='')
        c.argument('is_processing', arg_type=get_three_state_flag(), help='')
        c.argument('risk_last_updated_date_time', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_state', arg_type=get_enum_type(['none', 'confirmedSafe', 'remediated', 'dismissed', 'atRisk',
                   'confirmedCompromised', 'unknownFutureValue']), help='riskState')
        c.argument('risk_detail', arg_type=get_enum_type(['none', 'adminGeneratedTemporaryPassword', ''
                   'userPerformedSecuredPasswordChange', 'userPerformedSecuredPasswordReset', ''
                   'adminConfirmedSigninSafe', 'aiConfirmedSigninSafe', 'userPassedMFADrivenByRiskBasedPolicy', ''
                   'adminDismissedAllRiskForUser', 'adminConfirmedSigninCompromised', 'hidden', ''
                   'adminConfirmedUserCompromised', 'unknownFutureValue']), help='riskDetail')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('history', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('protection risky-user-risky-user delete') as c:
        c.argument('risky_user_id', help='key: riskyUser-id of riskyUser')
        c.argument('if_match', help='ETag')

    with self.argument_context('protection risky-user-risky-user create-risky-user') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('is_deleted', arg_type=get_three_state_flag(), help='')
        c.argument('is_guest', arg_type=get_three_state_flag(), help='')
        c.argument('is_processing', arg_type=get_three_state_flag(), help='')
        c.argument('risk_last_updated_date_time', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_state', arg_type=get_enum_type(['none', 'confirmedSafe', 'remediated', 'dismissed', 'atRisk',
                   'confirmedCompromised', 'unknownFutureValue']), help='riskState')
        c.argument('risk_detail', arg_type=get_enum_type(['none', 'adminGeneratedTemporaryPassword', ''
                   'userPerformedSecuredPasswordChange', 'userPerformedSecuredPasswordReset', ''
                   'adminConfirmedSigninSafe', 'aiConfirmedSigninSafe', 'userPassedMFADrivenByRiskBasedPolicy', ''
                   'adminDismissedAllRiskForUser', 'adminConfirmedSigninCompromised', 'hidden', ''
                   'adminConfirmedUserCompromised', 'unknownFutureValue']), help='riskDetail')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('history', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('protection risky-user-risky-user get-risky-user') as c:
        c.argument('risky_user_id', help='key: riskyUser-id of riskyUser')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection risky-user-risky-user list-risky-user') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection risky-user update') as c:
        c.argument('risky_user_id', help='key: riskyUser-id of riskyUser')
        c.argument('risky_user_history_item_id', help='key: riskyUserHistoryItem-id of riskyUserHistoryItem')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('is_deleted', arg_type=get_three_state_flag(), help='')
        c.argument('is_guest', arg_type=get_three_state_flag(), help='')
        c.argument('is_processing', arg_type=get_three_state_flag(), help='')
        c.argument('risk_last_updated_date_time', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_state', arg_type=get_enum_type(['none', 'confirmedSafe', 'remediated', 'dismissed', 'atRisk',
                   'confirmedCompromised', 'unknownFutureValue']), help='riskState')
        c.argument('risk_detail', arg_type=get_enum_type(['none', 'adminGeneratedTemporaryPassword', ''
                   'userPerformedSecuredPasswordChange', 'userPerformedSecuredPasswordReset', ''
                   'adminConfirmedSigninSafe', 'aiConfirmedSigninSafe', 'userPassedMFADrivenByRiskBasedPolicy', ''
                   'adminDismissedAllRiskForUser', 'adminConfirmedSigninCompromised', 'hidden', ''
                   'adminConfirmedUserCompromised', 'unknownFutureValue']), help='riskDetail')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('history', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('user_id', help='')
        c.argument('initiated_by', help='')
        c.argument('activity', action=AddActivity, nargs='*', help='riskUserActivity')

    with self.argument_context('protection risky-user confirm-compromised') as c:
        c.argument('user_ids', nargs='*', help='')

    with self.argument_context('protection risky-user create-history') as c:
        c.argument('risky_user_id', help='key: riskyUser-id of riskyUser')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('is_deleted', arg_type=get_three_state_flag(), help='')
        c.argument('is_guest', arg_type=get_three_state_flag(), help='')
        c.argument('is_processing', arg_type=get_three_state_flag(), help='')
        c.argument('risk_last_updated_date_time', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_state', arg_type=get_enum_type(['none', 'confirmedSafe', 'remediated', 'dismissed', 'atRisk',
                   'confirmedCompromised', 'unknownFutureValue']), help='riskState')
        c.argument('risk_detail', arg_type=get_enum_type(['none', 'adminGeneratedTemporaryPassword', ''
                   'userPerformedSecuredPasswordChange', 'userPerformedSecuredPasswordReset', ''
                   'adminConfirmedSigninSafe', 'aiConfirmedSigninSafe', 'userPassedMFADrivenByRiskBasedPolicy', ''
                   'adminDismissedAllRiskForUser', 'adminConfirmedSigninCompromised', 'hidden', ''
                   'adminConfirmedUserCompromised', 'unknownFutureValue']), help='riskDetail')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('history', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('user_id', help='')
        c.argument('initiated_by', help='')
        c.argument('activity', action=AddActivity, nargs='*', help='riskUserActivity')

    with self.argument_context('protection risky-user dismiss') as c:
        c.argument('user_ids', nargs='*', help='')

    with self.argument_context('protection risky-user get-history') as c:
        c.argument('risky_user_id', help='key: riskyUser-id of riskyUser')
        c.argument('risky_user_history_item_id', help='key: riskyUserHistoryItem-id of riskyUserHistoryItem')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection risky-user list-history') as c:
        c.argument('risky_user_id', help='key: riskyUser-id of riskyUser')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection suspiciou-ip-risk-event-suspiciou-ip-risk-event update') as c:
        c.argument('suspicious_ip_risk_event_id', help='key: suspiciousIpRiskEvent-id of suspiciousIpRiskEvent')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('risk_event_date_time', help='')
        c.argument('risk_event_type', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_event_status', arg_type=get_enum_type(['active', 'remediated', 'dismissedAsFixed', ''
                   'dismissedAsFalsePositive', 'dismissedAsIgnore', 'loginBlocked', 'closedMfaAuto', ''
                   'closedMultipleReasons']), help='riskEventStatus')
        c.argument('closed_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('user_id', help='')
        c.argument('impacted_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/@json-file.')
        c.argument('ip_address', help='')
        c.argument('location_city', help='Provides the city where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_state', help='Provides the State where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_country_or_region', help='Provides the country code info (2 letter code) where the '
                   'sign-in originated.  This is calculated using latitude/longitude information from the sign-in '
                   'activity.')
        c.argument('location_geo_coordinates', action=AddLocationGeoCoordinates, nargs='*', help='geoCoordinates')

    with self.argument_context('protection suspiciou-ip-risk-event-suspiciou-ip-risk-event delete') as c:
        c.argument('suspicious_ip_risk_event_id', help='key: suspiciousIpRiskEvent-id of suspiciousIpRiskEvent')
        c.argument('if_match', help='ETag')

    with self.argument_context('protection suspiciou-ip-risk-event-suspiciou-ip-risk-event create-suspiciou-ip-risk-event') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('risk_event_date_time', help='')
        c.argument('risk_event_type', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_event_status', arg_type=get_enum_type(['active', 'remediated', 'dismissedAsFixed', ''
                   'dismissedAsFalsePositive', 'dismissedAsIgnore', 'loginBlocked', 'closedMfaAuto', ''
                   'closedMultipleReasons']), help='riskEventStatus')
        c.argument('closed_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('user_id', help='')
        c.argument('impacted_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/@json-file.')
        c.argument('ip_address', help='')
        c.argument('location_city', help='Provides the city where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_state', help='Provides the State where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_country_or_region', help='Provides the country code info (2 letter code) where the '
                   'sign-in originated.  This is calculated using latitude/longitude information from the sign-in '
                   'activity.')
        c.argument('location_geo_coordinates', action=AddLocationGeoCoordinates, nargs='*', help='geoCoordinates')

    with self.argument_context('protection suspiciou-ip-risk-event-suspiciou-ip-risk-event get-suspiciou-ip-risk-event') as c:
        c.argument('suspicious_ip_risk_event_id', help='key: suspiciousIpRiskEvent-id of suspiciousIpRiskEvent')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection suspiciou-ip-risk-event-suspiciou-ip-risk-event list-suspiciou-ip-risk-event') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection unfamiliar-location-risk-event-unfamiliar-location-risk-event update') as c:
        c.argument('unfamiliar_location_risk_event_id', help='key: unfamiliarLocationRiskEvent-id of '
                   'unfamiliarLocationRiskEvent')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('risk_event_date_time', help='')
        c.argument('risk_event_type', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_event_status', arg_type=get_enum_type(['active', 'remediated', 'dismissedAsFixed', ''
                   'dismissedAsFalsePositive', 'dismissedAsIgnore', 'loginBlocked', 'closedMfaAuto', ''
                   'closedMultipleReasons']), help='riskEventStatus')
        c.argument('closed_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('user_id', help='')
        c.argument('impacted_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/@json-file.')
        c.argument('ip_address', help='')
        c.argument('location_city', help='Provides the city where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_state', help='Provides the State where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_country_or_region', help='Provides the country code info (2 letter code) where the '
                   'sign-in originated.  This is calculated using latitude/longitude information from the sign-in '
                   'activity.')
        c.argument('location_geo_coordinates', action=AddLocationGeoCoordinates, nargs='*', help='geoCoordinates')

    with self.argument_context('protection unfamiliar-location-risk-event-unfamiliar-location-risk-event delete') as c:
        c.argument('unfamiliar_location_risk_event_id', help='key: unfamiliarLocationRiskEvent-id of '
                   'unfamiliarLocationRiskEvent')
        c.argument('if_match', help='ETag')

    with self.argument_context('protection unfamiliar-location-risk-event-unfamiliar-location-risk-event create-unfamiliar-location-risk-event') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('user_display_name', help='')
        c.argument('user_principal_name', help='')
        c.argument('risk_event_date_time', help='')
        c.argument('risk_event_type', help='')
        c.argument('risk_level', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_event_status', arg_type=get_enum_type(['active', 'remediated', 'dismissedAsFixed', ''
                   'dismissedAsFalsePositive', 'dismissedAsIgnore', 'loginBlocked', 'closedMfaAuto', ''
                   'closedMultipleReasons']), help='riskEventStatus')
        c.argument('closed_date_time', help='')
        c.argument('created_date_time', help='')
        c.argument('user_id', help='')
        c.argument('impacted_user', type=validate_file_or_dict, help='Represents an Azure Active Directory user '
                   'object. Expected value: json-string/@json-file.')
        c.argument('ip_address', help='')
        c.argument('location_city', help='Provides the city where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_state', help='Provides the State where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_country_or_region', help='Provides the country code info (2 letter code) where the '
                   'sign-in originated.  This is calculated using latitude/longitude information from the sign-in '
                   'activity.')
        c.argument('location_geo_coordinates', action=AddLocationGeoCoordinates, nargs='*', help='geoCoordinates')

    with self.argument_context('protection unfamiliar-location-risk-event-unfamiliar-location-risk-event get-unfamiliar-location-risk-event') as c:
        c.argument('unfamiliar_location_risk_event_id', help='key: unfamiliarLocationRiskEvent-id of '
                   'unfamiliarLocationRiskEvent')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('protection unfamiliar-location-risk-event-unfamiliar-location-risk-event list-unfamiliar-location-risk-event') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')
