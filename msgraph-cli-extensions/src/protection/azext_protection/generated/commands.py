# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from msgraph.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_protection.generated._client_factory import cf_anonymou_ip_risk_event_anonymou_ip_risk_event
    protection_anonymou_ip_risk_event_anonymou_ip_risk_event = CliCommandType(
        operations_tmpl='azext_protection.vendored_sdks.protection.operations._anonymou_ip_risk_event_anonymou_ip_risk_'
        'event_operations#AnonymouIPRiskEventAnonymouIPRiskEventOperations.{}',
        client_factory=cf_anonymou_ip_risk_event_anonymou_ip_risk_event)
    with self.command_group('protection anonymou-ip-risk-event-anonymou-ip-risk-event',
                            protection_anonymou_ip_risk_event_anonymou_ip_risk_event,
                            client_factory=cf_anonymou_ip_risk_event_anonymou_ip_risk_event,
                            is_experimental=True) as g:
        g.custom_command('update', 'protection_anonymou_ip_risk_event_anonymou_ip_risk_event_update')
        g.custom_command('delete', 'protection_anonymou_ip_risk_event_anonymou_ip_risk_event_delete')
        g.custom_command('create-anonymou-ip-risk-event', 'protection_anonymou_ip_risk_event_anonymou_ip_risk_event_cre'
                         'ate_anonymou_ip_risk_event')
        g.custom_command('get-anonymou-ip-risk-event', 'protection_anonymou_ip_risk_event_anonymou_ip_risk_event_get_an'
                         'onymou_ip_risk_event')
        g.custom_command('list-anonymou-ip-risk-event', 'protection_anonymou_ip_risk_event_anonymou_ip_risk_event_list_'
                         'anonymou_ip_risk_event')

    from azext_protection.generated._client_factory import cf_identity_risk_event_identity_risk_event
    protection_identity_risk_event_identity_risk_event = CliCommandType(
        operations_tmpl='azext_protection.vendored_sdks.protection.operations._identity_risk_event_identity_risk_event_'
        'operations#IdentityRiskEventIdentityRiskEventOperations.{}',
        client_factory=cf_identity_risk_event_identity_risk_event)
    with self.command_group('protection identity-risk-event-identity-risk-event',
                            protection_identity_risk_event_identity_risk_event,
                            client_factory=cf_identity_risk_event_identity_risk_event, is_experimental=True) as g:
        g.custom_command('update', 'protection_identity_risk_event_identity_risk_event_update')
        g.custom_command('delete', 'protection_identity_risk_event_identity_risk_event_delete')
        g.custom_command('create-identity-risk-event', 'protection_identity_risk_event_identity_risk_event_create_ident'
                         'ity_risk_event')
        g.custom_command('get-identity-risk-event', 'protection_identity_risk_event_identity_risk_event_get_identity_ri'
                         'sk_event')
        g.custom_command('list-identity-risk-event', 'protection_identity_risk_event_identity_risk_event_list_identity_'
                         'risk_event')

    from azext_protection.generated._client_factory import cf_identity_risk_event
    protection_identity_risk_event = CliCommandType(
        operations_tmpl='azext_protection.vendored_sdks.protection.operations._identity_risk_event_operations#IdentityR'
        'iskEventOperations.{}',
        client_factory=cf_identity_risk_event)
    with self.command_group('protection identity-risk-event', protection_identity_risk_event,
                            client_factory=cf_identity_risk_event, is_experimental=True) as g:
        g.custom_command('get-impacted-user', 'protection_identity_risk_event_get_impacted_user')

    from azext_protection.generated._client_factory import cf_impossible_travel_risk_event_impossible_travel_risk_event
    protection_impossible_travel_risk_event_impossible_travel_risk_event = CliCommandType(
        operations_tmpl='azext_protection.vendored_sdks.protection.operations._impossible_travel_risk_event_impossible_'
        'travel_risk_event_operations#ImpossibleTravelRiskEventImpossibleTravelRiskEventOperations.{}',
        client_factory=cf_impossible_travel_risk_event_impossible_travel_risk_event)
    with self.command_group('protection impossible-travel-risk-event-impossible-travel-risk-event',
                            protection_impossible_travel_risk_event_impossible_travel_risk_event,
                            client_factory=cf_impossible_travel_risk_event_impossible_travel_risk_event,
                            is_experimental=True) as g:
        g.custom_command('update', 'protection_impossible_travel_risk_event_impossible_travel_risk_event_update')
        g.custom_command('delete', 'protection_impossible_travel_risk_event_impossible_travel_risk_event_delete')
        g.custom_command('create-impossible-travel-risk-event', 'protection_impossible_travel_risk_event_impossible_tra'
                         'vel_risk_event_create_impossible_travel_risk_event')
        g.custom_command('get-impossible-travel-risk-event', 'protection_impossible_travel_risk_event_impossible_travel'
                         '_risk_event_get_impossible_travel_risk_event')
        g.custom_command('list-impossible-travel-risk-event', 'protection_impossible_travel_risk_event_impossible_trave'
                         'l_risk_event_list_impossible_travel_risk_event')

    from azext_protection.generated._client_factory import cf_leaked_credentials_risk_event_leaked_credentials_risk_event
    protection_leaked_credentials_risk_event_leaked_credentials_risk_event = CliCommandType(
        operations_tmpl='azext_protection.vendored_sdks.protection.operations._leaked_credentials_risk_event_leaked_cre'
        'dentials_risk_event_operations#LeakedCredentialsRiskEventLeakedCredentialsRiskEventOperations.{}',
        client_factory=cf_leaked_credentials_risk_event_leaked_credentials_risk_event)
    with self.command_group('protection leaked-credentials-risk-event-leaked-credentials-risk-event',
                            protection_leaked_credentials_risk_event_leaked_credentials_risk_event,
                            client_factory=cf_leaked_credentials_risk_event_leaked_credentials_risk_event,
                            is_experimental=True) as g:
        g.custom_command('update', 'protection_leaked_credentials_risk_event_leaked_credentials_risk_event_update')
        g.custom_command('delete', 'protection_leaked_credentials_risk_event_leaked_credentials_risk_event_delete')
        g.custom_command('create-leaked-credentials-risk-event', 'protection_leaked_credentials_risk_event_leaked_crede'
                         'ntials_risk_event_create_leaked_credentials_risk_event')
        g.custom_command('get-leaked-credentials-risk-event', 'protection_leaked_credentials_risk_event_leaked_credenti'
                         'als_risk_event_get_leaked_credentials_risk_event')
        g.custom_command('list-leaked-credentials-risk-event', 'protection_leaked_credentials_risk_event_leaked_credent'
                         'ials_risk_event_list_leaked_credentials_risk_event')

    from azext_protection.generated._client_factory import cf_malware_risk_event_malware_risk_event
    protection_malware_risk_event_malware_risk_event = CliCommandType(
        operations_tmpl='azext_protection.vendored_sdks.protection.operations._malware_risk_event_malware_risk_event_op'
        'erations#MalwareRiskEventMalwareRiskEventOperations.{}',
        client_factory=cf_malware_risk_event_malware_risk_event)
    with self.command_group('protection malware-risk-event-malware-risk-event',
                            protection_malware_risk_event_malware_risk_event,
                            client_factory=cf_malware_risk_event_malware_risk_event, is_experimental=True) as g:
        g.custom_command('update', 'protection_malware_risk_event_malware_risk_event_update')
        g.custom_command('delete', 'protection_malware_risk_event_malware_risk_event_delete')
        g.custom_command('create-malware-risk-event', 'protection_malware_risk_event_malware_risk_event_create_malware_'
                         'risk_event')
        g.custom_command('get-malware-risk-event', 'protection_malware_risk_event_malware_risk_event_get_malware_risk_e'
                         'vent')
        g.custom_command('list-malware-risk-event', 'protection_malware_risk_event_malware_risk_event_list_malware_risk'
                         '_event')

    from azext_protection.generated._client_factory import cf_risk_detection_risk_detection
    protection_risk_detection_risk_detection = CliCommandType(
        operations_tmpl='azext_protection.vendored_sdks.protection.operations._risk_detection_risk_detection_operations'
        '#RiskDetectionOperations.{}',
        client_factory=cf_risk_detection_risk_detection)
    with self.command_group('protection risk-detection-risk-detection', protection_risk_detection_risk_detection,
                            client_factory=cf_risk_detection_risk_detection, is_experimental=True) as g:
        g.custom_command('update', 'protection_risk_detection_risk_detection_update')
        g.custom_command('delete', 'protection_risk_detection_risk_detection_delete')
        g.custom_command('create-risk-detection', 'protection_risk_detection_risk_detection_create_risk_detection')
        g.custom_command('get-risk-detection', 'protection_risk_detection_risk_detection_get_risk_detection')
        g.custom_command('list-risk-detection', 'protection_risk_detection_risk_detection_list_risk_detection')

    from azext_protection.generated._client_factory import cf_risky_user_risky_user
    protection_risky_user_risky_user = CliCommandType(
        operations_tmpl='azext_protection.vendored_sdks.protection.operations._risky_user_risky_user_operations#RiskyUs'
        'erOperations.{}',
        client_factory=cf_risky_user_risky_user)
    with self.command_group('protection risky-user-risky-user', protection_risky_user_risky_user,
                            client_factory=cf_risky_user_risky_user, is_experimental=True) as g:
        g.custom_command('update', 'protection_risky_user_risky_user_update')
        g.custom_command('delete', 'protection_risky_user_risky_user_delete')
        g.custom_command('create-risky-user', 'protection_risky_user_risky_user_create_risky_user')
        g.custom_command('get-risky-user', 'protection_risky_user_risky_user_get_risky_user')
        g.custom_command('list-risky-user', 'protection_risky_user_risky_user_list_risky_user')

    from azext_protection.generated._client_factory import cf_risky_user
    protection_risky_user = CliCommandType(
        operations_tmpl='azext_protection.vendored_sdks.protection.operations._risky_user_operations#RiskyUserOperation'
        's.{}',
        client_factory=cf_risky_user)
    with self.command_group('protection risky-user', protection_risky_user, client_factory=cf_risky_user,
                            is_experimental=True) as g:
        g.custom_command('update', 'protection_risky_user_update')
        g.custom_command('confirm-compromised', 'protection_risky_user_confirm_compromised')
        g.custom_command('create-history', 'protection_risky_user_create_history')
        g.custom_command('dismiss', 'protection_risky_user_dismiss')
        g.custom_command('get-history', 'protection_risky_user_get_history')
        g.custom_command('list-history', 'protection_risky_user_list_history')

    from azext_protection.generated._client_factory import cf_suspiciou_ip_risk_event_suspiciou_ip_risk_event
    protection_suspiciou_ip_risk_event_suspiciou_ip_risk_event = CliCommandType(
        operations_tmpl='azext_protection.vendored_sdks.protection.operations._suspiciou_ip_risk_event_suspiciou_ip_ris'
        'k_event_operations#SuspiciouIPRiskEventSuspiciouIPRiskEventOperations.{}',
        client_factory=cf_suspiciou_ip_risk_event_suspiciou_ip_risk_event)
    with self.command_group('protection suspiciou-ip-risk-event-suspiciou-ip-risk-event',
                            protection_suspiciou_ip_risk_event_suspiciou_ip_risk_event,
                            client_factory=cf_suspiciou_ip_risk_event_suspiciou_ip_risk_event,
                            is_experimental=True) as g:
        g.custom_command('update', 'protection_suspiciou_ip_risk_event_suspiciou_ip_risk_event_update')
        g.custom_command('delete', 'protection_suspiciou_ip_risk_event_suspiciou_ip_risk_event_delete')
        g.custom_command('create-suspiciou-ip-risk-event', 'protection_suspiciou_ip_risk_event_suspiciou_ip_risk_event_'
                         'create_suspiciou_ip_risk_event')
        g.custom_command('get-suspiciou-ip-risk-event', 'protection_suspiciou_ip_risk_event_suspiciou_ip_risk_event_get'
                         '_suspiciou_ip_risk_event')
        g.custom_command('list-suspiciou-ip-risk-event', 'protection_suspiciou_ip_risk_event_suspiciou_ip_risk_event_li'
                         'st_suspiciou_ip_risk_event')

    from azext_protection.generated._client_factory import cf_unfamiliar_location_risk_event_unfamiliar_location_risk_event
    protection_unfamiliar_location_risk_event_unfamiliar_location_risk_event = CliCommandType(
        operations_tmpl='azext_protection.vendored_sdks.protection.operations._unfamiliar_location_risk_event_unfamilia'
        'r_location_risk_event_operations#UnfamiliarLocationRiskEventUnfamiliarLocationRiskEventOperations.{}',
        client_factory=cf_unfamiliar_location_risk_event_unfamiliar_location_risk_event)
    with self.command_group('protection unfamiliar-location-risk-event-unfamiliar-location-risk-event',
                            protection_unfamiliar_location_risk_event_unfamiliar_location_risk_event,
                            client_factory=cf_unfamiliar_location_risk_event_unfamiliar_location_risk_event,
                            is_experimental=True) as g:
        g.custom_command('update', 'protection_unfamiliar_location_risk_event_unfamiliar_location_risk_event_update')
        g.custom_command('delete', 'protection_unfamiliar_location_risk_event_unfamiliar_location_risk_event_delete')
        g.custom_command('create-unfamiliar-location-risk-event', 'protection_unfamiliar_location_risk_event_unfamiliar'
                         '_location_risk_event_create_unfamiliar_location_risk_event')
        g.custom_command('get-unfamiliar-location-risk-event', 'protection_unfamiliar_location_risk_event_unfamiliar_lo'
                         'cation_risk_event_get_unfamiliar_location_risk_event')
        g.custom_command('list-unfamiliar-location-risk-event', 'protection_unfamiliar_location_risk_event_unfamiliar_l'
                         'ocation_risk_event_list_unfamiliar_location_risk_event')
