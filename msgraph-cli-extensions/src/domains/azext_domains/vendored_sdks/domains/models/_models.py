# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CollectionOfDirectoryObject(msrest.serialization.Model):
    """Collection of directoryObject.

    :param value:
    :type value: list[~identity_domains.models.MicrosoftGraphDirectoryObject]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphDirectoryObject]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDirectoryObject, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDomain(msrest.serialization.Model):
    """Collection of domain.

    :param value:
    :type value: list[~identity_domains.models.MicrosoftGraphDomain]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphDomain]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDomain, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDomainDnsRecord(msrest.serialization.Model):
    """Collection of domainDnsRecord.

    :param value:
    :type value: list[~identity_domains.models.MicrosoftGraphDomainDnsRecord]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphDomainDnsRecord]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDomainDnsRecord, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfDomainDnsRecord0(msrest.serialization.Model):
    """Collection of domainDnsRecord.

    :param value:
    :type value: list[~identity_domains.models.MicrosoftGraphDomainDnsRecord]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphDomainDnsRecord]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDomainDnsRecord0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class MicrosoftGraphDirectoryObject(MicrosoftGraphEntity):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDirectoryObject, self).__init__(**kwargs)
        self.deleted_date_time = kwargs.get('deleted_date_time', None)


class MicrosoftGraphDomain(MicrosoftGraphEntity):
    """domain.

    :param id: Read-only.
    :type id: str
    :param authentication_type: Indicates the configured authentication type for the domain. The
     value is either Managed or Federated. Managed indicates a cloud managed domain where Azure AD
     performs user authentication.Federated indicates authentication is federated with an identity
     provider such as the tenant's on-premises Active Directory via Active Directory Federation
     Services. This property is read-only and is not nullable.
    :type authentication_type: str
    :param availability_status: This property is always null except when the verify action is used.
     When the verify action is used, a domain entity is returned in the response. The
     availabilityStatus property of the domain entity in the response is either AvailableImmediately
     or EmailVerifiedDomainTakeoverScheduled.
    :type availability_status: str
    :param is_admin_managed: The value of the property is false if the DNS record management of the
     domain has been delegated to Office 365. Otherwise, the value is true. Not nullable.
    :type is_admin_managed: bool
    :param is_default: True if this is the default domain that is used for user creation. There is
     only one default domain per company. Not nullable.
    :type is_default: bool
    :param is_initial: True if this is the initial domain created by Microsoft Online Services
     (companyname.onmicrosoft.com). There is only one initial domain per company. Not nullable.
    :type is_initial: bool
    :param is_root: True if the domain is a verified root domain. Otherwise, false if the domain is
     a subdomain or unverified. Not nullable.
    :type is_root: bool
    :param is_verified: True if the domain has completed domain ownership verification. Not
     nullable.
    :type is_verified: bool
    :param password_notification_window_in_days: Specifies the number of days before a user
     receives notification that their password will expire. If the property is not set, a default
     value of 14 days will be used.
    :type password_notification_window_in_days: int
    :param password_validity_period_in_days: Specifies the length of time that a password is valid
     before it must be changed. If the property is not set, a default value of 90 days will be used.
    :type password_validity_period_in_days: int
    :param supported_services: The capabilities assigned to the domain.Can include 0, 1 or more of
     following values: Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline,
     SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer,
     Intune The values which you can add/remove using Graph API include: Email,
     OfficeCommunicationsOnline, YammerNot nullable.
    :type supported_services: list[str]
    :param state: domainState.
    :type state: ~identity_domains.models.MicrosoftGraphDomainState
    :param service_configuration_records: DNS records the customer adds to the DNS zone file of the
     domain before the domain can be used by Microsoft Online services.Read-only, Nullable.
    :type service_configuration_records:
     list[~identity_domains.models.MicrosoftGraphDomainDnsRecord]
    :param verification_dns_records: DNS records that the customer adds to the DNS zone file of the
     domain before the customer can complete domain ownership verification with Azure AD.Read-only,
     Nullable.
    :type verification_dns_records: list[~identity_domains.models.MicrosoftGraphDomainDnsRecord]
    :param domain_name_references: Read-only, Nullable.
    :type domain_name_references: list[~identity_domains.models.MicrosoftGraphDirectoryObject]
    """

    _validation = {
        'password_notification_window_in_days': {'maximum': 2147483647, 'minimum': -2147483648},
        'password_validity_period_in_days': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'availability_status': {'key': 'availabilityStatus', 'type': 'str'},
        'is_admin_managed': {'key': 'isAdminManaged', 'type': 'bool'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'is_initial': {'key': 'isInitial', 'type': 'bool'},
        'is_root': {'key': 'isRoot', 'type': 'bool'},
        'is_verified': {'key': 'isVerified', 'type': 'bool'},
        'password_notification_window_in_days': {'key': 'passwordNotificationWindowInDays', 'type': 'int'},
        'password_validity_period_in_days': {'key': 'passwordValidityPeriodInDays', 'type': 'int'},
        'supported_services': {'key': 'supportedServices', 'type': '[str]'},
        'state': {'key': 'state', 'type': 'MicrosoftGraphDomainState'},
        'service_configuration_records': {'key': 'serviceConfigurationRecords', 'type': '[MicrosoftGraphDomainDnsRecord]'},
        'verification_dns_records': {'key': 'verificationDnsRecords', 'type': '[MicrosoftGraphDomainDnsRecord]'},
        'domain_name_references': {'key': 'domainNameReferences', 'type': '[MicrosoftGraphDirectoryObject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDomain, self).__init__(**kwargs)
        self.authentication_type = kwargs.get('authentication_type', None)
        self.availability_status = kwargs.get('availability_status', None)
        self.is_admin_managed = kwargs.get('is_admin_managed', None)
        self.is_default = kwargs.get('is_default', None)
        self.is_initial = kwargs.get('is_initial', None)
        self.is_root = kwargs.get('is_root', None)
        self.is_verified = kwargs.get('is_verified', None)
        self.password_notification_window_in_days = kwargs.get('password_notification_window_in_days', None)
        self.password_validity_period_in_days = kwargs.get('password_validity_period_in_days', None)
        self.supported_services = kwargs.get('supported_services', None)
        self.state = kwargs.get('state', None)
        self.service_configuration_records = kwargs.get('service_configuration_records', None)
        self.verification_dns_records = kwargs.get('verification_dns_records', None)
        self.domain_name_references = kwargs.get('domain_name_references', None)


class MicrosoftGraphDomainDnsRecord(MicrosoftGraphEntity):
    """domainDnsRecord.

    :param id: Read-only.
    :type id: str
    :param is_optional: If false, this record must be configured by the customer at the DNS host
     for Microsoft Online Services to operate correctly with the domain.
    :type is_optional: bool
    :param label: Value used when configuring the name of the DNS record at the DNS host.
    :type label: str
    :param record_type: Indicates what type of DNS record this entity represents.The value can be
     one of the following: CName, Mx, Srv, TxtKey.
    :type record_type: str
    :param supported_service: Microsoft Online Service or feature that has a dependency on this DNS
     record.Can be one of the following values: null, Email, Sharepoint, EmailInternalRelayOnly,
     OfficeCommunicationsOnline, SharePointDefaultDomain, FullRedelegation, SharePointPublic,
     OrgIdAuthentication, Yammer, Intune.
    :type supported_service: str
    :param ttl: Value to use when configuring the time-to-live (ttl) property of the DNS record at
     the DNS host. Not nullable.
    :type ttl: int
    """

    _validation = {
        'ttl': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'is_optional': {'key': 'isOptional', 'type': 'bool'},
        'label': {'key': 'label', 'type': 'str'},
        'record_type': {'key': 'recordType', 'type': 'str'},
        'supported_service': {'key': 'supportedService', 'type': 'str'},
        'ttl': {'key': 'ttl', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDomainDnsRecord, self).__init__(**kwargs)
        self.is_optional = kwargs.get('is_optional', None)
        self.label = kwargs.get('label', None)
        self.record_type = kwargs.get('record_type', None)
        self.supported_service = kwargs.get('supported_service', None)
        self.ttl = kwargs.get('ttl', None)


class MicrosoftGraphDomainState(msrest.serialization.Model):
    """domainState.

    :param status: Current status of the operation.  Scheduled - Operation has been scheduled but
     has not started.  InProgress - Task has started and is in progress.  Failed - Operation has
     failed.
    :type status: str
    :param operation: Type of asynchronous operation. The values can be ForceDelete or
     Verification.
    :type operation: str
    :param last_action_date_time: Timestamp for when the last activity occurred. The value is
     updated when an operation is scheduled, the asynchronous task starts, and when the operation
     completes.
    :type last_action_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDomainState, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.operation = kwargs.get('operation', None)
        self.last_action_date_time = kwargs.get('last_action_date_time', None)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~identity_domains.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = kwargs['error']


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~identity_domains.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)


class PathsUasdopDomainsDomainIdMicrosoftGraphForcedeletePostRequestbodyContentApplicationJsonSchema(msrest.serialization.Model):
    """PathsUasdopDomainsDomainIdMicrosoftGraphForcedeletePostRequestbodyContentApplicationJsonSchema.

    :param disable_user_accounts:
    :type disable_user_accounts: bool
    """

    _attribute_map = {
        'disable_user_accounts': {'key': 'disableUserAccounts', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PathsUasdopDomainsDomainIdMicrosoftGraphForcedeletePostRequestbodyContentApplicationJsonSchema, self).__init__(**kwargs)
        self.disable_user_accounts = kwargs.get('disable_user_accounts', False)
