# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import get_three_state_flag
from azext_domains.action import (
    AddState,
    AddServiceConfigurationRecords,
    AddVerificationDnsRecords,
    AddDomainNameReferences
)


def load_arguments(self, _):

    with self.argument_context('domains domain-domain update') as c:
        c.argument('domain_id', help='key: domain-id of domain')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('authentication_type', help='Indicates the configured authentication type for the domain. The value '
                   'is either Managed or Federated. Managed indicates a cloud managed domain where Azure AD performs '
                   'user authentication.Federated indicates authentication is federated with an identity provider such '
                   'as the tenant\'s on-premises Active Directory via Active Directory Federation Services. This '
                   'property is read-only and is not nullable.')
        c.argument('availability_status', help='This property is always null except when the verify action is used. '
                   'When the verify action is used, a domain entity is returned in the response. The '
                   'availabilityStatus property of the domain entity in the response is either AvailableImmediately or '
                   'EmailVerifiedDomainTakeoverScheduled.')
        c.argument('is_admin_managed', arg_type=get_three_state_flag(), help='The value of the property is false if '
                   'the DNS record management of the domain has been delegated to Office 365. Otherwise, the value is '
                   'true. Not nullable')
        c.argument('is_default', arg_type=get_three_state_flag(), help='True if this is the default domain that is '
                   'used for user creation. There is only one default domain per company. Not nullable')
        c.argument('is_initial', arg_type=get_three_state_flag(), help='True if this is the initial domain created by '
                   'Microsoft Online Services (companyname.onmicrosoft.com). There is only one initial domain per '
                   'company. Not nullable')
        c.argument('is_root', arg_type=get_three_state_flag(), help='True if the domain is a verified root domain. '
                   'Otherwise, false if the domain is a subdomain or unverified. Not nullable')
        c.argument('is_verified', arg_type=get_three_state_flag(), help='True if the domain has completed domain '
                   'ownership verification. Not nullable')
        c.argument('password_notification_window_in_days', help='Specifies the number of days before a user receives '
                   'notification that their password will expire. If the property is not set, a default value of 14 '
                   'days will be used.')
        c.argument('password_validity_period_in_days', help='Specifies the length of time that a password is valid '
                   'before it must be changed. If the property is not set, a default value of 90 days will be used.')
        c.argument('supported_services', nargs='*', help='The capabilities assigned to the domain.Can include 0, 1 or '
                   'more of following values: Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline, '
                   'SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer, Intune '
                   'The values which you can add/remove using Graph API include: Email, OfficeCommunicationsOnline, '
                   'YammerNot nullable')
        c.argument('state', action=AddState, nargs='*', help='domainState')
        c.argument('service_configuration_records', action=AddServiceConfigurationRecords, nargs='*', help='DNS '
                   'records the customer adds to the DNS zone file of the domain before the domain can be used by '
                   'Microsoft Online services.Read-only, Nullable')
        c.argument('verification_dns_records', action=AddVerificationDnsRecords, nargs='*', help='DNS records that the '
                   'customer adds to the DNS zone file of the domain before the customer can complete domain ownership '
                   'verification with Azure AD.Read-only, Nullable')
        c.argument('domain_name_references', action=AddDomainNameReferences, nargs='*', help='Read-only, Nullable')

    with self.argument_context('domains domain-domain delete') as c:
        c.argument('domain_id', help='key: domain-id of domain')
        c.argument('if_match', help='ETag')

    with self.argument_context('domains domain-domain create-domain') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('authentication_type', help='Indicates the configured authentication type for the domain. The value '
                   'is either Managed or Federated. Managed indicates a cloud managed domain where Azure AD performs '
                   'user authentication.Federated indicates authentication is federated with an identity provider such '
                   'as the tenant\'s on-premises Active Directory via Active Directory Federation Services. This '
                   'property is read-only and is not nullable.')
        c.argument('availability_status', help='This property is always null except when the verify action is used. '
                   'When the verify action is used, a domain entity is returned in the response. The '
                   'availabilityStatus property of the domain entity in the response is either AvailableImmediately or '
                   'EmailVerifiedDomainTakeoverScheduled.')
        c.argument('is_admin_managed', arg_type=get_three_state_flag(), help='The value of the property is false if '
                   'the DNS record management of the domain has been delegated to Office 365. Otherwise, the value is '
                   'true. Not nullable')
        c.argument('is_default', arg_type=get_three_state_flag(), help='True if this is the default domain that is '
                   'used for user creation. There is only one default domain per company. Not nullable')
        c.argument('is_initial', arg_type=get_three_state_flag(), help='True if this is the initial domain created by '
                   'Microsoft Online Services (companyname.onmicrosoft.com). There is only one initial domain per '
                   'company. Not nullable')
        c.argument('is_root', arg_type=get_three_state_flag(), help='True if the domain is a verified root domain. '
                   'Otherwise, false if the domain is a subdomain or unverified. Not nullable')
        c.argument('is_verified', arg_type=get_three_state_flag(), help='True if the domain has completed domain '
                   'ownership verification. Not nullable')
        c.argument('password_notification_window_in_days', help='Specifies the number of days before a user receives '
                   'notification that their password will expire. If the property is not set, a default value of 14 '
                   'days will be used.')
        c.argument('password_validity_period_in_days', help='Specifies the length of time that a password is valid '
                   'before it must be changed. If the property is not set, a default value of 90 days will be used.')
        c.argument('supported_services', nargs='*', help='The capabilities assigned to the domain.Can include 0, 1 or '
                   'more of following values: Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline, '
                   'SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer, Intune '
                   'The values which you can add/remove using Graph API include: Email, OfficeCommunicationsOnline, '
                   'YammerNot nullable')
        c.argument('state', action=AddState, nargs='*', help='domainState')
        c.argument('service_configuration_records', action=AddServiceConfigurationRecords, nargs='*', help='DNS '
                   'records the customer adds to the DNS zone file of the domain before the domain can be used by '
                   'Microsoft Online services.Read-only, Nullable')
        c.argument('verification_dns_records', action=AddVerificationDnsRecords, nargs='*', help='DNS records that the '
                   'customer adds to the DNS zone file of the domain before the customer can complete domain ownership '
                   'verification with Azure AD.Read-only, Nullable')
        c.argument('domain_name_references', action=AddDomainNameReferences, nargs='*', help='Read-only, Nullable')

    with self.argument_context('domains domain-domain get-domain') as c:
        c.argument('domain_id', help='key: domain-id of domain')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('domains domain-domain list-domain') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('domains domain update') as c:
        c.argument('domain_id', help='key: domain-id of domain')
        c.argument('domain_dns_record_id', help='key: domainDnsRecord-id of domainDnsRecord')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('is_optional', arg_type=get_three_state_flag(), help='If false, this record must be configured by '
                   'the customer at the DNS host for Microsoft Online Services to operate correctly with the domain.')
        c.argument('label', help='Value used when configuring the name of the DNS record at the DNS host.')
        c.argument('record_type', help='Indicates what type of DNS record this entity represents.The value can be one '
                   'of the following: CName, Mx, Srv, TxtKey')
        c.argument('supported_service', help='Microsoft Online Service or feature that has a dependency on this DNS '
                   'record.Can be one of the following values: null, Email, Sharepoint, EmailInternalRelayOnly, '
                   'OfficeCommunicationsOnline, SharePointDefaultDomain, FullRedelegation, SharePointPublic, '
                   'OrgIdAuthentication, Yammer, Intune')
        c.argument('ttl', help='Value to use when configuring the time-to-live (ttl) property of the DNS record at the '
                   'DNS host. Not nullable')

    with self.argument_context('domains domain create-service-configuration-record') as c:
        c.argument('domain_id', help='key: domain-id of domain')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('is_optional', arg_type=get_three_state_flag(), help='If false, this record must be configured by '
                   'the customer at the DNS host for Microsoft Online Services to operate correctly with the domain.')
        c.argument('label', help='Value used when configuring the name of the DNS record at the DNS host.')
        c.argument('record_type', help='Indicates what type of DNS record this entity represents.The value can be one '
                   'of the following: CName, Mx, Srv, TxtKey')
        c.argument('supported_service', help='Microsoft Online Service or feature that has a dependency on this DNS '
                   'record.Can be one of the following values: null, Email, Sharepoint, EmailInternalRelayOnly, '
                   'OfficeCommunicationsOnline, SharePointDefaultDomain, FullRedelegation, SharePointPublic, '
                   'OrgIdAuthentication, Yammer, Intune')
        c.argument('ttl', help='Value to use when configuring the time-to-live (ttl) property of the DNS record at the '
                   'DNS host. Not nullable')

    with self.argument_context('domains domain create-verification-dns-record') as c:
        c.argument('domain_id', help='key: domain-id of domain')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('is_optional', arg_type=get_three_state_flag(), help='If false, this record must be configured by '
                   'the customer at the DNS host for Microsoft Online Services to operate correctly with the domain.')
        c.argument('label', help='Value used when configuring the name of the DNS record at the DNS host.')
        c.argument('record_type', help='Indicates what type of DNS record this entity represents.The value can be one '
                   'of the following: CName, Mx, Srv, TxtKey')
        c.argument('supported_service', help='Microsoft Online Service or feature that has a dependency on this DNS '
                   'record.Can be one of the following values: null, Email, Sharepoint, EmailInternalRelayOnly, '
                   'OfficeCommunicationsOnline, SharePointDefaultDomain, FullRedelegation, SharePointPublic, '
                   'OrgIdAuthentication, Yammer, Intune')
        c.argument('ttl', help='Value to use when configuring the time-to-live (ttl) property of the DNS record at the '
                   'DNS host. Not nullable')

    with self.argument_context('domains domain force-delete') as c:
        c.argument('domain_id', help='key: domain-id of domain')
        c.argument('disable_user_accounts', arg_type=get_three_state_flag(), help='')

    with self.argument_context('domains domain get-domain-name-reference') as c:
        c.argument('domain_id', help='key: domain-id of domain')
        c.argument('directory_object_id', help='key: directoryObject-id of directoryObject')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('domains domain get-service-configuration-record') as c:
        c.argument('domain_id', help='key: domain-id of domain')
        c.argument('domain_dns_record_id', help='key: domainDnsRecord-id of domainDnsRecord')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('domains domain get-verification-dns-record') as c:
        c.argument('domain_id', help='key: domain-id of domain')
        c.argument('domain_dns_record_id', help='key: domainDnsRecord-id of domainDnsRecord')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('domains domain list-domain-name-reference') as c:
        c.argument('domain_id', help='key: domain-id of domain')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('domains domain list-service-configuration-record') as c:
        c.argument('domain_id', help='key: domain-id of domain')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('domains domain list-verification-dns-record') as c:
        c.argument('domain_id', help='key: domain-id of domain')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('domains domain verify') as c:
        c.argument('domain_id', help='key: domain-id of domain')
