# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from msgraph.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_applications.generated._client_factory import cf_application_application
    applications_application_application = CliCommandType(
        operations_tmpl='azext_applications.vendored_sdks.applications.operations._application_application_operations#A'
        'pplicationApplicationOperations.{}',
        client_factory=cf_application_application)
    with self.command_group('applications', applications_application_application,
                            client_factory=cf_application_application) as g:
        g.custom_command('delete', 'applications_delete', confirmation=True)
        g.custom_command('create-application', 'applications_create_application')
        g.custom_command('get-application', 'applications_get_application')
        g.custom_command('get-logo', 'applications_get_logo')
        g.custom_command('list-application', 'applications_list_application')
        g.custom_command('set-logo', 'applications_set_logo')
        g.custom_command('update-application', 'applications_update_application')

    from azext_applications.generated._client_factory import cf_application
    applications_application = CliCommandType(
        operations_tmpl='azext_applications.vendored_sdks.applications.operations._application_operations#ApplicationOp'
        'erations.{}',
        client_factory=cf_application)
    with self.command_group('applications', applications_application, client_factory=cf_application) as g:
        g.custom_command('delete', 'applications_delete', confirmation=True)
        g.custom_command('add-key', 'applications_add_key')
        g.custom_command('add-password', 'applications_add_password')
        g.custom_command('check-member-group', 'applications_check_member_group')
        g.custom_command('check-member-object', 'applications_check_member_object')
        g.custom_command('create-extension-property', 'applications_create_extension_property')
        g.custom_command('create-ref-home-realm-discovery-policy', 'applications_create_ref_home_realm_discovery_policy'
                         '')
        g.custom_command('create-ref-owner', 'applications_create_ref_owner')
        g.custom_command('create-ref-token-issuance-policy', 'applications_create_ref_token_issuance_policy')
        g.custom_command('create-ref-token-lifetime-policy', 'applications_create_ref_token_lifetime_policy')
        g.custom_command('delta', 'applications_delta')
        g.custom_command('get-available-extension-property', 'applications_get_available_extension_property')
        g.custom_command('get-by-id', 'applications_get_by_id')
        g.custom_command('get-created-on-behalf-of', 'applications_get_created_on_behalf_of')
        g.custom_command('get-extension-property', 'applications_get_extension_property')
        g.custom_command('get-member-group', 'applications_get_member_group')
        g.custom_command('get-member-object', 'applications_get_member_object')
        g.custom_command('get-ref-created-on-behalf-of', 'applications_get_ref_created_on_behalf_of')
        g.custom_command('list-extension-property', 'applications_list_extension_property')
        g.custom_command('list-home-realm-discovery-policy', 'applications_list_home_realm_discovery_policy')
        g.custom_command('list-owner', 'applications_list_owner')
        g.custom_command('list-ref-home-realm-discovery-policy', 'applications_list_ref_home_realm_discovery_policy')
        g.custom_command('list-ref-owner', 'applications_list_ref_owner')
        g.custom_command('list-ref-token-issuance-policy', 'applications_list_ref_token_issuance_policy')
        g.custom_command('list-ref-token-lifetime-policy', 'applications_list_ref_token_lifetime_policy')
        g.custom_command('list-token-issuance-policy', 'applications_list_token_issuance_policy')
        g.custom_command('list-token-lifetime-policy', 'applications_list_token_lifetime_policy')
        g.custom_command('remove-key', 'applications_remove_key')
        g.custom_command('remove-password', 'applications_remove_password')
        g.custom_command('restore', 'applications_restore')
        g.custom_command('set-ref-created-on-behalf-of', 'applications_set_ref_created_on_behalf_of')
        g.custom_command('update-extension-property', 'applications_update_extension_property')
        g.custom_command('validate-property', 'applications_validate_property')

    from azext_applications.generated._client_factory import cf_group
    applications_group = CliCommandType(
        operations_tmpl='azext_applications.vendored_sdks.applications.operations._group_operations#GroupOperations.{}',
        client_factory=cf_group)
    with self.command_group('applications', applications_group, client_factory=cf_group) as g:
        g.custom_command('delete', 'applications_delete', confirmation=True)
        g.custom_command('create-app-role-assignment', 'applications_create_app_role_assignment')
        g.custom_command('get-app-role-assignment', 'applications_get_app_role_assignment')
        g.custom_command('list-app-role-assignment', 'applications_list_app_role_assignment')
        g.custom_command('update-app-role-assignment', 'applications_update_app_role_assignment')

    from azext_applications.generated._client_factory import cf_service_principal_service_principal
    applications_service_principal_service_principal = CliCommandType(
        operations_tmpl='azext_applications.vendored_sdks.applications.operations._service_principal_service_principal_'
        'operations#ServicePrincipalServicePrincipalOperations.{}',
        client_factory=cf_service_principal_service_principal)
    with self.command_group('applications', applications_service_principal_service_principal,
                            client_factory=cf_service_principal_service_principal) as g:
        g.custom_command('delete', 'applications_delete', confirmation=True)
        g.custom_command('create-service-principal', 'applications_create_service_principal')
        g.custom_command('get-service-principal', 'applications_get_service_principal')
        g.custom_command('list-service-principal', 'applications_list_service_principal')
        g.custom_command('update-service-principal', 'applications_update_service_principal')

    from azext_applications.generated._client_factory import cf_service_principal
    applications_service_principal = CliCommandType(
        operations_tmpl='azext_applications.vendored_sdks.applications.operations._service_principal_operations#Service'
        'PrincipalOperations.{}',
        client_factory=cf_service_principal)
    with self.command_group('applications', applications_service_principal, client_factory=cf_service_principal) as g:
        g.custom_command('delete', 'applications_delete', confirmation=True)
        g.custom_command('add-key', 'applications_add_key')
        g.custom_command('add-password', 'applications_add_password')
        g.custom_command('check-member-group', 'applications_check_member_group')
        g.custom_command('check-member-object', 'applications_check_member_object')
        g.custom_command('create-app-role-assigned-to', 'applications_create_app_role_assigned_to')
        g.custom_command('create-app-role-assignment', 'applications_create_app_role_assignment')
        g.custom_command('create-endpoint', 'applications_create_endpoint')
        g.custom_command('create-ref-claim-mapping-policy', 'applications_create_ref_claim_mapping_policy')
        g.custom_command('create-ref-created-object', 'applications_create_ref_created_object')
        g.custom_command('create-ref-home-realm-discovery-policy', 'applications_create_ref_home_realm_discovery_policy'
                         '')
        g.custom_command('create-ref-member-of', 'applications_create_ref_member_of')
        g.custom_command('create-ref-oauth2-permission-grant', 'applications_create_ref_oauth2_permission_grant')
        g.custom_command('create-ref-owned-object', 'applications_create_ref_owned_object')
        g.custom_command('create-ref-owner', 'applications_create_ref_owner')
        g.custom_command('create-ref-token-issuance-policy', 'applications_create_ref_token_issuance_policy')
        g.custom_command('create-ref-token-lifetime-policy', 'applications_create_ref_token_lifetime_policy')
        g.custom_command('create-ref-transitive-member-of', 'applications_create_ref_transitive_member_of')
        g.custom_command('delta', 'applications_delta')
        g.custom_command('get-app-role-assigned-to', 'applications_get_app_role_assigned_to')
        g.custom_command('get-app-role-assignment', 'applications_get_app_role_assignment')
        g.custom_command('get-available-extension-property', 'applications_get_available_extension_property')
        g.custom_command('get-by-id', 'applications_get_by_id')
        g.custom_command('get-endpoint', 'applications_get_endpoint')
        g.custom_command('get-member-group', 'applications_get_member_group')
        g.custom_command('get-member-object', 'applications_get_member_object')
        g.custom_command('list-app-role-assigned-to', 'applications_list_app_role_assigned_to')
        g.custom_command('list-app-role-assignment', 'applications_list_app_role_assignment')
        g.custom_command('list-claim-mapping-policy', 'applications_list_claim_mapping_policy')
        g.custom_command('list-created-object', 'applications_list_created_object')
        g.custom_command('list-endpoint', 'applications_list_endpoint')
        g.custom_command('list-home-realm-discovery-policy', 'applications_list_home_realm_discovery_policy')
        g.custom_command('list-member-of', 'applications_list_member_of')
        g.custom_command('list-oauth2-permission-grant', 'applications_list_oauth2_permission_grant')
        g.custom_command('list-owned-object', 'applications_list_owned_object')
        g.custom_command('list-owner', 'applications_list_owner')
        g.custom_command('list-ref-claim-mapping-policy', 'applications_list_ref_claim_mapping_policy')
        g.custom_command('list-ref-created-object', 'applications_list_ref_created_object')
        g.custom_command('list-ref-home-realm-discovery-policy', 'applications_list_ref_home_realm_discovery_policy')
        g.custom_command('list-ref-member-of', 'applications_list_ref_member_of')
        g.custom_command('list-ref-oauth2-permission-grant', 'applications_list_ref_oauth2_permission_grant')
        g.custom_command('list-ref-owned-object', 'applications_list_ref_owned_object')
        g.custom_command('list-ref-owner', 'applications_list_ref_owner')
        g.custom_command('list-ref-token-issuance-policy', 'applications_list_ref_token_issuance_policy')
        g.custom_command('list-ref-token-lifetime-policy', 'applications_list_ref_token_lifetime_policy')
        g.custom_command('list-ref-transitive-member-of', 'applications_list_ref_transitive_member_of')
        g.custom_command('list-token-issuance-policy', 'applications_list_token_issuance_policy')
        g.custom_command('list-token-lifetime-policy', 'applications_list_token_lifetime_policy')
        g.custom_command('list-transitive-member-of', 'applications_list_transitive_member_of')
        g.custom_command('remove-key', 'applications_remove_key')
        g.custom_command('remove-password', 'applications_remove_password')
        g.custom_command('restore', 'applications_restore')
        g.custom_command('update-app-role-assigned-to', 'applications_update_app_role_assigned_to')
        g.custom_command('update-app-role-assignment', 'applications_update_app_role_assignment')
        g.custom_command('update-endpoint', 'applications_update_endpoint')
        g.custom_command('validate-property', 'applications_validate_property')

    from azext_applications.generated._client_factory import cf_user
    applications_user = CliCommandType(
        operations_tmpl='azext_applications.vendored_sdks.applications.operations._user_operations#UserOperations.{}',
        client_factory=cf_user)
    with self.command_group('applications', applications_user, client_factory=cf_user) as g:
        g.custom_command('delete', 'applications_delete', confirmation=True)
        g.custom_command('create-app-role-assignment', 'applications_create_app_role_assignment')
        g.custom_command('get-app-role-assignment', 'applications_get_app_role_assignment')
        g.custom_command('list-app-role-assignment', 'applications_list_app_role_assignment')
        g.custom_command('update-app-role-assignment', 'applications_update_app_role_assignment')
