# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import get_three_state_flag
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_applications.action import (
    AddKeyCredential,
    AddPasswordCredential
)


def load_arguments(self, _):

    with self.argument_context('applications delete') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('applications create-application') as c:
        c.argument('body', type=validate_file_or_dict, help='New entity Expected value: json-string/@json-file.')

    with self.argument_context('applications get-application') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications get-logo') as c:
        c.argument('application_id', type=str, help='key: id of application')

    with self.argument_context('applications list-application') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications set-logo') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('data', help='New media content.')

    with self.argument_context('applications update-application') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('body', type=validate_file_or_dict, help='New property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications delete') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('extension_property_id', type=str, help='key: id of extensionProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('applications add-key') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('key_credential', action=AddKeyCredential, nargs='*', help='keyCredential')
        c.argument('password_credential', action=AddPasswordCredential, nargs='*', help='passwordCredential')
        c.argument('proof', type=str, help='')

    with self.argument_context('applications add-password') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('password_credential', action=AddPasswordCredential, nargs='*', help='passwordCredential')

    with self.argument_context('applications check-member-group') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('group_ids', nargs='*', help='')

    with self.argument_context('applications check-member-object') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('ids', nargs='*', help='')

    with self.argument_context('applications create-extension-property') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_display_name', type=str, help='Display name of the application object on which this extension '
                   'property is defined. Read-only.')
        c.argument('data_type', type=str, help='Specifies the data type of the value the extension property can hold. '
                   'Following values are supported. Not nullable. Binary - 256 bytes maximumBooleanDateTime - Must be '
                   'specified in ISO 8601 format. Will be stored in UTC.Integer - 32-bit value.LargeInteger - 64-bit '
                   'value.String - 256 characters maximum')
        c.argument('is_synced_from_on_premises', arg_type=get_three_state_flag(), help='Indicates if this extension '
                   'property was sycned from onpremises directory using Azure AD Connect. Read-only.')
        c.argument('name', type=str, help='Name of the extension property. Not nullable.')
        c.argument('target_objects', nargs='*', help='Following values are supported. Not nullable. '
                   'UserGroupOrganizationDeviceApplication')

    with self.argument_context('applications create-ref-home-realm-discovery-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications create-ref-owner') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications create-ref-token-issuance-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications create-ref-token-lifetime-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications get-available-extension-property') as c:
        c.argument('is_synced_from_on_premises', arg_type=get_three_state_flag(), help='')

    with self.argument_context('applications get-by-id') as c:
        c.argument('ids', nargs='*', help='')
        c.argument('types', nargs='*', help='')

    with self.argument_context('applications get-created-on-behalf-of') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications get-extension-property') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('extension_property_id', type=str, help='key: id of extensionProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications get-member-group') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('applications get-member-object') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('applications get-ref-created-on-behalf-of') as c:
        c.argument('application_id', type=str, help='key: id of application')

    with self.argument_context('applications list-extension-property') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-home-realm-discovery-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-owner') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-ref-home-realm-discovery-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('applications list-ref-owner') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('applications list-ref-token-issuance-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('applications list-ref-token-lifetime-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('applications list-token-issuance-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-token-lifetime-policy') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications remove-key') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('key_id', help='')
        c.argument('proof', type=str, help='')

    with self.argument_context('applications remove-password') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('key_id', help='')

    with self.argument_context('applications restore') as c:
        c.argument('application_id', type=str, help='key: id of application')

    with self.argument_context('applications set-ref-created-on-behalf-of') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications update-extension-property') as c:
        c.argument('application_id', type=str, help='key: id of application')
        c.argument('extension_property_id', type=str, help='key: id of extensionProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_display_name', type=str, help='Display name of the application object on which this extension '
                   'property is defined. Read-only.')
        c.argument('data_type', type=str, help='Specifies the data type of the value the extension property can hold. '
                   'Following values are supported. Not nullable. Binary - 256 bytes maximumBooleanDateTime - Must be '
                   'specified in ISO 8601 format. Will be stored in UTC.Integer - 32-bit value.LargeInteger - 64-bit '
                   'value.String - 256 characters maximum')
        c.argument('is_synced_from_on_premises', arg_type=get_three_state_flag(), help='Indicates if this extension '
                   'property was sycned from onpremises directory using Azure AD Connect. Read-only.')
        c.argument('name', type=str, help='Name of the extension property. Not nullable.')
        c.argument('target_objects', nargs='*', help='Following values are supported. Not nullable. '
                   'UserGroupOrganizationDeviceApplication')

    with self.argument_context('applications validate-property') as c:
        c.argument('entity_type', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('mail_nickname', type=str, help='')
        c.argument('on_behalf_of_user_id', help='')

    with self.argument_context('applications delete') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('applications create-app-role-assignment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')

    with self.argument_context('applications get-app-role-assignment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-app-role-assignment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications update-app-role-assignment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')

    with self.argument_context('applications delete') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('applications create-service-principal') as c:
        c.argument('body', type=validate_file_or_dict, help='New entity Expected value: json-string/@json-file.')

    with self.argument_context('applications get-service-principal') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-service-principal') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications update-service-principal') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications delete') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('if_match', type=str, help='ETag')
        c.argument('endpoint_id', type=str, help='key: id of endpoint')

    with self.argument_context('applications add-key') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('key_credential', action=AddKeyCredential, nargs='*', help='keyCredential')
        c.argument('password_credential', action=AddPasswordCredential, nargs='*', help='passwordCredential')
        c.argument('proof', type=str, help='')

    with self.argument_context('applications add-password') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('password_credential', action=AddPasswordCredential, nargs='*', help='passwordCredential')

    with self.argument_context('applications check-member-group') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('group_ids', nargs='*', help='')

    with self.argument_context('applications check-member-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('ids', nargs='*', help='')

    with self.argument_context('applications create-app-role-assigned-to') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')

    with self.argument_context('applications create-app-role-assignment') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')

    with self.argument_context('applications create-endpoint') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('capability', type=str, help='Describes the capability that is associated with this resource. (e.g. '
                   'Messages, Conversations, etc.)  Not nullable. Read-only.')
        c.argument('provider_id', type=str, help='Application id of the publishing underlying service. Not nullable. '
                   'Read-only.')
        c.argument('provider_name', type=str, help='Name of the publishing underlying service. Read-only.')
        c.argument('provider_resource_id', type=str, help='For Microsoft 365 groups, this is set to a well-known name '
                   'for the resource (e.g. Yammer.FeedURL etc.). Not nullable. Read-only.')
        c.argument('uri', type=str, help='URL of the published resource. Not nullable. Read-only.')

    with self.argument_context('applications create-ref-claim-mapping-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications create-ref-created-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications create-ref-home-realm-discovery-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications create-ref-member-of') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications create-ref-oauth2-permission-grant') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications create-ref-owned-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications create-ref-owner') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications create-ref-token-issuance-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications create-ref-token-lifetime-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications create-ref-transitive-member-of') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('applications get-app-role-assigned-to') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications get-app-role-assignment') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications get-available-extension-property') as c:
        c.argument('is_synced_from_on_premises', arg_type=get_three_state_flag(), help='')

    with self.argument_context('applications get-by-id') as c:
        c.argument('ids', nargs='*', help='')
        c.argument('types', nargs='*', help='')

    with self.argument_context('applications get-endpoint') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('endpoint_id', type=str, help='key: id of endpoint')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications get-member-group') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('applications get-member-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('applications list-app-role-assigned-to') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-app-role-assignment') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-claim-mapping-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-created-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-endpoint') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-home-realm-discovery-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-member-of') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-oauth2-permission-grant') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-owned-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-owner') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-ref-claim-mapping-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('applications list-ref-created-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('applications list-ref-home-realm-discovery-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('applications list-ref-member-of') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('applications list-ref-oauth2-permission-grant') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('applications list-ref-owned-object') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('applications list-ref-owner') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('applications list-ref-token-issuance-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('applications list-ref-token-lifetime-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('applications list-ref-transitive-member-of') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')

    with self.argument_context('applications list-token-issuance-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-token-lifetime-policy') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-transitive-member-of') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications remove-key') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('key_id', help='')
        c.argument('proof', type=str, help='')

    with self.argument_context('applications remove-password') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('key_id', help='')

    with self.argument_context('applications restore') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')

    with self.argument_context('applications update-app-role-assigned-to') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')

    with self.argument_context('applications update-app-role-assignment') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')

    with self.argument_context('applications update-endpoint') as c:
        c.argument('service_principal_id', type=str, help='key: id of servicePrincipal')
        c.argument('endpoint_id', type=str, help='key: id of endpoint')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('capability', type=str, help='Describes the capability that is associated with this resource. (e.g. '
                   'Messages, Conversations, etc.)  Not nullable. Read-only.')
        c.argument('provider_id', type=str, help='Application id of the publishing underlying service. Not nullable. '
                   'Read-only.')
        c.argument('provider_name', type=str, help='Name of the publishing underlying service. Read-only.')
        c.argument('provider_resource_id', type=str, help='For Microsoft 365 groups, this is set to a well-known name '
                   'for the resource (e.g. Yammer.FeedURL etc.). Not nullable. Read-only.')
        c.argument('uri', type=str, help='URL of the published resource. Not nullable. Read-only.')

    with self.argument_context('applications validate-property') as c:
        c.argument('entity_type', type=str, help='')
        c.argument('display_name', type=str, help='')
        c.argument('mail_nickname', type=str, help='')
        c.argument('on_behalf_of_user_id', help='')

    with self.argument_context('applications delete') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('applications create-app-role-assignment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')

    with self.argument_context('applications get-app-role-assignment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications list-app-role-assignment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('applications update-app-role-assignment') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('app_role_assignment_id', type=str, help='key: id of appRoleAssignment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('app_role_id', help='The identifier (id) for the app role which is assigned to the principal. This '
                   'app role must be exposed in the appRoles property on the resource application\'s service principal '
                   '(resourceId). If the resource application has not declared any app roles, a default app role ID of '
                   '00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to '
                   'the resource app without any specific app roles. Required on create. Does not support $filter.')
        c.argument('created_date_time', help='')
        c.argument('principal_display_name', type=str, help='The display name of the user, group, or service principal '
                   'that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).')
        c.argument('principal_id', help='The unique identifier (id) for the user, group or service principal being '
                   'granted the app role. Required on create. Does not support $filter.')
        c.argument('principal_type', type=str, help='The type of the assigned principal. This can either be \'User\', '
                   '\'Group\' or \'ServicePrincipal\'. Read-only. Does not support $filter.')
        c.argument('resource_display_name', type=str, help='The display name of the resource app\'s service principal '
                   'to which the assignment is made. Does not support $filter.')
        c.argument('resource_id', help='The unique identifier (id) for the resource service principal for which the '
                   'assignment is made. Required on create. Supports $filter (eq only).')
