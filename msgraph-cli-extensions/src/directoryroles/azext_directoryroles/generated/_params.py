# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import get_three_state_flag
from azext_directoryroles.action import (
    AddMembers,
    AddScopedMembers
)


def load_arguments(self, _):

    with self.argument_context('directoryroles directory-role-directory-role update') as c:
        c.argument('directory_role_id', help='key: directoryRole-id of directoryRole')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', help='The description for the directory role. Read-only.')
        c.argument('display_name', help='The display name for the directory role. Read-only.')
        c.argument('role_template_id', help='The id of the directoryRoleTemplate that this role is based on. The '
                   'property must be specified when activating a directory role in a tenant with a POST operation. '
                   'After the directory role has been activated, the property is read only.')
        c.argument('members', action=AddMembers, nargs='*', help='Users that are members of this directory role. HTTP '
                   'Methods: GET, POST, DELETE. Read-only. Nullable.')
        c.argument('scoped_members', action=AddScopedMembers, nargs='*', help='')

    with self.argument_context('directoryroles directory-role-directory-role delete') as c:
        c.argument('directory_role_id', help='key: directoryRole-id of directoryRole')
        c.argument('if_match', help='ETag')

    with self.argument_context('directoryroles directory-role-directory-role create-directory-role') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', help='The description for the directory role. Read-only.')
        c.argument('display_name', help='The display name for the directory role. Read-only.')
        c.argument('role_template_id', help='The id of the directoryRoleTemplate that this role is based on. The '
                   'property must be specified when activating a directory role in a tenant with a POST operation. '
                   'After the directory role has been activated, the property is read only.')
        c.argument('members', action=AddMembers, nargs='*', help='Users that are members of this directory role. HTTP '
                   'Methods: GET, POST, DELETE. Read-only. Nullable.')
        c.argument('scoped_members', action=AddScopedMembers, nargs='*', help='')

    with self.argument_context('directoryroles directory-role-directory-role get-directory-role') as c:
        c.argument('directory_role_id', help='key: directoryRole-id of directoryRole')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('directoryroles directory-role-directory-role list-directory-role') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('directoryroles directory-role update') as c:
        c.argument('directory_role_id', help='key: directoryRole-id of directoryRole')
        c.argument('scoped_role_membership_id', help='key: scopedRoleMembership-id of scopedRoleMembership')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('role_id', help='')
        c.argument('administrative_unit_id', help='')
        c.argument('role_member_info_id', help='Unique identifier for the identity.')
        c.argument('role_member_info_display_name', help='The identity\'s display name. Note that this may not always '
                   'be available or up to date. For example, if a user changes their display name, the API may show '
                   'the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')

    with self.argument_context('directoryroles directory-role check-member-group') as c:
        c.argument('directory_role_id', help='key: directoryRole-id of directoryRole')
        c.argument('group_ids', nargs='*', help='')

    with self.argument_context('directoryroles directory-role check-member-object') as c:
        c.argument('directory_role_id', help='key: directoryRole-id of directoryRole')
        c.argument('ids', nargs='*', help='')

    with self.argument_context('directoryroles directory-role create-scoped-member') as c:
        c.argument('directory_role_id', help='key: directoryRole-id of directoryRole')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('role_id', help='')
        c.argument('administrative_unit_id', help='')
        c.argument('role_member_info_id', help='Unique identifier for the identity.')
        c.argument('role_member_info_display_name', help='The identity\'s display name. Note that this may not always '
                   'be available or up to date. For example, if a user changes their display name, the API may show '
                   'the new value in a future response, but the items associated with the user won\'t show up as '
                   'having changed when using delta.')

    with self.argument_context('directoryroles directory-role delta') as c:
        pass

    with self.argument_context('directoryroles directory-role get-by-id') as c:
        c.argument('ids', nargs='*', help='')
        c.argument('types', nargs='*', help='')

    with self.argument_context('directoryroles directory-role get-member') as c:
        c.argument('directory_role_id', help='key: directoryRole-id of directoryRole')
        c.argument('directory_object_id', help='key: directoryObject-id of directoryObject')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('directoryroles directory-role get-member-group') as c:
        c.argument('directory_role_id', help='key: directoryRole-id of directoryRole')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('directoryroles directory-role get-member-object') as c:
        c.argument('directory_role_id', help='key: directoryRole-id of directoryRole')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('directoryroles directory-role get-scoped-member') as c:
        c.argument('directory_role_id', help='key: directoryRole-id of directoryRole')
        c.argument('scoped_role_membership_id', help='key: scopedRoleMembership-id of scopedRoleMembership')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('directoryroles directory-role get-user-owned-object') as c:
        c.argument('user_id', help='')
        c.argument('type_', options_list=['--type'], help='')

    with self.argument_context('directoryroles directory-role list-member') as c:
        c.argument('directory_role_id', help='key: directoryRole-id of directoryRole')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('directoryroles directory-role list-scoped-member') as c:
        c.argument('directory_role_id', help='key: directoryRole-id of directoryRole')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('directoryroles directory-role restore') as c:
        c.argument('directory_role_id', help='key: directoryRole-id of directoryRole')

    with self.argument_context('directoryroles directory-role validate-property') as c:
        c.argument('entity_type', help='')
        c.argument('display_name', help='')
        c.argument('mail_nickname', help='')
        c.argument('on_behalf_of_user_id', help='')
