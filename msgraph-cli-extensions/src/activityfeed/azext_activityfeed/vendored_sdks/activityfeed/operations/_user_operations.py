# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class UserOperations(object):
    """UserOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~users_activity_feed.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_activity(
        self,
        user_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Get6ItemsItem"]]]
        select=None,  # type: Optional[List[Union[str, "models.Get7ItemsItem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get8ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfUserActivity"]
        """Get activities from users.

        Get activities from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~users_activity_feed.models.Get6ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~users_activity_feed.models.Get7ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~users_activity_feed.models.Get8ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfUserActivity or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~users_activity_feed.models.CollectionOfUserActivity]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfUserActivity"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_activity.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfUserActivity', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_activity.metadata = {'url': '/users/{user-id}/activities'}  # type: ignore

    def create_activity(
        self,
        user_id,  # type: str
        id=None,  # type: Optional[str]
        activity_source_host=None,  # type: Optional[str]
        activation_url=None,  # type: Optional[str]
        app_activity_id=None,  # type: Optional[str]
        app_display_name=None,  # type: Optional[str]
        content_url=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        expiration_date_time=None,  # type: Optional[datetime.datetime]
        fallback_url=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        user_timezone=None,  # type: Optional[str]
        content_info=None,  # type: Optional[object]
        status=None,  # type: Optional[Union[str, "models.MicrosoftGraphStatus"]]
        history_items=None,  # type: Optional[List["models.MicrosoftGraphActivityHistoryItem"]]
        attribution=None,  # type: Optional["models.MicrosoftGraphImageInfo"]
        background_color=None,  # type: Optional[str]
        description=None,  # type: Optional[str]
        display_text=None,  # type: Optional[str]
        content=None,  # type: Optional[object]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphUserActivity"
        """Create new navigation property to activities for users.

        Create new navigation property to activities for users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param activity_source_host: Required. URL for the domain representing the cross-platform
         identity mapping for the app. Mapping is stored either as a JSON file hosted on the domain or
         configurable via Windows Dev Center. The JSON file is named cross-platform-app-identifiers and
         is hosted at root of your HTTPS domain, either at the top level domain or include a sub domain.
         For example: https://contoso.com or https://myapp.contoso.com but NOT
         https://myapp.contoso.com/somepath. You must have a unique file and domain (or sub domain) per
         cross-platform app identity. For example, a separate file and domain is needed for Word vs.
         PowerPoint.
        :type activity_source_host: str
        :param activation_url: Required. URL used to launch the activity in the best native experience
         represented by the appId. Might launch a web-based app if no native app exists.
        :type activation_url: str
        :param app_activity_id: Required. The unique activity ID in the context of the app - supplied
         by caller and immutable thereafter.
        :type app_activity_id: str
        :param app_display_name: Optional. Short text description of the app used to generate the
         activity for use in cases when the app is not installed on the userâ€™s local device.
        :type app_display_name: str
        :param content_url: Optional. Used in the event the content can be rendered outside of a native
         or web-based app experience (for example, a pointer to an item in an RSS feed).
        :type content_url: str
        :param created_date_time: Set by the server. DateTime in UTC when the object was created on the
         server.
        :type created_date_time: ~datetime.datetime
        :param expiration_date_time: Set by the server. DateTime in UTC when the object expired on the
         server.
        :type expiration_date_time: ~datetime.datetime
        :param fallback_url: Optional. URL used to launch the activity in a web-based app, if
         available.
        :type fallback_url: str
        :param last_modified_date_time: Set by the server. DateTime in UTC when the object was modified
         on the server.
        :type last_modified_date_time: ~datetime.datetime
        :param user_timezone: Optional. The timezone in which the user's device used to generate the
         activity was located at activity creation time; values supplied as Olson IDs in order to
         support cross-platform representation.
        :type user_timezone: str
        :param content_info: Any object.
        :type content_info: object
        :param status: status.
        :type status: str or ~users_activity_feed.models.MicrosoftGraphStatus
        :param history_items: Optional. NavigationProperty/Containment; navigation property to the
         activity's historyItems.
        :type history_items: list[~users_activity_feed.models.MicrosoftGraphActivityHistoryItem]
        :param attribution: imageInfo.
        :type attribution: ~users_activity_feed.models.MicrosoftGraphImageInfo
        :param background_color: Optional. Background color used to render the activity in the UI -
         brand color for the application source of the activity. Must be a valid hex color.
        :type background_color: str
        :param description: Optional. Longer text description of the user's unique activity (example:
         document name, first sentence, and/or metadata).
        :type description: str
        :param display_text: Required. Short text description of the user's unique activity (for
         example, document name in cases where an activity refers to document creation).
        :type display_text: str
        :param content: Any object.
        :type content: object
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUserActivity, or the result of cls(response)
        :rtype: ~users_activity_feed.models.MicrosoftGraphUserActivity
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUserActivity"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphUserActivity(id=id, activity_source_host=activity_source_host, activation_url=activation_url, app_activity_id=app_activity_id, app_display_name=app_display_name, content_url=content_url, created_date_time=created_date_time, expiration_date_time=expiration_date_time, fallback_url=fallback_url, last_modified_date_time=last_modified_date_time, user_timezone=user_timezone, content_info=content_info, status=status, history_items=history_items, attribution=attribution, background_color=background_color, description=description, display_text=display_text, content=content)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_activity.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphUserActivity')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUserActivity', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_activity.metadata = {'url': '/users/{user-id}/activities'}  # type: ignore

    def get_activity(
        self,
        user_id,  # type: str
        user_activity_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Get2ItemsItem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get3ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphUserActivity"
        """Get activities from users.

        Get activities from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param user_activity_id: key: userActivity-id of userActivity.
        :type user_activity_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~users_activity_feed.models.Get2ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~users_activity_feed.models.Get3ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUserActivity, or the result of cls(response)
        :rtype: ~users_activity_feed.models.MicrosoftGraphUserActivity
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUserActivity"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_activity.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'userActivity-id': self._serialize.url("user_activity_id", user_activity_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUserActivity', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_activity.metadata = {'url': '/users/{user-id}/activities/{userActivity-id}'}  # type: ignore

    def update_activity(
        self,
        user_id,  # type: str
        user_activity_id,  # type: str
        id=None,  # type: Optional[str]
        activity_source_host=None,  # type: Optional[str]
        activation_url=None,  # type: Optional[str]
        app_activity_id=None,  # type: Optional[str]
        app_display_name=None,  # type: Optional[str]
        content_url=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        expiration_date_time=None,  # type: Optional[datetime.datetime]
        fallback_url=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        user_timezone=None,  # type: Optional[str]
        content_info=None,  # type: Optional[object]
        status=None,  # type: Optional[Union[str, "models.MicrosoftGraphStatus"]]
        history_items=None,  # type: Optional[List["models.MicrosoftGraphActivityHistoryItem"]]
        attribution=None,  # type: Optional["models.MicrosoftGraphImageInfo"]
        background_color=None,  # type: Optional[str]
        description=None,  # type: Optional[str]
        display_text=None,  # type: Optional[str]
        content=None,  # type: Optional[object]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property activities in users.

        Update the navigation property activities in users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param user_activity_id: key: userActivity-id of userActivity.
        :type user_activity_id: str
        :param id: Read-only.
        :type id: str
        :param activity_source_host: Required. URL for the domain representing the cross-platform
         identity mapping for the app. Mapping is stored either as a JSON file hosted on the domain or
         configurable via Windows Dev Center. The JSON file is named cross-platform-app-identifiers and
         is hosted at root of your HTTPS domain, either at the top level domain or include a sub domain.
         For example: https://contoso.com or https://myapp.contoso.com but NOT
         https://myapp.contoso.com/somepath. You must have a unique file and domain (or sub domain) per
         cross-platform app identity. For example, a separate file and domain is needed for Word vs.
         PowerPoint.
        :type activity_source_host: str
        :param activation_url: Required. URL used to launch the activity in the best native experience
         represented by the appId. Might launch a web-based app if no native app exists.
        :type activation_url: str
        :param app_activity_id: Required. The unique activity ID in the context of the app - supplied
         by caller and immutable thereafter.
        :type app_activity_id: str
        :param app_display_name: Optional. Short text description of the app used to generate the
         activity for use in cases when the app is not installed on the userâ€™s local device.
        :type app_display_name: str
        :param content_url: Optional. Used in the event the content can be rendered outside of a native
         or web-based app experience (for example, a pointer to an item in an RSS feed).
        :type content_url: str
        :param created_date_time: Set by the server. DateTime in UTC when the object was created on the
         server.
        :type created_date_time: ~datetime.datetime
        :param expiration_date_time: Set by the server. DateTime in UTC when the object expired on the
         server.
        :type expiration_date_time: ~datetime.datetime
        :param fallback_url: Optional. URL used to launch the activity in a web-based app, if
         available.
        :type fallback_url: str
        :param last_modified_date_time: Set by the server. DateTime in UTC when the object was modified
         on the server.
        :type last_modified_date_time: ~datetime.datetime
        :param user_timezone: Optional. The timezone in which the user's device used to generate the
         activity was located at activity creation time; values supplied as Olson IDs in order to
         support cross-platform representation.
        :type user_timezone: str
        :param content_info: Any object.
        :type content_info: object
        :param status: status.
        :type status: str or ~users_activity_feed.models.MicrosoftGraphStatus
        :param history_items: Optional. NavigationProperty/Containment; navigation property to the
         activity's historyItems.
        :type history_items: list[~users_activity_feed.models.MicrosoftGraphActivityHistoryItem]
        :param attribution: imageInfo.
        :type attribution: ~users_activity_feed.models.MicrosoftGraphImageInfo
        :param background_color: Optional. Background color used to render the activity in the UI -
         brand color for the application source of the activity. Must be a valid hex color.
        :type background_color: str
        :param description: Optional. Longer text description of the user's unique activity (example:
         document name, first sentence, and/or metadata).
        :type description: str
        :param display_text: Required. Short text description of the user's unique activity (for
         example, document name in cases where an activity refers to document creation).
        :type display_text: str
        :param content: Any object.
        :type content: object
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphUserActivity(id=id, activity_source_host=activity_source_host, activation_url=activation_url, app_activity_id=app_activity_id, app_display_name=app_display_name, content_url=content_url, created_date_time=created_date_time, expiration_date_time=expiration_date_time, fallback_url=fallback_url, last_modified_date_time=last_modified_date_time, user_timezone=user_timezone, content_info=content_info, status=status, history_items=history_items, attribution=attribution, background_color=background_color, description=description, display_text=display_text, content=content)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_activity.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'userActivity-id': self._serialize.url("user_activity_id", user_activity_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphUserActivity')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_activity.metadata = {'url': '/users/{user-id}/activities/{userActivity-id}'}  # type: ignore
