# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class UserActivityHistoryItemOperations:
    """UserActivityHistoryItemOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~users_activity_feed.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def get_activity(
        self,
        user_id: str,
        user_activity_id: str,
        activity_history_item_id: str,
        select: Optional[List[Union[str, "models.Enum11"]]] = None,
        expand: Optional[List[Union[str, "models.Enum12"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphUserActivity":
        """Get activity from users.

        Get activity from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param user_activity_id: key: userActivity-id of userActivity.
        :type user_activity_id: str
        :param activity_history_item_id: key: activityHistoryItem-id of activityHistoryItem.
        :type activity_history_item_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~users_activity_feed.models.Enum11]
        :param expand: Expand related entities.
        :type expand: list[str or ~users_activity_feed.models.Enum12]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUserActivity, or the result of cls(response)
        :rtype: ~users_activity_feed.models.MicrosoftGraphUserActivity
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUserActivity"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_activity.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'userActivity-id': self._serialize.url("user_activity_id", user_activity_id, 'str'),
            'activityHistoryItem-id': self._serialize.url("activity_history_item_id", activity_history_item_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUserActivity', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_activity.metadata = {'url': '/users/{user-id}/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}/activity'}  # type: ignore
