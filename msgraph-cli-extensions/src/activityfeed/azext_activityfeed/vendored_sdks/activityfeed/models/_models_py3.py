# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._users_activity_feed_enums import *


class CollectionOfActivityHistoryItem(msrest.serialization.Model):
    """Collection of activityHistoryItem.

    :param value:
    :type value: list[~users_activity_feed.models.MicrosoftGraphActivityHistoryItem]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphActivityHistoryItem]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphActivityHistoryItem"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfActivityHistoryItem, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfUserActivity(msrest.serialization.Model):
    """Collection of userActivity.

    :param value:
    :type value: list[~users_activity_feed.models.MicrosoftGraphUserActivity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphUserActivity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphUserActivity"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfUserActivity, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = id


class MicrosoftGraphActivityHistoryItem(MicrosoftGraphEntity):
    """activityHistoryItem.

    :param id: Read-only.
    :type id: str
    :param status: status. Possible values include: "active", "updated", "deleted", "ignored",
     "unknownFutureValue".
    :type status: str or ~users_activity_feed.models.MicrosoftGraphStatus
    :param active_duration_seconds: Optional. The duration of active user engagement. if not
     supplied, this is calculated from the startedDateTime and lastActiveDateTime.
    :type active_duration_seconds: int
    :param created_date_time: Set by the server. DateTime in UTC when the object was created on the
     server.
    :type created_date_time: ~datetime.datetime
    :param last_active_date_time: Optional. UTC DateTime when the historyItem (activity session)
     was last understood as active or finished - if null, historyItem status should be Ongoing.
    :type last_active_date_time: ~datetime.datetime
    :param last_modified_date_time: Set by the server. DateTime in UTC when the object was modified
     on the server.
    :type last_modified_date_time: ~datetime.datetime
    :param expiration_date_time: Optional. UTC DateTime when the historyItem will undergo hard-
     delete. Can be set by the client.
    :type expiration_date_time: ~datetime.datetime
    :param started_date_time: Required. UTC DateTime when the historyItem (activity session) was
     started. Required for timeline history.
    :type started_date_time: ~datetime.datetime
    :param user_timezone: Optional. The timezone in which the user's device used to generate the
     activity was located at activity creation time. Values supplied as Olson IDs in order to
     support cross-platform representation.
    :type user_timezone: str
    :param activity: userActivity.
    :type activity: ~users_activity_feed.models.MicrosoftGraphUserActivity
    """

    _validation = {
        'active_duration_seconds': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'active_duration_seconds': {'key': 'activeDurationSeconds', 'type': 'int'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_active_date_time': {'key': 'lastActiveDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'started_date_time': {'key': 'startedDateTime', 'type': 'iso-8601'},
        'user_timezone': {'key': 'userTimezone', 'type': 'str'},
        'activity': {'key': 'activity', 'type': 'MicrosoftGraphUserActivity'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphStatus"]] = None,
        active_duration_seconds: Optional[int] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_active_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        started_date_time: Optional[datetime.datetime] = None,
        user_timezone: Optional[str] = None,
        activity: Optional["MicrosoftGraphUserActivity"] = None,
        **kwargs
    ):
        super(MicrosoftGraphActivityHistoryItem, self).__init__(id=id, **kwargs)
        self.status = status
        self.active_duration_seconds = active_duration_seconds
        self.created_date_time = created_date_time
        self.last_active_date_time = last_active_date_time
        self.last_modified_date_time = last_modified_date_time
        self.expiration_date_time = expiration_date_time
        self.started_date_time = started_date_time
        self.user_timezone = user_timezone
        self.activity = activity


class MicrosoftGraphImageInfo(msrest.serialization.Model):
    """imageInfo.

    :param icon_url: Optional; URI that points to an icon which represents the application used to
     generate the activity.
    :type icon_url: str
    :param alternative_text:
    :type alternative_text: str
    :param alternate_text: Optional; alt-text accessible content for the image.
    :type alternate_text: str
    :param add_image_query: Optional; parameter used to indicate the server is able to render image
     dynamically in response to parameterization. For example – a high contrast image.
    :type add_image_query: bool
    """

    _attribute_map = {
        'icon_url': {'key': 'iconUrl', 'type': 'str'},
        'alternative_text': {'key': 'alternativeText', 'type': 'str'},
        'alternate_text': {'key': 'alternateText', 'type': 'str'},
        'add_image_query': {'key': 'addImageQuery', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        icon_url: Optional[str] = None,
        alternative_text: Optional[str] = None,
        alternate_text: Optional[str] = None,
        add_image_query: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphImageInfo, self).__init__(**kwargs)
        self.icon_url = icon_url
        self.alternative_text = alternative_text
        self.alternate_text = alternate_text
        self.add_image_query = add_image_query


class MicrosoftGraphUserActivity(MicrosoftGraphEntity):
    """userActivity.

    :param id: Read-only.
    :type id: str
    :param activity_source_host: Required. URL for the domain representing the cross-platform
     identity mapping for the app. Mapping is stored either as a JSON file hosted on the domain or
     configurable via Windows Dev Center. The JSON file is named cross-platform-app-identifiers and
     is hosted at root of your HTTPS domain, either at the top level domain or include a sub domain.
     For example: https://contoso.com or https://myapp.contoso.com but NOT
     https://myapp.contoso.com/somepath. You must have a unique file and domain (or sub domain) per
     cross-platform app identity. For example, a separate file and domain is needed for Word vs.
     PowerPoint.
    :type activity_source_host: str
    :param activation_url: Required. URL used to launch the activity in the best native experience
     represented by the appId. Might launch a web-based app if no native app exists.
    :type activation_url: str
    :param app_activity_id: Required. The unique activity ID in the context of the app - supplied
     by caller and immutable thereafter.
    :type app_activity_id: str
    :param app_display_name: Optional. Short text description of the app used to generate the
     activity for use in cases when the app is not installed on the user’s local device.
    :type app_display_name: str
    :param content_url: Optional. Used in the event the content can be rendered outside of a native
     or web-based app experience (for example, a pointer to an item in an RSS feed).
    :type content_url: str
    :param created_date_time: Set by the server. DateTime in UTC when the object was created on the
     server.
    :type created_date_time: ~datetime.datetime
    :param expiration_date_time: Set by the server. DateTime in UTC when the object expired on the
     server.
    :type expiration_date_time: ~datetime.datetime
    :param fallback_url: Optional. URL used to launch the activity in a web-based app, if
     available.
    :type fallback_url: str
    :param last_modified_date_time: Set by the server. DateTime in UTC when the object was modified
     on the server.
    :type last_modified_date_time: ~datetime.datetime
    :param user_timezone: Optional. The timezone in which the user's device used to generate the
     activity was located at activity creation time; values supplied as Olson IDs in order to
     support cross-platform representation.
    :type user_timezone: str
    :param content_info: Any object.
    :type content_info: object
    :param status: status. Possible values include: "active", "updated", "deleted", "ignored",
     "unknownFutureValue".
    :type status: str or ~users_activity_feed.models.MicrosoftGraphStatus
    :param history_items: Optional. NavigationProperty/Containment; navigation property to the
     activity's historyItems.
    :type history_items: list[~users_activity_feed.models.MicrosoftGraphActivityHistoryItem]
    :param attribution: imageInfo.
    :type attribution: ~users_activity_feed.models.MicrosoftGraphImageInfo
    :param background_color: Optional. Background color used to render the activity in the UI -
     brand color for the application source of the activity. Must be a valid hex color.
    :type background_color: str
    :param description: Optional. Longer text description of the user's unique activity (example:
     document name, first sentence, and/or metadata).
    :type description: str
    :param display_text: Required. Short text description of the user's unique activity (for
     example, document name in cases where an activity refers to document creation).
    :type display_text: str
    :param content: Any object.
    :type content: object
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'activity_source_host': {'key': 'activitySourceHost', 'type': 'str'},
        'activation_url': {'key': 'activationUrl', 'type': 'str'},
        'app_activity_id': {'key': 'appActivityId', 'type': 'str'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'content_url': {'key': 'contentUrl', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'fallback_url': {'key': 'fallbackUrl', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'user_timezone': {'key': 'userTimezone', 'type': 'str'},
        'content_info': {'key': 'contentInfo', 'type': 'object'},
        'status': {'key': 'status', 'type': 'str'},
        'history_items': {'key': 'historyItems', 'type': '[MicrosoftGraphActivityHistoryItem]'},
        'attribution': {'key': 'visualElements.attribution', 'type': 'MicrosoftGraphImageInfo'},
        'background_color': {'key': 'visualElements.backgroundColor', 'type': 'str'},
        'description': {'key': 'visualElements.description', 'type': 'str'},
        'display_text': {'key': 'visualElements.displayText', 'type': 'str'},
        'content': {'key': 'visualElements.content', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        activity_source_host: Optional[str] = None,
        activation_url: Optional[str] = None,
        app_activity_id: Optional[str] = None,
        app_display_name: Optional[str] = None,
        content_url: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        fallback_url: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        user_timezone: Optional[str] = None,
        content_info: Optional[object] = None,
        status: Optional[Union[str, "MicrosoftGraphStatus"]] = None,
        history_items: Optional[List["MicrosoftGraphActivityHistoryItem"]] = None,
        attribution: Optional["MicrosoftGraphImageInfo"] = None,
        background_color: Optional[str] = None,
        description: Optional[str] = None,
        display_text: Optional[str] = None,
        content: Optional[object] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserActivity, self).__init__(id=id, **kwargs)
        self.activity_source_host = activity_source_host
        self.activation_url = activation_url
        self.app_activity_id = app_activity_id
        self.app_display_name = app_display_name
        self.content_url = content_url
        self.created_date_time = created_date_time
        self.expiration_date_time = expiration_date_time
        self.fallback_url = fallback_url
        self.last_modified_date_time = last_modified_date_time
        self.user_timezone = user_timezone
        self.content_info = content_info
        self.status = status
        self.history_items = history_items
        self.attribution = attribution
        self.background_color = background_color
        self.description = description
        self.display_text = display_text
        self.content = content


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~users_activity_feed.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        *,
        error: "OdataErrorMain",
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = error


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~users_activity_feed.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["OdataErrorDetail"]] = None,
        innererror: Optional[object] = None,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror
