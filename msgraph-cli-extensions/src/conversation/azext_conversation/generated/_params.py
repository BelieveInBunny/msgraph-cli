# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_conversation.action import (
    AddToRecipients,
    AddCcRecipients,
    AddBody,
    AddNewParticipants,
    AddSingleValueExtendedProperties,
    AddMultiValueExtendedProperties,
    AddExtensions,
    AddAttachments,
    AddMentioned
)


def load_arguments(self, _):

    with self.argument_context('conversation group update') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('topic', help='The topic of the conversation. This property can be set when the conversation is '
                   'created, but it cannot be updated.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether any of the posts within '
                   'this Conversation has at least one attachment.')
        c.argument('last_delivered_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('unique_senders', nargs='*', help='All the users that sent a message to this Conversation.')
        c.argument('preview', help='A short summary from the body of the latest post in this converstaion.')
        c.argument('threads', type=validate_file_or_dict, help='A collection of all the conversation threads in the '
                   'conversation. A navigation property. Read-only. Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('conversation group create-conversation') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('topic', help='The topic of the conversation. This property can be set when the conversation is '
                   'created, but it cannot be updated.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether any of the posts within '
                   'this Conversation has at least one attachment.')
        c.argument('last_delivered_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('unique_senders', nargs='*', help='All the users that sent a message to this Conversation.')
        c.argument('preview', help='A short summary from the body of the latest post in this converstaion.')
        c.argument('threads', type=validate_file_or_dict, help='A collection of all the conversation threads in the '
                   'conversation. A navigation property. Read-only. Nullable. Expected value: json-string/@json-file.')

    with self.argument_context('conversation group get-conversation') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group list-conversation') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation update') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('to_recipients', action=AddToRecipients, nargs='*', help='The To: recipients for the thread.')
        c.argument('topic', help='The topic of the conversation. This property can be set when the conversation is '
                   'created, but it cannot be updated.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether any of the posts within '
                   'this thread has at least one attachment.')
        c.argument('last_delivered_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('unique_senders', nargs='*', help='All the users that sent a message to this thread.')
        c.argument('cc_recipients', action=AddCcRecipients, nargs='*', help='The Cc: recipients for the thread.')
        c.argument('preview', help='A short summary from the body of the latest post in this converstaion.')
        c.argument('is_locked', arg_type=get_three_state_flag(), help='Indicates if the thread is locked.')
        c.argument('posts', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('conversation group-conversation create-thread') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('to_recipients', action=AddToRecipients, nargs='*', help='The To: recipients for the thread.')
        c.argument('topic', help='The topic of the conversation. This property can be set when the conversation is '
                   'created, but it cannot be updated.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether any of the posts within '
                   'this thread has at least one attachment.')
        c.argument('last_delivered_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('unique_senders', nargs='*', help='All the users that sent a message to this thread.')
        c.argument('cc_recipients', action=AddCcRecipients, nargs='*', help='The Cc: recipients for the thread.')
        c.argument('preview', help='A short summary from the body of the latest post in this converstaion.')
        c.argument('is_locked', arg_type=get_three_state_flag(), help='Indicates if the thread is locked.')
        c.argument('posts', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('conversation group-conversation get-thread') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation list-thread') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation-thread update') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('change_key', help='Identifies the version of the item. Every time the item is changed, changeKey '
                   'changes as well. This allows Exchange to apply changes to the correct version of the object. '
                   'Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('received_date_time', help='Specifies when the post was received. The DateTimeOffset type '
                   'represents date and time information using ISO 8601 format and is always in UTC time. For example, '
                   'midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the post has at least '
                   'one attachment. This is a default property.')
        c.argument('microsoft_graph_post_conversation_thread_id_conversation_thread_id', help='Unique ID of the '
                   'conversation thread. Read-only.')
        c.argument('new_participants', action=AddNewParticipants, nargs='*', help='Conversation participants that were '
                   'added to the thread as part of this post.')
        c.argument('microsoft_graph_post_conversation_id', help='Unique ID of the conversation. Read-only.')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='importance')
        c.argument('in_reply_to', type=validate_file_or_dict, help='post Expected value: json-string/@json-file.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the post. Read-only. Nullable.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Read-only. Nullable.')
        c.argument('mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sender_email_address_name', help='The display name of the person or entity.')
        c.argument('sender_email_address_address', help='The email address of the person or entity.')
        c.argument('from_email_address_name', help='The display name of the person or entity.')
        c.argument('from_email_address_address', help='The email address of the person or entity.')

    with self.argument_context('conversation group-conversation-thread create-post') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('change_key', help='Identifies the version of the item. Every time the item is changed, changeKey '
                   'changes as well. This allows Exchange to apply changes to the correct version of the object. '
                   'Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('received_date_time', help='Specifies when the post was received. The DateTimeOffset type '
                   'represents date and time information using ISO 8601 format and is always in UTC time. For example, '
                   'midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the post has at least '
                   'one attachment. This is a default property.')
        c.argument('microsoft_graph_post_conversation_thread_id_conversation_thread_id', help='Unique ID of the '
                   'conversation thread. Read-only.')
        c.argument('new_participants', action=AddNewParticipants, nargs='*', help='Conversation participants that were '
                   'added to the thread as part of this post.')
        c.argument('microsoft_graph_post_conversation_id', help='Unique ID of the conversation. Read-only.')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='importance')
        c.argument('in_reply_to', type=validate_file_or_dict, help='post Expected value: json-string/@json-file.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the post. Read-only. Nullable.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Read-only. Nullable.')
        c.argument('mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sender_email_address_name', help='The display name of the person or entity.')
        c.argument('sender_email_address_address', help='The email address of the person or entity.')
        c.argument('from_email_address_name', help='The display name of the person or entity.')
        c.argument('from_email_address_address', help='The email address of the person or entity.')

    with self.argument_context('conversation group-conversation-thread get-post') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation-thread list-post') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation-thread-post update') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('attachment_id', help='key: attachment-id of attachment')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', help='The attachment\'s file name.')
        c.argument('content_type', help='The MIME type.')
        c.argument('size', help='The length of the attachment in bytes.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('extension_id', help='key: extension-id of extension')
        c.argument('mention_id', help='key: mention-id of mention')
        c.argument('mentioned', action=AddMentioned, nargs='*', help='emailAddress')
        c.argument('mention_text', help='')
        c.argument('client_reference', help='')
        c.argument('created_by', action=AddMentioned, nargs='*', help='emailAddress')
        c.argument('created_date_time', help='')
        c.argument('server_created_date_time', help='')
        c.argument('deep_link', help='')
        c.argument('application', help='')
        c.argument('multi_value_legacy_extended_property_id', help='key: multiValueLegacyExtendedProperty-id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('value', nargs='*', help='A collection of property values.')
        c.argument('single_value_legacy_extended_property_id', help='key: singleValueLegacyExtendedProperty-id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('change_key', help='Identifies the version of the item. Every time the item is changed, changeKey '
                   'changes as well. This allows Exchange to apply changes to the correct version of the object. '
                   'Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('received_date_time', help='Specifies when the post was received. The DateTimeOffset type '
                   'represents date and time information using ISO 8601 format and is always in UTC time. For example, '
                   'midnight UTC on Jan 1, 2014 would look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the post has at least '
                   'one attachment. This is a default property.')
        c.argument('microsoft_graph_post_conversation_thread_id_conversation_thread_id', help='Unique ID of the '
                   'conversation thread. Read-only.')
        c.argument('new_participants', action=AddNewParticipants, nargs='*', help='Conversation participants that were '
                   'added to the thread as part of this post.')
        c.argument('microsoft_graph_post_conversation_id', help='Unique ID of the conversation. Read-only.')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='importance')
        c.argument('in_reply_to', type=validate_file_or_dict, help='post Expected value: json-string/@json-file.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='*', help='The '
                   'collection of single-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='*', help='The '
                   'collection of multi-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the post. Read-only. Nullable.')
        c.argument('attachments', action=AddAttachments, nargs='*', help='Read-only. Nullable.')
        c.argument('mentions', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('sender_email_address_name', help='The display name of the person or entity.')
        c.argument('sender_email_address_address', help='The email address of the person or entity.')
        c.argument('from_email_address_name', help='The display name of the person or entity.')
        c.argument('from_email_address_address', help='The email address of the person or entity.')

    with self.argument_context('conversation group-conversation-thread-post create-attachment') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', help='The attachment\'s file name.')
        c.argument('content_type', help='The MIME type.')
        c.argument('size', help='The length of the attachment in bytes.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')

    with self.argument_context('conversation group-conversation-thread-post create-extension') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('id_', options_list=['--id'], help='Read-only.')

    with self.argument_context('conversation group-conversation-thread-post create-mention') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('mentioned', action=AddMentioned, nargs='*', help='emailAddress')
        c.argument('mention_text', help='')
        c.argument('client_reference', help='')
        c.argument('created_by', action=AddMentioned, nargs='*', help='emailAddress')
        c.argument('created_date_time', help='')
        c.argument('server_created_date_time', help='')
        c.argument('deep_link', help='')
        c.argument('application', help='')

    with self.argument_context('conversation group-conversation-thread-post create-multi-value-extended-property') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('conversation group-conversation-thread-post create-single-value-extended-property') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('value', help='A property value.')

    with self.argument_context('conversation group-conversation-thread-post get-attachment') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('attachment_id', help='key: attachment-id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation-thread-post get-extension') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('extension_id', help='key: extension-id of extension')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation-thread-post get-in-reply-to') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation-thread-post get-mention') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('mention_id', help='key: mention-id of mention')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation-thread-post get-multi-value-extended-property') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('multi_value_legacy_extended_property_id', help='key: multiValueLegacyExtendedProperty-id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation-thread-post get-single-value-extended-property') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('single_value_legacy_extended_property_id', help='key: singleValueLegacyExtendedProperty-id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation-thread-post list-attachment') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation-thread-post list-extension') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation-thread-post list-mention') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation-thread-post list-multi-value-extended-property') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('conversation group-conversation-thread-post list-single-value-extended-property') as c:
        c.argument('group_id', help='key: group-id of group')
        c.argument('conversation_id', help='key: conversation-id of conversation')
        c.argument('conversation_thread_id', help='key: conversationThread-id of conversationThread')
        c.argument('post_id', help='key: post-id of post')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')
