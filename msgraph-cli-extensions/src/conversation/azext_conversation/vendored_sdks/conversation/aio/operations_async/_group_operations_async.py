# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class GroupOperations:
    """GroupOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~groups_conversation.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_conversation(
        self,
        group_id: str,
        orderby: Optional[List[Union[str, "models.Get6ItemsItem"]]] = None,
        select: Optional[List[Union[str, "models.Get7ItemsItem"]]] = None,
        expand: Optional[List[Union[str, "models.Get8ItemsItem"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfConversation"]:
        """Get conversations from groups.

        Get conversations from groups.

        :param group_id: key: group-id of group.
        :type group_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~groups_conversation.models.Get6ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~groups_conversation.models.Get7ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~groups_conversation.models.Get8ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfConversation or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~groups_conversation.models.CollectionOfConversation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfConversation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_conversation.metadata['url']  # type: ignore
                path_format_arguments = {
                    'group-id': self._serialize.url("group_id", group_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfConversation', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_conversation.metadata = {'url': '/groups/{group-id}/conversations'}  # type: ignore

    async def create_conversation(
        self,
        group_id: str,
        id: Optional[str] = None,
        topic: Optional[str] = None,
        has_attachments: Optional[bool] = None,
        last_delivered_date_time: Optional[datetime.datetime] = None,
        unique_senders: Optional[List[str]] = None,
        preview: Optional[str] = None,
        threads: Optional[List["models.MicrosoftGraphConversationThread"]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphConversation":
        """Create new navigation property to conversations for groups.

        Create new navigation property to conversations for groups.

        :param group_id: key: group-id of group.
        :type group_id: str
        :param id: Read-only.
        :type id: str
        :param topic: The topic of the conversation. This property can be set when the conversation is
         created, but it cannot be updated.
        :type topic: str
        :param has_attachments: Indicates whether any of the posts within this Conversation has at
         least one attachment.
        :type has_attachments: bool
        :param last_delivered_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_delivered_date_time: ~datetime.datetime
        :param unique_senders: All the users that sent a message to this Conversation.
        :type unique_senders: list[str]
        :param preview: A short summary from the body of the latest post in this converstaion.
        :type preview: str
        :param threads: A collection of all the conversation threads in the conversation. A navigation
         property. Read-only. Nullable.
        :type threads: list[~groups_conversation.models.MicrosoftGraphConversationThread]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphConversation, or the result of cls(response)
        :rtype: ~groups_conversation.models.MicrosoftGraphConversation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphConversation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphConversation(id=id, topic=topic, has_attachments=has_attachments, last_delivered_date_time=last_delivered_date_time, unique_senders=unique_senders, preview=preview, threads=threads)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_conversation.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphConversation')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphConversation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_conversation.metadata = {'url': '/groups/{group-id}/conversations'}  # type: ignore

    async def get_conversation(
        self,
        group_id: str,
        conversation_id: str,
        select: Optional[List[Union[str, "models.Get2ItemsItem"]]] = None,
        expand: Optional[List[Union[str, "models.Get3ItemsItem"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphConversation":
        """Get conversations from groups.

        Get conversations from groups.

        :param group_id: key: group-id of group.
        :type group_id: str
        :param conversation_id: key: conversation-id of conversation.
        :type conversation_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~groups_conversation.models.Get2ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~groups_conversation.models.Get3ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphConversation, or the result of cls(response)
        :rtype: ~groups_conversation.models.MicrosoftGraphConversation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphConversation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_conversation.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphConversation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_conversation.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}'}  # type: ignore

    async def update_conversation(
        self,
        group_id: str,
        conversation_id: str,
        id: Optional[str] = None,
        topic: Optional[str] = None,
        has_attachments: Optional[bool] = None,
        last_delivered_date_time: Optional[datetime.datetime] = None,
        unique_senders: Optional[List[str]] = None,
        preview: Optional[str] = None,
        threads: Optional[List["models.MicrosoftGraphConversationThread"]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property conversations in groups.

        Update the navigation property conversations in groups.

        :param group_id: key: group-id of group.
        :type group_id: str
        :param conversation_id: key: conversation-id of conversation.
        :type conversation_id: str
        :param id: Read-only.
        :type id: str
        :param topic: The topic of the conversation. This property can be set when the conversation is
         created, but it cannot be updated.
        :type topic: str
        :param has_attachments: Indicates whether any of the posts within this Conversation has at
         least one attachment.
        :type has_attachments: bool
        :param last_delivered_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_delivered_date_time: ~datetime.datetime
        :param unique_senders: All the users that sent a message to this Conversation.
        :type unique_senders: list[str]
        :param preview: A short summary from the body of the latest post in this converstaion.
        :type preview: str
        :param threads: A collection of all the conversation threads in the conversation. A navigation
         property. Read-only. Nullable.
        :type threads: list[~groups_conversation.models.MicrosoftGraphConversationThread]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphConversation(id=id, topic=topic, has_attachments=has_attachments, last_delivered_date_time=last_delivered_date_time, unique_senders=unique_senders, preview=preview, threads=threads)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_conversation.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphConversation')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_conversation.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}'}  # type: ignore
