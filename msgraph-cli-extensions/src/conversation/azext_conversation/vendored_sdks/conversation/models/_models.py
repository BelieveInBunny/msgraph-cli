# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CollectionOfAttachment(msrest.serialization.Model):
    """Collection of attachment.

    :param value:
    :type value: list[~groups_conversation.models.MicrosoftGraphAttachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAttachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfAttachment, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfConversation(msrest.serialization.Model):
    """Collection of conversation.

    :param value:
    :type value: list[~groups_conversation.models.MicrosoftGraphConversation]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphConversation]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfConversation, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfConversationThread(msrest.serialization.Model):
    """Collection of conversationThread.

    :param value:
    :type value: list[~groups_conversation.models.MicrosoftGraphConversationThread]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphConversationThread]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfConversationThread, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfExtension(msrest.serialization.Model):
    """Collection of extension.

    :param value:
    :type value: list[~groups_conversation.models.MicrosoftGraphEntity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphEntity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfExtension, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMention(msrest.serialization.Model):
    """Collection of mention.

    :param value:
    :type value: list[~groups_conversation.models.MicrosoftGraphMention]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMention]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMention, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMultiValueLegacyExtendedProperty(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param value:
    :type value: list[~groups_conversation.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMultiValueLegacyExtendedProperty, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPost(msrest.serialization.Model):
    """Collection of post.

    :param value:
    :type value: list[~groups_conversation.models.MicrosoftGraphPost]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphPost]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPost, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSingleValueLegacyExtendedProperty(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param value:
    :type value: list[~groups_conversation.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSingleValueLegacyExtendedProperty, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class MicrosoftGraphAttachment(MicrosoftGraphEntity):
    """attachment.

    :param id: Read-only.
    :type id: str
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The attachment's file name.
    :type name: str
    :param content_type: The MIME type.
    :type content_type: str
    :param size: The length of the attachment in bytes.
    :type size: int
    :param is_inline: true if the attachment is an inline attachment; otherwise, false.
    :type is_inline: bool
    """

    _validation = {
        'size': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'size': {'key': 'size', 'type': 'int'},
        'is_inline': {'key': 'isInline', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAttachment, self).__init__(**kwargs)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.name = kwargs.get('name', None)
        self.content_type = kwargs.get('content_type', None)
        self.size = kwargs.get('size', None)
        self.is_inline = kwargs.get('is_inline', None)


class MicrosoftGraphConversation(MicrosoftGraphEntity):
    """conversation.

    :param id: Read-only.
    :type id: str
    :param topic: The topic of the conversation. This property can be set when the conversation is
     created, but it cannot be updated.
    :type topic: str
    :param has_attachments: Indicates whether any of the posts within this Conversation has at
     least one attachment.
    :type has_attachments: bool
    :param last_delivered_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_delivered_date_time: ~datetime.datetime
    :param unique_senders: All the users that sent a message to this Conversation.
    :type unique_senders: list[str]
    :param preview: A short summary from the body of the latest post in this converstaion.
    :type preview: str
    :param threads: A collection of all the conversation threads in the conversation. A navigation
     property. Read-only. Nullable.
    :type threads: list[~groups_conversation.models.MicrosoftGraphConversationThread]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'topic': {'key': 'topic', 'type': 'str'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'last_delivered_date_time': {'key': 'lastDeliveredDateTime', 'type': 'iso-8601'},
        'unique_senders': {'key': 'uniqueSenders', 'type': '[str]'},
        'preview': {'key': 'preview', 'type': 'str'},
        'threads': {'key': 'threads', 'type': '[MicrosoftGraphConversationThread]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConversation, self).__init__(**kwargs)
        self.topic = kwargs.get('topic', None)
        self.has_attachments = kwargs.get('has_attachments', None)
        self.last_delivered_date_time = kwargs.get('last_delivered_date_time', None)
        self.unique_senders = kwargs.get('unique_senders', None)
        self.preview = kwargs.get('preview', None)
        self.threads = kwargs.get('threads', None)


class MicrosoftGraphConversationThread(MicrosoftGraphEntity):
    """conversationThread.

    :param id: Read-only.
    :type id: str
    :param to_recipients: The To: recipients for the thread.
    :type to_recipients: list[~groups_conversation.models.MicrosoftGraphRecipient]
    :param topic: The topic of the conversation. This property can be set when the conversation is
     created, but it cannot be updated.
    :type topic: str
    :param has_attachments: Indicates whether any of the posts within this thread has at least one
     attachment.
    :type has_attachments: bool
    :param last_delivered_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_delivered_date_time: ~datetime.datetime
    :param unique_senders: All the users that sent a message to this thread.
    :type unique_senders: list[str]
    :param cc_recipients: The Cc: recipients for the thread.
    :type cc_recipients: list[~groups_conversation.models.MicrosoftGraphRecipient]
    :param preview: A short summary from the body of the latest post in this converstaion.
    :type preview: str
    :param is_locked: Indicates if the thread is locked.
    :type is_locked: bool
    :param posts: Read-only. Nullable.
    :type posts: list[~groups_conversation.models.MicrosoftGraphPost]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'to_recipients': {'key': 'toRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'topic': {'key': 'topic', 'type': 'str'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'last_delivered_date_time': {'key': 'lastDeliveredDateTime', 'type': 'iso-8601'},
        'unique_senders': {'key': 'uniqueSenders', 'type': '[str]'},
        'cc_recipients': {'key': 'ccRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'preview': {'key': 'preview', 'type': 'str'},
        'is_locked': {'key': 'isLocked', 'type': 'bool'},
        'posts': {'key': 'posts', 'type': '[MicrosoftGraphPost]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConversationThread, self).__init__(**kwargs)
        self.to_recipients = kwargs.get('to_recipients', None)
        self.topic = kwargs.get('topic', None)
        self.has_attachments = kwargs.get('has_attachments', None)
        self.last_delivered_date_time = kwargs.get('last_delivered_date_time', None)
        self.unique_senders = kwargs.get('unique_senders', None)
        self.cc_recipients = kwargs.get('cc_recipients', None)
        self.preview = kwargs.get('preview', None)
        self.is_locked = kwargs.get('is_locked', None)
        self.posts = kwargs.get('posts', None)


class MicrosoftGraphEmailAddress(msrest.serialization.Model):
    """emailAddress.

    :param name: The display name of the person or entity.
    :type name: str
    :param address: The email address of the person or entity.
    :type address: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'address': {'key': 'address', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEmailAddress, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.address = kwargs.get('address', None)


class MicrosoftGraphExtension(MicrosoftGraphEntity):
    """extension.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphExtension, self).__init__(**kwargs)


class MicrosoftGraphItemBody(msrest.serialization.Model):
    """itemBody.

    :param content_type: bodyType. Possible values include: "text", "html".
    :type content_type: str or ~groups_conversation.models.MicrosoftGraphBodyType
    :param content: The content of the item.
    :type content: str
    """

    _attribute_map = {
        'content_type': {'key': 'contentType', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemBody, self).__init__(**kwargs)
        self.content_type = kwargs.get('content_type', None)
        self.content = kwargs.get('content', None)


class MicrosoftGraphMention(MicrosoftGraphEntity):
    """mention.

    :param id: Read-only.
    :type id: str
    :param mentioned: emailAddress.
    :type mentioned: ~groups_conversation.models.MicrosoftGraphEmailAddress
    :param mention_text:
    :type mention_text: str
    :param client_reference:
    :type client_reference: str
    :param created_by: emailAddress.
    :type created_by: ~groups_conversation.models.MicrosoftGraphEmailAddress
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param server_created_date_time:
    :type server_created_date_time: ~datetime.datetime
    :param deep_link:
    :type deep_link: str
    :param application:
    :type application: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'mentioned': {'key': 'mentioned', 'type': 'MicrosoftGraphEmailAddress'},
        'mention_text': {'key': 'mentionText', 'type': 'str'},
        'client_reference': {'key': 'clientReference', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphEmailAddress'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'server_created_date_time': {'key': 'serverCreatedDateTime', 'type': 'iso-8601'},
        'deep_link': {'key': 'deepLink', 'type': 'str'},
        'application': {'key': 'application', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMention, self).__init__(**kwargs)
        self.mentioned = kwargs.get('mentioned', None)
        self.mention_text = kwargs.get('mention_text', None)
        self.client_reference = kwargs.get('client_reference', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.server_created_date_time = kwargs.get('server_created_date_time', None)
        self.deep_link = kwargs.get('deep_link', None)
        self.application = kwargs.get('application', None)


class MicrosoftGraphMultiValueLegacyExtendedProperty(MicrosoftGraphEntity):
    """multiValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param value: A collection of property values.
    :type value: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'value': {'key': 'value', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMultiValueLegacyExtendedProperty, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class MicrosoftGraphOutlookItem(MicrosoftGraphEntity):
    """outlookItem.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOutlookItem, self).__init__(**kwargs)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.change_key = kwargs.get('change_key', None)
        self.categories = kwargs.get('categories', None)


class MicrosoftGraphPost(MicrosoftGraphOutlookItem):
    """post.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param body: itemBody.
    :type body: ~groups_conversation.models.MicrosoftGraphItemBody
    :param received_date_time: Specifies when the post was received. The DateTimeOffset type
     represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type received_date_time: ~datetime.datetime
    :param has_attachments: Indicates whether the post has at least one attachment. This is a
     default property.
    :type has_attachments: bool
    :param conversation_thread_id: Unique ID of the conversation thread. Read-only.
    :type conversation_thread_id: str
    :param new_participants: Conversation participants that were added to the thread as part of
     this post.
    :type new_participants: list[~groups_conversation.models.MicrosoftGraphRecipient]
    :param conversation_id: Unique ID of the conversation. Read-only.
    :type conversation_id: str
    :param importance: importance. Possible values include: "low", "normal", "high".
    :type importance: str or ~groups_conversation.models.MicrosoftGraphImportance
    :param in_reply_to: post.
    :type in_reply_to: ~groups_conversation.models.MicrosoftGraphPost
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the post. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~groups_conversation.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the post. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~groups_conversation.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param extensions: The collection of open extensions defined for the post. Read-only. Nullable.
    :type extensions: list[~groups_conversation.models.MicrosoftGraphEntity]
    :param attachments: Read-only. Nullable.
    :type attachments: list[~groups_conversation.models.MicrosoftGraphAttachment]
    :param mentions:
    :type mentions: list[~groups_conversation.models.MicrosoftGraphMention]
    :param name_sender_email_address_name: The display name of the person or entity.
    :type name_sender_email_address_name: str
    :param address_sender_email_address: The email address of the person or entity.
    :type address_sender_email_address: str
    :param name_from_email_address_name: The display name of the person or entity.
    :type name_from_email_address_name: str
    :param address_from_email_address: The email address of the person or entity.
    :type address_from_email_address: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'received_date_time': {'key': 'receivedDateTime', 'type': 'iso-8601'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'conversation_thread_id': {'key': 'conversationThreadId', 'type': 'str'},
        'new_participants': {'key': 'newParticipants', 'type': '[MicrosoftGraphRecipient]'},
        'conversation_id': {'key': 'conversationId', 'type': 'str'},
        'importance': {'key': 'importance', 'type': 'str'},
        'in_reply_to': {'key': 'inReplyTo', 'type': 'MicrosoftGraphPost'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphEntity]'},
        'attachments': {'key': 'attachments', 'type': '[MicrosoftGraphAttachment]'},
        'mentions': {'key': 'mentions', 'type': '[MicrosoftGraphMention]'},
        'name_sender_email_address_name': {'key': 'sender.emailAddress.name', 'type': 'str'},
        'address_sender_email_address': {'key': 'sender.emailAddress.address', 'type': 'str'},
        'name_from_email_address_name': {'key': 'from.emailAddress.name', 'type': 'str'},
        'address_from_email_address': {'key': 'from.emailAddress.address', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPost, self).__init__(**kwargs)
        self.body = kwargs.get('body', None)
        self.received_date_time = kwargs.get('received_date_time', None)
        self.has_attachments = kwargs.get('has_attachments', None)
        self.conversation_thread_id = kwargs.get('conversation_thread_id', None)
        self.new_participants = kwargs.get('new_participants', None)
        self.conversation_id = kwargs.get('conversation_id', None)
        self.importance = kwargs.get('importance', None)
        self.in_reply_to = kwargs.get('in_reply_to', None)
        self.single_value_extended_properties = kwargs.get('single_value_extended_properties', None)
        self.multi_value_extended_properties = kwargs.get('multi_value_extended_properties', None)
        self.extensions = kwargs.get('extensions', None)
        self.attachments = kwargs.get('attachments', None)
        self.mentions = kwargs.get('mentions', None)
        self.name_sender_email_address_name = kwargs.get('name_sender_email_address_name', None)
        self.address_sender_email_address = kwargs.get('address_sender_email_address', None)
        self.name_from_email_address_name = kwargs.get('name_from_email_address_name', None)
        self.address_from_email_address = kwargs.get('address_from_email_address', None)


class MicrosoftGraphRecipient(msrest.serialization.Model):
    """recipient.

    :param name: The display name of the person or entity.
    :type name: str
    :param address: The email address of the person or entity.
    :type address: str
    """

    _attribute_map = {
        'name': {'key': 'emailAddress.name', 'type': 'str'},
        'address': {'key': 'emailAddress.address', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphRecipient, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.address = kwargs.get('address', None)


class MicrosoftGraphSingleValueLegacyExtendedProperty(MicrosoftGraphEntity):
    """singleValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param value: A property value.
    :type value: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSingleValueLegacyExtendedProperty, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~groups_conversation.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = kwargs['error']


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~groups_conversation.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)
