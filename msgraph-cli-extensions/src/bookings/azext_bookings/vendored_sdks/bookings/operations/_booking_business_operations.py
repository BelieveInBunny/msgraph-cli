# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class BookingBusinessOperations(object):
    """BookingBusinessOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~bookings.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_appointment(
        self,
        booking_business_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum13"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum14"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfBookingAppointment"]
        """Get appointments from bookingBusinesses.

        Get appointments from bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~bookings.models.Enum13]
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum14]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfBookingAppointment or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~bookings.models.CollectionOfBookingAppointment]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfBookingAppointment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_appointment.metadata['url']  # type: ignore
                path_format_arguments = {
                    'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfBookingAppointment', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_appointment.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/appointments'}  # type: ignore

    def create_appointment(
        self,
        booking_business_id,  # type: str
        id=None,  # type: Optional[str]
        self_service_appointment_id=None,  # type: Optional[str]
        customer_id=None,  # type: Optional[str]
        customer_name=None,  # type: Optional[str]
        customer_email_address=None,  # type: Optional[str]
        customer_phone=None,  # type: Optional[str]
        customer_notes=None,  # type: Optional[str]
        service_id=None,  # type: Optional[str]
        service_name=None,  # type: Optional[str]
        start=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        end=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        duration=None,  # type: Optional[datetime.timedelta]
        pre_buffer=None,  # type: Optional[datetime.timedelta]
        post_buffer=None,  # type: Optional[datetime.timedelta]
        price_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphBookingPriceType"]]
        price=None,  # type: Optional[float]
        service_notes=None,  # type: Optional[str]
        reminders=None,  # type: Optional[List["models.MicrosoftGraphBookingReminder"]]
        opt_out_of_customer_email=None,  # type: Optional[bool]
        staff_member_ids=None,  # type: Optional[List[str]]
        invoice_amount=None,  # type: Optional[float]
        invoice_date=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        invoice_id=None,  # type: Optional[str]
        invoice_status=None,  # type: Optional[Union[str, "models.MicrosoftGraphBookingInvoiceStatus"]]
        invoice_url=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        location_email_address=None,  # type: Optional[str]
        address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        coordinates=None,  # type: Optional["models.MicrosoftGraphOutlookGeoCoordinates"]
        location_uri=None,  # type: Optional[str]
        location_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationType"]]
        unique_id=None,  # type: Optional[str]
        unique_id_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationUniqueIdType"]]
        microsoft_graph_location_display_name=None,  # type: Optional[str]
        microsoft_graph_location_email_address_location_email_address=None,  # type: Optional[str]
        microsoft_graph_physical_address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        microsoft_graph_outlook_geo_coordinates=None,  # type: Optional["models.MicrosoftGraphOutlookGeoCoordinates"]
        microsoft_graph_location_uri=None,  # type: Optional[str]
        microsoft_graph_location_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationType"]]
        microsoft_graph_location_unique_id=None,  # type: Optional[str]
        microsoft_graph_location_unique_id_type_unique_id_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationUniqueIdType"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingAppointment"
        """Create new navigation property to appointments for bookingBusinesses.

        Create new navigation property to appointments for bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param id: Read-only.
        :type id: str
        :param self_service_appointment_id:
        :type self_service_appointment_id: str
        :param customer_id: The id of the booking customer associated with this appointment.
        :type customer_id: str
        :param customer_name:
        :type customer_name: str
        :param customer_email_address:
        :type customer_email_address: str
        :param customer_phone:
        :type customer_phone: str
        :param customer_notes: Notes from the customer associated with this appointment.
        :type customer_notes: str
        :param service_id: The id of the booking service associated with this appointment.
        :type service_id: str
        :param service_name: The name of the booking service associated with this appointment.
        :type service_name: str
        :param start: dateTimeTimeZone.
        :type start: ~bookings.models.MicrosoftGraphDateTimeZone
        :param end: dateTimeTimeZone.
        :type end: ~bookings.models.MicrosoftGraphDateTimeZone
        :param duration:
        :type duration: ~datetime.timedelta
        :param pre_buffer:
        :type pre_buffer: ~datetime.timedelta
        :param post_buffer:
        :type post_buffer: ~datetime.timedelta
        :param price_type:
        :type price_type: str or ~bookings.models.MicrosoftGraphBookingPriceType
        :param price:
        :type price: float
        :param service_notes:
        :type service_notes: str
        :param reminders:
        :type reminders: list[~bookings.models.MicrosoftGraphBookingReminder]
        :param opt_out_of_customer_email:
        :type opt_out_of_customer_email: bool
        :param staff_member_ids:
        :type staff_member_ids: list[str]
        :param invoice_amount:
        :type invoice_amount: float
        :param invoice_date: dateTimeTimeZone.
        :type invoice_date: ~bookings.models.MicrosoftGraphDateTimeZone
        :param invoice_id:
        :type invoice_id: str
        :param invoice_status:
        :type invoice_status: str or ~bookings.models.MicrosoftGraphBookingInvoiceStatus
        :param invoice_url:
        :type invoice_url: str
        :param display_name: The name associated with the location.
        :type display_name: str
        :param location_email_address: Optional email address of the location.
        :type location_email_address: str
        :param address: physicalAddress.
        :type address: ~bookings.models.MicrosoftGraphPhysicalAddress
        :param coordinates: outlookGeoCoordinates.
        :type coordinates: ~bookings.models.MicrosoftGraphOutlookGeoCoordinates
        :param location_uri: Optional URI representing the location.
        :type location_uri: str
        :param location_type:
        :type location_type: str or ~bookings.models.MicrosoftGraphLocationType
        :param unique_id: For internal use only.
        :type unique_id: str
        :param unique_id_type:
        :type unique_id_type: str or ~bookings.models.MicrosoftGraphLocationUniqueIdType
        :param microsoft_graph_location_display_name: The name associated with the location.
        :type microsoft_graph_location_display_name: str
        :param microsoft_graph_location_email_address_location_email_address: Optional email address of
         the location.
        :type microsoft_graph_location_email_address_location_email_address: str
        :param microsoft_graph_physical_address: physicalAddress.
        :type microsoft_graph_physical_address: ~bookings.models.MicrosoftGraphPhysicalAddress
        :param microsoft_graph_outlook_geo_coordinates: outlookGeoCoordinates.
        :type microsoft_graph_outlook_geo_coordinates: ~bookings.models.MicrosoftGraphOutlookGeoCoordinates
        :param microsoft_graph_location_uri: Optional URI representing the location.
        :type microsoft_graph_location_uri: str
        :param microsoft_graph_location_type:
        :type microsoft_graph_location_type: str or ~bookings.models.MicrosoftGraphLocationType
        :param microsoft_graph_location_unique_id: For internal use only.
        :type microsoft_graph_location_unique_id: str
        :param microsoft_graph_location_unique_id_type_unique_id_type:
        :type microsoft_graph_location_unique_id_type_unique_id_type: str or ~bookings.models.MicrosoftGraphLocationUniqueIdType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingAppointment, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingAppointment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingAppointment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphBookingAppointment(id=id, self_service_appointment_id=self_service_appointment_id, customer_id=customer_id, customer_name=customer_name, customer_email_address=customer_email_address, customer_phone=customer_phone, customer_notes=customer_notes, service_id=service_id, service_name=service_name, start=start, end=end, duration=duration, pre_buffer=pre_buffer, post_buffer=post_buffer, price_type=price_type, price=price, service_notes=service_notes, reminders=reminders, opt_out_of_customer_email=opt_out_of_customer_email, staff_member_ids=staff_member_ids, invoice_amount=invoice_amount, invoice_date=invoice_date, invoice_id=invoice_id, invoice_status=invoice_status, invoice_url=invoice_url, display_name_service_location_display_name=display_name, location_email_address_service_location_email_address=location_email_address, address_service_location_address=address, coordinates_service_location_coordinates=coordinates, location_uri_service_location_uri=location_uri, location_type_service_location_type=location_type, unique_id_service_location_unique_id=unique_id, unique_id_type_service_location_unique_id_type=unique_id_type, display_name_customer_location_display_name=microsoft_graph_location_display_name, location_email_address_customer_location_email_address=microsoft_graph_location_email_address_location_email_address, address_customer_location_address=microsoft_graph_physical_address, coordinates_customer_location_coordinates=microsoft_graph_outlook_geo_coordinates, location_uri_customer_location_uri=microsoft_graph_location_uri, location_type_customer_location_type=microsoft_graph_location_type, unique_id_customer_location_unique_id=microsoft_graph_location_unique_id, unique_id_type_customer_location_unique_id_type=microsoft_graph_location_unique_id_type_unique_id_type)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_appointment.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphBookingAppointment')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingAppointment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_appointment.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/appointments'}  # type: ignore

    def get_appointment(
        self,
        booking_business_id,  # type: str
        booking_appointment_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum15"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingAppointment"
        """Get appointments from bookingBusinesses.

        Get appointments from bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param booking_appointment_id: key: bookingAppointment-id of bookingAppointment.
        :type booking_appointment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum15]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingAppointment, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingAppointment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingAppointment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_appointment.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingAppointment-id': self._serialize.url("booking_appointment_id", booking_appointment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingAppointment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_appointment.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/appointments/{bookingAppointment-id}'}  # type: ignore

    def update_appointment(
        self,
        booking_business_id,  # type: str
        booking_appointment_id,  # type: str
        id=None,  # type: Optional[str]
        self_service_appointment_id=None,  # type: Optional[str]
        customer_id=None,  # type: Optional[str]
        customer_name=None,  # type: Optional[str]
        customer_email_address=None,  # type: Optional[str]
        customer_phone=None,  # type: Optional[str]
        customer_notes=None,  # type: Optional[str]
        service_id=None,  # type: Optional[str]
        service_name=None,  # type: Optional[str]
        start=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        end=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        duration=None,  # type: Optional[datetime.timedelta]
        pre_buffer=None,  # type: Optional[datetime.timedelta]
        post_buffer=None,  # type: Optional[datetime.timedelta]
        price_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphBookingPriceType"]]
        price=None,  # type: Optional[float]
        service_notes=None,  # type: Optional[str]
        reminders=None,  # type: Optional[List["models.MicrosoftGraphBookingReminder"]]
        opt_out_of_customer_email=None,  # type: Optional[bool]
        staff_member_ids=None,  # type: Optional[List[str]]
        invoice_amount=None,  # type: Optional[float]
        invoice_date=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        invoice_id=None,  # type: Optional[str]
        invoice_status=None,  # type: Optional[Union[str, "models.MicrosoftGraphBookingInvoiceStatus"]]
        invoice_url=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        location_email_address=None,  # type: Optional[str]
        address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        coordinates=None,  # type: Optional["models.MicrosoftGraphOutlookGeoCoordinates"]
        location_uri=None,  # type: Optional[str]
        location_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationType"]]
        unique_id=None,  # type: Optional[str]
        unique_id_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationUniqueIdType"]]
        microsoft_graph_location_display_name=None,  # type: Optional[str]
        microsoft_graph_location_email_address_location_email_address=None,  # type: Optional[str]
        microsoft_graph_physical_address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        microsoft_graph_outlook_geo_coordinates=None,  # type: Optional["models.MicrosoftGraphOutlookGeoCoordinates"]
        microsoft_graph_location_uri=None,  # type: Optional[str]
        microsoft_graph_location_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationType"]]
        microsoft_graph_location_unique_id=None,  # type: Optional[str]
        microsoft_graph_location_unique_id_type_unique_id_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationUniqueIdType"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property appointments in bookingBusinesses.

        Update the navigation property appointments in bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param booking_appointment_id: key: bookingAppointment-id of bookingAppointment.
        :type booking_appointment_id: str
        :param id: Read-only.
        :type id: str
        :param self_service_appointment_id:
        :type self_service_appointment_id: str
        :param customer_id: The id of the booking customer associated with this appointment.
        :type customer_id: str
        :param customer_name:
        :type customer_name: str
        :param customer_email_address:
        :type customer_email_address: str
        :param customer_phone:
        :type customer_phone: str
        :param customer_notes: Notes from the customer associated with this appointment.
        :type customer_notes: str
        :param service_id: The id of the booking service associated with this appointment.
        :type service_id: str
        :param service_name: The name of the booking service associated with this appointment.
        :type service_name: str
        :param start: dateTimeTimeZone.
        :type start: ~bookings.models.MicrosoftGraphDateTimeZone
        :param end: dateTimeTimeZone.
        :type end: ~bookings.models.MicrosoftGraphDateTimeZone
        :param duration:
        :type duration: ~datetime.timedelta
        :param pre_buffer:
        :type pre_buffer: ~datetime.timedelta
        :param post_buffer:
        :type post_buffer: ~datetime.timedelta
        :param price_type:
        :type price_type: str or ~bookings.models.MicrosoftGraphBookingPriceType
        :param price:
        :type price: float
        :param service_notes:
        :type service_notes: str
        :param reminders:
        :type reminders: list[~bookings.models.MicrosoftGraphBookingReminder]
        :param opt_out_of_customer_email:
        :type opt_out_of_customer_email: bool
        :param staff_member_ids:
        :type staff_member_ids: list[str]
        :param invoice_amount:
        :type invoice_amount: float
        :param invoice_date: dateTimeTimeZone.
        :type invoice_date: ~bookings.models.MicrosoftGraphDateTimeZone
        :param invoice_id:
        :type invoice_id: str
        :param invoice_status:
        :type invoice_status: str or ~bookings.models.MicrosoftGraphBookingInvoiceStatus
        :param invoice_url:
        :type invoice_url: str
        :param display_name: The name associated with the location.
        :type display_name: str
        :param location_email_address: Optional email address of the location.
        :type location_email_address: str
        :param address: physicalAddress.
        :type address: ~bookings.models.MicrosoftGraphPhysicalAddress
        :param coordinates: outlookGeoCoordinates.
        :type coordinates: ~bookings.models.MicrosoftGraphOutlookGeoCoordinates
        :param location_uri: Optional URI representing the location.
        :type location_uri: str
        :param location_type:
        :type location_type: str or ~bookings.models.MicrosoftGraphLocationType
        :param unique_id: For internal use only.
        :type unique_id: str
        :param unique_id_type:
        :type unique_id_type: str or ~bookings.models.MicrosoftGraphLocationUniqueIdType
        :param microsoft_graph_location_display_name: The name associated with the location.
        :type microsoft_graph_location_display_name: str
        :param microsoft_graph_location_email_address_location_email_address: Optional email address of
         the location.
        :type microsoft_graph_location_email_address_location_email_address: str
        :param microsoft_graph_physical_address: physicalAddress.
        :type microsoft_graph_physical_address: ~bookings.models.MicrosoftGraphPhysicalAddress
        :param microsoft_graph_outlook_geo_coordinates: outlookGeoCoordinates.
        :type microsoft_graph_outlook_geo_coordinates: ~bookings.models.MicrosoftGraphOutlookGeoCoordinates
        :param microsoft_graph_location_uri: Optional URI representing the location.
        :type microsoft_graph_location_uri: str
        :param microsoft_graph_location_type:
        :type microsoft_graph_location_type: str or ~bookings.models.MicrosoftGraphLocationType
        :param microsoft_graph_location_unique_id: For internal use only.
        :type microsoft_graph_location_unique_id: str
        :param microsoft_graph_location_unique_id_type_unique_id_type:
        :type microsoft_graph_location_unique_id_type_unique_id_type: str or ~bookings.models.MicrosoftGraphLocationUniqueIdType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphBookingAppointment(id=id, self_service_appointment_id=self_service_appointment_id, customer_id=customer_id, customer_name=customer_name, customer_email_address=customer_email_address, customer_phone=customer_phone, customer_notes=customer_notes, service_id=service_id, service_name=service_name, start=start, end=end, duration=duration, pre_buffer=pre_buffer, post_buffer=post_buffer, price_type=price_type, price=price, service_notes=service_notes, reminders=reminders, opt_out_of_customer_email=opt_out_of_customer_email, staff_member_ids=staff_member_ids, invoice_amount=invoice_amount, invoice_date=invoice_date, invoice_id=invoice_id, invoice_status=invoice_status, invoice_url=invoice_url, display_name_service_location_display_name=display_name, location_email_address_service_location_email_address=location_email_address, address_service_location_address=address, coordinates_service_location_coordinates=coordinates, location_uri_service_location_uri=location_uri, location_type_service_location_type=location_type, unique_id_service_location_unique_id=unique_id, unique_id_type_service_location_unique_id_type=unique_id_type, display_name_customer_location_display_name=microsoft_graph_location_display_name, location_email_address_customer_location_email_address=microsoft_graph_location_email_address_location_email_address, address_customer_location_address=microsoft_graph_physical_address, coordinates_customer_location_coordinates=microsoft_graph_outlook_geo_coordinates, location_uri_customer_location_uri=microsoft_graph_location_uri, location_type_customer_location_type=microsoft_graph_location_type, unique_id_customer_location_unique_id=microsoft_graph_location_unique_id, unique_id_type_customer_location_unique_id_type=microsoft_graph_location_unique_id_type_unique_id_type)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_appointment.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingAppointment-id': self._serialize.url("booking_appointment_id", booking_appointment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphBookingAppointment')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_appointment.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/appointments/{bookingAppointment-id}'}  # type: ignore

    def list_calendar_view(
        self,
        booking_business_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum16"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum17"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfBookingAppointment0"]
        """Get calendarView from bookingBusinesses.

        Get calendarView from bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~bookings.models.Enum16]
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum17]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfBookingAppointment0 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~bookings.models.CollectionOfBookingAppointment0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfBookingAppointment0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_calendar_view.metadata['url']  # type: ignore
                path_format_arguments = {
                    'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfBookingAppointment0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_calendar_view.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/calendarView'}  # type: ignore

    def create_calendar_view(
        self,
        booking_business_id,  # type: str
        id=None,  # type: Optional[str]
        self_service_appointment_id=None,  # type: Optional[str]
        customer_id=None,  # type: Optional[str]
        customer_name=None,  # type: Optional[str]
        customer_email_address=None,  # type: Optional[str]
        customer_phone=None,  # type: Optional[str]
        customer_notes=None,  # type: Optional[str]
        service_id=None,  # type: Optional[str]
        service_name=None,  # type: Optional[str]
        start=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        end=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        duration=None,  # type: Optional[datetime.timedelta]
        pre_buffer=None,  # type: Optional[datetime.timedelta]
        post_buffer=None,  # type: Optional[datetime.timedelta]
        price_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphBookingPriceType"]]
        price=None,  # type: Optional[float]
        service_notes=None,  # type: Optional[str]
        reminders=None,  # type: Optional[List["models.MicrosoftGraphBookingReminder"]]
        opt_out_of_customer_email=None,  # type: Optional[bool]
        staff_member_ids=None,  # type: Optional[List[str]]
        invoice_amount=None,  # type: Optional[float]
        invoice_date=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        invoice_id=None,  # type: Optional[str]
        invoice_status=None,  # type: Optional[Union[str, "models.MicrosoftGraphBookingInvoiceStatus"]]
        invoice_url=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        location_email_address=None,  # type: Optional[str]
        address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        coordinates=None,  # type: Optional["models.MicrosoftGraphOutlookGeoCoordinates"]
        location_uri=None,  # type: Optional[str]
        location_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationType"]]
        unique_id=None,  # type: Optional[str]
        unique_id_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationUniqueIdType"]]
        microsoft_graph_location_display_name=None,  # type: Optional[str]
        microsoft_graph_location_email_address_location_email_address=None,  # type: Optional[str]
        microsoft_graph_physical_address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        microsoft_graph_outlook_geo_coordinates=None,  # type: Optional["models.MicrosoftGraphOutlookGeoCoordinates"]
        microsoft_graph_location_uri=None,  # type: Optional[str]
        microsoft_graph_location_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationType"]]
        microsoft_graph_location_unique_id=None,  # type: Optional[str]
        microsoft_graph_location_unique_id_type_unique_id_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationUniqueIdType"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingAppointment"
        """Create new navigation property to calendarView for bookingBusinesses.

        Create new navigation property to calendarView for bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param id: Read-only.
        :type id: str
        :param self_service_appointment_id:
        :type self_service_appointment_id: str
        :param customer_id: The id of the booking customer associated with this appointment.
        :type customer_id: str
        :param customer_name:
        :type customer_name: str
        :param customer_email_address:
        :type customer_email_address: str
        :param customer_phone:
        :type customer_phone: str
        :param customer_notes: Notes from the customer associated with this appointment.
        :type customer_notes: str
        :param service_id: The id of the booking service associated with this appointment.
        :type service_id: str
        :param service_name: The name of the booking service associated with this appointment.
        :type service_name: str
        :param start: dateTimeTimeZone.
        :type start: ~bookings.models.MicrosoftGraphDateTimeZone
        :param end: dateTimeTimeZone.
        :type end: ~bookings.models.MicrosoftGraphDateTimeZone
        :param duration:
        :type duration: ~datetime.timedelta
        :param pre_buffer:
        :type pre_buffer: ~datetime.timedelta
        :param post_buffer:
        :type post_buffer: ~datetime.timedelta
        :param price_type:
        :type price_type: str or ~bookings.models.MicrosoftGraphBookingPriceType
        :param price:
        :type price: float
        :param service_notes:
        :type service_notes: str
        :param reminders:
        :type reminders: list[~bookings.models.MicrosoftGraphBookingReminder]
        :param opt_out_of_customer_email:
        :type opt_out_of_customer_email: bool
        :param staff_member_ids:
        :type staff_member_ids: list[str]
        :param invoice_amount:
        :type invoice_amount: float
        :param invoice_date: dateTimeTimeZone.
        :type invoice_date: ~bookings.models.MicrosoftGraphDateTimeZone
        :param invoice_id:
        :type invoice_id: str
        :param invoice_status:
        :type invoice_status: str or ~bookings.models.MicrosoftGraphBookingInvoiceStatus
        :param invoice_url:
        :type invoice_url: str
        :param display_name: The name associated with the location.
        :type display_name: str
        :param location_email_address: Optional email address of the location.
        :type location_email_address: str
        :param address: physicalAddress.
        :type address: ~bookings.models.MicrosoftGraphPhysicalAddress
        :param coordinates: outlookGeoCoordinates.
        :type coordinates: ~bookings.models.MicrosoftGraphOutlookGeoCoordinates
        :param location_uri: Optional URI representing the location.
        :type location_uri: str
        :param location_type:
        :type location_type: str or ~bookings.models.MicrosoftGraphLocationType
        :param unique_id: For internal use only.
        :type unique_id: str
        :param unique_id_type:
        :type unique_id_type: str or ~bookings.models.MicrosoftGraphLocationUniqueIdType
        :param microsoft_graph_location_display_name: The name associated with the location.
        :type microsoft_graph_location_display_name: str
        :param microsoft_graph_location_email_address_location_email_address: Optional email address of
         the location.
        :type microsoft_graph_location_email_address_location_email_address: str
        :param microsoft_graph_physical_address: physicalAddress.
        :type microsoft_graph_physical_address: ~bookings.models.MicrosoftGraphPhysicalAddress
        :param microsoft_graph_outlook_geo_coordinates: outlookGeoCoordinates.
        :type microsoft_graph_outlook_geo_coordinates: ~bookings.models.MicrosoftGraphOutlookGeoCoordinates
        :param microsoft_graph_location_uri: Optional URI representing the location.
        :type microsoft_graph_location_uri: str
        :param microsoft_graph_location_type:
        :type microsoft_graph_location_type: str or ~bookings.models.MicrosoftGraphLocationType
        :param microsoft_graph_location_unique_id: For internal use only.
        :type microsoft_graph_location_unique_id: str
        :param microsoft_graph_location_unique_id_type_unique_id_type:
        :type microsoft_graph_location_unique_id_type_unique_id_type: str or ~bookings.models.MicrosoftGraphLocationUniqueIdType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingAppointment, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingAppointment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingAppointment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphBookingAppointment(id=id, self_service_appointment_id=self_service_appointment_id, customer_id=customer_id, customer_name=customer_name, customer_email_address=customer_email_address, customer_phone=customer_phone, customer_notes=customer_notes, service_id=service_id, service_name=service_name, start=start, end=end, duration=duration, pre_buffer=pre_buffer, post_buffer=post_buffer, price_type=price_type, price=price, service_notes=service_notes, reminders=reminders, opt_out_of_customer_email=opt_out_of_customer_email, staff_member_ids=staff_member_ids, invoice_amount=invoice_amount, invoice_date=invoice_date, invoice_id=invoice_id, invoice_status=invoice_status, invoice_url=invoice_url, display_name_service_location_display_name=display_name, location_email_address_service_location_email_address=location_email_address, address_service_location_address=address, coordinates_service_location_coordinates=coordinates, location_uri_service_location_uri=location_uri, location_type_service_location_type=location_type, unique_id_service_location_unique_id=unique_id, unique_id_type_service_location_unique_id_type=unique_id_type, display_name_customer_location_display_name=microsoft_graph_location_display_name, location_email_address_customer_location_email_address=microsoft_graph_location_email_address_location_email_address, address_customer_location_address=microsoft_graph_physical_address, coordinates_customer_location_coordinates=microsoft_graph_outlook_geo_coordinates, location_uri_customer_location_uri=microsoft_graph_location_uri, location_type_customer_location_type=microsoft_graph_location_type, unique_id_customer_location_unique_id=microsoft_graph_location_unique_id, unique_id_type_customer_location_unique_id_type=microsoft_graph_location_unique_id_type_unique_id_type)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_calendar_view.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphBookingAppointment')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingAppointment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_calendar_view.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/calendarView'}  # type: ignore

    def get_calendar_view(
        self,
        booking_business_id,  # type: str
        booking_appointment_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum18"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingAppointment"
        """Get calendarView from bookingBusinesses.

        Get calendarView from bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param booking_appointment_id: key: bookingAppointment-id of bookingAppointment.
        :type booking_appointment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum18]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingAppointment, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingAppointment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingAppointment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_calendar_view.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingAppointment-id': self._serialize.url("booking_appointment_id", booking_appointment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingAppointment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_calendar_view.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/calendarView/{bookingAppointment-id}'}  # type: ignore

    def update_calendar_view(
        self,
        booking_business_id,  # type: str
        booking_appointment_id,  # type: str
        id=None,  # type: Optional[str]
        self_service_appointment_id=None,  # type: Optional[str]
        customer_id=None,  # type: Optional[str]
        customer_name=None,  # type: Optional[str]
        customer_email_address=None,  # type: Optional[str]
        customer_phone=None,  # type: Optional[str]
        customer_notes=None,  # type: Optional[str]
        service_id=None,  # type: Optional[str]
        service_name=None,  # type: Optional[str]
        start=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        end=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        duration=None,  # type: Optional[datetime.timedelta]
        pre_buffer=None,  # type: Optional[datetime.timedelta]
        post_buffer=None,  # type: Optional[datetime.timedelta]
        price_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphBookingPriceType"]]
        price=None,  # type: Optional[float]
        service_notes=None,  # type: Optional[str]
        reminders=None,  # type: Optional[List["models.MicrosoftGraphBookingReminder"]]
        opt_out_of_customer_email=None,  # type: Optional[bool]
        staff_member_ids=None,  # type: Optional[List[str]]
        invoice_amount=None,  # type: Optional[float]
        invoice_date=None,  # type: Optional["models.MicrosoftGraphDateTimeZone"]
        invoice_id=None,  # type: Optional[str]
        invoice_status=None,  # type: Optional[Union[str, "models.MicrosoftGraphBookingInvoiceStatus"]]
        invoice_url=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        location_email_address=None,  # type: Optional[str]
        address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        coordinates=None,  # type: Optional["models.MicrosoftGraphOutlookGeoCoordinates"]
        location_uri=None,  # type: Optional[str]
        location_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationType"]]
        unique_id=None,  # type: Optional[str]
        unique_id_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationUniqueIdType"]]
        microsoft_graph_location_display_name=None,  # type: Optional[str]
        microsoft_graph_location_email_address_location_email_address=None,  # type: Optional[str]
        microsoft_graph_physical_address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        microsoft_graph_outlook_geo_coordinates=None,  # type: Optional["models.MicrosoftGraphOutlookGeoCoordinates"]
        microsoft_graph_location_uri=None,  # type: Optional[str]
        microsoft_graph_location_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationType"]]
        microsoft_graph_location_unique_id=None,  # type: Optional[str]
        microsoft_graph_location_unique_id_type_unique_id_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationUniqueIdType"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property calendarView in bookingBusinesses.

        Update the navigation property calendarView in bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param booking_appointment_id: key: bookingAppointment-id of bookingAppointment.
        :type booking_appointment_id: str
        :param id: Read-only.
        :type id: str
        :param self_service_appointment_id:
        :type self_service_appointment_id: str
        :param customer_id: The id of the booking customer associated with this appointment.
        :type customer_id: str
        :param customer_name:
        :type customer_name: str
        :param customer_email_address:
        :type customer_email_address: str
        :param customer_phone:
        :type customer_phone: str
        :param customer_notes: Notes from the customer associated with this appointment.
        :type customer_notes: str
        :param service_id: The id of the booking service associated with this appointment.
        :type service_id: str
        :param service_name: The name of the booking service associated with this appointment.
        :type service_name: str
        :param start: dateTimeTimeZone.
        :type start: ~bookings.models.MicrosoftGraphDateTimeZone
        :param end: dateTimeTimeZone.
        :type end: ~bookings.models.MicrosoftGraphDateTimeZone
        :param duration:
        :type duration: ~datetime.timedelta
        :param pre_buffer:
        :type pre_buffer: ~datetime.timedelta
        :param post_buffer:
        :type post_buffer: ~datetime.timedelta
        :param price_type:
        :type price_type: str or ~bookings.models.MicrosoftGraphBookingPriceType
        :param price:
        :type price: float
        :param service_notes:
        :type service_notes: str
        :param reminders:
        :type reminders: list[~bookings.models.MicrosoftGraphBookingReminder]
        :param opt_out_of_customer_email:
        :type opt_out_of_customer_email: bool
        :param staff_member_ids:
        :type staff_member_ids: list[str]
        :param invoice_amount:
        :type invoice_amount: float
        :param invoice_date: dateTimeTimeZone.
        :type invoice_date: ~bookings.models.MicrosoftGraphDateTimeZone
        :param invoice_id:
        :type invoice_id: str
        :param invoice_status:
        :type invoice_status: str or ~bookings.models.MicrosoftGraphBookingInvoiceStatus
        :param invoice_url:
        :type invoice_url: str
        :param display_name: The name associated with the location.
        :type display_name: str
        :param location_email_address: Optional email address of the location.
        :type location_email_address: str
        :param address: physicalAddress.
        :type address: ~bookings.models.MicrosoftGraphPhysicalAddress
        :param coordinates: outlookGeoCoordinates.
        :type coordinates: ~bookings.models.MicrosoftGraphOutlookGeoCoordinates
        :param location_uri: Optional URI representing the location.
        :type location_uri: str
        :param location_type:
        :type location_type: str or ~bookings.models.MicrosoftGraphLocationType
        :param unique_id: For internal use only.
        :type unique_id: str
        :param unique_id_type:
        :type unique_id_type: str or ~bookings.models.MicrosoftGraphLocationUniqueIdType
        :param microsoft_graph_location_display_name: The name associated with the location.
        :type microsoft_graph_location_display_name: str
        :param microsoft_graph_location_email_address_location_email_address: Optional email address of
         the location.
        :type microsoft_graph_location_email_address_location_email_address: str
        :param microsoft_graph_physical_address: physicalAddress.
        :type microsoft_graph_physical_address: ~bookings.models.MicrosoftGraphPhysicalAddress
        :param microsoft_graph_outlook_geo_coordinates: outlookGeoCoordinates.
        :type microsoft_graph_outlook_geo_coordinates: ~bookings.models.MicrosoftGraphOutlookGeoCoordinates
        :param microsoft_graph_location_uri: Optional URI representing the location.
        :type microsoft_graph_location_uri: str
        :param microsoft_graph_location_type:
        :type microsoft_graph_location_type: str or ~bookings.models.MicrosoftGraphLocationType
        :param microsoft_graph_location_unique_id: For internal use only.
        :type microsoft_graph_location_unique_id: str
        :param microsoft_graph_location_unique_id_type_unique_id_type:
        :type microsoft_graph_location_unique_id_type_unique_id_type: str or ~bookings.models.MicrosoftGraphLocationUniqueIdType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphBookingAppointment(id=id, self_service_appointment_id=self_service_appointment_id, customer_id=customer_id, customer_name=customer_name, customer_email_address=customer_email_address, customer_phone=customer_phone, customer_notes=customer_notes, service_id=service_id, service_name=service_name, start=start, end=end, duration=duration, pre_buffer=pre_buffer, post_buffer=post_buffer, price_type=price_type, price=price, service_notes=service_notes, reminders=reminders, opt_out_of_customer_email=opt_out_of_customer_email, staff_member_ids=staff_member_ids, invoice_amount=invoice_amount, invoice_date=invoice_date, invoice_id=invoice_id, invoice_status=invoice_status, invoice_url=invoice_url, display_name_service_location_display_name=display_name, location_email_address_service_location_email_address=location_email_address, address_service_location_address=address, coordinates_service_location_coordinates=coordinates, location_uri_service_location_uri=location_uri, location_type_service_location_type=location_type, unique_id_service_location_unique_id=unique_id, unique_id_type_service_location_unique_id_type=unique_id_type, display_name_customer_location_display_name=microsoft_graph_location_display_name, location_email_address_customer_location_email_address=microsoft_graph_location_email_address_location_email_address, address_customer_location_address=microsoft_graph_physical_address, coordinates_customer_location_coordinates=microsoft_graph_outlook_geo_coordinates, location_uri_customer_location_uri=microsoft_graph_location_uri, location_type_customer_location_type=microsoft_graph_location_type, unique_id_customer_location_unique_id=microsoft_graph_location_unique_id, unique_id_type_customer_location_unique_id_type=microsoft_graph_location_unique_id_type_unique_id_type)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_calendar_view.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingAppointment-id': self._serialize.url("booking_appointment_id", booking_appointment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphBookingAppointment')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_calendar_view.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/calendarView/{bookingAppointment-id}'}  # type: ignore

    def list_customer(
        self,
        booking_business_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum19"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum20"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfBookingCustomer"]
        """Get customers from bookingBusinesses.

        Get customers from bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~bookings.models.Enum19]
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum20]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfBookingCustomer or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~bookings.models.CollectionOfBookingCustomer]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfBookingCustomer"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_customer.metadata['url']  # type: ignore
                path_format_arguments = {
                    'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfBookingCustomer', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_customer.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/customers'}  # type: ignore

    def create_customer(
        self,
        booking_business_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        email_address=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingPerson"
        """Create new navigation property to customers for bookingBusinesses.

        Create new navigation property to customers for bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: Display name of this entity.
        :type display_name: str
        :param email_address: The e-mail address of this person.
        :type email_address: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingPerson, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingPerson
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingPerson"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphBookingPerson(id=id, display_name=display_name, email_address=email_address)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_customer.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphBookingPerson')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingPerson', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_customer.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/customers'}  # type: ignore

    def get_customer(
        self,
        booking_business_id,  # type: str
        booking_customer_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum21"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingPerson"
        """Get customers from bookingBusinesses.

        Get customers from bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param booking_customer_id: key: bookingCustomer-id of bookingCustomer.
        :type booking_customer_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum21]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingPerson, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingPerson
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingPerson"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_customer.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingCustomer-id': self._serialize.url("booking_customer_id", booking_customer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingPerson', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_customer.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/customers/{bookingCustomer-id}'}  # type: ignore

    def update_customer(
        self,
        booking_business_id,  # type: str
        booking_customer_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        email_address=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property customers in bookingBusinesses.

        Update the navigation property customers in bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param booking_customer_id: key: bookingCustomer-id of bookingCustomer.
        :type booking_customer_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: Display name of this entity.
        :type display_name: str
        :param email_address: The e-mail address of this person.
        :type email_address: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphBookingPerson(id=id, display_name=display_name, email_address=email_address)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_customer.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingCustomer-id': self._serialize.url("booking_customer_id", booking_customer_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphBookingPerson')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_customer.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/customers/{bookingCustomer-id}'}  # type: ignore

    def publish(
        self,
        booking_business_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action publish.

        Invoke action publish.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.publish.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    publish.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/microsoft.graph.publish'}  # type: ignore

    def unpublish(
        self,
        booking_business_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action unpublish.

        Invoke action unpublish.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.unpublish.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    unpublish.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/microsoft.graph.unpublish'}  # type: ignore

    def list_service(
        self,
        booking_business_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum22"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum23"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfBookingService"]
        """Get services from bookingBusinesses.

        Get services from bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~bookings.models.Enum22]
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum23]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfBookingService or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~bookings.models.CollectionOfBookingService]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfBookingService"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_service.metadata['url']  # type: ignore
                path_format_arguments = {
                    'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfBookingService', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_service.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/services'}  # type: ignore

    def create_service(
        self,
        booking_business_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        default_duration=None,  # type: Optional[datetime.timedelta]
        default_price=None,  # type: Optional[float]
        default_price_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphBookingPriceType"]]
        default_reminders=None,  # type: Optional[List["models.MicrosoftGraphBookingReminder"]]
        description=None,  # type: Optional[str]
        is_hidden_from_customers=None,  # type: Optional[bool]
        notes=None,  # type: Optional[str]
        pre_buffer=None,  # type: Optional[datetime.timedelta]
        post_buffer=None,  # type: Optional[datetime.timedelta]
        scheduling_policy=None,  # type: Optional["models.MicrosoftGraphBookingSchedulingPolicy"]
        staff_member_ids=None,  # type: Optional[List[str]]
        microsoft_graph_location_display_name=None,  # type: Optional[str]
        location_email_address=None,  # type: Optional[str]
        address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        coordinates=None,  # type: Optional["models.MicrosoftGraphOutlookGeoCoordinates"]
        location_uri=None,  # type: Optional[str]
        location_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationType"]]
        unique_id=None,  # type: Optional[str]
        unique_id_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationUniqueIdType"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingService"
        """Create new navigation property to services for bookingBusinesses.

        Create new navigation property to services for bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: Display name of this entity.
        :type display_name: str
        :param default_duration:
        :type default_duration: ~datetime.timedelta
        :param default_price:
        :type default_price: float
        :param default_price_type:
        :type default_price_type: str or ~bookings.models.MicrosoftGraphBookingPriceType
        :param default_reminders: The default reminders set in an appointment of this service.
        :type default_reminders: list[~bookings.models.MicrosoftGraphBookingReminder]
        :param description:
        :type description: str
        :param is_hidden_from_customers:
        :type is_hidden_from_customers: bool
        :param notes:
        :type notes: str
        :param pre_buffer:
        :type pre_buffer: ~datetime.timedelta
        :param post_buffer:
        :type post_buffer: ~datetime.timedelta
        :param scheduling_policy: bookingSchedulingPolicy.
        :type scheduling_policy: ~bookings.models.MicrosoftGraphBookingSchedulingPolicy
        :param staff_member_ids:
        :type staff_member_ids: list[str]
        :param microsoft_graph_location_display_name: The name associated with the location.
        :type microsoft_graph_location_display_name: str
        :param location_email_address: Optional email address of the location.
        :type location_email_address: str
        :param address: physicalAddress.
        :type address: ~bookings.models.MicrosoftGraphPhysicalAddress
        :param coordinates: outlookGeoCoordinates.
        :type coordinates: ~bookings.models.MicrosoftGraphOutlookGeoCoordinates
        :param location_uri: Optional URI representing the location.
        :type location_uri: str
        :param location_type:
        :type location_type: str or ~bookings.models.MicrosoftGraphLocationType
        :param unique_id: For internal use only.
        :type unique_id: str
        :param unique_id_type:
        :type unique_id_type: str or ~bookings.models.MicrosoftGraphLocationUniqueIdType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingService, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingService
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingService"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphBookingService(id=id, display_name=display_name, default_duration=default_duration, default_price=default_price, default_price_type=default_price_type, default_reminders=default_reminders, description=description, is_hidden_from_customers=is_hidden_from_customers, notes=notes, pre_buffer=pre_buffer, post_buffer=post_buffer, scheduling_policy=scheduling_policy, staff_member_ids=staff_member_ids, display_name_default_location_display_name=microsoft_graph_location_display_name, location_email_address=location_email_address, address=address, coordinates=coordinates, location_uri=location_uri, location_type=location_type, unique_id=unique_id, unique_id_type=unique_id_type)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_service.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphBookingService')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingService', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_service.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/services'}  # type: ignore

    def get_service(
        self,
        booking_business_id,  # type: str
        booking_service_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum24"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingService"
        """Get services from bookingBusinesses.

        Get services from bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param booking_service_id: key: bookingService-id of bookingService.
        :type booking_service_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum24]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingService, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingService
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingService"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_service.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingService-id': self._serialize.url("booking_service_id", booking_service_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingService', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_service.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/services/{bookingService-id}'}  # type: ignore

    def update_service(
        self,
        booking_business_id,  # type: str
        booking_service_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        default_duration=None,  # type: Optional[datetime.timedelta]
        default_price=None,  # type: Optional[float]
        default_price_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphBookingPriceType"]]
        default_reminders=None,  # type: Optional[List["models.MicrosoftGraphBookingReminder"]]
        description=None,  # type: Optional[str]
        is_hidden_from_customers=None,  # type: Optional[bool]
        notes=None,  # type: Optional[str]
        pre_buffer=None,  # type: Optional[datetime.timedelta]
        post_buffer=None,  # type: Optional[datetime.timedelta]
        scheduling_policy=None,  # type: Optional["models.MicrosoftGraphBookingSchedulingPolicy"]
        staff_member_ids=None,  # type: Optional[List[str]]
        microsoft_graph_location_display_name=None,  # type: Optional[str]
        location_email_address=None,  # type: Optional[str]
        address=None,  # type: Optional["models.MicrosoftGraphPhysicalAddress"]
        coordinates=None,  # type: Optional["models.MicrosoftGraphOutlookGeoCoordinates"]
        location_uri=None,  # type: Optional[str]
        location_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationType"]]
        unique_id=None,  # type: Optional[str]
        unique_id_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphLocationUniqueIdType"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property services in bookingBusinesses.

        Update the navigation property services in bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param booking_service_id: key: bookingService-id of bookingService.
        :type booking_service_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: Display name of this entity.
        :type display_name: str
        :param default_duration:
        :type default_duration: ~datetime.timedelta
        :param default_price:
        :type default_price: float
        :param default_price_type:
        :type default_price_type: str or ~bookings.models.MicrosoftGraphBookingPriceType
        :param default_reminders: The default reminders set in an appointment of this service.
        :type default_reminders: list[~bookings.models.MicrosoftGraphBookingReminder]
        :param description:
        :type description: str
        :param is_hidden_from_customers:
        :type is_hidden_from_customers: bool
        :param notes:
        :type notes: str
        :param pre_buffer:
        :type pre_buffer: ~datetime.timedelta
        :param post_buffer:
        :type post_buffer: ~datetime.timedelta
        :param scheduling_policy: bookingSchedulingPolicy.
        :type scheduling_policy: ~bookings.models.MicrosoftGraphBookingSchedulingPolicy
        :param staff_member_ids:
        :type staff_member_ids: list[str]
        :param microsoft_graph_location_display_name: The name associated with the location.
        :type microsoft_graph_location_display_name: str
        :param location_email_address: Optional email address of the location.
        :type location_email_address: str
        :param address: physicalAddress.
        :type address: ~bookings.models.MicrosoftGraphPhysicalAddress
        :param coordinates: outlookGeoCoordinates.
        :type coordinates: ~bookings.models.MicrosoftGraphOutlookGeoCoordinates
        :param location_uri: Optional URI representing the location.
        :type location_uri: str
        :param location_type:
        :type location_type: str or ~bookings.models.MicrosoftGraphLocationType
        :param unique_id: For internal use only.
        :type unique_id: str
        :param unique_id_type:
        :type unique_id_type: str or ~bookings.models.MicrosoftGraphLocationUniqueIdType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphBookingService(id=id, display_name=display_name, default_duration=default_duration, default_price=default_price, default_price_type=default_price_type, default_reminders=default_reminders, description=description, is_hidden_from_customers=is_hidden_from_customers, notes=notes, pre_buffer=pre_buffer, post_buffer=post_buffer, scheduling_policy=scheduling_policy, staff_member_ids=staff_member_ids, display_name_default_location_display_name=microsoft_graph_location_display_name, location_email_address=location_email_address, address=address, coordinates=coordinates, location_uri=location_uri, location_type=location_type, unique_id=unique_id, unique_id_type=unique_id_type)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_service.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingService-id': self._serialize.url("booking_service_id", booking_service_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphBookingService')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_service.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/services/{bookingService-id}'}  # type: ignore

    def list_staff_member(
        self,
        booking_business_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum25"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum26"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfBookingStaffMember"]
        """Get staffMembers from bookingBusinesses.

        Get staffMembers from bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~bookings.models.Enum25]
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum26]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfBookingStaffMember or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~bookings.models.CollectionOfBookingStaffMember]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfBookingStaffMember"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_staff_member.metadata['url']  # type: ignore
                path_format_arguments = {
                    'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfBookingStaffMember', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_staff_member.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/staffMembers'}  # type: ignore

    def create_staff_member(
        self,
        booking_business_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        email_address=None,  # type: Optional[str]
        availability_is_affected_by_personal_calendar=None,  # type: Optional[bool]
        color_index=None,  # type: Optional[int]
        role=None,  # type: Optional[Union[str, "models.MicrosoftGraphBookingStaffRole"]]
        use_business_hours=None,  # type: Optional[bool]
        working_hours=None,  # type: Optional[List["models.MicrosoftGraphBookingWorkHours"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingStaffMember"
        """Create new navigation property to staffMembers for bookingBusinesses.

        Create new navigation property to staffMembers for bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: Display name of this entity.
        :type display_name: str
        :param email_address: The e-mail address of this person.
        :type email_address: str
        :param availability_is_affected_by_personal_calendar:
        :type availability_is_affected_by_personal_calendar: bool
        :param color_index:
        :type color_index: int
        :param role:
        :type role: str or ~bookings.models.MicrosoftGraphBookingStaffRole
        :param use_business_hours:
        :type use_business_hours: bool
        :param working_hours:
        :type working_hours: list[~bookings.models.MicrosoftGraphBookingWorkHours]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingStaffMember, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingStaffMember
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingStaffMember"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphBookingStaffMember(id=id, display_name=display_name, email_address=email_address, availability_is_affected_by_personal_calendar=availability_is_affected_by_personal_calendar, color_index=color_index, role=role, use_business_hours=use_business_hours, working_hours=working_hours)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_staff_member.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphBookingStaffMember')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingStaffMember', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_staff_member.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/staffMembers'}  # type: ignore

    def get_staff_member(
        self,
        booking_business_id,  # type: str
        booking_staff_member_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum27"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphBookingStaffMember"
        """Get staffMembers from bookingBusinesses.

        Get staffMembers from bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param booking_staff_member_id: key: bookingStaffMember-id of bookingStaffMember.
        :type booking_staff_member_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~bookings.models.Enum27]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphBookingStaffMember, or the result of cls(response)
        :rtype: ~bookings.models.MicrosoftGraphBookingStaffMember
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphBookingStaffMember"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_staff_member.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingStaffMember-id': self._serialize.url("booking_staff_member_id", booking_staff_member_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphBookingStaffMember', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_staff_member.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/staffMembers/{bookingStaffMember-id}'}  # type: ignore

    def update_staff_member(
        self,
        booking_business_id,  # type: str
        booking_staff_member_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        email_address=None,  # type: Optional[str]
        availability_is_affected_by_personal_calendar=None,  # type: Optional[bool]
        color_index=None,  # type: Optional[int]
        role=None,  # type: Optional[Union[str, "models.MicrosoftGraphBookingStaffRole"]]
        use_business_hours=None,  # type: Optional[bool]
        working_hours=None,  # type: Optional[List["models.MicrosoftGraphBookingWorkHours"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property staffMembers in bookingBusinesses.

        Update the navigation property staffMembers in bookingBusinesses.

        :param booking_business_id: key: bookingBusiness-id of bookingBusiness.
        :type booking_business_id: str
        :param booking_staff_member_id: key: bookingStaffMember-id of bookingStaffMember.
        :type booking_staff_member_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: Display name of this entity.
        :type display_name: str
        :param email_address: The e-mail address of this person.
        :type email_address: str
        :param availability_is_affected_by_personal_calendar:
        :type availability_is_affected_by_personal_calendar: bool
        :param color_index:
        :type color_index: int
        :param role:
        :type role: str or ~bookings.models.MicrosoftGraphBookingStaffRole
        :param use_business_hours:
        :type use_business_hours: bool
        :param working_hours:
        :type working_hours: list[~bookings.models.MicrosoftGraphBookingWorkHours]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphBookingStaffMember(id=id, display_name=display_name, email_address=email_address, availability_is_affected_by_personal_calendar=availability_is_affected_by_personal_calendar, color_index=color_index, role=role, use_business_hours=use_business_hours, working_hours=working_hours)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_staff_member.metadata['url']  # type: ignore
        path_format_arguments = {
            'bookingBusiness-id': self._serialize.url("booking_business_id", booking_business_id, 'str'),
            'bookingStaffMember-id': self._serialize.url("booking_staff_member_id", booking_staff_member_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphBookingStaffMember')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_staff_member.metadata = {'url': '/bookingBusinesses/{bookingBusiness-id}/staffMembers/{bookingStaffMember-id}'}  # type: ignore
