# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import get_three_state_flag
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_usersdevices.action import (
    AddAlternativeSecurityIds,
    AddMemberOf,
    AddRegisteredOwners,
    AddRegisteredUsers,
    AddTransitiveMemberOf,
    AddExtensions
)


def load_arguments(self, _):

    with self.argument_context('usersdevices update') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('device_id', help='key: device-id of device')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('account_enabled', arg_type=get_three_state_flag(), help='true if the account is enabled; '
                   'otherwise, false. Required.')
        c.argument('alternative_security_ids', action=AddAlternativeSecurityIds, nargs='*', help='For internal use '
                   'only. Not nullable.')
        c.argument('approximate_last_sign_in_date_time', help='The timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('compliance_expiration_date_time', help='The timestamp when the device is no longer deemed '
                   'compliant. The timestamp type represents date and time information using ISO 8601 format and is '
                   'always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('microsoft_graph_device_id', help='Unique identifier set by Azure Device Registration Service at '
                   'the time of registration.')
        c.argument('device_metadata', help='For interal use only. Set to null.')
        c.argument('device_version', help='For interal use only.')
        c.argument('display_name', help='The display name for the device. Required.')
        c.argument('is_compliant', arg_type=get_three_state_flag(), help='true if the device complies with Mobile '
                   'Device Management (MDM) policies; otherwise, false. Read-only. This can only be updated by Intune '
                   'for any device OS type or by an approved MDM app for Windows OS devices.')
        c.argument('is_managed', arg_type=get_three_state_flag(), help='true if the device is managed by a Mobile '
                   'Device Management (MDM) app; otherwise, false. This can only be updated by Intune for any device '
                   'OS type or by an approved MDM app for Windows OS devices.')
        c.argument('on_premises_last_sync_date_time', help='The last time at which the object was synced with the '
                   'on-premises directory.The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\' Read-only.')
        c.argument('on_premises_sync_enabled', arg_type=get_three_state_flag(), help='true if this object is synced '
                   'from an on-premises directory; false if this object was originally synced from an on-premises '
                   'directory but is no longer synced; null if this object has never been synced from an on-premises '
                   'directory (default). Read-only.')
        c.argument('operating_system', help='The type of operating system on the device. Required.')
        c.argument('operating_system_version', help='The version of the operating system on the device. Required.')
        c.argument('physical_ids', nargs='*', help='For interal use only. Not nullable.')
        c.argument('profile_type', help='The profile type of the device. Possible values:RegisteredDevice '
                   '(default)SecureVMPrinterSharedIoT')
        c.argument('system_labels', nargs='*', help='List of labels applied to the device by the system.')
        c.argument('trust_type', help='Type of trust for the joined device. Read-only. Possible values: Workplace - '
                   'indicates bring your own personal devicesAzureAd - Cloud only joined devicesServerAd - on-premises '
                   'domain joined devices joined to Azure AD. For more details, see Introduction to device management '
                   'in Azure Active Directory')
        c.argument('name', help='')
        c.argument('manufacturer', help='')
        c.argument('model', help='')
        c.argument('kind', help='')
        c.argument('status', help='')
        c.argument('platform', help='')
        c.argument('member_of', action=AddMemberOf, nargs='*', help='Groups that this group is a member of. HTTP '
                   'Methods: GET (supported for all groups). Read-only. Nullable.')
        c.argument('registered_owners', action=AddRegisteredOwners, nargs='*', help='The user that cloud joined the '
                   'device or registered their personal device. The registered owner is set at the time of '
                   'registration. Currently, there can be only one owner. Read-only. Nullable.')
        c.argument('registered_users', action=AddRegisteredUsers, nargs='*', help='Collection of registered users of '
                   'the device. For cloud joined devices and registered personal devices, registered users are set to '
                   'the same value as registered owners at the time of registration. Read-only. Nullable.')
        c.argument('transitive_member_of', action=AddTransitiveMemberOf, nargs='*', help='')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the device. Read-only. Nullable.')
        c.argument('commands', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('usersdevices create-device') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('account_enabled', arg_type=get_three_state_flag(), help='true if the account is enabled; '
                   'otherwise, false. Required.')
        c.argument('alternative_security_ids', action=AddAlternativeSecurityIds, nargs='*', help='For internal use '
                   'only. Not nullable.')
        c.argument('approximate_last_sign_in_date_time', help='The timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('compliance_expiration_date_time', help='The timestamp when the device is no longer deemed '
                   'compliant. The timestamp type represents date and time information using ISO 8601 format and is '
                   'always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'. Read-only.')
        c.argument('device_id', help='Unique identifier set by Azure Device Registration Service at the time of '
                   'registration.')
        c.argument('device_metadata', help='For interal use only. Set to null.')
        c.argument('device_version', help='For interal use only.')
        c.argument('display_name', help='The display name for the device. Required.')
        c.argument('is_compliant', arg_type=get_three_state_flag(), help='true if the device complies with Mobile '
                   'Device Management (MDM) policies; otherwise, false. Read-only. This can only be updated by Intune '
                   'for any device OS type or by an approved MDM app for Windows OS devices.')
        c.argument('is_managed', arg_type=get_three_state_flag(), help='true if the device is managed by a Mobile '
                   'Device Management (MDM) app; otherwise, false. This can only be updated by Intune for any device '
                   'OS type or by an approved MDM app for Windows OS devices.')
        c.argument('on_premises_last_sync_date_time', help='The last time at which the object was synced with the '
                   'on-premises directory.The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\' Read-only.')
        c.argument('on_premises_sync_enabled', arg_type=get_three_state_flag(), help='true if this object is synced '
                   'from an on-premises directory; false if this object was originally synced from an on-premises '
                   'directory but is no longer synced; null if this object has never been synced from an on-premises '
                   'directory (default). Read-only.')
        c.argument('operating_system', help='The type of operating system on the device. Required.')
        c.argument('operating_system_version', help='The version of the operating system on the device. Required.')
        c.argument('physical_ids', nargs='*', help='For interal use only. Not nullable.')
        c.argument('profile_type', help='The profile type of the device. Possible values:RegisteredDevice '
                   '(default)SecureVMPrinterSharedIoT')
        c.argument('system_labels', nargs='*', help='List of labels applied to the device by the system.')
        c.argument('trust_type', help='Type of trust for the joined device. Read-only. Possible values: Workplace - '
                   'indicates bring your own personal devicesAzureAd - Cloud only joined devicesServerAd - on-premises '
                   'domain joined devices joined to Azure AD. For more details, see Introduction to device management '
                   'in Azure Active Directory')
        c.argument('name', help='')
        c.argument('manufacturer', help='')
        c.argument('model', help='')
        c.argument('kind', help='')
        c.argument('status', help='')
        c.argument('platform', help='')
        c.argument('member_of', action=AddMemberOf, nargs='*', help='Groups that this group is a member of. HTTP '
                   'Methods: GET (supported for all groups). Read-only. Nullable.')
        c.argument('registered_owners', action=AddRegisteredOwners, nargs='*', help='The user that cloud joined the '
                   'device or registered their personal device. The registered owner is set at the time of '
                   'registration. Currently, there can be only one owner. Read-only. Nullable.')
        c.argument('registered_users', action=AddRegisteredUsers, nargs='*', help='Collection of registered users of '
                   'the device. For cloud joined devices and registered personal devices, registered users are set to '
                   'the same value as registered owners at the time of registration. Read-only. Nullable.')
        c.argument('transitive_member_of', action=AddTransitiveMemberOf, nargs='*', help='')
        c.argument('extensions', action=AddExtensions, nargs='*', help='The collection of open extensions defined for '
                   'the device. Read-only. Nullable.')
        c.argument('commands', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('usersdevices get-device') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('device_id', help='key: device-id of device')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('usersdevices list-device') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')
