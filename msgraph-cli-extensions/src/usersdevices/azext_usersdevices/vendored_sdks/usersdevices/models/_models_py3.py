# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import List, Optional

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CollectionOfDevice(msrest.serialization.Model):
    """Collection of device.

    :param value:
    :type value: list[~users_devices.models.MicrosoftGraphDevice]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphDevice]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphDevice"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfDevice, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class MicrosoftGraphAlternativeSecurityId(msrest.serialization.Model):
    """alternativeSecurityId.

    :param type: For internal use only.
    :type type: int
    :param identity_provider: For internal use only.
    :type identity_provider: str
    :param key: For internal use only.
    :type key: bytes
    """

    _validation = {
        'type': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'int'},
        'identity_provider': {'key': 'identityProvider', 'type': 'str'},
        'key': {'key': 'key', 'type': 'base64'},
    }

    def __init__(
        self,
        *,
        type: Optional[int] = None,
        identity_provider: Optional[str] = None,
        key: Optional[bytes] = None,
        **kwargs
    ):
        super(MicrosoftGraphAlternativeSecurityId, self).__init__(**kwargs)
        self.type = type
        self.identity_provider = identity_provider
        self.key = key


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = id


class MicrosoftGraphCommand(MicrosoftGraphEntity):
    """command.

    :param id: Read-only.
    :type id: str
    :param status:
    :type status: str
    :param type:
    :type type: str
    :param app_service_name:
    :type app_service_name: str
    :param package_family_name:
    :type package_family_name: str
    :param error:
    :type error: str
    :param payload: Any object.
    :type payload: object
    :param permission_ticket:
    :type permission_ticket: str
    :param post_back_uri:
    :type post_back_uri: str
    :param responsepayload: entity.
    :type responsepayload: ~users_devices.models.MicrosoftGraphEntity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'Status', 'type': 'str'},
        'type': {'key': 'Type', 'type': 'str'},
        'app_service_name': {'key': 'AppServiceName', 'type': 'str'},
        'package_family_name': {'key': 'PackageFamilyName', 'type': 'str'},
        'error': {'key': 'Error', 'type': 'str'},
        'payload': {'key': 'Payload', 'type': 'object'},
        'permission_ticket': {'key': 'PermissionTicket', 'type': 'str'},
        'post_back_uri': {'key': 'PostBackUri', 'type': 'str'},
        'responsepayload': {'key': 'responsepayload', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        status: Optional[str] = None,
        type: Optional[str] = None,
        app_service_name: Optional[str] = None,
        package_family_name: Optional[str] = None,
        error: Optional[str] = None,
        payload: Optional[object] = None,
        permission_ticket: Optional[str] = None,
        post_back_uri: Optional[str] = None,
        responsepayload: Optional["MicrosoftGraphEntity"] = None,
        **kwargs
    ):
        super(MicrosoftGraphCommand, self).__init__(id=id, **kwargs)
        self.status = status
        self.type = type
        self.app_service_name = app_service_name
        self.package_family_name = package_family_name
        self.error = error
        self.payload = payload
        self.permission_ticket = permission_ticket
        self.post_back_uri = post_back_uri
        self.responsepayload = responsepayload


class MicrosoftGraphDirectoryObject(MicrosoftGraphEntity):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphDirectoryObject, self).__init__(id=id, **kwargs)
        self.deleted_date_time = deleted_date_time


class MicrosoftGraphDevice(MicrosoftGraphDirectoryObject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param account_enabled: true if the account is enabled; otherwise, false. Required.
    :type account_enabled: bool
    :param alternative_security_ids: For internal use only. Not nullable.
    :type alternative_security_ids: list[~users_devices.models.MicrosoftGraphAlternativeSecurityId]
    :param approximate_last_sign_in_date_time: The timestamp type represents date and time
     information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan
     1, 2014 would look like this: '2014-01-01T00:00:00Z'. Read-only.
    :type approximate_last_sign_in_date_time: ~datetime.datetime
    :param compliance_expiration_date_time: The timestamp when the device is no longer deemed
     compliant. The timestamp type represents date and time information using ISO 8601 format and is
     always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this:
     '2014-01-01T00:00:00Z'. Read-only.
    :type compliance_expiration_date_time: ~datetime.datetime
    :param device_id: Unique identifier set by Azure Device Registration Service at the time of
     registration.
    :type device_id: str
    :param device_metadata: For interal use only. Set to null.
    :type device_metadata: str
    :param device_version: For interal use only.
    :type device_version: int
    :param display_name: The display name for the device. Required.
    :type display_name: str
    :param is_compliant: true if the device complies with Mobile Device Management (MDM) policies;
     otherwise, false. Read-only. This can only be updated by Intune for any device OS type or by an
     approved MDM app for Windows OS devices.
    :type is_compliant: bool
    :param is_managed: true if the device is managed by a Mobile Device Management (MDM) app;
     otherwise, false. This can only be updated by Intune for any device OS type or by an approved
     MDM app for Windows OS devices.
    :type is_managed: bool
    :param on_premises_last_sync_date_time: The last time at which the object was synced with the
     on-premises directory.The Timestamp type represents date and time information using ISO 8601
     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z' Read-only.
    :type on_premises_last_sync_date_time: ~datetime.datetime
    :param on_premises_sync_enabled: true if this object is synced from an on-premises directory;
     false if this object was originally synced from an on-premises directory but is no longer
     synced; null if this object has never been synced from an on-premises directory (default).
     Read-only.
    :type on_premises_sync_enabled: bool
    :param operating_system: The type of operating system on the device. Required.
    :type operating_system: str
    :param operating_system_version: The version of the operating system on the device. Required.
    :type operating_system_version: str
    :param physical_ids: For interal use only. Not nullable.
    :type physical_ids: list[str]
    :param profile_type: The profile type of the device. Possible values:RegisteredDevice
     (default)SecureVMPrinterSharedIoT.
    :type profile_type: str
    :param system_labels: List of labels applied to the device by the system.
    :type system_labels: list[str]
    :param trust_type: Type of trust for the joined device. Read-only. Possible values: Workplace -
     indicates bring your own personal devicesAzureAd - Cloud only joined devicesServerAd - on-
     premises domain joined devices joined to Azure AD. For more details, see Introduction to device
     management in Azure Active Directory.
    :type trust_type: str
    :param name:
    :type name: str
    :param manufacturer:
    :type manufacturer: str
    :param model:
    :type model: str
    :param kind:
    :type kind: str
    :param status:
    :type status: str
    :param platform:
    :type platform: str
    :param member_of: Groups that this group is a member of. HTTP Methods: GET (supported for all
     groups). Read-only. Nullable.
    :type member_of: list[~users_devices.models.MicrosoftGraphDirectoryObject]
    :param registered_owners: The user that cloud joined the device or registered their personal
     device. The registered owner is set at the time of registration. Currently, there can be only
     one owner. Read-only. Nullable.
    :type registered_owners: list[~users_devices.models.MicrosoftGraphDirectoryObject]
    :param registered_users: Collection of registered users of the device. For cloud joined devices
     and registered personal devices, registered users are set to the same value as registered
     owners at the time of registration. Read-only. Nullable.
    :type registered_users: list[~users_devices.models.MicrosoftGraphDirectoryObject]
    :param transitive_member_of:
    :type transitive_member_of: list[~users_devices.models.MicrosoftGraphDirectoryObject]
    :param extensions: The collection of open extensions defined for the device. Read-only.
     Nullable.
    :type extensions: list[~users_devices.models.MicrosoftGraphEntity]
    :param commands:
    :type commands: list[~users_devices.models.MicrosoftGraphCommand]
    """

    _validation = {
        'device_version': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'account_enabled': {'key': 'accountEnabled', 'type': 'bool'},
        'alternative_security_ids': {'key': 'alternativeSecurityIds', 'type': '[MicrosoftGraphAlternativeSecurityId]'},
        'approximate_last_sign_in_date_time': {'key': 'approximateLastSignInDateTime', 'type': 'iso-8601'},
        'compliance_expiration_date_time': {'key': 'complianceExpirationDateTime', 'type': 'iso-8601'},
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'device_metadata': {'key': 'deviceMetadata', 'type': 'str'},
        'device_version': {'key': 'deviceVersion', 'type': 'int'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_compliant': {'key': 'isCompliant', 'type': 'bool'},
        'is_managed': {'key': 'isManaged', 'type': 'bool'},
        'on_premises_last_sync_date_time': {'key': 'onPremisesLastSyncDateTime', 'type': 'iso-8601'},
        'on_premises_sync_enabled': {'key': 'onPremisesSyncEnabled', 'type': 'bool'},
        'operating_system': {'key': 'operatingSystem', 'type': 'str'},
        'operating_system_version': {'key': 'operatingSystemVersion', 'type': 'str'},
        'physical_ids': {'key': 'physicalIds', 'type': '[str]'},
        'profile_type': {'key': 'profileType', 'type': 'str'},
        'system_labels': {'key': 'systemLabels', 'type': '[str]'},
        'trust_type': {'key': 'trustType', 'type': 'str'},
        'name': {'key': 'Name', 'type': 'str'},
        'manufacturer': {'key': 'Manufacturer', 'type': 'str'},
        'model': {'key': 'Model', 'type': 'str'},
        'kind': {'key': 'Kind', 'type': 'str'},
        'status': {'key': 'Status', 'type': 'str'},
        'platform': {'key': 'Platform', 'type': 'str'},
        'member_of': {'key': 'memberOf', 'type': '[MicrosoftGraphDirectoryObject]'},
        'registered_owners': {'key': 'registeredOwners', 'type': '[MicrosoftGraphDirectoryObject]'},
        'registered_users': {'key': 'registeredUsers', 'type': '[MicrosoftGraphDirectoryObject]'},
        'transitive_member_of': {'key': 'transitiveMemberOf', 'type': '[MicrosoftGraphDirectoryObject]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphEntity]'},
        'commands': {'key': 'commands', 'type': '[MicrosoftGraphCommand]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        account_enabled: Optional[bool] = None,
        alternative_security_ids: Optional[List["MicrosoftGraphAlternativeSecurityId"]] = None,
        approximate_last_sign_in_date_time: Optional[datetime.datetime] = None,
        compliance_expiration_date_time: Optional[datetime.datetime] = None,
        device_id: Optional[str] = None,
        device_metadata: Optional[str] = None,
        device_version: Optional[int] = None,
        display_name: Optional[str] = None,
        is_compliant: Optional[bool] = None,
        is_managed: Optional[bool] = None,
        on_premises_last_sync_date_time: Optional[datetime.datetime] = None,
        on_premises_sync_enabled: Optional[bool] = None,
        operating_system: Optional[str] = None,
        operating_system_version: Optional[str] = None,
        physical_ids: Optional[List[str]] = None,
        profile_type: Optional[str] = None,
        system_labels: Optional[List[str]] = None,
        trust_type: Optional[str] = None,
        name: Optional[str] = None,
        manufacturer: Optional[str] = None,
        model: Optional[str] = None,
        kind: Optional[str] = None,
        status: Optional[str] = None,
        platform: Optional[str] = None,
        member_of: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        registered_owners: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        registered_users: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        transitive_member_of: Optional[List["MicrosoftGraphDirectoryObject"]] = None,
        extensions: Optional[List["MicrosoftGraphEntity"]] = None,
        commands: Optional[List["MicrosoftGraphCommand"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphDevice, self).__init__(id=id, deleted_date_time=deleted_date_time, **kwargs)
        self.account_enabled = account_enabled
        self.alternative_security_ids = alternative_security_ids
        self.approximate_last_sign_in_date_time = approximate_last_sign_in_date_time
        self.compliance_expiration_date_time = compliance_expiration_date_time
        self.device_id = device_id
        self.device_metadata = device_metadata
        self.device_version = device_version
        self.display_name = display_name
        self.is_compliant = is_compliant
        self.is_managed = is_managed
        self.on_premises_last_sync_date_time = on_premises_last_sync_date_time
        self.on_premises_sync_enabled = on_premises_sync_enabled
        self.operating_system = operating_system
        self.operating_system_version = operating_system_version
        self.physical_ids = physical_ids
        self.profile_type = profile_type
        self.system_labels = system_labels
        self.trust_type = trust_type
        self.name = name
        self.manufacturer = manufacturer
        self.model = model
        self.kind = kind
        self.status = status
        self.platform = platform
        self.member_of = member_of
        self.registered_owners = registered_owners
        self.registered_users = registered_users
        self.transitive_member_of = transitive_member_of
        self.extensions = extensions
        self.commands = commands


class MicrosoftGraphExtension(MicrosoftGraphEntity):
    """extension.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphExtension, self).__init__(id=id, **kwargs)


class MicrosoftGraphPayloadResponse(MicrosoftGraphEntity):
    """payloadResponse.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphPayloadResponse, self).__init__(id=id, **kwargs)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~users_devices.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        *,
        error: "OdataErrorMain",
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = error


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~users_devices.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["OdataErrorDetail"]] = None,
        innererror: Optional[object] = None,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror
