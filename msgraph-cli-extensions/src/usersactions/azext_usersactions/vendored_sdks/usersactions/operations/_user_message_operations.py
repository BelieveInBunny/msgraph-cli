# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class UserMessageOperations(object):
    """UserMessageOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~users_actions.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def copy(
        self,
        user_id,  # type: str
        message_id,  # type: str
        destination_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMessage"
        """Invoke action copy.

        Invoke action copy.

        :param user_id: key: id of user.
        :type user_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param destination_id:
        :type destination_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMessage, or the result of cls(response)
        :rtype: ~users_actions.models.MicrosoftGraphMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsQbims6UsersUserIdMessagesMessageIdMicrosoftGraphCopyPostRequestbodyContentApplicationJsonSchema(destination_id=destination_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.copy.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsQbims6UsersUserIdMessagesMessageIdMicrosoftGraphCopyPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    copy.metadata = {'url': '/users/{user-id}/messages/{message-id}/microsoft.graph.copy'}  # type: ignore

    def create_forward(
        self,
        user_id,  # type: str
        message_id,  # type: str
        to_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        comment=None,  # type: Optional[str]
        id=None,  # type: Optional[str]
        categories=None,  # type: Optional[List[str]]
        change_key=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        bcc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        body_preview=None,  # type: Optional[str]
        cc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        conversation_id=None,  # type: Optional[str]
        conversation_index=None,  # type: Optional[bytes]
        flag=None,  # type: Optional["models.MicrosoftGraphFollowupFlag"]
        from_parameter=None,  # type: Optional["models.MicrosoftGraphRecipient"]
        has_attachments=None,  # type: Optional[bool]
        importance=None,  # type: Optional[Union[str, "models.MicrosoftGraphImportance"]]
        inference_classification=None,  # type: Optional[Union[str, "models.MicrosoftGraphInferenceClassificationType"]]
        internet_message_headers=None,  # type: Optional[List["models.MicrosoftGraphInternetMessageHeader"]]
        internet_message_id=None,  # type: Optional[str]
        is_delivery_receipt_requested=None,  # type: Optional[bool]
        is_draft=None,  # type: Optional[bool]
        is_read=None,  # type: Optional[bool]
        is_read_receipt_requested=None,  # type: Optional[bool]
        parent_folder_id=None,  # type: Optional[str]
        received_date_time=None,  # type: Optional[datetime.datetime]
        reply_to=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        sender=None,  # type: Optional["models.MicrosoftGraphRecipient"]
        sent_date_time=None,  # type: Optional[datetime.datetime]
        subject=None,  # type: Optional[str]
        microsoft_graph_message_to_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        unique_body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        web_link=None,  # type: Optional[str]
        attachments=None,  # type: Optional[List["models.MicrosoftGraphAttachment"]]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMessage"
        """Invoke action createForward.

        Invoke action createForward.

        :param user_id: key: id of user.
        :type user_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param to_recipients:
        :type to_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param comment:
        :type comment: str
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param bcc_recipients: The Bcc: recipients for the message.
        :type bcc_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param body: itemBody.
        :type body: ~users_actions.models.MicrosoftGraphItemBody
        :param body_preview: The first 255 characters of the message body. It is in text format.
        :type body_preview: str
        :param cc_recipients: The Cc: recipients for the message.
        :type cc_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param conversation_id: The ID of the conversation the email belongs to.
        :type conversation_id: str
        :param conversation_index: Indicates the position of the message within the conversation.
        :type conversation_index: bytes
        :param flag: followupFlag.
        :type flag: ~users_actions.models.MicrosoftGraphFollowupFlag
        :param from_parameter: recipient.
        :type from_parameter: ~users_actions.models.MicrosoftGraphRecipient
        :param has_attachments: Indicates whether the message has attachments. This property doesn't
         include inline attachments, so if a message contains only inline attachments, this property is
         false. To verify the existence of inline attachments, parse the body property to look for a src
         attribute, such as :code:`<IMG src='cid:image001.jpg@01D26CD8.6C05F070'>`.
        :type has_attachments: bool
        :param importance:
        :type importance: str or ~users_actions.models.MicrosoftGraphImportance
        :param inference_classification:
        :type inference_classification: str or ~users_actions.models.MicrosoftGraphInferenceClassificationType
        :param internet_message_headers: A collection of message headers defined by RFC5322. The set
         includes message headers indicating the network path taken by a message from the sender to the
         recipient. It can also contain custom message headers that hold app data for the message.
         Returned only on applying a $select query option. Read-only.
        :type internet_message_headers: list[~users_actions.models.MicrosoftGraphInternetMessageHeader]
        :param internet_message_id: The message ID in the format specified by RFC2822.
        :type internet_message_id: str
        :param is_delivery_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_delivery_receipt_requested: bool
        :param is_draft: Indicates whether the message is a draft. A message is a draft if it hasn't
         been sent yet.
        :type is_draft: bool
        :param is_read: Indicates whether the message has been read.
        :type is_read: bool
        :param is_read_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_read_receipt_requested: bool
        :param parent_folder_id: The unique identifier for the message's parent mailFolder.
        :type parent_folder_id: str
        :param received_date_time: The date and time the message was received.
        :type received_date_time: ~datetime.datetime
        :param reply_to: The email addresses to use when replying.
        :type reply_to: list[~users_actions.models.MicrosoftGraphRecipient]
        :param sender: recipient.
        :type sender: ~users_actions.models.MicrosoftGraphRecipient
        :param sent_date_time: The date and time the message was sent.
        :type sent_date_time: ~datetime.datetime
        :param subject: The subject of the message.
        :type subject: str
        :param microsoft_graph_message_to_recipients: The To: recipients for the message.
        :type microsoft_graph_message_to_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param unique_body: itemBody.
        :type unique_body: ~users_actions.models.MicrosoftGraphItemBody
        :param web_link: The URL to open the message in Outlook on the web.You can append an ispopout
         argument to the end of the URL to change how the message is displayed. If ispopout is not
         present or if it is set to 1, then the message is shown in a popout window. If ispopout is set
         to 0, then the browser will show the message in the Outlook on the web review pane.The message
         will open in the browser if you are logged in to your mailbox via Outlook on the web. You will
         be prompted to login if you are not already logged in with the browser.This URL cannot be
         accessed from within an iFrame.
        :type web_link: str
        :param attachments: The fileAttachment and itemAttachment attachments for the message.
        :type attachments: list[~users_actions.models.MicrosoftGraphAttachment]
        :param extensions: The collection of open extensions defined for the message. Nullable.
        :type extensions: list[~users_actions.models.MicrosoftGraphExtension]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the message. Nullable.
        :type multi_value_extended_properties: list[~users_actions.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the message. Nullable.
        :type single_value_extended_properties: list[~users_actions.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMessage, or the result of cls(response)
        :rtype: ~users_actions.models.MicrosoftGraphMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths16W4HmtUsersUserIdMessagesMessageIdMicrosoftGraphCreateforwardPostRequestbodyContentApplicationJsonSchema(to_recipients=to_recipients, comment=comment, id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, bcc_recipients=bcc_recipients, body=body, body_preview=body_preview, cc_recipients=cc_recipients, conversation_id=conversation_id, conversation_index=conversation_index, flag=flag, from_property=from_parameter, has_attachments=has_attachments, importance=importance, inference_classification=inference_classification, internet_message_headers=internet_message_headers, internet_message_id=internet_message_id, is_delivery_receipt_requested=is_delivery_receipt_requested, is_draft=is_draft, is_read=is_read, is_read_receipt_requested=is_read_receipt_requested, parent_folder_id=parent_folder_id, received_date_time=received_date_time, reply_to=reply_to, sender=sender, sent_date_time=sent_date_time, subject=subject, to_recipients_message_to_recipients=microsoft_graph_message_to_recipients, unique_body=unique_body, web_link=web_link, attachments=attachments, extensions=extensions, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_forward.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths16W4HmtUsersUserIdMessagesMessageIdMicrosoftGraphCreateforwardPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_forward.metadata = {'url': '/users/{user-id}/messages/{message-id}/microsoft.graph.createForward'}  # type: ignore

    def create_reply(
        self,
        user_id,  # type: str
        message_id,  # type: str
        comment=None,  # type: Optional[str]
        id=None,  # type: Optional[str]
        categories=None,  # type: Optional[List[str]]
        change_key=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        bcc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        body_preview=None,  # type: Optional[str]
        cc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        conversation_id=None,  # type: Optional[str]
        conversation_index=None,  # type: Optional[bytes]
        flag=None,  # type: Optional["models.MicrosoftGraphFollowupFlag"]
        from_parameter=None,  # type: Optional["models.MicrosoftGraphRecipient"]
        has_attachments=None,  # type: Optional[bool]
        importance=None,  # type: Optional[Union[str, "models.MicrosoftGraphImportance"]]
        inference_classification=None,  # type: Optional[Union[str, "models.MicrosoftGraphInferenceClassificationType"]]
        internet_message_headers=None,  # type: Optional[List["models.MicrosoftGraphInternetMessageHeader"]]
        internet_message_id=None,  # type: Optional[str]
        is_delivery_receipt_requested=None,  # type: Optional[bool]
        is_draft=None,  # type: Optional[bool]
        is_read=None,  # type: Optional[bool]
        is_read_receipt_requested=None,  # type: Optional[bool]
        parent_folder_id=None,  # type: Optional[str]
        received_date_time=None,  # type: Optional[datetime.datetime]
        reply_to=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        sender=None,  # type: Optional["models.MicrosoftGraphRecipient"]
        sent_date_time=None,  # type: Optional[datetime.datetime]
        subject=None,  # type: Optional[str]
        to_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        unique_body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        web_link=None,  # type: Optional[str]
        attachments=None,  # type: Optional[List["models.MicrosoftGraphAttachment"]]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMessage"
        """Invoke action createReply.

        Invoke action createReply.

        :param user_id: key: id of user.
        :type user_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param comment:
        :type comment: str
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param bcc_recipients: The Bcc: recipients for the message.
        :type bcc_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param body: itemBody.
        :type body: ~users_actions.models.MicrosoftGraphItemBody
        :param body_preview: The first 255 characters of the message body. It is in text format.
        :type body_preview: str
        :param cc_recipients: The Cc: recipients for the message.
        :type cc_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param conversation_id: The ID of the conversation the email belongs to.
        :type conversation_id: str
        :param conversation_index: Indicates the position of the message within the conversation.
        :type conversation_index: bytes
        :param flag: followupFlag.
        :type flag: ~users_actions.models.MicrosoftGraphFollowupFlag
        :param from_parameter: recipient.
        :type from_parameter: ~users_actions.models.MicrosoftGraphRecipient
        :param has_attachments: Indicates whether the message has attachments. This property doesn't
         include inline attachments, so if a message contains only inline attachments, this property is
         false. To verify the existence of inline attachments, parse the body property to look for a src
         attribute, such as :code:`<IMG src='cid:image001.jpg@01D26CD8.6C05F070'>`.
        :type has_attachments: bool
        :param importance:
        :type importance: str or ~users_actions.models.MicrosoftGraphImportance
        :param inference_classification:
        :type inference_classification: str or ~users_actions.models.MicrosoftGraphInferenceClassificationType
        :param internet_message_headers: A collection of message headers defined by RFC5322. The set
         includes message headers indicating the network path taken by a message from the sender to the
         recipient. It can also contain custom message headers that hold app data for the message.
         Returned only on applying a $select query option. Read-only.
        :type internet_message_headers: list[~users_actions.models.MicrosoftGraphInternetMessageHeader]
        :param internet_message_id: The message ID in the format specified by RFC2822.
        :type internet_message_id: str
        :param is_delivery_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_delivery_receipt_requested: bool
        :param is_draft: Indicates whether the message is a draft. A message is a draft if it hasn't
         been sent yet.
        :type is_draft: bool
        :param is_read: Indicates whether the message has been read.
        :type is_read: bool
        :param is_read_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_read_receipt_requested: bool
        :param parent_folder_id: The unique identifier for the message's parent mailFolder.
        :type parent_folder_id: str
        :param received_date_time: The date and time the message was received.
        :type received_date_time: ~datetime.datetime
        :param reply_to: The email addresses to use when replying.
        :type reply_to: list[~users_actions.models.MicrosoftGraphRecipient]
        :param sender: recipient.
        :type sender: ~users_actions.models.MicrosoftGraphRecipient
        :param sent_date_time: The date and time the message was sent.
        :type sent_date_time: ~datetime.datetime
        :param subject: The subject of the message.
        :type subject: str
        :param to_recipients: The To: recipients for the message.
        :type to_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param unique_body: itemBody.
        :type unique_body: ~users_actions.models.MicrosoftGraphItemBody
        :param web_link: The URL to open the message in Outlook on the web.You can append an ispopout
         argument to the end of the URL to change how the message is displayed. If ispopout is not
         present or if it is set to 1, then the message is shown in a popout window. If ispopout is set
         to 0, then the browser will show the message in the Outlook on the web review pane.The message
         will open in the browser if you are logged in to your mailbox via Outlook on the web. You will
         be prompted to login if you are not already logged in with the browser.This URL cannot be
         accessed from within an iFrame.
        :type web_link: str
        :param attachments: The fileAttachment and itemAttachment attachments for the message.
        :type attachments: list[~users_actions.models.MicrosoftGraphAttachment]
        :param extensions: The collection of open extensions defined for the message. Nullable.
        :type extensions: list[~users_actions.models.MicrosoftGraphExtension]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the message. Nullable.
        :type multi_value_extended_properties: list[~users_actions.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the message. Nullable.
        :type single_value_extended_properties: list[~users_actions.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMessage, or the result of cls(response)
        :rtype: ~users_actions.models.MicrosoftGraphMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths1BibiieUsersUserIdMessagesMessageIdMicrosoftGraphCreatereplyPostRequestbodyContentApplicationJsonSchema(comment=comment, id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, bcc_recipients=bcc_recipients, body=body, body_preview=body_preview, cc_recipients=cc_recipients, conversation_id=conversation_id, conversation_index=conversation_index, flag=flag, from_property=from_parameter, has_attachments=has_attachments, importance=importance, inference_classification=inference_classification, internet_message_headers=internet_message_headers, internet_message_id=internet_message_id, is_delivery_receipt_requested=is_delivery_receipt_requested, is_draft=is_draft, is_read=is_read, is_read_receipt_requested=is_read_receipt_requested, parent_folder_id=parent_folder_id, received_date_time=received_date_time, reply_to=reply_to, sender=sender, sent_date_time=sent_date_time, subject=subject, to_recipients=to_recipients, unique_body=unique_body, web_link=web_link, attachments=attachments, extensions=extensions, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_reply.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths1BibiieUsersUserIdMessagesMessageIdMicrosoftGraphCreatereplyPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_reply.metadata = {'url': '/users/{user-id}/messages/{message-id}/microsoft.graph.createReply'}  # type: ignore

    def create_reply_all(
        self,
        user_id,  # type: str
        message_id,  # type: str
        comment=None,  # type: Optional[str]
        id=None,  # type: Optional[str]
        categories=None,  # type: Optional[List[str]]
        change_key=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        bcc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        body_preview=None,  # type: Optional[str]
        cc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        conversation_id=None,  # type: Optional[str]
        conversation_index=None,  # type: Optional[bytes]
        flag=None,  # type: Optional["models.MicrosoftGraphFollowupFlag"]
        from_parameter=None,  # type: Optional["models.MicrosoftGraphRecipient"]
        has_attachments=None,  # type: Optional[bool]
        importance=None,  # type: Optional[Union[str, "models.MicrosoftGraphImportance"]]
        inference_classification=None,  # type: Optional[Union[str, "models.MicrosoftGraphInferenceClassificationType"]]
        internet_message_headers=None,  # type: Optional[List["models.MicrosoftGraphInternetMessageHeader"]]
        internet_message_id=None,  # type: Optional[str]
        is_delivery_receipt_requested=None,  # type: Optional[bool]
        is_draft=None,  # type: Optional[bool]
        is_read=None,  # type: Optional[bool]
        is_read_receipt_requested=None,  # type: Optional[bool]
        parent_folder_id=None,  # type: Optional[str]
        received_date_time=None,  # type: Optional[datetime.datetime]
        reply_to=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        sender=None,  # type: Optional["models.MicrosoftGraphRecipient"]
        sent_date_time=None,  # type: Optional[datetime.datetime]
        subject=None,  # type: Optional[str]
        to_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        unique_body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        web_link=None,  # type: Optional[str]
        attachments=None,  # type: Optional[List["models.MicrosoftGraphAttachment"]]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMessage"
        """Invoke action createReplyAll.

        Invoke action createReplyAll.

        :param user_id: key: id of user.
        :type user_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param comment:
        :type comment: str
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param bcc_recipients: The Bcc: recipients for the message.
        :type bcc_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param body: itemBody.
        :type body: ~users_actions.models.MicrosoftGraphItemBody
        :param body_preview: The first 255 characters of the message body. It is in text format.
        :type body_preview: str
        :param cc_recipients: The Cc: recipients for the message.
        :type cc_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param conversation_id: The ID of the conversation the email belongs to.
        :type conversation_id: str
        :param conversation_index: Indicates the position of the message within the conversation.
        :type conversation_index: bytes
        :param flag: followupFlag.
        :type flag: ~users_actions.models.MicrosoftGraphFollowupFlag
        :param from_parameter: recipient.
        :type from_parameter: ~users_actions.models.MicrosoftGraphRecipient
        :param has_attachments: Indicates whether the message has attachments. This property doesn't
         include inline attachments, so if a message contains only inline attachments, this property is
         false. To verify the existence of inline attachments, parse the body property to look for a src
         attribute, such as :code:`<IMG src='cid:image001.jpg@01D26CD8.6C05F070'>`.
        :type has_attachments: bool
        :param importance:
        :type importance: str or ~users_actions.models.MicrosoftGraphImportance
        :param inference_classification:
        :type inference_classification: str or ~users_actions.models.MicrosoftGraphInferenceClassificationType
        :param internet_message_headers: A collection of message headers defined by RFC5322. The set
         includes message headers indicating the network path taken by a message from the sender to the
         recipient. It can also contain custom message headers that hold app data for the message.
         Returned only on applying a $select query option. Read-only.
        :type internet_message_headers: list[~users_actions.models.MicrosoftGraphInternetMessageHeader]
        :param internet_message_id: The message ID in the format specified by RFC2822.
        :type internet_message_id: str
        :param is_delivery_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_delivery_receipt_requested: bool
        :param is_draft: Indicates whether the message is a draft. A message is a draft if it hasn't
         been sent yet.
        :type is_draft: bool
        :param is_read: Indicates whether the message has been read.
        :type is_read: bool
        :param is_read_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_read_receipt_requested: bool
        :param parent_folder_id: The unique identifier for the message's parent mailFolder.
        :type parent_folder_id: str
        :param received_date_time: The date and time the message was received.
        :type received_date_time: ~datetime.datetime
        :param reply_to: The email addresses to use when replying.
        :type reply_to: list[~users_actions.models.MicrosoftGraphRecipient]
        :param sender: recipient.
        :type sender: ~users_actions.models.MicrosoftGraphRecipient
        :param sent_date_time: The date and time the message was sent.
        :type sent_date_time: ~datetime.datetime
        :param subject: The subject of the message.
        :type subject: str
        :param to_recipients: The To: recipients for the message.
        :type to_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param unique_body: itemBody.
        :type unique_body: ~users_actions.models.MicrosoftGraphItemBody
        :param web_link: The URL to open the message in Outlook on the web.You can append an ispopout
         argument to the end of the URL to change how the message is displayed. If ispopout is not
         present or if it is set to 1, then the message is shown in a popout window. If ispopout is set
         to 0, then the browser will show the message in the Outlook on the web review pane.The message
         will open in the browser if you are logged in to your mailbox via Outlook on the web. You will
         be prompted to login if you are not already logged in with the browser.This URL cannot be
         accessed from within an iFrame.
        :type web_link: str
        :param attachments: The fileAttachment and itemAttachment attachments for the message.
        :type attachments: list[~users_actions.models.MicrosoftGraphAttachment]
        :param extensions: The collection of open extensions defined for the message. Nullable.
        :type extensions: list[~users_actions.models.MicrosoftGraphExtension]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the message. Nullable.
        :type multi_value_extended_properties: list[~users_actions.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the message. Nullable.
        :type single_value_extended_properties: list[~users_actions.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMessage, or the result of cls(response)
        :rtype: ~users_actions.models.MicrosoftGraphMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths140I0IcUsersUserIdMessagesMessageIdMicrosoftGraphCreatereplyallPostRequestbodyContentApplicationJsonSchema(comment=comment, id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, bcc_recipients=bcc_recipients, body=body, body_preview=body_preview, cc_recipients=cc_recipients, conversation_id=conversation_id, conversation_index=conversation_index, flag=flag, from_property=from_parameter, has_attachments=has_attachments, importance=importance, inference_classification=inference_classification, internet_message_headers=internet_message_headers, internet_message_id=internet_message_id, is_delivery_receipt_requested=is_delivery_receipt_requested, is_draft=is_draft, is_read=is_read, is_read_receipt_requested=is_read_receipt_requested, parent_folder_id=parent_folder_id, received_date_time=received_date_time, reply_to=reply_to, sender=sender, sent_date_time=sent_date_time, subject=subject, to_recipients=to_recipients, unique_body=unique_body, web_link=web_link, attachments=attachments, extensions=extensions, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_reply_all.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths140I0IcUsersUserIdMessagesMessageIdMicrosoftGraphCreatereplyallPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_reply_all.metadata = {'url': '/users/{user-id}/messages/{message-id}/microsoft.graph.createReplyAll'}  # type: ignore

    def forward(
        self,
        user_id,  # type: str
        message_id,  # type: str
        to_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        comment=None,  # type: Optional[str]
        id=None,  # type: Optional[str]
        categories=None,  # type: Optional[List[str]]
        change_key=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        bcc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        body_preview=None,  # type: Optional[str]
        cc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        conversation_id=None,  # type: Optional[str]
        conversation_index=None,  # type: Optional[bytes]
        flag=None,  # type: Optional["models.MicrosoftGraphFollowupFlag"]
        from_parameter=None,  # type: Optional["models.MicrosoftGraphRecipient"]
        has_attachments=None,  # type: Optional[bool]
        importance=None,  # type: Optional[Union[str, "models.MicrosoftGraphImportance"]]
        inference_classification=None,  # type: Optional[Union[str, "models.MicrosoftGraphInferenceClassificationType"]]
        internet_message_headers=None,  # type: Optional[List["models.MicrosoftGraphInternetMessageHeader"]]
        internet_message_id=None,  # type: Optional[str]
        is_delivery_receipt_requested=None,  # type: Optional[bool]
        is_draft=None,  # type: Optional[bool]
        is_read=None,  # type: Optional[bool]
        is_read_receipt_requested=None,  # type: Optional[bool]
        parent_folder_id=None,  # type: Optional[str]
        received_date_time=None,  # type: Optional[datetime.datetime]
        reply_to=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        sender=None,  # type: Optional["models.MicrosoftGraphRecipient"]
        sent_date_time=None,  # type: Optional[datetime.datetime]
        subject=None,  # type: Optional[str]
        microsoft_graph_message_to_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        unique_body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        web_link=None,  # type: Optional[str]
        attachments=None,  # type: Optional[List["models.MicrosoftGraphAttachment"]]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action forward.

        Invoke action forward.

        :param user_id: key: id of user.
        :type user_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param to_recipients:
        :type to_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param comment:
        :type comment: str
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param bcc_recipients: The Bcc: recipients for the message.
        :type bcc_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param body: itemBody.
        :type body: ~users_actions.models.MicrosoftGraphItemBody
        :param body_preview: The first 255 characters of the message body. It is in text format.
        :type body_preview: str
        :param cc_recipients: The Cc: recipients for the message.
        :type cc_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param conversation_id: The ID of the conversation the email belongs to.
        :type conversation_id: str
        :param conversation_index: Indicates the position of the message within the conversation.
        :type conversation_index: bytes
        :param flag: followupFlag.
        :type flag: ~users_actions.models.MicrosoftGraphFollowupFlag
        :param from_parameter: recipient.
        :type from_parameter: ~users_actions.models.MicrosoftGraphRecipient
        :param has_attachments: Indicates whether the message has attachments. This property doesn't
         include inline attachments, so if a message contains only inline attachments, this property is
         false. To verify the existence of inline attachments, parse the body property to look for a src
         attribute, such as :code:`<IMG src='cid:image001.jpg@01D26CD8.6C05F070'>`.
        :type has_attachments: bool
        :param importance:
        :type importance: str or ~users_actions.models.MicrosoftGraphImportance
        :param inference_classification:
        :type inference_classification: str or ~users_actions.models.MicrosoftGraphInferenceClassificationType
        :param internet_message_headers: A collection of message headers defined by RFC5322. The set
         includes message headers indicating the network path taken by a message from the sender to the
         recipient. It can also contain custom message headers that hold app data for the message.
         Returned only on applying a $select query option. Read-only.
        :type internet_message_headers: list[~users_actions.models.MicrosoftGraphInternetMessageHeader]
        :param internet_message_id: The message ID in the format specified by RFC2822.
        :type internet_message_id: str
        :param is_delivery_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_delivery_receipt_requested: bool
        :param is_draft: Indicates whether the message is a draft. A message is a draft if it hasn't
         been sent yet.
        :type is_draft: bool
        :param is_read: Indicates whether the message has been read.
        :type is_read: bool
        :param is_read_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_read_receipt_requested: bool
        :param parent_folder_id: The unique identifier for the message's parent mailFolder.
        :type parent_folder_id: str
        :param received_date_time: The date and time the message was received.
        :type received_date_time: ~datetime.datetime
        :param reply_to: The email addresses to use when replying.
        :type reply_to: list[~users_actions.models.MicrosoftGraphRecipient]
        :param sender: recipient.
        :type sender: ~users_actions.models.MicrosoftGraphRecipient
        :param sent_date_time: The date and time the message was sent.
        :type sent_date_time: ~datetime.datetime
        :param subject: The subject of the message.
        :type subject: str
        :param microsoft_graph_message_to_recipients: The To: recipients for the message.
        :type microsoft_graph_message_to_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param unique_body: itemBody.
        :type unique_body: ~users_actions.models.MicrosoftGraphItemBody
        :param web_link: The URL to open the message in Outlook on the web.You can append an ispopout
         argument to the end of the URL to change how the message is displayed. If ispopout is not
         present or if it is set to 1, then the message is shown in a popout window. If ispopout is set
         to 0, then the browser will show the message in the Outlook on the web review pane.The message
         will open in the browser if you are logged in to your mailbox via Outlook on the web. You will
         be prompted to login if you are not already logged in with the browser.This URL cannot be
         accessed from within an iFrame.
        :type web_link: str
        :param attachments: The fileAttachment and itemAttachment attachments for the message.
        :type attachments: list[~users_actions.models.MicrosoftGraphAttachment]
        :param extensions: The collection of open extensions defined for the message. Nullable.
        :type extensions: list[~users_actions.models.MicrosoftGraphExtension]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the message. Nullable.
        :type multi_value_extended_properties: list[~users_actions.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the message. Nullable.
        :type single_value_extended_properties: list[~users_actions.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths3Ta6EnUsersUserIdMessagesMessageIdMicrosoftGraphForwardPostRequestbodyContentApplicationJsonSchema(to_recipients=to_recipients, comment=comment, id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, bcc_recipients=bcc_recipients, body=body, body_preview=body_preview, cc_recipients=cc_recipients, conversation_id=conversation_id, conversation_index=conversation_index, flag=flag, from_property=from_parameter, has_attachments=has_attachments, importance=importance, inference_classification=inference_classification, internet_message_headers=internet_message_headers, internet_message_id=internet_message_id, is_delivery_receipt_requested=is_delivery_receipt_requested, is_draft=is_draft, is_read=is_read, is_read_receipt_requested=is_read_receipt_requested, parent_folder_id=parent_folder_id, received_date_time=received_date_time, reply_to=reply_to, sender=sender, sent_date_time=sent_date_time, subject=subject, to_recipients_message_to_recipients=microsoft_graph_message_to_recipients, unique_body=unique_body, web_link=web_link, attachments=attachments, extensions=extensions, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.forward.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths3Ta6EnUsersUserIdMessagesMessageIdMicrosoftGraphForwardPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    forward.metadata = {'url': '/users/{user-id}/messages/{message-id}/microsoft.graph.forward'}  # type: ignore

    def move(
        self,
        user_id,  # type: str
        message_id,  # type: str
        destination_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMessage"
        """Invoke action move.

        Invoke action move.

        :param user_id: key: id of user.
        :type user_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param destination_id:
        :type destination_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMessage, or the result of cls(response)
        :rtype: ~users_actions.models.MicrosoftGraphMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths46T88QUsersUserIdMessagesMessageIdMicrosoftGraphMovePostRequestbodyContentApplicationJsonSchema(destination_id=destination_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.move.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths46T88QUsersUserIdMessagesMessageIdMicrosoftGraphMovePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    move.metadata = {'url': '/users/{user-id}/messages/{message-id}/microsoft.graph.move'}  # type: ignore

    def reply(
        self,
        user_id,  # type: str
        message_id,  # type: str
        comment=None,  # type: Optional[str]
        id=None,  # type: Optional[str]
        categories=None,  # type: Optional[List[str]]
        change_key=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        bcc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        body_preview=None,  # type: Optional[str]
        cc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        conversation_id=None,  # type: Optional[str]
        conversation_index=None,  # type: Optional[bytes]
        flag=None,  # type: Optional["models.MicrosoftGraphFollowupFlag"]
        from_parameter=None,  # type: Optional["models.MicrosoftGraphRecipient"]
        has_attachments=None,  # type: Optional[bool]
        importance=None,  # type: Optional[Union[str, "models.MicrosoftGraphImportance"]]
        inference_classification=None,  # type: Optional[Union[str, "models.MicrosoftGraphInferenceClassificationType"]]
        internet_message_headers=None,  # type: Optional[List["models.MicrosoftGraphInternetMessageHeader"]]
        internet_message_id=None,  # type: Optional[str]
        is_delivery_receipt_requested=None,  # type: Optional[bool]
        is_draft=None,  # type: Optional[bool]
        is_read=None,  # type: Optional[bool]
        is_read_receipt_requested=None,  # type: Optional[bool]
        parent_folder_id=None,  # type: Optional[str]
        received_date_time=None,  # type: Optional[datetime.datetime]
        reply_to=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        sender=None,  # type: Optional["models.MicrosoftGraphRecipient"]
        sent_date_time=None,  # type: Optional[datetime.datetime]
        subject=None,  # type: Optional[str]
        to_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        unique_body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        web_link=None,  # type: Optional[str]
        attachments=None,  # type: Optional[List["models.MicrosoftGraphAttachment"]]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action reply.

        Invoke action reply.

        :param user_id: key: id of user.
        :type user_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param comment:
        :type comment: str
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param bcc_recipients: The Bcc: recipients for the message.
        :type bcc_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param body: itemBody.
        :type body: ~users_actions.models.MicrosoftGraphItemBody
        :param body_preview: The first 255 characters of the message body. It is in text format.
        :type body_preview: str
        :param cc_recipients: The Cc: recipients for the message.
        :type cc_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param conversation_id: The ID of the conversation the email belongs to.
        :type conversation_id: str
        :param conversation_index: Indicates the position of the message within the conversation.
        :type conversation_index: bytes
        :param flag: followupFlag.
        :type flag: ~users_actions.models.MicrosoftGraphFollowupFlag
        :param from_parameter: recipient.
        :type from_parameter: ~users_actions.models.MicrosoftGraphRecipient
        :param has_attachments: Indicates whether the message has attachments. This property doesn't
         include inline attachments, so if a message contains only inline attachments, this property is
         false. To verify the existence of inline attachments, parse the body property to look for a src
         attribute, such as :code:`<IMG src='cid:image001.jpg@01D26CD8.6C05F070'>`.
        :type has_attachments: bool
        :param importance:
        :type importance: str or ~users_actions.models.MicrosoftGraphImportance
        :param inference_classification:
        :type inference_classification: str or ~users_actions.models.MicrosoftGraphInferenceClassificationType
        :param internet_message_headers: A collection of message headers defined by RFC5322. The set
         includes message headers indicating the network path taken by a message from the sender to the
         recipient. It can also contain custom message headers that hold app data for the message.
         Returned only on applying a $select query option. Read-only.
        :type internet_message_headers: list[~users_actions.models.MicrosoftGraphInternetMessageHeader]
        :param internet_message_id: The message ID in the format specified by RFC2822.
        :type internet_message_id: str
        :param is_delivery_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_delivery_receipt_requested: bool
        :param is_draft: Indicates whether the message is a draft. A message is a draft if it hasn't
         been sent yet.
        :type is_draft: bool
        :param is_read: Indicates whether the message has been read.
        :type is_read: bool
        :param is_read_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_read_receipt_requested: bool
        :param parent_folder_id: The unique identifier for the message's parent mailFolder.
        :type parent_folder_id: str
        :param received_date_time: The date and time the message was received.
        :type received_date_time: ~datetime.datetime
        :param reply_to: The email addresses to use when replying.
        :type reply_to: list[~users_actions.models.MicrosoftGraphRecipient]
        :param sender: recipient.
        :type sender: ~users_actions.models.MicrosoftGraphRecipient
        :param sent_date_time: The date and time the message was sent.
        :type sent_date_time: ~datetime.datetime
        :param subject: The subject of the message.
        :type subject: str
        :param to_recipients: The To: recipients for the message.
        :type to_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param unique_body: itemBody.
        :type unique_body: ~users_actions.models.MicrosoftGraphItemBody
        :param web_link: The URL to open the message in Outlook on the web.You can append an ispopout
         argument to the end of the URL to change how the message is displayed. If ispopout is not
         present or if it is set to 1, then the message is shown in a popout window. If ispopout is set
         to 0, then the browser will show the message in the Outlook on the web review pane.The message
         will open in the browser if you are logged in to your mailbox via Outlook on the web. You will
         be prompted to login if you are not already logged in with the browser.This URL cannot be
         accessed from within an iFrame.
        :type web_link: str
        :param attachments: The fileAttachment and itemAttachment attachments for the message.
        :type attachments: list[~users_actions.models.MicrosoftGraphAttachment]
        :param extensions: The collection of open extensions defined for the message. Nullable.
        :type extensions: list[~users_actions.models.MicrosoftGraphExtension]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the message. Nullable.
        :type multi_value_extended_properties: list[~users_actions.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the message. Nullable.
        :type single_value_extended_properties: list[~users_actions.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths1Inq4EUsersUserIdMessagesMessageIdMicrosoftGraphReplyPostRequestbodyContentApplicationJsonSchema(comment=comment, id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, bcc_recipients=bcc_recipients, body=body, body_preview=body_preview, cc_recipients=cc_recipients, conversation_id=conversation_id, conversation_index=conversation_index, flag=flag, from_property=from_parameter, has_attachments=has_attachments, importance=importance, inference_classification=inference_classification, internet_message_headers=internet_message_headers, internet_message_id=internet_message_id, is_delivery_receipt_requested=is_delivery_receipt_requested, is_draft=is_draft, is_read=is_read, is_read_receipt_requested=is_read_receipt_requested, parent_folder_id=parent_folder_id, received_date_time=received_date_time, reply_to=reply_to, sender=sender, sent_date_time=sent_date_time, subject=subject, to_recipients=to_recipients, unique_body=unique_body, web_link=web_link, attachments=attachments, extensions=extensions, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.reply.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths1Inq4EUsersUserIdMessagesMessageIdMicrosoftGraphReplyPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    reply.metadata = {'url': '/users/{user-id}/messages/{message-id}/microsoft.graph.reply'}  # type: ignore

    def reply_all(
        self,
        user_id,  # type: str
        message_id,  # type: str
        comment=None,  # type: Optional[str]
        id=None,  # type: Optional[str]
        categories=None,  # type: Optional[List[str]]
        change_key=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        bcc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        body_preview=None,  # type: Optional[str]
        cc_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        conversation_id=None,  # type: Optional[str]
        conversation_index=None,  # type: Optional[bytes]
        flag=None,  # type: Optional["models.MicrosoftGraphFollowupFlag"]
        from_parameter=None,  # type: Optional["models.MicrosoftGraphRecipient"]
        has_attachments=None,  # type: Optional[bool]
        importance=None,  # type: Optional[Union[str, "models.MicrosoftGraphImportance"]]
        inference_classification=None,  # type: Optional[Union[str, "models.MicrosoftGraphInferenceClassificationType"]]
        internet_message_headers=None,  # type: Optional[List["models.MicrosoftGraphInternetMessageHeader"]]
        internet_message_id=None,  # type: Optional[str]
        is_delivery_receipt_requested=None,  # type: Optional[bool]
        is_draft=None,  # type: Optional[bool]
        is_read=None,  # type: Optional[bool]
        is_read_receipt_requested=None,  # type: Optional[bool]
        parent_folder_id=None,  # type: Optional[str]
        received_date_time=None,  # type: Optional[datetime.datetime]
        reply_to=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        sender=None,  # type: Optional["models.MicrosoftGraphRecipient"]
        sent_date_time=None,  # type: Optional[datetime.datetime]
        subject=None,  # type: Optional[str]
        to_recipients=None,  # type: Optional[List["models.MicrosoftGraphRecipient"]]
        unique_body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        web_link=None,  # type: Optional[str]
        attachments=None,  # type: Optional[List["models.MicrosoftGraphAttachment"]]
        extensions=None,  # type: Optional[List["models.MicrosoftGraphExtension"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action replyAll.

        Invoke action replyAll.

        :param user_id: key: id of user.
        :type user_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :param comment:
        :type comment: str
        :param id: Read-only.
        :type id: str
        :param categories: The categories associated with the item.
        :type categories: list[str]
        :param change_key: Identifies the version of the item. Every time the item is changed,
         changeKey changes as well. This allows Exchange to apply changes to the correct version of the
         object. Read-only.
        :type change_key: str
        :param created_date_time: The Timestamp type represents date and time information using ISO
         8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
         this: '2014-01-01T00:00:00Z'.
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time: The Timestamp type represents date and time information using
         ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
         like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param bcc_recipients: The Bcc: recipients for the message.
        :type bcc_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param body: itemBody.
        :type body: ~users_actions.models.MicrosoftGraphItemBody
        :param body_preview: The first 255 characters of the message body. It is in text format.
        :type body_preview: str
        :param cc_recipients: The Cc: recipients for the message.
        :type cc_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param conversation_id: The ID of the conversation the email belongs to.
        :type conversation_id: str
        :param conversation_index: Indicates the position of the message within the conversation.
        :type conversation_index: bytes
        :param flag: followupFlag.
        :type flag: ~users_actions.models.MicrosoftGraphFollowupFlag
        :param from_parameter: recipient.
        :type from_parameter: ~users_actions.models.MicrosoftGraphRecipient
        :param has_attachments: Indicates whether the message has attachments. This property doesn't
         include inline attachments, so if a message contains only inline attachments, this property is
         false. To verify the existence of inline attachments, parse the body property to look for a src
         attribute, such as :code:`<IMG src='cid:image001.jpg@01D26CD8.6C05F070'>`.
        :type has_attachments: bool
        :param importance:
        :type importance: str or ~users_actions.models.MicrosoftGraphImportance
        :param inference_classification:
        :type inference_classification: str or ~users_actions.models.MicrosoftGraphInferenceClassificationType
        :param internet_message_headers: A collection of message headers defined by RFC5322. The set
         includes message headers indicating the network path taken by a message from the sender to the
         recipient. It can also contain custom message headers that hold app data for the message.
         Returned only on applying a $select query option. Read-only.
        :type internet_message_headers: list[~users_actions.models.MicrosoftGraphInternetMessageHeader]
        :param internet_message_id: The message ID in the format specified by RFC2822.
        :type internet_message_id: str
        :param is_delivery_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_delivery_receipt_requested: bool
        :param is_draft: Indicates whether the message is a draft. A message is a draft if it hasn't
         been sent yet.
        :type is_draft: bool
        :param is_read: Indicates whether the message has been read.
        :type is_read: bool
        :param is_read_receipt_requested: Indicates whether a read receipt is requested for the
         message.
        :type is_read_receipt_requested: bool
        :param parent_folder_id: The unique identifier for the message's parent mailFolder.
        :type parent_folder_id: str
        :param received_date_time: The date and time the message was received.
        :type received_date_time: ~datetime.datetime
        :param reply_to: The email addresses to use when replying.
        :type reply_to: list[~users_actions.models.MicrosoftGraphRecipient]
        :param sender: recipient.
        :type sender: ~users_actions.models.MicrosoftGraphRecipient
        :param sent_date_time: The date and time the message was sent.
        :type sent_date_time: ~datetime.datetime
        :param subject: The subject of the message.
        :type subject: str
        :param to_recipients: The To: recipients for the message.
        :type to_recipients: list[~users_actions.models.MicrosoftGraphRecipient]
        :param unique_body: itemBody.
        :type unique_body: ~users_actions.models.MicrosoftGraphItemBody
        :param web_link: The URL to open the message in Outlook on the web.You can append an ispopout
         argument to the end of the URL to change how the message is displayed. If ispopout is not
         present or if it is set to 1, then the message is shown in a popout window. If ispopout is set
         to 0, then the browser will show the message in the Outlook on the web review pane.The message
         will open in the browser if you are logged in to your mailbox via Outlook on the web. You will
         be prompted to login if you are not already logged in with the browser.This URL cannot be
         accessed from within an iFrame.
        :type web_link: str
        :param attachments: The fileAttachment and itemAttachment attachments for the message.
        :type attachments: list[~users_actions.models.MicrosoftGraphAttachment]
        :param extensions: The collection of open extensions defined for the message. Nullable.
        :type extensions: list[~users_actions.models.MicrosoftGraphExtension]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the message. Nullable.
        :type multi_value_extended_properties: list[~users_actions.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the message. Nullable.
        :type single_value_extended_properties: list[~users_actions.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsKn6R94UsersUserIdMessagesMessageIdMicrosoftGraphReplyallPostRequestbodyContentApplicationJsonSchema(comment=comment, id=id, categories=categories, change_key=change_key, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, bcc_recipients=bcc_recipients, body=body, body_preview=body_preview, cc_recipients=cc_recipients, conversation_id=conversation_id, conversation_index=conversation_index, flag=flag, from_property=from_parameter, has_attachments=has_attachments, importance=importance, inference_classification=inference_classification, internet_message_headers=internet_message_headers, internet_message_id=internet_message_id, is_delivery_receipt_requested=is_delivery_receipt_requested, is_draft=is_draft, is_read=is_read, is_read_receipt_requested=is_read_receipt_requested, parent_folder_id=parent_folder_id, received_date_time=received_date_time, reply_to=reply_to, sender=sender, sent_date_time=sent_date_time, subject=subject, to_recipients=to_recipients, unique_body=unique_body, web_link=web_link, attachments=attachments, extensions=extensions, multi_value_extended_properties=multi_value_extended_properties, single_value_extended_properties=single_value_extended_properties)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.reply_all.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsKn6R94UsersUserIdMessagesMessageIdMicrosoftGraphReplyallPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    reply_all.metadata = {'url': '/users/{user-id}/messages/{message-id}/microsoft.graph.replyAll'}  # type: ignore

    def send(
        self,
        user_id,  # type: str
        message_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action send.

        Invoke action send.

        :param user_id: key: id of user.
        :type user_id: str
        :param message_id: key: id of message.
        :type message_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.send.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    send.metadata = {'url': '/users/{user-id}/messages/{message-id}/microsoft.graph.send'}  # type: ignore
