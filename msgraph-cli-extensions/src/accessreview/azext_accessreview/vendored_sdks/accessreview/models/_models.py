# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CollectionOfAccessReview(msrest.serialization.Model):
    """Collection of accessReview.

    :param value:
    :type value: list[~identity_access_review.models.MicrosoftGraphAccessReview]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAccessReview]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfAccessReview, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfAccessReview0(msrest.serialization.Model):
    """Collection of accessReview.

    :param value:
    :type value: list[~identity_access_review.models.MicrosoftGraphAccessReview]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAccessReview]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfAccessReview0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfAccessReviewDecision(msrest.serialization.Model):
    """Collection of accessReviewDecision.

    :param value:
    :type value: list[~identity_access_review.models.MicrosoftGraphAccessReviewDecision]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAccessReviewDecision]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfAccessReviewDecision, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfAccessReviewDecision0(msrest.serialization.Model):
    """Collection of accessReviewDecision.

    :param value:
    :type value: list[~identity_access_review.models.MicrosoftGraphAccessReviewDecision]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAccessReviewDecision]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfAccessReviewDecision0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfAccessReviewDecision1(msrest.serialization.Model):
    """Collection of accessReviewDecision.

    :param value:
    :type value: list[~identity_access_review.models.MicrosoftGraphAccessReviewDecision]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAccessReviewDecision]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfAccessReviewDecision1, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfAccessReviewReviewer(msrest.serialization.Model):
    """Collection of accessReviewReviewer.

    :param value:
    :type value: list[~identity_access_review.models.MicrosoftGraphAccessReviewReviewer]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAccessReviewReviewer]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfAccessReviewReviewer, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfBusinessFlowTemplate(msrest.serialization.Model):
    """Collection of businessFlowTemplate.

    :param value:
    :type value: list[~identity_access_review.models.MicrosoftGraphBusinessFlowTemplate]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphBusinessFlowTemplate]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfBusinessFlowTemplate, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfProgram(msrest.serialization.Model):
    """Collection of program.

    :param value:
    :type value: list[~identity_access_review.models.MicrosoftGraphProgram]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphProgram]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfProgram, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfProgramControl(msrest.serialization.Model):
    """Collection of programControl.

    :param value:
    :type value: list[~identity_access_review.models.MicrosoftGraphProgramControl]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphProgramControl]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfProgramControl, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfProgramControl0(msrest.serialization.Model):
    """Collection of programControl.

    :param value:
    :type value: list[~identity_access_review.models.MicrosoftGraphProgramControl]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphProgramControl]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfProgramControl0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfProgramControlType(msrest.serialization.Model):
    """Collection of programControlType.

    :param value:
    :type value: list[~identity_access_review.models.MicrosoftGraphProgramControlType]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphProgramControlType]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfProgramControlType, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class MicrosoftGraphAccessReview(MicrosoftGraphEntity):
    """accessReview.

    :param id: Read-only.
    :type id: str
    :param display_name:
    :type display_name: str
    :param start_date_time:
    :type start_date_time: ~datetime.datetime
    :param end_date_time:
    :type end_date_time: ~datetime.datetime
    :param status:
    :type status: str
    :param created_by: userIdentity.
    :type created_by: ~identity_access_review.models.MicrosoftGraphUserIdentity
    :param business_flow_template_id:
    :type business_flow_template_id: str
    :param reviewer_type:
    :type reviewer_type: str
    :param description:
    :type description: str
    :param reviewed_entity: identity.
    :type reviewed_entity: ~identity_access_review.models.MicrosoftGraphIdentity
    :param reviewers:
    :type reviewers: list[~identity_access_review.models.MicrosoftGraphAccessReviewReviewer]
    :param decisions:
    :type decisions: list[~identity_access_review.models.MicrosoftGraphAccessReviewDecision]
    :param my_decisions:
    :type my_decisions: list[~identity_access_review.models.MicrosoftGraphAccessReviewDecision]
    :param instances:
    :type instances: list[~identity_access_review.models.MicrosoftGraphAccessReview]
    :param mail_notifications_enabled:
    :type mail_notifications_enabled: bool
    :param reminders_enabled:
    :type reminders_enabled: bool
    :param justification_required_on_approval:
    :type justification_required_on_approval: bool
    :param recurrence_settings: accessReviewRecurrenceSettings.
    :type recurrence_settings:
     ~identity_access_review.models.MicrosoftGraphAccessReviewRecurrenceSettings
    :param auto_review_enabled:
    :type auto_review_enabled: bool
    :param activity_duration_in_days:
    :type activity_duration_in_days: int
    :param auto_review_settings: autoReviewSettings.
    :type auto_review_settings: ~identity_access_review.models.MicrosoftGraphAutoReviewSettings
    :param auto_apply_review_results_enabled:
    :type auto_apply_review_results_enabled: bool
    :param access_recommendations_enabled:
    :type access_recommendations_enabled: bool
    """

    _validation = {
        'activity_duration_in_days': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphUserIdentity'},
        'business_flow_template_id': {'key': 'businessFlowTemplateId', 'type': 'str'},
        'reviewer_type': {'key': 'reviewerType', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'reviewed_entity': {'key': 'reviewedEntity', 'type': 'MicrosoftGraphIdentity'},
        'reviewers': {'key': 'reviewers', 'type': '[MicrosoftGraphAccessReviewReviewer]'},
        'decisions': {'key': 'decisions', 'type': '[MicrosoftGraphAccessReviewDecision]'},
        'my_decisions': {'key': 'myDecisions', 'type': '[MicrosoftGraphAccessReviewDecision]'},
        'instances': {'key': 'instances', 'type': '[MicrosoftGraphAccessReview]'},
        'mail_notifications_enabled': {'key': 'settings.mailNotificationsEnabled', 'type': 'bool'},
        'reminders_enabled': {'key': 'settings.remindersEnabled', 'type': 'bool'},
        'justification_required_on_approval': {'key': 'settings.justificationRequiredOnApproval', 'type': 'bool'},
        'recurrence_settings': {'key': 'settings.recurrenceSettings', 'type': 'MicrosoftGraphAccessReviewRecurrenceSettings'},
        'auto_review_enabled': {'key': 'settings.autoReviewEnabled', 'type': 'bool'},
        'activity_duration_in_days': {'key': 'settings.activityDurationInDays', 'type': 'int'},
        'auto_review_settings': {'key': 'settings.autoReviewSettings', 'type': 'MicrosoftGraphAutoReviewSettings'},
        'auto_apply_review_results_enabled': {'key': 'settings.autoApplyReviewResultsEnabled', 'type': 'bool'},
        'access_recommendations_enabled': {'key': 'settings.accessRecommendationsEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAccessReview, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.start_date_time = kwargs.get('start_date_time', None)
        self.end_date_time = kwargs.get('end_date_time', None)
        self.status = kwargs.get('status', None)
        self.created_by = kwargs.get('created_by', None)
        self.business_flow_template_id = kwargs.get('business_flow_template_id', None)
        self.reviewer_type = kwargs.get('reviewer_type', None)
        self.description = kwargs.get('description', None)
        self.reviewed_entity = kwargs.get('reviewed_entity', None)
        self.reviewers = kwargs.get('reviewers', None)
        self.decisions = kwargs.get('decisions', None)
        self.my_decisions = kwargs.get('my_decisions', None)
        self.instances = kwargs.get('instances', None)
        self.mail_notifications_enabled = kwargs.get('mail_notifications_enabled', None)
        self.reminders_enabled = kwargs.get('reminders_enabled', None)
        self.justification_required_on_approval = kwargs.get('justification_required_on_approval', None)
        self.recurrence_settings = kwargs.get('recurrence_settings', None)
        self.auto_review_enabled = kwargs.get('auto_review_enabled', None)
        self.activity_duration_in_days = kwargs.get('activity_duration_in_days', None)
        self.auto_review_settings = kwargs.get('auto_review_settings', None)
        self.auto_apply_review_results_enabled = kwargs.get('auto_apply_review_results_enabled', None)
        self.access_recommendations_enabled = kwargs.get('access_recommendations_enabled', None)


class MicrosoftGraphAccessReviewDecision(MicrosoftGraphEntity):
    """accessReviewDecision.

    :param id: Read-only.
    :type id: str
    :param access_review_id:
    :type access_review_id: str
    :param reviewed_by: userIdentity.
    :type reviewed_by: ~identity_access_review.models.MicrosoftGraphUserIdentity
    :param reviewed_date_time:
    :type reviewed_date_time: ~datetime.datetime
    :param review_result:
    :type review_result: str
    :param justification:
    :type justification: str
    :param applied_by: userIdentity.
    :type applied_by: ~identity_access_review.models.MicrosoftGraphUserIdentity
    :param applied_date_time:
    :type applied_date_time: ~datetime.datetime
    :param apply_result:
    :type apply_result: str
    :param access_recommendation:
    :type access_recommendation: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'access_review_id': {'key': 'accessReviewId', 'type': 'str'},
        'reviewed_by': {'key': 'reviewedBy', 'type': 'MicrosoftGraphUserIdentity'},
        'reviewed_date_time': {'key': 'reviewedDateTime', 'type': 'iso-8601'},
        'review_result': {'key': 'reviewResult', 'type': 'str'},
        'justification': {'key': 'justification', 'type': 'str'},
        'applied_by': {'key': 'appliedBy', 'type': 'MicrosoftGraphUserIdentity'},
        'applied_date_time': {'key': 'appliedDateTime', 'type': 'iso-8601'},
        'apply_result': {'key': 'applyResult', 'type': 'str'},
        'access_recommendation': {'key': 'accessRecommendation', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAccessReviewDecision, self).__init__(**kwargs)
        self.access_review_id = kwargs.get('access_review_id', None)
        self.reviewed_by = kwargs.get('reviewed_by', None)
        self.reviewed_date_time = kwargs.get('reviewed_date_time', None)
        self.review_result = kwargs.get('review_result', None)
        self.justification = kwargs.get('justification', None)
        self.applied_by = kwargs.get('applied_by', None)
        self.applied_date_time = kwargs.get('applied_date_time', None)
        self.apply_result = kwargs.get('apply_result', None)
        self.access_recommendation = kwargs.get('access_recommendation', None)


class MicrosoftGraphAccessReviewRecurrenceSettings(msrest.serialization.Model):
    """accessReviewRecurrenceSettings.

    :param recurrence_type:
    :type recurrence_type: str
    :param recurrence_end_type:
    :type recurrence_end_type: str
    :param duration_in_days:
    :type duration_in_days: int
    :param recurrence_count:
    :type recurrence_count: int
    """

    _validation = {
        'duration_in_days': {'maximum': 2147483647, 'minimum': -2147483648},
        'recurrence_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'recurrence_type': {'key': 'recurrenceType', 'type': 'str'},
        'recurrence_end_type': {'key': 'recurrenceEndType', 'type': 'str'},
        'duration_in_days': {'key': 'durationInDays', 'type': 'int'},
        'recurrence_count': {'key': 'recurrenceCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAccessReviewRecurrenceSettings, self).__init__(**kwargs)
        self.recurrence_type = kwargs.get('recurrence_type', None)
        self.recurrence_end_type = kwargs.get('recurrence_end_type', None)
        self.duration_in_days = kwargs.get('duration_in_days', None)
        self.recurrence_count = kwargs.get('recurrence_count', None)


class MicrosoftGraphAccessReviewReviewer(MicrosoftGraphEntity):
    """accessReviewReviewer.

    :param id: Read-only.
    :type id: str
    :param display_name:
    :type display_name: str
    :param user_principal_name:
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAccessReviewReviewer, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class MicrosoftGraphAutoReviewSettings(msrest.serialization.Model):
    """autoReviewSettings.

    :param not_reviewed_result:
    :type not_reviewed_result: str
    """

    _attribute_map = {
        'not_reviewed_result': {'key': 'notReviewedResult', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAutoReviewSettings, self).__init__(**kwargs)
        self.not_reviewed_result = kwargs.get('not_reviewed_result', None)


class MicrosoftGraphBusinessFlowTemplate(MicrosoftGraphEntity):
    """businessFlowTemplate.

    :param id: Read-only.
    :type id: str
    :param display_name:
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphBusinessFlowTemplate, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)


class MicrosoftGraphIdentity(msrest.serialization.Model):
    """identity.

    :param id: Unique identifier for the identity.
    :type id: str
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphIdentity, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.display_name = kwargs.get('display_name', None)


class MicrosoftGraphProgram(MicrosoftGraphEntity):
    """program.

    :param id: Read-only.
    :type id: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param controls:
    :type controls: list[~identity_access_review.models.MicrosoftGraphProgramControl]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'controls': {'key': 'controls', 'type': '[MicrosoftGraphProgramControl]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphProgram, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.controls = kwargs.get('controls', None)


class MicrosoftGraphProgramControl(MicrosoftGraphEntity):
    """programControl.

    :param id: Read-only.
    :type id: str
    :param control_id:
    :type control_id: str
    :param program_id:
    :type program_id: str
    :param control_type_id:
    :type control_type_id: str
    :param display_name:
    :type display_name: str
    :param status:
    :type status: str
    :param owner: userIdentity.
    :type owner: ~identity_access_review.models.MicrosoftGraphUserIdentity
    :param resource: programResource.
    :type resource: ~identity_access_review.models.MicrosoftGraphProgramResource
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param program: program.
    :type program: ~identity_access_review.models.MicrosoftGraphProgram
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'control_id': {'key': 'controlId', 'type': 'str'},
        'program_id': {'key': 'programId', 'type': 'str'},
        'control_type_id': {'key': 'controlTypeId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'owner': {'key': 'owner', 'type': 'MicrosoftGraphUserIdentity'},
        'resource': {'key': 'resource', 'type': 'MicrosoftGraphProgramResource'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'program': {'key': 'program', 'type': 'MicrosoftGraphProgram'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphProgramControl, self).__init__(**kwargs)
        self.control_id = kwargs.get('control_id', None)
        self.program_id = kwargs.get('program_id', None)
        self.control_type_id = kwargs.get('control_type_id', None)
        self.display_name = kwargs.get('display_name', None)
        self.status = kwargs.get('status', None)
        self.owner = kwargs.get('owner', None)
        self.resource = kwargs.get('resource', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.program = kwargs.get('program', None)


class MicrosoftGraphProgramControlType(MicrosoftGraphEntity):
    """programControlType.

    :param id: Read-only.
    :type id: str
    :param control_type_group_id:
    :type control_type_group_id: str
    :param display_name:
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'control_type_group_id': {'key': 'controlTypeGroupId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphProgramControlType, self).__init__(**kwargs)
        self.control_type_group_id = kwargs.get('control_type_group_id', None)
        self.display_name = kwargs.get('display_name', None)


class MicrosoftGraphProgramResource(MicrosoftGraphIdentity):
    """programResource.

    :param id: Unique identifier for the identity.
    :type id: str
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    :param type:
    :type type: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphProgramResource, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)


class MicrosoftGraphUserIdentity(MicrosoftGraphIdentity):
    """userIdentity.

    :param id: Unique identifier for the identity.
    :type id: str
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    :param ip_address: Indicates the client IP address used by user performing the activity (audit
     log only).
    :type ip_address: str
    :param user_principal_name: The userPrincipalName attribute of the user.
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUserIdentity, self).__init__(**kwargs)
        self.ip_address = kwargs.get('ip_address', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~identity_access_review.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = kwargs['error']


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~identity_access_review.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)
