# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class PolicyPolicyRootOperations(object):
    """PolicyPolicyRootOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~identity_policies.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def get_policy_root(
        self,
        select=None,  # type: Optional[List[Union[str, "models.Get0ItemsItem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get1ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphPolicyRoot"
        """Get policies.

        Get policies.

        :param select: Select properties to be returned.
        :type select: list[str or ~identity_policies.models.Get0ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~identity_policies.models.Get1ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPolicyRoot, or the result of cls(response)
        :rtype: ~identity_policies.models.MicrosoftGraphPolicyRoot
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPolicyRoot"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_policy_root.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPolicyRoot', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_policy_root.metadata = {'url': '/policies'}  # type: ignore

    def update_policy_root(
        self,
        id=None,  # type: Optional[str]
        activity_based_timeout_policies=None,  # type: Optional[List["models.MicrosoftGraphStsPolicy"]]
        claims_mapping_policies=None,  # type: Optional[List["models.MicrosoftGraphStsPolicy"]]
        home_realm_discovery_policies=None,  # type: Optional[List["models.MicrosoftGraphStsPolicy"]]
        token_issuance_policies=None,  # type: Optional[List["models.MicrosoftGraphStsPolicy"]]
        token_lifetime_policies=None,  # type: Optional[List["models.MicrosoftGraphStsPolicy"]]
        identity_security_defaults_enforcement_policy=None,  # type: Optional["models.MicrosoftGraphIdentitySecurityDefaultsEnforcementPolicy"]
        conditional_access_policies=None,  # type: Optional[List["models.MicrosoftGraphConditionalAccessPolicy"]]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        is_enabled=None,  # type: Optional[bool]
        version=None,  # type: Optional[int]
        notify_reviewers=None,  # type: Optional[bool]
        reminders_enabled=None,  # type: Optional[bool]
        request_duration_in_days=None,  # type: Optional[int]
        reviewers=None,  # type: Optional[List["models.MicrosoftGraphAccessReviewScope"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update policies.

        Update policies.

        :param id: Read-only.
        :type id: str
        :param activity_based_timeout_policies:
        :type activity_based_timeout_policies: list[~identity_policies.models.MicrosoftGraphStsPolicy]
        :param claims_mapping_policies:
        :type claims_mapping_policies: list[~identity_policies.models.MicrosoftGraphStsPolicy]
        :param home_realm_discovery_policies:
        :type home_realm_discovery_policies: list[~identity_policies.models.MicrosoftGraphStsPolicy]
        :param token_issuance_policies:
        :type token_issuance_policies: list[~identity_policies.models.MicrosoftGraphStsPolicy]
        :param token_lifetime_policies:
        :type token_lifetime_policies: list[~identity_policies.models.MicrosoftGraphStsPolicy]
        :param identity_security_defaults_enforcement_policy: Represents an Azure Active Directory
         object. The directoryObject type is the base type for many other directory entity types.
        :type identity_security_defaults_enforcement_policy: ~identity_policies.models.MicrosoftGraphIdentitySecurityDefaultsEnforcementPolicy
        :param conditional_access_policies:
        :type conditional_access_policies: list[~identity_policies.models.MicrosoftGraphConditionalAccessPolicy]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param is_enabled:
        :type is_enabled: bool
        :param version:
        :type version: int
        :param notify_reviewers:
        :type notify_reviewers: bool
        :param reminders_enabled:
        :type reminders_enabled: bool
        :param request_duration_in_days:
        :type request_duration_in_days: int
        :param reviewers:
        :type reviewers: list[~identity_policies.models.MicrosoftGraphAccessReviewScope]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphPolicyRoot(id=id, activity_based_timeout_policies=activity_based_timeout_policies, claims_mapping_policies=claims_mapping_policies, home_realm_discovery_policies=home_realm_discovery_policies, token_issuance_policies=token_issuance_policies, token_lifetime_policies=token_lifetime_policies, identity_security_defaults_enforcement_policy=identity_security_defaults_enforcement_policy, conditional_access_policies=conditional_access_policies, id_admin_consent_request_policy_id=microsoft_graph_entity_id, is_enabled=is_enabled, version=version, notify_reviewers=notify_reviewers, reminders_enabled=reminders_enabled, request_duration_in_days=request_duration_in_days, reviewers=reviewers)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_policy_root.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphPolicyRoot')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_policy_root.metadata = {'url': '/policies'}  # type: ignore
