# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CollectionOfActivityBasedTimeoutPolicy(msrest.serialization.Model):
    """Collection of activityBasedTimeoutPolicy.

    :param value:
    :type value: list[~identity_policies.models.MicrosoftGraphStsPolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphStsPolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfActivityBasedTimeoutPolicy, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfClaimsMappingPolicy(msrest.serialization.Model):
    """Collection of claimsMappingPolicy.

    :param value:
    :type value: list[~identity_policies.models.MicrosoftGraphStsPolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphStsPolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfClaimsMappingPolicy, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfConditionalAccessPolicy(msrest.serialization.Model):
    """Collection of conditionalAccessPolicy.

    :param value:
    :type value: list[~identity_policies.models.MicrosoftGraphConditionalAccessPolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphConditionalAccessPolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfConditionalAccessPolicy, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfHomeRealmDiscoveryPolicy(msrest.serialization.Model):
    """Collection of homeRealmDiscoveryPolicy.

    :param value:
    :type value: list[~identity_policies.models.MicrosoftGraphStsPolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphStsPolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfHomeRealmDiscoveryPolicy, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfTokenIssuancePolicy(msrest.serialization.Model):
    """Collection of tokenIssuancePolicy.

    :param value:
    :type value: list[~identity_policies.models.MicrosoftGraphStsPolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphStsPolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfTokenIssuancePolicy, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfTokenLifetimePolicy(msrest.serialization.Model):
    """Collection of tokenLifetimePolicy.

    :param value:
    :type value: list[~identity_policies.models.MicrosoftGraphStsPolicy]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphStsPolicy]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfTokenLifetimePolicy, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class MicrosoftGraphAccessReviewScope(msrest.serialization.Model):
    """accessReviewScope.

    :param query:
    :type query: str
    :param query_type:
    :type query_type: str
    """

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'query_type': {'key': 'queryType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAccessReviewScope, self).__init__(**kwargs)
        self.query = kwargs.get('query', None)
        self.query_type = kwargs.get('query_type', None)


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class MicrosoftGraphDirectoryObject(MicrosoftGraphEntity):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDirectoryObject, self).__init__(**kwargs)
        self.deleted_date_time = kwargs.get('deleted_date_time', None)


class MicrosoftGraphPolicyBase(MicrosoftGraphDirectoryObject):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param description: Description for this policy.
    :type description: str
    :param display_name: Display name for this policy.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPolicyBase, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)


class MicrosoftGraphStsPolicy(MicrosoftGraphPolicyBase):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param description: Description for this policy.
    :type description: str
    :param display_name: Display name for this policy.
    :type display_name: str
    :param definition: A string collection containing a JSON string that defines the rules and
     settings for a policy. The syntax for the definition differs for each derived policy type.
     Required.
    :type definition: list[str]
    :param is_organization_default: If set to true, activates this policy. There can be many
     policies for the same policy type, but only one can be activated as the organization default.
     Optional, default value is false.
    :type is_organization_default: bool
    :param applies_to:
    :type applies_to: list[~identity_policies.models.MicrosoftGraphDirectoryObject]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'definition': {'key': 'definition', 'type': '[str]'},
        'is_organization_default': {'key': 'isOrganizationDefault', 'type': 'bool'},
        'applies_to': {'key': 'appliesTo', 'type': '[MicrosoftGraphDirectoryObject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphStsPolicy, self).__init__(**kwargs)
        self.definition = kwargs.get('definition', None)
        self.is_organization_default = kwargs.get('is_organization_default', None)
        self.applies_to = kwargs.get('applies_to', None)


class MicrosoftGraphActivityBasedTimeoutPolicy(MicrosoftGraphStsPolicy):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param description: Description for this policy.
    :type description: str
    :param display_name: Display name for this policy.
    :type display_name: str
    :param definition: A string collection containing a JSON string that defines the rules and
     settings for a policy. The syntax for the definition differs for each derived policy type.
     Required.
    :type definition: list[str]
    :param is_organization_default: If set to true, activates this policy. There can be many
     policies for the same policy type, but only one can be activated as the organization default.
     Optional, default value is false.
    :type is_organization_default: bool
    :param applies_to:
    :type applies_to: list[~identity_policies.models.MicrosoftGraphDirectoryObject]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'definition': {'key': 'definition', 'type': '[str]'},
        'is_organization_default': {'key': 'isOrganizationDefault', 'type': 'bool'},
        'applies_to': {'key': 'appliesTo', 'type': '[MicrosoftGraphDirectoryObject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphActivityBasedTimeoutPolicy, self).__init__(**kwargs)


class MicrosoftGraphAdminConsentRequestPolicy(MicrosoftGraphEntity):
    """adminConsentRequestPolicy.

    :param id: Read-only.
    :type id: str
    :param is_enabled:
    :type is_enabled: bool
    :param version:
    :type version: int
    :param notify_reviewers:
    :type notify_reviewers: bool
    :param reminders_enabled:
    :type reminders_enabled: bool
    :param request_duration_in_days:
    :type request_duration_in_days: int
    :param reviewers:
    :type reviewers: list[~identity_policies.models.MicrosoftGraphAccessReviewScope]
    """

    _validation = {
        'version': {'maximum': 2147483647, 'minimum': -2147483648},
        'request_duration_in_days': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'version': {'key': 'version', 'type': 'int'},
        'notify_reviewers': {'key': 'notifyReviewers', 'type': 'bool'},
        'reminders_enabled': {'key': 'remindersEnabled', 'type': 'bool'},
        'request_duration_in_days': {'key': 'requestDurationInDays', 'type': 'int'},
        'reviewers': {'key': 'reviewers', 'type': '[MicrosoftGraphAccessReviewScope]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAdminConsentRequestPolicy, self).__init__(**kwargs)
        self.is_enabled = kwargs.get('is_enabled', None)
        self.version = kwargs.get('version', None)
        self.notify_reviewers = kwargs.get('notify_reviewers', None)
        self.reminders_enabled = kwargs.get('reminders_enabled', None)
        self.request_duration_in_days = kwargs.get('request_duration_in_days', None)
        self.reviewers = kwargs.get('reviewers', None)


class MicrosoftGraphConditionalAccessSessionControl(msrest.serialization.Model):
    """conditionalAccessSessionControl.

    :param is_enabled:
    :type is_enabled: bool
    """

    _attribute_map = {
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConditionalAccessSessionControl, self).__init__(**kwargs)
        self.is_enabled = kwargs.get('is_enabled', None)


class MicrosoftGraphApplicationEnforcedRestrictionsSessionControl(MicrosoftGraphConditionalAccessSessionControl):
    """applicationEnforcedRestrictionsSessionControl.

    :param is_enabled:
    :type is_enabled: bool
    """

    _attribute_map = {
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphApplicationEnforcedRestrictionsSessionControl, self).__init__(**kwargs)


class MicrosoftGraphClaimsMappingPolicy(MicrosoftGraphStsPolicy):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param description: Description for this policy.
    :type description: str
    :param display_name: Display name for this policy.
    :type display_name: str
    :param definition: A string collection containing a JSON string that defines the rules and
     settings for a policy. The syntax for the definition differs for each derived policy type.
     Required.
    :type definition: list[str]
    :param is_organization_default: If set to true, activates this policy. There can be many
     policies for the same policy type, but only one can be activated as the organization default.
     Optional, default value is false.
    :type is_organization_default: bool
    :param applies_to:
    :type applies_to: list[~identity_policies.models.MicrosoftGraphDirectoryObject]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'definition': {'key': 'definition', 'type': '[str]'},
        'is_organization_default': {'key': 'isOrganizationDefault', 'type': 'bool'},
        'applies_to': {'key': 'appliesTo', 'type': '[MicrosoftGraphDirectoryObject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphClaimsMappingPolicy, self).__init__(**kwargs)


class MicrosoftGraphCloudAppSecuritySessionControl(MicrosoftGraphConditionalAccessSessionControl):
    """cloudAppSecuritySessionControl.

    :param is_enabled:
    :type is_enabled: bool
    :param cloud_app_security_type: cloudAppSecuritySessionControlType. Possible values include:
     "mcasConfigured", "monitorOnly", "blockDownloads".
    :type cloud_app_security_type: str or
     ~identity_policies.models.MicrosoftGraphCloudAppSecuritySessionControlType
    """

    _attribute_map = {
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'cloud_app_security_type': {'key': 'cloudAppSecurityType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphCloudAppSecuritySessionControl, self).__init__(**kwargs)
        self.cloud_app_security_type = kwargs.get('cloud_app_security_type', None)


class MicrosoftGraphConditionalAccessApplications(msrest.serialization.Model):
    """conditionalAccessApplications.

    :param include_applications:
    :type include_applications: list[str]
    :param exclude_applications:
    :type exclude_applications: list[str]
    :param include_user_actions:
    :type include_user_actions: list[str]
    """

    _attribute_map = {
        'include_applications': {'key': 'includeApplications', 'type': '[str]'},
        'exclude_applications': {'key': 'excludeApplications', 'type': '[str]'},
        'include_user_actions': {'key': 'includeUserActions', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConditionalAccessApplications, self).__init__(**kwargs)
        self.include_applications = kwargs.get('include_applications', None)
        self.exclude_applications = kwargs.get('exclude_applications', None)
        self.include_user_actions = kwargs.get('include_user_actions', None)


class MicrosoftGraphConditionalAccessDevices(msrest.serialization.Model):
    """conditionalAccessDevices.

    :param include_device_states:
    :type include_device_states: list[str]
    :param exclude_device_states:
    :type exclude_device_states: list[str]
    """

    _attribute_map = {
        'include_device_states': {'key': 'includeDeviceStates', 'type': '[str]'},
        'exclude_device_states': {'key': 'excludeDeviceStates', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConditionalAccessDevices, self).__init__(**kwargs)
        self.include_device_states = kwargs.get('include_device_states', None)
        self.exclude_device_states = kwargs.get('exclude_device_states', None)


class MicrosoftGraphConditionalAccessDeviceStates(msrest.serialization.Model):
    """conditionalAccessDeviceStates.

    :param include_states:
    :type include_states: list[str]
    :param exclude_states:
    :type exclude_states: list[str]
    """

    _attribute_map = {
        'include_states': {'key': 'includeStates', 'type': '[str]'},
        'exclude_states': {'key': 'excludeStates', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConditionalAccessDeviceStates, self).__init__(**kwargs)
        self.include_states = kwargs.get('include_states', None)
        self.exclude_states = kwargs.get('exclude_states', None)


class MicrosoftGraphConditionalAccessGrantControls(msrest.serialization.Model):
    """conditionalAccessGrantControls.

    :param operator:
    :type operator: str
    :param built_in_controls:
    :type built_in_controls: list[str or
     ~identity_policies.models.MicrosoftGraphConditionalAccessGrantControl]
    :param custom_authentication_factors:
    :type custom_authentication_factors: list[str]
    :param terms_of_use:
    :type terms_of_use: list[str]
    """

    _attribute_map = {
        'operator': {'key': 'operator', 'type': 'str'},
        'built_in_controls': {'key': 'builtInControls', 'type': '[str]'},
        'custom_authentication_factors': {'key': 'customAuthenticationFactors', 'type': '[str]'},
        'terms_of_use': {'key': 'termsOfUse', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConditionalAccessGrantControls, self).__init__(**kwargs)
        self.operator = kwargs.get('operator', None)
        self.built_in_controls = kwargs.get('built_in_controls', None)
        self.custom_authentication_factors = kwargs.get('custom_authentication_factors', None)
        self.terms_of_use = kwargs.get('terms_of_use', None)


class MicrosoftGraphConditionalAccessLocations(msrest.serialization.Model):
    """conditionalAccessLocations.

    :param include_locations:
    :type include_locations: list[str]
    :param exclude_locations:
    :type exclude_locations: list[str]
    """

    _attribute_map = {
        'include_locations': {'key': 'includeLocations', 'type': '[str]'},
        'exclude_locations': {'key': 'excludeLocations', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConditionalAccessLocations, self).__init__(**kwargs)
        self.include_locations = kwargs.get('include_locations', None)
        self.exclude_locations = kwargs.get('exclude_locations', None)


class MicrosoftGraphConditionalAccessPlatforms(msrest.serialization.Model):
    """conditionalAccessPlatforms.

    :param include_platforms:
    :type include_platforms: list[str or
     ~identity_policies.models.MicrosoftGraphConditionalAccessDevicePlatform]
    :param exclude_platforms:
    :type exclude_platforms: list[str or
     ~identity_policies.models.MicrosoftGraphConditionalAccessDevicePlatform]
    """

    _attribute_map = {
        'include_platforms': {'key': 'includePlatforms', 'type': '[str]'},
        'exclude_platforms': {'key': 'excludePlatforms', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConditionalAccessPlatforms, self).__init__(**kwargs)
        self.include_platforms = kwargs.get('include_platforms', None)
        self.exclude_platforms = kwargs.get('exclude_platforms', None)


class MicrosoftGraphConditionalAccessPolicy(MicrosoftGraphEntity):
    """conditionalAccessPolicy.

    :param id: Read-only.
    :type id: str
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param modified_date_time:
    :type modified_date_time: ~datetime.datetime
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param state: conditionalAccessPolicyState. Possible values include: "enabled", "disabled",
     "enabledForReportingButNotEnforced".
    :type state: str or ~identity_policies.models.MicrosoftGraphConditionalAccessPolicyState
    :param grant_controls: conditionalAccessGrantControls.
    :type grant_controls: ~identity_policies.models.MicrosoftGraphConditionalAccessGrantControls
    :param cloud_app_security: cloudAppSecuritySessionControl.
    :type cloud_app_security:
     ~identity_policies.models.MicrosoftGraphCloudAppSecuritySessionControl
    :param sign_in_frequency: signInFrequencySessionControl.
    :type sign_in_frequency: ~identity_policies.models.MicrosoftGraphSignInFrequencySessionControl
    :param persistent_browser: persistentBrowserSessionControl.
    :type persistent_browser:
     ~identity_policies.models.MicrosoftGraphPersistentBrowserSessionControl
    :param is_enabled:
    :type is_enabled: bool
    :param applications: conditionalAccessApplications.
    :type applications: ~identity_policies.models.MicrosoftGraphConditionalAccessApplications
    :param users: conditionalAccessUsers.
    :type users: ~identity_policies.models.MicrosoftGraphConditionalAccessUsers
    :param sign_in_risk_levels:
    :type sign_in_risk_levels: list[str or ~identity_policies.models.MicrosoftGraphRiskLevel]
    :param platforms: conditionalAccessPlatforms.
    :type platforms: ~identity_policies.models.MicrosoftGraphConditionalAccessPlatforms
    :param locations: conditionalAccessLocations.
    :type locations: ~identity_policies.models.MicrosoftGraphConditionalAccessLocations
    :param client_app_types:
    :type client_app_types: list[str or
     ~identity_policies.models.MicrosoftGraphConditionalAccessClientApp]
    :param device_states: conditionalAccessDeviceStates.
    :type device_states: ~identity_policies.models.MicrosoftGraphConditionalAccessDeviceStates
    :param devices: conditionalAccessDevices.
    :type devices: ~identity_policies.models.MicrosoftGraphConditionalAccessDevices
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'grant_controls': {'key': 'grantControls', 'type': 'MicrosoftGraphConditionalAccessGrantControls'},
        'cloud_app_security': {'key': 'sessionControls.cloudAppSecurity', 'type': 'MicrosoftGraphCloudAppSecuritySessionControl'},
        'sign_in_frequency': {'key': 'sessionControls.signInFrequency', 'type': 'MicrosoftGraphSignInFrequencySessionControl'},
        'persistent_browser': {'key': 'sessionControls.persistentBrowser', 'type': 'MicrosoftGraphPersistentBrowserSessionControl'},
        'is_enabled': {'key': 'sessionControls.applicationEnforcedRestrictions.isEnabled', 'type': 'bool'},
        'applications': {'key': 'conditions.applications', 'type': 'MicrosoftGraphConditionalAccessApplications'},
        'users': {'key': 'conditions.users', 'type': 'MicrosoftGraphConditionalAccessUsers'},
        'sign_in_risk_levels': {'key': 'conditions.signInRiskLevels', 'type': '[str]'},
        'platforms': {'key': 'conditions.platforms', 'type': 'MicrosoftGraphConditionalAccessPlatforms'},
        'locations': {'key': 'conditions.locations', 'type': 'MicrosoftGraphConditionalAccessLocations'},
        'client_app_types': {'key': 'conditions.clientAppTypes', 'type': '[str]'},
        'device_states': {'key': 'conditions.deviceStates', 'type': 'MicrosoftGraphConditionalAccessDeviceStates'},
        'devices': {'key': 'conditions.devices', 'type': 'MicrosoftGraphConditionalAccessDevices'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConditionalAccessPolicy, self).__init__(**kwargs)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.modified_date_time = kwargs.get('modified_date_time', None)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.state = kwargs.get('state', None)
        self.grant_controls = kwargs.get('grant_controls', None)
        self.cloud_app_security = kwargs.get('cloud_app_security', None)
        self.sign_in_frequency = kwargs.get('sign_in_frequency', None)
        self.persistent_browser = kwargs.get('persistent_browser', None)
        self.is_enabled = kwargs.get('is_enabled', None)
        self.applications = kwargs.get('applications', None)
        self.users = kwargs.get('users', None)
        self.sign_in_risk_levels = kwargs.get('sign_in_risk_levels', None)
        self.platforms = kwargs.get('platforms', None)
        self.locations = kwargs.get('locations', None)
        self.client_app_types = kwargs.get('client_app_types', None)
        self.device_states = kwargs.get('device_states', None)
        self.devices = kwargs.get('devices', None)


class MicrosoftGraphConditionalAccessUsers(msrest.serialization.Model):
    """conditionalAccessUsers.

    :param include_users:
    :type include_users: list[str]
    :param exclude_users:
    :type exclude_users: list[str]
    :param include_groups:
    :type include_groups: list[str]
    :param exclude_groups:
    :type exclude_groups: list[str]
    :param include_roles:
    :type include_roles: list[str]
    :param exclude_roles:
    :type exclude_roles: list[str]
    """

    _attribute_map = {
        'include_users': {'key': 'includeUsers', 'type': '[str]'},
        'exclude_users': {'key': 'excludeUsers', 'type': '[str]'},
        'include_groups': {'key': 'includeGroups', 'type': '[str]'},
        'exclude_groups': {'key': 'excludeGroups', 'type': '[str]'},
        'include_roles': {'key': 'includeRoles', 'type': '[str]'},
        'exclude_roles': {'key': 'excludeRoles', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphConditionalAccessUsers, self).__init__(**kwargs)
        self.include_users = kwargs.get('include_users', None)
        self.exclude_users = kwargs.get('exclude_users', None)
        self.include_groups = kwargs.get('include_groups', None)
        self.exclude_groups = kwargs.get('exclude_groups', None)
        self.include_roles = kwargs.get('include_roles', None)
        self.exclude_roles = kwargs.get('exclude_roles', None)


class MicrosoftGraphHomeRealmDiscoveryPolicy(MicrosoftGraphStsPolicy):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param description: Description for this policy.
    :type description: str
    :param display_name: Display name for this policy.
    :type display_name: str
    :param definition: A string collection containing a JSON string that defines the rules and
     settings for a policy. The syntax for the definition differs for each derived policy type.
     Required.
    :type definition: list[str]
    :param is_organization_default: If set to true, activates this policy. There can be many
     policies for the same policy type, but only one can be activated as the organization default.
     Optional, default value is false.
    :type is_organization_default: bool
    :param applies_to:
    :type applies_to: list[~identity_policies.models.MicrosoftGraphDirectoryObject]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'definition': {'key': 'definition', 'type': '[str]'},
        'is_organization_default': {'key': 'isOrganizationDefault', 'type': 'bool'},
        'applies_to': {'key': 'appliesTo', 'type': '[MicrosoftGraphDirectoryObject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphHomeRealmDiscoveryPolicy, self).__init__(**kwargs)


class MicrosoftGraphIdentitySecurityDefaultsEnforcementPolicy(MicrosoftGraphPolicyBase):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param description: Description for this policy.
    :type description: str
    :param display_name: Display name for this policy.
    :type display_name: str
    :param is_enabled:
    :type is_enabled: bool
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphIdentitySecurityDefaultsEnforcementPolicy, self).__init__(**kwargs)
        self.is_enabled = kwargs.get('is_enabled', None)


class MicrosoftGraphPersistentBrowserSessionControl(MicrosoftGraphConditionalAccessSessionControl):
    """persistentBrowserSessionControl.

    :param is_enabled:
    :type is_enabled: bool
    :param mode: persistentBrowserSessionMode. Possible values include: "always", "never".
    :type mode: str or ~identity_policies.models.MicrosoftGraphPersistentBrowserSessionMode
    """

    _attribute_map = {
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'mode': {'key': 'mode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPersistentBrowserSessionControl, self).__init__(**kwargs)
        self.mode = kwargs.get('mode', None)


class MicrosoftGraphPolicyRoot(MicrosoftGraphEntity):
    """policyRoot.

    :param id: Read-only.
    :type id: str
    :param activity_based_timeout_policies:
    :type activity_based_timeout_policies: list[~identity_policies.models.MicrosoftGraphStsPolicy]
    :param claims_mapping_policies:
    :type claims_mapping_policies: list[~identity_policies.models.MicrosoftGraphStsPolicy]
    :param home_realm_discovery_policies:
    :type home_realm_discovery_policies: list[~identity_policies.models.MicrosoftGraphStsPolicy]
    :param token_issuance_policies:
    :type token_issuance_policies: list[~identity_policies.models.MicrosoftGraphStsPolicy]
    :param token_lifetime_policies:
    :type token_lifetime_policies: list[~identity_policies.models.MicrosoftGraphStsPolicy]
    :param identity_security_defaults_enforcement_policy: Represents an Azure Active Directory
     object. The directoryObject type is the base type for many other directory entity types.
    :type identity_security_defaults_enforcement_policy:
     ~identity_policies.models.MicrosoftGraphIdentitySecurityDefaultsEnforcementPolicy
    :param conditional_access_policies:
    :type conditional_access_policies:
     list[~identity_policies.models.MicrosoftGraphConditionalAccessPolicy]
    :param id_admin_consent_request_policy_id: Read-only.
    :type id_admin_consent_request_policy_id: str
    :param is_enabled:
    :type is_enabled: bool
    :param version:
    :type version: int
    :param notify_reviewers:
    :type notify_reviewers: bool
    :param reminders_enabled:
    :type reminders_enabled: bool
    :param request_duration_in_days:
    :type request_duration_in_days: int
    :param reviewers:
    :type reviewers: list[~identity_policies.models.MicrosoftGraphAccessReviewScope]
    """

    _validation = {
        'version': {'maximum': 2147483647, 'minimum': -2147483648},
        'request_duration_in_days': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'activity_based_timeout_policies': {'key': 'activityBasedTimeoutPolicies', 'type': '[MicrosoftGraphStsPolicy]'},
        'claims_mapping_policies': {'key': 'claimsMappingPolicies', 'type': '[MicrosoftGraphStsPolicy]'},
        'home_realm_discovery_policies': {'key': 'homeRealmDiscoveryPolicies', 'type': '[MicrosoftGraphStsPolicy]'},
        'token_issuance_policies': {'key': 'tokenIssuancePolicies', 'type': '[MicrosoftGraphStsPolicy]'},
        'token_lifetime_policies': {'key': 'tokenLifetimePolicies', 'type': '[MicrosoftGraphStsPolicy]'},
        'identity_security_defaults_enforcement_policy': {'key': 'identitySecurityDefaultsEnforcementPolicy', 'type': 'MicrosoftGraphIdentitySecurityDefaultsEnforcementPolicy'},
        'conditional_access_policies': {'key': 'conditionalAccessPolicies', 'type': '[MicrosoftGraphConditionalAccessPolicy]'},
        'id_admin_consent_request_policy_id': {'key': 'adminConsentRequestPolicy.id', 'type': 'str'},
        'is_enabled': {'key': 'adminConsentRequestPolicy.isEnabled', 'type': 'bool'},
        'version': {'key': 'adminConsentRequestPolicy.version', 'type': 'int'},
        'notify_reviewers': {'key': 'adminConsentRequestPolicy.notifyReviewers', 'type': 'bool'},
        'reminders_enabled': {'key': 'adminConsentRequestPolicy.remindersEnabled', 'type': 'bool'},
        'request_duration_in_days': {'key': 'adminConsentRequestPolicy.requestDurationInDays', 'type': 'int'},
        'reviewers': {'key': 'adminConsentRequestPolicy.reviewers', 'type': '[MicrosoftGraphAccessReviewScope]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPolicyRoot, self).__init__(**kwargs)
        self.activity_based_timeout_policies = kwargs.get('activity_based_timeout_policies', None)
        self.claims_mapping_policies = kwargs.get('claims_mapping_policies', None)
        self.home_realm_discovery_policies = kwargs.get('home_realm_discovery_policies', None)
        self.token_issuance_policies = kwargs.get('token_issuance_policies', None)
        self.token_lifetime_policies = kwargs.get('token_lifetime_policies', None)
        self.identity_security_defaults_enforcement_policy = kwargs.get('identity_security_defaults_enforcement_policy', None)
        self.conditional_access_policies = kwargs.get('conditional_access_policies', None)
        self.id_admin_consent_request_policy_id = kwargs.get('id_admin_consent_request_policy_id', None)
        self.is_enabled = kwargs.get('is_enabled', None)
        self.version = kwargs.get('version', None)
        self.notify_reviewers = kwargs.get('notify_reviewers', None)
        self.reminders_enabled = kwargs.get('reminders_enabled', None)
        self.request_duration_in_days = kwargs.get('request_duration_in_days', None)
        self.reviewers = kwargs.get('reviewers', None)


class MicrosoftGraphSignInFrequencySessionControl(MicrosoftGraphConditionalAccessSessionControl):
    """signInFrequencySessionControl.

    :param is_enabled:
    :type is_enabled: bool
    :param value:
    :type value: int
    :param type: signinFrequencyType. Possible values include: "days", "hours".
    :type type: str or ~identity_policies.models.MicrosoftGraphSigninFrequencyType
    """

    _validation = {
        'value': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'value': {'key': 'value', 'type': 'int'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSignInFrequencySessionControl, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphTokenIssuancePolicy(MicrosoftGraphStsPolicy):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param description: Description for this policy.
    :type description: str
    :param display_name: Display name for this policy.
    :type display_name: str
    :param definition: A string collection containing a JSON string that defines the rules and
     settings for a policy. The syntax for the definition differs for each derived policy type.
     Required.
    :type definition: list[str]
    :param is_organization_default: If set to true, activates this policy. There can be many
     policies for the same policy type, but only one can be activated as the organization default.
     Optional, default value is false.
    :type is_organization_default: bool
    :param applies_to:
    :type applies_to: list[~identity_policies.models.MicrosoftGraphDirectoryObject]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'definition': {'key': 'definition', 'type': '[str]'},
        'is_organization_default': {'key': 'isOrganizationDefault', 'type': 'bool'},
        'applies_to': {'key': 'appliesTo', 'type': '[MicrosoftGraphDirectoryObject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTokenIssuancePolicy, self).__init__(**kwargs)


class MicrosoftGraphTokenLifetimePolicy(MicrosoftGraphStsPolicy):
    """Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.

    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param id: Read-only.
    :type id: str
    :param deleted_date_time:
    :type deleted_date_time: ~datetime.datetime
    :param description: Description for this policy.
    :type description: str
    :param display_name: Display name for this policy.
    :type display_name: str
    :param definition: A string collection containing a JSON string that defines the rules and
     settings for a policy. The syntax for the definition differs for each derived policy type.
     Required.
    :type definition: list[str]
    :param is_organization_default: If set to true, activates this policy. There can be many
     policies for the same policy type, but only one can be activated as the organization default.
     Optional, default value is false.
    :type is_organization_default: bool
    :param applies_to:
    :type applies_to: list[~identity_policies.models.MicrosoftGraphDirectoryObject]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'id': {'key': 'id', 'type': 'str'},
        'deleted_date_time': {'key': 'deletedDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'definition': {'key': 'definition', 'type': '[str]'},
        'is_organization_default': {'key': 'isOrganizationDefault', 'type': 'bool'},
        'applies_to': {'key': 'appliesTo', 'type': '[MicrosoftGraphDirectoryObject]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTokenLifetimePolicy, self).__init__(**kwargs)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~identity_policies.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = kwargs['error']


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~identity_policies.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)
