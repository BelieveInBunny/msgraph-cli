# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_policies.action import (
    AddActivityBasedTimeoutPolicies,
    AddClaimsMappingPolicies,
    AddHomeRealmDiscoveryPolicies,
    AddTokenIssuancePolicies,
    AddTokenLifetimePolicies,
    AddIdentitySecurityDefaultsEnforcementPolicy,
    AddAdminConsentRequestPolicyReviewers,
    AddAppliesTo,
    AddGrantControls,
    AddSessionControlsCloudAppSecurity,
    AddSessionControlsSignInFrequency,
    AddSessionControlsPersistentBrowser,
    AddConditionsApplications,
    AddConditionsUsers,
    AddConditionsPlatforms,
    AddConditionsLocations,
    AddConditionsDeviceStates,
    AddConditionsDevices
)


def load_arguments(self, _):

    with self.argument_context('policies policy-policy-root update') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('activity_based_timeout_policies', action=AddActivityBasedTimeoutPolicies, nargs='*', help='')
        c.argument('claims_mapping_policies', action=AddClaimsMappingPolicies, nargs='*', help='')
        c.argument('home_realm_discovery_policies', action=AddHomeRealmDiscoveryPolicies, nargs='*', help='')
        c.argument('token_issuance_policies', action=AddTokenIssuancePolicies, nargs='*', help='')
        c.argument('token_lifetime_policies', action=AddTokenLifetimePolicies, nargs='*', help='')
        c.argument('identity_security_defaults_enforcement_policy',
                   action=AddIdentitySecurityDefaultsEnforcementPolicy, nargs='*', help='Represents an Azure Active '
                   'Directory object. The directoryObject type is the base type for many other directory entity types.')
        c.argument('conditional_access_policies', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('admin_consent_request_policy_id', help='Read-only.')
        c.argument('admin_consent_request_policy_is_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('admin_consent_request_policy_version', help='')
        c.argument('admin_consent_request_policy_notify_reviewers', arg_type=get_three_state_flag(), help='')
        c.argument('admin_consent_request_policy_reminders_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('admin_consent_request_policy_request_duration_in_days', help='')
        c.argument('admin_consent_request_policy_reviewers', action=AddAdminConsentRequestPolicyReviewers, nargs='*',
                   help='')

    with self.argument_context('policies policy-policy-root get-policy-root') as c:
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('policies policy update') as c:
        c.argument('activity_based_timeout_policy_id', help='key: activityBasedTimeoutPolicy-id of '
                   'activityBasedTimeoutPolicy')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', help='Description for this policy.')
        c.argument('display_name', help='Display name for this policy.')
        c.argument('definition', nargs='*', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='*', help='')
        c.argument('claims_mapping_policy_id', help='key: claimsMappingPolicy-id of claimsMappingPolicy')
        c.argument('conditional_access_policy_id', help='key: conditionalAccessPolicy-id of conditionalAccessPolicy')
        c.argument('created_date_time', help='')
        c.argument('modified_date_time', help='')
        c.argument('state', arg_type=get_enum_type(['enabled', 'disabled', 'enabledForReportingButNotEnforced']),
                   help='conditionalAccessPolicyState')
        c.argument('grant_controls', action=AddGrantControls, nargs='*', help='conditionalAccessGrantControls')
        c.argument('session_controls_cloud_app_security', action=AddSessionControlsCloudAppSecurity, nargs='*', help=''
                   'cloudAppSecuritySessionControl')
        c.argument('session_controls_sign_in_frequency', action=AddSessionControlsSignInFrequency, nargs='*', help=''
                   'signInFrequencySessionControl')
        c.argument('session_controls_persistent_browser', action=AddSessionControlsPersistentBrowser, nargs='*', help=
                   'persistentBrowserSessionControl')
        c.argument('session_controls_application_enforced_restrictions_is_enabled', arg_type=get_three_state_flag(),
                   help='')
        c.argument('conditions_applications', action=AddConditionsApplications, nargs='*', help=''
                   'conditionalAccessApplications')
        c.argument('conditions_users', action=AddConditionsUsers, nargs='*', help='conditionalAccessUsers')
        c.argument('conditions_sign_in_risk_levels', nargs='*', help='')
        c.argument('conditions_platforms', action=AddConditionsPlatforms, nargs='*',
                   help='conditionalAccessPlatforms')
        c.argument('conditions_locations', action=AddConditionsLocations, nargs='*',
                   help='conditionalAccessLocations')
        c.argument('conditions_client_app_types', nargs='*', help='')
        c.argument('conditions_device_states', action=AddConditionsDeviceStates, nargs='*', help=''
                   'conditionalAccessDeviceStates')
        c.argument('conditions_devices', action=AddConditionsDevices, nargs='*', help='conditionalAccessDevices')
        c.argument('home_realm_discovery_policy_id', help='key: homeRealmDiscoveryPolicy-id of '
                   'homeRealmDiscoveryPolicy')
        c.argument('token_issuance_policy_id', help='key: tokenIssuancePolicy-id of tokenIssuancePolicy')
        c.argument('token_lifetime_policy_id', help='key: tokenLifetimePolicy-id of tokenLifetimePolicy')
        c.argument('is_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('version', help='')
        c.argument('notify_reviewers', arg_type=get_three_state_flag(), help='')
        c.argument('reminders_enabled', arg_type=get_three_state_flag(), help='')
        c.argument('request_duration_in_days', help='')
        c.argument('reviewers', action=AddAdminConsentRequestPolicyReviewers, nargs='*', help='')

    with self.argument_context('policies policy create-activity-based-timeout-policy') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', help='Description for this policy.')
        c.argument('display_name', help='Display name for this policy.')
        c.argument('definition', nargs='*', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='*', help='')

    with self.argument_context('policies policy create-claim-mapping-policy') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', help='Description for this policy.')
        c.argument('display_name', help='Display name for this policy.')
        c.argument('definition', nargs='*', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='*', help='')

    with self.argument_context('policies policy create-conditional-access-policy') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('created_date_time', help='')
        c.argument('modified_date_time', help='')
        c.argument('display_name', help='')
        c.argument('description', help='')
        c.argument('state', arg_type=get_enum_type(['enabled', 'disabled', 'enabledForReportingButNotEnforced']),
                   help='conditionalAccessPolicyState')
        c.argument('grant_controls', action=AddGrantControls, nargs='*', help='conditionalAccessGrantControls')
        c.argument('session_controls_cloud_app_security', action=AddSessionControlsCloudAppSecurity, nargs='*', help=''
                   'cloudAppSecuritySessionControl')
        c.argument('session_controls_sign_in_frequency', action=AddSessionControlsSignInFrequency, nargs='*', help=''
                   'signInFrequencySessionControl')
        c.argument('session_controls_persistent_browser', action=AddSessionControlsPersistentBrowser, nargs='*', help=
                   'persistentBrowserSessionControl')
        c.argument('session_controls_application_enforced_restrictions_is_enabled', arg_type=get_three_state_flag(),
                   help='')
        c.argument('conditions_applications', action=AddConditionsApplications, nargs='*', help=''
                   'conditionalAccessApplications')
        c.argument('conditions_users', action=AddConditionsUsers, nargs='*', help='conditionalAccessUsers')
        c.argument('conditions_sign_in_risk_levels', nargs='*', help='')
        c.argument('conditions_platforms', action=AddConditionsPlatforms, nargs='*',
                   help='conditionalAccessPlatforms')
        c.argument('conditions_locations', action=AddConditionsLocations, nargs='*',
                   help='conditionalAccessLocations')
        c.argument('conditions_client_app_types', nargs='*', help='')
        c.argument('conditions_device_states', action=AddConditionsDeviceStates, nargs='*', help=''
                   'conditionalAccessDeviceStates')
        c.argument('conditions_devices', action=AddConditionsDevices, nargs='*', help='conditionalAccessDevices')

    with self.argument_context('policies policy create-home-realm-discovery-policy') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', help='Description for this policy.')
        c.argument('display_name', help='Display name for this policy.')
        c.argument('definition', nargs='*', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='*', help='')

    with self.argument_context('policies policy create-token-issuance-policy') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', help='Description for this policy.')
        c.argument('display_name', help='Display name for this policy.')
        c.argument('definition', nargs='*', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='*', help='')

    with self.argument_context('policies policy create-token-lifetime-policy') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('description', help='Description for this policy.')
        c.argument('display_name', help='Display name for this policy.')
        c.argument('definition', nargs='*', help='A string collection containing a JSON string that defines the rules '
                   'and settings for a policy. The syntax for the definition differs for each derived policy type. '
                   'Required.')
        c.argument('is_organization_default', arg_type=get_three_state_flag(), help='If set to true, activates this '
                   'policy. There can be many policies for the same policy type, but only one can be activated as the '
                   'organization default. Optional, default value is false.')
        c.argument('applies_to', action=AddAppliesTo, nargs='*', help='')

    with self.argument_context('policies policy get-activity-based-timeout-policy') as c:
        c.argument('activity_based_timeout_policy_id', help='key: activityBasedTimeoutPolicy-id of '
                   'activityBasedTimeoutPolicy')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('policies policy get-admin-consent-request-policy') as c:
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('policies policy get-claim-mapping-policy') as c:
        c.argument('claims_mapping_policy_id', help='key: claimsMappingPolicy-id of claimsMappingPolicy')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('policies policy get-conditional-access-policy') as c:
        c.argument('conditional_access_policy_id', help='key: conditionalAccessPolicy-id of conditionalAccessPolicy')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('policies policy get-home-realm-discovery-policy') as c:
        c.argument('home_realm_discovery_policy_id', help='key: homeRealmDiscoveryPolicy-id of '
                   'homeRealmDiscoveryPolicy')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('policies policy get-identity-security-default-enforcement-policy') as c:
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('policies policy get-token-issuance-policy') as c:
        c.argument('token_issuance_policy_id', help='key: tokenIssuancePolicy-id of tokenIssuancePolicy')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('policies policy get-token-lifetime-policy') as c:
        c.argument('token_lifetime_policy_id', help='key: tokenLifetimePolicy-id of tokenLifetimePolicy')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('policies policy list-activity-based-timeout-policy') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('policies policy list-claim-mapping-policy') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('policies policy list-conditional-access-policy') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('policies policy list-home-realm-discovery-policy') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('policies policy list-token-issuance-policy') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('policies policy list-token-lifetime-policy') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')
