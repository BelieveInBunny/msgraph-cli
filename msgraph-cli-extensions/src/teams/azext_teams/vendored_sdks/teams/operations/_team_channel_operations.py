# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class TeamChannelOperations(object):
    """TeamChannelOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~teams.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def get_file_folder(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum72"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum73"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphDriveItem"
        """Get filesFolder from teams.

        Get filesFolder from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum72]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams.models.Enum73]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDriveItem, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphDriveItem
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDriveItem"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_file_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDriveItem', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_file_folder.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/filesFolder'}  # type: ignore

    def update_file_folder(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        body,  # type: "models.MicrosoftGraphDriveItem"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property filesFolder in teams.

        Update the navigation property filesFolder in teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param body: New navigation property values.
        :type body: ~teams.models.MicrosoftGraphDriveItem
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_file_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphDriveItem')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_file_folder.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/filesFolder'}  # type: ignore

    def delete_file_folder(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property filesFolder for teams.

        Delete navigation property filesFolder for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_file_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_file_folder.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/filesFolder'}  # type: ignore

    def list_member(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum74"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum75"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfConversationMember"]
        """Get members from teams.

        Get members from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum74]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum75]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfConversationMember or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfConversationMember]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfConversationMember"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_member.metadata['url']  # type: ignore
                path_format_arguments = {
                    'team-id': self._serialize.url("team_id", team_id, 'str'),
                    'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfConversationMember', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_member.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/members'}  # type: ignore

    def create_member(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        roles=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphConversationMember"
        """Create new navigation property to members for teams.

        Create new navigation property to members for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: The display name of the user.
        :type display_name: str
        :param roles: The roles for that user.
        :type roles: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphConversationMember, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphConversationMember
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphConversationMember"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphConversationMember(id=id, display_name=display_name, roles=roles)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_member.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphConversationMember')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphConversationMember', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_member.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/members'}  # type: ignore

    def get_member(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        conversation_member_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum76"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphConversationMember"
        """Get members from teams.

        Get members from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param conversation_member_id: key: id of conversationMember.
        :type conversation_member_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum76]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphConversationMember, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphConversationMember
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphConversationMember"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_member.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
            'conversationMember-id': self._serialize.url("conversation_member_id", conversation_member_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphConversationMember', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_member.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/members/{conversationMember-id}'}  # type: ignore

    def update_member(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        conversation_member_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        roles=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property members in teams.

        Update the navigation property members in teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param conversation_member_id: key: id of conversationMember.
        :type conversation_member_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: The display name of the user.
        :type display_name: str
        :param roles: The roles for that user.
        :type roles: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphConversationMember(id=id, display_name=display_name, roles=roles)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_member.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
            'conversationMember-id': self._serialize.url("conversation_member_id", conversation_member_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphConversationMember')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_member.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/members/{conversationMember-id}'}  # type: ignore

    def delete_member(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        conversation_member_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property members for teams.

        Delete navigation property members for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param conversation_member_id: key: id of conversationMember.
        :type conversation_member_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_member.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
            'conversationMember-id': self._serialize.url("conversation_member_id", conversation_member_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_member.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/members/{conversationMember-id}'}  # type: ignore

    def list_message(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum77"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum78"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum79"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfChatMessage"]
        """Get messages from teams.

        Get messages from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum77]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum78]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams.models.Enum79]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfChatMessage or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfChatMessage]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfChatMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_message.metadata['url']  # type: ignore
                path_format_arguments = {
                    'team-id': self._serialize.url("team_id", team_id, 'str'),
                    'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfChatMessage', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_message.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/messages'}  # type: ignore

    def create_message(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        id=None,  # type: Optional[str]
        attachments=None,  # type: Optional[List["models.MicrosoftGraphChatMessageAttachment"]]
        body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        created_date_time=None,  # type: Optional[datetime.datetime]
        deleted_date_time=None,  # type: Optional[datetime.datetime]
        etag=None,  # type: Optional[str]
        importance=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessageImportance"]]
        last_edited_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        locale=None,  # type: Optional[str]
        mentions=None,  # type: Optional[List["models.MicrosoftGraphChatMessageMention"]]
        message_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessageType"]]
        reactions=None,  # type: Optional[List["models.MicrosoftGraphChatMessageReaction"]]
        reply_to_id=None,  # type: Optional[str]
        subject=None,  # type: Optional[str]
        summary=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        hosted_contents=None,  # type: Optional[List["models.MicrosoftGraphChatMessageHostedContent"]]
        replies=None,  # type: Optional[List["models.MicrosoftGraphChatMessage"]]
        dlp_action=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes"]]
        justification_text=None,  # type: Optional[str]
        policy_tip=None,  # type: Optional["models.MicrosoftGraphChatMessagePolicyViolationPolicyTip"]
        user_action=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes"]]
        verdict_details=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes"]]
        display_name=None,  # type: Optional[str]
        microsoft_graph_identity_id=None,  # type: Optional[str]
        microsoft_graph_identity_display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        display_name1=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphChatMessage"
        """Create new navigation property to messages for teams.

        Create new navigation property to messages for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param id: Read-only.
        :type id: str
        :param attachments: Attached files. Attachments are currently read-only – sending attachments
         is not supported.
        :type attachments: list[~teams.models.MicrosoftGraphChatMessageAttachment]
        :param body: itemBody.
        :type body: ~teams.models.MicrosoftGraphItemBody
        :param created_date_time: Read only. Timestamp of when the chat message was created.
        :type created_date_time: ~datetime.datetime
        :param deleted_date_time: Read only. Timestamp at which the chat message was deleted, or null
         if not deleted.
        :type deleted_date_time: ~datetime.datetime
        :param etag: Read-only. Version number of the chat message.
        :type etag: str
        :param importance:
        :type importance: str or ~teams.models.MicrosoftGraphChatMessageImportance
        :param last_edited_date_time: Read only. Timestamp when edits to the chat message were made.
         Triggers an 'Edited' flag in the Microsoft Teams UI. If no edits are made the value is null.
        :type last_edited_date_time: ~datetime.datetime
        :param last_modified_date_time: Read only. Timestamp when the chat message is created (initial
         setting) or edited, including when a reaction is added or removed.
        :type last_modified_date_time: ~datetime.datetime
        :param locale: Locale of the chat message set by the client.
        :type locale: str
        :param mentions: List of entities mentioned in the chat message. Currently supports user, bot,
         team, channel.
        :type mentions: list[~teams.models.MicrosoftGraphChatMessageMention]
        :param message_type:
        :type message_type: str or ~teams.models.MicrosoftGraphChatMessageType
        :param reactions:
        :type reactions: list[~teams.models.MicrosoftGraphChatMessageReaction]
        :param reply_to_id: Read-only. Id of the parent chat message or root chat message of the
         thread. (Only applies to chat messages in channels not chats).
        :type reply_to_id: str
        :param subject: The subject of the chat message, in plaintext.
        :type subject: str
        :param summary: Summary text of the chat message that could be used for push notifications and
         summary views or fall back views. Only applies to channel chat messages, not chat messages in a
         chat.
        :type summary: str
        :param web_url:
        :type web_url: str
        :param hosted_contents:
        :type hosted_contents: list[~teams.models.MicrosoftGraphChatMessageHostedContent]
        :param replies:
        :type replies: list[~teams.models.MicrosoftGraphChatMessage]
        :param dlp_action:
        :type dlp_action: str or ~teams.models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes
        :param justification_text:
        :type justification_text: str
        :param policy_tip: chatMessagePolicyViolationPolicyTip.
        :type policy_tip: ~teams.models.MicrosoftGraphChatMessagePolicyViolationPolicyTip
        :param user_action:
        :type user_action: str or ~teams.models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes
        :param verdict_details:
        :type verdict_details: str or ~teams.models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphChatMessage, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphChatMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphChatMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphChatMessage(id=id, attachments=attachments, body=body, created_date_time=created_date_time, deleted_date_time=deleted_date_time, etag=etag, importance=importance, last_edited_date_time=last_edited_date_time, last_modified_date_time=last_modified_date_time, locale=locale, mentions=mentions, message_type=message_type, reactions=reactions, reply_to_id=reply_to_id, subject=subject, summary=summary, web_url=web_url, hosted_contents=hosted_contents, replies=replies, dlp_action=dlp_action, justification_text=justification_text, policy_tip=policy_tip, user_action=user_action, verdict_details=verdict_details, display_name_from_user_display_name=display_name, id_from_user_id=microsoft_graph_identity_id, display_name_from_device_display_name=microsoft_graph_identity_display_name, id_from_device_id=id1, display_name_from_application_display_name=display_name1, id_from_application_id=id2)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphChatMessage')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphChatMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_message.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/messages'}  # type: ignore

    def get_message(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        chat_message_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum80"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum81"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphChatMessage"
        """Get messages from teams.

        Get messages from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param chat_message_id: key: id of chatMessage.
        :type chat_message_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum80]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams.models.Enum81]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphChatMessage, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphChatMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphChatMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
            'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphChatMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_message.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}'}  # type: ignore

    def update_message(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        chat_message_id,  # type: str
        id=None,  # type: Optional[str]
        attachments=None,  # type: Optional[List["models.MicrosoftGraphChatMessageAttachment"]]
        body=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        created_date_time=None,  # type: Optional[datetime.datetime]
        deleted_date_time=None,  # type: Optional[datetime.datetime]
        etag=None,  # type: Optional[str]
        importance=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessageImportance"]]
        last_edited_date_time=None,  # type: Optional[datetime.datetime]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        locale=None,  # type: Optional[str]
        mentions=None,  # type: Optional[List["models.MicrosoftGraphChatMessageMention"]]
        message_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessageType"]]
        reactions=None,  # type: Optional[List["models.MicrosoftGraphChatMessageReaction"]]
        reply_to_id=None,  # type: Optional[str]
        subject=None,  # type: Optional[str]
        summary=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        hosted_contents=None,  # type: Optional[List["models.MicrosoftGraphChatMessageHostedContent"]]
        replies=None,  # type: Optional[List["models.MicrosoftGraphChatMessage"]]
        dlp_action=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes"]]
        justification_text=None,  # type: Optional[str]
        policy_tip=None,  # type: Optional["models.MicrosoftGraphChatMessagePolicyViolationPolicyTip"]
        user_action=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes"]]
        verdict_details=None,  # type: Optional[Union[str, "models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes"]]
        display_name=None,  # type: Optional[str]
        microsoft_graph_identity_id=None,  # type: Optional[str]
        microsoft_graph_identity_display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        display_name1=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property messages in teams.

        Update the navigation property messages in teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param chat_message_id: key: id of chatMessage.
        :type chat_message_id: str
        :param id: Read-only.
        :type id: str
        :param attachments: Attached files. Attachments are currently read-only – sending attachments
         is not supported.
        :type attachments: list[~teams.models.MicrosoftGraphChatMessageAttachment]
        :param body: itemBody.
        :type body: ~teams.models.MicrosoftGraphItemBody
        :param created_date_time: Read only. Timestamp of when the chat message was created.
        :type created_date_time: ~datetime.datetime
        :param deleted_date_time: Read only. Timestamp at which the chat message was deleted, or null
         if not deleted.
        :type deleted_date_time: ~datetime.datetime
        :param etag: Read-only. Version number of the chat message.
        :type etag: str
        :param importance:
        :type importance: str or ~teams.models.MicrosoftGraphChatMessageImportance
        :param last_edited_date_time: Read only. Timestamp when edits to the chat message were made.
         Triggers an 'Edited' flag in the Microsoft Teams UI. If no edits are made the value is null.
        :type last_edited_date_time: ~datetime.datetime
        :param last_modified_date_time: Read only. Timestamp when the chat message is created (initial
         setting) or edited, including when a reaction is added or removed.
        :type last_modified_date_time: ~datetime.datetime
        :param locale: Locale of the chat message set by the client.
        :type locale: str
        :param mentions: List of entities mentioned in the chat message. Currently supports user, bot,
         team, channel.
        :type mentions: list[~teams.models.MicrosoftGraphChatMessageMention]
        :param message_type:
        :type message_type: str or ~teams.models.MicrosoftGraphChatMessageType
        :param reactions:
        :type reactions: list[~teams.models.MicrosoftGraphChatMessageReaction]
        :param reply_to_id: Read-only. Id of the parent chat message or root chat message of the
         thread. (Only applies to chat messages in channels not chats).
        :type reply_to_id: str
        :param subject: The subject of the chat message, in plaintext.
        :type subject: str
        :param summary: Summary text of the chat message that could be used for push notifications and
         summary views or fall back views. Only applies to channel chat messages, not chat messages in a
         chat.
        :type summary: str
        :param web_url:
        :type web_url: str
        :param hosted_contents:
        :type hosted_contents: list[~teams.models.MicrosoftGraphChatMessageHostedContent]
        :param replies:
        :type replies: list[~teams.models.MicrosoftGraphChatMessage]
        :param dlp_action:
        :type dlp_action: str or ~teams.models.MicrosoftGraphChatMessagePolicyViolationDlpActionTypes
        :param justification_text:
        :type justification_text: str
        :param policy_tip: chatMessagePolicyViolationPolicyTip.
        :type policy_tip: ~teams.models.MicrosoftGraphChatMessagePolicyViolationPolicyTip
        :param user_action:
        :type user_action: str or ~teams.models.MicrosoftGraphChatMessagePolicyViolationUserActionTypes
        :param verdict_details:
        :type verdict_details: str or ~teams.models.MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphChatMessage(id=id, attachments=attachments, body=body, created_date_time=created_date_time, deleted_date_time=deleted_date_time, etag=etag, importance=importance, last_edited_date_time=last_edited_date_time, last_modified_date_time=last_modified_date_time, locale=locale, mentions=mentions, message_type=message_type, reactions=reactions, reply_to_id=reply_to_id, subject=subject, summary=summary, web_url=web_url, hosted_contents=hosted_contents, replies=replies, dlp_action=dlp_action, justification_text=justification_text, policy_tip=policy_tip, user_action=user_action, verdict_details=verdict_details, display_name_from_user_display_name=display_name, id_from_user_id=microsoft_graph_identity_id, display_name_from_device_display_name=microsoft_graph_identity_display_name, id_from_device_id=id1, display_name_from_application_display_name=display_name1, id_from_application_id=id2)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
            'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphChatMessage')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_message.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}'}  # type: ignore

    def delete_message(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        chat_message_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property messages for teams.

        Delete navigation property messages for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param chat_message_id: key: id of chatMessage.
        :type chat_message_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
            'chatMessage-id': self._serialize.url("chat_message_id", chat_message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_message.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/messages/{chatMessage-id}'}  # type: ignore

    def list_tab(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum88"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum89"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum90"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfTeamsTab"]
        """Get tabs from teams.

        Get tabs from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~teams.models.Enum88]
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum89]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams.models.Enum90]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfTeamsTab or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~teams.models.CollectionOfTeamsTab]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfTeamsTab"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_tab.metadata['url']  # type: ignore
                path_format_arguments = {
                    'team-id': self._serialize.url("team_id", team_id, 'str'),
                    'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfTeamsTab', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_tab.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/tabs'}  # type: ignore

    def create_tab(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        id=None,  # type: Optional[str]
        configuration=None,  # type: Optional["models.MicrosoftGraphTeamsTabConfiguration"]
        display_name=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        microsoft_graph_teams_app_display_name=None,  # type: Optional[str]
        distribution_method=None,  # type: Optional[Union[str, "models.MicrosoftGraphTeamsAppDistributionMethod"]]
        external_id=None,  # type: Optional[str]
        app_definitions=None,  # type: Optional[List["models.MicrosoftGraphTeamsAppDefinition"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTeamsTab"
        """Create new navigation property to tabs for teams.

        Create new navigation property to tabs for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param id: Read-only.
        :type id: str
        :param configuration: teamsTabConfiguration.
        :type configuration: ~teams.models.MicrosoftGraphTeamsTabConfiguration
        :param display_name: Name of the tab.
        :type display_name: str
        :param web_url: Deep link URL of the tab instance. Read only.
        :type web_url: str
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param microsoft_graph_teams_app_display_name: The name of the catalog app provided by the app
         developer in the Microsoft Teams zip app package.
        :type microsoft_graph_teams_app_display_name: str
        :param distribution_method:
        :type distribution_method: str or ~teams.models.MicrosoftGraphTeamsAppDistributionMethod
        :param external_id: The ID of the catalog provided by the app developer in the Microsoft Teams
         zip app package.
        :type external_id: str
        :param app_definitions: The details for each version of the app.
        :type app_definitions: list[~teams.models.MicrosoftGraphTeamsAppDefinition]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTeamsTab, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTeamsTab
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTeamsTab"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphTeamsTab(id=id, configuration=configuration, display_name=display_name, web_url=web_url, id_teams_app_id=microsoft_graph_entity_id, display_name_teams_app_display_name=microsoft_graph_teams_app_display_name, distribution_method=distribution_method, external_id=external_id, app_definitions=app_definitions)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_tab.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphTeamsTab')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTeamsTab', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_tab.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/tabs'}  # type: ignore

    def get_tab(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        teams_tab_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum91"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum92"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphTeamsTab"
        """Get tabs from teams.

        Get tabs from teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param teams_tab_id: key: id of teamsTab.
        :type teams_tab_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~teams.models.Enum91]
        :param expand: Expand related entities.
        :type expand: list[str or ~teams.models.Enum92]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTeamsTab, or the result of cls(response)
        :rtype: ~teams.models.MicrosoftGraphTeamsTab
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTeamsTab"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_tab.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
            'teamsTab-id': self._serialize.url("teams_tab_id", teams_tab_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTeamsTab', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_tab.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/tabs/{teamsTab-id}'}  # type: ignore

    def update_tab(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        teams_tab_id,  # type: str
        id=None,  # type: Optional[str]
        configuration=None,  # type: Optional["models.MicrosoftGraphTeamsTabConfiguration"]
        display_name=None,  # type: Optional[str]
        web_url=None,  # type: Optional[str]
        microsoft_graph_entity_id=None,  # type: Optional[str]
        microsoft_graph_teams_app_display_name=None,  # type: Optional[str]
        distribution_method=None,  # type: Optional[Union[str, "models.MicrosoftGraphTeamsAppDistributionMethod"]]
        external_id=None,  # type: Optional[str]
        app_definitions=None,  # type: Optional[List["models.MicrosoftGraphTeamsAppDefinition"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property tabs in teams.

        Update the navigation property tabs in teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param teams_tab_id: key: id of teamsTab.
        :type teams_tab_id: str
        :param id: Read-only.
        :type id: str
        :param configuration: teamsTabConfiguration.
        :type configuration: ~teams.models.MicrosoftGraphTeamsTabConfiguration
        :param display_name: Name of the tab.
        :type display_name: str
        :param web_url: Deep link URL of the tab instance. Read only.
        :type web_url: str
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param microsoft_graph_teams_app_display_name: The name of the catalog app provided by the app
         developer in the Microsoft Teams zip app package.
        :type microsoft_graph_teams_app_display_name: str
        :param distribution_method:
        :type distribution_method: str or ~teams.models.MicrosoftGraphTeamsAppDistributionMethod
        :param external_id: The ID of the catalog provided by the app developer in the Microsoft Teams
         zip app package.
        :type external_id: str
        :param app_definitions: The details for each version of the app.
        :type app_definitions: list[~teams.models.MicrosoftGraphTeamsAppDefinition]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphTeamsTab(id=id, configuration=configuration, display_name=display_name, web_url=web_url, id_teams_app_id=microsoft_graph_entity_id, display_name_teams_app_display_name=microsoft_graph_teams_app_display_name, distribution_method=distribution_method, external_id=external_id, app_definitions=app_definitions)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_tab.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
            'teamsTab-id': self._serialize.url("teams_tab_id", teams_tab_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphTeamsTab')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_tab.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/tabs/{teamsTab-id}'}  # type: ignore

    def delete_tab(
        self,
        team_id,  # type: str
        channel_id,  # type: str
        teams_tab_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property tabs for teams.

        Delete navigation property tabs for teams.

        :param team_id: key: id of team.
        :type team_id: str
        :param channel_id: key: id of channel.
        :type channel_id: str
        :param teams_tab_id: key: id of teamsTab.
        :type teams_tab_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_tab.metadata['url']  # type: ignore
        path_format_arguments = {
            'team-id': self._serialize.url("team_id", team_id, 'str'),
            'channel-id': self._serialize.url("channel_id", channel_id, 'str'),
            'teamsTab-id': self._serialize.url("teams_tab_id", teams_tab_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_tab.metadata = {'url': '/teams/{team-id}/channels/{channel-id}/tabs/{teamsTab-id}'}  # type: ignore
