# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class ShareListActivityListItemOperations:
    """ShareListActivityListItemOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~files_shares.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_activity(
        self,
        shared_drive_item_id: str,
        item_activity_old_id: str,
        orderby: Optional[List[Union[str, "models.Enum127"]]] = None,
        select: Optional[List[Union[str, "models.Enum128"]]] = None,
        expand: Optional[List[Union[str, "models.Get9ItemsItem"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfItemActivityOld0"]:
        """Get activities from shares.

        Get activities from shares.

        :param shared_drive_item_id: key: sharedDriveItem-id of sharedDriveItem.
        :type shared_drive_item_id: str
        :param item_activity_old_id: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~files_shares.models.Enum127]
        :param select: Select properties to be returned.
        :type select: list[str or ~files_shares.models.Enum128]
        :param expand: Expand related entities.
        :type expand: list[str or ~files_shares.models.Get9ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfItemActivityOld0 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~files_shares.models.CollectionOfItemActivityOld0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfItemActivityOld0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_activity.metadata['url']  # type: ignore
                path_format_arguments = {
                    'sharedDriveItem-id': self._serialize.url("shared_drive_item_id", shared_drive_item_id, 'str'),
                    'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfItemActivityOld0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_activity.metadata = {'url': '/shares/{sharedDriveItem-id}/list/activities/{itemActivityOLD-id}/listItem/activities'}  # type: ignore

    async def create_activity(
        self,
        shared_drive_item_id: str,
        item_activity_old_id: str,
        body: "models.MicrosoftGraphItemActivityOld",
        **kwargs
    ) -> "models.MicrosoftGraphItemActivityOld":
        """Create new navigation property to activities for shares.

        Create new navigation property to activities for shares.

        :param shared_drive_item_id: key: sharedDriveItem-id of sharedDriveItem.
        :type shared_drive_item_id: str
        :param item_activity_old_id: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id: str
        :param body: New navigation property.
        :type body: ~files_shares.models.MicrosoftGraphItemActivityOld
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphItemActivityOld, or the result of cls(response)
        :rtype: ~files_shares.models.MicrosoftGraphItemActivityOld
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphItemActivityOld"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_activity.metadata['url']  # type: ignore
        path_format_arguments = {
            'sharedDriveItem-id': self._serialize.url("shared_drive_item_id", shared_drive_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphItemActivityOld')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphItemActivityOld', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_activity.metadata = {'url': '/shares/{sharedDriveItem-id}/list/activities/{itemActivityOLD-id}/listItem/activities'}  # type: ignore

    async def get_activity(
        self,
        shared_drive_item_id: str,
        item_activity_old_id: str,
        item_activity_old_id1: str,
        select: Optional[List[Union[str, "models.Enum130"]]] = None,
        expand: Optional[List[Union[str, "models.Get4ItemsItem"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphItemActivityOld":
        """Get activities from shares.

        Get activities from shares.

        :param shared_drive_item_id: key: sharedDriveItem-id of sharedDriveItem.
        :type shared_drive_item_id: str
        :param item_activity_old_id: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id: str
        :param item_activity_old_id1: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id1: str
        :param select: Select properties to be returned.
        :type select: list[str or ~files_shares.models.Enum130]
        :param expand: Expand related entities.
        :type expand: list[str or ~files_shares.models.Get4ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphItemActivityOld, or the result of cls(response)
        :rtype: ~files_shares.models.MicrosoftGraphItemActivityOld
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphItemActivityOld"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_activity.metadata['url']  # type: ignore
        path_format_arguments = {
            'sharedDriveItem-id': self._serialize.url("shared_drive_item_id", shared_drive_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
            'itemActivityOLD-id1': self._serialize.url("item_activity_old_id1", item_activity_old_id1, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphItemActivityOld', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_activity.metadata = {'url': '/shares/{sharedDriveItem-id}/list/activities/{itemActivityOLD-id}/listItem/activities/{itemActivityOLD-id1}'}  # type: ignore

    async def update_activity(
        self,
        shared_drive_item_id: str,
        item_activity_old_id: str,
        item_activity_old_id1: str,
        body: "models.MicrosoftGraphItemActivityOld",
        **kwargs
    ) -> None:
        """Update the navigation property activities in shares.

        Update the navigation property activities in shares.

        :param shared_drive_item_id: key: sharedDriveItem-id of sharedDriveItem.
        :type shared_drive_item_id: str
        :param item_activity_old_id: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id: str
        :param item_activity_old_id1: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id1: str
        :param body: New navigation property values.
        :type body: ~files_shares.models.MicrosoftGraphItemActivityOld
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_activity.metadata['url']  # type: ignore
        path_format_arguments = {
            'sharedDriveItem-id': self._serialize.url("shared_drive_item_id", shared_drive_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
            'itemActivityOLD-id1': self._serialize.url("item_activity_old_id1", item_activity_old_id1, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphItemActivityOld')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_activity.metadata = {'url': '/shares/{sharedDriveItem-id}/list/activities/{itemActivityOLD-id}/listItem/activities/{itemActivityOLD-id1}'}  # type: ignore

    async def get_analytic(
        self,
        shared_drive_item_id: str,
        item_activity_old_id: str,
        select: Optional[List[Union[str, "models.Enum132"]]] = None,
        expand: Optional[List[Union[str, "models.Enum133"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphItemAnalytics":
        """Get analytics from shares.

        Get analytics from shares.

        :param shared_drive_item_id: key: sharedDriveItem-id of sharedDriveItem.
        :type shared_drive_item_id: str
        :param item_activity_old_id: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~files_shares.models.Enum132]
        :param expand: Expand related entities.
        :type expand: list[str or ~files_shares.models.Enum133]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphItemAnalytics, or the result of cls(response)
        :rtype: ~files_shares.models.MicrosoftGraphItemAnalytics
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphItemAnalytics"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_analytic.metadata['url']  # type: ignore
        path_format_arguments = {
            'sharedDriveItem-id': self._serialize.url("shared_drive_item_id", shared_drive_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphItemAnalytics', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_analytic.metadata = {'url': '/shares/{sharedDriveItem-id}/list/activities/{itemActivityOLD-id}/listItem/analytics'}  # type: ignore

    async def get_drive_item(
        self,
        shared_drive_item_id: str,
        item_activity_old_id: str,
        select: Optional[List[Union[str, "models.Enum134"]]] = None,
        expand: Optional[List[Union[str, "models.Enum135"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphDriveItem":
        """Get driveItem from shares.

        Get driveItem from shares.

        :param shared_drive_item_id: key: sharedDriveItem-id of sharedDriveItem.
        :type shared_drive_item_id: str
        :param item_activity_old_id: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~files_shares.models.Enum134]
        :param expand: Expand related entities.
        :type expand: list[str or ~files_shares.models.Enum135]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDriveItem, or the result of cls(response)
        :rtype: ~files_shares.models.MicrosoftGraphDriveItem
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDriveItem"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_drive_item.metadata['url']  # type: ignore
        path_format_arguments = {
            'sharedDriveItem-id': self._serialize.url("shared_drive_item_id", shared_drive_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDriveItem', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_drive_item.metadata = {'url': '/shares/{sharedDriveItem-id}/list/activities/{itemActivityOLD-id}/listItem/driveItem'}  # type: ignore

    async def update_drive_item(
        self,
        shared_drive_item_id: str,
        item_activity_old_id: str,
        body: "models.MicrosoftGraphDriveItem",
        **kwargs
    ) -> None:
        """Update the navigation property driveItem in shares.

        Update the navigation property driveItem in shares.

        :param shared_drive_item_id: key: sharedDriveItem-id of sharedDriveItem.
        :type shared_drive_item_id: str
        :param item_activity_old_id: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id: str
        :param body: New navigation property values.
        :type body: ~files_shares.models.MicrosoftGraphDriveItem
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_drive_item.metadata['url']  # type: ignore
        path_format_arguments = {
            'sharedDriveItem-id': self._serialize.url("shared_drive_item_id", shared_drive_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphDriveItem')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_drive_item.metadata = {'url': '/shares/{sharedDriveItem-id}/list/activities/{itemActivityOLD-id}/listItem/driveItem'}  # type: ignore

    async def get_field(
        self,
        shared_drive_item_id: str,
        item_activity_old_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEntity":
        """Get fields from shares.

        Get fields from shares.

        :param shared_drive_item_id: key: sharedDriveItem-id of sharedDriveItem.
        :type shared_drive_item_id: str
        :param item_activity_old_id: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id: str
        :param select: Select properties to be returned.
        :type select: list[str]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEntity, or the result of cls(response)
        :rtype: ~files_shares.models.MicrosoftGraphEntity
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEntity"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_field.metadata['url']  # type: ignore
        path_format_arguments = {
            'sharedDriveItem-id': self._serialize.url("shared_drive_item_id", shared_drive_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEntity', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_field.metadata = {'url': '/shares/{sharedDriveItem-id}/list/activities/{itemActivityOLD-id}/listItem/fields'}  # type: ignore

    async def update_field(
        self,
        shared_drive_item_id: str,
        item_activity_old_id: str,
        id: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property fields in shares.

        Update the navigation property fields in shares.

        :param shared_drive_item_id: key: sharedDriveItem-id of sharedDriveItem.
        :type shared_drive_item_id: str
        :param item_activity_old_id: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id: str
        :param id: Read-only.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEntity(id=id)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_field.metadata['url']  # type: ignore
        path_format_arguments = {
            'sharedDriveItem-id': self._serialize.url("shared_drive_item_id", shared_drive_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEntity')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_field.metadata = {'url': '/shares/{sharedDriveItem-id}/list/activities/{itemActivityOLD-id}/listItem/fields'}  # type: ignore

    async def get_activity_by_interval(
        self,
        shared_drive_item_id: str,
        item_activity_old_id: str,
        start_date_time: str,
        end_date_time: str,
        interval: str,
        **kwargs
    ) -> List["models.MicrosoftGraphItemActivityStat"]:
        """Invoke function getActivitiesByInterval.

        Invoke function getActivitiesByInterval.

        :param shared_drive_item_id: key: sharedDriveItem-id of sharedDriveItem.
        :type shared_drive_item_id: str
        :param item_activity_old_id: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id: str
        :param start_date_time:
        :type start_date_time: str
        :param end_date_time:
        :type end_date_time: str
        :param interval:
        :type interval: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphItemActivityStat, or the result of cls(response)
        :rtype: list[~files_shares.models.MicrosoftGraphItemActivityStat]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphItemActivityStat"]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_activity_by_interval.metadata['url']  # type: ignore
        path_format_arguments = {
            'sharedDriveItem-id': self._serialize.url("shared_drive_item_id", shared_drive_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
            'startDateTime': self._serialize.url("start_date_time", start_date_time, 'str'),
            'endDateTime': self._serialize.url("end_date_time", end_date_time, 'str'),
            'interval': self._serialize.url("interval", interval, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphItemActivityStat]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_activity_by_interval.metadata = {'url': '/shares/{sharedDriveItem-id}/list/activities/{itemActivityOLD-id}/listItem/microsoft.graph.getActivitiesByInterval(startDateTime={startDateTime},endDateTime={endDateTime},interval={interval})'}  # type: ignore

    def list_version(
        self,
        shared_drive_item_id: str,
        item_activity_old_id: str,
        orderby: Optional[List[Union[str, "models.Enum136"]]] = None,
        select: Optional[List[Union[str, "models.Enum137"]]] = None,
        expand: Optional[List[Union[str, "models.Enum138"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfListItemVersion"]:
        """Get versions from shares.

        Get versions from shares.

        :param shared_drive_item_id: key: sharedDriveItem-id of sharedDriveItem.
        :type shared_drive_item_id: str
        :param item_activity_old_id: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~files_shares.models.Enum136]
        :param select: Select properties to be returned.
        :type select: list[str or ~files_shares.models.Enum137]
        :param expand: Expand related entities.
        :type expand: list[str or ~files_shares.models.Enum138]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfListItemVersion or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~files_shares.models.CollectionOfListItemVersion]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfListItemVersion"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_version.metadata['url']  # type: ignore
                path_format_arguments = {
                    'sharedDriveItem-id': self._serialize.url("shared_drive_item_id", shared_drive_item_id, 'str'),
                    'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfListItemVersion', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_version.metadata = {'url': '/shares/{sharedDriveItem-id}/list/activities/{itemActivityOLD-id}/listItem/versions'}  # type: ignore

    async def create_version(
        self,
        shared_drive_item_id: str,
        item_activity_old_id: str,
        id: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        publication: Optional["models.MicrosoftGraphPublicationFacet"] = None,
        application: Optional["models.MicrosoftGraphIdentity"] = None,
        device: Optional["models.MicrosoftGraphIdentity"] = None,
        user: Optional["models.MicrosoftGraphIdentity"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphListItemVersion":
        """Create new navigation property to versions for shares.

        Create new navigation property to versions for shares.

        :param shared_drive_item_id: key: sharedDriveItem-id of sharedDriveItem.
        :type shared_drive_item_id: str
        :param item_activity_old_id: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id: str
        :param id: Read-only.
        :type id: str
        :param last_modified_date_time: Date and time the version was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param publication: publicationFacet.
        :type publication: ~files_shares.models.MicrosoftGraphPublicationFacet
        :param application: identity.
        :type application: ~files_shares.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~files_shares.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~files_shares.models.MicrosoftGraphIdentity
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphListItemVersion, or the result of cls(response)
        :rtype: ~files_shares.models.MicrosoftGraphListItemVersion
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphListItemVersion"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphListItemVersion(id=id, last_modified_date_time=last_modified_date_time, publication=publication, application=application, device=device, user=user, id_fields_id=microsoft_graph_entity_id)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_version.metadata['url']  # type: ignore
        path_format_arguments = {
            'sharedDriveItem-id': self._serialize.url("shared_drive_item_id", shared_drive_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphListItemVersion')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphListItemVersion', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_version.metadata = {'url': '/shares/{sharedDriveItem-id}/list/activities/{itemActivityOLD-id}/listItem/versions'}  # type: ignore

    async def get_version(
        self,
        shared_drive_item_id: str,
        item_activity_old_id: str,
        list_item_version_id: str,
        select: Optional[List[Union[str, "models.Enum139"]]] = None,
        expand: Optional[List[Union[str, "models.Enum140"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphListItemVersion":
        """Get versions from shares.

        Get versions from shares.

        :param shared_drive_item_id: key: sharedDriveItem-id of sharedDriveItem.
        :type shared_drive_item_id: str
        :param item_activity_old_id: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id: str
        :param list_item_version_id: key: listItemVersion-id of listItemVersion.
        :type list_item_version_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~files_shares.models.Enum139]
        :param expand: Expand related entities.
        :type expand: list[str or ~files_shares.models.Enum140]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphListItemVersion, or the result of cls(response)
        :rtype: ~files_shares.models.MicrosoftGraphListItemVersion
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphListItemVersion"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_version.metadata['url']  # type: ignore
        path_format_arguments = {
            'sharedDriveItem-id': self._serialize.url("shared_drive_item_id", shared_drive_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
            'listItemVersion-id': self._serialize.url("list_item_version_id", list_item_version_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphListItemVersion', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_version.metadata = {'url': '/shares/{sharedDriveItem-id}/list/activities/{itemActivityOLD-id}/listItem/versions/{listItemVersion-id}'}  # type: ignore

    async def update_version(
        self,
        shared_drive_item_id: str,
        item_activity_old_id: str,
        list_item_version_id: str,
        id: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        publication: Optional["models.MicrosoftGraphPublicationFacet"] = None,
        application: Optional["models.MicrosoftGraphIdentity"] = None,
        device: Optional["models.MicrosoftGraphIdentity"] = None,
        user: Optional["models.MicrosoftGraphIdentity"] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property versions in shares.

        Update the navigation property versions in shares.

        :param shared_drive_item_id: key: sharedDriveItem-id of sharedDriveItem.
        :type shared_drive_item_id: str
        :param item_activity_old_id: key: itemActivityOLD-id of itemActivityOLD.
        :type item_activity_old_id: str
        :param list_item_version_id: key: listItemVersion-id of listItemVersion.
        :type list_item_version_id: str
        :param id: Read-only.
        :type id: str
        :param last_modified_date_time: Date and time the version was last modified. Read-only.
        :type last_modified_date_time: ~datetime.datetime
        :param publication: publicationFacet.
        :type publication: ~files_shares.models.MicrosoftGraphPublicationFacet
        :param application: identity.
        :type application: ~files_shares.models.MicrosoftGraphIdentity
        :param device: identity.
        :type device: ~files_shares.models.MicrosoftGraphIdentity
        :param user: identity.
        :type user: ~files_shares.models.MicrosoftGraphIdentity
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphListItemVersion(id=id, last_modified_date_time=last_modified_date_time, publication=publication, application=application, device=device, user=user, id_fields_id=microsoft_graph_entity_id)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_version.metadata['url']  # type: ignore
        path_format_arguments = {
            'sharedDriveItem-id': self._serialize.url("shared_drive_item_id", shared_drive_item_id, 'str'),
            'itemActivityOLD-id': self._serialize.url("item_activity_old_id", item_activity_old_id, 'str'),
            'listItemVersion-id': self._serialize.url("list_item_version_id", list_item_version_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphListItemVersion')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_version.metadata = {'url': '/shares/{sharedDriveItem-id}/list/activities/{itemActivityOLD-id}/listItem/versions/{listItemVersion-id}'}  # type: ignore
