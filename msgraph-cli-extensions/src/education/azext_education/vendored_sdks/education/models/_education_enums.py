# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Enum117(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    MAIL_NICKNAME = "mailNickname"
    DESCRIPTION = "description"
    CREATED_BY = "createdBy"
    CLASS_CODE = "classCode"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_ID = "externalId"
    EXTERNAL_SOURCE = "externalSource"
    GRADE = "grade"
    TERM = "term"
    COURSE = "course"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum119(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"

class Enum120(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"

class Enum121(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"

class Enum122(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLASS_ID = "classId"
    CLASS_ID_DESC = "classId desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    INSTRUCTIONS = "instructions"
    INSTRUCTIONS_DESC = "instructions desc"
    CLOSE_DATE_TIME = "closeDateTime"
    CLOSE_DATE_TIME_DESC = "closeDateTime desc"
    DUE_DATE_TIME = "dueDateTime"
    DUE_DATE_TIME_DESC = "dueDateTime desc"
    ASSIGN_DATE_TIME = "assignDateTime"
    ASSIGN_DATE_TIME_DESC = "assignDateTime desc"
    ASSIGNED_DATE_TIME = "assignedDateTime"
    ASSIGNED_DATE_TIME_DESC = "assignedDateTime desc"
    GRADING = "grading"
    GRADING_DESC = "grading desc"
    ASSIGN_TO = "assignTo"
    ASSIGN_TO_DESC = "assignTo desc"
    ALLOW_LATE_SUBMISSIONS = "allowLateSubmissions"
    ALLOW_LATE_SUBMISSIONS_DESC = "allowLateSubmissions desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    ALLOW_STUDENTS_TO_ADD_RESOURCES_TO_SUBMISSION = "allowStudentsToAddResourcesToSubmission"
    ALLOW_STUDENTS_TO_ADD_RESOURCES_TO_SUBMISSION_DESC = "allowStudentsToAddResourcesToSubmission desc"
    STATUS = "status"
    STATUS_DESC = "status desc"

class Enum123(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASS_ID = "classId"
    DISPLAY_NAME = "displayName"
    INSTRUCTIONS = "instructions"
    CLOSE_DATE_TIME = "closeDateTime"
    DUE_DATE_TIME = "dueDateTime"
    ASSIGN_DATE_TIME = "assignDateTime"
    ASSIGNED_DATE_TIME = "assignedDateTime"
    GRADING = "grading"
    ASSIGN_TO = "assignTo"
    ALLOW_LATE_SUBMISSIONS = "allowLateSubmissions"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_BY = "createdBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    ALLOW_STUDENTS_TO_ADD_RESOURCES_TO_SUBMISSION = "allowStudentsToAddResourcesToSubmission"
    STATUS = "status"
    RESOURCES = "resources"
    SUBMISSIONS = "submissions"
    CATEGORIES = "categories"
    RUBRIC = "rubric"

class Enum124(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESOURCES = "resources"
    SUBMISSIONS = "submissions"
    CATEGORIES = "categories"
    RUBRIC = "rubric"

class Enum125(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASS_ID = "classId"
    DISPLAY_NAME = "displayName"
    INSTRUCTIONS = "instructions"
    CLOSE_DATE_TIME = "closeDateTime"
    DUE_DATE_TIME = "dueDateTime"
    ASSIGN_DATE_TIME = "assignDateTime"
    ASSIGNED_DATE_TIME = "assignedDateTime"
    GRADING = "grading"
    ASSIGN_TO = "assignTo"
    ALLOW_LATE_SUBMISSIONS = "allowLateSubmissions"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_BY = "createdBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    ALLOW_STUDENTS_TO_ADD_RESOURCES_TO_SUBMISSION = "allowStudentsToAddResourcesToSubmission"
    STATUS = "status"
    RESOURCES = "resources"
    SUBMISSIONS = "submissions"
    CATEGORIES = "categories"
    RUBRIC = "rubric"

class Enum126(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESOURCES = "resources"
    SUBMISSIONS = "submissions"
    CATEGORIES = "categories"
    RUBRIC = "rubric"

class Enum127(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"

class Enum128(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"

class Enum129(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"

class Enum130(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISTRIBUTE_FOR_STUDENT_WORK = "distributeForStudentWork"
    DISTRIBUTE_FOR_STUDENT_WORK_DESC = "distributeForStudentWork desc"
    RESOURCE = "resource"
    RESOURCE_DESC = "resource desc"

class Enum131(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISTRIBUTE_FOR_STUDENT_WORK = "distributeForStudentWork"
    RESOURCE = "resource"

class Enum132(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISTRIBUTE_FOR_STUDENT_WORK = "distributeForStudentWork"
    RESOURCE = "resource"

class Enum133(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    QUALITIES = "qualities"
    LEVELS = "levels"
    GRADING = "grading"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_BY = "createdBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"

class Enum134(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    RECIPIENT = "recipient"
    RECIPIENT_DESC = "recipient desc"
    STATUS = "status"
    STATUS_DESC = "status desc"
    SUBMITTED_BY = "submittedBy"
    SUBMITTED_BY_DESC = "submittedBy desc"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    SUBMITTED_DATE_TIME_DESC = "submittedDateTime desc"
    UNSUBMITTED_BY = "unsubmittedBy"
    UNSUBMITTED_BY_DESC = "unsubmittedBy desc"
    UNSUBMITTED_DATE_TIME = "unsubmittedDateTime"
    UNSUBMITTED_DATE_TIME_DESC = "unsubmittedDateTime desc"
    RELEASED_BY = "releasedBy"
    RELEASED_BY_DESC = "releasedBy desc"
    RELEASED_DATE_TIME = "releasedDateTime"
    RELEASED_DATE_TIME_DESC = "releasedDateTime desc"
    RETURNED_BY = "returnedBy"
    RETURNED_BY_DESC = "returnedBy desc"
    RETURNED_DATE_TIME = "returnedDateTime"
    RETURNED_DATE_TIME_DESC = "returnedDateTime desc"
    RESOURCES_FOLDER_URL = "resourcesFolderUrl"
    RESOURCES_FOLDER_URL_DESC = "resourcesFolderUrl desc"

class Enum135(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RECIPIENT = "recipient"
    STATUS = "status"
    SUBMITTED_BY = "submittedBy"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    UNSUBMITTED_BY = "unsubmittedBy"
    UNSUBMITTED_DATE_TIME = "unsubmittedDateTime"
    RELEASED_BY = "releasedBy"
    RELEASED_DATE_TIME = "releasedDateTime"
    RETURNED_BY = "returnedBy"
    RETURNED_DATE_TIME = "returnedDateTime"
    RESOURCES_FOLDER_URL = "resourcesFolderUrl"
    RESOURCES = "resources"
    SUBMITTED_RESOURCES = "submittedResources"
    OUTCOMES = "outcomes"

class Enum136(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESOURCES = "resources"
    SUBMITTED_RESOURCES = "submittedResources"
    OUTCOMES = "outcomes"

class Enum137(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RECIPIENT = "recipient"
    STATUS = "status"
    SUBMITTED_BY = "submittedBy"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    UNSUBMITTED_BY = "unsubmittedBy"
    UNSUBMITTED_DATE_TIME = "unsubmittedDateTime"
    RELEASED_BY = "releasedBy"
    RELEASED_DATE_TIME = "releasedDateTime"
    RETURNED_BY = "returnedBy"
    RETURNED_DATE_TIME = "returnedDateTime"
    RESOURCES_FOLDER_URL = "resourcesFolderUrl"
    RESOURCES = "resources"
    SUBMITTED_RESOURCES = "submittedResources"
    OUTCOMES = "outcomes"

class Enum138(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESOURCES = "resources"
    SUBMITTED_RESOURCES = "submittedResources"
    OUTCOMES = "outcomes"

class Enum139(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"

class Enum140(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"

class Enum141(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"

class Enum142(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    RESOURCE = "resource"
    RESOURCE_DESC = "resource desc"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"
    ASSIGNMENT_RESOURCE_URL_DESC = "assignmentResourceUrl desc"

class Enum143(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RESOURCE = "resource"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"

class Enum144(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RESOURCE = "resource"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"

class Enum145(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    RESOURCE = "resource"
    RESOURCE_DESC = "resource desc"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"
    ASSIGNMENT_RESOURCE_URL_DESC = "assignmentResourceUrl desc"

class Enum146(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RESOURCE = "resource"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"

class Enum147(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RESOURCE = "resource"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"

class Enum148(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    ASSIGNED_LABELS = "assignedLabels"
    ASSIGNED_LICENSES = "assignedLicenses"
    CLASSIFICATION = "classification"
    CREATED_BY_APP_ID = "createdByAppId"
    CREATED_DATE_TIME = "createdDateTime"
    DESCRIPTION = "description"
    DISPLAY_NAME = "displayName"
    EXPIRATION_DATE_TIME = "expirationDateTime"
    GROUP_TYPES = "groupTypes"
    HAS_MEMBERS_WITH_LICENSE_ERRORS = "hasMembersWithLicenseErrors"
    IS_ASSIGNABLE_TO_ROLE = "isAssignableToRole"
    LICENSE_PROCESSING_STATE = "licenseProcessingState"
    MAIL = "mail"
    MAIL_ENABLED = "mailEnabled"
    MAIL_NICKNAME = "mailNickname"
    MDM_APP_ID = "mdmAppId"
    MEMBERSHIP_RULE = "membershipRule"
    MEMBERSHIP_RULE_PROCESSING_STATE = "membershipRuleProcessingState"
    ON_PREMISES_DOMAIN_NAME = "onPremisesDomainName"
    ON_PREMISES_LAST_SYNC_DATE_TIME = "onPremisesLastSyncDateTime"
    ON_PREMISES_NET_BIOS_NAME = "onPremisesNetBiosName"
    ON_PREMISES_PROVISIONING_ERRORS = "onPremisesProvisioningErrors"
    ON_PREMISES_SAM_ACCOUNT_NAME = "onPremisesSamAccountName"
    ON_PREMISES_SECURITY_IDENTIFIER = "onPremisesSecurityIdentifier"
    ON_PREMISES_SYNC_ENABLED = "onPremisesSyncEnabled"
    PREFERRED_DATA_LOCATION = "preferredDataLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROXY_ADDRESSES = "proxyAddresses"
    RENEWED_DATE_TIME = "renewedDateTime"
    RESOURCE_BEHAVIOR_OPTIONS = "resourceBehaviorOptions"
    RESOURCE_PROVISIONING_OPTIONS = "resourceProvisioningOptions"
    SECURITY_ENABLED = "securityEnabled"
    SECURITY_IDENTIFIER = "securityIdentifier"
    THEME = "theme"
    VISIBILITY = "visibility"
    ACCESS_TYPE = "accessType"
    ALLOW_EXTERNAL_SENDERS = "allowExternalSenders"
    AUTO_SUBSCRIBE_NEW_MEMBERS = "autoSubscribeNewMembers"
    IS_FAVORITE = "isFavorite"
    IS_SUBSCRIBED_BY_MAIL = "isSubscribedByMail"
    UNSEEN_COUNT = "unseenCount"
    UNSEEN_CONVERSATIONS_COUNT = "unseenConversationsCount"
    UNSEEN_MESSAGES_COUNT = "unseenMessagesCount"
    HIDE_FROM_OUTLOOK_CLIENTS = "hideFromOutlookClients"
    HIDE_FROM_ADDRESS_LISTS = "hideFromAddressLists"
    IS_ARCHIVED = "isArchived"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    MEMBERS = "members"
    MEMBERS_WITH_LICENSE_ERRORS = "membersWithLicenseErrors"
    MEMBER_OF = "memberOf"
    TRANSITIVE_MEMBERS = "transitiveMembers"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    CREATED_ON_BEHALF_OF = "createdOnBehalfOf"
    OWNERS = "owners"
    SETTINGS = "settings"
    ENDPOINTS = "endpoints"
    PERMISSION_GRANTS = "permissionGrants"
    CONVERSATIONS = "conversations"
    PHOTOS = "photos"
    ACCEPTED_SENDERS = "acceptedSenders"
    REJECTED_SENDERS = "rejectedSenders"
    THREADS = "threads"
    CALENDAR = "calendar"
    CALENDAR_VIEW = "calendarView"
    EVENTS = "events"
    PHOTO = "photo"
    DRIVE = "drive"
    DRIVES = "drives"
    SITES = "sites"
    EXTENSIONS = "extensions"
    GROUP_LIFECYCLE_POLICIES = "groupLifecyclePolicies"
    PLANNER = "planner"
    ONENOTE = "onenote"
    TEAM = "team"

class Enum149(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    MEMBERS = "members"
    MEMBERS_WITH_LICENSE_ERRORS = "membersWithLicenseErrors"
    MEMBER_OF = "memberOf"
    TRANSITIVE_MEMBERS = "transitiveMembers"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    CREATED_ON_BEHALF_OF = "createdOnBehalfOf"
    OWNERS = "owners"
    SETTINGS = "settings"
    ENDPOINTS = "endpoints"
    PERMISSION_GRANTS = "permissionGrants"
    CONVERSATIONS = "conversations"
    PHOTOS = "photos"
    ACCEPTED_SENDERS = "acceptedSenders"
    REJECTED_SENDERS = "rejectedSenders"
    THREADS = "threads"
    CALENDAR = "calendar"
    CALENDAR_VIEW = "calendarView"
    EVENTS = "events"
    PHOTO = "photo"
    DRIVE = "drive"
    DRIVES = "drives"
    SITES = "sites"
    EXTENSIONS = "extensions"
    GROUP_LIFECYCLE_POLICIES = "groupLifecyclePolicies"
    PLANNER = "planner"
    ONENOTE = "onenote"
    TEAM = "team"

class Enum150(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    RELATED_CONTACTS = "relatedContacts"
    RELATED_CONTACTS_DESC = "relatedContacts desc"
    PRIMARY_ROLE = "primaryRole"
    PRIMARY_ROLE_DESC = "primaryRole desc"
    MIDDLE_NAME = "middleName"
    MIDDLE_NAME_DESC = "middleName desc"
    EXTERNAL_SOURCE = "externalSource"
    EXTERNAL_SOURCE_DESC = "externalSource desc"
    RESIDENCE_ADDRESS = "residenceAddress"
    RESIDENCE_ADDRESS_DESC = "residenceAddress desc"
    MAILING_ADDRESS = "mailingAddress"
    MAILING_ADDRESS_DESC = "mailingAddress desc"
    STUDENT = "student"
    STUDENT_DESC = "student desc"
    TEACHER = "teacher"
    TEACHER_DESC = "teacher desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    ACCOUNT_ENABLED = "accountEnabled"
    ACCOUNT_ENABLED_DESC = "accountEnabled desc"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_LICENSES_DESC = "assignedLicenses desc"
    ASSIGNED_PLANS = "assignedPlans"
    ASSIGNED_PLANS_DESC = "assignedPlans desc"
    BUSINESS_PHONES = "businessPhones"
    BUSINESS_PHONES_DESC = "businessPhones desc"
    DEPARTMENT = "department"
    DEPARTMENT_DESC = "department desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    GIVEN_NAME = "givenName"
    GIVEN_NAME_DESC = "givenName desc"
    MAIL = "mail"
    MAIL_DESC = "mail desc"
    MAIL_NICKNAME = "mailNickname"
    MAIL_NICKNAME_DESC = "mailNickname desc"
    MOBILE_PHONE = "mobilePhone"
    MOBILE_PHONE_DESC = "mobilePhone desc"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_POLICIES_DESC = "passwordPolicies desc"
    PASSWORD_PROFILE = "passwordProfile"
    PASSWORD_PROFILE_DESC = "passwordProfile desc"
    OFFICE_LOCATION = "officeLocation"
    OFFICE_LOCATION_DESC = "officeLocation desc"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PREFERRED_LANGUAGE_DESC = "preferredLanguage desc"
    PROVISIONED_PLANS = "provisionedPlans"
    PROVISIONED_PLANS_DESC = "provisionedPlans desc"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME_DESC = "refreshTokensValidFromDateTime desc"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SHOW_IN_ADDRESS_LIST_DESC = "showInAddressList desc"
    SURNAME = "surname"
    SURNAME_DESC = "surname desc"
    USAGE_LOCATION = "usageLocation"
    USAGE_LOCATION_DESC = "usageLocation desc"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_PRINCIPAL_NAME_DESC = "userPrincipalName desc"
    USER_TYPE = "userType"
    USER_TYPE_DESC = "userType desc"
    ON_PREMISES_INFO = "onPremisesInfo"
    ON_PREMISES_INFO_DESC = "onPremisesInfo desc"

class Enum151(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATED_CONTACTS = "relatedContacts"
    PRIMARY_ROLE = "primaryRole"
    MIDDLE_NAME = "middleName"
    EXTERNAL_SOURCE = "externalSource"
    RESIDENCE_ADDRESS = "residenceAddress"
    MAILING_ADDRESS = "mailingAddress"
    STUDENT = "student"
    TEACHER = "teacher"
    CREATED_BY = "createdBy"
    ACCOUNT_ENABLED = "accountEnabled"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_PLANS = "assignedPlans"
    BUSINESS_PHONES = "businessPhones"
    DEPARTMENT = "department"
    DISPLAY_NAME = "displayName"
    GIVEN_NAME = "givenName"
    MAIL = "mail"
    MAIL_NICKNAME = "mailNickname"
    MOBILE_PHONE = "mobilePhone"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_PROFILE = "passwordProfile"
    OFFICE_LOCATION = "officeLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROVISIONED_PLANS = "provisionedPlans"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SURNAME = "surname"
    USAGE_LOCATION = "usageLocation"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_TYPE = "userType"
    ON_PREMISES_INFO = "onPremisesInfo"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum152(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum153(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATED_CONTACTS = "relatedContacts"
    PRIMARY_ROLE = "primaryRole"
    MIDDLE_NAME = "middleName"
    EXTERNAL_SOURCE = "externalSource"
    RESIDENCE_ADDRESS = "residenceAddress"
    MAILING_ADDRESS = "mailingAddress"
    STUDENT = "student"
    TEACHER = "teacher"
    CREATED_BY = "createdBy"
    ACCOUNT_ENABLED = "accountEnabled"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_PLANS = "assignedPlans"
    BUSINESS_PHONES = "businessPhones"
    DEPARTMENT = "department"
    DISPLAY_NAME = "displayName"
    GIVEN_NAME = "givenName"
    MAIL = "mail"
    MAIL_NICKNAME = "mailNickname"
    MOBILE_PHONE = "mobilePhone"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_PROFILE = "passwordProfile"
    OFFICE_LOCATION = "officeLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROVISIONED_PLANS = "provisionedPlans"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SURNAME = "surname"
    USAGE_LOCATION = "usageLocation"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_TYPE = "userType"
    ON_PREMISES_INFO = "onPremisesInfo"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum154(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum155(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    EXTERNAL_SOURCE = "externalSource"
    EXTERNAL_SOURCE_DESC = "externalSource desc"
    PRINCIPAL_EMAIL = "principalEmail"
    PRINCIPAL_EMAIL_DESC = "principalEmail desc"
    PRINCIPAL_NAME = "principalName"
    PRINCIPAL_NAME_DESC = "principalName desc"
    EXTERNAL_PRINCIPAL_ID = "externalPrincipalId"
    EXTERNAL_PRINCIPAL_ID_DESC = "externalPrincipalId desc"
    LOWEST_GRADE = "lowestGrade"
    LOWEST_GRADE_DESC = "lowestGrade desc"
    HIGHEST_GRADE = "highestGrade"
    HIGHEST_GRADE_DESC = "highestGrade desc"
    SCHOOL_NUMBER = "schoolNumber"
    SCHOOL_NUMBER_DESC = "schoolNumber desc"
    EXTERNAL_ID = "externalId"
    EXTERNAL_ID_DESC = "externalId desc"
    PHONE = "phone"
    PHONE_DESC = "phone desc"
    FAX = "fax"
    FAX_DESC = "fax desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    ADDRESS = "address"
    ADDRESS_DESC = "address desc"

class Enum156(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    EXTERNAL_SOURCE = "externalSource"
    PRINCIPAL_EMAIL = "principalEmail"
    PRINCIPAL_NAME = "principalName"
    EXTERNAL_PRINCIPAL_ID = "externalPrincipalId"
    LOWEST_GRADE = "lowestGrade"
    HIGHEST_GRADE = "highestGrade"
    SCHOOL_NUMBER = "schoolNumber"
    EXTERNAL_ID = "externalId"
    PHONE = "phone"
    FAX = "fax"
    CREATED_BY = "createdBy"
    ADDRESS = "address"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum157(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum158(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    EXTERNAL_SOURCE = "externalSource"
    PRINCIPAL_EMAIL = "principalEmail"
    PRINCIPAL_NAME = "principalName"
    EXTERNAL_PRINCIPAL_ID = "externalPrincipalId"
    LOWEST_GRADE = "lowestGrade"
    HIGHEST_GRADE = "highestGrade"
    SCHOOL_NUMBER = "schoolNumber"
    EXTERNAL_ID = "externalId"
    PHONE = "phone"
    FAX = "fax"
    CREATED_BY = "createdBy"
    ADDRESS = "address"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum159(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum160(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    RELATED_CONTACTS = "relatedContacts"
    RELATED_CONTACTS_DESC = "relatedContacts desc"
    PRIMARY_ROLE = "primaryRole"
    PRIMARY_ROLE_DESC = "primaryRole desc"
    MIDDLE_NAME = "middleName"
    MIDDLE_NAME_DESC = "middleName desc"
    EXTERNAL_SOURCE = "externalSource"
    EXTERNAL_SOURCE_DESC = "externalSource desc"
    RESIDENCE_ADDRESS = "residenceAddress"
    RESIDENCE_ADDRESS_DESC = "residenceAddress desc"
    MAILING_ADDRESS = "mailingAddress"
    MAILING_ADDRESS_DESC = "mailingAddress desc"
    STUDENT = "student"
    STUDENT_DESC = "student desc"
    TEACHER = "teacher"
    TEACHER_DESC = "teacher desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    ACCOUNT_ENABLED = "accountEnabled"
    ACCOUNT_ENABLED_DESC = "accountEnabled desc"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_LICENSES_DESC = "assignedLicenses desc"
    ASSIGNED_PLANS = "assignedPlans"
    ASSIGNED_PLANS_DESC = "assignedPlans desc"
    BUSINESS_PHONES = "businessPhones"
    BUSINESS_PHONES_DESC = "businessPhones desc"
    DEPARTMENT = "department"
    DEPARTMENT_DESC = "department desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    GIVEN_NAME = "givenName"
    GIVEN_NAME_DESC = "givenName desc"
    MAIL = "mail"
    MAIL_DESC = "mail desc"
    MAIL_NICKNAME = "mailNickname"
    MAIL_NICKNAME_DESC = "mailNickname desc"
    MOBILE_PHONE = "mobilePhone"
    MOBILE_PHONE_DESC = "mobilePhone desc"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_POLICIES_DESC = "passwordPolicies desc"
    PASSWORD_PROFILE = "passwordProfile"
    PASSWORD_PROFILE_DESC = "passwordProfile desc"
    OFFICE_LOCATION = "officeLocation"
    OFFICE_LOCATION_DESC = "officeLocation desc"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PREFERRED_LANGUAGE_DESC = "preferredLanguage desc"
    PROVISIONED_PLANS = "provisionedPlans"
    PROVISIONED_PLANS_DESC = "provisionedPlans desc"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME_DESC = "refreshTokensValidFromDateTime desc"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SHOW_IN_ADDRESS_LIST_DESC = "showInAddressList desc"
    SURNAME = "surname"
    SURNAME_DESC = "surname desc"
    USAGE_LOCATION = "usageLocation"
    USAGE_LOCATION_DESC = "usageLocation desc"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_PRINCIPAL_NAME_DESC = "userPrincipalName desc"
    USER_TYPE = "userType"
    USER_TYPE_DESC = "userType desc"
    ON_PREMISES_INFO = "onPremisesInfo"
    ON_PREMISES_INFO_DESC = "onPremisesInfo desc"

class Enum161(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATED_CONTACTS = "relatedContacts"
    PRIMARY_ROLE = "primaryRole"
    MIDDLE_NAME = "middleName"
    EXTERNAL_SOURCE = "externalSource"
    RESIDENCE_ADDRESS = "residenceAddress"
    MAILING_ADDRESS = "mailingAddress"
    STUDENT = "student"
    TEACHER = "teacher"
    CREATED_BY = "createdBy"
    ACCOUNT_ENABLED = "accountEnabled"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_PLANS = "assignedPlans"
    BUSINESS_PHONES = "businessPhones"
    DEPARTMENT = "department"
    DISPLAY_NAME = "displayName"
    GIVEN_NAME = "givenName"
    MAIL = "mail"
    MAIL_NICKNAME = "mailNickname"
    MOBILE_PHONE = "mobilePhone"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_PROFILE = "passwordProfile"
    OFFICE_LOCATION = "officeLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROVISIONED_PLANS = "provisionedPlans"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SURNAME = "surname"
    USAGE_LOCATION = "usageLocation"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_TYPE = "userType"
    ON_PREMISES_INFO = "onPremisesInfo"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum162(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum163(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATED_CONTACTS = "relatedContacts"
    PRIMARY_ROLE = "primaryRole"
    MIDDLE_NAME = "middleName"
    EXTERNAL_SOURCE = "externalSource"
    RESIDENCE_ADDRESS = "residenceAddress"
    MAILING_ADDRESS = "mailingAddress"
    STUDENT = "student"
    TEACHER = "teacher"
    CREATED_BY = "createdBy"
    ACCOUNT_ENABLED = "accountEnabled"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_PLANS = "assignedPlans"
    BUSINESS_PHONES = "businessPhones"
    DEPARTMENT = "department"
    DISPLAY_NAME = "displayName"
    GIVEN_NAME = "givenName"
    MAIL = "mail"
    MAIL_NICKNAME = "mailNickname"
    MOBILE_PHONE = "mobilePhone"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_PROFILE = "passwordProfile"
    OFFICE_LOCATION = "officeLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROVISIONED_PLANS = "provisionedPlans"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SURNAME = "surname"
    USAGE_LOCATION = "usageLocation"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_TYPE = "userType"
    ON_PREMISES_INFO = "onPremisesInfo"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum164(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum165(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATED_CONTACTS = "relatedContacts"
    PRIMARY_ROLE = "primaryRole"
    MIDDLE_NAME = "middleName"
    EXTERNAL_SOURCE = "externalSource"
    RESIDENCE_ADDRESS = "residenceAddress"
    MAILING_ADDRESS = "mailingAddress"
    STUDENT = "student"
    TEACHER = "teacher"
    CREATED_BY = "createdBy"
    ACCOUNT_ENABLED = "accountEnabled"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_PLANS = "assignedPlans"
    BUSINESS_PHONES = "businessPhones"
    DEPARTMENT = "department"
    DISPLAY_NAME = "displayName"
    GIVEN_NAME = "givenName"
    MAIL = "mail"
    MAIL_NICKNAME = "mailNickname"
    MOBILE_PHONE = "mobilePhone"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_PROFILE = "passwordProfile"
    OFFICE_LOCATION = "officeLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROVISIONED_PLANS = "provisionedPlans"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SURNAME = "surname"
    USAGE_LOCATION = "usageLocation"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_TYPE = "userType"
    ON_PREMISES_INFO = "onPremisesInfo"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum166(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum167(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLASS_ID = "classId"
    CLASS_ID_DESC = "classId desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    INSTRUCTIONS = "instructions"
    INSTRUCTIONS_DESC = "instructions desc"
    CLOSE_DATE_TIME = "closeDateTime"
    CLOSE_DATE_TIME_DESC = "closeDateTime desc"
    DUE_DATE_TIME = "dueDateTime"
    DUE_DATE_TIME_DESC = "dueDateTime desc"
    ASSIGN_DATE_TIME = "assignDateTime"
    ASSIGN_DATE_TIME_DESC = "assignDateTime desc"
    ASSIGNED_DATE_TIME = "assignedDateTime"
    ASSIGNED_DATE_TIME_DESC = "assignedDateTime desc"
    GRADING = "grading"
    GRADING_DESC = "grading desc"
    ASSIGN_TO = "assignTo"
    ASSIGN_TO_DESC = "assignTo desc"
    ALLOW_LATE_SUBMISSIONS = "allowLateSubmissions"
    ALLOW_LATE_SUBMISSIONS_DESC = "allowLateSubmissions desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    ALLOW_STUDENTS_TO_ADD_RESOURCES_TO_SUBMISSION = "allowStudentsToAddResourcesToSubmission"
    ALLOW_STUDENTS_TO_ADD_RESOURCES_TO_SUBMISSION_DESC = "allowStudentsToAddResourcesToSubmission desc"
    STATUS = "status"
    STATUS_DESC = "status desc"

class Enum168(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASS_ID = "classId"
    DISPLAY_NAME = "displayName"
    INSTRUCTIONS = "instructions"
    CLOSE_DATE_TIME = "closeDateTime"
    DUE_DATE_TIME = "dueDateTime"
    ASSIGN_DATE_TIME = "assignDateTime"
    ASSIGNED_DATE_TIME = "assignedDateTime"
    GRADING = "grading"
    ASSIGN_TO = "assignTo"
    ALLOW_LATE_SUBMISSIONS = "allowLateSubmissions"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_BY = "createdBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    ALLOW_STUDENTS_TO_ADD_RESOURCES_TO_SUBMISSION = "allowStudentsToAddResourcesToSubmission"
    STATUS = "status"
    RESOURCES = "resources"
    SUBMISSIONS = "submissions"
    CATEGORIES = "categories"
    RUBRIC = "rubric"

class Enum169(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESOURCES = "resources"
    SUBMISSIONS = "submissions"
    CATEGORIES = "categories"
    RUBRIC = "rubric"

class Enum170(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASS_ID = "classId"
    DISPLAY_NAME = "displayName"
    INSTRUCTIONS = "instructions"
    CLOSE_DATE_TIME = "closeDateTime"
    DUE_DATE_TIME = "dueDateTime"
    ASSIGN_DATE_TIME = "assignDateTime"
    ASSIGNED_DATE_TIME = "assignedDateTime"
    GRADING = "grading"
    ASSIGN_TO = "assignTo"
    ALLOW_LATE_SUBMISSIONS = "allowLateSubmissions"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_BY = "createdBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    ALLOW_STUDENTS_TO_ADD_RESOURCES_TO_SUBMISSION = "allowStudentsToAddResourcesToSubmission"
    STATUS = "status"
    RESOURCES = "resources"
    SUBMISSIONS = "submissions"
    CATEGORIES = "categories"
    RUBRIC = "rubric"

class Enum171(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESOURCES = "resources"
    SUBMISSIONS = "submissions"
    CATEGORIES = "categories"
    RUBRIC = "rubric"

class Enum172(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"

class Enum173(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"

class Enum174(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"

class Enum175(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISTRIBUTE_FOR_STUDENT_WORK = "distributeForStudentWork"
    DISTRIBUTE_FOR_STUDENT_WORK_DESC = "distributeForStudentWork desc"
    RESOURCE = "resource"
    RESOURCE_DESC = "resource desc"

class Enum176(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISTRIBUTE_FOR_STUDENT_WORK = "distributeForStudentWork"
    RESOURCE = "resource"

class Enum177(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISTRIBUTE_FOR_STUDENT_WORK = "distributeForStudentWork"
    RESOURCE = "resource"

class Enum178(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    QUALITIES = "qualities"
    LEVELS = "levels"
    GRADING = "grading"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_BY = "createdBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"

class Enum179(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    RECIPIENT = "recipient"
    RECIPIENT_DESC = "recipient desc"
    STATUS = "status"
    STATUS_DESC = "status desc"
    SUBMITTED_BY = "submittedBy"
    SUBMITTED_BY_DESC = "submittedBy desc"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    SUBMITTED_DATE_TIME_DESC = "submittedDateTime desc"
    UNSUBMITTED_BY = "unsubmittedBy"
    UNSUBMITTED_BY_DESC = "unsubmittedBy desc"
    UNSUBMITTED_DATE_TIME = "unsubmittedDateTime"
    UNSUBMITTED_DATE_TIME_DESC = "unsubmittedDateTime desc"
    RELEASED_BY = "releasedBy"
    RELEASED_BY_DESC = "releasedBy desc"
    RELEASED_DATE_TIME = "releasedDateTime"
    RELEASED_DATE_TIME_DESC = "releasedDateTime desc"
    RETURNED_BY = "returnedBy"
    RETURNED_BY_DESC = "returnedBy desc"
    RETURNED_DATE_TIME = "returnedDateTime"
    RETURNED_DATE_TIME_DESC = "returnedDateTime desc"
    RESOURCES_FOLDER_URL = "resourcesFolderUrl"
    RESOURCES_FOLDER_URL_DESC = "resourcesFolderUrl desc"

class Enum180(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RECIPIENT = "recipient"
    STATUS = "status"
    SUBMITTED_BY = "submittedBy"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    UNSUBMITTED_BY = "unsubmittedBy"
    UNSUBMITTED_DATE_TIME = "unsubmittedDateTime"
    RELEASED_BY = "releasedBy"
    RELEASED_DATE_TIME = "releasedDateTime"
    RETURNED_BY = "returnedBy"
    RETURNED_DATE_TIME = "returnedDateTime"
    RESOURCES_FOLDER_URL = "resourcesFolderUrl"
    RESOURCES = "resources"
    SUBMITTED_RESOURCES = "submittedResources"
    OUTCOMES = "outcomes"

class Enum181(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESOURCES = "resources"
    SUBMITTED_RESOURCES = "submittedResources"
    OUTCOMES = "outcomes"

class Enum182(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RECIPIENT = "recipient"
    STATUS = "status"
    SUBMITTED_BY = "submittedBy"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    UNSUBMITTED_BY = "unsubmittedBy"
    UNSUBMITTED_DATE_TIME = "unsubmittedDateTime"
    RELEASED_BY = "releasedBy"
    RELEASED_DATE_TIME = "releasedDateTime"
    RETURNED_BY = "returnedBy"
    RETURNED_DATE_TIME = "returnedDateTime"
    RESOURCES_FOLDER_URL = "resourcesFolderUrl"
    RESOURCES = "resources"
    SUBMITTED_RESOURCES = "submittedResources"
    OUTCOMES = "outcomes"

class Enum183(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESOURCES = "resources"
    SUBMITTED_RESOURCES = "submittedResources"
    OUTCOMES = "outcomes"

class Enum184(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"

class Enum185(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"

class Enum186(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"

class Enum187(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    RESOURCE = "resource"
    RESOURCE_DESC = "resource desc"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"
    ASSIGNMENT_RESOURCE_URL_DESC = "assignmentResourceUrl desc"

class Enum188(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RESOURCE = "resource"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"

class Enum189(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RESOURCE = "resource"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"

class Enum190(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    RESOURCE = "resource"
    RESOURCE_DESC = "resource desc"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"
    ASSIGNMENT_RESOURCE_URL_DESC = "assignmentResourceUrl desc"

class Enum191(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RESOURCE = "resource"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"

class Enum192(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RESOURCE = "resource"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"

class Enum193(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    MAIL_NICKNAME = "mailNickname"
    MAIL_NICKNAME_DESC = "mailNickname desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CLASS_CODE = "classCode"
    CLASS_CODE_DESC = "classCode desc"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_NAME_DESC = "externalName desc"
    EXTERNAL_ID = "externalId"
    EXTERNAL_ID_DESC = "externalId desc"
    EXTERNAL_SOURCE = "externalSource"
    EXTERNAL_SOURCE_DESC = "externalSource desc"
    GRADE = "grade"
    GRADE_DESC = "grade desc"
    TERM = "term"
    TERM_DESC = "term desc"
    COURSE = "course"
    COURSE_DESC = "course desc"

class Enum194(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    MAIL_NICKNAME = "mailNickname"
    DESCRIPTION = "description"
    CREATED_BY = "createdBy"
    CLASS_CODE = "classCode"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_ID = "externalId"
    EXTERNAL_SOURCE = "externalSource"
    GRADE = "grade"
    TERM = "term"
    COURSE = "course"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum195(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum196(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    MAIL_NICKNAME = "mailNickname"
    DESCRIPTION = "description"
    CREATED_BY = "createdBy"
    CLASS_CODE = "classCode"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_ID = "externalId"
    EXTERNAL_SOURCE = "externalSource"
    GRADE = "grade"
    TERM = "term"
    COURSE = "course"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum197(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum198(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    QUALITIES = "qualities"
    QUALITIES_DESC = "qualities desc"
    LEVELS = "levels"
    LEVELS_DESC = "levels desc"
    GRADING = "grading"
    GRADING_DESC = "grading desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"

class Enum199(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    QUALITIES = "qualities"
    LEVELS = "levels"
    GRADING = "grading"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_BY = "createdBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"

class Enum200(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    QUALITIES = "qualities"
    LEVELS = "levels"
    GRADING = "grading"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_BY = "createdBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"

class Enum201(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    EXTERNAL_SOURCE = "externalSource"
    EXTERNAL_SOURCE_DESC = "externalSource desc"
    PRINCIPAL_EMAIL = "principalEmail"
    PRINCIPAL_EMAIL_DESC = "principalEmail desc"
    PRINCIPAL_NAME = "principalName"
    PRINCIPAL_NAME_DESC = "principalName desc"
    EXTERNAL_PRINCIPAL_ID = "externalPrincipalId"
    EXTERNAL_PRINCIPAL_ID_DESC = "externalPrincipalId desc"
    LOWEST_GRADE = "lowestGrade"
    LOWEST_GRADE_DESC = "lowestGrade desc"
    HIGHEST_GRADE = "highestGrade"
    HIGHEST_GRADE_DESC = "highestGrade desc"
    SCHOOL_NUMBER = "schoolNumber"
    SCHOOL_NUMBER_DESC = "schoolNumber desc"
    EXTERNAL_ID = "externalId"
    EXTERNAL_ID_DESC = "externalId desc"
    PHONE = "phone"
    PHONE_DESC = "phone desc"
    FAX = "fax"
    FAX_DESC = "fax desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    ADDRESS = "address"
    ADDRESS_DESC = "address desc"

class Enum202(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    EXTERNAL_SOURCE = "externalSource"
    PRINCIPAL_EMAIL = "principalEmail"
    PRINCIPAL_NAME = "principalName"
    EXTERNAL_PRINCIPAL_ID = "externalPrincipalId"
    LOWEST_GRADE = "lowestGrade"
    HIGHEST_GRADE = "highestGrade"
    SCHOOL_NUMBER = "schoolNumber"
    EXTERNAL_ID = "externalId"
    PHONE = "phone"
    FAX = "fax"
    CREATED_BY = "createdBy"
    ADDRESS = "address"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum203(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum204(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    EXTERNAL_SOURCE = "externalSource"
    PRINCIPAL_EMAIL = "principalEmail"
    PRINCIPAL_NAME = "principalName"
    EXTERNAL_PRINCIPAL_ID = "externalPrincipalId"
    LOWEST_GRADE = "lowestGrade"
    HIGHEST_GRADE = "highestGrade"
    SCHOOL_NUMBER = "schoolNumber"
    EXTERNAL_ID = "externalId"
    PHONE = "phone"
    FAX = "fax"
    CREATED_BY = "createdBy"
    ADDRESS = "address"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum205(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum206(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    MAIL_NICKNAME = "mailNickname"
    MAIL_NICKNAME_DESC = "mailNickname desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CLASS_CODE = "classCode"
    CLASS_CODE_DESC = "classCode desc"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_NAME_DESC = "externalName desc"
    EXTERNAL_ID = "externalId"
    EXTERNAL_ID_DESC = "externalId desc"
    EXTERNAL_SOURCE = "externalSource"
    EXTERNAL_SOURCE_DESC = "externalSource desc"
    GRADE = "grade"
    GRADE_DESC = "grade desc"
    TERM = "term"
    TERM_DESC = "term desc"
    COURSE = "course"
    COURSE_DESC = "course desc"

class Enum207(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    MAIL_NICKNAME = "mailNickname"
    DESCRIPTION = "description"
    CREATED_BY = "createdBy"
    CLASS_CODE = "classCode"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_ID = "externalId"
    EXTERNAL_SOURCE = "externalSource"
    GRADE = "grade"
    TERM = "term"
    COURSE = "course"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum208(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum209(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    MAIL_NICKNAME = "mailNickname"
    DESCRIPTION = "description"
    CREATED_BY = "createdBy"
    CLASS_CODE = "classCode"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_ID = "externalId"
    EXTERNAL_SOURCE = "externalSource"
    GRADE = "grade"
    TERM = "term"
    COURSE = "course"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum210(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum211(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    SIGN_IN_ACTIVITY = "signInActivity"
    ACCOUNT_ENABLED = "accountEnabled"
    AGE_GROUP = "ageGroup"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_PLANS = "assignedPlans"
    BUSINESS_PHONES = "businessPhones"
    CITY = "city"
    COMPANY_NAME = "companyName"
    CONSENT_PROVIDED_FOR_MINOR = "consentProvidedForMinor"
    COUNTRY = "country"
    CREATED_DATE_TIME = "createdDateTime"
    CREATION_TYPE = "creationType"
    DEPARTMENT = "department"
    DEVICE_KEYS = "deviceKeys"
    DISPLAY_NAME = "displayName"
    EMPLOYEE_ID = "employeeId"
    FAX_NUMBER = "faxNumber"
    GIVEN_NAME = "givenName"
    IDENTITIES = "identities"
    IM_ADDRESSES = "imAddresses"
    IS_RESOURCE_ACCOUNT = "isResourceAccount"
    JOB_TITLE = "jobTitle"
    LAST_PASSWORD_CHANGE_DATE_TIME = "lastPasswordChangeDateTime"
    LEGAL_AGE_GROUP_CLASSIFICATION = "legalAgeGroupClassification"
    LICENSE_ASSIGNMENT_STATES = "licenseAssignmentStates"
    MAIL = "mail"
    MAIL_NICKNAME = "mailNickname"
    MOBILE_PHONE = "mobilePhone"
    ON_PREMISES_DISTINGUISHED_NAME = "onPremisesDistinguishedName"
    ON_PREMISES_EXTENSION_ATTRIBUTES = "onPremisesExtensionAttributes"
    ON_PREMISES_IMMUTABLE_ID = "onPremisesImmutableId"
    ON_PREMISES_LAST_SYNC_DATE_TIME = "onPremisesLastSyncDateTime"
    ON_PREMISES_PROVISIONING_ERRORS = "onPremisesProvisioningErrors"
    ON_PREMISES_SECURITY_IDENTIFIER = "onPremisesSecurityIdentifier"
    ON_PREMISES_SYNC_ENABLED = "onPremisesSyncEnabled"
    ON_PREMISES_DOMAIN_NAME = "onPremisesDomainName"
    ON_PREMISES_SAM_ACCOUNT_NAME = "onPremisesSamAccountName"
    ON_PREMISES_USER_PRINCIPAL_NAME = "onPremisesUserPrincipalName"
    OTHER_MAILS = "otherMails"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_PROFILE = "passwordProfile"
    OFFICE_LOCATION = "officeLocation"
    POSTAL_CODE = "postalCode"
    PREFERRED_DATA_LOCATION = "preferredDataLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROVISIONED_PLANS = "provisionedPlans"
    PROXY_ADDRESSES = "proxyAddresses"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SIGN_IN_SESSIONS_VALID_FROM_DATE_TIME = "signInSessionsValidFromDateTime"
    STATE = "state"
    STREET_ADDRESS = "streetAddress"
    SURNAME = "surname"
    USAGE_LOCATION = "usageLocation"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    EXTERNAL_USER_STATE = "externalUserState"
    EXTERNAL_USER_STATE_CHANGE_DATE_TIME = "externalUserStateChangeDateTime"
    USER_TYPE = "userType"
    MAILBOX_SETTINGS = "mailboxSettings"
    IDENTITY_USER_RISK = "identityUserRisk"
    DEVICE_ENROLLMENT_LIMIT = "deviceEnrollmentLimit"
    ABOUT_ME = "aboutMe"
    BIRTHDAY = "birthday"
    HIRE_DATE = "hireDate"
    INTERESTS = "interests"
    MY_SITE = "mySite"
    PAST_PROJECTS = "pastProjects"
    PREFERRED_NAME = "preferredName"
    RESPONSIBILITIES = "responsibilities"
    SCHOOLS = "schools"
    SKILLS = "skills"
    ANALYTICS = "analytics"
    INFORMATION_PROTECTION = "informationProtection"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    CREATED_OBJECTS = "createdObjects"
    DIRECT_REPORTS = "directReports"
    LICENSE_DETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBER_OF = "memberOf"
    OWNED_DEVICES = "ownedDevices"
    OWNED_OBJECTS = "ownedObjects"
    REGISTERED_DEVICES = "registeredDevices"
    SCOPED_ROLE_MEMBER_OF = "scopedRoleMemberOf"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    OUTLOOK = "outlook"
    MESSAGES = "messages"
    JOINED_GROUPS = "joinedGroups"
    MAIL_FOLDERS = "mailFolders"
    CALENDAR = "calendar"
    CALENDARS = "calendars"
    CALENDAR_GROUPS = "calendarGroups"
    CALENDAR_VIEW = "calendarView"
    EVENTS = "events"
    PEOPLE = "people"
    CONTACTS = "contacts"
    CONTACT_FOLDERS = "contactFolders"
    INFERENCE_CLASSIFICATION = "inferenceClassification"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWED_SITES = "followedSites"
    EXTENSIONS = "extensions"
    APPROVALS = "approvals"
    APP_CONSENT_REQUESTS_FOR_APPROVAL = "appConsentRequestsForApproval"
    AGREEMENT_ACCEPTANCES = "agreementAcceptances"
    DEVICE_ENROLLMENT_CONFIGURATIONS = "deviceEnrollmentConfigurations"
    MANAGED_DEVICES = "managedDevices"
    MANAGED_APP_REGISTRATIONS = "managedAppRegistrations"
    WINDOWS_INFORMATION_PROTECTION_DEVICE_REGISTRATIONS = "windowsInformationProtectionDeviceRegistrations"
    DEVICE_MANAGEMENT_TROUBLESHOOTING_EVENTS = "deviceManagementTroubleshootingEvents"
    MOBILE_APP_INTENT_AND_STATES = "mobileAppIntentAndStates"
    MOBILE_APP_TROUBLESHOOTING_EVENTS = "mobileAppTroubleshootingEvents"
    NOTIFICATIONS = "notifications"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    PROFILE = "profile"
    ACTIVITIES = "activities"
    DEVICES = "devices"
    ONLINE_MEETINGS = "onlineMeetings"
    PRESENCE = "presence"
    AUTHENTICATION = "authentication"
    CHATS = "chats"
    JOINED_TEAMS = "joinedTeams"
    TEAMWORK = "teamwork"

class Enum212(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ANALYTICS = "analytics"
    INFORMATION_PROTECTION = "informationProtection"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    CREATED_OBJECTS = "createdObjects"
    DIRECT_REPORTS = "directReports"
    LICENSE_DETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBER_OF = "memberOf"
    OWNED_DEVICES = "ownedDevices"
    OWNED_OBJECTS = "ownedObjects"
    REGISTERED_DEVICES = "registeredDevices"
    SCOPED_ROLE_MEMBER_OF = "scopedRoleMemberOf"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    OUTLOOK = "outlook"
    MESSAGES = "messages"
    JOINED_GROUPS = "joinedGroups"
    MAIL_FOLDERS = "mailFolders"
    CALENDAR = "calendar"
    CALENDARS = "calendars"
    CALENDAR_GROUPS = "calendarGroups"
    CALENDAR_VIEW = "calendarView"
    EVENTS = "events"
    PEOPLE = "people"
    CONTACTS = "contacts"
    CONTACT_FOLDERS = "contactFolders"
    INFERENCE_CLASSIFICATION = "inferenceClassification"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWED_SITES = "followedSites"
    EXTENSIONS = "extensions"
    APPROVALS = "approvals"
    APP_CONSENT_REQUESTS_FOR_APPROVAL = "appConsentRequestsForApproval"
    AGREEMENT_ACCEPTANCES = "agreementAcceptances"
    DEVICE_ENROLLMENT_CONFIGURATIONS = "deviceEnrollmentConfigurations"
    MANAGED_DEVICES = "managedDevices"
    MANAGED_APP_REGISTRATIONS = "managedAppRegistrations"
    WINDOWS_INFORMATION_PROTECTION_DEVICE_REGISTRATIONS = "windowsInformationProtectionDeviceRegistrations"
    DEVICE_MANAGEMENT_TROUBLESHOOTING_EVENTS = "deviceManagementTroubleshootingEvents"
    MOBILE_APP_INTENT_AND_STATES = "mobileAppIntentAndStates"
    MOBILE_APP_TROUBLESHOOTING_EVENTS = "mobileAppTroubleshootingEvents"
    NOTIFICATIONS = "notifications"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    PROFILE = "profile"
    ACTIVITIES = "activities"
    DEVICES = "devices"
    ONLINE_MEETINGS = "onlineMeetings"
    PRESENCE = "presence"
    AUTHENTICATION = "authentication"
    CHATS = "chats"
    JOINED_TEAMS = "joinedTeams"
    TEAMWORK = "teamwork"

class Enum213(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    EXTERNAL_SOURCE = "externalSource"
    EXTERNAL_SOURCE_DESC = "externalSource desc"
    PRINCIPAL_EMAIL = "principalEmail"
    PRINCIPAL_EMAIL_DESC = "principalEmail desc"
    PRINCIPAL_NAME = "principalName"
    PRINCIPAL_NAME_DESC = "principalName desc"
    EXTERNAL_PRINCIPAL_ID = "externalPrincipalId"
    EXTERNAL_PRINCIPAL_ID_DESC = "externalPrincipalId desc"
    LOWEST_GRADE = "lowestGrade"
    LOWEST_GRADE_DESC = "lowestGrade desc"
    HIGHEST_GRADE = "highestGrade"
    HIGHEST_GRADE_DESC = "highestGrade desc"
    SCHOOL_NUMBER = "schoolNumber"
    SCHOOL_NUMBER_DESC = "schoolNumber desc"
    EXTERNAL_ID = "externalId"
    EXTERNAL_ID_DESC = "externalId desc"
    PHONE = "phone"
    PHONE_DESC = "phone desc"
    FAX = "fax"
    FAX_DESC = "fax desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    ADDRESS = "address"
    ADDRESS_DESC = "address desc"

class Enum214(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    EXTERNAL_SOURCE = "externalSource"
    PRINCIPAL_EMAIL = "principalEmail"
    PRINCIPAL_NAME = "principalName"
    EXTERNAL_PRINCIPAL_ID = "externalPrincipalId"
    LOWEST_GRADE = "lowestGrade"
    HIGHEST_GRADE = "highestGrade"
    SCHOOL_NUMBER = "schoolNumber"
    EXTERNAL_ID = "externalId"
    PHONE = "phone"
    FAX = "fax"
    CREATED_BY = "createdBy"
    ADDRESS = "address"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum215(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum216(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    EXTERNAL_SOURCE = "externalSource"
    PRINCIPAL_EMAIL = "principalEmail"
    PRINCIPAL_NAME = "principalName"
    EXTERNAL_PRINCIPAL_ID = "externalPrincipalId"
    LOWEST_GRADE = "lowestGrade"
    HIGHEST_GRADE = "highestGrade"
    SCHOOL_NUMBER = "schoolNumber"
    EXTERNAL_ID = "externalId"
    PHONE = "phone"
    FAX = "fax"
    CREATED_BY = "createdBy"
    ADDRESS = "address"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum217(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum218(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    VISIBILITY = "visibility"
    MEMBERS = "members"
    SCOPED_ROLE_MEMBERS = "scopedRoleMembers"
    EXTENSIONS = "extensions"

class Enum219(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    MEMBERS = "members"
    SCOPED_ROLE_MEMBERS = "scopedRoleMembers"
    EXTENSIONS = "extensions"

class Enum220(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    MAIL_NICKNAME = "mailNickname"
    MAIL_NICKNAME_DESC = "mailNickname desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CLASS_CODE = "classCode"
    CLASS_CODE_DESC = "classCode desc"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_NAME_DESC = "externalName desc"
    EXTERNAL_ID = "externalId"
    EXTERNAL_ID_DESC = "externalId desc"
    EXTERNAL_SOURCE = "externalSource"
    EXTERNAL_SOURCE_DESC = "externalSource desc"
    GRADE = "grade"
    GRADE_DESC = "grade desc"
    TERM = "term"
    TERM_DESC = "term desc"
    COURSE = "course"
    COURSE_DESC = "course desc"

class Enum221(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    MAIL_NICKNAME = "mailNickname"
    DESCRIPTION = "description"
    CREATED_BY = "createdBy"
    CLASS_CODE = "classCode"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_ID = "externalId"
    EXTERNAL_SOURCE = "externalSource"
    GRADE = "grade"
    TERM = "term"
    COURSE = "course"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum222(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum223(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    MAIL_NICKNAME = "mailNickname"
    DESCRIPTION = "description"
    CREATED_BY = "createdBy"
    CLASS_CODE = "classCode"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_ID = "externalId"
    EXTERNAL_SOURCE = "externalSource"
    GRADE = "grade"
    TERM = "term"
    COURSE = "course"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum224(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum225(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    RELATED_CONTACTS = "relatedContacts"
    RELATED_CONTACTS_DESC = "relatedContacts desc"
    PRIMARY_ROLE = "primaryRole"
    PRIMARY_ROLE_DESC = "primaryRole desc"
    MIDDLE_NAME = "middleName"
    MIDDLE_NAME_DESC = "middleName desc"
    EXTERNAL_SOURCE = "externalSource"
    EXTERNAL_SOURCE_DESC = "externalSource desc"
    RESIDENCE_ADDRESS = "residenceAddress"
    RESIDENCE_ADDRESS_DESC = "residenceAddress desc"
    MAILING_ADDRESS = "mailingAddress"
    MAILING_ADDRESS_DESC = "mailingAddress desc"
    STUDENT = "student"
    STUDENT_DESC = "student desc"
    TEACHER = "teacher"
    TEACHER_DESC = "teacher desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    ACCOUNT_ENABLED = "accountEnabled"
    ACCOUNT_ENABLED_DESC = "accountEnabled desc"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_LICENSES_DESC = "assignedLicenses desc"
    ASSIGNED_PLANS = "assignedPlans"
    ASSIGNED_PLANS_DESC = "assignedPlans desc"
    BUSINESS_PHONES = "businessPhones"
    BUSINESS_PHONES_DESC = "businessPhones desc"
    DEPARTMENT = "department"
    DEPARTMENT_DESC = "department desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    GIVEN_NAME = "givenName"
    GIVEN_NAME_DESC = "givenName desc"
    MAIL = "mail"
    MAIL_DESC = "mail desc"
    MAIL_NICKNAME = "mailNickname"
    MAIL_NICKNAME_DESC = "mailNickname desc"
    MOBILE_PHONE = "mobilePhone"
    MOBILE_PHONE_DESC = "mobilePhone desc"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_POLICIES_DESC = "passwordPolicies desc"
    PASSWORD_PROFILE = "passwordProfile"
    PASSWORD_PROFILE_DESC = "passwordProfile desc"
    OFFICE_LOCATION = "officeLocation"
    OFFICE_LOCATION_DESC = "officeLocation desc"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PREFERRED_LANGUAGE_DESC = "preferredLanguage desc"
    PROVISIONED_PLANS = "provisionedPlans"
    PROVISIONED_PLANS_DESC = "provisionedPlans desc"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME_DESC = "refreshTokensValidFromDateTime desc"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SHOW_IN_ADDRESS_LIST_DESC = "showInAddressList desc"
    SURNAME = "surname"
    SURNAME_DESC = "surname desc"
    USAGE_LOCATION = "usageLocation"
    USAGE_LOCATION_DESC = "usageLocation desc"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_PRINCIPAL_NAME_DESC = "userPrincipalName desc"
    USER_TYPE = "userType"
    USER_TYPE_DESC = "userType desc"
    ON_PREMISES_INFO = "onPremisesInfo"
    ON_PREMISES_INFO_DESC = "onPremisesInfo desc"

class Enum226(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATED_CONTACTS = "relatedContacts"
    PRIMARY_ROLE = "primaryRole"
    MIDDLE_NAME = "middleName"
    EXTERNAL_SOURCE = "externalSource"
    RESIDENCE_ADDRESS = "residenceAddress"
    MAILING_ADDRESS = "mailingAddress"
    STUDENT = "student"
    TEACHER = "teacher"
    CREATED_BY = "createdBy"
    ACCOUNT_ENABLED = "accountEnabled"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_PLANS = "assignedPlans"
    BUSINESS_PHONES = "businessPhones"
    DEPARTMENT = "department"
    DISPLAY_NAME = "displayName"
    GIVEN_NAME = "givenName"
    MAIL = "mail"
    MAIL_NICKNAME = "mailNickname"
    MOBILE_PHONE = "mobilePhone"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_PROFILE = "passwordProfile"
    OFFICE_LOCATION = "officeLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROVISIONED_PLANS = "provisionedPlans"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SURNAME = "surname"
    USAGE_LOCATION = "usageLocation"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_TYPE = "userType"
    ON_PREMISES_INFO = "onPremisesInfo"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum227(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum228(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATED_CONTACTS = "relatedContacts"
    PRIMARY_ROLE = "primaryRole"
    MIDDLE_NAME = "middleName"
    EXTERNAL_SOURCE = "externalSource"
    RESIDENCE_ADDRESS = "residenceAddress"
    MAILING_ADDRESS = "mailingAddress"
    STUDENT = "student"
    TEACHER = "teacher"
    CREATED_BY = "createdBy"
    ACCOUNT_ENABLED = "accountEnabled"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_PLANS = "assignedPlans"
    BUSINESS_PHONES = "businessPhones"
    DEPARTMENT = "department"
    DISPLAY_NAME = "displayName"
    GIVEN_NAME = "givenName"
    MAIL = "mail"
    MAIL_NICKNAME = "mailNickname"
    MOBILE_PHONE = "mobilePhone"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_PROFILE = "passwordProfile"
    OFFICE_LOCATION = "officeLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROVISIONED_PLANS = "provisionedPlans"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SURNAME = "surname"
    USAGE_LOCATION = "usageLocation"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_TYPE = "userType"
    ON_PREMISES_INFO = "onPremisesInfo"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum229(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum230(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DATA_PROVIDER = "dataProvider"
    DATA_PROVIDER_DESC = "dataProvider desc"
    IDENTITY_SYNCHRONIZATION_CONFIGURATION = "identitySynchronizationConfiguration"
    IDENTITY_SYNCHRONIZATION_CONFIGURATION_DESC = "identitySynchronizationConfiguration desc"
    LICENSES_TO_ASSIGN = "licensesToAssign"
    LICENSES_TO_ASSIGN_DESC = "licensesToAssign desc"
    STATE = "state"
    STATE_DESC = "state desc"
    HANDLE_SPECIAL_CHARACTER_CONSTRAINT = "handleSpecialCharacterConstraint"
    HANDLE_SPECIAL_CHARACTER_CONSTRAINT_DESC = "handleSpecialCharacterConstraint desc"

class Enum231(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DATA_PROVIDER = "dataProvider"
    IDENTITY_SYNCHRONIZATION_CONFIGURATION = "identitySynchronizationConfiguration"
    LICENSES_TO_ASSIGN = "licensesToAssign"
    STATE = "state"
    HANDLE_SPECIAL_CHARACTER_CONSTRAINT = "handleSpecialCharacterConstraint"
    ERRORS = "errors"
    PROFILE_STATUS = "profileStatus"

class Enum232(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ERRORS = "errors"
    PROFILE_STATUS = "profileStatus"

class Enum233(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DATA_PROVIDER = "dataProvider"
    IDENTITY_SYNCHRONIZATION_CONFIGURATION = "identitySynchronizationConfiguration"
    LICENSES_TO_ASSIGN = "licensesToAssign"
    STATE = "state"
    HANDLE_SPECIAL_CHARACTER_CONSTRAINT = "handleSpecialCharacterConstraint"
    ERRORS = "errors"
    PROFILE_STATUS = "profileStatus"

class Enum234(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ERRORS = "errors"
    PROFILE_STATUS = "profileStatus"

class Enum235(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    ENTRY_TYPE = "entryType"
    ENTRY_TYPE_DESC = "entryType desc"
    ERROR_CODE = "errorCode"
    ERROR_CODE_DESC = "errorCode desc"
    ERROR_MESSAGE = "errorMessage"
    ERROR_MESSAGE_DESC = "errorMessage desc"
    JOINING_VALUE = "joiningValue"
    JOINING_VALUE_DESC = "joiningValue desc"
    RECORDED_DATE_TIME = "recordedDateTime"
    RECORDED_DATE_TIME_DESC = "recordedDateTime desc"
    REPORTABLE_IDENTIFIER = "reportableIdentifier"
    REPORTABLE_IDENTIFIER_DESC = "reportableIdentifier desc"

class Enum236(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ENTRY_TYPE = "entryType"
    ERROR_CODE = "errorCode"
    ERROR_MESSAGE = "errorMessage"
    JOINING_VALUE = "joiningValue"
    RECORDED_DATE_TIME = "recordedDateTime"
    REPORTABLE_IDENTIFIER = "reportableIdentifier"

class Enum237(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ENTRY_TYPE = "entryType"
    ERROR_CODE = "errorCode"
    ERROR_MESSAGE = "errorMessage"
    JOINING_VALUE = "joiningValue"
    RECORDED_DATE_TIME = "recordedDateTime"
    REPORTABLE_IDENTIFIER = "reportableIdentifier"

class Enum238(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    STATUS = "status"
    LAST_SYNCHRONIZATION_DATE_TIME = "lastSynchronizationDateTime"

class Enum239(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    RELATED_CONTACTS = "relatedContacts"
    RELATED_CONTACTS_DESC = "relatedContacts desc"
    PRIMARY_ROLE = "primaryRole"
    PRIMARY_ROLE_DESC = "primaryRole desc"
    MIDDLE_NAME = "middleName"
    MIDDLE_NAME_DESC = "middleName desc"
    EXTERNAL_SOURCE = "externalSource"
    EXTERNAL_SOURCE_DESC = "externalSource desc"
    RESIDENCE_ADDRESS = "residenceAddress"
    RESIDENCE_ADDRESS_DESC = "residenceAddress desc"
    MAILING_ADDRESS = "mailingAddress"
    MAILING_ADDRESS_DESC = "mailingAddress desc"
    STUDENT = "student"
    STUDENT_DESC = "student desc"
    TEACHER = "teacher"
    TEACHER_DESC = "teacher desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    ACCOUNT_ENABLED = "accountEnabled"
    ACCOUNT_ENABLED_DESC = "accountEnabled desc"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_LICENSES_DESC = "assignedLicenses desc"
    ASSIGNED_PLANS = "assignedPlans"
    ASSIGNED_PLANS_DESC = "assignedPlans desc"
    BUSINESS_PHONES = "businessPhones"
    BUSINESS_PHONES_DESC = "businessPhones desc"
    DEPARTMENT = "department"
    DEPARTMENT_DESC = "department desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    GIVEN_NAME = "givenName"
    GIVEN_NAME_DESC = "givenName desc"
    MAIL = "mail"
    MAIL_DESC = "mail desc"
    MAIL_NICKNAME = "mailNickname"
    MAIL_NICKNAME_DESC = "mailNickname desc"
    MOBILE_PHONE = "mobilePhone"
    MOBILE_PHONE_DESC = "mobilePhone desc"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_POLICIES_DESC = "passwordPolicies desc"
    PASSWORD_PROFILE = "passwordProfile"
    PASSWORD_PROFILE_DESC = "passwordProfile desc"
    OFFICE_LOCATION = "officeLocation"
    OFFICE_LOCATION_DESC = "officeLocation desc"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PREFERRED_LANGUAGE_DESC = "preferredLanguage desc"
    PROVISIONED_PLANS = "provisionedPlans"
    PROVISIONED_PLANS_DESC = "provisionedPlans desc"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME_DESC = "refreshTokensValidFromDateTime desc"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SHOW_IN_ADDRESS_LIST_DESC = "showInAddressList desc"
    SURNAME = "surname"
    SURNAME_DESC = "surname desc"
    USAGE_LOCATION = "usageLocation"
    USAGE_LOCATION_DESC = "usageLocation desc"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_PRINCIPAL_NAME_DESC = "userPrincipalName desc"
    USER_TYPE = "userType"
    USER_TYPE_DESC = "userType desc"
    ON_PREMISES_INFO = "onPremisesInfo"
    ON_PREMISES_INFO_DESC = "onPremisesInfo desc"

class Enum240(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATED_CONTACTS = "relatedContacts"
    PRIMARY_ROLE = "primaryRole"
    MIDDLE_NAME = "middleName"
    EXTERNAL_SOURCE = "externalSource"
    RESIDENCE_ADDRESS = "residenceAddress"
    MAILING_ADDRESS = "mailingAddress"
    STUDENT = "student"
    TEACHER = "teacher"
    CREATED_BY = "createdBy"
    ACCOUNT_ENABLED = "accountEnabled"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_PLANS = "assignedPlans"
    BUSINESS_PHONES = "businessPhones"
    DEPARTMENT = "department"
    DISPLAY_NAME = "displayName"
    GIVEN_NAME = "givenName"
    MAIL = "mail"
    MAIL_NICKNAME = "mailNickname"
    MOBILE_PHONE = "mobilePhone"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_PROFILE = "passwordProfile"
    OFFICE_LOCATION = "officeLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROVISIONED_PLANS = "provisionedPlans"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SURNAME = "surname"
    USAGE_LOCATION = "usageLocation"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_TYPE = "userType"
    ON_PREMISES_INFO = "onPremisesInfo"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum241(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum242(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RELATED_CONTACTS = "relatedContacts"
    PRIMARY_ROLE = "primaryRole"
    MIDDLE_NAME = "middleName"
    EXTERNAL_SOURCE = "externalSource"
    RESIDENCE_ADDRESS = "residenceAddress"
    MAILING_ADDRESS = "mailingAddress"
    STUDENT = "student"
    TEACHER = "teacher"
    CREATED_BY = "createdBy"
    ACCOUNT_ENABLED = "accountEnabled"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_PLANS = "assignedPlans"
    BUSINESS_PHONES = "businessPhones"
    DEPARTMENT = "department"
    DISPLAY_NAME = "displayName"
    GIVEN_NAME = "givenName"
    MAIL = "mail"
    MAIL_NICKNAME = "mailNickname"
    MOBILE_PHONE = "mobilePhone"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_PROFILE = "passwordProfile"
    OFFICE_LOCATION = "officeLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROVISIONED_PLANS = "provisionedPlans"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SURNAME = "surname"
    USAGE_LOCATION = "usageLocation"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    USER_TYPE = "userType"
    ON_PREMISES_INFO = "onPremisesInfo"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum243(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    RUBRICS = "rubrics"
    CLASSES = "classes"
    TAUGHT_CLASSES = "taughtClasses"
    SCHOOLS = "schools"
    USER = "user"

class Enum244(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    CLASS_ID = "classId"
    CLASS_ID_DESC = "classId desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    INSTRUCTIONS = "instructions"
    INSTRUCTIONS_DESC = "instructions desc"
    CLOSE_DATE_TIME = "closeDateTime"
    CLOSE_DATE_TIME_DESC = "closeDateTime desc"
    DUE_DATE_TIME = "dueDateTime"
    DUE_DATE_TIME_DESC = "dueDateTime desc"
    ASSIGN_DATE_TIME = "assignDateTime"
    ASSIGN_DATE_TIME_DESC = "assignDateTime desc"
    ASSIGNED_DATE_TIME = "assignedDateTime"
    ASSIGNED_DATE_TIME_DESC = "assignedDateTime desc"
    GRADING = "grading"
    GRADING_DESC = "grading desc"
    ASSIGN_TO = "assignTo"
    ASSIGN_TO_DESC = "assignTo desc"
    ALLOW_LATE_SUBMISSIONS = "allowLateSubmissions"
    ALLOW_LATE_SUBMISSIONS_DESC = "allowLateSubmissions desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    ALLOW_STUDENTS_TO_ADD_RESOURCES_TO_SUBMISSION = "allowStudentsToAddResourcesToSubmission"
    ALLOW_STUDENTS_TO_ADD_RESOURCES_TO_SUBMISSION_DESC = "allowStudentsToAddResourcesToSubmission desc"
    STATUS = "status"
    STATUS_DESC = "status desc"

class Enum245(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASS_ID = "classId"
    DISPLAY_NAME = "displayName"
    INSTRUCTIONS = "instructions"
    CLOSE_DATE_TIME = "closeDateTime"
    DUE_DATE_TIME = "dueDateTime"
    ASSIGN_DATE_TIME = "assignDateTime"
    ASSIGNED_DATE_TIME = "assignedDateTime"
    GRADING = "grading"
    ASSIGN_TO = "assignTo"
    ALLOW_LATE_SUBMISSIONS = "allowLateSubmissions"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_BY = "createdBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    ALLOW_STUDENTS_TO_ADD_RESOURCES_TO_SUBMISSION = "allowStudentsToAddResourcesToSubmission"
    STATUS = "status"
    RESOURCES = "resources"
    SUBMISSIONS = "submissions"
    CATEGORIES = "categories"
    RUBRIC = "rubric"

class Enum246(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESOURCES = "resources"
    SUBMISSIONS = "submissions"
    CATEGORIES = "categories"
    RUBRIC = "rubric"

class Enum247(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    CLASS_ID = "classId"
    DISPLAY_NAME = "displayName"
    INSTRUCTIONS = "instructions"
    CLOSE_DATE_TIME = "closeDateTime"
    DUE_DATE_TIME = "dueDateTime"
    ASSIGN_DATE_TIME = "assignDateTime"
    ASSIGNED_DATE_TIME = "assignedDateTime"
    GRADING = "grading"
    ASSIGN_TO = "assignTo"
    ALLOW_LATE_SUBMISSIONS = "allowLateSubmissions"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_BY = "createdBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"
    ALLOW_STUDENTS_TO_ADD_RESOURCES_TO_SUBMISSION = "allowStudentsToAddResourcesToSubmission"
    STATUS = "status"
    RESOURCES = "resources"
    SUBMISSIONS = "submissions"
    CATEGORIES = "categories"
    RUBRIC = "rubric"

class Enum248(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESOURCES = "resources"
    SUBMISSIONS = "submissions"
    CATEGORIES = "categories"
    RUBRIC = "rubric"

class Enum249(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"

class Enum250(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"

class Enum251(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"

class Enum252(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISTRIBUTE_FOR_STUDENT_WORK = "distributeForStudentWork"
    DISTRIBUTE_FOR_STUDENT_WORK_DESC = "distributeForStudentWork desc"
    RESOURCE = "resource"
    RESOURCE_DESC = "resource desc"

class Enum253(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISTRIBUTE_FOR_STUDENT_WORK = "distributeForStudentWork"
    RESOURCE = "resource"

class Enum254(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISTRIBUTE_FOR_STUDENT_WORK = "distributeForStudentWork"
    RESOURCE = "resource"

class Enum255(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    QUALITIES = "qualities"
    LEVELS = "levels"
    GRADING = "grading"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_BY = "createdBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"

class Enum256(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    RECIPIENT = "recipient"
    RECIPIENT_DESC = "recipient desc"
    STATUS = "status"
    STATUS_DESC = "status desc"
    SUBMITTED_BY = "submittedBy"
    SUBMITTED_BY_DESC = "submittedBy desc"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    SUBMITTED_DATE_TIME_DESC = "submittedDateTime desc"
    UNSUBMITTED_BY = "unsubmittedBy"
    UNSUBMITTED_BY_DESC = "unsubmittedBy desc"
    UNSUBMITTED_DATE_TIME = "unsubmittedDateTime"
    UNSUBMITTED_DATE_TIME_DESC = "unsubmittedDateTime desc"
    RELEASED_BY = "releasedBy"
    RELEASED_BY_DESC = "releasedBy desc"
    RELEASED_DATE_TIME = "releasedDateTime"
    RELEASED_DATE_TIME_DESC = "releasedDateTime desc"
    RETURNED_BY = "returnedBy"
    RETURNED_BY_DESC = "returnedBy desc"
    RETURNED_DATE_TIME = "returnedDateTime"
    RETURNED_DATE_TIME_DESC = "returnedDateTime desc"
    RESOURCES_FOLDER_URL = "resourcesFolderUrl"
    RESOURCES_FOLDER_URL_DESC = "resourcesFolderUrl desc"

class Enum257(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RECIPIENT = "recipient"
    STATUS = "status"
    SUBMITTED_BY = "submittedBy"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    UNSUBMITTED_BY = "unsubmittedBy"
    UNSUBMITTED_DATE_TIME = "unsubmittedDateTime"
    RELEASED_BY = "releasedBy"
    RELEASED_DATE_TIME = "releasedDateTime"
    RETURNED_BY = "returnedBy"
    RETURNED_DATE_TIME = "returnedDateTime"
    RESOURCES_FOLDER_URL = "resourcesFolderUrl"
    RESOURCES = "resources"
    SUBMITTED_RESOURCES = "submittedResources"
    OUTCOMES = "outcomes"

class Enum258(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESOURCES = "resources"
    SUBMITTED_RESOURCES = "submittedResources"
    OUTCOMES = "outcomes"

class Enum259(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RECIPIENT = "recipient"
    STATUS = "status"
    SUBMITTED_BY = "submittedBy"
    SUBMITTED_DATE_TIME = "submittedDateTime"
    UNSUBMITTED_BY = "unsubmittedBy"
    UNSUBMITTED_DATE_TIME = "unsubmittedDateTime"
    RELEASED_BY = "releasedBy"
    RELEASED_DATE_TIME = "releasedDateTime"
    RETURNED_BY = "returnedBy"
    RETURNED_DATE_TIME = "returnedDateTime"
    RESOURCES_FOLDER_URL = "resourcesFolderUrl"
    RESOURCES = "resources"
    SUBMITTED_RESOURCES = "submittedResources"
    OUTCOMES = "outcomes"

class Enum260(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    RESOURCES = "resources"
    SUBMITTED_RESOURCES = "submittedResources"
    OUTCOMES = "outcomes"

class Enum261(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"

class Enum262(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"

class Enum263(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"

class Enum264(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    RESOURCE = "resource"
    RESOURCE_DESC = "resource desc"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"
    ASSIGNMENT_RESOURCE_URL_DESC = "assignmentResourceUrl desc"

class Enum265(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RESOURCE = "resource"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"

class Enum266(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RESOURCE = "resource"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"

class Enum267(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    RESOURCE = "resource"
    RESOURCE_DESC = "resource desc"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"
    ASSIGNMENT_RESOURCE_URL_DESC = "assignmentResourceUrl desc"

class Enum268(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RESOURCE = "resource"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"

class Enum269(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    RESOURCE = "resource"
    ASSIGNMENT_RESOURCE_URL = "assignmentResourceUrl"

class Enum270(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    MAIL_NICKNAME = "mailNickname"
    MAIL_NICKNAME_DESC = "mailNickname desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CLASS_CODE = "classCode"
    CLASS_CODE_DESC = "classCode desc"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_NAME_DESC = "externalName desc"
    EXTERNAL_ID = "externalId"
    EXTERNAL_ID_DESC = "externalId desc"
    EXTERNAL_SOURCE = "externalSource"
    EXTERNAL_SOURCE_DESC = "externalSource desc"
    GRADE = "grade"
    GRADE_DESC = "grade desc"
    TERM = "term"
    TERM_DESC = "term desc"
    COURSE = "course"
    COURSE_DESC = "course desc"

class Enum271(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    MAIL_NICKNAME = "mailNickname"
    DESCRIPTION = "description"
    CREATED_BY = "createdBy"
    CLASS_CODE = "classCode"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_ID = "externalId"
    EXTERNAL_SOURCE = "externalSource"
    GRADE = "grade"
    TERM = "term"
    COURSE = "course"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum272(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum273(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    MAIL_NICKNAME = "mailNickname"
    DESCRIPTION = "description"
    CREATED_BY = "createdBy"
    CLASS_CODE = "classCode"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_ID = "externalId"
    EXTERNAL_SOURCE = "externalSource"
    GRADE = "grade"
    TERM = "term"
    COURSE = "course"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum274(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum275(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    QUALITIES = "qualities"
    QUALITIES_DESC = "qualities desc"
    LEVELS = "levels"
    LEVELS_DESC = "levels desc"
    GRADING = "grading"
    GRADING_DESC = "grading desc"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_DATE_TIME_DESC = "createdDateTime desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_DATE_TIME_DESC = "lastModifiedDateTime desc"
    LAST_MODIFIED_BY = "lastModifiedBy"
    LAST_MODIFIED_BY_DESC = "lastModifiedBy desc"

class Enum276(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    QUALITIES = "qualities"
    LEVELS = "levels"
    GRADING = "grading"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_BY = "createdBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"

class Enum277(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    QUALITIES = "qualities"
    LEVELS = "levels"
    GRADING = "grading"
    CREATED_DATE_TIME = "createdDateTime"
    CREATED_BY = "createdBy"
    LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime"
    LAST_MODIFIED_BY = "lastModifiedBy"

class Enum278(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    EXTERNAL_SOURCE = "externalSource"
    EXTERNAL_SOURCE_DESC = "externalSource desc"
    PRINCIPAL_EMAIL = "principalEmail"
    PRINCIPAL_EMAIL_DESC = "principalEmail desc"
    PRINCIPAL_NAME = "principalName"
    PRINCIPAL_NAME_DESC = "principalName desc"
    EXTERNAL_PRINCIPAL_ID = "externalPrincipalId"
    EXTERNAL_PRINCIPAL_ID_DESC = "externalPrincipalId desc"
    LOWEST_GRADE = "lowestGrade"
    LOWEST_GRADE_DESC = "lowestGrade desc"
    HIGHEST_GRADE = "highestGrade"
    HIGHEST_GRADE_DESC = "highestGrade desc"
    SCHOOL_NUMBER = "schoolNumber"
    SCHOOL_NUMBER_DESC = "schoolNumber desc"
    EXTERNAL_ID = "externalId"
    EXTERNAL_ID_DESC = "externalId desc"
    PHONE = "phone"
    PHONE_DESC = "phone desc"
    FAX = "fax"
    FAX_DESC = "fax desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    ADDRESS = "address"
    ADDRESS_DESC = "address desc"

class Enum279(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    EXTERNAL_SOURCE = "externalSource"
    PRINCIPAL_EMAIL = "principalEmail"
    PRINCIPAL_NAME = "principalName"
    EXTERNAL_PRINCIPAL_ID = "externalPrincipalId"
    LOWEST_GRADE = "lowestGrade"
    HIGHEST_GRADE = "highestGrade"
    SCHOOL_NUMBER = "schoolNumber"
    EXTERNAL_ID = "externalId"
    PHONE = "phone"
    FAX = "fax"
    CREATED_BY = "createdBy"
    ADDRESS = "address"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum280(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum281(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    DESCRIPTION = "description"
    EXTERNAL_SOURCE = "externalSource"
    PRINCIPAL_EMAIL = "principalEmail"
    PRINCIPAL_NAME = "principalName"
    EXTERNAL_PRINCIPAL_ID = "externalPrincipalId"
    LOWEST_GRADE = "lowestGrade"
    HIGHEST_GRADE = "highestGrade"
    SCHOOL_NUMBER = "schoolNumber"
    EXTERNAL_ID = "externalId"
    PHONE = "phone"
    FAX = "fax"
    CREATED_BY = "createdBy"
    ADDRESS = "address"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum282(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    CLASSES = "classes"
    USERS = "users"
    ADMINISTRATIVE_UNIT = "administrativeUnit"

class Enum283(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    MAIL_NICKNAME = "mailNickname"
    MAIL_NICKNAME_DESC = "mailNickname desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CLASS_CODE = "classCode"
    CLASS_CODE_DESC = "classCode desc"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_NAME_DESC = "externalName desc"
    EXTERNAL_ID = "externalId"
    EXTERNAL_ID_DESC = "externalId desc"
    EXTERNAL_SOURCE = "externalSource"
    EXTERNAL_SOURCE_DESC = "externalSource desc"
    GRADE = "grade"
    GRADE_DESC = "grade desc"
    TERM = "term"
    TERM_DESC = "term desc"
    COURSE = "course"
    COURSE_DESC = "course desc"

class Enum284(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    MAIL_NICKNAME = "mailNickname"
    DESCRIPTION = "description"
    CREATED_BY = "createdBy"
    CLASS_CODE = "classCode"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_ID = "externalId"
    EXTERNAL_SOURCE = "externalSource"
    GRADE = "grade"
    TERM = "term"
    COURSE = "course"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum285(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum286(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    MAIL_NICKNAME = "mailNickname"
    DESCRIPTION = "description"
    CREATED_BY = "createdBy"
    CLASS_CODE = "classCode"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_ID = "externalId"
    EXTERNAL_SOURCE = "externalSource"
    GRADE = "grade"
    TERM = "term"
    COURSE = "course"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum287(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Enum288(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DELETED_DATE_TIME = "deletedDateTime"
    SIGN_IN_ACTIVITY = "signInActivity"
    ACCOUNT_ENABLED = "accountEnabled"
    AGE_GROUP = "ageGroup"
    ASSIGNED_LICENSES = "assignedLicenses"
    ASSIGNED_PLANS = "assignedPlans"
    BUSINESS_PHONES = "businessPhones"
    CITY = "city"
    COMPANY_NAME = "companyName"
    CONSENT_PROVIDED_FOR_MINOR = "consentProvidedForMinor"
    COUNTRY = "country"
    CREATED_DATE_TIME = "createdDateTime"
    CREATION_TYPE = "creationType"
    DEPARTMENT = "department"
    DEVICE_KEYS = "deviceKeys"
    DISPLAY_NAME = "displayName"
    EMPLOYEE_ID = "employeeId"
    FAX_NUMBER = "faxNumber"
    GIVEN_NAME = "givenName"
    IDENTITIES = "identities"
    IM_ADDRESSES = "imAddresses"
    IS_RESOURCE_ACCOUNT = "isResourceAccount"
    JOB_TITLE = "jobTitle"
    LAST_PASSWORD_CHANGE_DATE_TIME = "lastPasswordChangeDateTime"
    LEGAL_AGE_GROUP_CLASSIFICATION = "legalAgeGroupClassification"
    LICENSE_ASSIGNMENT_STATES = "licenseAssignmentStates"
    MAIL = "mail"
    MAIL_NICKNAME = "mailNickname"
    MOBILE_PHONE = "mobilePhone"
    ON_PREMISES_DISTINGUISHED_NAME = "onPremisesDistinguishedName"
    ON_PREMISES_EXTENSION_ATTRIBUTES = "onPremisesExtensionAttributes"
    ON_PREMISES_IMMUTABLE_ID = "onPremisesImmutableId"
    ON_PREMISES_LAST_SYNC_DATE_TIME = "onPremisesLastSyncDateTime"
    ON_PREMISES_PROVISIONING_ERRORS = "onPremisesProvisioningErrors"
    ON_PREMISES_SECURITY_IDENTIFIER = "onPremisesSecurityIdentifier"
    ON_PREMISES_SYNC_ENABLED = "onPremisesSyncEnabled"
    ON_PREMISES_DOMAIN_NAME = "onPremisesDomainName"
    ON_PREMISES_SAM_ACCOUNT_NAME = "onPremisesSamAccountName"
    ON_PREMISES_USER_PRINCIPAL_NAME = "onPremisesUserPrincipalName"
    OTHER_MAILS = "otherMails"
    PASSWORD_POLICIES = "passwordPolicies"
    PASSWORD_PROFILE = "passwordProfile"
    OFFICE_LOCATION = "officeLocation"
    POSTAL_CODE = "postalCode"
    PREFERRED_DATA_LOCATION = "preferredDataLocation"
    PREFERRED_LANGUAGE = "preferredLanguage"
    PROVISIONED_PLANS = "provisionedPlans"
    PROXY_ADDRESSES = "proxyAddresses"
    REFRESH_TOKENS_VALID_FROM_DATE_TIME = "refreshTokensValidFromDateTime"
    SHOW_IN_ADDRESS_LIST = "showInAddressList"
    SIGN_IN_SESSIONS_VALID_FROM_DATE_TIME = "signInSessionsValidFromDateTime"
    STATE = "state"
    STREET_ADDRESS = "streetAddress"
    SURNAME = "surname"
    USAGE_LOCATION = "usageLocation"
    USER_PRINCIPAL_NAME = "userPrincipalName"
    EXTERNAL_USER_STATE = "externalUserState"
    EXTERNAL_USER_STATE_CHANGE_DATE_TIME = "externalUserStateChangeDateTime"
    USER_TYPE = "userType"
    MAILBOX_SETTINGS = "mailboxSettings"
    IDENTITY_USER_RISK = "identityUserRisk"
    DEVICE_ENROLLMENT_LIMIT = "deviceEnrollmentLimit"
    ABOUT_ME = "aboutMe"
    BIRTHDAY = "birthday"
    HIRE_DATE = "hireDate"
    INTERESTS = "interests"
    MY_SITE = "mySite"
    PAST_PROJECTS = "pastProjects"
    PREFERRED_NAME = "preferredName"
    RESPONSIBILITIES = "responsibilities"
    SCHOOLS = "schools"
    SKILLS = "skills"
    ANALYTICS = "analytics"
    INFORMATION_PROTECTION = "informationProtection"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    CREATED_OBJECTS = "createdObjects"
    DIRECT_REPORTS = "directReports"
    LICENSE_DETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBER_OF = "memberOf"
    OWNED_DEVICES = "ownedDevices"
    OWNED_OBJECTS = "ownedObjects"
    REGISTERED_DEVICES = "registeredDevices"
    SCOPED_ROLE_MEMBER_OF = "scopedRoleMemberOf"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    OUTLOOK = "outlook"
    MESSAGES = "messages"
    JOINED_GROUPS = "joinedGroups"
    MAIL_FOLDERS = "mailFolders"
    CALENDAR = "calendar"
    CALENDARS = "calendars"
    CALENDAR_GROUPS = "calendarGroups"
    CALENDAR_VIEW = "calendarView"
    EVENTS = "events"
    PEOPLE = "people"
    CONTACTS = "contacts"
    CONTACT_FOLDERS = "contactFolders"
    INFERENCE_CLASSIFICATION = "inferenceClassification"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWED_SITES = "followedSites"
    EXTENSIONS = "extensions"
    APPROVALS = "approvals"
    APP_CONSENT_REQUESTS_FOR_APPROVAL = "appConsentRequestsForApproval"
    AGREEMENT_ACCEPTANCES = "agreementAcceptances"
    DEVICE_ENROLLMENT_CONFIGURATIONS = "deviceEnrollmentConfigurations"
    MANAGED_DEVICES = "managedDevices"
    MANAGED_APP_REGISTRATIONS = "managedAppRegistrations"
    WINDOWS_INFORMATION_PROTECTION_DEVICE_REGISTRATIONS = "windowsInformationProtectionDeviceRegistrations"
    DEVICE_MANAGEMENT_TROUBLESHOOTING_EVENTS = "deviceManagementTroubleshootingEvents"
    MOBILE_APP_INTENT_AND_STATES = "mobileAppIntentAndStates"
    MOBILE_APP_TROUBLESHOOTING_EVENTS = "mobileAppTroubleshootingEvents"
    NOTIFICATIONS = "notifications"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    PROFILE = "profile"
    ACTIVITIES = "activities"
    DEVICES = "devices"
    ONLINE_MEETINGS = "onlineMeetings"
    PRESENCE = "presence"
    AUTHENTICATION = "authentication"
    CHATS = "chats"
    JOINED_TEAMS = "joinedTeams"
    TEAMWORK = "teamwork"

class Enum289(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ANALYTICS = "analytics"
    INFORMATION_PROTECTION = "informationProtection"
    APP_ROLE_ASSIGNMENTS = "appRoleAssignments"
    CREATED_OBJECTS = "createdObjects"
    DIRECT_REPORTS = "directReports"
    LICENSE_DETAILS = "licenseDetails"
    MANAGER = "manager"
    MEMBER_OF = "memberOf"
    OWNED_DEVICES = "ownedDevices"
    OWNED_OBJECTS = "ownedObjects"
    REGISTERED_DEVICES = "registeredDevices"
    SCOPED_ROLE_MEMBER_OF = "scopedRoleMemberOf"
    TRANSITIVE_MEMBER_OF = "transitiveMemberOf"
    OUTLOOK = "outlook"
    MESSAGES = "messages"
    JOINED_GROUPS = "joinedGroups"
    MAIL_FOLDERS = "mailFolders"
    CALENDAR = "calendar"
    CALENDARS = "calendars"
    CALENDAR_GROUPS = "calendarGroups"
    CALENDAR_VIEW = "calendarView"
    EVENTS = "events"
    PEOPLE = "people"
    CONTACTS = "contacts"
    CONTACT_FOLDERS = "contactFolders"
    INFERENCE_CLASSIFICATION = "inferenceClassification"
    PHOTO = "photo"
    PHOTOS = "photos"
    DRIVE = "drive"
    DRIVES = "drives"
    FOLLOWED_SITES = "followedSites"
    EXTENSIONS = "extensions"
    APPROVALS = "approvals"
    APP_CONSENT_REQUESTS_FOR_APPROVAL = "appConsentRequestsForApproval"
    AGREEMENT_ACCEPTANCES = "agreementAcceptances"
    DEVICE_ENROLLMENT_CONFIGURATIONS = "deviceEnrollmentConfigurations"
    MANAGED_DEVICES = "managedDevices"
    MANAGED_APP_REGISTRATIONS = "managedAppRegistrations"
    WINDOWS_INFORMATION_PROTECTION_DEVICE_REGISTRATIONS = "windowsInformationProtectionDeviceRegistrations"
    DEVICE_MANAGEMENT_TROUBLESHOOTING_EVENTS = "deviceManagementTroubleshootingEvents"
    MOBILE_APP_INTENT_AND_STATES = "mobileAppIntentAndStates"
    MOBILE_APP_TROUBLESHOOTING_EVENTS = "mobileAppTroubleshootingEvents"
    NOTIFICATIONS = "notifications"
    PLANNER = "planner"
    INSIGHTS = "insights"
    SETTINGS = "settings"
    ONENOTE = "onenote"
    PROFILE = "profile"
    ACTIVITIES = "activities"
    DEVICES = "devices"
    ONLINE_MEETINGS = "onlineMeetings"
    PRESENCE = "presence"
    AUTHENTICATION = "authentication"
    CHATS = "chats"
    JOINED_TEAMS = "joinedTeams"
    TEAMWORK = "teamwork"

class Get0ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    SYNCHRONIZATION_PROFILES = "synchronizationProfiles"
    CLASSES = "classes"
    SCHOOLS = "schools"
    USERS = "users"
    ME = "me"

class Get1ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    SYNCHRONIZATION_PROFILES = "synchronizationProfiles"
    CLASSES = "classes"
    SCHOOLS = "schools"
    USERS = "users"
    ME = "me"

class Get2ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Get5ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    ID_DESC = "id desc"
    DISPLAY_NAME = "displayName"
    DISPLAY_NAME_DESC = "displayName desc"
    MAIL_NICKNAME = "mailNickname"
    MAIL_NICKNAME_DESC = "mailNickname desc"
    DESCRIPTION = "description"
    DESCRIPTION_DESC = "description desc"
    CREATED_BY = "createdBy"
    CREATED_BY_DESC = "createdBy desc"
    CLASS_CODE = "classCode"
    CLASS_CODE_DESC = "classCode desc"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_NAME_DESC = "externalName desc"
    EXTERNAL_ID = "externalId"
    EXTERNAL_ID_DESC = "externalId desc"
    EXTERNAL_SOURCE = "externalSource"
    EXTERNAL_SOURCE_DESC = "externalSource desc"
    GRADE = "grade"
    GRADE_DESC = "grade desc"
    TERM = "term"
    TERM_DESC = "term desc"
    COURSE = "course"
    COURSE_DESC = "course desc"

class Get6ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ID = "id"
    DISPLAY_NAME = "displayName"
    MAIL_NICKNAME = "mailNickname"
    DESCRIPTION = "description"
    CREATED_BY = "createdBy"
    CLASS_CODE = "classCode"
    EXTERNAL_NAME = "externalName"
    EXTERNAL_ID = "externalId"
    EXTERNAL_SOURCE = "externalSource"
    GRADE = "grade"
    TERM = "term"
    COURSE = "course"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class Get7ItemsItem(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ASTERISK = "*"
    ASSIGNMENTS = "assignments"
    ASSIGNMENT_CATEGORIES = "assignmentCategories"
    MEMBERS = "members"
    TEACHERS = "teachers"
    SCHOOLS = "schools"
    GROUP = "group"

class MicrosoftGraphAccessLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EVERYONE = "everyone"
    INVITED = "invited"
    LOCKED = "locked"
    SAME_ENTERPRISE = "sameEnterprise"
    SAME_ENTERPRISE_AND_FEDERATED = "sameEnterpriseAndFederated"

class MicrosoftGraphActionState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    PENDING = "pending"
    CANCELED = "canceled"
    ACTIVE = "active"
    DONE = "done"
    FAILED = "failed"
    NOT_SUPPORTED = "notSupported"

class MicrosoftGraphAgreementAcceptanceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACCEPTED = "accepted"
    DECLINED = "declined"

class MicrosoftGraphAllowedAudiences(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ME = "me"
    FAMILY = "family"
    CONTACTS = "contacts"
    GROUP_MEMBERS = "groupMembers"
    ORGANIZATION = "organization"
    FEDERATED_ORGANIZATIONS = "federatedOrganizations"
    EVERYONE = "everyone"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphAnalyticsActivityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EMAIL = "Email"
    MEETING = "Meeting"
    FOCUS = "Focus"
    CHAT = "Chat"
    CALL = "Call"

class MicrosoftGraphAnniversaryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BIRTHDAY = "birthday"
    WEDDING = "wedding"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphApplicationMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MANUAL = "manual"
    AUTOMATIC = "automatic"
    RECOMMENDED = "recommended"

class MicrosoftGraphAppLogUploadState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    COMPLETED = "completed"
    FAILED = "failed"

class MicrosoftGraphAttendeeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    REQUIRED = "required"
    OPTIONAL = "optional"
    RESOURCE = "resource"

class MicrosoftGraphAuthenticationMethodSignInState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_SUPPORTED = "notSupported"
    NOT_ALLOWED_BY_POLICY = "notAllowedByPolicy"
    NOT_ENABLED = "notEnabled"
    PHONE_NUMBER_NOT_UNIQUE = "phoneNumberNotUnique"
    READY = "ready"
    NOT_CONFIGURED = "notConfigured"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphAuthenticationPhoneType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MOBILE = "mobile"
    ALTERNATE_MOBILE = "alternateMobile"
    OFFICE = "office"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphAutomaticRepliesStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISABLED = "disabled"
    ALWAYS_ENABLED = "alwaysEnabled"
    SCHEDULED = "scheduled"

class MicrosoftGraphBodyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TEXT = "text"
    HTML = "html"

class MicrosoftGraphCalendarColor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LIGHT_BLUE = "lightBlue"
    LIGHT_GREEN = "lightGreen"
    LIGHT_ORANGE = "lightOrange"
    LIGHT_GRAY = "lightGray"
    LIGHT_YELLOW = "lightYellow"
    LIGHT_TEAL = "lightTeal"
    LIGHT_PINK = "lightPink"
    LIGHT_BROWN = "lightBrown"
    LIGHT_RED = "lightRed"
    MAX_COLOR = "maxColor"
    AUTO = "auto"

class MicrosoftGraphCalendarRoleType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    FREE_BUSY_READ = "freeBusyRead"
    LIMITED_READ = "limitedRead"
    READ = "read"
    WRITE = "write"
    DELEGATE_WITHOUT_PRIVATE_EVENT_ACCESS = "delegateWithoutPrivateEventAccess"
    DELEGATE_WITH_PRIVATE_EVENT_ACCESS = "delegateWithPrivateEventAccess"
    CUSTOM = "custom"

class MicrosoftGraphCategoryColor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRESET0 = "preset0"
    PRESET1 = "preset1"
    PRESET2 = "preset2"
    PRESET3 = "preset3"
    PRESET4 = "preset4"
    PRESET5 = "preset5"
    PRESET6 = "preset6"
    PRESET7 = "preset7"
    PRESET8 = "preset8"
    PRESET9 = "preset9"
    PRESET10 = "preset10"
    PRESET11 = "preset11"
    PRESET12 = "preset12"
    PRESET13 = "preset13"
    PRESET14 = "preset14"
    PRESET15 = "preset15"
    PRESET16 = "preset16"
    PRESET17 = "preset17"
    PRESET18 = "preset18"
    PRESET19 = "preset19"
    PRESET20 = "preset20"
    PRESET21 = "preset21"
    PRESET22 = "preset22"
    PRESET23 = "preset23"
    PRESET24 = "preset24"
    NONE = "none"

class MicrosoftGraphChannelMembershipType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STANDARD = "standard"
    PRIVATE = "private"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphChassisType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    DESKTOP = "desktop"
    LAPTOP = "laptop"
    WORKS_WORKSTATION = "worksWorkstation"
    ENTERPRISE_SERVER = "enterpriseServer"
    PHONE = "phone"
    TABLET = "tablet"
    MOBILE_OTHER = "mobileOther"
    MOBILE_UNKNOWN = "mobileUnknown"

class MicrosoftGraphChatMessageImportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"

class MicrosoftGraphChatMessagePolicyViolationDlpActionTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    NOTIFY_SENDER = "notifySender"
    BLOCK_ACCESS = "blockAccess"
    BLOCK_ACCESS_EXTERNAL = "blockAccessExternal"

class MicrosoftGraphChatMessagePolicyViolationUserActionTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    OVERRIDE = "override"
    REPORT_FALSE_POSITIVE = "reportFalsePositive"

class MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ALLOW_FALSE_POSITIVE_OVERRIDE = "allowFalsePositiveOverride"
    ALLOW_OVERRIDE_WITHOUT_JUSTIFICATION = "allowOverrideWithoutJustification"
    ALLOW_OVERRIDE_WITH_JUSTIFICATION = "allowOverrideWithJustification"

class MicrosoftGraphChatMessageType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MESSAGE = "message"
    CHAT_EVENT = "chatEvent"
    TYPING = "typing"

class MicrosoftGraphComplianceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPLIANT = "compliant"
    NONCOMPLIANT = "noncompliant"
    CONFLICT = "conflict"
    ERROR = "error"
    IN_GRACE_PERIOD = "inGracePeriod"
    CONFIG_MANAGER = "configManager"

class MicrosoftGraphComplianceStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    NOT_APPLICABLE = "notApplicable"
    COMPLIANT = "compliant"
    REMEDIATED = "remediated"
    NON_COMPLIANT = "nonCompliant"
    ERROR = "error"
    CONFLICT = "conflict"
    NOT_ASSIGNED = "notAssigned"

class MicrosoftGraphConfigurationManagerClientState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    INSTALLED = "installed"
    HEALTHY = "healthy"
    INSTALL_FAILED = "installFailed"
    UPDATE_FAILED = "updateFailed"
    COMMUNICATION_ERROR = "communicationError"

class MicrosoftGraphContactRelationship(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PARENT = "parent"
    RELATIVE = "relative"
    AIDE = "aide"
    DOCTOR = "doctor"
    GUARDIAN = "guardian"
    CHILD = "child"
    OTHER = "other"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphDayOfWeek(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUNDAY = "sunday"
    MONDAY = "monday"
    TUESDAY = "tuesday"
    WEDNESDAY = "wednesday"
    THURSDAY = "thursday"
    FRIDAY = "friday"
    SATURDAY = "saturday"

class MicrosoftGraphDelegateMeetingMessageDeliveryOptions(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SEND_TO_DELEGATE_AND_INFORMATION_TO_PRINCIPAL = "sendToDelegateAndInformationToPrincipal"
    SEND_TO_DELEGATE_AND_PRINCIPAL = "sendToDelegateAndPrincipal"
    SEND_TO_DELEGATE_ONLY = "sendToDelegateOnly"

class MicrosoftGraphDeviceAndAppManagementAssignmentSource(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DIRECT = "direct"
    POLICY_SETS = "policySets"

class MicrosoftGraphDeviceEnrollmentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    USER_ENROLLMENT = "userEnrollment"
    DEVICE_ENROLLMENT_MANAGER = "deviceEnrollmentManager"
    APPLE_BULK_WITH_USER = "appleBulkWithUser"
    APPLE_BULK_WITHOUT_USER = "appleBulkWithoutUser"
    WINDOWS_AZURE_AD_JOIN = "windowsAzureADJoin"
    WINDOWS_BULK_USERLESS = "windowsBulkUserless"
    WINDOWS_AUTO_ENROLLMENT = "windowsAutoEnrollment"
    WINDOWS_BULK_AZURE_DOMAIN_JOIN = "windowsBulkAzureDomainJoin"
    WINDOWS_CO_MANAGEMENT = "windowsCoManagement"
    APPLE_USER_ENROLLMENT = "appleUserEnrollment"
    APPLE_USER_ENROLLMENT_WITH_SERVICE_ACCOUNT = "appleUserEnrollmentWithServiceAccount"
    AZURE_AD_JOIN_USING_AZURE_VM_EXTENSION = "azureAdJoinUsingAzureVmExtension"

class MicrosoftGraphDeviceGuardLocalSystemAuthorityCredentialGuardState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    RUNNING = "running"
    REBOOT_REQUIRED = "rebootRequired"
    NOT_LICENSED = "notLicensed"
    NOT_CONFIGURED = "notConfigured"
    VIRTUALIZATION_BASED_SECURITY_NOT_RUNNING = "virtualizationBasedSecurityNotRunning"

class MicrosoftGraphDeviceGuardVirtualizationBasedSecurityHardwareRequirementState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MEET_HARDWARE_REQUIREMENTS = "meetHardwareRequirements"
    SECURE_BOOT_REQUIRED = "secureBootRequired"
    DMA_PROTECTION_REQUIRED = "dmaProtectionRequired"
    HYPER_V_NOT_SUPPORTED_FOR_GUEST_VM = "hyperVNotSupportedForGuestVM"
    HYPER_V_NOT_AVAILABLE = "hyperVNotAvailable"

class MicrosoftGraphDeviceGuardVirtualizationBasedSecurityState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    RUNNING = "running"
    REBOOT_REQUIRED = "rebootRequired"
    REQUIRE64_BIT_ARCHITECTURE = "require64BitArchitecture"
    NOT_LICENSED = "notLicensed"
    NOT_CONFIGURED = "notConfigured"
    DOES_NOT_MEET_HARDWARE_REQUIREMENTS = "doesNotMeetHardwareRequirements"
    OTHER = "other"

class MicrosoftGraphDeviceManagementExchangeAccessState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    ALLOWED = "allowed"
    BLOCKED = "blocked"
    QUARANTINED = "quarantined"

class MicrosoftGraphDeviceManagementExchangeAccessStateReason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    UNKNOWN = "unknown"
    EXCHANGE_GLOBAL_RULE = "exchangeGlobalRule"
    EXCHANGE_INDIVIDUAL_RULE = "exchangeIndividualRule"
    EXCHANGE_DEVICE_RULE = "exchangeDeviceRule"
    EXCHANGE_UPGRADE = "exchangeUpgrade"
    EXCHANGE_MAILBOX_POLICY = "exchangeMailboxPolicy"
    OTHER = "other"
    COMPLIANT = "compliant"
    NOT_COMPLIANT = "notCompliant"
    NOT_ENROLLED = "notEnrolled"
    UNKNOWN_LOCATION = "unknownLocation"
    MFA_REQUIRED = "mfaRequired"
    AZURE_AD_BLOCK_DUE_TO_ACCESS_POLICY = "azureADBlockDueToAccessPolicy"
    COMPROMISED_PASSWORD = "compromisedPassword"
    DEVICE_NOT_KNOWN_WITH_MANAGED_APP = "deviceNotKnownWithManagedApp"

class MicrosoftGraphDeviceRegistrationState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_REGISTERED = "notRegistered"
    REGISTERED = "registered"
    REVOKED = "revoked"
    KEY_CONFLICT = "keyConflict"
    APPROVAL_PENDING = "approvalPending"
    CERTIFICATE_RESET = "certificateReset"
    NOT_REGISTERED_PENDING_ENROLLMENT = "notRegisteredPendingEnrollment"
    UNKNOWN = "unknown"

class MicrosoftGraphDeviceType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DESKTOP = "desktop"
    WINDOWS_RT = "windowsRT"
    WIN_MO6 = "winMO6"
    NOKIA = "nokia"
    WINDOWS_PHONE = "windowsPhone"
    MAC = "mac"
    WIN_CE = "winCE"
    WIN_EMBEDDED = "winEmbedded"
    I_PHONE = "iPhone"
    I_PAD = "iPad"
    I_POD = "iPod"
    ANDROID = "android"
    I_SOC_CONSUMER = "iSocConsumer"
    UNIX = "unix"
    MAC_MDM = "macMDM"
    HOLO_LENS = "holoLens"
    SURFACE_HUB = "surfaceHub"
    ANDROID_FOR_WORK = "androidForWork"
    ANDROID_ENTERPRISE = "androidEnterprise"
    WINDOWS10_X = "windows10x"
    BLACKBERRY = "blackberry"
    PALM = "palm"
    UNKNOWN = "unknown"

class MicrosoftGraphEducationAssignmentStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DRAFT = "draft"
    PUBLISHED = "published"
    ASSIGNED = "assigned"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphEducationExternalSource(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SIS = "sis"
    MANUAL = "manual"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphEducationGender(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FEMALE = "female"
    MALE = "male"
    OTHER = "other"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphEducationSubmissionStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    WORKING = "working"
    SUBMITTED = "submitted"
    RELEASED = "released"
    RETURNED = "returned"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphEducationSynchronizationProfileState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DELETING = "deleting"
    DELETION_FAILED = "deletionFailed"
    PROVISIONING_FAILED = "provisioningFailed"
    PROVISIONED = "provisioned"
    PROVISIONING = "provisioning"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphEducationSynchronizationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PAUSED = "paused"
    IN_PROGRESS = "inProgress"
    SUCCESS = "success"
    ERROR = "error"
    VALIDATION_ERROR = "validationError"
    QUARANTINED = "quarantined"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphEducationUserRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STUDENT = "student"
    TEACHER = "teacher"
    NONE = "none"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"
    FACULTY = "faculty"

class MicrosoftGraphEmailType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    WORK = "work"
    PERSONAL = "personal"
    MAIN = "main"
    OTHER = "other"

class MicrosoftGraphEventType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SINGLE_INSTANCE = "singleInstance"
    OCCURRENCE = "occurrence"
    EXCEPTION = "exception"
    SERIES_MASTER = "seriesMaster"

class MicrosoftGraphExternalAudienceScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CONTACTS_ONLY = "contactsOnly"
    ALL = "all"

class MicrosoftGraphFollowupFlagStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_FLAGGED = "notFlagged"
    COMPLETE = "complete"
    FLAGGED = "flagged"

class MicrosoftGraphFreeBusyStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FREE = "free"
    TENTATIVE = "tentative"
    BUSY = "busy"
    OOF = "oof"
    WORKING_ELSEWHERE = "workingElsewhere"
    UNKNOWN = "unknown"

class MicrosoftGraphGiphyRatingType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STRICT = "strict"
    MODERATE = "moderate"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphGroupAccessType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    PRIVATE = "private"
    SECRET = "secret"
    PUBLIC = "public"

class MicrosoftGraphImportance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"

class MicrosoftGraphInferenceClassificationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FOCUSED = "focused"
    OTHER = "other"

class MicrosoftGraphLanguageProficiencyLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ELEMENTARY = "elementary"
    CONVERSATIONAL = "conversational"
    LIMITED_WORKING = "limitedWorking"
    PROFESSIONAL_WORKING = "professionalWorking"
    FULL_PROFESSIONAL = "fullProfessional"
    NATIVE_OR_BILINGUAL = "nativeOrBilingual"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphLocationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "default"
    CONFERENCE_ROOM = "conferenceRoom"
    HOME_ADDRESS = "homeAddress"
    BUSINESS_ADDRESS = "businessAddress"
    GEO_COORDINATES = "geoCoordinates"
    STREET_ADDRESS = "streetAddress"
    HOTEL = "hotel"
    RESTAURANT = "restaurant"
    LOCAL_BUSINESS = "localBusiness"
    POSTAL_ADDRESS = "postalAddress"

class MicrosoftGraphLocationUniqueIdType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    LOCATION_STORE = "locationStore"
    DIRECTORY = "directory"
    PRIVATE = "private"
    BING = "bing"

class MicrosoftGraphLongRunningOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOTSTARTED = "notstarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"

class MicrosoftGraphLostModeState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISABLED = "disabled"
    ENABLED = "enabled"

class MicrosoftGraphManagedAppFlaggedReason(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ROOTED_DEVICE = "rootedDevice"
    ANDROID_BOOTLOADER_UNLOCKED = "androidBootloaderUnlocked"
    ANDROID_FACTORY_ROM_MODIFIED = "androidFactoryRomModified"

class MicrosoftGraphManagedDeviceArchitecture(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    X86 = "x86"
    X64 = "x64"
    ARM = "arm"
    AR_M64 = "arM64"

class MicrosoftGraphManagedDeviceOwnerType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPANY = "company"
    PERSONAL = "personal"

class MicrosoftGraphManagedDevicePartnerReportedHealthState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    ACTIVATED = "activated"
    DEACTIVATED = "deactivated"
    SECURED = "secured"
    LOW_SEVERITY = "lowSeverity"
    MEDIUM_SEVERITY = "mediumSeverity"
    HIGH_SEVERITY = "highSeverity"
    UNRESPONSIVE = "unresponsive"
    COMPROMISED = "compromised"
    MISCONFIGURED = "misconfigured"

class MicrosoftGraphManagementAgentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EAS = "eas"
    MDM = "mdm"
    EAS_MDM = "easMdm"
    INTUNE_CLIENT = "intuneClient"
    EAS_INTUNE_CLIENT = "easIntuneClient"
    CONFIGURATION_MANAGER_CLIENT = "configurationManagerClient"
    CONFIGURATION_MANAGER_CLIENT_MDM = "configurationManagerClientMdm"
    CONFIGURATION_MANAGER_CLIENT_MDM_EAS = "configurationManagerClientMdmEas"
    UNKNOWN = "unknown"
    JAMF = "jamf"
    GOOGLE_CLOUD_DEVICE_POLICY_CONTROLLER = "googleCloudDevicePolicyController"
    MICROSOFT365_MANAGED_MDM = "microsoft365ManagedMdm"
    WINDOWS_MANAGEMENT_CLOUD_API = "windowsManagementCloudApi"

class MicrosoftGraphManagementState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MANAGED = "managed"
    RETIRE_PENDING = "retirePending"
    RETIRE_FAILED = "retireFailed"
    WIPE_PENDING = "wipePending"
    WIPE_FAILED = "wipeFailed"
    UNHEALTHY = "unhealthy"
    DELETE_PENDING = "deletePending"
    RETIRE_ISSUED = "retireIssued"
    WIPE_ISSUED = "wipeIssued"
    WIPE_CANCELED = "wipeCanceled"
    RETIRE_CANCELED = "retireCanceled"
    DISCOVERED = "discovered"

class MicrosoftGraphMeetingCapabilities(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    QUESTION_AND_ANSWER = "questionAndAnswer"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphMessageActionFlag(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANY = "any"
    CALL = "call"
    DO_NOT_FORWARD = "doNotForward"
    FOLLOW_UP = "followUp"
    FYI = "fyi"
    FORWARD = "forward"
    NO_RESPONSE_NECESSARY = "noResponseNecessary"
    READ = "read"
    REPLY = "reply"
    REPLY_TO_ALL = "replyToAll"
    REVIEW = "review"

class MicrosoftGraphMobileAppIntent(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AVAILABLE = "available"
    NOT_AVAILABLE = "notAvailable"
    REQUIRED_INSTALL = "requiredInstall"
    REQUIRED_UNINSTALL = "requiredUninstall"
    REQUIRED_AND_AVAILABLE_INSTALL = "requiredAndAvailableInstall"
    AVAILABLE_INSTALL_WITHOUT_ENROLLMENT = "availableInstallWithoutEnrollment"
    EXCLUDE = "exclude"

class MicrosoftGraphOnenoteUserRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OWNER = "Owner"
    CONTRIBUTOR = "Contributor"
    READER = "Reader"
    NONE = "None"

class MicrosoftGraphOnlineMeetingProviderType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    SKYPE_FOR_BUSINESS = "skypeForBusiness"
    SKYPE_FOR_CONSUMER = "skypeForConsumer"
    TEAMS_FOR_BUSINESS = "teamsForBusiness"

class MicrosoftGraphOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "NotStarted"
    RUNNING = "Running"
    COMPLETED = "Completed"
    FAILED = "Failed"

class MicrosoftGraphOwnerType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    COMPANY = "company"
    PERSONAL = "personal"

class MicrosoftGraphPersonRelationship(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MANAGER = "manager"
    COLLEAGUE = "colleague"
    DIRECT_REPORT = "directReport"
    DOT_LINE_REPORT = "dotLineReport"
    ASSISTANT = "assistant"
    DOT_LINE_MANAGER = "dotLineManager"
    ALTERNATE_CONTACT = "alternateContact"
    FRIEND = "friend"
    SPOUSE = "spouse"
    SIBLING = "sibling"
    CHILD = "child"
    PARENT = "parent"
    SPONSOR = "sponsor"
    EMERGENCY_CONTACT = "emergencyContact"
    OTHER = "other"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphPhoneType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    HOME = "home"
    BUSINESS = "business"
    MOBILE = "mobile"
    OTHER = "other"
    ASSISTANT = "assistant"
    HOME_FAX = "homeFax"
    BUSINESS_FAX = "businessFax"
    OTHER_FAX = "otherFax"
    PAGER = "pager"
    RADIO = "radio"

class MicrosoftGraphPhysicalAddressType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    HOME = "home"
    BUSINESS = "business"
    OTHER = "other"

class MicrosoftGraphPlannerPreviewType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUTOMATIC = "automatic"
    NO_PREVIEW = "noPreview"
    CHECKLIST = "checklist"
    DESCRIPTION = "description"
    REFERENCE = "reference"

class MicrosoftGraphPolicyPlatformType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ANDROID = "android"
    ANDROID_FOR_WORK = "androidForWork"
    I_OS = "iOS"
    MAC_OS = "macOS"
    WINDOWS_PHONE81 = "windowsPhone81"
    WINDOWS81_AND_LATER = "windows81AndLater"
    WINDOWS10_AND_LATER = "windows10AndLater"
    ANDROID_WORK_PROFILE = "androidWorkProfile"
    WINDOWS10_X_PROFILE = "windows10XProfile"
    ALL = "all"

class MicrosoftGraphPriority(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "None"
    HIGH = "High"
    LOW = "Low"

class MicrosoftGraphRecurrencePatternType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DAILY = "daily"
    WEEKLY = "weekly"
    ABSOLUTE_MONTHLY = "absoluteMonthly"
    RELATIVE_MONTHLY = "relativeMonthly"
    ABSOLUTE_YEARLY = "absoluteYearly"
    RELATIVE_YEARLY = "relativeYearly"

class MicrosoftGraphRecurrenceRangeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    END_DATE = "endDate"
    NO_END = "noEnd"
    NUMBERED = "numbered"

class MicrosoftGraphResponseType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    ORGANIZER = "organizer"
    TENTATIVELY_ACCEPTED = "tentativelyAccepted"
    ACCEPTED = "accepted"
    DECLINED = "declined"
    NOT_RESPONDED = "notResponded"

class MicrosoftGraphResultantAppState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INSTALLED = "installed"
    FAILED = "failed"
    NOT_INSTALLED = "notInstalled"
    UNINSTALL_FAILED = "uninstallFailed"
    PENDING_INSTALL = "pendingInstall"
    UNKNOWN = "unknown"
    NOT_APPLICABLE = "notApplicable"

class MicrosoftGraphScheduleChangeRequestActor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SENDER = "sender"
    RECIPIENT = "recipient"
    MANAGER = "manager"
    SYSTEM = "system"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphScheduleChangeState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    APPROVED = "approved"
    DECLINED = "declined"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphScheduleEntityTheme(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    WHITE = "white"
    BLUE = "blue"
    GREEN = "green"
    PURPLE = "purple"
    PINK = "pink"
    YELLOW = "yellow"
    GRAY = "gray"
    DARK_BLUE = "darkBlue"
    DARK_GREEN = "darkGreen"
    DARK_PURPLE = "darkPurple"
    DARK_PINK = "darkPink"
    DARK_YELLOW = "darkYellow"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphSecurityBaselineComplianceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    SECURE = "secure"
    NOT_APPLICABLE = "notApplicable"
    NOT_SECURE = "notSecure"
    ERROR = "error"
    CONFLICT = "conflict"

class MicrosoftGraphSensitivity(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NORMAL = "normal"
    PERSONAL = "personal"
    PRIVATE = "private"
    CONFIDENTIAL = "confidential"

class MicrosoftGraphSensitivityLabelTarget(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EMAIL = "email"
    SITE = "site"
    UNIFIED_GROUP = "unifiedGroup"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphSkillProficiencyLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ELEMENTARY = "elementary"
    LIMITED_WORKING = "limitedWorking"
    GENERAL_PROFESSIONAL = "generalProfessional"
    ADVANCED_PROFESSIONAL = "advancedProfessional"
    EXPERT = "expert"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "active"
    UPDATED = "updated"
    DELETED = "deleted"
    IGNORED = "ignored"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTaskStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NOT_STARTED = "notStarted"
    IN_PROGRESS = "inProgress"
    COMPLETED = "completed"
    WAITING_ON_OTHERS = "waitingOnOthers"
    DEFERRED = "deferred"

class MicrosoftGraphTeamsAppDistributionMethod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    STORE = "store"
    ORGANIZATION = "organization"
    SIDELOADED = "sideloaded"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamsAsyncOperationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    NOT_STARTED = "notStarted"
    IN_PROGRESS = "inProgress"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamsAsyncOperationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    CLONE_TEAM = "cloneTeam"
    ARCHIVE_TEAM = "archiveTeam"
    UNARCHIVE_TEAM = "unarchiveTeam"
    CREATE_TEAM = "createTeam"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamSpecialization(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    EDUCATION_STANDARD = "educationStandard"
    EDUCATION_CLASS = "educationClass"
    EDUCATION_PROFESSIONAL_LEARNING_COMMUNITY = "educationProfessionalLearningCommunity"
    EDUCATION_STAFF = "educationStaff"
    HEALTHCARE_STANDARD = "healthcareStandard"
    HEALTHCARE_CARE_COORDINATION = "healthcareCareCoordination"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphTeamVisibilityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PRIVATE = "private"
    PUBLIC = "public"
    HIDDEN_MEMBERSHIP = "hiddenMembership"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphThreatAssessmentContentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    MAIL = "mail"
    URL = "url"
    FILE = "file"

class MicrosoftGraphThreatAssessmentRequestSource(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNDEFINED = "undefined"
    USER = "user"
    ADMINISTRATOR = "administrator"

class MicrosoftGraphThreatAssessmentResultType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CHECK_POLICY = "checkPolicy"
    RESCAN = "rescan"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphThreatAssessmentStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PENDING = "pending"
    COMPLETED = "completed"

class MicrosoftGraphThreatCategory(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNDEFINED = "undefined"
    SPAM = "spam"
    PHISHING = "phishing"
    MALWARE = "malware"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphThreatExpectedAssessment(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    BLOCK = "block"
    UNBLOCK = "unblock"

class MicrosoftGraphTimeOffReasonIconType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    NONE = "none"
    CAR = "car"
    CALENDAR = "calendar"
    RUNNING = "running"
    PLANE = "plane"
    FIRST_AID = "firstAid"
    DOCTOR = "doctor"
    NOT_WORKING = "notWorking"
    CLOCK = "clock"
    JURY_DUTY = "juryDuty"
    GLOBE = "globe"
    CUP = "cup"
    PHONE = "phone"
    WEATHER = "weather"
    UMBRELLA = "umbrella"
    PIGGY_BANK = "piggyBank"
    DOG = "dog"
    CAKE = "cake"
    TRAFFIC_CONE = "trafficCone"
    PIN = "pin"
    SUNNY = "sunny"
    UNKNOWN_FUTURE_VALUE = "unknownFutureValue"

class MicrosoftGraphUserRiskLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    NONE = "none"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"

class MicrosoftGraphWebsiteType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OTHER = "other"
    HOME = "home"
    WORK = "work"
    BLOG = "blog"
    PROFILE = "profile"

class MicrosoftGraphWeekIndex(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FIRST = "first"
    SECOND = "second"
    THIRD = "third"
    FOURTH = "fourth"
    LAST = "last"

class MicrosoftGraphWindowsDeviceHealthState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CLEAN = "clean"
    FULL_SCAN_PENDING = "fullScanPending"
    REBOOT_PENDING = "rebootPending"
    MANUAL_STEPS_PENDING = "manualStepsPending"
    OFFLINE_SCAN_PENDING = "offlineScanPending"
    CRITICAL = "critical"

class MicrosoftGraphWindowsMalwareCategory(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    INVALID = "invalid"
    ADWARE = "adware"
    SPYWARE = "spyware"
    PASSWORD_STEALER = "passwordStealer"
    TROJAN_DOWNLOADER = "trojanDownloader"
    WORM = "worm"
    BACKDOOR = "backdoor"
    REMOTE_ACCESS_TROJAN = "remoteAccessTrojan"
    TROJAN = "trojan"
    EMAIL_FLOODER = "emailFlooder"
    KEYLOGGER = "keylogger"
    DIALER = "dialer"
    MONITORING_SOFTWARE = "monitoringSoftware"
    BROWSER_MODIFIER = "browserModifier"
    COOKIE = "cookie"
    BROWSER_PLUGIN = "browserPlugin"
    AOL_EXPLOIT = "aolExploit"
    NUKER = "nuker"
    SECURITY_DISABLER = "securityDisabler"
    JOKE_PROGRAM = "jokeProgram"
    HOSTILE_ACTIVE_X_CONTROL = "hostileActiveXControl"
    SOFTWARE_BUNDLER = "softwareBundler"
    STEALTH_NOTIFIER = "stealthNotifier"
    SETTINGS_MODIFIER = "settingsModifier"
    TOOL_BAR = "toolBar"
    REMOTE_CONTROL_SOFTWARE = "remoteControlSoftware"
    TROJAN_FTP = "trojanFtp"
    POTENTIAL_UNWANTED_SOFTWARE = "potentialUnwantedSoftware"
    ICQ_EXPLOIT = "icqExploit"
    TROJAN_TELNET = "trojanTelnet"
    EXPLOIT = "exploit"
    FILESHARING_PROGRAM = "filesharingProgram"
    MALWARE_CREATION_TOOL = "malwareCreationTool"
    TOOL = "tool"
    TROJAN_DENIAL_OF_SERVICE = "trojanDenialOfService"
    TROJAN_DROPPER = "trojanDropper"
    TROJAN_MASS_MAILER = "trojanMassMailer"
    TROJAN_MONITORING_SOFTWARE = "trojanMonitoringSoftware"
    TROJAN_PROXY_SERVER = "trojanProxyServer"
    VIRUS = "virus"
    KNOWN = "known"
    UNKNOWN = "unknown"
    SPP = "spp"
    BEHAVIOR = "behavior"
    VULNERABILITY = "vulnerability"
    POLICY = "policy"
    ENTERPRISE_UNWANTED_SOFTWARE = "enterpriseUnwantedSoftware"
    RANSOM = "ransom"
    HIPS_RULE = "hipsRule"

class MicrosoftGraphWindowsMalwareExecutionState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    BLOCKED = "blocked"
    ALLOWED = "allowed"
    RUNNING = "running"
    NOT_RUNNING = "notRunning"

class MicrosoftGraphWindowsMalwareSeverity(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    LOW = "low"
    MODERATE = "moderate"
    HIGH = "high"
    SEVERE = "severe"

class MicrosoftGraphWindowsMalwareState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    UNKNOWN = "unknown"
    DETECTED = "detected"
    CLEANED = "cleaned"
    QUARANTINED = "quarantined"
    REMOVED = "removed"
    ALLOWED = "allowed"
    BLOCKED = "blocked"
    CLEAN_FAILED = "cleanFailed"
    QUARANTINE_FAILED = "quarantineFailed"
    REMOVE_FAILED = "removeFailed"
    ALLOW_FAILED = "allowFailed"
    ABANDONED = "abandoned"
    BLOCK_FAILED = "blockFailed"

class MicrosoftGraphWindowsMalwareThreatState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVE = "active"
    ACTION_FAILED = "actionFailed"
    MANUAL_STEPS_REQUIRED = "manualStepsRequired"
    FULL_SCAN_REQUIRED = "fullScanRequired"
    REBOOT_REQUIRED = "rebootRequired"
    REMEDIATED_WITH_NON_CRITICAL_FAILURES = "remediatedWithNonCriticalFailures"
    QUARANTINED = "quarantined"
    REMOVED = "removed"
    CLEANED = "cleaned"
    ALLOWED = "allowed"
    NO_STATUS_CLEARED = "noStatusCleared"
