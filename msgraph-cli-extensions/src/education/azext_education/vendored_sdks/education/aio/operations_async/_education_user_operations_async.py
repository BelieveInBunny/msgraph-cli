# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class EducationUserOperations:
    """EducationUserOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~education.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_assignment(
        self,
        education_user_id: str,
        orderby: Optional[List[Union[str, "models.Enum244"]]] = None,
        select: Optional[List[Union[str, "models.Enum245"]]] = None,
        expand: Optional[List[Union[str, "models.Enum246"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationAssignment1"]:
        """Get assignments from education.

        Get assignments from education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum244]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum245]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum246]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationAssignment1 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationAssignment1]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationAssignment1"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_assignment.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationAssignment1', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_assignment.metadata = {'url': '/education/users/{educationUser-id}/assignments'}  # type: ignore

    async def create_assignment(
        self,
        education_user_id: str,
        id: Optional[str] = None,
        class_id: Optional[str] = None,
        display_name: Optional[str] = None,
        instructions: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        close_date_time: Optional[datetime.datetime] = None,
        due_date_time: Optional[datetime.datetime] = None,
        assign_date_time: Optional[datetime.datetime] = None,
        assigned_date_time: Optional[datetime.datetime] = None,
        grading: Optional[object] = None,
        assign_to: Optional[object] = None,
        allow_late_submissions: Optional[bool] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        allow_students_to_add_resources_to_submission: Optional[bool] = None,
        status: Optional[Union[str, "models.MicrosoftGraphEducationAssignmentStatus"]] = None,
        resources: Optional[List["models.MicrosoftGraphEducationAssignmentResource"]] = None,
        submissions: Optional[List["models.MicrosoftGraphEducationSubmission"]] = None,
        categories: Optional[List["models.MicrosoftGraphEducationCategory"]] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        microsoft_graph_education_rubric_display_name: Optional[str] = None,
        description: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        qualities: Optional[List["models.MicrosoftGraphRubricQuality"]] = None,
        levels: Optional[List["models.MicrosoftGraphRubricLevel"]] = None,
        any_grading: Optional[object] = None,
        microsoft_graph_education_rubric_created_date_time_created_date_time: Optional[datetime.datetime] = None,
        microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time: Optional[datetime.datetime] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        id1: Optional[str] = None,
        display_name1: Optional[str] = None,
        id2: Optional[str] = None,
        display_name2: Optional[str] = None,
        id3: Optional[str] = None,
        display_name3: Optional[str] = None,
        id4: Optional[str] = None,
        display_name4: Optional[str] = None,
        id5: Optional[str] = None,
        display_name5: Optional[str] = None,
        id6: Optional[str] = None,
        display_name6: Optional[str] = None,
        id7: Optional[str] = None,
        display_name7: Optional[str] = None,
        id8: Optional[str] = None,
        display_name8: Optional[str] = None,
        id9: Optional[str] = None,
        display_name9: Optional[str] = None,
        id10: Optional[str] = None,
        display_name10: Optional[str] = None,
        id11: Optional[str] = None,
        display_name11: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationAssignment":
        """Create new navigation property to assignments for education.

        Create new navigation property to assignments for education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param id: Read-only.
        :type id: str
        :param class_id:
        :type class_id: str
        :param display_name:
        :type display_name: str
        :param instructions: educationItemBody.
        :type instructions: ~education.models.MicrosoftGraphEducationItemBody
        :param close_date_time:
        :type close_date_time: ~datetime.datetime
        :param due_date_time:
        :type due_date_time: ~datetime.datetime
        :param assign_date_time:
        :type assign_date_time: ~datetime.datetime
        :param assigned_date_time:
        :type assigned_date_time: ~datetime.datetime
        :param grading: Any object.
        :type grading: object
        :param assign_to: Any object.
        :type assign_to: object
        :param allow_late_submissions:
        :type allow_late_submissions: bool
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param allow_students_to_add_resources_to_submission:
        :type allow_students_to_add_resources_to_submission: bool
        :param status: educationAssignmentStatus.
        :type status: str or ~education.models.MicrosoftGraphEducationAssignmentStatus
        :param resources:
        :type resources: list[~education.models.MicrosoftGraphEducationAssignmentResource]
        :param submissions:
        :type submissions: list[~education.models.MicrosoftGraphEducationSubmission]
        :param categories:
        :type categories: list[~education.models.MicrosoftGraphEducationCategory]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param microsoft_graph_education_rubric_display_name:
        :type microsoft_graph_education_rubric_display_name: str
        :param description: educationItemBody.
        :type description: ~education.models.MicrosoftGraphEducationItemBody
        :param qualities:
        :type qualities: list[~education.models.MicrosoftGraphRubricQuality]
        :param levels:
        :type levels: list[~education.models.MicrosoftGraphRubricLevel]
        :param any_grading: Any object.
        :type any_grading: object
        :param microsoft_graph_education_rubric_created_date_time_created_date_time:
        :type microsoft_graph_education_rubric_created_date_time_created_date_time: ~datetime.datetime
        :param microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time:
        :type microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time: ~datetime.datetime
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :param display_name5: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name5: str
        :param id6: Unique identifier for the identity.
        :type id6: str
        :param display_name6: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name6: str
        :param id7: Unique identifier for the identity.
        :type id7: str
        :param display_name7: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name7: str
        :param id8: Unique identifier for the identity.
        :type id8: str
        :param display_name8: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name8: str
        :param id9: Unique identifier for the identity.
        :type id9: str
        :param display_name9: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name9: str
        :param id10: Unique identifier for the identity.
        :type id10: str
        :param display_name10: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name10: str
        :param id11: Unique identifier for the identity.
        :type id11: str
        :param display_name11: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name11: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationAssignment, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationAssignment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationAssignment(id=id, class_id=class_id, display_name=display_name, instructions=instructions, close_date_time=close_date_time, due_date_time=due_date_time, assign_date_time=assign_date_time, assigned_date_time=assigned_date_time, grading=grading, assign_to=assign_to, allow_late_submissions=allow_late_submissions, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, allow_students_to_add_resources_to_submission=allow_students_to_add_resources_to_submission, status=status, resources=resources, submissions=submissions, categories=categories, id_rubric_id=microsoft_graph_entity_id, display_name_rubric_display_name=microsoft_graph_education_rubric_display_name, description=description, qualities=qualities, levels=levels, grading_rubric_grading=any_grading, created_date_time_rubric_created_date_time=microsoft_graph_education_rubric_created_date_time_created_date_time, last_modified_date_time_rubric_last_modified_date_time=microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time, id_rubric_last_modified_by_user_id=microsoft_graph_identity_id, display_name_rubric_last_modified_by_user_display_name=microsoft_graph_identity_display_name, id_rubric_last_modified_by_device_id=id1, display_name_rubric_last_modified_by_device_display_name=display_name1, id_rubric_last_modified_by_application_id=id2, display_name_rubric_last_modified_by_application_display_name=display_name2, id_rubric_created_by_user_id=id3, display_name_rubric_created_by_user_display_name=display_name3, id_rubric_created_by_device_id=id4, display_name_rubric_created_by_device_display_name=display_name4, id_rubric_created_by_application_id=id5, display_name_rubric_created_by_application_display_name=display_name5, id_last_modified_by_user_id=id6, display_name_last_modified_by_user_display_name=display_name6, id_last_modified_by_device_id=id7, display_name_last_modified_by_device_display_name=display_name7, id_last_modified_by_application_id=id8, display_name_last_modified_by_application_display_name=display_name8, id_created_by_user_id=id9, display_name_created_by_user_display_name=display_name9, id_created_by_device_id=id10, display_name_created_by_device_display_name=display_name10, id_created_by_application_id=id11, display_name_created_by_application_display_name=display_name11)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_assignment.metadata = {'url': '/education/users/{educationUser-id}/assignments'}  # type: ignore

    async def get_assignment(
        self,
        education_user_id: str,
        education_assignment_id: str,
        select: Optional[List[Union[str, "models.Enum247"]]] = None,
        expand: Optional[List[Union[str, "models.Enum248"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationAssignment":
        """Get assignments from education.

        Get assignments from education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param education_assignment_id: key: educationAssignment-id of educationAssignment.
        :type education_assignment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum247]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum248]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationAssignment, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationAssignment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationAssignment"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationAssignment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_assignment.metadata = {'url': '/education/users/{educationUser-id}/assignments/{educationAssignment-id}'}  # type: ignore

    async def update_assignment(
        self,
        education_user_id: str,
        education_assignment_id: str,
        id: Optional[str] = None,
        class_id: Optional[str] = None,
        display_name: Optional[str] = None,
        instructions: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        close_date_time: Optional[datetime.datetime] = None,
        due_date_time: Optional[datetime.datetime] = None,
        assign_date_time: Optional[datetime.datetime] = None,
        assigned_date_time: Optional[datetime.datetime] = None,
        grading: Optional[object] = None,
        assign_to: Optional[object] = None,
        allow_late_submissions: Optional[bool] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        allow_students_to_add_resources_to_submission: Optional[bool] = None,
        status: Optional[Union[str, "models.MicrosoftGraphEducationAssignmentStatus"]] = None,
        resources: Optional[List["models.MicrosoftGraphEducationAssignmentResource"]] = None,
        submissions: Optional[List["models.MicrosoftGraphEducationSubmission"]] = None,
        categories: Optional[List["models.MicrosoftGraphEducationCategory"]] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        microsoft_graph_education_rubric_display_name: Optional[str] = None,
        description: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        qualities: Optional[List["models.MicrosoftGraphRubricQuality"]] = None,
        levels: Optional[List["models.MicrosoftGraphRubricLevel"]] = None,
        any_grading: Optional[object] = None,
        microsoft_graph_education_rubric_created_date_time_created_date_time: Optional[datetime.datetime] = None,
        microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time: Optional[datetime.datetime] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        id1: Optional[str] = None,
        display_name1: Optional[str] = None,
        id2: Optional[str] = None,
        display_name2: Optional[str] = None,
        id3: Optional[str] = None,
        display_name3: Optional[str] = None,
        id4: Optional[str] = None,
        display_name4: Optional[str] = None,
        id5: Optional[str] = None,
        display_name5: Optional[str] = None,
        id6: Optional[str] = None,
        display_name6: Optional[str] = None,
        id7: Optional[str] = None,
        display_name7: Optional[str] = None,
        id8: Optional[str] = None,
        display_name8: Optional[str] = None,
        id9: Optional[str] = None,
        display_name9: Optional[str] = None,
        id10: Optional[str] = None,
        display_name10: Optional[str] = None,
        id11: Optional[str] = None,
        display_name11: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property assignments in education.

        Update the navigation property assignments in education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param education_assignment_id: key: educationAssignment-id of educationAssignment.
        :type education_assignment_id: str
        :param id: Read-only.
        :type id: str
        :param class_id:
        :type class_id: str
        :param display_name:
        :type display_name: str
        :param instructions: educationItemBody.
        :type instructions: ~education.models.MicrosoftGraphEducationItemBody
        :param close_date_time:
        :type close_date_time: ~datetime.datetime
        :param due_date_time:
        :type due_date_time: ~datetime.datetime
        :param assign_date_time:
        :type assign_date_time: ~datetime.datetime
        :param assigned_date_time:
        :type assigned_date_time: ~datetime.datetime
        :param grading: Any object.
        :type grading: object
        :param assign_to: Any object.
        :type assign_to: object
        :param allow_late_submissions:
        :type allow_late_submissions: bool
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param allow_students_to_add_resources_to_submission:
        :type allow_students_to_add_resources_to_submission: bool
        :param status: educationAssignmentStatus.
        :type status: str or ~education.models.MicrosoftGraphEducationAssignmentStatus
        :param resources:
        :type resources: list[~education.models.MicrosoftGraphEducationAssignmentResource]
        :param submissions:
        :type submissions: list[~education.models.MicrosoftGraphEducationSubmission]
        :param categories:
        :type categories: list[~education.models.MicrosoftGraphEducationCategory]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param microsoft_graph_education_rubric_display_name:
        :type microsoft_graph_education_rubric_display_name: str
        :param description: educationItemBody.
        :type description: ~education.models.MicrosoftGraphEducationItemBody
        :param qualities:
        :type qualities: list[~education.models.MicrosoftGraphRubricQuality]
        :param levels:
        :type levels: list[~education.models.MicrosoftGraphRubricLevel]
        :param any_grading: Any object.
        :type any_grading: object
        :param microsoft_graph_education_rubric_created_date_time_created_date_time:
        :type microsoft_graph_education_rubric_created_date_time_created_date_time: ~datetime.datetime
        :param microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time:
        :type microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time: ~datetime.datetime
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :param display_name5: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name5: str
        :param id6: Unique identifier for the identity.
        :type id6: str
        :param display_name6: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name6: str
        :param id7: Unique identifier for the identity.
        :type id7: str
        :param display_name7: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name7: str
        :param id8: Unique identifier for the identity.
        :type id8: str
        :param display_name8: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name8: str
        :param id9: Unique identifier for the identity.
        :type id9: str
        :param display_name9: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name9: str
        :param id10: Unique identifier for the identity.
        :type id10: str
        :param display_name10: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name10: str
        :param id11: Unique identifier for the identity.
        :type id11: str
        :param display_name11: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name11: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationAssignment(id=id, class_id=class_id, display_name=display_name, instructions=instructions, close_date_time=close_date_time, due_date_time=due_date_time, assign_date_time=assign_date_time, assigned_date_time=assigned_date_time, grading=grading, assign_to=assign_to, allow_late_submissions=allow_late_submissions, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, allow_students_to_add_resources_to_submission=allow_students_to_add_resources_to_submission, status=status, resources=resources, submissions=submissions, categories=categories, id_rubric_id=microsoft_graph_entity_id, display_name_rubric_display_name=microsoft_graph_education_rubric_display_name, description=description, qualities=qualities, levels=levels, grading_rubric_grading=any_grading, created_date_time_rubric_created_date_time=microsoft_graph_education_rubric_created_date_time_created_date_time, last_modified_date_time_rubric_last_modified_date_time=microsoft_graph_education_rubric_last_modified_date_time_last_modified_date_time, id_rubric_last_modified_by_user_id=microsoft_graph_identity_id, display_name_rubric_last_modified_by_user_display_name=microsoft_graph_identity_display_name, id_rubric_last_modified_by_device_id=id1, display_name_rubric_last_modified_by_device_display_name=display_name1, id_rubric_last_modified_by_application_id=id2, display_name_rubric_last_modified_by_application_display_name=display_name2, id_rubric_created_by_user_id=id3, display_name_rubric_created_by_user_display_name=display_name3, id_rubric_created_by_device_id=id4, display_name_rubric_created_by_device_display_name=display_name4, id_rubric_created_by_application_id=id5, display_name_rubric_created_by_application_display_name=display_name5, id_last_modified_by_user_id=id6, display_name_last_modified_by_user_display_name=display_name6, id_last_modified_by_device_id=id7, display_name_last_modified_by_device_display_name=display_name7, id_last_modified_by_application_id=id8, display_name_last_modified_by_application_display_name=display_name8, id_created_by_user_id=id9, display_name_created_by_user_display_name=display_name9, id_created_by_device_id=id10, display_name_created_by_device_display_name=display_name10, id_created_by_application_id=id11, display_name_created_by_application_display_name=display_name11)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_assignment.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
            'educationAssignment-id': self._serialize.url("education_assignment_id", education_assignment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationAssignment')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_assignment.metadata = {'url': '/education/users/{educationUser-id}/assignments/{educationAssignment-id}'}  # type: ignore

    def list_class(
        self,
        education_user_id: str,
        orderby: Optional[List[Union[str, "models.Enum270"]]] = None,
        select: Optional[List[Union[str, "models.Enum271"]]] = None,
        expand: Optional[List[Union[str, "models.Enum272"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationClass3"]:
        """Get classes from education.

        Get classes from education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum270]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum271]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum272]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationClass3 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationClass3]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationClass3"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_class.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationClass3', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_class.metadata = {'url': '/education/users/{educationUser-id}/classes'}  # type: ignore

    async def get_class(
        self,
        education_user_id: str,
        education_class_id: str,
        select: Optional[List[Union[str, "models.Enum273"]]] = None,
        expand: Optional[List[Union[str, "models.Enum274"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationClass":
        """Get classes from education.

        Get classes from education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param education_class_id: key: educationClass-id of educationClass.
        :type education_class_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum273]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum274]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationClass, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationClass
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationClass"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_class.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationClass', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_class.metadata = {'url': '/education/users/{educationUser-id}/classes/{educationClass-id}'}  # type: ignore

    def list_rubric(
        self,
        education_user_id: str,
        orderby: Optional[List[Union[str, "models.Enum275"]]] = None,
        select: Optional[List[Union[str, "models.Enum276"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationRubric0"]:
        """Get rubrics from education.

        Get rubrics from education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum275]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum276]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationRubric0 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationRubric0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationRubric0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_rubric.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationRubric0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_rubric.metadata = {'url': '/education/users/{educationUser-id}/rubrics'}  # type: ignore

    async def create_rubric(
        self,
        education_user_id: str,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        qualities: Optional[List["models.MicrosoftGraphRubricQuality"]] = None,
        levels: Optional[List["models.MicrosoftGraphRubricLevel"]] = None,
        grading: Optional[object] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        id1: Optional[str] = None,
        display_name1: Optional[str] = None,
        id2: Optional[str] = None,
        display_name2: Optional[str] = None,
        id3: Optional[str] = None,
        display_name3: Optional[str] = None,
        id4: Optional[str] = None,
        display_name4: Optional[str] = None,
        id5: Optional[str] = None,
        display_name5: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationRubric":
        """Create new navigation property to rubrics for education.

        Create new navigation property to rubrics for education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param id: Read-only.
        :type id: str
        :param display_name:
        :type display_name: str
        :param description: educationItemBody.
        :type description: ~education.models.MicrosoftGraphEducationItemBody
        :param qualities:
        :type qualities: list[~education.models.MicrosoftGraphRubricQuality]
        :param levels:
        :type levels: list[~education.models.MicrosoftGraphRubricLevel]
        :param grading: Any object.
        :type grading: object
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :param display_name5: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name5: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationRubric, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationRubric
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationRubric"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationRubric(id=id, display_name=display_name, description=description, qualities=qualities, levels=levels, grading=grading, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, id_last_modified_by_user_id=microsoft_graph_identity_id, display_name_last_modified_by_user_display_name=microsoft_graph_identity_display_name, id_last_modified_by_device_id=id1, display_name_last_modified_by_device_display_name=display_name1, id_last_modified_by_application_id=id2, display_name_last_modified_by_application_display_name=display_name2, id_created_by_user_id=id3, display_name_created_by_user_display_name=display_name3, id_created_by_device_id=id4, display_name_created_by_device_display_name=display_name4, id_created_by_application_id=id5, display_name_created_by_application_display_name=display_name5)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_rubric.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationRubric')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationRubric', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_rubric.metadata = {'url': '/education/users/{educationUser-id}/rubrics'}  # type: ignore

    async def get_rubric(
        self,
        education_user_id: str,
        education_rubric_id: str,
        select: Optional[List[Union[str, "models.Enum277"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationRubric":
        """Get rubrics from education.

        Get rubrics from education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param education_rubric_id: key: educationRubric-id of educationRubric.
        :type education_rubric_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum277]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationRubric, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationRubric
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationRubric"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_rubric.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
            'educationRubric-id': self._serialize.url("education_rubric_id", education_rubric_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationRubric', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_rubric.metadata = {'url': '/education/users/{educationUser-id}/rubrics/{educationRubric-id}'}  # type: ignore

    async def update_rubric(
        self,
        education_user_id: str,
        education_rubric_id: str,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional["models.MicrosoftGraphEducationItemBody"] = None,
        qualities: Optional[List["models.MicrosoftGraphRubricQuality"]] = None,
        levels: Optional[List["models.MicrosoftGraphRubricLevel"]] = None,
        grading: Optional[object] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        id1: Optional[str] = None,
        display_name1: Optional[str] = None,
        id2: Optional[str] = None,
        display_name2: Optional[str] = None,
        id3: Optional[str] = None,
        display_name3: Optional[str] = None,
        id4: Optional[str] = None,
        display_name4: Optional[str] = None,
        id5: Optional[str] = None,
        display_name5: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property rubrics in education.

        Update the navigation property rubrics in education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param education_rubric_id: key: educationRubric-id of educationRubric.
        :type education_rubric_id: str
        :param id: Read-only.
        :type id: str
        :param display_name:
        :type display_name: str
        :param description: educationItemBody.
        :type description: ~education.models.MicrosoftGraphEducationItemBody
        :param qualities:
        :type qualities: list[~education.models.MicrosoftGraphRubricQuality]
        :param levels:
        :type levels: list[~education.models.MicrosoftGraphRubricLevel]
        :param grading: Any object.
        :type grading: object
        :param created_date_time:
        :type created_date_time: ~datetime.datetime
        :param last_modified_date_time:
        :type last_modified_date_time: ~datetime.datetime
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :param display_name5: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name5: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationRubric(id=id, display_name=display_name, description=description, qualities=qualities, levels=levels, grading=grading, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, id_last_modified_by_user_id=microsoft_graph_identity_id, display_name_last_modified_by_user_display_name=microsoft_graph_identity_display_name, id_last_modified_by_device_id=id1, display_name_last_modified_by_device_display_name=display_name1, id_last_modified_by_application_id=id2, display_name_last_modified_by_application_display_name=display_name2, id_created_by_user_id=id3, display_name_created_by_user_display_name=display_name3, id_created_by_device_id=id4, display_name_created_by_device_display_name=display_name4, id_created_by_application_id=id5, display_name_created_by_application_display_name=display_name5)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_rubric.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
            'educationRubric-id': self._serialize.url("education_rubric_id", education_rubric_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationRubric')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_rubric.metadata = {'url': '/education/users/{educationUser-id}/rubrics/{educationRubric-id}'}  # type: ignore

    def list_school(
        self,
        education_user_id: str,
        orderby: Optional[List[Union[str, "models.Enum278"]]] = None,
        select: Optional[List[Union[str, "models.Enum279"]]] = None,
        expand: Optional[List[Union[str, "models.Enum280"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationSchool2"]:
        """Get schools from education.

        Get schools from education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum278]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum279]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum280]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationSchool2 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationSchool2]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationSchool2"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_school.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationSchool2', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_school.metadata = {'url': '/education/users/{educationUser-id}/schools'}  # type: ignore

    async def get_school(
        self,
        education_user_id: str,
        education_school_id: str,
        select: Optional[List[Union[str, "models.Enum281"]]] = None,
        expand: Optional[List[Union[str, "models.Enum282"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationSchool":
        """Get schools from education.

        Get schools from education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param education_school_id: key: educationSchool-id of educationSchool.
        :type education_school_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum281]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum282]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationSchool, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationSchool
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationSchool"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_school.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
            'educationSchool-id': self._serialize.url("education_school_id", education_school_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationSchool', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_school.metadata = {'url': '/education/users/{educationUser-id}/schools/{educationSchool-id}'}  # type: ignore

    def list_taught_class(
        self,
        education_user_id: str,
        orderby: Optional[List[Union[str, "models.Enum283"]]] = None,
        select: Optional[List[Union[str, "models.Enum284"]]] = None,
        expand: Optional[List[Union[str, "models.Enum285"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationClass4"]:
        """Get taughtClasses from education.

        Get taughtClasses from education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum283]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum284]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum285]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationClass4 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationClass4]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationClass4"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_taught_class.metadata['url']  # type: ignore
                path_format_arguments = {
                    'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationClass4', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_taught_class.metadata = {'url': '/education/users/{educationUser-id}/taughtClasses'}  # type: ignore

    async def get_taught_class(
        self,
        education_user_id: str,
        education_class_id: str,
        select: Optional[List[Union[str, "models.Enum286"]]] = None,
        expand: Optional[List[Union[str, "models.Enum287"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationClass":
        """Get taughtClasses from education.

        Get taughtClasses from education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param education_class_id: key: educationClass-id of educationClass.
        :type education_class_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum286]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum287]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationClass, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationClass
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationClass"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_taught_class.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationClass', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_taught_class.metadata = {'url': '/education/users/{educationUser-id}/taughtClasses/{educationClass-id}'}  # type: ignore

    async def get_user(
        self,
        education_user_id: str,
        select: Optional[List[Union[str, "models.Enum288"]]] = None,
        expand: Optional[List[Union[str, "models.Enum289"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphUser":
        """Get user from education.

        Get user from education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum288]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum289]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUser, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphUser
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUser"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_user.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUser', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_user.metadata = {'url': '/education/users/{educationUser-id}/user'}  # type: ignore

    async def delta(
        self,
        **kwargs
    ) -> List["models.MicrosoftGraphEducationUser"]:
        """Invoke function delta.

        Invoke function delta.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MicrosoftGraphEducationUser, or the result of cls(response)
        :rtype: list[~education.models.MicrosoftGraphEducationUser]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.MicrosoftGraphEducationUser"]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.delta.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('[MicrosoftGraphEducationUser]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    delta.metadata = {'url': '/education/users/microsoft.graph.delta()'}  # type: ignore
