# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class EducationOperations:
    """EducationOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~education.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_class(
        self,
        orderby: Optional[List[Union[str, "models.Get5ItemsItem"]]] = None,
        select: Optional[List[Union[str, "models.Get6ItemsItem"]]] = None,
        expand: Optional[List[Union[str, "models.Get7ItemsItem"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationClass"]:
        """Get classes from education.

        Get classes from education.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Get5ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Get6ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Get7ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationClass or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationClass]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationClass"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_class.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationClass', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_class.metadata = {'url': '/education/classes'}  # type: ignore

    async def create_class(
        self,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        mail_nickname: Optional[str] = None,
        description: Optional[str] = None,
        class_code: Optional[str] = None,
        external_name: Optional[str] = None,
        external_id: Optional[str] = None,
        external_source: Optional[Union[str, "models.MicrosoftGraphEducationExternalSource"]] = None,
        grade: Optional[str] = None,
        term: Optional["models.MicrosoftGraphEducationTerm"] = None,
        course: Optional["models.MicrosoftGraphEducationCourse"] = None,
        assignments: Optional[List["models.MicrosoftGraphEducationAssignment"]] = None,
        assignment_categories: Optional[List["models.MicrosoftGraphEducationCategory"]] = None,
        members: Optional[List["models.MicrosoftGraphEducationUser"]] = None,
        teachers: Optional[List["models.MicrosoftGraphEducationUser"]] = None,
        schools: Optional[List["models.MicrosoftGraphEducationSchool"]] = None,
        group: Optional["models.MicrosoftGraphGroup"] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        id1: Optional[str] = None,
        display_name1: Optional[str] = None,
        id2: Optional[str] = None,
        display_name2: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationClass":
        """Create new navigation property to classes for education.

        Create new navigation property to classes for education.

        :param id: Read-only.
        :type id: str
        :param display_name: Name of the class.
        :type display_name: str
        :param mail_nickname: Mail name for sending email to all members, if this is enabled.
        :type mail_nickname: str
        :param description: Description of the class.
        :type description: str
        :param class_code: Class code used by the school to identify the class.
        :type class_code: str
        :param external_name: Name of the class in the syncing system.
        :type external_name: str
        :param external_id: ID of the class from the syncing system.
        :type external_id: str
        :param external_source:
        :type external_source: str or ~education.models.MicrosoftGraphEducationExternalSource
        :param grade:
        :type grade: str
        :param term: educationTerm.
        :type term: ~education.models.MicrosoftGraphEducationTerm
        :param course: educationCourse.
        :type course: ~education.models.MicrosoftGraphEducationCourse
        :param assignments:
        :type assignments: list[~education.models.MicrosoftGraphEducationAssignment]
        :param assignment_categories:
        :type assignment_categories: list[~education.models.MicrosoftGraphEducationCategory]
        :param members: All users in the class. Nullable.
        :type members: list[~education.models.MicrosoftGraphEducationUser]
        :param teachers: All teachers in the class. Nullable.
        :type teachers: list[~education.models.MicrosoftGraphEducationUser]
        :param schools: All schools that this class is associated with. Nullable.
        :type schools: list[~education.models.MicrosoftGraphEducationSchool]
        :param group: Represents an Azure Active Directory object. The directoryObject type is the base
         type for many other directory entity types.
        :type group: ~education.models.MicrosoftGraphGroup
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationClass, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationClass
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationClass"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationClass(id=id, display_name=display_name, mail_nickname=mail_nickname, description=description, class_code=class_code, external_name=external_name, external_id=external_id, external_source=external_source, grade=grade, term=term, course=course, assignments=assignments, assignment_categories=assignment_categories, members=members, teachers=teachers, schools=schools, group=group, id_created_by_user_id=microsoft_graph_identity_id, display_name_created_by_user_display_name=microsoft_graph_identity_display_name, id_created_by_device_id=id1, display_name_created_by_device_display_name=display_name1, id_created_by_application_id=id2, display_name_created_by_application_display_name=display_name2)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_class.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationClass')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationClass', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_class.metadata = {'url': '/education/classes'}  # type: ignore

    async def get_class(
        self,
        education_class_id: str,
        select: Optional[List[Union[str, "models.Enum117"]]] = None,
        expand: Optional[List[Union[str, "models.Get2ItemsItem"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationClass":
        """Get classes from education.

        Get classes from education.

        :param education_class_id: key: educationClass-id of educationClass.
        :type education_class_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum117]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Get2ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationClass, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationClass
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationClass"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_class.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationClass', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_class.metadata = {'url': '/education/classes/{educationClass-id}'}  # type: ignore

    async def update_class(
        self,
        education_class_id: str,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        mail_nickname: Optional[str] = None,
        description: Optional[str] = None,
        class_code: Optional[str] = None,
        external_name: Optional[str] = None,
        external_id: Optional[str] = None,
        external_source: Optional[Union[str, "models.MicrosoftGraphEducationExternalSource"]] = None,
        grade: Optional[str] = None,
        term: Optional["models.MicrosoftGraphEducationTerm"] = None,
        course: Optional["models.MicrosoftGraphEducationCourse"] = None,
        assignments: Optional[List["models.MicrosoftGraphEducationAssignment"]] = None,
        assignment_categories: Optional[List["models.MicrosoftGraphEducationCategory"]] = None,
        members: Optional[List["models.MicrosoftGraphEducationUser"]] = None,
        teachers: Optional[List["models.MicrosoftGraphEducationUser"]] = None,
        schools: Optional[List["models.MicrosoftGraphEducationSchool"]] = None,
        group: Optional["models.MicrosoftGraphGroup"] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        id1: Optional[str] = None,
        display_name1: Optional[str] = None,
        id2: Optional[str] = None,
        display_name2: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property classes in education.

        Update the navigation property classes in education.

        :param education_class_id: key: educationClass-id of educationClass.
        :type education_class_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: Name of the class.
        :type display_name: str
        :param mail_nickname: Mail name for sending email to all members, if this is enabled.
        :type mail_nickname: str
        :param description: Description of the class.
        :type description: str
        :param class_code: Class code used by the school to identify the class.
        :type class_code: str
        :param external_name: Name of the class in the syncing system.
        :type external_name: str
        :param external_id: ID of the class from the syncing system.
        :type external_id: str
        :param external_source:
        :type external_source: str or ~education.models.MicrosoftGraphEducationExternalSource
        :param grade:
        :type grade: str
        :param term: educationTerm.
        :type term: ~education.models.MicrosoftGraphEducationTerm
        :param course: educationCourse.
        :type course: ~education.models.MicrosoftGraphEducationCourse
        :param assignments:
        :type assignments: list[~education.models.MicrosoftGraphEducationAssignment]
        :param assignment_categories:
        :type assignment_categories: list[~education.models.MicrosoftGraphEducationCategory]
        :param members: All users in the class. Nullable.
        :type members: list[~education.models.MicrosoftGraphEducationUser]
        :param teachers: All teachers in the class. Nullable.
        :type teachers: list[~education.models.MicrosoftGraphEducationUser]
        :param schools: All schools that this class is associated with. Nullable.
        :type schools: list[~education.models.MicrosoftGraphEducationSchool]
        :param group: Represents an Azure Active Directory object. The directoryObject type is the base
         type for many other directory entity types.
        :type group: ~education.models.MicrosoftGraphGroup
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationClass(id=id, display_name=display_name, mail_nickname=mail_nickname, description=description, class_code=class_code, external_name=external_name, external_id=external_id, external_source=external_source, grade=grade, term=term, course=course, assignments=assignments, assignment_categories=assignment_categories, members=members, teachers=teachers, schools=schools, group=group, id_created_by_user_id=microsoft_graph_identity_id, display_name_created_by_user_display_name=microsoft_graph_identity_display_name, id_created_by_device_id=id1, display_name_created_by_device_display_name=display_name1, id_created_by_application_id=id2, display_name_created_by_application_display_name=display_name2)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_class.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationClass-id': self._serialize.url("education_class_id", education_class_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationClass')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_class.metadata = {'url': '/education/classes/{educationClass-id}'}  # type: ignore

    async def get_me(
        self,
        select: Optional[List[Union[str, "models.Enum165"]]] = None,
        expand: Optional[List[Union[str, "models.Enum166"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationUser":
        """Get me from education.

        Get me from education.

        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum165]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum166]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationUser, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationUser
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationUser"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_me.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationUser', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_me.metadata = {'url': '/education/me'}  # type: ignore

    async def update_me(
        self,
        body: "models.MicrosoftGraphEducationUser",
        **kwargs
    ) -> None:
        """Update the navigation property me in education.

        Update the navigation property me in education.

        :param body: New navigation property values.
        :type body: ~education.models.MicrosoftGraphEducationUser
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_me.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphEducationUser')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_me.metadata = {'url': '/education/me'}  # type: ignore

    def list_school(
        self,
        orderby: Optional[List[Union[str, "models.Enum213"]]] = None,
        select: Optional[List[Union[str, "models.Enum214"]]] = None,
        expand: Optional[List[Union[str, "models.Enum215"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationSchool1"]:
        """Get schools from education.

        Get schools from education.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum213]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum214]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum215]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationSchool1 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationSchool1]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationSchool1"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_school.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationSchool1', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_school.metadata = {'url': '/education/schools'}  # type: ignore

    async def create_school(
        self,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        external_source: Optional[Union[str, "models.MicrosoftGraphEducationExternalSource"]] = None,
        principal_email: Optional[str] = None,
        principal_name: Optional[str] = None,
        external_principal_id: Optional[str] = None,
        lowest_grade: Optional[str] = None,
        highest_grade: Optional[str] = None,
        school_number: Optional[str] = None,
        external_id: Optional[str] = None,
        phone: Optional[str] = None,
        fax: Optional[str] = None,
        address: Optional["models.MicrosoftGraphPhysicalAddress"] = None,
        classes: Optional[List["models.MicrosoftGraphEducationClass"]] = None,
        users: Optional[List["models.MicrosoftGraphEducationUser"]] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        microsoft_graph_administrative_unit_display_name: Optional[str] = None,
        microsoft_graph_administrative_unit_description: Optional[str] = None,
        visibility: Optional[str] = None,
        members: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        scoped_role_members: Optional[List["models.MicrosoftGraphScopedRoleMembership"]] = None,
        extensions: Optional[List["models.MicrosoftGraphEntity"]] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        id1: Optional[str] = None,
        display_name1: Optional[str] = None,
        id2: Optional[str] = None,
        display_name2: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationSchool":
        """Create new navigation property to schools for education.

        Create new navigation property to schools for education.

        :param id: Read-only.
        :type id: str
        :param display_name: Organization display name.
        :type display_name: str
        :param description: Organization description.
        :type description: str
        :param external_source:
        :type external_source: str or ~education.models.MicrosoftGraphEducationExternalSource
        :param principal_email: Email address of the principal.
        :type principal_email: str
        :param principal_name: Name of the principal.
        :type principal_name: str
        :param external_principal_id: ID of principal in syncing system.
        :type external_principal_id: str
        :param lowest_grade: Lowest grade taught.
        :type lowest_grade: str
        :param highest_grade: Highest grade taught.
        :type highest_grade: str
        :param school_number: School Number.
        :type school_number: str
        :param external_id: ID of school in syncing system.
        :type external_id: str
        :param phone: Phone number of school.
        :type phone: str
        :param fax:
        :type fax: str
        :param address: physicalAddress.
        :type address: ~education.models.MicrosoftGraphPhysicalAddress
        :param classes: Classes taught at the school. Nullable.
        :type classes: list[~education.models.MicrosoftGraphEducationClass]
        :param users: Users in the school. Nullable.
        :type users: list[~education.models.MicrosoftGraphEducationUser]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param microsoft_graph_administrative_unit_display_name:
        :type microsoft_graph_administrative_unit_display_name: str
        :param microsoft_graph_administrative_unit_description:
        :type microsoft_graph_administrative_unit_description: str
        :param visibility:
        :type visibility: str
        :param members:
        :type members: list[~education.models.MicrosoftGraphDirectoryObject]
        :param scoped_role_members:
        :type scoped_role_members: list[~education.models.MicrosoftGraphScopedRoleMembership]
        :param extensions:
        :type extensions: list[~education.models.MicrosoftGraphEntity]
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationSchool, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationSchool
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationSchool"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationSchool(id=id, display_name=display_name, description=description, external_source=external_source, principal_email=principal_email, principal_name=principal_name, external_principal_id=external_principal_id, lowest_grade=lowest_grade, highest_grade=highest_grade, school_number=school_number, external_id=external_id, phone=phone, fax=fax, address=address, classes=classes, users=users, id_administrative_unit_id=microsoft_graph_entity_id, deleted_date_time=deleted_date_time, display_name_administrative_unit_display_name=microsoft_graph_administrative_unit_display_name, description_administrative_unit_description=microsoft_graph_administrative_unit_description, visibility=visibility, members=members, scoped_role_members=scoped_role_members, extensions=extensions, id_created_by_user_id=microsoft_graph_identity_id, display_name_created_by_user_display_name=microsoft_graph_identity_display_name, id_created_by_device_id=id1, display_name_created_by_device_display_name=display_name1, id_created_by_application_id=id2, display_name_created_by_application_display_name=display_name2)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_school.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationSchool')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationSchool', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_school.metadata = {'url': '/education/schools'}  # type: ignore

    async def get_school(
        self,
        education_school_id: str,
        select: Optional[List[Union[str, "models.Enum216"]]] = None,
        expand: Optional[List[Union[str, "models.Enum217"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationSchool":
        """Get schools from education.

        Get schools from education.

        :param education_school_id: key: educationSchool-id of educationSchool.
        :type education_school_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum216]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum217]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationSchool, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationSchool
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationSchool"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_school.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationSchool-id': self._serialize.url("education_school_id", education_school_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationSchool', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_school.metadata = {'url': '/education/schools/{educationSchool-id}'}  # type: ignore

    async def update_school(
        self,
        education_school_id: str,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        external_source: Optional[Union[str, "models.MicrosoftGraphEducationExternalSource"]] = None,
        principal_email: Optional[str] = None,
        principal_name: Optional[str] = None,
        external_principal_id: Optional[str] = None,
        lowest_grade: Optional[str] = None,
        highest_grade: Optional[str] = None,
        school_number: Optional[str] = None,
        external_id: Optional[str] = None,
        phone: Optional[str] = None,
        fax: Optional[str] = None,
        address: Optional["models.MicrosoftGraphPhysicalAddress"] = None,
        classes: Optional[List["models.MicrosoftGraphEducationClass"]] = None,
        users: Optional[List["models.MicrosoftGraphEducationUser"]] = None,
        microsoft_graph_entity_id: Optional[str] = None,
        deleted_date_time: Optional[datetime.datetime] = None,
        microsoft_graph_administrative_unit_display_name: Optional[str] = None,
        microsoft_graph_administrative_unit_description: Optional[str] = None,
        visibility: Optional[str] = None,
        members: Optional[List["models.MicrosoftGraphDirectoryObject"]] = None,
        scoped_role_members: Optional[List["models.MicrosoftGraphScopedRoleMembership"]] = None,
        extensions: Optional[List["models.MicrosoftGraphEntity"]] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        id1: Optional[str] = None,
        display_name1: Optional[str] = None,
        id2: Optional[str] = None,
        display_name2: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property schools in education.

        Update the navigation property schools in education.

        :param education_school_id: key: educationSchool-id of educationSchool.
        :type education_school_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: Organization display name.
        :type display_name: str
        :param description: Organization description.
        :type description: str
        :param external_source:
        :type external_source: str or ~education.models.MicrosoftGraphEducationExternalSource
        :param principal_email: Email address of the principal.
        :type principal_email: str
        :param principal_name: Name of the principal.
        :type principal_name: str
        :param external_principal_id: ID of principal in syncing system.
        :type external_principal_id: str
        :param lowest_grade: Lowest grade taught.
        :type lowest_grade: str
        :param highest_grade: Highest grade taught.
        :type highest_grade: str
        :param school_number: School Number.
        :type school_number: str
        :param external_id: ID of school in syncing system.
        :type external_id: str
        :param phone: Phone number of school.
        :type phone: str
        :param fax:
        :type fax: str
        :param address: physicalAddress.
        :type address: ~education.models.MicrosoftGraphPhysicalAddress
        :param classes: Classes taught at the school. Nullable.
        :type classes: list[~education.models.MicrosoftGraphEducationClass]
        :param users: Users in the school. Nullable.
        :type users: list[~education.models.MicrosoftGraphEducationUser]
        :param microsoft_graph_entity_id: Read-only.
        :type microsoft_graph_entity_id: str
        :param deleted_date_time:
        :type deleted_date_time: ~datetime.datetime
        :param microsoft_graph_administrative_unit_display_name:
        :type microsoft_graph_administrative_unit_display_name: str
        :param microsoft_graph_administrative_unit_description:
        :type microsoft_graph_administrative_unit_description: str
        :param visibility:
        :type visibility: str
        :param members:
        :type members: list[~education.models.MicrosoftGraphDirectoryObject]
        :param scoped_role_members:
        :type scoped_role_members: list[~education.models.MicrosoftGraphScopedRoleMembership]
        :param extensions:
        :type extensions: list[~education.models.MicrosoftGraphEntity]
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationSchool(id=id, display_name=display_name, description=description, external_source=external_source, principal_email=principal_email, principal_name=principal_name, external_principal_id=external_principal_id, lowest_grade=lowest_grade, highest_grade=highest_grade, school_number=school_number, external_id=external_id, phone=phone, fax=fax, address=address, classes=classes, users=users, id_administrative_unit_id=microsoft_graph_entity_id, deleted_date_time=deleted_date_time, display_name_administrative_unit_display_name=microsoft_graph_administrative_unit_display_name, description_administrative_unit_description=microsoft_graph_administrative_unit_description, visibility=visibility, members=members, scoped_role_members=scoped_role_members, extensions=extensions, id_created_by_user_id=microsoft_graph_identity_id, display_name_created_by_user_display_name=microsoft_graph_identity_display_name, id_created_by_device_id=id1, display_name_created_by_device_display_name=display_name1, id_created_by_application_id=id2, display_name_created_by_application_display_name=display_name2)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_school.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationSchool-id': self._serialize.url("education_school_id", education_school_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationSchool')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_school.metadata = {'url': '/education/schools/{educationSchool-id}'}  # type: ignore

    def list_synchronization_profile(
        self,
        orderby: Optional[List[Union[str, "models.Enum230"]]] = None,
        select: Optional[List[Union[str, "models.Enum231"]]] = None,
        expand: Optional[List[Union[str, "models.Enum232"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationSynchronizationProfile"]:
        """Get synchronizationProfiles from education.

        Get synchronizationProfiles from education.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum230]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum231]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum232]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationSynchronizationProfile or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationSynchronizationProfile]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationSynchronizationProfile"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_synchronization_profile.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationSynchronizationProfile', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_synchronization_profile.metadata = {'url': '/education/synchronizationProfiles'}  # type: ignore

    async def create_synchronization_profile(
        self,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        data_provider: Optional[object] = None,
        identity_synchronization_configuration: Optional[object] = None,
        licenses_to_assign: Optional[List["models.MicrosoftGraphEducationSynchronizationLicenseAssignment"]] = None,
        state: Optional[Union[str, "models.MicrosoftGraphEducationSynchronizationProfileState"]] = None,
        handle_special_character_constraint: Optional[bool] = None,
        errors: Optional[List["models.MicrosoftGraphEducationSynchronizationError"]] = None,
        profile_status: Optional["models.MicrosoftGraphEducationSynchronizationProfileStatus"] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationSynchronizationProfile":
        """Create new navigation property to synchronizationProfiles for education.

        Create new navigation property to synchronizationProfiles for education.

        :param id: Read-only.
        :type id: str
        :param display_name:
        :type display_name: str
        :param data_provider: Any object.
        :type data_provider: object
        :param identity_synchronization_configuration: Any object.
        :type identity_synchronization_configuration: object
        :param licenses_to_assign:
        :type licenses_to_assign: list[~education.models.MicrosoftGraphEducationSynchronizationLicenseAssignment]
        :param state:
        :type state: str or ~education.models.MicrosoftGraphEducationSynchronizationProfileState
        :param handle_special_character_constraint:
        :type handle_special_character_constraint: bool
        :param errors:
        :type errors: list[~education.models.MicrosoftGraphEducationSynchronizationError]
        :param profile_status: educationSynchronizationProfileStatus.
        :type profile_status: ~education.models.MicrosoftGraphEducationSynchronizationProfileStatus
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationSynchronizationProfile, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationSynchronizationProfile
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationSynchronizationProfile"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationSynchronizationProfile(id=id, display_name=display_name, data_provider=data_provider, identity_synchronization_configuration=identity_synchronization_configuration, licenses_to_assign=licenses_to_assign, state=state, handle_special_character_constraint=handle_special_character_constraint, errors=errors, profile_status=profile_status)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_synchronization_profile.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationSynchronizationProfile')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationSynchronizationProfile', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_synchronization_profile.metadata = {'url': '/education/synchronizationProfiles'}  # type: ignore

    async def get_synchronization_profile(
        self,
        education_synchronization_profile_id: str,
        select: Optional[List[Union[str, "models.Enum233"]]] = None,
        expand: Optional[List[Union[str, "models.Enum234"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationSynchronizationProfile":
        """Get synchronizationProfiles from education.

        Get synchronizationProfiles from education.

        :param education_synchronization_profile_id: key: educationSynchronizationProfile-id of
         educationSynchronizationProfile.
        :type education_synchronization_profile_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum233]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum234]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationSynchronizationProfile, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationSynchronizationProfile
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationSynchronizationProfile"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_synchronization_profile.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationSynchronizationProfile-id': self._serialize.url("education_synchronization_profile_id", education_synchronization_profile_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationSynchronizationProfile', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_synchronization_profile.metadata = {'url': '/education/synchronizationProfiles/{educationSynchronizationProfile-id}'}  # type: ignore

    async def update_synchronization_profile(
        self,
        education_synchronization_profile_id: str,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        data_provider: Optional[object] = None,
        identity_synchronization_configuration: Optional[object] = None,
        licenses_to_assign: Optional[List["models.MicrosoftGraphEducationSynchronizationLicenseAssignment"]] = None,
        state: Optional[Union[str, "models.MicrosoftGraphEducationSynchronizationProfileState"]] = None,
        handle_special_character_constraint: Optional[bool] = None,
        errors: Optional[List["models.MicrosoftGraphEducationSynchronizationError"]] = None,
        profile_status: Optional["models.MicrosoftGraphEducationSynchronizationProfileStatus"] = None,
        **kwargs
    ) -> None:
        """Update the navigation property synchronizationProfiles in education.

        Update the navigation property synchronizationProfiles in education.

        :param education_synchronization_profile_id: key: educationSynchronizationProfile-id of
         educationSynchronizationProfile.
        :type education_synchronization_profile_id: str
        :param id: Read-only.
        :type id: str
        :param display_name:
        :type display_name: str
        :param data_provider: Any object.
        :type data_provider: object
        :param identity_synchronization_configuration: Any object.
        :type identity_synchronization_configuration: object
        :param licenses_to_assign:
        :type licenses_to_assign: list[~education.models.MicrosoftGraphEducationSynchronizationLicenseAssignment]
        :param state:
        :type state: str or ~education.models.MicrosoftGraphEducationSynchronizationProfileState
        :param handle_special_character_constraint:
        :type handle_special_character_constraint: bool
        :param errors:
        :type errors: list[~education.models.MicrosoftGraphEducationSynchronizationError]
        :param profile_status: educationSynchronizationProfileStatus.
        :type profile_status: ~education.models.MicrosoftGraphEducationSynchronizationProfileStatus
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEducationSynchronizationProfile(id=id, display_name=display_name, data_provider=data_provider, identity_synchronization_configuration=identity_synchronization_configuration, licenses_to_assign=licenses_to_assign, state=state, handle_special_character_constraint=handle_special_character_constraint, errors=errors, profile_status=profile_status)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_synchronization_profile.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationSynchronizationProfile-id': self._serialize.url("education_synchronization_profile_id", education_synchronization_profile_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEducationSynchronizationProfile')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_synchronization_profile.metadata = {'url': '/education/synchronizationProfiles/{educationSynchronizationProfile-id}'}  # type: ignore

    def list_user(
        self,
        orderby: Optional[List[Union[str, "models.Enum239"]]] = None,
        select: Optional[List[Union[str, "models.Enum240"]]] = None,
        expand: Optional[List[Union[str, "models.Enum241"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfEducationUser2"]:
        """Get users from education.

        Get users from education.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~education.models.Enum239]
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum240]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum241]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfEducationUser2 or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~education.models.CollectionOfEducationUser2]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfEducationUser2"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_user.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfEducationUser2', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_user.metadata = {'url': '/education/users'}  # type: ignore

    async def create_user(
        self,
        body: "models.MicrosoftGraphEducationUser",
        **kwargs
    ) -> "models.MicrosoftGraphEducationUser":
        """Create new navigation property to users for education.

        Create new navigation property to users for education.

        :param body: New navigation property.
        :type body: ~education.models.MicrosoftGraphEducationUser
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationUser, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationUser
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationUser"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_user.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphEducationUser')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationUser', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_user.metadata = {'url': '/education/users'}  # type: ignore

    async def get_user(
        self,
        education_user_id: str,
        select: Optional[List[Union[str, "models.Enum242"]]] = None,
        expand: Optional[List[Union[str, "models.Enum243"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEducationUser":
        """Get users from education.

        Get users from education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~education.models.Enum242]
        :param expand: Expand related entities.
        :type expand: list[str or ~education.models.Enum243]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEducationUser, or the result of cls(response)
        :rtype: ~education.models.MicrosoftGraphEducationUser
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEducationUser"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_user.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEducationUser', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_user.metadata = {'url': '/education/users/{educationUser-id}'}  # type: ignore

    async def update_user(
        self,
        education_user_id: str,
        body: "models.MicrosoftGraphEducationUser",
        **kwargs
    ) -> None:
        """Update the navigation property users in education.

        Update the navigation property users in education.

        :param education_user_id: key: educationUser-id of educationUser.
        :type education_user_id: str
        :param body: New navigation property values.
        :type body: ~education.models.MicrosoftGraphEducationUser
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_user.metadata['url']  # type: ignore
        path_format_arguments = {
            'educationUser-id': self._serialize.url("education_user_id", education_user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphEducationUser')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_user.metadata = {'url': '/education/users/{educationUser-id}'}  # type: ignore
