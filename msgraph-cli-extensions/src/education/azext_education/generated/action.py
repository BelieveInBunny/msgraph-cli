# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddTerm(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.term = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'external-id':
                d['external_id'] = v[0]
            elif kl == 'start-date':
                d['start_date'] = v[0]
            elif kl == 'end-date':
                d['end_date'] = v[0]
            elif kl == 'display-name':
                d['display_name'] = v[0]
        return d


class AddCourse(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.course = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'subject':
                d['subject'] = v[0]
            elif kl == 'course-number':
                d['course_number'] = v[0]
            elif kl == 'description':
                d['description'] = v[0]
            elif kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'external-id':
                d['external_id'] = v[0]
        return d


class AddAssignmentCategories(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddAssignmentCategories, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddAddress(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.address = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'type':
                d['type'] = v[0]
            elif kl == 'post-office-box':
                d['post_office_box'] = v[0]
            elif kl == 'street':
                d['street'] = v[0]
            elif kl == 'city':
                d['city'] = v[0]
            elif kl == 'state':
                d['state'] = v[0]
            elif kl == 'country-or-region':
                d['country_or_region'] = v[0]
            elif kl == 'postal-code':
                d['postal_code'] = v[0]
        return d


class AddAdministrativeUnitMembers(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddAdministrativeUnitMembers, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'deleted-date-time':
                d['deleted_date_time'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddAdministrativeUnitScopedRoleMembers(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddAdministrativeUnitScopedRoleMembers, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'role-id':
                d['role_id'] = v[0]
            elif kl == 'administrative-unit-id':
                d['administrative_unit_id'] = v[0]
            elif kl == 'id-role-member-info-id':
                d['id_role_member_info_id'] = v[0]
            elif kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddAdministrativeUnitExtensions(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddAdministrativeUnitExtensions, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'id':
                d['id'] = v[0]
        return d


class AddLicensesToAssign(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddLicensesToAssign, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'applies-to':
                d['applies_to'] = v[0]
            elif kl == 'sku-ids':
                d['sku_ids'] = v
        return d


class AddErrors(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddErrors, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'entry-type':
                d['entry_type'] = v[0]
            elif kl == 'error-code':
                d['error_code'] = v[0]
            elif kl == 'error-message':
                d['error_message'] = v[0]
            elif kl == 'joining-value':
                d['joining_value'] = v[0]
            elif kl == 'recorded-date-time':
                d['recorded_date_time'] = v[0]
            elif kl == 'reportable-identifier':
                d['reportable_identifier'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddProfileStatus(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.profile_status = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'status':
                d['status'] = v[0]
            elif kl == 'last-synchronization-date-time':
                d['last_synchronization_date_time'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddInstructions(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.instructions = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'content-type':
                d['content_type'] = v[0]
            elif kl == 'content':
                d['content'] = v[0]
        return d


class AddEducationClassesResources(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddEducationClassesResources, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'distribute-for-student-work':
                d['distribute_for_student_work'] = v[0]
            elif kl == 'display-name-resource-display-name':
                d['display_name_resource_display_name'] = v[0]
            elif kl == 'created-date-time':
                d['created_date_time'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'id-resource-last-modified-by-user-id':
                d['id_resource_last_modified_by_user_id'] = v[0]
            elif kl == 'display-name-resource-last-modified-by-user-display-name':
                d['display_name_resource_last_modified_by_user_display_name'] = v[0]
            elif kl == 'id-resource-last-modified-by-device-id':
                d['id_resource_last_modified_by_device_id'] = v[0]
            elif kl == 'display-name-resource-last-modified-by-device-display-name':
                d['display_name_resource_last_modified_by_device_display_name'] = v[0]
            elif kl == 'id-resource-last-modified-by-application-id':
                d['id_resource_last_modified_by_application_id'] = v[0]
            elif kl == 'display-name-resource-last-modified-by-application-display-name':
                d['display_name_resource_last_modified_by_application_display_name'] = v[0]
            elif kl == 'id-resource-created-by-user-id':
                d['id_resource_created_by_user_id'] = v[0]
            elif kl == 'display-name-resource-created-by-user-display-name':
                d['display_name_resource_created_by_user_display_name'] = v[0]
            elif kl == 'id-resource-created-by-device-id':
                d['id_resource_created_by_device_id'] = v[0]
            elif kl == 'display-name-resource-created-by-device-display-name':
                d['display_name_resource_created_by_device_display_name'] = v[0]
            elif kl == 'id-resource-created-by-application-id':
                d['id_resource_created_by_application_id'] = v[0]
            elif kl == 'display-name-resource-created-by-application-display-name':
                d['display_name_resource_created_by_application_display_name'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddCategories(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCategories, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddEducationClassesAssignmentsResources(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddEducationClassesAssignmentsResources, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'assignment-resource-url':
                d['assignment_resource_url'] = v[0]
            elif kl == 'display-name-resource-display-name':
                d['display_name_resource_display_name'] = v[0]
            elif kl == 'created-date-time':
                d['created_date_time'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'id-resource-last-modified-by-user-id':
                d['id_resource_last_modified_by_user_id'] = v[0]
            elif kl == 'display-name-resource-last-modified-by-user-display-name':
                d['display_name_resource_last_modified_by_user_display_name'] = v[0]
            elif kl == 'id-resource-last-modified-by-device-id':
                d['id_resource_last_modified_by_device_id'] = v[0]
            elif kl == 'display-name-resource-last-modified-by-device-display-name':
                d['display_name_resource_last_modified_by_device_display_name'] = v[0]
            elif kl == 'id-resource-last-modified-by-application-id':
                d['id_resource_last_modified_by_application_id'] = v[0]
            elif kl == 'display-name-resource-last-modified-by-application-display-name':
                d['display_name_resource_last_modified_by_application_display_name'] = v[0]
            elif kl == 'id-resource-created-by-user-id':
                d['id_resource_created_by_user_id'] = v[0]
            elif kl == 'display-name-resource-created-by-user-display-name':
                d['display_name_resource_created_by_user_display_name'] = v[0]
            elif kl == 'id-resource-created-by-device-id':
                d['id_resource_created_by_device_id'] = v[0]
            elif kl == 'display-name-resource-created-by-device-display-name':
                d['display_name_resource_created_by_device_display_name'] = v[0]
            elif kl == 'id-resource-created-by-application-id':
                d['id_resource_created_by_application_id'] = v[0]
            elif kl == 'display-name-resource-created-by-application-display-name':
                d['display_name_resource_created_by_application_display_name'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddSubmittedResources(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSubmittedResources, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'assignment-resource-url':
                d['assignment_resource_url'] = v[0]
            elif kl == 'display-name-resource-display-name':
                d['display_name_resource_display_name'] = v[0]
            elif kl == 'created-date-time':
                d['created_date_time'] = v[0]
            elif kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'id-resource-last-modified-by-user-id':
                d['id_resource_last_modified_by_user_id'] = v[0]
            elif kl == 'display-name-resource-last-modified-by-user-display-name':
                d['display_name_resource_last_modified_by_user_display_name'] = v[0]
            elif kl == 'id-resource-last-modified-by-device-id':
                d['id_resource_last_modified_by_device_id'] = v[0]
            elif kl == 'display-name-resource-last-modified-by-device-display-name':
                d['display_name_resource_last_modified_by_device_display_name'] = v[0]
            elif kl == 'id-resource-last-modified-by-application-id':
                d['id_resource_last_modified_by_application_id'] = v[0]
            elif kl == 'display-name-resource-last-modified-by-application-display-name':
                d['display_name_resource_last_modified_by_application_display_name'] = v[0]
            elif kl == 'id-resource-created-by-user-id':
                d['id_resource_created_by_user_id'] = v[0]
            elif kl == 'display-name-resource-created-by-user-display-name':
                d['display_name_resource_created_by_user_display_name'] = v[0]
            elif kl == 'id-resource-created-by-device-id':
                d['id_resource_created_by_device_id'] = v[0]
            elif kl == 'display-name-resource-created-by-device-display-name':
                d['display_name_resource_created_by_device_display_name'] = v[0]
            elif kl == 'id-resource-created-by-application-id':
                d['id_resource_created_by_application_id'] = v[0]
            elif kl == 'display-name-resource-created-by-application-display-name':
                d['display_name_resource_created_by_application_display_name'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d


class AddOutcomes(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddOutcomes, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'last-modified-date-time':
                d['last_modified_date_time'] = v[0]
            elif kl == 'id-last-modified-by-user-id':
                d['id_last_modified_by_user_id'] = v[0]
            elif kl == 'display-name-last-modified-by-user-display-name':
                d['display_name_last_modified_by_user_display_name'] = v[0]
            elif kl == 'id-last-modified-by-device-id':
                d['id_last_modified_by_device_id'] = v[0]
            elif kl == 'display-name-last-modified-by-device-display-name':
                d['display_name_last_modified_by_device_display_name'] = v[0]
            elif kl == 'id-last-modified-by-application-id':
                d['id_last_modified_by_application_id'] = v[0]
            elif kl == 'display-name-last-modified-by-application-display-name':
                d['display_name_last_modified_by_application_display_name'] = v[0]
            elif kl == 'id':
                d['id'] = v[0]
        return d
