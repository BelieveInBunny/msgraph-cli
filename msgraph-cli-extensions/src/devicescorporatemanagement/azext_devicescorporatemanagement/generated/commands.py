# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from msgraph.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management_device_app_management
    devicescorporatemanagement_device_app_management_device_app_management = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_device_app_management_operations#DeviceAppManagementDeviceAppManagementOperations.{}',
        client_factory=cf_device_app_management_device_app_management)
    with self.command_group('devicescorporatemanagement',
                            devicescorporatemanagement_device_app_management_device_app_management,
                            client_factory=cf_device_app_management_device_app_management) as g:
        g.custom_command('get-device-app-management', 'devicescorporatemanagement_get_device_app_management')
        g.custom_command('update-device-app-management', 'devicescorporatemanagement_update_device_app_management')

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management
    devicescorporatemanagement_device_app_management = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_operations#DeviceAppManagementOperations.{}',
        client_factory=cf_device_app_management)
    with self.command_group('devicescorporatemanagement', devicescorporatemanagement_device_app_management,
                            client_factory=cf_device_app_management) as g:
        g.custom_command('delete', 'devicescorporatemanagement_delete', confirmation=True)
        g.custom_command('create-android-managed-app-protection', 'devicescorporatemanagement_create_android_managed_ap'
                         'p_protection')
        g.custom_command('create-default-managed-app-protection', 'devicescorporatemanagement_create_default_managed_ap'
                         'p_protection')
        g.custom_command('create-io-managed-app-protection', 'devicescorporatemanagement_create_io_managed_app_protecti'
                         'on')
        g.custom_command('create-managed-app-policy', 'devicescorporatemanagement_create_managed_app_policy')
        g.custom_command('create-managed-app-registration', 'devicescorporatemanagement_create_managed_app_registration'
                         '')
        g.custom_command('create-managed-app-statuses', 'devicescorporatemanagement_create_managed_app_statuses')
        g.custom_command('create-managed-e-book', 'devicescorporatemanagement_create_managed_e_book')
        g.custom_command('create-mdm-window-information-protection-policy', 'devicescorporatemanagement_create_mdm_wind'
                         'ow_information_protection_policy')
        g.custom_command('create-mobile-app', 'devicescorporatemanagement_create_mobile_app')
        g.custom_command('create-mobile-app-category', 'devicescorporatemanagement_create_mobile_app_category')
        g.custom_command('create-mobile-app-configuration', 'devicescorporatemanagement_create_mobile_app_configuration'
                         '')
        g.custom_command('create-targeted-managed-app-configuration', 'devicescorporatemanagement_create_targeted_manag'
                         'ed_app_configuration')
        g.custom_command('create-vpp-token', 'devicescorporatemanagement_create_vpp_token')
        g.custom_command('create-window-information-protection-policy', 'devicescorporatemanagement_create_window_infor'
                         'mation_protection_policy')
        g.custom_command('get-android-managed-app-protection', 'devicescorporatemanagement_get_android_managed_app_prot'
                         'ection')
        g.custom_command('get-default-managed-app-protection', 'devicescorporatemanagement_get_default_managed_app_prot'
                         'ection')
        g.custom_command('get-io-managed-app-protection', 'devicescorporatemanagement_get_io_managed_app_protection')
        g.custom_command('get-managed-app-policy', 'devicescorporatemanagement_get_managed_app_policy')
        g.custom_command('get-managed-app-registration', 'devicescorporatemanagement_get_managed_app_registration')
        g.custom_command('get-managed-app-statuses', 'devicescorporatemanagement_get_managed_app_statuses')
        g.custom_command('get-managed-e-book', 'devicescorporatemanagement_get_managed_e_book')
        g.custom_command('get-mdm-window-information-protection-policy', 'devicescorporatemanagement_get_mdm_window_inf'
                         'ormation_protection_policy')
        g.custom_command('get-mobile-app', 'devicescorporatemanagement_get_mobile_app')
        g.custom_command('get-mobile-app-category', 'devicescorporatemanagement_get_mobile_app_category')
        g.custom_command('get-mobile-app-configuration', 'devicescorporatemanagement_get_mobile_app_configuration')
        g.custom_command('get-targeted-managed-app-configuration', 'devicescorporatemanagement_get_targeted_managed_app'
                         '_configuration')
        g.custom_command('get-vpp-token', 'devicescorporatemanagement_get_vpp_token')
        g.custom_command('get-window-information-protection-policy', 'devicescorporatemanagement_get_window_information'
                         '_protection_policy')
        g.custom_command('list-android-managed-app-protection', 'devicescorporatemanagement_list_android_managed_app_pr'
                         'otection')
        g.custom_command('list-default-managed-app-protection', 'devicescorporatemanagement_list_default_managed_app_pr'
                         'otection')
        g.custom_command('list-io-managed-app-protection',
                         'devicescorporatemanagement_list_io_managed_app_protection')
        g.custom_command('list-managed-app-policy', 'devicescorporatemanagement_list_managed_app_policy')
        g.custom_command('list-managed-app-registration', 'devicescorporatemanagement_list_managed_app_registration')
        g.custom_command('list-managed-app-statuses', 'devicescorporatemanagement_list_managed_app_statuses')
        g.custom_command('list-managed-e-book', 'devicescorporatemanagement_list_managed_e_book')
        g.custom_command('list-mdm-window-information-protection-policy', 'devicescorporatemanagement_list_mdm_window_i'
                         'nformation_protection_policy')
        g.custom_command('list-mobile-app', 'devicescorporatemanagement_list_mobile_app')
        g.custom_command('list-mobile-app-category', 'devicescorporatemanagement_list_mobile_app_category')
        g.custom_command('list-mobile-app-configuration', 'devicescorporatemanagement_list_mobile_app_configuration')
        g.custom_command('list-targeted-managed-app-configuration', 'devicescorporatemanagement_list_targeted_managed_a'
                         'pp_configuration')
        g.custom_command('list-vpp-token', 'devicescorporatemanagement_list_vpp_token')
        g.custom_command('list-window-information-protection-policy', 'devicescorporatemanagement_list_window_informati'
                         'on_protection_policy')
        g.custom_command('sync-microsoft-store-for-business-app', 'devicescorporatemanagement_sync_microsoft_store_for_'
                         'business_app')
        g.custom_command('update-android-managed-app-protection', 'devicescorporatemanagement_update_android_managed_ap'
                         'p_protection')
        g.custom_command('update-default-managed-app-protection', 'devicescorporatemanagement_update_default_managed_ap'
                         'p_protection')
        g.custom_command('update-io-managed-app-protection', 'devicescorporatemanagement_update_io_managed_app_protecti'
                         'on')
        g.custom_command('update-managed-app-policy', 'devicescorporatemanagement_update_managed_app_policy')
        g.custom_command('update-managed-app-registration', 'devicescorporatemanagement_update_managed_app_registration'
                         '')
        g.custom_command('update-managed-app-statuses', 'devicescorporatemanagement_update_managed_app_statuses')
        g.custom_command('update-managed-e-book', 'devicescorporatemanagement_update_managed_e_book')
        g.custom_command('update-mdm-window-information-protection-policy', 'devicescorporatemanagement_update_mdm_wind'
                         'ow_information_protection_policy')
        g.custom_command('update-mobile-app', 'devicescorporatemanagement_update_mobile_app')
        g.custom_command('update-mobile-app-category', 'devicescorporatemanagement_update_mobile_app_category')
        g.custom_command('update-mobile-app-configuration', 'devicescorporatemanagement_update_mobile_app_configuration'
                         '')
        g.custom_command('update-targeted-managed-app-configuration', 'devicescorporatemanagement_update_targeted_manag'
                         'ed_app_configuration')
        g.custom_command('update-vpp-token', 'devicescorporatemanagement_update_vpp_token')
        g.custom_command('update-window-information-protection-policy', 'devicescorporatemanagement_update_window_infor'
                         'mation_protection_policy')

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management_android_managed_app_protection
    devicescorporatemanagement_device_app_management_android_managed_app_protection = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_android_managed_app_protection_operations#DeviceAppManagementAndroidManagedAppProtectionOperatio'
        'ns.{}',
        client_factory=cf_device_app_management_android_managed_app_protection)
    with self.command_group('devicescorporatemanagement',
                            devicescorporatemanagement_device_app_management_android_managed_app_protection,
                            client_factory=cf_device_app_management_android_managed_app_protection) as g:
        g.custom_command('delete', 'devicescorporatemanagement_delete', confirmation=True)
        g.custom_command('create-app', 'devicescorporatemanagement_create_app')
        g.custom_command('get-app', 'devicescorporatemanagement_get_app')
        g.custom_command('get-deployment-summary', 'devicescorporatemanagement_get_deployment_summary')
        g.custom_command('list-app', 'devicescorporatemanagement_list_app')
        g.custom_command('update-app', 'devicescorporatemanagement_update_app')
        g.custom_command('update-deployment-summary', 'devicescorporatemanagement_update_deployment_summary')

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management_default_managed_app_protection
    devicescorporatemanagement_device_app_management_default_managed_app_protection = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_default_managed_app_protection_operations#DeviceAppManagementDefaultManagedAppProtectionOperatio'
        'ns.{}',
        client_factory=cf_device_app_management_default_managed_app_protection)
    with self.command_group('devicescorporatemanagement',
                            devicescorporatemanagement_device_app_management_default_managed_app_protection,
                            client_factory=cf_device_app_management_default_managed_app_protection) as g:
        g.custom_command('delete', 'devicescorporatemanagement_delete', confirmation=True)
        g.custom_command('create-app', 'devicescorporatemanagement_create_app')
        g.custom_command('get-app', 'devicescorporatemanagement_get_app')
        g.custom_command('get-deployment-summary', 'devicescorporatemanagement_get_deployment_summary')
        g.custom_command('list-app', 'devicescorporatemanagement_list_app')
        g.custom_command('update-app', 'devicescorporatemanagement_update_app')
        g.custom_command('update-deployment-summary', 'devicescorporatemanagement_update_deployment_summary')

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management_io_managed_app_protection
    devicescorporatemanagement_device_app_management_io_managed_app_protection = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_io_managed_app_protection_operations#DeviceAppManagementIoManagedAppProtectionOperations.{}',
        client_factory=cf_device_app_management_io_managed_app_protection)
    with self.command_group('devicescorporatemanagement',
                            devicescorporatemanagement_device_app_management_io_managed_app_protection,
                            client_factory=cf_device_app_management_io_managed_app_protection) as g:
        g.custom_command('delete', 'devicescorporatemanagement_delete', confirmation=True)
        g.custom_command('create-app', 'devicescorporatemanagement_create_app')
        g.custom_command('get-app', 'devicescorporatemanagement_get_app')
        g.custom_command('get-deployment-summary', 'devicescorporatemanagement_get_deployment_summary')
        g.custom_command('list-app', 'devicescorporatemanagement_list_app')
        g.custom_command('update-app', 'devicescorporatemanagement_update_app')
        g.custom_command('update-deployment-summary', 'devicescorporatemanagement_update_deployment_summary')

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management_managed_app_policy
    devicescorporatemanagement_device_app_management_managed_app_policy = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_managed_app_policy_operations#DeviceAppManagementManagedAppPolicyOperations.{}',
        client_factory=cf_device_app_management_managed_app_policy)
    with self.command_group('devicescorporatemanagement',
                            devicescorporatemanagement_device_app_management_managed_app_policy,
                            client_factory=cf_device_app_management_managed_app_policy) as g:
        g.custom_command('target-app', 'devicescorporatemanagement_target_app')

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management_managed_app_registration
    devicescorporatemanagement_device_app_management_managed_app_registration = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_managed_app_registration_operations#DeviceAppManagementManagedAppRegistrationOperations.{}',
        client_factory=cf_device_app_management_managed_app_registration)
    with self.command_group('devicescorporatemanagement',
                            devicescorporatemanagement_device_app_management_managed_app_registration,
                            client_factory=cf_device_app_management_managed_app_registration) as g:
        g.custom_command('delete', 'devicescorporatemanagement_delete', confirmation=True)
        g.custom_command('create-applied-policy', 'devicescorporatemanagement_create_applied_policy')
        g.custom_command('create-intended-policy', 'devicescorporatemanagement_create_intended_policy')
        g.custom_command('create-operation', 'devicescorporatemanagement_create_operation')
        g.custom_command('get-applied-policy', 'devicescorporatemanagement_get_applied_policy')
        g.custom_command('get-intended-policy', 'devicescorporatemanagement_get_intended_policy')
        g.custom_command('get-operation', 'devicescorporatemanagement_get_operation')
        g.custom_command('get-user-id-with-flagged-app-registration', 'devicescorporatemanagement_get_user_id_with_flag'
                         'ged_app_registration')
        g.custom_command('list-applied-policy', 'devicescorporatemanagement_list_applied_policy')
        g.custom_command('list-intended-policy', 'devicescorporatemanagement_list_intended_policy')
        g.custom_command('list-operation', 'devicescorporatemanagement_list_operation')
        g.custom_command('update-applied-policy', 'devicescorporatemanagement_update_applied_policy')
        g.custom_command('update-intended-policy', 'devicescorporatemanagement_update_intended_policy')
        g.custom_command('update-operation', 'devicescorporatemanagement_update_operation')

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management_managed_app_registration_applied_policy
    devicescorporatemanagement_device_app_management_managed_app_registration_applied_policy = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_managed_app_registration_applied_policy_operations#DeviceAppManagementManagedAppRegistrationAppl'
        'iedPolicyOperations.{}',
        client_factory=cf_device_app_management_managed_app_registration_applied_policy)
    with self.command_group('devicescorporatemanagement',
                            devicescorporatemanagement_device_app_management_managed_app_registration_applied_policy,
                            client_factory=cf_device_app_management_managed_app_registration_applied_policy) as g:
        g.custom_command('target-app', 'devicescorporatemanagement_target_app')

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management_managed_app_registration_intended_policy
    devicescorporatemanagement_device_app_management_managed_app_registration_intended_policy = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_managed_app_registration_intended_policy_operations#DeviceAppManagementManagedAppRegistrationInt'
        'endedPolicyOperations.{}',
        client_factory=cf_device_app_management_managed_app_registration_intended_policy)
    with self.command_group('devicescorporatemanagement',
                            devicescorporatemanagement_device_app_management_managed_app_registration_intended_policy,
                            client_factory=cf_device_app_management_managed_app_registration_intended_policy) as g:
        g.custom_command('target-app', 'devicescorporatemanagement_target_app')

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management_managed_ebook
    devicescorporatemanagement_device_app_management_managed_ebook = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_managed_ebook_operations#DeviceAppManagementManagedEBookOperations.{}',
        client_factory=cf_device_app_management_managed_ebook)
    with self.command_group('devicescorporatemanagement',
                            devicescorporatemanagement_device_app_management_managed_ebook,
                            client_factory=cf_device_app_management_managed_ebook) as g:
        g.custom_command('delete', 'devicescorporatemanagement_delete', confirmation=True)
        g.custom_command('assign', 'devicescorporatemanagement_assign')
        g.custom_command('create-assignment', 'devicescorporatemanagement_create_assignment')
        g.custom_command('create-device-state', 'devicescorporatemanagement_create_device_state')
        g.custom_command('create-user-state-summary', 'devicescorporatemanagement_create_user_state_summary')
        g.custom_command('get-assignment', 'devicescorporatemanagement_get_assignment')
        g.custom_command('get-device-state', 'devicescorporatemanagement_get_device_state')
        g.custom_command('get-install-summary', 'devicescorporatemanagement_get_install_summary')
        g.custom_command('get-user-state-summary', 'devicescorporatemanagement_get_user_state_summary')
        g.custom_command('list-assignment', 'devicescorporatemanagement_list_assignment')
        g.custom_command('list-device-state', 'devicescorporatemanagement_list_device_state')
        g.custom_command('list-user-state-summary', 'devicescorporatemanagement_list_user_state_summary')
        g.custom_command('update-assignment', 'devicescorporatemanagement_update_assignment')
        g.custom_command('update-device-state', 'devicescorporatemanagement_update_device_state')
        g.custom_command('update-install-summary', 'devicescorporatemanagement_update_install_summary')
        g.custom_command('update-user-state-summary', 'devicescorporatemanagement_update_user_state_summary')

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management_managed_ebook_user_state_summary
    devicescorporatemanagement_device_app_management_managed_ebook_user_state_summary = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_managed_ebook_user_state_summary_operations#DeviceAppManagementManagedEBookUserStateSummaryOpera'
        'tions.{}',
        client_factory=cf_device_app_management_managed_ebook_user_state_summary)
    with self.command_group('devicescorporatemanagement',
                            devicescorporatemanagement_device_app_management_managed_ebook_user_state_summary,
                            client_factory=cf_device_app_management_managed_ebook_user_state_summary) as g:
        g.custom_command('delete', 'devicescorporatemanagement_delete', confirmation=True)
        g.custom_command('create-device-state', 'devicescorporatemanagement_create_device_state')
        g.custom_command('get-device-state', 'devicescorporatemanagement_get_device_state')
        g.custom_command('list-device-state', 'devicescorporatemanagement_list_device_state')
        g.custom_command('update-device-state', 'devicescorporatemanagement_update_device_state')

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management_mobile_app_configuration
    devicescorporatemanagement_device_app_management_mobile_app_configuration = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_mobile_app_configuration_operations#DeviceAppManagementMobileAppConfigurationOperations.{}',
        client_factory=cf_device_app_management_mobile_app_configuration)
    with self.command_group('devicescorporatemanagement',
                            devicescorporatemanagement_device_app_management_mobile_app_configuration,
                            client_factory=cf_device_app_management_mobile_app_configuration) as g:
        g.custom_command('delete', 'devicescorporatemanagement_delete', confirmation=True)
        g.custom_command('assign', 'devicescorporatemanagement_assign')
        g.custom_command('create-assignment', 'devicescorporatemanagement_create_assignment')
        g.custom_command('create-device-statuses', 'devicescorporatemanagement_create_device_statuses')
        g.custom_command('create-user-statuses', 'devicescorporatemanagement_create_user_statuses')
        g.custom_command('get-assignment', 'devicescorporatemanagement_get_assignment')
        g.custom_command('get-device-status-summary', 'devicescorporatemanagement_get_device_status_summary')
        g.custom_command('get-device-statuses', 'devicescorporatemanagement_get_device_statuses')
        g.custom_command('get-user-status-summary', 'devicescorporatemanagement_get_user_status_summary')
        g.custom_command('get-user-statuses', 'devicescorporatemanagement_get_user_statuses')
        g.custom_command('list-assignment', 'devicescorporatemanagement_list_assignment')
        g.custom_command('list-device-statuses', 'devicescorporatemanagement_list_device_statuses')
        g.custom_command('list-user-statuses', 'devicescorporatemanagement_list_user_statuses')
        g.custom_command('update-assignment', 'devicescorporatemanagement_update_assignment')
        g.custom_command('update-device-status-summary', 'devicescorporatemanagement_update_device_status_summary')
        g.custom_command('update-device-statuses', 'devicescorporatemanagement_update_device_statuses')
        g.custom_command('update-user-status-summary', 'devicescorporatemanagement_update_user_status_summary')
        g.custom_command('update-user-statuses', 'devicescorporatemanagement_update_user_statuses')

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management_mobile_app
    devicescorporatemanagement_device_app_management_mobile_app = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_mobile_app_operations#DeviceAppManagementMobileAppOperations.{}',
        client_factory=cf_device_app_management_mobile_app)
    with self.command_group('devicescorporatemanagement', devicescorporatemanagement_device_app_management_mobile_app,
                            client_factory=cf_device_app_management_mobile_app) as g:
        g.custom_command('delete', 'devicescorporatemanagement_delete', confirmation=True)
        g.custom_command('assign', 'devicescorporatemanagement_assign')
        g.custom_command('create-assignment', 'devicescorporatemanagement_create_assignment')
        g.custom_command('create-ref-category', 'devicescorporatemanagement_create_ref_category')
        g.custom_command('get-assignment', 'devicescorporatemanagement_get_assignment')
        g.custom_command('list-assignment', 'devicescorporatemanagement_list_assignment')
        g.custom_command('list-category', 'devicescorporatemanagement_list_category')
        g.custom_command('list-ref-category', 'devicescorporatemanagement_list_ref_category')
        g.custom_command('update-assignment', 'devicescorporatemanagement_update_assignment')

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management_targeted_managed_app_configuration
    devicescorporatemanagement_device_app_management_targeted_managed_app_configuration = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_targeted_managed_app_configuration_operations#DeviceAppManagementTargetedManagedAppConfiguration'
        'Operations.{}',
        client_factory=cf_device_app_management_targeted_managed_app_configuration)
    with self.command_group('devicescorporatemanagement',
                            devicescorporatemanagement_device_app_management_targeted_managed_app_configuration,
                            client_factory=cf_device_app_management_targeted_managed_app_configuration) as g:
        g.custom_command('delete', 'devicescorporatemanagement_delete', confirmation=True)
        g.custom_command('assign', 'devicescorporatemanagement_assign')
        g.custom_command('create-app', 'devicescorporatemanagement_create_app')
        g.custom_command('create-assignment', 'devicescorporatemanagement_create_assignment')
        g.custom_command('get-app', 'devicescorporatemanagement_get_app')
        g.custom_command('get-assignment', 'devicescorporatemanagement_get_assignment')
        g.custom_command('get-deployment-summary', 'devicescorporatemanagement_get_deployment_summary')
        g.custom_command('list-app', 'devicescorporatemanagement_list_app')
        g.custom_command('list-assignment', 'devicescorporatemanagement_list_assignment')
        g.custom_command('target-app', 'devicescorporatemanagement_target_app')
        g.custom_command('update-app', 'devicescorporatemanagement_update_app')
        g.custom_command('update-assignment', 'devicescorporatemanagement_update_assignment')
        g.custom_command('update-deployment-summary', 'devicescorporatemanagement_update_deployment_summary')

    from azext_devicescorporatemanagement.generated._client_factory import cf_device_app_management_vpp_token
    devicescorporatemanagement_device_app_management_vpp_token = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._device_a'
        'pp_management_vpp_token_operations#DeviceAppManagementVppTokenOperations.{}',
        client_factory=cf_device_app_management_vpp_token)
    with self.command_group('devicescorporatemanagement', devicescorporatemanagement_device_app_management_vpp_token,
                            client_factory=cf_device_app_management_vpp_token) as g:
        g.custom_command('sync-license', 'devicescorporatemanagement_sync_license')

    from azext_devicescorporatemanagement.generated._client_factory import cf_user
    devicescorporatemanagement_user = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._user_ope'
        'rations#UserOperations.{}',
        client_factory=cf_user)
    with self.command_group('devicescorporatemanagement', devicescorporatemanagement_user,
                            client_factory=cf_user) as g:
        g.custom_command('delete', 'devicescorporatemanagement_delete', confirmation=True)
        g.custom_command('create-device-management-troubleshooting-event', 'devicescorporatemanagement_create_device_ma'
                         'nagement_troubleshooting_event')
        g.custom_command('create-managed-device', 'devicescorporatemanagement_create_managed_device')
        g.custom_command('create-ref-managed-app-registration', 'devicescorporatemanagement_create_ref_managed_app_regi'
                         'stration')
        g.custom_command('get-device-management-troubleshooting-event', 'devicescorporatemanagement_get_device_manageme'
                         'nt_troubleshooting_event')
        g.custom_command('get-managed-device', 'devicescorporatemanagement_get_managed_device')
        g.custom_command('list-device-management-troubleshooting-event', 'devicescorporatemanagement_list_device_manage'
                         'ment_troubleshooting_event')
        g.custom_command('list-managed-app-registration', 'devicescorporatemanagement_list_managed_app_registration')
        g.custom_command('list-managed-device', 'devicescorporatemanagement_list_managed_device')
        g.custom_command('list-ref-managed-app-registration', 'devicescorporatemanagement_list_ref_managed_app_registra'
                         'tion')
        g.custom_command('update-device-management-troubleshooting-event', 'devicescorporatemanagement_update_device_ma'
                         'nagement_troubleshooting_event')
        g.custom_command('update-managed-device', 'devicescorporatemanagement_update_managed_device')

    from azext_devicescorporatemanagement.generated._client_factory import cf_user_managed_device
    devicescorporatemanagement_user_managed_device = CliCommandType(
        operations_tmpl='azext_devicescorporatemanagement.vendored_sdks.devicescorporatemanagement.operations._user_man'
        'aged_device_operations#UserManagedDeviceOperations.{}',
        client_factory=cf_user_managed_device)
    with self.command_group('devicescorporatemanagement', devicescorporatemanagement_user_managed_device,
                            client_factory=cf_user_managed_device) as g:
        g.custom_command('delete', 'devicescorporatemanagement_delete', confirmation=True)
        g.custom_command('create-device-compliance-policy-state', 'devicescorporatemanagement_create_device_compliance_'
                         'policy_state')
        g.custom_command('create-device-configuration-state', 'devicescorporatemanagement_create_device_configuration_s'
                         'tate')
        g.custom_command('get-device-category', 'devicescorporatemanagement_get_device_category')
        g.custom_command('get-device-compliance-policy-state', 'devicescorporatemanagement_get_device_compliance_policy'
                         '_state')
        g.custom_command('get-device-configuration-state',
                         'devicescorporatemanagement_get_device_configuration_state')
        g.custom_command('list-device-compliance-policy-state', 'devicescorporatemanagement_list_device_compliance_poli'
                         'cy_state')
        g.custom_command('list-device-configuration-state', 'devicescorporatemanagement_list_device_configuration_state'
                         '')
        g.custom_command('update-device-category', 'devicescorporatemanagement_update_device_category')
        g.custom_command('update-device-compliance-policy-state', 'devicescorporatemanagement_update_device_compliance_'
                         'policy_state')
        g.custom_command('update-device-configuration-state', 'devicescorporatemanagement_update_device_configuration_s'
                         'tate')
