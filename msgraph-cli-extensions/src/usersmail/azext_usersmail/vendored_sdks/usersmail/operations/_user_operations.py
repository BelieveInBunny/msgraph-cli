# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class UserOperations(object):
    """UserOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~users_mail.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def get_inference_classification(
        self,
        user_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Get1ItemsItem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get2ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphInferenceClassification"
        """Get inferenceClassification from users.

        Get inferenceClassification from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~users_mail.models.Get1ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~users_mail.models.Get2ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphInferenceClassification, or the result of cls(response)
        :rtype: ~users_mail.models.MicrosoftGraphInferenceClassification
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphInferenceClassification"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_inference_classification.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphInferenceClassification', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_inference_classification.metadata = {'url': '/users/{user-id}/inferenceClassification'}  # type: ignore

    def update_inference_classification(
        self,
        user_id,  # type: str
        id=None,  # type: Optional[str]
        overrides=None,  # type: Optional[List["models.MicrosoftGraphInferenceClassificationOverride"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property inferenceClassification in users.

        Update the navigation property inferenceClassification in users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param overrides: A set of overrides for a user to always classify messages from specific
         senders in certain ways: focused, or other. Read-only. Nullable.
        :type overrides: list[~users_mail.models.MicrosoftGraphInferenceClassificationOverride]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphInferenceClassification(id=id, overrides=overrides)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_inference_classification.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphInferenceClassification')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_inference_classification.metadata = {'url': '/users/{user-id}/inferenceClassification'}  # type: ignore

    def list_mail_folder(
        self,
        user_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum6"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum7"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum8"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfMailFolder"]
        """Get mailFolders from users.

        Get mailFolders from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~users_mail.models.Enum6]
        :param select: Select properties to be returned.
        :type select: list[str or ~users_mail.models.Enum7]
        :param expand: Expand related entities.
        :type expand: list[str or ~users_mail.models.Enum8]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfMailFolder or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~users_mail.models.CollectionOfMailFolder]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfMailFolder"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_mail_folder.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfMailFolder', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_mail_folder.metadata = {'url': '/users/{user-id}/mailFolders'}  # type: ignore

    def create_mail_folder(
        self,
        user_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        parent_folder_id=None,  # type: Optional[str]
        child_folder_count=None,  # type: Optional[int]
        unread_item_count=None,  # type: Optional[int]
        total_item_count=None,  # type: Optional[int]
        well_known_name=None,  # type: Optional[str]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        messages=None,  # type: Optional[List["models.MicrosoftGraphMessage"]]
        message_rules=None,  # type: Optional[List["models.MicrosoftGraphMessageRule"]]
        child_folders=None,  # type: Optional[List["models.MicrosoftGraphMailFolder"]]
        user_configurations=None,  # type: Optional[List["models.MicrosoftGraphUserConfiguration"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMailFolder"
        """Create new navigation property to mailFolders for users.

        Create new navigation property to mailFolders for users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: The mailFolder's display name.
        :type display_name: str
        :param parent_folder_id: The unique identifier for the mailFolder's parent mailFolder.
        :type parent_folder_id: str
        :param child_folder_count: The number of immediate child mailFolders in the current mailFolder.
        :type child_folder_count: int
        :param unread_item_count: The number of items in the mailFolder marked as unread.
        :type unread_item_count: int
        :param total_item_count: The number of items in the mailFolder.
        :type total_item_count: int
        :param well_known_name:
        :type well_known_name: str
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the mailFolder. Read-only. Nullable.
        :type single_value_extended_properties: list[~users_mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the mailFolder. Read-only. Nullable.
        :type multi_value_extended_properties: list[~users_mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param messages: The collection of messages in the mailFolder.
        :type messages: list[~users_mail.models.MicrosoftGraphMessage]
        :param message_rules: The collection of rules that apply to the user's Inbox folder.
        :type message_rules: list[~users_mail.models.MicrosoftGraphMessageRule]
        :param child_folders: The collection of child folders in the mailFolder.
        :type child_folders: list[~users_mail.models.MicrosoftGraphMailFolder]
        :param user_configurations:
        :type user_configurations: list[~users_mail.models.MicrosoftGraphUserConfiguration]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMailFolder, or the result of cls(response)
        :rtype: ~users_mail.models.MicrosoftGraphMailFolder
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMailFolder"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMailFolder(id=id, display_name=display_name, parent_folder_id=parent_folder_id, child_folder_count=child_folder_count, unread_item_count=unread_item_count, total_item_count=total_item_count, well_known_name=well_known_name, single_value_extended_properties=single_value_extended_properties, multi_value_extended_properties=multi_value_extended_properties, messages=messages, message_rules=message_rules, child_folders=child_folders, user_configurations=user_configurations)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_mail_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMailFolder')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMailFolder', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_mail_folder.metadata = {'url': '/users/{user-id}/mailFolders'}  # type: ignore

    def get_mail_folder(
        self,
        user_id,  # type: str
        mail_folder_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum14"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum15"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMailFolder"
        """Get mailFolders from users.

        Get mailFolders from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param mail_folder_id: key: mailFolder-id of mailFolder.
        :type mail_folder_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~users_mail.models.Enum14]
        :param expand: Expand related entities.
        :type expand: list[str or ~users_mail.models.Enum15]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMailFolder, or the result of cls(response)
        :rtype: ~users_mail.models.MicrosoftGraphMailFolder
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMailFolder"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_mail_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMailFolder', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mail_folder.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}'}  # type: ignore

    def update_mail_folder(
        self,
        user_id,  # type: str
        mail_folder_id,  # type: str
        id=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        parent_folder_id=None,  # type: Optional[str]
        child_folder_count=None,  # type: Optional[int]
        unread_item_count=None,  # type: Optional[int]
        total_item_count=None,  # type: Optional[int]
        well_known_name=None,  # type: Optional[str]
        single_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]]
        multi_value_extended_properties=None,  # type: Optional[List["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]]
        messages=None,  # type: Optional[List["models.MicrosoftGraphMessage"]]
        message_rules=None,  # type: Optional[List["models.MicrosoftGraphMessageRule"]]
        child_folders=None,  # type: Optional[List["models.MicrosoftGraphMailFolder"]]
        user_configurations=None,  # type: Optional[List["models.MicrosoftGraphUserConfiguration"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property mailFolders in users.

        Update the navigation property mailFolders in users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param mail_folder_id: key: mailFolder-id of mailFolder.
        :type mail_folder_id: str
        :param id: Read-only.
        :type id: str
        :param display_name: The mailFolder's display name.
        :type display_name: str
        :param parent_folder_id: The unique identifier for the mailFolder's parent mailFolder.
        :type parent_folder_id: str
        :param child_folder_count: The number of immediate child mailFolders in the current mailFolder.
        :type child_folder_count: int
        :param unread_item_count: The number of items in the mailFolder marked as unread.
        :type unread_item_count: int
        :param total_item_count: The number of items in the mailFolder.
        :type total_item_count: int
        :param well_known_name:
        :type well_known_name: str
        :param single_value_extended_properties: The collection of single-value extended properties
         defined for the mailFolder. Read-only. Nullable.
        :type single_value_extended_properties: list[~users_mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
        :param multi_value_extended_properties: The collection of multi-value extended properties
         defined for the mailFolder. Read-only. Nullable.
        :type multi_value_extended_properties: list[~users_mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
        :param messages: The collection of messages in the mailFolder.
        :type messages: list[~users_mail.models.MicrosoftGraphMessage]
        :param message_rules: The collection of rules that apply to the user's Inbox folder.
        :type message_rules: list[~users_mail.models.MicrosoftGraphMessageRule]
        :param child_folders: The collection of child folders in the mailFolder.
        :type child_folders: list[~users_mail.models.MicrosoftGraphMailFolder]
        :param user_configurations:
        :type user_configurations: list[~users_mail.models.MicrosoftGraphUserConfiguration]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMailFolder(id=id, display_name=display_name, parent_folder_id=parent_folder_id, child_folder_count=child_folder_count, unread_item_count=unread_item_count, total_item_count=total_item_count, well_known_name=well_known_name, single_value_extended_properties=single_value_extended_properties, multi_value_extended_properties=multi_value_extended_properties, messages=messages, message_rules=message_rules, child_folders=child_folders, user_configurations=user_configurations)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_mail_folder.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'mailFolder-id': self._serialize.url("mail_folder_id", mail_folder_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMailFolder')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_mail_folder.metadata = {'url': '/users/{user-id}/mailFolders/{mailFolder-id}'}  # type: ignore

    def list_message(
        self,
        user_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum51"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum52"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum53"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfMessage0"]
        """Get messages from users.

        Get messages from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~users_mail.models.Enum51]
        :param select: Select properties to be returned.
        :type select: list[str or ~users_mail.models.Enum52]
        :param expand: Expand related entities.
        :type expand: list[str or ~users_mail.models.Enum53]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfMessage0 or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~users_mail.models.CollectionOfMessage0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfMessage0"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_message.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfMessage0', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_message.metadata = {'url': '/users/{user-id}/messages'}  # type: ignore

    def create_message(
        self,
        user_id,  # type: str
        body,  # type: "models.MicrosoftGraphMessage"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMessage"
        """Create new navigation property to messages for users.

        Create new navigation property to messages for users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param body: New navigation property.
        :type body: ~users_mail.models.MicrosoftGraphMessage
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMessage, or the result of cls(response)
        :rtype: ~users_mail.models.MicrosoftGraphMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphMessage')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_message.metadata = {'url': '/users/{user-id}/messages'}  # type: ignore

    def get_message(
        self,
        user_id,  # type: str
        message_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum54"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum55"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMessage"
        """Get messages from users.

        Get messages from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param message_id: key: message-id of message.
        :type message_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~users_mail.models.Enum54]
        :param expand: Expand related entities.
        :type expand: list[str or ~users_mail.models.Enum55]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMessage, or the result of cls(response)
        :rtype: ~users_mail.models.MicrosoftGraphMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMessage"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_message.metadata = {'url': '/users/{user-id}/messages/{message-id}'}  # type: ignore

    def update_message(
        self,
        user_id,  # type: str
        message_id,  # type: str
        body,  # type: "models.MicrosoftGraphMessage"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property messages in users.

        Update the navigation property messages in users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param message_id: key: message-id of message.
        :type message_id: str
        :param body: New navigation property values.
        :type body: ~users_mail.models.MicrosoftGraphMessage
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'message-id': self._serialize.url("message_id", message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphMessage')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_message.metadata = {'url': '/users/{user-id}/messages/{message-id}'}  # type: ignore
