# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._security_enums import *


class CollectionOfAlert(msrest.serialization.Model):
    """Collection of alert.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~security.models.MicrosoftGraphAlert]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphAlert]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphAlert"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfAlert, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfSecureScore(msrest.serialization.Model):
    """Collection of secureScore.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~security.models.MicrosoftGraphSecureScore]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSecureScore]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphSecureScore"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfSecureScore, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfSecureScoreControlProfile(msrest.serialization.Model):
    """Collection of secureScoreControlProfile.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~security.models.MicrosoftGraphSecureScoreControlProfile]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSecureScoreControlProfile]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        value: Optional[List["MicrosoftGraphSecureScoreControlProfile"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfSecureScoreControlProfile, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.value = value
        self.odata_next_link = odata_next_link


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id


class MicrosoftGraphAlert(MicrosoftGraphEntity):
    """alert.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param activity_group_name: Name or alias of the activity group (attacker) this alert is
     attributed to.
    :type activity_group_name: str
    :param assigned_to: Name of the analyst the alert is assigned to for triage, investigation, or
     remediation (supports update).
    :type assigned_to: str
    :param azure_subscription_id: Azure subscription ID, present if this alert is related to an
     Azure resource.
    :type azure_subscription_id: str
    :param azure_tenant_id: Azure Active Directory tenant ID. Required.
    :type azure_tenant_id: str
    :param category: Category of the alert (for example, credentialTheft, ransomware, etc.).
    :type category: str
    :param closed_date_time: Time at which the alert was closed. The Timestamp type represents date
     and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC
     on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z' (supports update).
    :type closed_date_time: ~datetime.datetime
    :param cloud_app_states: Security-related stateful information generated by the provider about
     the cloud application/s related to this alert.
    :type cloud_app_states: list[~security.models.MicrosoftGraphCloudAppSecurityState]
    :param comments: Customer-provided comments on alert (for customer alert management) (supports
     update).
    :type comments: list[str]
    :param confidence: Confidence of the detection logic (percentage between 1-100).
    :type confidence: int
    :param created_date_time: Time at which the alert was created by the alert provider. The
     Timestamp type represents date and time information using ISO 8601 format and is always in UTC
     time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
     Required.
    :type created_date_time: ~datetime.datetime
    :param description: Alert description.
    :type description: str
    :param detection_ids: Set of alerts related to this alert entity (each alert is pushed to the
     SIEM as a separate record).
    :type detection_ids: list[str]
    :param event_date_time: Time at which the event(s) that served as the trigger(s) to generate
     the alert occurred. The Timestamp type represents date and time information using ISO 8601
     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'. Required.
    :type event_date_time: ~datetime.datetime
    :param feedback:  Possible values include: "unknown", "truePositive", "falsePositive",
     "benignPositive", "unknownFutureValue".
    :type feedback: str or ~security.models.MicrosoftGraphAlertFeedback
    :param file_states: Security-related stateful information generated by the provider about the
     file(s) related to this alert.
    :type file_states: list[~security.models.MicrosoftGraphFileSecurityState]
    :param history_states:
    :type history_states: list[~security.models.MicrosoftGraphAlertHistoryState]
    :param host_states: Security-related stateful information generated by the provider about the
     host(s) related to this alert.
    :type host_states: list[~security.models.MicrosoftGraphHostSecurityState]
    :param incident_ids: IDs of incidents related to current alert.
    :type incident_ids: list[str]
    :param last_modified_date_time: Time at which the alert entity was last modified. The Timestamp
     type represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param malware_states: Threat Intelligence pertaining to malware related to this alert.
    :type malware_states: list[~security.models.MicrosoftGraphMalwareState]
    :param network_connections: Security-related stateful information generated by the provider
     about the network connection(s) related to this alert.
    :type network_connections: list[~security.models.MicrosoftGraphNetworkConnection]
    :param processes: Security-related stateful information generated by the provider about the
     process or processes related to this alert.
    :type processes: list[~security.models.MicrosoftGraphProcess]
    :param recommended_actions: Vendor/provider recommended action(s) to take as a result of the
     alert (for example, isolate machine, enforce2FA, reimage host).
    :type recommended_actions: list[str]
    :param registry_key_states: Security-related stateful information generated by the provider
     about the registry keys related to this alert.
    :type registry_key_states: list[~security.models.MicrosoftGraphRegistryKeyState]
    :param security_resources: Resources related to current alert. For example, for some alerts
     this can have the Azure Resource value.
    :type security_resources: list[~security.models.MicrosoftGraphSecurityResource]
    :param severity:  Possible values include: "unknown", "informational", "low", "medium", "high",
     "unknownFutureValue".
    :type severity: str or ~security.models.MicrosoftGraphAlertSeverity
    :param source_materials: Hyperlinks (URIs) to the source material related to the alert, for
     example, provider's user interface for alerts or log search, etc.
    :type source_materials: list[str]
    :param status:  Possible values include: "unknown", "newAlert", "inProgress", "resolved",
     "dismissed", "unknownFutureValue".
    :type status: str or ~security.models.MicrosoftGraphAlertStatus
    :param tags: A set of tags. User-definable labels that can be applied to an alert and can serve
     as filter conditions (for example 'HVA', 'SAW', etc.) (supports update).
    :type tags: list[str]
    :param title: Alert title. Required.
    :type title: str
    :param triggers: Security-related information about the specific properties that triggered the
     alert (properties appearing in the alert). Alerts might contain information about multiple
     users, hosts, files, ip addresses. This field indicates which properties triggered the alert
     generation.
    :type triggers: list[~security.models.MicrosoftGraphAlertTrigger]
    :param user_states: Security-related stateful information generated by the provider about the
     user accounts related to this alert.
    :type user_states: list[~security.models.MicrosoftGraphUserSecurityState]
    :param vendor_information: securityVendorInformation.
    :type vendor_information: ~security.models.MicrosoftGraphSecurityVendorInformation
    :param vulnerability_states: Threat intelligence pertaining to one or more vulnerabilities
     related to this alert.
    :type vulnerability_states: list[~security.models.MicrosoftGraphVulnerabilityState]
    """

    _validation = {
        'confidence': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'activity_group_name': {'key': 'activityGroupName', 'type': 'str'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'azure_subscription_id': {'key': 'azureSubscriptionId', 'type': 'str'},
        'azure_tenant_id': {'key': 'azureTenantId', 'type': 'str'},
        'category': {'key': 'category', 'type': 'str'},
        'closed_date_time': {'key': 'closedDateTime', 'type': 'iso-8601'},
        'cloud_app_states': {'key': 'cloudAppStates', 'type': '[MicrosoftGraphCloudAppSecurityState]'},
        'comments': {'key': 'comments', 'type': '[str]'},
        'confidence': {'key': 'confidence', 'type': 'int'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'detection_ids': {'key': 'detectionIds', 'type': '[str]'},
        'event_date_time': {'key': 'eventDateTime', 'type': 'iso-8601'},
        'feedback': {'key': 'feedback', 'type': 'str'},
        'file_states': {'key': 'fileStates', 'type': '[MicrosoftGraphFileSecurityState]'},
        'history_states': {'key': 'historyStates', 'type': '[MicrosoftGraphAlertHistoryState]'},
        'host_states': {'key': 'hostStates', 'type': '[MicrosoftGraphHostSecurityState]'},
        'incident_ids': {'key': 'incidentIds', 'type': '[str]'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'malware_states': {'key': 'malwareStates', 'type': '[MicrosoftGraphMalwareState]'},
        'network_connections': {'key': 'networkConnections', 'type': '[MicrosoftGraphNetworkConnection]'},
        'processes': {'key': 'processes', 'type': '[MicrosoftGraphProcess]'},
        'recommended_actions': {'key': 'recommendedActions', 'type': '[str]'},
        'registry_key_states': {'key': 'registryKeyStates', 'type': '[MicrosoftGraphRegistryKeyState]'},
        'security_resources': {'key': 'securityResources', 'type': '[MicrosoftGraphSecurityResource]'},
        'severity': {'key': 'severity', 'type': 'str'},
        'source_materials': {'key': 'sourceMaterials', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'title': {'key': 'title', 'type': 'str'},
        'triggers': {'key': 'triggers', 'type': '[MicrosoftGraphAlertTrigger]'},
        'user_states': {'key': 'userStates', 'type': '[MicrosoftGraphUserSecurityState]'},
        'vendor_information': {'key': 'vendorInformation', 'type': 'MicrosoftGraphSecurityVendorInformation'},
        'vulnerability_states': {'key': 'vulnerabilityStates', 'type': '[MicrosoftGraphVulnerabilityState]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        activity_group_name: Optional[str] = None,
        assigned_to: Optional[str] = None,
        azure_subscription_id: Optional[str] = None,
        azure_tenant_id: Optional[str] = None,
        category: Optional[str] = None,
        closed_date_time: Optional[datetime.datetime] = None,
        cloud_app_states: Optional[List["MicrosoftGraphCloudAppSecurityState"]] = None,
        comments: Optional[List[str]] = None,
        confidence: Optional[int] = None,
        created_date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        detection_ids: Optional[List[str]] = None,
        event_date_time: Optional[datetime.datetime] = None,
        feedback: Optional[Union[str, "MicrosoftGraphAlertFeedback"]] = None,
        file_states: Optional[List["MicrosoftGraphFileSecurityState"]] = None,
        history_states: Optional[List["MicrosoftGraphAlertHistoryState"]] = None,
        host_states: Optional[List["MicrosoftGraphHostSecurityState"]] = None,
        incident_ids: Optional[List[str]] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        malware_states: Optional[List["MicrosoftGraphMalwareState"]] = None,
        network_connections: Optional[List["MicrosoftGraphNetworkConnection"]] = None,
        processes: Optional[List["MicrosoftGraphProcess"]] = None,
        recommended_actions: Optional[List[str]] = None,
        registry_key_states: Optional[List["MicrosoftGraphRegistryKeyState"]] = None,
        security_resources: Optional[List["MicrosoftGraphSecurityResource"]] = None,
        severity: Optional[Union[str, "MicrosoftGraphAlertSeverity"]] = None,
        source_materials: Optional[List[str]] = None,
        status: Optional[Union[str, "MicrosoftGraphAlertStatus"]] = None,
        tags: Optional[List[str]] = None,
        title: Optional[str] = None,
        triggers: Optional[List["MicrosoftGraphAlertTrigger"]] = None,
        user_states: Optional[List["MicrosoftGraphUserSecurityState"]] = None,
        vendor_information: Optional["MicrosoftGraphSecurityVendorInformation"] = None,
        vulnerability_states: Optional[List["MicrosoftGraphVulnerabilityState"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphAlert, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.activity_group_name = activity_group_name
        self.assigned_to = assigned_to
        self.azure_subscription_id = azure_subscription_id
        self.azure_tenant_id = azure_tenant_id
        self.category = category
        self.closed_date_time = closed_date_time
        self.cloud_app_states = cloud_app_states
        self.comments = comments
        self.confidence = confidence
        self.created_date_time = created_date_time
        self.description = description
        self.detection_ids = detection_ids
        self.event_date_time = event_date_time
        self.feedback = feedback
        self.file_states = file_states
        self.history_states = history_states
        self.host_states = host_states
        self.incident_ids = incident_ids
        self.last_modified_date_time = last_modified_date_time
        self.malware_states = malware_states
        self.network_connections = network_connections
        self.processes = processes
        self.recommended_actions = recommended_actions
        self.registry_key_states = registry_key_states
        self.security_resources = security_resources
        self.severity = severity
        self.source_materials = source_materials
        self.status = status
        self.tags = tags
        self.title = title
        self.triggers = triggers
        self.user_states = user_states
        self.vendor_information = vendor_information
        self.vulnerability_states = vulnerability_states


class MicrosoftGraphAlertHistoryState(msrest.serialization.Model):
    """alertHistoryState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param app_id:
    :type app_id: str
    :param assigned_to:
    :type assigned_to: str
    :param comments:
    :type comments: list[str]
    :param feedback:  Possible values include: "unknown", "truePositive", "falsePositive",
     "benignPositive", "unknownFutureValue".
    :type feedback: str or ~security.models.MicrosoftGraphAlertFeedback
    :param status:  Possible values include: "unknown", "newAlert", "inProgress", "resolved",
     "dismissed", "unknownFutureValue".
    :type status: str or ~security.models.MicrosoftGraphAlertStatus
    :param updated_date_time:
    :type updated_date_time: ~datetime.datetime
    :param user:
    :type user: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'comments': {'key': 'comments', 'type': '[str]'},
        'feedback': {'key': 'feedback', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'updated_date_time': {'key': 'updatedDateTime', 'type': 'iso-8601'},
        'user': {'key': 'user', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        app_id: Optional[str] = None,
        assigned_to: Optional[str] = None,
        comments: Optional[List[str]] = None,
        feedback: Optional[Union[str, "MicrosoftGraphAlertFeedback"]] = None,
        status: Optional[Union[str, "MicrosoftGraphAlertStatus"]] = None,
        updated_date_time: Optional[datetime.datetime] = None,
        user: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAlertHistoryState, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.app_id = app_id
        self.assigned_to = assigned_to
        self.comments = comments
        self.feedback = feedback
        self.status = status
        self.updated_date_time = updated_date_time
        self.user = user


class MicrosoftGraphAlertTrigger(msrest.serialization.Model):
    """alertTrigger.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Name of the property serving as a detection trigger.
    :type name: str
    :param type: Type of the property in the key:value pair for interpretation. For example,
     String, Boolean, etc.
    :type type: str
    :param value: Value of the property serving as a detection trigger.
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        name: Optional[str] = None,
        type: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAlertTrigger, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.name = name
        self.type = type
        self.value = value


class MicrosoftGraphAverageComparativeScore(msrest.serialization.Model):
    """averageComparativeScore.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param average_score: Average score within specified basis.
    :type average_score: float
    :param basis: Scope type. The possible values are: AllTenants, TotalSeats, IndustryTypes.
    :type basis: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'average_score': {'key': 'averageScore', 'type': 'float'},
        'basis': {'key': 'basis', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        average_score: Optional[float] = None,
        basis: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphAverageComparativeScore, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.average_score = average_score
        self.basis = basis


class MicrosoftGraphCertificationControl(msrest.serialization.Model):
    """certificationControl.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: Certification control name.
    :type name: str
    :param url: URL for the Microsoft Service Trust Portal.
    :type url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        name: Optional[str] = None,
        url: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphCertificationControl, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.name = name
        self.url = url


class MicrosoftGraphCloudAppSecurityState(msrest.serialization.Model):
    """cloudAppSecurityState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param destination_service_ip: Destination IP Address of the connection to the cloud
     application/service.
    :type destination_service_ip: str
    :param destination_service_name: Cloud application/service name (for example 'Salesforce',
     'DropBox', etc.).
    :type destination_service_name: str
    :param risk_score: Provider-generated/calculated risk score of the Cloud Application/Service.
     Recommended value range of 0-1, which equates to a percentage.
    :type risk_score: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'destination_service_ip': {'key': 'destinationServiceIp', 'type': 'str'},
        'destination_service_name': {'key': 'destinationServiceName', 'type': 'str'},
        'risk_score': {'key': 'riskScore', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        destination_service_ip: Optional[str] = None,
        destination_service_name: Optional[str] = None,
        risk_score: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphCloudAppSecurityState, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.destination_service_ip = destination_service_ip
        self.destination_service_name = destination_service_name
        self.risk_score = risk_score


class MicrosoftGraphComplianceInformation(msrest.serialization.Model):
    """complianceInformation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param certification_controls: Collection of the certification controls associated with
     certification.
    :type certification_controls: list[~security.models.MicrosoftGraphCertificationControl]
    :param certification_name: Compliance certification name (for example, ISO 27018:2014, GDPR,
     FedRAMP, NIST 800-171).
    :type certification_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'certification_controls': {'key': 'certificationControls', 'type': '[MicrosoftGraphCertificationControl]'},
        'certification_name': {'key': 'certificationName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        certification_controls: Optional[List["MicrosoftGraphCertificationControl"]] = None,
        certification_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphComplianceInformation, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.certification_controls = certification_controls
        self.certification_name = certification_name


class MicrosoftGraphControlScore(msrest.serialization.Model):
    """controlScore.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param control_category: Control action category (Identity, Data, Device, Apps,
     Infrastructure).
    :type control_category: str
    :param control_name: Control unique name.
    :type control_name: str
    :param description: Description of the control.
    :type description: str
    :param score: Tenant achieved score for the control (it varies day by day depending on tenant
     operations on the control).
    :type score: float
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'control_category': {'key': 'controlCategory', 'type': 'str'},
        'control_name': {'key': 'controlName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'score': {'key': 'score', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        control_category: Optional[str] = None,
        control_name: Optional[str] = None,
        description: Optional[str] = None,
        score: Optional[float] = None,
        **kwargs
    ):
        super(MicrosoftGraphControlScore, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.control_category = control_category
        self.control_name = control_name
        self.description = description
        self.score = score


class MicrosoftGraphFileHash(msrest.serialization.Model):
    """fileHash.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param hash_type:  Possible values include: "unknown", "sha1", "sha256", "md5",
     "authenticodeHash256", "lsHash", "ctph", "unknownFutureValue".
    :type hash_type: str or ~security.models.MicrosoftGraphFileHashType
    :param hash_value: Value of the file hash.
    :type hash_value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'hash_type': {'key': 'hashType', 'type': 'str'},
        'hash_value': {'key': 'hashValue', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        hash_type: Optional[Union[str, "MicrosoftGraphFileHashType"]] = None,
        hash_value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphFileHash, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.hash_type = hash_type
        self.hash_value = hash_value


class MicrosoftGraphFileSecurityState(msrest.serialization.Model):
    """fileSecurityState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param name: File name (without path).
    :type name: str
    :param path: Full file path of the file/imageFile.
    :type path: str
    :param risk_score: Provider generated/calculated risk score of the alert file. Recommended
     value range of 0-1, which equates to a percentage.
    :type risk_score: str
    :param hash_type:  Possible values include: "unknown", "sha1", "sha256", "md5",
     "authenticodeHash256", "lsHash", "ctph", "unknownFutureValue".
    :type hash_type: str or ~security.models.MicrosoftGraphFileHashType
    :param hash_value: Value of the file hash.
    :type hash_value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'risk_score': {'key': 'riskScore', 'type': 'str'},
        'hash_type': {'key': 'fileHash.hashType', 'type': 'str'},
        'hash_value': {'key': 'fileHash.hashValue', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        name: Optional[str] = None,
        path: Optional[str] = None,
        risk_score: Optional[str] = None,
        hash_type: Optional[Union[str, "MicrosoftGraphFileHashType"]] = None,
        hash_value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphFileSecurityState, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.name = name
        self.path = path
        self.risk_score = risk_score
        self.hash_type = hash_type
        self.hash_value = hash_value


class MicrosoftGraphHostSecurityState(msrest.serialization.Model):
    """hostSecurityState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param fqdn: Host FQDN (Fully Qualified Domain Name) (for example, machine.company.com).
    :type fqdn: str
    :param is_azure_ad_joined:
    :type is_azure_ad_joined: bool
    :param is_azure_ad_registered:
    :type is_azure_ad_registered: bool
    :param is_hybrid_azure_domain_joined: True if the host is domain joined to an on-premises
     Active Directory domain.
    :type is_hybrid_azure_domain_joined: bool
    :param net_bios_name: The local host name, without the DNS domain name.
    :type net_bios_name: str
    :param os: Host Operating System. (For example, Windows10, MacOS, RHEL, etc.).
    :type os: str
    :param private_ip_address: Private (not routable) IPv4 or IPv6 address (see RFC 1918) at the
     time of the alert.
    :type private_ip_address: str
    :param public_ip_address: Publicly routable IPv4 or IPv6 address (see RFC 1918) at time of the
     alert.
    :type public_ip_address: str
    :param risk_score: Provider-generated/calculated risk score of the host.  Recommended value
     range of 0-1, which equates to a percentage.
    :type risk_score: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'is_azure_ad_joined': {'key': 'isAzureAdJoined', 'type': 'bool'},
        'is_azure_ad_registered': {'key': 'isAzureAdRegistered', 'type': 'bool'},
        'is_hybrid_azure_domain_joined': {'key': 'isHybridAzureDomainJoined', 'type': 'bool'},
        'net_bios_name': {'key': 'netBiosName', 'type': 'str'},
        'os': {'key': 'os', 'type': 'str'},
        'private_ip_address': {'key': 'privateIpAddress', 'type': 'str'},
        'public_ip_address': {'key': 'publicIpAddress', 'type': 'str'},
        'risk_score': {'key': 'riskScore', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        fqdn: Optional[str] = None,
        is_azure_ad_joined: Optional[bool] = None,
        is_azure_ad_registered: Optional[bool] = None,
        is_hybrid_azure_domain_joined: Optional[bool] = None,
        net_bios_name: Optional[str] = None,
        os: Optional[str] = None,
        private_ip_address: Optional[str] = None,
        public_ip_address: Optional[str] = None,
        risk_score: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphHostSecurityState, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.fqdn = fqdn
        self.is_azure_ad_joined = is_azure_ad_joined
        self.is_azure_ad_registered = is_azure_ad_registered
        self.is_hybrid_azure_domain_joined = is_hybrid_azure_domain_joined
        self.net_bios_name = net_bios_name
        self.os = os
        self.private_ip_address = private_ip_address
        self.public_ip_address = public_ip_address
        self.risk_score = risk_score


class MicrosoftGraphMalwareState(msrest.serialization.Model):
    """malwareState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param category: Provider-generated malware category (for example, trojan, ransomware, etc.).
    :type category: str
    :param family: Provider-generated malware family (for example, 'wannacry', 'notpetya', etc.).
    :type family: str
    :param name: Provider-generated malware variant name (for example, Trojan:Win32/Powessere.H).
    :type name: str
    :param severity: Provider-determined severity of this malware.
    :type severity: str
    :param was_running: Indicates whether the detected file (malware/vulnerability) was running at
     the time of detection or was detected at rest on the disk.
    :type was_running: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'category': {'key': 'category', 'type': 'str'},
        'family': {'key': 'family', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'str'},
        'was_running': {'key': 'wasRunning', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        category: Optional[str] = None,
        family: Optional[str] = None,
        name: Optional[str] = None,
        severity: Optional[str] = None,
        was_running: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphMalwareState, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.category = category
        self.family = family
        self.name = name
        self.severity = severity
        self.was_running = was_running


class MicrosoftGraphNetworkConnection(msrest.serialization.Model):
    """networkConnection.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param application_name: Name of the application managing the network connection (for example,
     Facebook or SMTP).
    :type application_name: str
    :param destination_address: Destination IP address (of the network connection).
    :type destination_address: str
    :param destination_domain: Destination domain portion of the destination URL. (for example
     'www.contoso.com').
    :type destination_domain: str
    :param destination_location: Location (by IP address mapping) associated with the destination
     of a network connection.
    :type destination_location: str
    :param destination_port: Destination port (of the network connection).
    :type destination_port: str
    :param destination_url: Network connection URL/URI string - excluding parameters. (for example
     'www.contoso.com/products/default.html').
    :type destination_url: str
    :param direction:  Possible values include: "unknown", "inbound", "outbound",
     "unknownFutureValue".
    :type direction: str or ~security.models.MicrosoftGraphConnectionDirection
    :param domain_registered_date_time: Date when the destination domain was registered. The
     Timestamp type represents date and time information using ISO 8601 format and is always in UTC
     time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type domain_registered_date_time: ~datetime.datetime
    :param local_dns_name: The local DNS name resolution as it appears in the host's local DNS
     cache (for example, in case the 'hosts' file was tampered with).
    :type local_dns_name: str
    :param nat_destination_address: Network Address Translation destination IP address.
    :type nat_destination_address: str
    :param nat_destination_port: Network Address Translation destination port.
    :type nat_destination_port: str
    :param nat_source_address: Network Address Translation source IP address.
    :type nat_source_address: str
    :param nat_source_port: Network Address Translation source port.
    :type nat_source_port: str
    :param protocol:  Possible values include: "ip", "icmp", "unknown", "igmp", "ggp", "ipv4",
     "tcp", "pup", "udp", "idp", "ipv6", "ipv6RoutingHeader", "ipv6FragmentHeader",
     "ipSecEncapsulatingSecurityPayload", "ipSecAuthenticationHeader", "icmpV6", "ipv6NoNextHeader",
     "ipv6DestinationOptions", "nd", "raw", "ipx", "spx", "spxII", "unknownFutureValue".
    :type protocol: str or ~security.models.MicrosoftGraphSecurityNetworkProtocol
    :param risk_score: Provider generated/calculated risk score of the network connection.
     Recommended value range of 0-1, which equates to a percentage.
    :type risk_score: str
    :param source_address: Source (i.e. origin) IP address (of the network connection).
    :type source_address: str
    :param source_location: Location (by IP address mapping) associated with the source of a
     network connection.
    :type source_location: str
    :param source_port: Source (i.e. origin) IP port (of the network connection).
    :type source_port: str
    :param status:  Possible values include: "unknown", "attempted", "succeeded", "blocked",
     "failed", "unknownFutureValue".
    :type status: str or ~security.models.MicrosoftGraphConnectionStatus
    :param url_parameters: Parameters (suffix) of the destination URL.
    :type url_parameters: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'application_name': {'key': 'applicationName', 'type': 'str'},
        'destination_address': {'key': 'destinationAddress', 'type': 'str'},
        'destination_domain': {'key': 'destinationDomain', 'type': 'str'},
        'destination_location': {'key': 'destinationLocation', 'type': 'str'},
        'destination_port': {'key': 'destinationPort', 'type': 'str'},
        'destination_url': {'key': 'destinationUrl', 'type': 'str'},
        'direction': {'key': 'direction', 'type': 'str'},
        'domain_registered_date_time': {'key': 'domainRegisteredDateTime', 'type': 'iso-8601'},
        'local_dns_name': {'key': 'localDnsName', 'type': 'str'},
        'nat_destination_address': {'key': 'natDestinationAddress', 'type': 'str'},
        'nat_destination_port': {'key': 'natDestinationPort', 'type': 'str'},
        'nat_source_address': {'key': 'natSourceAddress', 'type': 'str'},
        'nat_source_port': {'key': 'natSourcePort', 'type': 'str'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'risk_score': {'key': 'riskScore', 'type': 'str'},
        'source_address': {'key': 'sourceAddress', 'type': 'str'},
        'source_location': {'key': 'sourceLocation', 'type': 'str'},
        'source_port': {'key': 'sourcePort', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'url_parameters': {'key': 'urlParameters', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        application_name: Optional[str] = None,
        destination_address: Optional[str] = None,
        destination_domain: Optional[str] = None,
        destination_location: Optional[str] = None,
        destination_port: Optional[str] = None,
        destination_url: Optional[str] = None,
        direction: Optional[Union[str, "MicrosoftGraphConnectionDirection"]] = None,
        domain_registered_date_time: Optional[datetime.datetime] = None,
        local_dns_name: Optional[str] = None,
        nat_destination_address: Optional[str] = None,
        nat_destination_port: Optional[str] = None,
        nat_source_address: Optional[str] = None,
        nat_source_port: Optional[str] = None,
        protocol: Optional[Union[str, "MicrosoftGraphSecurityNetworkProtocol"]] = None,
        risk_score: Optional[str] = None,
        source_address: Optional[str] = None,
        source_location: Optional[str] = None,
        source_port: Optional[str] = None,
        status: Optional[Union[str, "MicrosoftGraphConnectionStatus"]] = None,
        url_parameters: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphNetworkConnection, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.application_name = application_name
        self.destination_address = destination_address
        self.destination_domain = destination_domain
        self.destination_location = destination_location
        self.destination_port = destination_port
        self.destination_url = destination_url
        self.direction = direction
        self.domain_registered_date_time = domain_registered_date_time
        self.local_dns_name = local_dns_name
        self.nat_destination_address = nat_destination_address
        self.nat_destination_port = nat_destination_port
        self.nat_source_address = nat_source_address
        self.nat_source_port = nat_source_port
        self.protocol = protocol
        self.risk_score = risk_score
        self.source_address = source_address
        self.source_location = source_location
        self.source_port = source_port
        self.status = status
        self.url_parameters = url_parameters


class MicrosoftGraphProcess(msrest.serialization.Model):
    """process.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param account_name: User account identifier (user account context the process ran under) for
     example, AccountName, SID, and so on.
    :type account_name: str
    :param command_line: The full process invocation commandline including all parameters.
    :type command_line: str
    :param created_date_time: Time at which the process was started. The Timestamp type represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param file_hash: fileHash.
    :type file_hash: ~security.models.MicrosoftGraphFileHash
    :param integrity_level:  Possible values include: "unknown", "untrusted", "low", "medium",
     "high", "system", "unknownFutureValue".
    :type integrity_level: str or ~security.models.MicrosoftGraphProcessIntegrityLevel
    :param is_elevated: True if the process is elevated.
    :type is_elevated: bool
    :param name: The name of the process' Image file.
    :type name: str
    :param parent_process_created_date_time: DateTime at which the parent process was started. The
     Timestamp type represents date and time information using ISO 8601 format and is always in UTC
     time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type parent_process_created_date_time: ~datetime.datetime
    :param parent_process_id: The Process ID (PID) of the parent process.
    :type parent_process_id: int
    :param parent_process_name: The name of the image file of the parent process.
    :type parent_process_name: str
    :param path: Full path, including filename.
    :type path: str
    :param process_id: The Process ID (PID) of the process.
    :type process_id: int
    """

    _validation = {
        'parent_process_id': {'maximum': 2147483647, 'minimum': -2147483648},
        'process_id': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_name': {'key': 'accountName', 'type': 'str'},
        'command_line': {'key': 'commandLine', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'file_hash': {'key': 'fileHash', 'type': 'MicrosoftGraphFileHash'},
        'integrity_level': {'key': 'integrityLevel', 'type': 'str'},
        'is_elevated': {'key': 'isElevated', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'parent_process_created_date_time': {'key': 'parentProcessCreatedDateTime', 'type': 'iso-8601'},
        'parent_process_id': {'key': 'parentProcessId', 'type': 'int'},
        'parent_process_name': {'key': 'parentProcessName', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'process_id': {'key': 'processId', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        account_name: Optional[str] = None,
        command_line: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        file_hash: Optional["MicrosoftGraphFileHash"] = None,
        integrity_level: Optional[Union[str, "MicrosoftGraphProcessIntegrityLevel"]] = None,
        is_elevated: Optional[bool] = None,
        name: Optional[str] = None,
        parent_process_created_date_time: Optional[datetime.datetime] = None,
        parent_process_id: Optional[int] = None,
        parent_process_name: Optional[str] = None,
        path: Optional[str] = None,
        process_id: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphProcess, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.account_name = account_name
        self.command_line = command_line
        self.created_date_time = created_date_time
        self.file_hash = file_hash
        self.integrity_level = integrity_level
        self.is_elevated = is_elevated
        self.name = name
        self.parent_process_created_date_time = parent_process_created_date_time
        self.parent_process_id = parent_process_id
        self.parent_process_name = parent_process_name
        self.path = path
        self.process_id = process_id


class MicrosoftGraphRegistryKeyState(msrest.serialization.Model):
    """registryKeyState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param hive:  Possible values include: "unknown", "currentConfig", "currentUser",
     "localMachineSam", "localMachineSecurity", "localMachineSoftware", "localMachineSystem",
     "usersDefault", "unknownFutureValue".
    :type hive: str or ~security.models.MicrosoftGraphRegistryHive
    :param key: Current (i.e. changed) registry key (excludes HIVE).
    :type key: str
    :param old_key: Previous (i.e. before changed) registry key (excludes HIVE).
    :type old_key: str
    :param old_value_data: Previous (i.e. before changed) registry key value data (contents).
    :type old_value_data: str
    :param old_value_name: Previous (i.e. before changed) registry key value name.
    :type old_value_name: str
    :param operation:  Possible values include: "unknown", "create", "modify", "delete",
     "unknownFutureValue".
    :type operation: str or ~security.models.MicrosoftGraphRegistryOperation
    :param process_id: Process ID (PID) of the process that modified the registry key (process
     details will appear in the alert 'processes' collection).
    :type process_id: int
    :param value_data: Current (i.e. changed) registry key value data (contents).
    :type value_data: str
    :param value_name: Current (i.e. changed) registry key value name.
    :type value_name: str
    :param value_type:  Possible values include: "unknown", "binary", "dword", "dwordLittleEndian",
     "dwordBigEndian", "expandSz", "link", "multiSz", "none", "qword", "qwordlittleEndian", "sz",
     "unknownFutureValue".
    :type value_type: str or ~security.models.MicrosoftGraphRegistryValueType
    """

    _validation = {
        'process_id': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'hive': {'key': 'hive', 'type': 'str'},
        'key': {'key': 'key', 'type': 'str'},
        'old_key': {'key': 'oldKey', 'type': 'str'},
        'old_value_data': {'key': 'oldValueData', 'type': 'str'},
        'old_value_name': {'key': 'oldValueName', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'process_id': {'key': 'processId', 'type': 'int'},
        'value_data': {'key': 'valueData', 'type': 'str'},
        'value_name': {'key': 'valueName', 'type': 'str'},
        'value_type': {'key': 'valueType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        hive: Optional[Union[str, "MicrosoftGraphRegistryHive"]] = None,
        key: Optional[str] = None,
        old_key: Optional[str] = None,
        old_value_data: Optional[str] = None,
        old_value_name: Optional[str] = None,
        operation: Optional[Union[str, "MicrosoftGraphRegistryOperation"]] = None,
        process_id: Optional[int] = None,
        value_data: Optional[str] = None,
        value_name: Optional[str] = None,
        value_type: Optional[Union[str, "MicrosoftGraphRegistryValueType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphRegistryKeyState, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.hive = hive
        self.key = key
        self.old_key = old_key
        self.old_value_data = old_value_data
        self.old_value_name = old_value_name
        self.operation = operation
        self.process_id = process_id
        self.value_data = value_data
        self.value_name = value_name
        self.value_type = value_type


class MicrosoftGraphSecureScore(MicrosoftGraphEntity):
    """secureScore.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param active_user_count: Active user count of the given tenant.
    :type active_user_count: int
    :param average_comparative_scores: Average score by different scopes (for example, average by
     industry, average by seating) and control category (Identity, Data, Device, Apps,
     Infrastructure) within the scope.
    :type average_comparative_scores: list[~security.models.MicrosoftGraphAverageComparativeScore]
    :param azure_tenant_id: GUID string for tenant ID.
    :type azure_tenant_id: str
    :param control_scores: Contains tenant scores for a set of controls.
    :type control_scores: list[~security.models.MicrosoftGraphControlScore]
    :param created_date_time: The date when the entity is created.
    :type created_date_time: ~datetime.datetime
    :param current_score: Tenant current attained score on specified date.
    :type current_score: float
    :param enabled_services: Microsoft-provided services for the tenant (for example, Exchange
     online, Skype, Sharepoint).
    :type enabled_services: list[str]
    :param licensed_user_count: Licensed user count of the given tenant.
    :type licensed_user_count: int
    :param max_score: Tenant maximum possible score on specified date.
    :type max_score: float
    :param vendor_information: securityVendorInformation.
    :type vendor_information: ~security.models.MicrosoftGraphSecurityVendorInformation
    """

    _validation = {
        'active_user_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'licensed_user_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'active_user_count': {'key': 'activeUserCount', 'type': 'int'},
        'average_comparative_scores': {'key': 'averageComparativeScores', 'type': '[MicrosoftGraphAverageComparativeScore]'},
        'azure_tenant_id': {'key': 'azureTenantId', 'type': 'str'},
        'control_scores': {'key': 'controlScores', 'type': '[MicrosoftGraphControlScore]'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'current_score': {'key': 'currentScore', 'type': 'float'},
        'enabled_services': {'key': 'enabledServices', 'type': '[str]'},
        'licensed_user_count': {'key': 'licensedUserCount', 'type': 'int'},
        'max_score': {'key': 'maxScore', 'type': 'float'},
        'vendor_information': {'key': 'vendorInformation', 'type': 'MicrosoftGraphSecurityVendorInformation'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        active_user_count: Optional[int] = None,
        average_comparative_scores: Optional[List["MicrosoftGraphAverageComparativeScore"]] = None,
        azure_tenant_id: Optional[str] = None,
        control_scores: Optional[List["MicrosoftGraphControlScore"]] = None,
        created_date_time: Optional[datetime.datetime] = None,
        current_score: Optional[float] = None,
        enabled_services: Optional[List[str]] = None,
        licensed_user_count: Optional[int] = None,
        max_score: Optional[float] = None,
        vendor_information: Optional["MicrosoftGraphSecurityVendorInformation"] = None,
        **kwargs
    ):
        super(MicrosoftGraphSecureScore, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.active_user_count = active_user_count
        self.average_comparative_scores = average_comparative_scores
        self.azure_tenant_id = azure_tenant_id
        self.control_scores = control_scores
        self.created_date_time = created_date_time
        self.current_score = current_score
        self.enabled_services = enabled_services
        self.licensed_user_count = licensed_user_count
        self.max_score = max_score
        self.vendor_information = vendor_information


class MicrosoftGraphSecureScoreControlProfile(MicrosoftGraphEntity):
    """secureScoreControlProfile.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param action_type: Control action type (Config, Review, Behavior).
    :type action_type: str
    :param action_url: URL to where the control can be actioned.
    :type action_url: str
    :param azure_tenant_id: GUID string for tenant ID.
    :type azure_tenant_id: str
    :param compliance_information:
    :type compliance_information: list[~security.models.MicrosoftGraphComplianceInformation]
    :param control_category: Control action category (Identity, Data, Device, Apps,
     Infrastructure).
    :type control_category: str
    :param control_state_updates:
    :type control_state_updates: list[~security.models.MicrosoftGraphSecureScoreControlStateUpdate]
    :param deprecated: Flag to indicate if a control is depreciated.
    :type deprecated: bool
    :param implementation_cost: Resource cost of implemmentating control (low, moderate, high).
    :type implementation_cost: str
    :param last_modified_date_time: Time at which the control profile entity was last modified. The
     Timestamp type represents date and time.
    :type last_modified_date_time: ~datetime.datetime
    :param max_score: max attainable score for the control.
    :type max_score: float
    :param rank: Microsoft's stack ranking of control.
    :type rank: int
    :param remediation: Description of what the control will help remediate.
    :type remediation: str
    :param remediation_impact: Description of the impact on users of the remediation.
    :type remediation_impact: str
    :param service: Service that owns the control (Exchange, Sharepoint, Azure AD).
    :type service: str
    :param threats: List of threats the control mitigates
     (accountBreach,dataDeletion,dataExfiltration,dataSpillage,.
    :type threats: list[str]
    :param tier:
    :type tier: str
    :param title: Title of the control.
    :type title: str
    :param user_impact:
    :type user_impact: str
    :param vendor_information: securityVendorInformation.
    :type vendor_information: ~security.models.MicrosoftGraphSecurityVendorInformation
    """

    _validation = {
        'rank': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'action_type': {'key': 'actionType', 'type': 'str'},
        'action_url': {'key': 'actionUrl', 'type': 'str'},
        'azure_tenant_id': {'key': 'azureTenantId', 'type': 'str'},
        'compliance_information': {'key': 'complianceInformation', 'type': '[MicrosoftGraphComplianceInformation]'},
        'control_category': {'key': 'controlCategory', 'type': 'str'},
        'control_state_updates': {'key': 'controlStateUpdates', 'type': '[MicrosoftGraphSecureScoreControlStateUpdate]'},
        'deprecated': {'key': 'deprecated', 'type': 'bool'},
        'implementation_cost': {'key': 'implementationCost', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'max_score': {'key': 'maxScore', 'type': 'float'},
        'rank': {'key': 'rank', 'type': 'int'},
        'remediation': {'key': 'remediation', 'type': 'str'},
        'remediation_impact': {'key': 'remediationImpact', 'type': 'str'},
        'service': {'key': 'service', 'type': 'str'},
        'threats': {'key': 'threats', 'type': '[str]'},
        'tier': {'key': 'tier', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'user_impact': {'key': 'userImpact', 'type': 'str'},
        'vendor_information': {'key': 'vendorInformation', 'type': 'MicrosoftGraphSecurityVendorInformation'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        action_type: Optional[str] = None,
        action_url: Optional[str] = None,
        azure_tenant_id: Optional[str] = None,
        compliance_information: Optional[List["MicrosoftGraphComplianceInformation"]] = None,
        control_category: Optional[str] = None,
        control_state_updates: Optional[List["MicrosoftGraphSecureScoreControlStateUpdate"]] = None,
        deprecated: Optional[bool] = None,
        implementation_cost: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        max_score: Optional[float] = None,
        rank: Optional[int] = None,
        remediation: Optional[str] = None,
        remediation_impact: Optional[str] = None,
        service: Optional[str] = None,
        threats: Optional[List[str]] = None,
        tier: Optional[str] = None,
        title: Optional[str] = None,
        user_impact: Optional[str] = None,
        vendor_information: Optional["MicrosoftGraphSecurityVendorInformation"] = None,
        **kwargs
    ):
        super(MicrosoftGraphSecureScoreControlProfile, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.action_type = action_type
        self.action_url = action_url
        self.azure_tenant_id = azure_tenant_id
        self.compliance_information = compliance_information
        self.control_category = control_category
        self.control_state_updates = control_state_updates
        self.deprecated = deprecated
        self.implementation_cost = implementation_cost
        self.last_modified_date_time = last_modified_date_time
        self.max_score = max_score
        self.rank = rank
        self.remediation = remediation
        self.remediation_impact = remediation_impact
        self.service = service
        self.threats = threats
        self.tier = tier
        self.title = title
        self.user_impact = user_impact
        self.vendor_information = vendor_information


class MicrosoftGraphSecureScoreControlStateUpdate(msrest.serialization.Model):
    """secureScoreControlStateUpdate.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param assigned_to: Assigns the control to the user who will take the action.
    :type assigned_to: str
    :param comment: Provides optional comment about the control.
    :type comment: str
    :param state: State of the control, which can be modified via a PATCH command (for example,
     ignored, thirdParty).
    :type state: str
    :param updated_by: ID of the user who updated tenant state.
    :type updated_by: str
    :param updated_date_time: Time at which the control state was updated.
    :type updated_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'comment': {'key': 'comment', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'updated_by': {'key': 'updatedBy', 'type': 'str'},
        'updated_date_time': {'key': 'updatedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        assigned_to: Optional[str] = None,
        comment: Optional[str] = None,
        state: Optional[str] = None,
        updated_by: Optional[str] = None,
        updated_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(MicrosoftGraphSecureScoreControlStateUpdate, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.assigned_to = assigned_to
        self.comment = comment
        self.state = state
        self.updated_by = updated_by
        self.updated_date_time = updated_date_time


class MicrosoftGraphSecurity(MicrosoftGraphEntity):
    """security.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param alerts: Read-only. Nullable.
    :type alerts: list[~security.models.MicrosoftGraphAlert]
    :param secure_score_control_profiles:
    :type secure_score_control_profiles:
     list[~security.models.MicrosoftGraphSecureScoreControlProfile]
    :param secure_scores:
    :type secure_scores: list[~security.models.MicrosoftGraphSecureScore]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'alerts': {'key': 'alerts', 'type': '[MicrosoftGraphAlert]'},
        'secure_score_control_profiles': {'key': 'secureScoreControlProfiles', 'type': '[MicrosoftGraphSecureScoreControlProfile]'},
        'secure_scores': {'key': 'secureScores', 'type': '[MicrosoftGraphSecureScore]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        additional_properties: Optional[Dict[str, object]] = None,
        alerts: Optional[List["MicrosoftGraphAlert"]] = None,
        secure_score_control_profiles: Optional[List["MicrosoftGraphSecureScoreControlProfile"]] = None,
        secure_scores: Optional[List["MicrosoftGraphSecureScore"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphSecurity, self).__init__(id=id, **kwargs)
        self.additional_properties = additional_properties
        self.alerts = alerts
        self.secure_score_control_profiles = secure_score_control_profiles
        self.secure_scores = secure_scores


class MicrosoftGraphSecurityResource(msrest.serialization.Model):
    """securityResource.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param resource: Name of the resource that is related to current alert. Required.
    :type resource: str
    :param resource_type:  Possible values include: "unknown", "attacked", "related",
     "unknownFutureValue".
    :type resource_type: str or ~security.models.MicrosoftGraphSecurityResourceType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'resource': {'key': 'resource', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        resource: Optional[str] = None,
        resource_type: Optional[Union[str, "MicrosoftGraphSecurityResourceType"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphSecurityResource, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.resource = resource
        self.resource_type = resource_type


class MicrosoftGraphSecurityVendorInformation(msrest.serialization.Model):
    """securityVendorInformation.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param provider: Specific provider (product/service - not vendor company); for example,
     WindowsDefenderATP.
    :type provider: str
    :param provider_version: Version of the provider or subprovider, if it exists, that generated
     the alert. Required.
    :type provider_version: str
    :param sub_provider: Specific subprovider (under aggregating provider); for example,
     WindowsDefenderATP.SmartScreen.
    :type sub_provider: str
    :param vendor: Name of the alert vendor (for example, Microsoft, Dell, FireEye). Required.
    :type vendor: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'provider': {'key': 'provider', 'type': 'str'},
        'provider_version': {'key': 'providerVersion', 'type': 'str'},
        'sub_provider': {'key': 'subProvider', 'type': 'str'},
        'vendor': {'key': 'vendor', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        provider: Optional[str] = None,
        provider_version: Optional[str] = None,
        sub_provider: Optional[str] = None,
        vendor: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSecurityVendorInformation, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.provider = provider
        self.provider_version = provider_version
        self.sub_provider = sub_provider
        self.vendor = vendor


class MicrosoftGraphUserSecurityState(msrest.serialization.Model):
    """userSecurityState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param aad_user_id: AAD User object identifier (GUID) - represents the physical/multi-account
     user entity.
    :type aad_user_id: str
    :param account_name: Account name of user account (without Active Directory domain or DNS
     domain) - (also called mailNickName).
    :type account_name: str
    :param domain_name: NetBIOS/Active Directory domain of user account (that is, domain/account
     format).
    :type domain_name: str
    :param email_role:  Possible values include: "unknown", "sender", "recipient",
     "unknownFutureValue".
    :type email_role: str or ~security.models.MicrosoftGraphEmailRole
    :param is_vpn: Indicates whether the user logged on through a VPN.
    :type is_vpn: bool
    :param logon_date_time: Time at which the sign-in occurred. The Timestamp type represents date
     and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC
     on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type logon_date_time: ~datetime.datetime
    :param logon_id: User sign-in ID.
    :type logon_id: str
    :param logon_ip: IP Address the sign-in request originated from.
    :type logon_ip: str
    :param logon_location: Location (by IP address mapping) associated with a user sign-in event by
     this user.
    :type logon_location: str
    :param logon_type:  Possible values include: "unknown", "interactive", "remoteInteractive",
     "network", "batch", "service", "unknownFutureValue".
    :type logon_type: str or ~security.models.MicrosoftGraphLogonType
    :param on_premises_security_identifier: Active Directory (on-premises) Security Identifier
     (SID) of the user.
    :type on_premises_security_identifier: str
    :param risk_score: Provider-generated/calculated risk score of the user account. Recommended
     value range of 0-1, which equates to a percentage.
    :type risk_score: str
    :param user_account_type:  Possible values include: "unknown", "standard", "power",
     "administrator", "unknownFutureValue".
    :type user_account_type: str or ~security.models.MicrosoftGraphUserAccountSecurityType
    :param user_principal_name: User sign-in name - internet format: (user account name)@(user
     account DNS domain name).
    :type user_principal_name: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'aad_user_id': {'key': 'aadUserId', 'type': 'str'},
        'account_name': {'key': 'accountName', 'type': 'str'},
        'domain_name': {'key': 'domainName', 'type': 'str'},
        'email_role': {'key': 'emailRole', 'type': 'str'},
        'is_vpn': {'key': 'isVpn', 'type': 'bool'},
        'logon_date_time': {'key': 'logonDateTime', 'type': 'iso-8601'},
        'logon_id': {'key': 'logonId', 'type': 'str'},
        'logon_ip': {'key': 'logonIp', 'type': 'str'},
        'logon_location': {'key': 'logonLocation', 'type': 'str'},
        'logon_type': {'key': 'logonType', 'type': 'str'},
        'on_premises_security_identifier': {'key': 'onPremisesSecurityIdentifier', 'type': 'str'},
        'risk_score': {'key': 'riskScore', 'type': 'str'},
        'user_account_type': {'key': 'userAccountType', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        aad_user_id: Optional[str] = None,
        account_name: Optional[str] = None,
        domain_name: Optional[str] = None,
        email_role: Optional[Union[str, "MicrosoftGraphEmailRole"]] = None,
        is_vpn: Optional[bool] = None,
        logon_date_time: Optional[datetime.datetime] = None,
        logon_id: Optional[str] = None,
        logon_ip: Optional[str] = None,
        logon_location: Optional[str] = None,
        logon_type: Optional[Union[str, "MicrosoftGraphLogonType"]] = None,
        on_premises_security_identifier: Optional[str] = None,
        risk_score: Optional[str] = None,
        user_account_type: Optional[Union[str, "MicrosoftGraphUserAccountSecurityType"]] = None,
        user_principal_name: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphUserSecurityState, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.aad_user_id = aad_user_id
        self.account_name = account_name
        self.domain_name = domain_name
        self.email_role = email_role
        self.is_vpn = is_vpn
        self.logon_date_time = logon_date_time
        self.logon_id = logon_id
        self.logon_ip = logon_ip
        self.logon_location = logon_location
        self.logon_type = logon_type
        self.on_premises_security_identifier = on_premises_security_identifier
        self.risk_score = risk_score
        self.user_account_type = user_account_type
        self.user_principal_name = user_principal_name


class MicrosoftGraphVulnerabilityState(msrest.serialization.Model):
    """vulnerabilityState.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param cve: Common Vulnerabilities and Exposures (CVE) for the vulnerability.
    :type cve: str
    :param severity: Base Common Vulnerability Scoring System (CVSS) severity score for this
     vulnerability.
    :type severity: str
    :param was_running: Indicates whether the detected vulnerability (file) was running at the time
     of detection or was the file detected at rest on the disk.
    :type was_running: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'cve': {'key': 'cve', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'str'},
        'was_running': {'key': 'wasRunning', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        cve: Optional[str] = None,
        severity: Optional[str] = None,
        was_running: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphVulnerabilityState, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.cve = cve
        self.severity = severity
        self.was_running = was_running


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~security.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        *,
        error: "OdataErrorMain",
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.error = error


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~security.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        additional_properties: Optional[Dict[str, object]] = None,
        target: Optional[str] = None,
        details: Optional[List["OdataErrorDetail"]] = None,
        innererror: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror
