# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import get_three_state_flag
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_userspeople.action import (
    AddEmailAddresses,
    AddPhones,
    AddWebsites,
    AddSources
)


def load_arguments(self, _):

    with self.argument_context('userspeople update') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('person_id', help='key: person-id of person')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('display_name', help='The person\'s display name.')
        c.argument('given_name', help='The person\'s given name.')
        c.argument('surname', help='The person\'s surname.')
        c.argument('birthday', help='The person\'s birthday.')
        c.argument('person_notes', help='Free-form notes that the user has taken about this person.')
        c.argument('is_favorite', arg_type=get_three_state_flag(), help='true if the user has flagged this person as a '
                   'favorite.')
        c.argument('email_addresses', action=AddEmailAddresses, nargs='*', help='')
        c.argument('phones', action=AddPhones, nargs='*', help='The person\'s phone numbers.')
        c.argument('postal_addresses', type=validate_file_or_dict, help='The person\'s addresses. Expected value: '
                   'json-string/@json-file.')
        c.argument('websites', action=AddWebsites, nargs='*', help='The person\'s websites.')
        c.argument('title', help='')
        c.argument('company_name', help='The name of the person\'s company.')
        c.argument('yomi_company', help='The phonetic Japanese name of the person\'s company.')
        c.argument('department', help='The person\'s department.')
        c.argument('office_location', help='The location of the person\'s office.')
        c.argument('profession', help='The person\'s profession.')
        c.argument('sources', action=AddSources, nargs='*', help='')
        c.argument('mailbox_type', help='')
        c.argument('person_type', help='The type of person.')
        c.argument('user_principal_name', help='The user principal name (UPN) of the person. The UPN is an '
                   'Internet-style login name for the person based on the Internet standard RFC 822. By convention, '
                   'this should map to the person\'s email name. The general format is alias@domain.')

    with self.argument_context('userspeople create-person') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('display_name', help='The person\'s display name.')
        c.argument('given_name', help='The person\'s given name.')
        c.argument('surname', help='The person\'s surname.')
        c.argument('birthday', help='The person\'s birthday.')
        c.argument('person_notes', help='Free-form notes that the user has taken about this person.')
        c.argument('is_favorite', arg_type=get_three_state_flag(), help='true if the user has flagged this person as a '
                   'favorite.')
        c.argument('email_addresses', action=AddEmailAddresses, nargs='*', help='')
        c.argument('phones', action=AddPhones, nargs='*', help='The person\'s phone numbers.')
        c.argument('postal_addresses', type=validate_file_or_dict, help='The person\'s addresses. Expected value: '
                   'json-string/@json-file.')
        c.argument('websites', action=AddWebsites, nargs='*', help='The person\'s websites.')
        c.argument('title', help='')
        c.argument('company_name', help='The name of the person\'s company.')
        c.argument('yomi_company', help='The phonetic Japanese name of the person\'s company.')
        c.argument('department', help='The person\'s department.')
        c.argument('office_location', help='The location of the person\'s office.')
        c.argument('profession', help='The person\'s profession.')
        c.argument('sources', action=AddSources, nargs='*', help='')
        c.argument('mailbox_type', help='')
        c.argument('person_type', help='The type of person.')
        c.argument('user_principal_name', help='The user principal name (UPN) of the person. The UPN is an '
                   'Internet-style login name for the person based on the Internet standard RFC 822. By convention, '
                   'this should map to the person\'s email name. The general format is alias@domain.')

    with self.argument_context('userspeople get-person') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('person_id', help='key: person-id of person')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('userspeople list-person') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')
