# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from msgraph.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_usersplanner.generated._client_factory import cf_user
    usersplanner_user = CliCommandType(
        operations_tmpl='azext_usersplanner.vendored_sdks.usersplanner.operations._user_operations#UserOperations.{}',
        client_factory=cf_user)
    with self.command_group('usersplanner', usersplanner_user, client_factory=cf_user) as g:
        g.custom_command('update', 'usersplanner_update')
        g.custom_command('get-planner', 'usersplanner_get_planner')

    from azext_usersplanner.generated._client_factory import cf_user_planner
    usersplanner_user_planner = CliCommandType(
        operations_tmpl='azext_usersplanner.vendored_sdks.usersplanner.operations._user_planner_operations#UserPlannerO'
        'perations.{}',
        client_factory=cf_user_planner)
    with self.command_group('usersplanner', usersplanner_user_planner, client_factory=cf_user_planner) as g:
        g.custom_command('update', 'usersplanner_update')
        g.custom_command('create-all', 'usersplanner_create_all')
        g.custom_command('create-plan', 'usersplanner_create_plan')
        g.custom_command('create-task', 'usersplanner_create_task')
        g.custom_command('get-all', 'usersplanner_get_all')
        g.custom_command('get-favorite-plan', 'usersplanner_get_favorite_plan')
        g.custom_command('get-plan', 'usersplanner_get_plan')
        g.custom_command('get-recent-plan', 'usersplanner_get_recent_plan')
        g.custom_command('get-task', 'usersplanner_get_task')
        g.custom_command('list-all', 'usersplanner_list_all')
        g.custom_command('list-favorite-plan', 'usersplanner_list_favorite_plan')
        g.custom_command('list-plan', 'usersplanner_list_plan')
        g.custom_command('list-recent-plan', 'usersplanner_list_recent_plan')
        g.custom_command('list-task', 'usersplanner_list_task')

    from azext_usersplanner.generated._client_factory import cf_user_planner_plan
    usersplanner_user_planner_plan = CliCommandType(
        operations_tmpl='azext_usersplanner.vendored_sdks.usersplanner.operations._user_planner_plan_operations#UserPla'
        'nnerPlanOperations.{}',
        client_factory=cf_user_planner_plan)
    with self.command_group('usersplanner', usersplanner_user_planner_plan, client_factory=cf_user_planner_plan) as g:
        g.custom_command('update', 'usersplanner_update')
        g.custom_command('create-bucket', 'usersplanner_create_bucket')
        g.custom_command('create-task', 'usersplanner_create_task')
        g.custom_command('get-bucket', 'usersplanner_get_bucket')
        g.custom_command('get-detail', 'usersplanner_get_detail')
        g.custom_command('get-task', 'usersplanner_get_task')
        g.custom_command('list-bucket', 'usersplanner_list_bucket')
        g.custom_command('list-task', 'usersplanner_list_task')

    from azext_usersplanner.generated._client_factory import cf_user_planner_plan_bucket
    usersplanner_user_planner_plan_bucket = CliCommandType(
        operations_tmpl='azext_usersplanner.vendored_sdks.usersplanner.operations._user_planner_plan_bucket_operations#'
        'UserPlannerPlanBucketOperations.{}',
        client_factory=cf_user_planner_plan_bucket)
    with self.command_group('usersplanner', usersplanner_user_planner_plan_bucket,
                            client_factory=cf_user_planner_plan_bucket) as g:
        g.custom_command('update', 'usersplanner_update')
        g.custom_command('create-task', 'usersplanner_create_task')
        g.custom_command('get-task', 'usersplanner_get_task')
        g.custom_command('list-task', 'usersplanner_list_task')

    from azext_usersplanner.generated._client_factory import cf_user_planner_plan_bucket_task
    usersplanner_user_planner_plan_bucket_task = CliCommandType(
        operations_tmpl='azext_usersplanner.vendored_sdks.usersplanner.operations._user_planner_plan_bucket_task_operat'
        'ions#UserPlannerPlanBucketTaskOperations.{}',
        client_factory=cf_user_planner_plan_bucket_task)
    with self.command_group('usersplanner', usersplanner_user_planner_plan_bucket_task,
                            client_factory=cf_user_planner_plan_bucket_task) as g:
        g.custom_command('update', 'usersplanner_update')
        g.custom_command('get-assigned-to-task-board-format', 'usersplanner_get_assigned_to_task_board_format')
        g.custom_command('get-bucket-task-board-format', 'usersplanner_get_bucket_task_board_format')
        g.custom_command('get-detail', 'usersplanner_get_detail')
        g.custom_command('get-progress-task-board-format', 'usersplanner_get_progress_task_board_format')

    from azext_usersplanner.generated._client_factory import cf_user_planner_plan_task
    usersplanner_user_planner_plan_task = CliCommandType(
        operations_tmpl='azext_usersplanner.vendored_sdks.usersplanner.operations._user_planner_plan_task_operations#Us'
        'erPlannerPlanTaskOperations.{}',
        client_factory=cf_user_planner_plan_task)
    with self.command_group('usersplanner', usersplanner_user_planner_plan_task,
                            client_factory=cf_user_planner_plan_task) as g:
        g.custom_command('update', 'usersplanner_update')
        g.custom_command('get-assigned-to-task-board-format', 'usersplanner_get_assigned_to_task_board_format')
        g.custom_command('get-bucket-task-board-format', 'usersplanner_get_bucket_task_board_format')
        g.custom_command('get-detail', 'usersplanner_get_detail')
        g.custom_command('get-progress-task-board-format', 'usersplanner_get_progress_task_board_format')

    from azext_usersplanner.generated._client_factory import cf_user_planner_task
    usersplanner_user_planner_task = CliCommandType(
        operations_tmpl='azext_usersplanner.vendored_sdks.usersplanner.operations._user_planner_task_operations#UserPla'
        'nnerTaskOperations.{}',
        client_factory=cf_user_planner_task)
    with self.command_group('usersplanner', usersplanner_user_planner_task, client_factory=cf_user_planner_task) as g:
        g.custom_command('update', 'usersplanner_update')
        g.custom_command('get-assigned-to-task-board-format', 'usersplanner_get_assigned_to_task_board_format')
        g.custom_command('get-bucket-task-board-format', 'usersplanner_get_bucket_task_board_format')
        g.custom_command('get-detail', 'usersplanner_get_detail')
        g.custom_command('get-progress-task-board-format', 'usersplanner_get_progress_task_board_format')
