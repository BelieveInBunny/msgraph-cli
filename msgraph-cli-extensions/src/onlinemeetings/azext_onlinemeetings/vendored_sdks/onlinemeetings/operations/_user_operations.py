# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class UserOperations(object):
    """UserOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~online_meetings.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_online_meeting(
        self,
        user_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Get6ItemsItem"]]]
        select=None,  # type: Optional[List[Union[str, "models.Get7ItemsItem"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfOnlineMeeting"]
        """Get onlineMeetings from users.

        Get onlineMeetings from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~online_meetings.models.Get6ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~online_meetings.models.Get7ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfOnlineMeeting or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~online_meetings.models.CollectionOfOnlineMeeting]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfOnlineMeeting"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_online_meeting.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfOnlineMeeting', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_online_meeting.metadata = {'url': '/users/{user-id}/onlineMeetings'}  # type: ignore

    def create_online_meeting(
        self,
        user_id,  # type: str
        id=None,  # type: Optional[str]
        creation_date_time=None,  # type: Optional[datetime.datetime]
        start_date_time=None,  # type: Optional[datetime.datetime]
        end_date_time=None,  # type: Optional[datetime.datetime]
        canceled_date_time=None,  # type: Optional[datetime.datetime]
        expiration_date_time=None,  # type: Optional[datetime.datetime]
        entry_exit_announcement=None,  # type: Optional[bool]
        join_url=None,  # type: Optional[str]
        subject=None,  # type: Optional[str]
        is_cancelled=None,  # type: Optional[bool]
        is_broadcast=None,  # type: Optional[bool]
        access_level=None,  # type: Optional[Union[str, "models.MicrosoftGraphAccessLevel"]]
        capabilities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphMeetingCapabilities"]]]
        audio_conferencing=None,  # type: Optional["models.MicrosoftGraphAudioConferencing"]
        chat_info=None,  # type: Optional["models.MicrosoftGraphChatInfo"]
        video_teleconference_id=None,  # type: Optional[str]
        external_id=None,  # type: Optional[str]
        join_information=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        organizer=None,  # type: Optional["models.MicrosoftGraphMeetingParticipantInfo"]
        attendees=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        producers=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        contributors=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphOnlineMeeting"
        """Create new navigation property to onlineMeetings for users.

        Create new navigation property to onlineMeetings for users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param id: Read-only.
        :type id: str
        :param creation_date_time: The meeting creation time in UTC. Read-only.
        :type creation_date_time: ~datetime.datetime
        :param start_date_time: The meeting start time in UTC.
        :type start_date_time: ~datetime.datetime
        :param end_date_time: The meeting end time in UTC.
        :type end_date_time: ~datetime.datetime
        :param canceled_date_time:
        :type canceled_date_time: ~datetime.datetime
        :param expiration_date_time:
        :type expiration_date_time: ~datetime.datetime
        :param entry_exit_announcement:
        :type entry_exit_announcement: bool
        :param join_url:
        :type join_url: str
        :param subject: The subject of the online meeting.
        :type subject: str
        :param is_cancelled:
        :type is_cancelled: bool
        :param is_broadcast:
        :type is_broadcast: bool
        :param access_level:
        :type access_level: str or ~online_meetings.models.MicrosoftGraphAccessLevel
        :param capabilities:
        :type capabilities: list[str or ~online_meetings.models.MicrosoftGraphMeetingCapabilities]
        :param audio_conferencing: audioConferencing.
        :type audio_conferencing: ~online_meetings.models.MicrosoftGraphAudioConferencing
        :param chat_info: chatInfo.
        :type chat_info: ~online_meetings.models.MicrosoftGraphChatInfo
        :param video_teleconference_id: The video teleconferencing ID. Read-only.
        :type video_teleconference_id: str
        :param external_id:
        :type external_id: str
        :param join_information: itemBody.
        :type join_information: ~online_meetings.models.MicrosoftGraphItemBody
        :param organizer: meetingParticipantInfo.
        :type organizer: ~online_meetings.models.MicrosoftGraphMeetingParticipantInfo
        :param attendees:
        :type attendees: list[~online_meetings.models.MicrosoftGraphMeetingParticipantInfo]
        :param producers:
        :type producers: list[~online_meetings.models.MicrosoftGraphMeetingParticipantInfo]
        :param contributors:
        :type contributors: list[~online_meetings.models.MicrosoftGraphMeetingParticipantInfo]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOnlineMeeting, or the result of cls(response)
        :rtype: ~online_meetings.models.MicrosoftGraphOnlineMeeting
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOnlineMeeting"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphOnlineMeeting(id=id, creation_date_time=creation_date_time, start_date_time=start_date_time, end_date_time=end_date_time, canceled_date_time=canceled_date_time, expiration_date_time=expiration_date_time, entry_exit_announcement=entry_exit_announcement, join_url=join_url, subject=subject, is_cancelled=is_cancelled, is_broadcast=is_broadcast, access_level=access_level, capabilities=capabilities, audio_conferencing=audio_conferencing, chat_info=chat_info, video_teleconference_id=video_teleconference_id, external_id=external_id, join_information=join_information, organizer=organizer, attendees=attendees, producers=producers, contributors=contributors)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_online_meeting.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphOnlineMeeting')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOnlineMeeting', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_online_meeting.metadata = {'url': '/users/{user-id}/onlineMeetings'}  # type: ignore

    def get_online_meeting(
        self,
        user_id,  # type: str
        online_meeting_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Get2ItemsItem"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphOnlineMeeting"
        """Get onlineMeetings from users.

        Get onlineMeetings from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param online_meeting_id: key: onlineMeeting-id of onlineMeeting.
        :type online_meeting_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~online_meetings.models.Get2ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOnlineMeeting, or the result of cls(response)
        :rtype: ~online_meetings.models.MicrosoftGraphOnlineMeeting
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOnlineMeeting"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_online_meeting.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'onlineMeeting-id': self._serialize.url("online_meeting_id", online_meeting_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOnlineMeeting', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_online_meeting.metadata = {'url': '/users/{user-id}/onlineMeetings/{onlineMeeting-id}'}  # type: ignore

    def update_online_meeting(
        self,
        user_id,  # type: str
        online_meeting_id,  # type: str
        id=None,  # type: Optional[str]
        creation_date_time=None,  # type: Optional[datetime.datetime]
        start_date_time=None,  # type: Optional[datetime.datetime]
        end_date_time=None,  # type: Optional[datetime.datetime]
        canceled_date_time=None,  # type: Optional[datetime.datetime]
        expiration_date_time=None,  # type: Optional[datetime.datetime]
        entry_exit_announcement=None,  # type: Optional[bool]
        join_url=None,  # type: Optional[str]
        subject=None,  # type: Optional[str]
        is_cancelled=None,  # type: Optional[bool]
        is_broadcast=None,  # type: Optional[bool]
        access_level=None,  # type: Optional[Union[str, "models.MicrosoftGraphAccessLevel"]]
        capabilities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphMeetingCapabilities"]]]
        audio_conferencing=None,  # type: Optional["models.MicrosoftGraphAudioConferencing"]
        chat_info=None,  # type: Optional["models.MicrosoftGraphChatInfo"]
        video_teleconference_id=None,  # type: Optional[str]
        external_id=None,  # type: Optional[str]
        join_information=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        organizer=None,  # type: Optional["models.MicrosoftGraphMeetingParticipantInfo"]
        attendees=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        producers=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        contributors=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property onlineMeetings in users.

        Update the navigation property onlineMeetings in users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param online_meeting_id: key: onlineMeeting-id of onlineMeeting.
        :type online_meeting_id: str
        :param id: Read-only.
        :type id: str
        :param creation_date_time: The meeting creation time in UTC. Read-only.
        :type creation_date_time: ~datetime.datetime
        :param start_date_time: The meeting start time in UTC.
        :type start_date_time: ~datetime.datetime
        :param end_date_time: The meeting end time in UTC.
        :type end_date_time: ~datetime.datetime
        :param canceled_date_time:
        :type canceled_date_time: ~datetime.datetime
        :param expiration_date_time:
        :type expiration_date_time: ~datetime.datetime
        :param entry_exit_announcement:
        :type entry_exit_announcement: bool
        :param join_url:
        :type join_url: str
        :param subject: The subject of the online meeting.
        :type subject: str
        :param is_cancelled:
        :type is_cancelled: bool
        :param is_broadcast:
        :type is_broadcast: bool
        :param access_level:
        :type access_level: str or ~online_meetings.models.MicrosoftGraphAccessLevel
        :param capabilities:
        :type capabilities: list[str or ~online_meetings.models.MicrosoftGraphMeetingCapabilities]
        :param audio_conferencing: audioConferencing.
        :type audio_conferencing: ~online_meetings.models.MicrosoftGraphAudioConferencing
        :param chat_info: chatInfo.
        :type chat_info: ~online_meetings.models.MicrosoftGraphChatInfo
        :param video_teleconference_id: The video teleconferencing ID. Read-only.
        :type video_teleconference_id: str
        :param external_id:
        :type external_id: str
        :param join_information: itemBody.
        :type join_information: ~online_meetings.models.MicrosoftGraphItemBody
        :param organizer: meetingParticipantInfo.
        :type organizer: ~online_meetings.models.MicrosoftGraphMeetingParticipantInfo
        :param attendees:
        :type attendees: list[~online_meetings.models.MicrosoftGraphMeetingParticipantInfo]
        :param producers:
        :type producers: list[~online_meetings.models.MicrosoftGraphMeetingParticipantInfo]
        :param contributors:
        :type contributors: list[~online_meetings.models.MicrosoftGraphMeetingParticipantInfo]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphOnlineMeeting(id=id, creation_date_time=creation_date_time, start_date_time=start_date_time, end_date_time=end_date_time, canceled_date_time=canceled_date_time, expiration_date_time=expiration_date_time, entry_exit_announcement=entry_exit_announcement, join_url=join_url, subject=subject, is_cancelled=is_cancelled, is_broadcast=is_broadcast, access_level=access_level, capabilities=capabilities, audio_conferencing=audio_conferencing, chat_info=chat_info, video_teleconference_id=video_teleconference_id, external_id=external_id, join_information=join_information, organizer=organizer, attendees=attendees, producers=producers, contributors=contributors)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_online_meeting.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'onlineMeeting-id': self._serialize.url("online_meeting_id", online_meeting_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphOnlineMeeting')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_online_meeting.metadata = {'url': '/users/{user-id}/onlineMeetings/{onlineMeeting-id}'}  # type: ignore
