# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_outlookuser.action import (
    AddMasterCategories,
    AddOutlookuserUserOutlookCreateTaskFolderSingleValueExtendedProperties,
    AddOutlookuserUserOutlookCreateTaskFolderMultiValueExtendedProperties,
    AddBody,
    AddCompletedDateTime,
    AddAttachments,
    AddRecurrencePattern,
    AddRecurrenceRange,
    AddOutlookuserUserOutlookCreateTaskSingleValueExtendedProperties,
    AddOutlookuserUserOutlookCreateTaskMultiValueExtendedProperties
)


def load_arguments(self, _):

    with self.argument_context('outlookuser user update') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('master_categories', action=AddMasterCategories, nargs='*', help='A list of categories defined for '
                   'the user.')
        c.argument('task_groups', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('task_folders', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('tasks', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('outlookuser user get-outlook') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook update') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_category_id', help='key: outlookCategory-id of outlookCategory')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('display_name', help='A unique name that identifies a category in the user\'s mailbox. After a '
                   'category is created, the name cannot be changed. Read-only.')
        c.argument('color', arg_type=get_enum_type(['preset0', 'preset1', 'preset2', 'preset3', 'preset4', 'preset5', 
                   'preset6', 'preset7', 'preset8', 'preset9', 'preset10', 'preset11', 'preset12', 'preset13', ''
                   'preset14', 'preset15', 'preset16', 'preset17', 'preset18', 'preset19', 'preset20', 'preset21', ''
                   'preset22', 'preset23', 'preset24', 'none']), help='categoryColor')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('change_key', help='')
        c.argument('name', help='')
        c.argument('is_default_folder', arg_type=get_three_state_flag(), help='')
        c.argument('parent_group_key', help='')
        c.argument('tasks', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('single_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskFolderSingleValueExtendedProperties, nargs='*', help='')
        c.argument('multi_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskFolderMultiValueExtendedProperties, nargs='*', help='')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('is_default_group', arg_type=get_three_state_flag(), help='')
        c.argument('group_key', help='')
        c.argument('task_folders', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('assigned_to', help='')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('completed_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('due_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='importance')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='')
        c.argument('owner', help='')
        c.argument('parent_folder_id', help='')
        c.argument('reminder_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help=''
                   'sensitivity')
        c.argument('start_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'inProgress', 'completed', 'waitingOnOthers', ''
                   'deferred']), help='taskStatus')
        c.argument('subject', help='')
        c.argument('attachments', action=AddAttachments, nargs='*', help='')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')

    with self.argument_context('outlookuser user-outlook create-master-category') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('display_name', help='A unique name that identifies a category in the user\'s mailbox. After a '
                   'category is created, the name cannot be changed. Read-only.')
        c.argument('color', arg_type=get_enum_type(['preset0', 'preset1', 'preset2', 'preset3', 'preset4', 'preset5', 
                   'preset6', 'preset7', 'preset8', 'preset9', 'preset10', 'preset11', 'preset12', 'preset13', ''
                   'preset14', 'preset15', 'preset16', 'preset17', 'preset18', 'preset19', 'preset20', 'preset21', ''
                   'preset22', 'preset23', 'preset24', 'none']), help='categoryColor')

    with self.argument_context('outlookuser user-outlook create-task') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('change_key', help='Identifies the version of the item. Every time the item is changed, changeKey '
                   'changes as well. This allows Exchange to apply changes to the correct version of the object. '
                   'Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('assigned_to', help='')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('completed_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('due_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='importance')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='')
        c.argument('owner', help='')
        c.argument('parent_folder_id', help='')
        c.argument('reminder_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help=''
                   'sensitivity')
        c.argument('start_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'inProgress', 'completed', 'waitingOnOthers', ''
                   'deferred']), help='taskStatus')
        c.argument('subject', help='')
        c.argument('single_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskSingleValueExtendedProperties, nargs='*', help='')
        c.argument('multi_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskMultiValueExtendedProperties, nargs='*', help='')
        c.argument('attachments', action=AddAttachments, nargs='*', help='')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')

    with self.argument_context('outlookuser user-outlook create-task-folder') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('change_key', help='')
        c.argument('name', help='')
        c.argument('is_default_folder', arg_type=get_three_state_flag(), help='')
        c.argument('parent_group_key', help='')
        c.argument('tasks', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('single_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskFolderSingleValueExtendedProperties, nargs='*', help='')
        c.argument('multi_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskFolderMultiValueExtendedProperties, nargs='*', help='')

    with self.argument_context('outlookuser user-outlook create-task-group') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('change_key', help='')
        c.argument('is_default_group', arg_type=get_three_state_flag(), help='')
        c.argument('name', help='')
        c.argument('group_key', help='')
        c.argument('task_folders', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('outlookuser user-outlook get-master-category') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_category_id', help='key: outlookCategory-id of outlookCategory')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook get-task') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook get-task-folder') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook get-task-group') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook list-master-category') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook list-task') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook list-task-folder') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook list-task-group') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-folder update') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('multi_value_legacy_extended_property_id', help='key: multiValueLegacyExtendedProperty-id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')
        c.argument('single_value_legacy_extended_property_id', help='key: singleValueLegacyExtendedProperty-id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('change_key', help='Identifies the version of the item. Every time the item is changed, changeKey '
                   'changes as well. This allows Exchange to apply changes to the correct version of the object. '
                   'Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('assigned_to', help='')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('completed_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('due_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='importance')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='')
        c.argument('owner', help='')
        c.argument('parent_folder_id', help='')
        c.argument('reminder_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help=''
                   'sensitivity')
        c.argument('start_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'inProgress', 'completed', 'waitingOnOthers', ''
                   'deferred']), help='taskStatus')
        c.argument('subject', help='')
        c.argument('single_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskSingleValueExtendedProperties, nargs='*', help='')
        c.argument('multi_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskMultiValueExtendedProperties, nargs='*', help='')
        c.argument('attachments', action=AddAttachments, nargs='*', help='')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')

    with self.argument_context('outlookuser user-outlook-task-folder create-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('outlookuser user-outlook-task-folder create-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('value', help='A property value.')

    with self.argument_context('outlookuser user-outlook-task-folder create-task') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('change_key', help='Identifies the version of the item. Every time the item is changed, changeKey '
                   'changes as well. This allows Exchange to apply changes to the correct version of the object. '
                   'Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('assigned_to', help='')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('completed_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('due_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='importance')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='')
        c.argument('owner', help='')
        c.argument('parent_folder_id', help='')
        c.argument('reminder_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help=''
                   'sensitivity')
        c.argument('start_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'inProgress', 'completed', 'waitingOnOthers', ''
                   'deferred']), help='taskStatus')
        c.argument('subject', help='')
        c.argument('single_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskSingleValueExtendedProperties, nargs='*', help='')
        c.argument('multi_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskMultiValueExtendedProperties, nargs='*', help='')
        c.argument('attachments', action=AddAttachments, nargs='*', help='')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')

    with self.argument_context('outlookuser user-outlook-task-folder get-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('multi_value_legacy_extended_property_id', help='key: multiValueLegacyExtendedProperty-id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-folder get-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('single_value_legacy_extended_property_id', help='key: singleValueLegacyExtendedProperty-id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-folder get-task') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-folder list-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-folder list-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-folder list-task') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-folder-task update') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('attachment_id', help='key: attachment-id of attachment')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', help='The attachment\'s file name.')
        c.argument('content_type', help='The MIME type.')
        c.argument('size', help='The length of the attachment in bytes.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('multi_value_legacy_extended_property_id', help='key: multiValueLegacyExtendedProperty-id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('value', nargs='*', help='A collection of property values.')
        c.argument('single_value_legacy_extended_property_id', help='key: singleValueLegacyExtendedProperty-id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('outlookuser user-outlook-task-folder-task create-attachment') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', help='The attachment\'s file name.')
        c.argument('content_type', help='The MIME type.')
        c.argument('size', help='The length of the attachment in bytes.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')

    with self.argument_context('outlookuser user-outlook-task-folder-task create-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('outlookuser user-outlook-task-folder-task create-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('value', help='A property value.')

    with self.argument_context('outlookuser user-outlook-task-folder-task get-attachment') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('attachment_id', help='key: attachment-id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-folder-task get-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('multi_value_legacy_extended_property_id', help='key: multiValueLegacyExtendedProperty-id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-folder-task get-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('single_value_legacy_extended_property_id', help='key: singleValueLegacyExtendedProperty-id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-folder-task list-attachment') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-folder-task list-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-folder-task list-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-group update') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('change_key', help='')
        c.argument('name', help='')
        c.argument('is_default_folder', arg_type=get_three_state_flag(), help='')
        c.argument('parent_group_key', help='')
        c.argument('tasks', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('single_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskFolderSingleValueExtendedProperties, nargs='*', help='')
        c.argument('multi_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskFolderMultiValueExtendedProperties, nargs='*', help='')

    with self.argument_context('outlookuser user-outlook-task-group create-task-folder') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('change_key', help='')
        c.argument('name', help='')
        c.argument('is_default_folder', arg_type=get_three_state_flag(), help='')
        c.argument('parent_group_key', help='')
        c.argument('tasks', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('single_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskFolderSingleValueExtendedProperties, nargs='*', help='')
        c.argument('multi_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskFolderMultiValueExtendedProperties, nargs='*', help='')

    with self.argument_context('outlookuser user-outlook-task-group get-task-folder') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-group list-task-folder') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder update') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('multi_value_legacy_extended_property_id', help='key: multiValueLegacyExtendedProperty-id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')
        c.argument('single_value_legacy_extended_property_id', help='key: singleValueLegacyExtendedProperty-id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('change_key', help='Identifies the version of the item. Every time the item is changed, changeKey '
                   'changes as well. This allows Exchange to apply changes to the correct version of the object. '
                   'Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('assigned_to', help='')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('completed_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('due_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='importance')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='')
        c.argument('owner', help='')
        c.argument('parent_folder_id', help='')
        c.argument('reminder_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help=''
                   'sensitivity')
        c.argument('start_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'inProgress', 'completed', 'waitingOnOthers', ''
                   'deferred']), help='taskStatus')
        c.argument('subject', help='')
        c.argument('single_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskSingleValueExtendedProperties, nargs='*', help='')
        c.argument('multi_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskMultiValueExtendedProperties, nargs='*', help='')
        c.argument('attachments', action=AddAttachments, nargs='*', help='')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder create-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder create-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('value', help='A property value.')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder create-task') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('change_key', help='Identifies the version of the item. Every time the item is changed, changeKey '
                   'changes as well. This allows Exchange to apply changes to the correct version of the object. '
                   'Read-only.')
        c.argument('categories', nargs='*', help='The categories associated with the item')
        c.argument('assigned_to', help='')
        c.argument('body', action=AddBody, nargs='*', help='itemBody')
        c.argument('completed_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('due_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='')
        c.argument('importance', arg_type=get_enum_type(['low', 'normal', 'high']), help='importance')
        c.argument('is_reminder_on', arg_type=get_three_state_flag(), help='')
        c.argument('owner', help='')
        c.argument('parent_folder_id', help='')
        c.argument('reminder_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('sensitivity', arg_type=get_enum_type(['normal', 'personal', 'private', 'confidential']), help=''
                   'sensitivity')
        c.argument('start_date_time', action=AddCompletedDateTime, nargs='*', help='dateTimeTimeZone')
        c.argument('status', arg_type=get_enum_type(['notStarted', 'inProgress', 'completed', 'waitingOnOthers', ''
                   'deferred']), help='taskStatus')
        c.argument('subject', help='')
        c.argument('single_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskSingleValueExtendedProperties, nargs='*', help='')
        c.argument('multi_value_extended_properties',
                   action=AddOutlookuserUserOutlookCreateTaskMultiValueExtendedProperties, nargs='*', help='')
        c.argument('attachments', action=AddAttachments, nargs='*', help='')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='*', help='recurrencePattern')
        c.argument('recurrence_range', action=AddRecurrenceRange, nargs='*', help='recurrenceRange')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder get-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('multi_value_legacy_extended_property_id', help='key: multiValueLegacyExtendedProperty-id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder get-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('single_value_legacy_extended_property_id', help='key: singleValueLegacyExtendedProperty-id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder get-task') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder list-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder list-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder list-task') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder-task update') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('attachment_id', help='key: attachment-id of attachment')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', help='The attachment\'s file name.')
        c.argument('content_type', help='The MIME type.')
        c.argument('size', help='The length of the attachment in bytes.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('multi_value_legacy_extended_property_id', help='key: multiValueLegacyExtendedProperty-id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('value', nargs='*', help='A collection of property values.')
        c.argument('single_value_legacy_extended_property_id', help='key: singleValueLegacyExtendedProperty-id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder-task create-attachment') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', help='The attachment\'s file name.')
        c.argument('content_type', help='The MIME type.')
        c.argument('size', help='The length of the attachment in bytes.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder-task create-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder-task create-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('value', help='A property value.')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder-task get-attachment') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('attachment_id', help='key: attachment-id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder-task get-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('multi_value_legacy_extended_property_id', help='key: multiValueLegacyExtendedProperty-id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder-task get-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('single_value_legacy_extended_property_id', help='key: singleValueLegacyExtendedProperty-id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder-task list-attachment') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder-task list-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task-group-task-folder-task list-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_group_id', help='key: outlookTaskGroup-id of outlookTaskGroup')
        c.argument('outlook_task_folder_id', help='key: outlookTaskFolder-id of outlookTaskFolder')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task update') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('attachment_id', help='key: attachment-id of attachment')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', help='The attachment\'s file name.')
        c.argument('content_type', help='The MIME type.')
        c.argument('size', help='The length of the attachment in bytes.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('multi_value_legacy_extended_property_id', help='key: multiValueLegacyExtendedProperty-id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('value', nargs='*', help='A collection of property values.')
        c.argument('single_value_legacy_extended_property_id', help='key: singleValueLegacyExtendedProperty-id of '
                   'singleValueLegacyExtendedProperty')

    with self.argument_context('outlookuser user-outlook-task create-attachment') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('name', help='The attachment\'s file name.')
        c.argument('content_type', help='The MIME type.')
        c.argument('size', help='The length of the attachment in bytes.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')

    with self.argument_context('outlookuser user-outlook-task create-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('value', nargs='*', help='A collection of property values.')

    with self.argument_context('outlookuser user-outlook-task create-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('value', help='A property value.')

    with self.argument_context('outlookuser user-outlook-task get-attachment') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('attachment_id', help='key: attachment-id of attachment')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task get-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('multi_value_legacy_extended_property_id', help='key: multiValueLegacyExtendedProperty-id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task get-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('single_value_legacy_extended_property_id', help='key: singleValueLegacyExtendedProperty-id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task list-attachment') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task list-multi-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('outlookuser user-outlook-task list-single-value-extended-property') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('outlook_task_id', help='key: outlookTask-id of outlookTask')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')
