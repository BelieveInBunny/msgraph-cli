# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._users_outlook_user_enums import *


class CollectionOfAttachment(msrest.serialization.Model):
    """Collection of attachment.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphAttachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAttachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphAttachment"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfAttachment, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfAttachment0(msrest.serialization.Model):
    """Collection of attachment.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphAttachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAttachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphAttachment"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfAttachment0, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfAttachment1(msrest.serialization.Model):
    """Collection of attachment.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphAttachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAttachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphAttachment"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfAttachment1, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfMultiValueLegacyExtendedProperty(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfMultiValueLegacyExtendedProperty, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfMultiValueLegacyExtendedProperty0(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfMultiValueLegacyExtendedProperty0, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfMultiValueLegacyExtendedProperty1(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfMultiValueLegacyExtendedProperty1, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfMultiValueLegacyExtendedProperty2(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfMultiValueLegacyExtendedProperty2, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfMultiValueLegacyExtendedProperty3(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfMultiValueLegacyExtendedProperty3, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfOutlookCategory(msrest.serialization.Model):
    """Collection of outlookCategory.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphOutlookCategory]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphOutlookCategory]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphOutlookCategory"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfOutlookCategory, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfOutlookTask(msrest.serialization.Model):
    """Collection of outlookTask.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphOutlookTask]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphOutlookTask]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphOutlookTask"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfOutlookTask, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfOutlookTask0(msrest.serialization.Model):
    """Collection of outlookTask.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphOutlookTask]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphOutlookTask]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphOutlookTask"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfOutlookTask0, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfOutlookTask1(msrest.serialization.Model):
    """Collection of outlookTask.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphOutlookTask]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphOutlookTask]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphOutlookTask"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfOutlookTask1, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfOutlookTaskFolder(msrest.serialization.Model):
    """Collection of outlookTaskFolder.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphOutlookTaskFolder]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphOutlookTaskFolder]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphOutlookTaskFolder"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfOutlookTaskFolder, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfOutlookTaskFolder0(msrest.serialization.Model):
    """Collection of outlookTaskFolder.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphOutlookTaskFolder]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphOutlookTaskFolder]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphOutlookTaskFolder"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfOutlookTaskFolder0, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfOutlookTaskGroup(msrest.serialization.Model):
    """Collection of outlookTaskGroup.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphOutlookTaskGroup]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphOutlookTaskGroup]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphOutlookTaskGroup"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfOutlookTaskGroup, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfSingleValueLegacyExtendedProperty(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfSingleValueLegacyExtendedProperty, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfSingleValueLegacyExtendedProperty0(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfSingleValueLegacyExtendedProperty0, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfSingleValueLegacyExtendedProperty1(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfSingleValueLegacyExtendedProperty1, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfSingleValueLegacyExtendedProperty2(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfSingleValueLegacyExtendedProperty2, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class CollectionOfSingleValueLegacyExtendedProperty3(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_outlook_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        odata_next_link: Optional[str] = None,
        **kwargs
    ):
        super(CollectionOfSingleValueLegacyExtendedProperty3, self).__init__(**kwargs)
        self.value = value
        self.odata_next_link = odata_next_link


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = id


class MicrosoftGraphAttachment(MicrosoftGraphEntity):
    """attachment.

    :param id: Read-only.
    :type id: str
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The attachment's file name.
    :type name: str
    :param content_type: The MIME type.
    :type content_type: str
    :param size: The length of the attachment in bytes.
    :type size: int
    :param is_inline: true if the attachment is an inline attachment; otherwise, false.
    :type is_inline: bool
    """

    _validation = {
        'size': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'size': {'key': 'size', 'type': 'int'},
        'is_inline': {'key': 'isInline', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        name: Optional[str] = None,
        content_type: Optional[str] = None,
        size: Optional[int] = None,
        is_inline: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftGraphAttachment, self).__init__(id=id, **kwargs)
        self.last_modified_date_time = last_modified_date_time
        self.name = name
        self.content_type = content_type
        self.size = size
        self.is_inline = is_inline


class MicrosoftGraphDateTimeZone(msrest.serialization.Model):
    """dateTimeTimeZone.

    :param date_time: A single point of time in a combined date and time representation
     ({date}T{time}; for example, 2017-08-29T04:00:00.0000000).
    :type date_time: str
    :param time_zone: Represents a time zone, for example, 'Pacific Standard Time'. See below for
     more possible values.
    :type time_zone: str
    """

    _attribute_map = {
        'date_time': {'key': 'dateTime', 'type': 'str'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        date_time: Optional[str] = None,
        time_zone: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphDateTimeZone, self).__init__(**kwargs)
        self.date_time = date_time
        self.time_zone = time_zone


class MicrosoftGraphItemBody(msrest.serialization.Model):
    """itemBody.

    :param content_type: bodyType. Possible values include: "text", "html".
    :type content_type: str or ~users_outlook_user.models.MicrosoftGraphBodyType
    :param content: The content of the item.
    :type content: str
    """

    _attribute_map = {
        'content_type': {'key': 'contentType', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        content_type: Optional[Union[str, "MicrosoftGraphBodyType"]] = None,
        content: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphItemBody, self).__init__(**kwargs)
        self.content_type = content_type
        self.content = content


class MicrosoftGraphMultiValueLegacyExtendedProperty(MicrosoftGraphEntity):
    """multiValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param value: A collection of property values.
    :type value: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'value': {'key': 'value', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        value: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphMultiValueLegacyExtendedProperty, self).__init__(id=id, **kwargs)
        self.value = value


class MicrosoftGraphOutlookCategory(MicrosoftGraphEntity):
    """outlookCategory.

    :param id: Read-only.
    :type id: str
    :param display_name: A unique name that identifies a category in the user's mailbox. After a
     category is created, the name cannot be changed. Read-only.
    :type display_name: str
    :param color: categoryColor. Possible values include: "preset0", "preset1", "preset2",
     "preset3", "preset4", "preset5", "preset6", "preset7", "preset8", "preset9", "preset10",
     "preset11", "preset12", "preset13", "preset14", "preset15", "preset16", "preset17", "preset18",
     "preset19", "preset20", "preset21", "preset22", "preset23", "preset24", "none".
    :type color: str or ~users_outlook_user.models.MicrosoftGraphCategoryColor
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'color': {'key': 'color', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        display_name: Optional[str] = None,
        color: Optional[Union[str, "MicrosoftGraphCategoryColor"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookCategory, self).__init__(id=id, **kwargs)
        self.display_name = display_name
        self.color = color


class MicrosoftGraphOutlookItem(MicrosoftGraphEntity):
    """outlookItem.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        change_key: Optional[str] = None,
        categories: Optional[List[str]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookItem, self).__init__(id=id, **kwargs)
        self.created_date_time = created_date_time
        self.last_modified_date_time = last_modified_date_time
        self.change_key = change_key
        self.categories = categories


class MicrosoftGraphOutlookTask(MicrosoftGraphOutlookItem):
    """outlookTask.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param assigned_to:
    :type assigned_to: str
    :param body: itemBody.
    :type body: ~users_outlook_user.models.MicrosoftGraphItemBody
    :param completed_date_time: dateTimeTimeZone.
    :type completed_date_time: ~users_outlook_user.models.MicrosoftGraphDateTimeZone
    :param due_date_time: dateTimeTimeZone.
    :type due_date_time: ~users_outlook_user.models.MicrosoftGraphDateTimeZone
    :param has_attachments:
    :type has_attachments: bool
    :param importance: importance. Possible values include: "low", "normal", "high".
    :type importance: str or ~users_outlook_user.models.MicrosoftGraphImportance
    :param is_reminder_on:
    :type is_reminder_on: bool
    :param owner:
    :type owner: str
    :param parent_folder_id:
    :type parent_folder_id: str
    :param reminder_date_time: dateTimeTimeZone.
    :type reminder_date_time: ~users_outlook_user.models.MicrosoftGraphDateTimeZone
    :param sensitivity: sensitivity. Possible values include: "normal", "personal", "private",
     "confidential".
    :type sensitivity: str or ~users_outlook_user.models.MicrosoftGraphSensitivity
    :param start_date_time: dateTimeTimeZone.
    :type start_date_time: ~users_outlook_user.models.MicrosoftGraphDateTimeZone
    :param status: taskStatus. Possible values include: "notStarted", "inProgress", "completed",
     "waitingOnOthers", "deferred".
    :type status: str or ~users_outlook_user.models.MicrosoftGraphTaskStatus
    :param subject:
    :type subject: str
    :param single_value_extended_properties:
    :type single_value_extended_properties:
     list[~users_outlook_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param multi_value_extended_properties:
    :type multi_value_extended_properties:
     list[~users_outlook_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param attachments:
    :type attachments: list[~users_outlook_user.models.MicrosoftGraphAttachment]
    :param pattern: recurrencePattern.
    :type pattern: ~users_outlook_user.models.MicrosoftGraphRecurrencePattern
    :param range: recurrenceRange.
    :type range: ~users_outlook_user.models.MicrosoftGraphRecurrenceRange
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'assigned_to': {'key': 'assignedTo', 'type': 'str'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'completed_date_time': {'key': 'completedDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'due_date_time': {'key': 'dueDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'importance': {'key': 'importance', 'type': 'str'},
        'is_reminder_on': {'key': 'isReminderOn', 'type': 'bool'},
        'owner': {'key': 'owner', 'type': 'str'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'reminder_date_time': {'key': 'reminderDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'sensitivity': {'key': 'sensitivity', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'status': {'key': 'status', 'type': 'str'},
        'subject': {'key': 'subject', 'type': 'str'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'attachments': {'key': 'attachments', 'type': '[MicrosoftGraphAttachment]'},
        'pattern': {'key': 'recurrence.pattern', 'type': 'MicrosoftGraphRecurrencePattern'},
        'range': {'key': 'recurrence.range', 'type': 'MicrosoftGraphRecurrenceRange'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        change_key: Optional[str] = None,
        categories: Optional[List[str]] = None,
        assigned_to: Optional[str] = None,
        body: Optional["MicrosoftGraphItemBody"] = None,
        completed_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        due_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        has_attachments: Optional[bool] = None,
        importance: Optional[Union[str, "MicrosoftGraphImportance"]] = None,
        is_reminder_on: Optional[bool] = None,
        owner: Optional[str] = None,
        parent_folder_id: Optional[str] = None,
        reminder_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        sensitivity: Optional[Union[str, "MicrosoftGraphSensitivity"]] = None,
        start_date_time: Optional["MicrosoftGraphDateTimeZone"] = None,
        status: Optional[Union[str, "MicrosoftGraphTaskStatus"]] = None,
        subject: Optional[str] = None,
        single_value_extended_properties: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        multi_value_extended_properties: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        attachments: Optional[List["MicrosoftGraphAttachment"]] = None,
        pattern: Optional["MicrosoftGraphRecurrencePattern"] = None,
        range: Optional["MicrosoftGraphRecurrenceRange"] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookTask, self).__init__(id=id, created_date_time=created_date_time, last_modified_date_time=last_modified_date_time, change_key=change_key, categories=categories, **kwargs)
        self.assigned_to = assigned_to
        self.body = body
        self.completed_date_time = completed_date_time
        self.due_date_time = due_date_time
        self.has_attachments = has_attachments
        self.importance = importance
        self.is_reminder_on = is_reminder_on
        self.owner = owner
        self.parent_folder_id = parent_folder_id
        self.reminder_date_time = reminder_date_time
        self.sensitivity = sensitivity
        self.start_date_time = start_date_time
        self.status = status
        self.subject = subject
        self.single_value_extended_properties = single_value_extended_properties
        self.multi_value_extended_properties = multi_value_extended_properties
        self.attachments = attachments
        self.pattern = pattern
        self.range = range


class MicrosoftGraphOutlookTaskFolder(MicrosoftGraphEntity):
    """outlookTaskFolder.

    :param id: Read-only.
    :type id: str
    :param change_key:
    :type change_key: str
    :param name:
    :type name: str
    :param is_default_folder:
    :type is_default_folder: bool
    :param parent_group_key:
    :type parent_group_key: str
    :param tasks:
    :type tasks: list[~users_outlook_user.models.MicrosoftGraphOutlookTask]
    :param single_value_extended_properties:
    :type single_value_extended_properties:
     list[~users_outlook_user.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param multi_value_extended_properties:
    :type multi_value_extended_properties:
     list[~users_outlook_user.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'is_default_folder': {'key': 'isDefaultFolder', 'type': 'bool'},
        'parent_group_key': {'key': 'parentGroupKey', 'type': 'str'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphOutlookTask]'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        change_key: Optional[str] = None,
        name: Optional[str] = None,
        is_default_folder: Optional[bool] = None,
        parent_group_key: Optional[str] = None,
        tasks: Optional[List["MicrosoftGraphOutlookTask"]] = None,
        single_value_extended_properties: Optional[List["MicrosoftGraphSingleValueLegacyExtendedProperty"]] = None,
        multi_value_extended_properties: Optional[List["MicrosoftGraphMultiValueLegacyExtendedProperty"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookTaskFolder, self).__init__(id=id, **kwargs)
        self.change_key = change_key
        self.name = name
        self.is_default_folder = is_default_folder
        self.parent_group_key = parent_group_key
        self.tasks = tasks
        self.single_value_extended_properties = single_value_extended_properties
        self.multi_value_extended_properties = multi_value_extended_properties


class MicrosoftGraphOutlookTaskGroup(MicrosoftGraphEntity):
    """outlookTaskGroup.

    :param id: Read-only.
    :type id: str
    :param change_key:
    :type change_key: str
    :param is_default_group:
    :type is_default_group: bool
    :param name:
    :type name: str
    :param group_key:
    :type group_key: str
    :param task_folders:
    :type task_folders: list[~users_outlook_user.models.MicrosoftGraphOutlookTaskFolder]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'is_default_group': {'key': 'isDefaultGroup', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'group_key': {'key': 'groupKey', 'type': 'str'},
        'task_folders': {'key': 'taskFolders', 'type': '[MicrosoftGraphOutlookTaskFolder]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        change_key: Optional[str] = None,
        is_default_group: Optional[bool] = None,
        name: Optional[str] = None,
        group_key: Optional[str] = None,
        task_folders: Optional[List["MicrosoftGraphOutlookTaskFolder"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookTaskGroup, self).__init__(id=id, **kwargs)
        self.change_key = change_key
        self.is_default_group = is_default_group
        self.name = name
        self.group_key = group_key
        self.task_folders = task_folders


class MicrosoftGraphOutlookUser(MicrosoftGraphEntity):
    """outlookUser.

    :param id: Read-only.
    :type id: str
    :param master_categories: A list of categories defined for the user.
    :type master_categories: list[~users_outlook_user.models.MicrosoftGraphOutlookCategory]
    :param task_groups:
    :type task_groups: list[~users_outlook_user.models.MicrosoftGraphOutlookTaskGroup]
    :param task_folders:
    :type task_folders: list[~users_outlook_user.models.MicrosoftGraphOutlookTaskFolder]
    :param tasks:
    :type tasks: list[~users_outlook_user.models.MicrosoftGraphOutlookTask]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'master_categories': {'key': 'masterCategories', 'type': '[MicrosoftGraphOutlookCategory]'},
        'task_groups': {'key': 'taskGroups', 'type': '[MicrosoftGraphOutlookTaskGroup]'},
        'task_folders': {'key': 'taskFolders', 'type': '[MicrosoftGraphOutlookTaskFolder]'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphOutlookTask]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        master_categories: Optional[List["MicrosoftGraphOutlookCategory"]] = None,
        task_groups: Optional[List["MicrosoftGraphOutlookTaskGroup"]] = None,
        task_folders: Optional[List["MicrosoftGraphOutlookTaskFolder"]] = None,
        tasks: Optional[List["MicrosoftGraphOutlookTask"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphOutlookUser, self).__init__(id=id, **kwargs)
        self.master_categories = master_categories
        self.task_groups = task_groups
        self.task_folders = task_folders
        self.tasks = tasks


class MicrosoftGraphRecurrencePattern(msrest.serialization.Model):
    """recurrencePattern.

    :param type: recurrencePatternType. Possible values include: "daily", "weekly",
     "absoluteMonthly", "relativeMonthly", "absoluteYearly", "relativeYearly".
    :type type: str or ~users_outlook_user.models.MicrosoftGraphRecurrencePatternType
    :param interval: The number of units between occurrences, where units can be in days, weeks,
     months, or years, depending on the type. Required.
    :type interval: int
    :param month: The month in which the event occurs.  This is a number from 1 to 12.
    :type month: int
    :param day_of_month: The day of the month on which the event occurs. Required if type is
     absoluteMonthly or absoluteYearly.
    :type day_of_month: int
    :param days_of_week: A collection of the days of the week on which the event occurs. The
     possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. If type is
     relativeMonthly or relativeYearly, and daysOfWeek specifies more than one day, the event falls
     on the first day that satisfies the pattern.  Required if type is weekly, relativeMonthly, or
     relativeYearly.
    :type days_of_week: list[str or ~users_outlook_user.models.MicrosoftGraphDayOfWeek]
    :param first_day_of_week: dayOfWeek. Possible values include: "sunday", "monday", "tuesday",
     "wednesday", "thursday", "friday", "saturday".
    :type first_day_of_week: str or ~users_outlook_user.models.MicrosoftGraphDayOfWeek
    :param index: weekIndex. Possible values include: "first", "second", "third", "fourth", "last".
    :type index: str or ~users_outlook_user.models.MicrosoftGraphWeekIndex
    """

    _validation = {
        'interval': {'maximum': 2147483647, 'minimum': -2147483648},
        'month': {'maximum': 2147483647, 'minimum': -2147483648},
        'day_of_month': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'interval': {'key': 'interval', 'type': 'int'},
        'month': {'key': 'month', 'type': 'int'},
        'day_of_month': {'key': 'dayOfMonth', 'type': 'int'},
        'days_of_week': {'key': 'daysOfWeek', 'type': '[str]'},
        'first_day_of_week': {'key': 'firstDayOfWeek', 'type': 'str'},
        'index': {'key': 'index', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "MicrosoftGraphRecurrencePatternType"]] = None,
        interval: Optional[int] = None,
        month: Optional[int] = None,
        day_of_month: Optional[int] = None,
        days_of_week: Optional[List[Union[str, "MicrosoftGraphDayOfWeek"]]] = None,
        first_day_of_week: Optional[Union[str, "MicrosoftGraphDayOfWeek"]] = None,
        index: Optional[Union[str, "MicrosoftGraphWeekIndex"]] = None,
        **kwargs
    ):
        super(MicrosoftGraphRecurrencePattern, self).__init__(**kwargs)
        self.type = type
        self.interval = interval
        self.month = month
        self.day_of_month = day_of_month
        self.days_of_week = days_of_week
        self.first_day_of_week = first_day_of_week
        self.index = index


class MicrosoftGraphRecurrenceRange(msrest.serialization.Model):
    """recurrenceRange.

    :param type: recurrenceRangeType. Possible values include: "endDate", "noEnd", "numbered".
    :type type: str or ~users_outlook_user.models.MicrosoftGraphRecurrenceRangeType
    :param start_date: The date to start applying the recurrence pattern. The first occurrence of
     the meeting may be this date or later, depending on the recurrence pattern of the event. Must
     be the same value as the start property of the recurring event. Required.
    :type start_date: ~datetime.date
    :param end_date: The date to stop applying the recurrence pattern. Depending on the recurrence
     pattern of the event, the last occurrence of the meeting may not be this date. Required if type
     is endDate.
    :type end_date: ~datetime.date
    :param recurrence_time_zone: Time zone for the startDate and endDate properties. Optional. If
     not specified, the time zone of the event is used.
    :type recurrence_time_zone: str
    :param number_of_occurrences: The number of times to repeat the event. Required and must be
     positive if type is numbered.
    :type number_of_occurrences: int
    """

    _validation = {
        'number_of_occurrences': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'start_date': {'key': 'startDate', 'type': 'date'},
        'end_date': {'key': 'endDate', 'type': 'date'},
        'recurrence_time_zone': {'key': 'recurrenceTimeZone', 'type': 'str'},
        'number_of_occurrences': {'key': 'numberOfOccurrences', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "MicrosoftGraphRecurrenceRangeType"]] = None,
        start_date: Optional[datetime.date] = None,
        end_date: Optional[datetime.date] = None,
        recurrence_time_zone: Optional[str] = None,
        number_of_occurrences: Optional[int] = None,
        **kwargs
    ):
        super(MicrosoftGraphRecurrenceRange, self).__init__(**kwargs)
        self.type = type
        self.start_date = start_date
        self.end_date = end_date
        self.recurrence_time_zone = recurrence_time_zone
        self.number_of_occurrences = number_of_occurrences


class MicrosoftGraphSingleValueLegacyExtendedProperty(MicrosoftGraphEntity):
    """singleValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param value: A property value.
    :type value: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftGraphSingleValueLegacyExtendedProperty, self).__init__(id=id, **kwargs)
        self.value = value


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~users_outlook_user.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        *,
        error: "OdataErrorMain",
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = error


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~users_outlook_user.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["OdataErrorDetail"]] = None,
        innererror: Optional[object] = None,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror
