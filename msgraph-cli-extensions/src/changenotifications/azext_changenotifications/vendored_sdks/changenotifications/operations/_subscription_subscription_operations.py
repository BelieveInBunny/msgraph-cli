# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class SubscriptionSubscriptionOperations(object):
    """SubscriptionSubscriptionOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~change_notifications.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_subscription(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Get5ItemsItem"]]]
        select=None,  # type: Optional[List[Union[str, "models.Get6ItemsItem"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfSubscription"]
        """Get entities from subscriptions.

        Get entities from subscriptions.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~change_notifications.models.Get5ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~change_notifications.models.Get6ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSubscription or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~change_notifications.models.CollectionOfSubscription]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSubscription"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_subscription.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSubscription', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_subscription.metadata = {'url': '/subscriptions'}  # type: ignore

    def create_subscription(
        self,
        id=None,  # type: Optional[str]
        application_id=None,  # type: Optional[str]
        change_type=None,  # type: Optional[str]
        client_state=None,  # type: Optional[str]
        creator_id=None,  # type: Optional[str]
        encryption_certificate=None,  # type: Optional[str]
        encryption_certificate_id=None,  # type: Optional[str]
        expiration_date_time=None,  # type: Optional[datetime.datetime]
        include_resource_data=None,  # type: Optional[bool]
        latest_supported_tls_version=None,  # type: Optional[str]
        lifecycle_notification_url=None,  # type: Optional[str]
        notification_url=None,  # type: Optional[str]
        resource=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSubscription"
        """Add new entity to subscriptions.

        Add new entity to subscriptions.

        :param id: Read-only.
        :type id: str
        :param application_id: Identifier of the application used to create the subscription. Read-
         only.
        :type application_id: str
        :param change_type: Required. Indicates the type of change in the subscribed resource that will
         raise a change notification. The supported values are: created, updated, deleted. Multiple
         values can be combined using a comma-separated list.Note: Drive root item and list change
         notifications support only the updated changeType. User and group change notifications support
         updated and deleted changeType.
        :type change_type: str
        :param client_state: Optional. Specifies the value of the clientState property sent by the
         service in each change notification. The maximum length is 128 characters. The client can check
         that the change notification came from the service by comparing the value of the clientState
         property sent with the subscription with the value of the clientState property received with
         each change notification.
        :type client_state: str
        :param creator_id: Identifier of the user or service principal that created the subscription.
         If the app used delegated permissions to create the subscription, this field contains the id of
         the signed-in user the app called on behalf of. If the app used application permissions, this
         field contains the id of the service principal corresponding to the app. Read-only.
        :type creator_id: str
        :param encryption_certificate: A base64-encoded representation of a certificate with a public
         key used to encrypt resource data in change notifications. Optional. Required when
         includeResourceData is true.
        :type encryption_certificate: str
        :param encryption_certificate_id: A custom app-provided identifier to help identify the
         certificate needed to decrypt resource data. Optional.
        :type encryption_certificate_id: str
        :param expiration_date_time: Required. Specifies the date and time when the webhook
         subscription expires. The time is in UTC, and can be an amount of time from subscription
         creation that varies for the resource subscribed to.  See the table below for maximum supported
         subscription length of time.
        :type expiration_date_time: ~datetime.datetime
        :param include_resource_data: When set to true, change notifications include resource data
         (such as content of a chat message). Optional.
        :type include_resource_data: bool
        :param latest_supported_tls_version: Specifies the latest version of Transport Layer Security
         (TLS) that the notification endpoint, specified by notificationUrl, supports. The possible
         values are: v1_0, v1_1, v1_2, v1_3. For subscribers whose notification endpoint supports a
         version lower than the currently recommended version (TLS 1.2), specifying this property by a
         set timeline allows them to temporarily use their deprecated version of TLS before completing
         their upgrade to TLS 1.2. For these subscribers, not setting this property per the timeline
         would result in subscription operations failing. For subscribers whose notification endpoint
         already supports TLS 1.2, setting this property is optional. In such cases, Microsoft Graph
         defaults the property to v1_2.
        :type latest_supported_tls_version: str
        :param lifecycle_notification_url: The URL of the endpoint that receives lifecycle
         notifications, including subscriptionRemoved and missed notifications. This URL must make use
         of the HTTPS protocol. Optional. Read more about how Outlook resources use lifecycle
         notifications.
        :type lifecycle_notification_url: str
        :param notification_url: Required. The URL of the endpoint that will receive the change
         notifications. This URL must make use of the HTTPS protocol.
        :type notification_url: str
        :param resource: Required. Specifies the resource that will be monitored for changes. Do not
         include the base URL (https://graph.microsoft.com/v1.0/). See the possible resource path values
         for each supported resource.
        :type resource: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSubscription, or the result of cls(response)
        :rtype: ~change_notifications.models.MicrosoftGraphSubscription
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSubscription"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSubscription(id=id, application_id=application_id, change_type=change_type, client_state=client_state, creator_id=creator_id, encryption_certificate=encryption_certificate, encryption_certificate_id=encryption_certificate_id, expiration_date_time=expiration_date_time, include_resource_data=include_resource_data, latest_supported_tls_version=latest_supported_tls_version, lifecycle_notification_url=lifecycle_notification_url, notification_url=notification_url, resource=resource)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_subscription.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSubscription')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSubscription', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_subscription.metadata = {'url': '/subscriptions'}  # type: ignore

    def get_subscription(
        self,
        subscription_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Get1ItemsItem"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSubscription"
        """Get entity from subscriptions by key.

        Get entity from subscriptions by key.

        :param subscription_id: key: id of subscription.
        :type subscription_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~change_notifications.models.Get1ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSubscription, or the result of cls(response)
        :rtype: ~change_notifications.models.MicrosoftGraphSubscription
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSubscription"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_subscription.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscription-id': self._serialize.url("subscription_id", subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSubscription', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_subscription.metadata = {'url': '/subscriptions/{subscription-id}'}  # type: ignore

    def update_subscription(
        self,
        subscription_id,  # type: str
        id=None,  # type: Optional[str]
        application_id=None,  # type: Optional[str]
        change_type=None,  # type: Optional[str]
        client_state=None,  # type: Optional[str]
        creator_id=None,  # type: Optional[str]
        encryption_certificate=None,  # type: Optional[str]
        encryption_certificate_id=None,  # type: Optional[str]
        expiration_date_time=None,  # type: Optional[datetime.datetime]
        include_resource_data=None,  # type: Optional[bool]
        latest_supported_tls_version=None,  # type: Optional[str]
        lifecycle_notification_url=None,  # type: Optional[str]
        notification_url=None,  # type: Optional[str]
        resource=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update entity in subscriptions.

        Update entity in subscriptions.

        :param subscription_id: key: id of subscription.
        :type subscription_id: str
        :param id: Read-only.
        :type id: str
        :param application_id: Identifier of the application used to create the subscription. Read-
         only.
        :type application_id: str
        :param change_type: Required. Indicates the type of change in the subscribed resource that will
         raise a change notification. The supported values are: created, updated, deleted. Multiple
         values can be combined using a comma-separated list.Note: Drive root item and list change
         notifications support only the updated changeType. User and group change notifications support
         updated and deleted changeType.
        :type change_type: str
        :param client_state: Optional. Specifies the value of the clientState property sent by the
         service in each change notification. The maximum length is 128 characters. The client can check
         that the change notification came from the service by comparing the value of the clientState
         property sent with the subscription with the value of the clientState property received with
         each change notification.
        :type client_state: str
        :param creator_id: Identifier of the user or service principal that created the subscription.
         If the app used delegated permissions to create the subscription, this field contains the id of
         the signed-in user the app called on behalf of. If the app used application permissions, this
         field contains the id of the service principal corresponding to the app. Read-only.
        :type creator_id: str
        :param encryption_certificate: A base64-encoded representation of a certificate with a public
         key used to encrypt resource data in change notifications. Optional. Required when
         includeResourceData is true.
        :type encryption_certificate: str
        :param encryption_certificate_id: A custom app-provided identifier to help identify the
         certificate needed to decrypt resource data. Optional.
        :type encryption_certificate_id: str
        :param expiration_date_time: Required. Specifies the date and time when the webhook
         subscription expires. The time is in UTC, and can be an amount of time from subscription
         creation that varies for the resource subscribed to.  See the table below for maximum supported
         subscription length of time.
        :type expiration_date_time: ~datetime.datetime
        :param include_resource_data: When set to true, change notifications include resource data
         (such as content of a chat message). Optional.
        :type include_resource_data: bool
        :param latest_supported_tls_version: Specifies the latest version of Transport Layer Security
         (TLS) that the notification endpoint, specified by notificationUrl, supports. The possible
         values are: v1_0, v1_1, v1_2, v1_3. For subscribers whose notification endpoint supports a
         version lower than the currently recommended version (TLS 1.2), specifying this property by a
         set timeline allows them to temporarily use their deprecated version of TLS before completing
         their upgrade to TLS 1.2. For these subscribers, not setting this property per the timeline
         would result in subscription operations failing. For subscribers whose notification endpoint
         already supports TLS 1.2, setting this property is optional. In such cases, Microsoft Graph
         defaults the property to v1_2.
        :type latest_supported_tls_version: str
        :param lifecycle_notification_url: The URL of the endpoint that receives lifecycle
         notifications, including subscriptionRemoved and missed notifications. This URL must make use
         of the HTTPS protocol. Optional. Read more about how Outlook resources use lifecycle
         notifications.
        :type lifecycle_notification_url: str
        :param notification_url: Required. The URL of the endpoint that will receive the change
         notifications. This URL must make use of the HTTPS protocol.
        :type notification_url: str
        :param resource: Required. Specifies the resource that will be monitored for changes. Do not
         include the base URL (https://graph.microsoft.com/v1.0/). See the possible resource path values
         for each supported resource.
        :type resource: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSubscription(id=id, application_id=application_id, change_type=change_type, client_state=client_state, creator_id=creator_id, encryption_certificate=encryption_certificate, encryption_certificate_id=encryption_certificate_id, expiration_date_time=expiration_date_time, include_resource_data=include_resource_data, latest_supported_tls_version=latest_supported_tls_version, lifecycle_notification_url=lifecycle_notification_url, notification_url=notification_url, resource=resource)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_subscription.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscription-id': self._serialize.url("subscription_id", subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSubscription')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_subscription.metadata = {'url': '/subscriptions/{subscription-id}'}  # type: ignore

    def delete_subscription(
        self,
        subscription_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete entity from subscriptions.

        Delete entity from subscriptions.

        :param subscription_id: key: id of subscription.
        :type subscription_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_subscription.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscription-id': self._serialize.url("subscription_id", subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_subscription.metadata = {'url': '/subscriptions/{subscription-id}'}  # type: ignore
