# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import get_enum_type
from azext_notification.action import (
    AddTargetPolicy,
    AddPayloadVisualContent
)


def load_arguments(self, _):

    with self.argument_context('notification user update') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('notification_id', help='key: notification-id of notification')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('target_host_name', help='')
        c.argument('expiration_date_time', help='')
        c.argument('display_time_to_live', help='')
        c.argument('priority', arg_type=get_enum_type(['None', 'High', 'Low']), help='priority')
        c.argument('group_name', help='')
        c.argument('target_policy', action=AddTargetPolicy, nargs='*', help='targetPolicyEndpoints')
        c.argument('payload_raw_content', help='')
        c.argument('payload_visual_content', action=AddPayloadVisualContent, nargs='*', help='visualProperties')

    with self.argument_context('notification user create-notification') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('target_host_name', help='')
        c.argument('expiration_date_time', help='')
        c.argument('display_time_to_live', help='')
        c.argument('priority', arg_type=get_enum_type(['None', 'High', 'Low']), help='priority')
        c.argument('group_name', help='')
        c.argument('target_policy', action=AddTargetPolicy, nargs='*', help='targetPolicyEndpoints')
        c.argument('payload_raw_content', help='')
        c.argument('payload_visual_content', action=AddPayloadVisualContent, nargs='*', help='visualProperties')

    with self.argument_context('notification user get-notification') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('notification_id', help='key: notification-id of notification')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('notification user list-notification') as c:
        c.argument('user_id', help='key: user-id of user')
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')
