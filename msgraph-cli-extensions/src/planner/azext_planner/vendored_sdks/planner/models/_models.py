# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CollectionOfPlannerBucket(msrest.serialization.Model):
    """Collection of plannerBucket.

    :param value:
    :type value: list[~users_planner.models.MicrosoftGraphPlannerBucket]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphPlannerBucket]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPlannerBucket, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPlannerDelta(msrest.serialization.Model):
    """Collection of plannerDelta.

    :param value:
    :type value: list[~users_planner.models.MicrosoftGraphEntity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphEntity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPlannerDelta, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPlannerPlan(msrest.serialization.Model):
    """Collection of plannerPlan.

    :param value:
    :type value: list[~users_planner.models.MicrosoftGraphPlannerPlan]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphPlannerPlan]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPlannerPlan, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPlannerPlan0(msrest.serialization.Model):
    """Collection of plannerPlan.

    :param value:
    :type value: list[~users_planner.models.MicrosoftGraphPlannerPlan]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphPlannerPlan]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPlannerPlan0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPlannerPlan1(msrest.serialization.Model):
    """Collection of plannerPlan.

    :param value:
    :type value: list[~users_planner.models.MicrosoftGraphPlannerPlan]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphPlannerPlan]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPlannerPlan1, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPlannerTask(msrest.serialization.Model):
    """Collection of plannerTask.

    :param value:
    :type value: list[~users_planner.models.MicrosoftGraphPlannerTask]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphPlannerTask]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPlannerTask, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPlannerTask0(msrest.serialization.Model):
    """Collection of plannerTask.

    :param value:
    :type value: list[~users_planner.models.MicrosoftGraphPlannerTask]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphPlannerTask]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPlannerTask0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfPlannerTask1(msrest.serialization.Model):
    """Collection of plannerTask.

    :param value:
    :type value: list[~users_planner.models.MicrosoftGraphPlannerTask]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphPlannerTask]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPlannerTask1, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class MicrosoftGraphIdentity(msrest.serialization.Model):
    """identity.

    :param id: Unique identifier for the identity.
    :type id: str
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphIdentity, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.display_name = kwargs.get('display_name', None)


class MicrosoftGraphIdentitySet(msrest.serialization.Model):
    """identitySet.

    :param application: identity.
    :type application: ~users_planner.models.MicrosoftGraphIdentity
    :param device: identity.
    :type device: ~users_planner.models.MicrosoftGraphIdentity
    :param user: identity.
    :type user: ~users_planner.models.MicrosoftGraphIdentity
    """

    _attribute_map = {
        'application': {'key': 'application', 'type': 'MicrosoftGraphIdentity'},
        'device': {'key': 'device', 'type': 'MicrosoftGraphIdentity'},
        'user': {'key': 'user', 'type': 'MicrosoftGraphIdentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphIdentitySet, self).__init__(**kwargs)
        self.application = kwargs.get('application', None)
        self.device = kwargs.get('device', None)
        self.user = kwargs.get('user', None)


class MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat(MicrosoftGraphEntity):
    """plannerAssignedToTaskBoardTaskFormat.

    :param id: Read-only.
    :type id: str
    :param unassigned_order_hint: Hint value used to order the task on the AssignedTo view of the
     Task Board when the task is not assigned to anyone, or if the orderHintsByAssignee dictionary
     does not provide an order hint for the user the task is assigned to. The format is defined as
     outlined here.
    :type unassigned_order_hint: str
    :param order_hints_by_assignee: Any object.
    :type order_hints_by_assignee: object
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'unassigned_order_hint': {'key': 'unassignedOrderHint', 'type': 'str'},
        'order_hints_by_assignee': {'key': 'orderHintsByAssignee', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat, self).__init__(**kwargs)
        self.unassigned_order_hint = kwargs.get('unassigned_order_hint', None)
        self.order_hints_by_assignee = kwargs.get('order_hints_by_assignee', None)


class MicrosoftGraphPlannerBucket(MicrosoftGraphEntity):
    """plannerBucket.

    :param id: Read-only.
    :type id: str
    :param name: Name of the bucket.
    :type name: str
    :param plan_id: Plan ID to which the bucket belongs.
    :type plan_id: str
    :param order_hint: Hint used to order items of this type in a list view. The format is defined
     as outlined here.
    :type order_hint: str
    :param tasks: Read-only. Nullable. The collection of tasks in the bucket.
    :type tasks: list[~users_planner.models.MicrosoftGraphPlannerTask]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'plan_id': {'key': 'planId', 'type': 'str'},
        'order_hint': {'key': 'orderHint', 'type': 'str'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphPlannerTask]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerBucket, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.plan_id = kwargs.get('plan_id', None)
        self.order_hint = kwargs.get('order_hint', None)
        self.tasks = kwargs.get('tasks', None)


class MicrosoftGraphPlannerBucketTaskBoardTaskFormat(MicrosoftGraphEntity):
    """plannerBucketTaskBoardTaskFormat.

    :param id: Read-only.
    :type id: str
    :param order_hint: Hint used to order tasks in the Bucket view of the Task Board. The format is
     defined as outlined here.
    :type order_hint: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'order_hint': {'key': 'orderHint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerBucketTaskBoardTaskFormat, self).__init__(**kwargs)
        self.order_hint = kwargs.get('order_hint', None)


class MicrosoftGraphPlannerCategoryDescriptions(msrest.serialization.Model):
    """plannerCategoryDescriptions.

    :param category1: The label associated with Category 1.
    :type category1: str
    :param category2: The label associated with Category 2.
    :type category2: str
    :param category3: The label associated with Category 3.
    :type category3: str
    :param category4: The label associated with Category 4.
    :type category4: str
    :param category5: The label associated with Category 5.
    :type category5: str
    :param category6: The label associated with Category 6.
    :type category6: str
    """

    _attribute_map = {
        'category1': {'key': 'category1', 'type': 'str'},
        'category2': {'key': 'category2', 'type': 'str'},
        'category3': {'key': 'category3', 'type': 'str'},
        'category4': {'key': 'category4', 'type': 'str'},
        'category5': {'key': 'category5', 'type': 'str'},
        'category6': {'key': 'category6', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerCategoryDescriptions, self).__init__(**kwargs)
        self.category1 = kwargs.get('category1', None)
        self.category2 = kwargs.get('category2', None)
        self.category3 = kwargs.get('category3', None)
        self.category4 = kwargs.get('category4', None)
        self.category5 = kwargs.get('category5', None)
        self.category6 = kwargs.get('category6', None)


class MicrosoftGraphPlannerDelta(MicrosoftGraphEntity):
    """plannerDelta.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerDelta, self).__init__(**kwargs)


class MicrosoftGraphPlannerPlan(MicrosoftGraphEntity):
    """plannerPlan.

    :param id: Read-only.
    :type id: str
    :param created_date_time: Read-only. Date and time at which the plan is created. The Timestamp
     type represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param owner: ID of the Group that owns the plan. A valid group must exist before this field
     can be set. After it is set, this property can’t be updated.
    :type owner: str
    :param title: Required. Title of the plan.
    :type title: str
    :param contexts: Any object.
    :type contexts: object
    :param tasks: Read-only. Nullable. Collection of tasks in the plan.
    :type tasks: list[~users_planner.models.MicrosoftGraphPlannerTask]
    :param buckets: Read-only. Nullable. Collection of buckets in the plan.
    :type buckets: list[~users_planner.models.MicrosoftGraphPlannerBucket]
    :param id_details_id: Read-only.
    :type id_details_id: str
    :param shared_with: Any object.
    :type shared_with: object
    :param category_descriptions: plannerCategoryDescriptions.
    :type category_descriptions: ~users_planner.models.MicrosoftGraphPlannerCategoryDescriptions
    :param context_details: Any object.
    :type context_details: object
    :param application: identity.
    :type application: ~users_planner.models.MicrosoftGraphIdentity
    :param device: identity.
    :type device: ~users_planner.models.MicrosoftGraphIdentity
    :param user: identity.
    :type user: ~users_planner.models.MicrosoftGraphIdentity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'owner': {'key': 'owner', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'contexts': {'key': 'contexts', 'type': 'object'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphPlannerTask]'},
        'buckets': {'key': 'buckets', 'type': '[MicrosoftGraphPlannerBucket]'},
        'id_details_id': {'key': 'details.id', 'type': 'str'},
        'shared_with': {'key': 'details.sharedWith', 'type': 'object'},
        'category_descriptions': {'key': 'details.categoryDescriptions', 'type': 'MicrosoftGraphPlannerCategoryDescriptions'},
        'context_details': {'key': 'details.contextDetails', 'type': 'object'},
        'application': {'key': 'createdBy.application', 'type': 'MicrosoftGraphIdentity'},
        'device': {'key': 'createdBy.device', 'type': 'MicrosoftGraphIdentity'},
        'user': {'key': 'createdBy.user', 'type': 'MicrosoftGraphIdentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerPlan, self).__init__(**kwargs)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.owner = kwargs.get('owner', None)
        self.title = kwargs.get('title', None)
        self.contexts = kwargs.get('contexts', None)
        self.tasks = kwargs.get('tasks', None)
        self.buckets = kwargs.get('buckets', None)
        self.id_details_id = kwargs.get('id_details_id', None)
        self.shared_with = kwargs.get('shared_with', None)
        self.category_descriptions = kwargs.get('category_descriptions', None)
        self.context_details = kwargs.get('context_details', None)
        self.application = kwargs.get('application', None)
        self.device = kwargs.get('device', None)
        self.user = kwargs.get('user', None)


class MicrosoftGraphPlannerPlanDetails(MicrosoftGraphEntity):
    """plannerPlanDetails.

    :param id: Read-only.
    :type id: str
    :param shared_with: Any object.
    :type shared_with: object
    :param category_descriptions: plannerCategoryDescriptions.
    :type category_descriptions: ~users_planner.models.MicrosoftGraphPlannerCategoryDescriptions
    :param context_details: Any object.
    :type context_details: object
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'shared_with': {'key': 'sharedWith', 'type': 'object'},
        'category_descriptions': {'key': 'categoryDescriptions', 'type': 'MicrosoftGraphPlannerCategoryDescriptions'},
        'context_details': {'key': 'contextDetails', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerPlanDetails, self).__init__(**kwargs)
        self.shared_with = kwargs.get('shared_with', None)
        self.category_descriptions = kwargs.get('category_descriptions', None)
        self.context_details = kwargs.get('context_details', None)


class MicrosoftGraphPlannerProgressTaskBoardTaskFormat(MicrosoftGraphEntity):
    """plannerProgressTaskBoardTaskFormat.

    :param id: Read-only.
    :type id: str
    :param order_hint: Hint value used to order the task on the Progress view of the Task Board.
     The format is defined as outlined here.
    :type order_hint: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'order_hint': {'key': 'orderHint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerProgressTaskBoardTaskFormat, self).__init__(**kwargs)
        self.order_hint = kwargs.get('order_hint', None)


class MicrosoftGraphPlannerTask(MicrosoftGraphEntity):
    """plannerTask.

    :param id: Read-only.
    :type id: str
    :param created_by: identitySet.
    :type created_by: ~users_planner.models.MicrosoftGraphIdentitySet
    :param plan_id: Plan ID to which the task belongs.
    :type plan_id: str
    :param bucket_id: Bucket ID to which the task belongs. The bucket needs to be in the plan that
     the task is in. It is 28 characters long and case-sensitive. Format validation is done on the
     service.
    :type bucket_id: str
    :param title: Title of the task.
    :type title: str
    :param order_hint: Hint used to order items of this type in a list view. The format is defined
     as outlined here.
    :type order_hint: str
    :param assignee_priority: Hint used to order items of this type in a list view. The format is
     defined as outlined here.
    :type assignee_priority: str
    :param percent_complete: Percentage of task completion. When set to 100, the task is considered
     completed.
    :type percent_complete: int
    :param priority:
    :type priority: int
    :param start_date_time: Date and time at which the task starts. The Timestamp type represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type start_date_time: ~datetime.datetime
    :param created_date_time: Read-only. Date and time at which the task is created. The Timestamp
     type represents date and time information using ISO 8601 format and is always in UTC time. For
     example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param due_date_time: Date and time at which the task is due. The Timestamp type represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
    :type due_date_time: ~datetime.datetime
    :param has_description: Read-only. Value is true if the details object of the task has a non-
     empty description and false otherwise.
    :type has_description: bool
    :param preview_type: plannerPreviewType. Possible values include: "automatic", "noPreview",
     "checklist", "description", "reference".
    :type preview_type: str or ~users_planner.models.MicrosoftGraphPlannerPreviewType
    :param completed_date_time: Read-only. Date and time at which the 'percentComplete' of the task
     is set to '100'. The Timestamp type represents date and time information using ISO 8601 format
     and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this:
     '2014-01-01T00:00:00Z'.
    :type completed_date_time: ~datetime.datetime
    :param completed_by: identitySet.
    :type completed_by: ~users_planner.models.MicrosoftGraphIdentitySet
    :param reference_count: Number of external references that exist on the task.
    :type reference_count: int
    :param checklist_item_count: Number of checklist items that are present on the task.
    :type checklist_item_count: int
    :param active_checklist_item_count: Number of checklist items with value set to false,
     representing incomplete items.
    :type active_checklist_item_count: int
    :param applied_categories: Any object.
    :type applied_categories: object
    :param assignments: Any object.
    :type assignments: object
    :param conversation_thread_id: Thread ID of the conversation on the task. This is the ID of the
     conversation thread object created in the group.
    :type conversation_thread_id: str
    :param details: plannerTaskDetails.
    :type details: ~users_planner.models.MicrosoftGraphPlannerTaskDetails
    :param assigned_to_task_board_format: plannerAssignedToTaskBoardTaskFormat.
    :type assigned_to_task_board_format:
     ~users_planner.models.MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat
    :param progress_task_board_format: plannerProgressTaskBoardTaskFormat.
    :type progress_task_board_format:
     ~users_planner.models.MicrosoftGraphPlannerProgressTaskBoardTaskFormat
    :param bucket_task_board_format: plannerBucketTaskBoardTaskFormat.
    :type bucket_task_board_format:
     ~users_planner.models.MicrosoftGraphPlannerBucketTaskBoardTaskFormat
    """

    _validation = {
        'percent_complete': {'maximum': 2147483647, 'minimum': -2147483648},
        'priority': {'maximum': 2147483647, 'minimum': -2147483648},
        'reference_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'checklist_item_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'active_checklist_item_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphIdentitySet'},
        'plan_id': {'key': 'planId', 'type': 'str'},
        'bucket_id': {'key': 'bucketId', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'order_hint': {'key': 'orderHint', 'type': 'str'},
        'assignee_priority': {'key': 'assigneePriority', 'type': 'str'},
        'percent_complete': {'key': 'percentComplete', 'type': 'int'},
        'priority': {'key': 'priority', 'type': 'int'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'due_date_time': {'key': 'dueDateTime', 'type': 'iso-8601'},
        'has_description': {'key': 'hasDescription', 'type': 'bool'},
        'preview_type': {'key': 'previewType', 'type': 'str'},
        'completed_date_time': {'key': 'completedDateTime', 'type': 'iso-8601'},
        'completed_by': {'key': 'completedBy', 'type': 'MicrosoftGraphIdentitySet'},
        'reference_count': {'key': 'referenceCount', 'type': 'int'},
        'checklist_item_count': {'key': 'checklistItemCount', 'type': 'int'},
        'active_checklist_item_count': {'key': 'activeChecklistItemCount', 'type': 'int'},
        'applied_categories': {'key': 'appliedCategories', 'type': 'object'},
        'assignments': {'key': 'assignments', 'type': 'object'},
        'conversation_thread_id': {'key': 'conversationThreadId', 'type': 'str'},
        'details': {'key': 'details', 'type': 'MicrosoftGraphPlannerTaskDetails'},
        'assigned_to_task_board_format': {'key': 'assignedToTaskBoardFormat', 'type': 'MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat'},
        'progress_task_board_format': {'key': 'progressTaskBoardFormat', 'type': 'MicrosoftGraphPlannerProgressTaskBoardTaskFormat'},
        'bucket_task_board_format': {'key': 'bucketTaskBoardFormat', 'type': 'MicrosoftGraphPlannerBucketTaskBoardTaskFormat'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerTask, self).__init__(**kwargs)
        self.created_by = kwargs.get('created_by', None)
        self.plan_id = kwargs.get('plan_id', None)
        self.bucket_id = kwargs.get('bucket_id', None)
        self.title = kwargs.get('title', None)
        self.order_hint = kwargs.get('order_hint', None)
        self.assignee_priority = kwargs.get('assignee_priority', None)
        self.percent_complete = kwargs.get('percent_complete', None)
        self.priority = kwargs.get('priority', None)
        self.start_date_time = kwargs.get('start_date_time', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.due_date_time = kwargs.get('due_date_time', None)
        self.has_description = kwargs.get('has_description', None)
        self.preview_type = kwargs.get('preview_type', None)
        self.completed_date_time = kwargs.get('completed_date_time', None)
        self.completed_by = kwargs.get('completed_by', None)
        self.reference_count = kwargs.get('reference_count', None)
        self.checklist_item_count = kwargs.get('checklist_item_count', None)
        self.active_checklist_item_count = kwargs.get('active_checklist_item_count', None)
        self.applied_categories = kwargs.get('applied_categories', None)
        self.assignments = kwargs.get('assignments', None)
        self.conversation_thread_id = kwargs.get('conversation_thread_id', None)
        self.details = kwargs.get('details', None)
        self.assigned_to_task_board_format = kwargs.get('assigned_to_task_board_format', None)
        self.progress_task_board_format = kwargs.get('progress_task_board_format', None)
        self.bucket_task_board_format = kwargs.get('bucket_task_board_format', None)


class MicrosoftGraphPlannerTaskDetails(MicrosoftGraphEntity):
    """plannerTaskDetails.

    :param id: Read-only.
    :type id: str
    :param description: Description of the task.
    :type description: str
    :param preview_type: plannerPreviewType. Possible values include: "automatic", "noPreview",
     "checklist", "description", "reference".
    :type preview_type: str or ~users_planner.models.MicrosoftGraphPlannerPreviewType
    :param references: Any object.
    :type references: object
    :param checklist: Any object.
    :type checklist: object
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'preview_type': {'key': 'previewType', 'type': 'str'},
        'references': {'key': 'references', 'type': 'object'},
        'checklist': {'key': 'checklist', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerTaskDetails, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.preview_type = kwargs.get('preview_type', None)
        self.references = kwargs.get('references', None)
        self.checklist = kwargs.get('checklist', None)


class MicrosoftGraphPlannerUser(MicrosoftGraphEntity):
    """plannerUser.

    :param id: Read-only.
    :type id: str
    :param favorite_plan_references: Any object.
    :type favorite_plan_references: object
    :param recent_plan_references: Any object.
    :type recent_plan_references: object
    :param tasks: Read-only. Nullable. Returns the plannerPlans shared with the user.
    :type tasks: list[~users_planner.models.MicrosoftGraphPlannerTask]
    :param plans: Read-only. Nullable. Returns the plannerTasks assigned to the user.
    :type plans: list[~users_planner.models.MicrosoftGraphPlannerPlan]
    :param favorite_plans:
    :type favorite_plans: list[~users_planner.models.MicrosoftGraphPlannerPlan]
    :param recent_plans:
    :type recent_plans: list[~users_planner.models.MicrosoftGraphPlannerPlan]
    :param all:
    :type all: list[~users_planner.models.MicrosoftGraphEntity]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'favorite_plan_references': {'key': 'favoritePlanReferences', 'type': 'object'},
        'recent_plan_references': {'key': 'recentPlanReferences', 'type': 'object'},
        'tasks': {'key': 'tasks', 'type': '[MicrosoftGraphPlannerTask]'},
        'plans': {'key': 'plans', 'type': '[MicrosoftGraphPlannerPlan]'},
        'favorite_plans': {'key': 'favoritePlans', 'type': '[MicrosoftGraphPlannerPlan]'},
        'recent_plans': {'key': 'recentPlans', 'type': '[MicrosoftGraphPlannerPlan]'},
        'all': {'key': 'all', 'type': '[MicrosoftGraphEntity]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPlannerUser, self).__init__(**kwargs)
        self.favorite_plan_references = kwargs.get('favorite_plan_references', None)
        self.recent_plan_references = kwargs.get('recent_plan_references', None)
        self.tasks = kwargs.get('tasks', None)
        self.plans = kwargs.get('plans', None)
        self.favorite_plans = kwargs.get('favorite_plans', None)
        self.recent_plans = kwargs.get('recent_plans', None)
        self.all = kwargs.get('all', None)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~users_planner.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = kwargs['error']


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~users_planner.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)
