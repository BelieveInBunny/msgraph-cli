# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from msgraph.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_planner.generated._client_factory import cf_user
    planner_user = CliCommandType(
        operations_tmpl='azext_planner.vendored_sdks.planner.operations._user_operations#UserOperations.{}',
        client_factory=cf_user)
    with self.command_group('planner user', planner_user, client_factory=cf_user, is_experimental=True) as g:
        g.custom_command('update', 'planner_user_update')
        g.custom_command('get-planner', 'planner_user_get_planner')

    from azext_planner.generated._client_factory import cf_user_planner
    planner_user_planner = CliCommandType(
        operations_tmpl='azext_planner.vendored_sdks.planner.operations._user_planner_operations#UserPlannerOperations.'
        '{}',
        client_factory=cf_user_planner)
    with self.command_group('planner user-planner', planner_user_planner, client_factory=cf_user_planner,
                            is_experimental=True) as g:
        g.custom_command('update', 'planner_user_planner_update')
        g.custom_command('create-all', 'planner_user_planner_create_all')
        g.custom_command('create-plan', 'planner_user_planner_create_plan')
        g.custom_command('create-task', 'planner_user_planner_create_task')
        g.custom_command('get-all', 'planner_user_planner_get_all')
        g.custom_command('get-favorite-plan', 'planner_user_planner_get_favorite_plan')
        g.custom_command('get-plan', 'planner_user_planner_get_plan')
        g.custom_command('get-recent-plan', 'planner_user_planner_get_recent_plan')
        g.custom_command('get-task', 'planner_user_planner_get_task')
        g.custom_command('list-all', 'planner_user_planner_list_all')
        g.custom_command('list-favorite-plan', 'planner_user_planner_list_favorite_plan')
        g.custom_command('list-plan', 'planner_user_planner_list_plan')
        g.custom_command('list-recent-plan', 'planner_user_planner_list_recent_plan')
        g.custom_command('list-task', 'planner_user_planner_list_task')

    from azext_planner.generated._client_factory import cf_user_planner_plan
    planner_user_planner_plan = CliCommandType(
        operations_tmpl='azext_planner.vendored_sdks.planner.operations._user_planner_plan_operations#UserPlannerPlanOp'
        'erations.{}',
        client_factory=cf_user_planner_plan)
    with self.command_group('planner user-planner-plan', planner_user_planner_plan,
                            client_factory=cf_user_planner_plan, is_experimental=True) as g:
        g.custom_command('update', 'planner_user_planner_plan_update')
        g.custom_command('create-bucket', 'planner_user_planner_plan_create_bucket')
        g.custom_command('create-task', 'planner_user_planner_plan_create_task')
        g.custom_command('get-bucket', 'planner_user_planner_plan_get_bucket')
        g.custom_command('get-detail', 'planner_user_planner_plan_get_detail')
        g.custom_command('get-task', 'planner_user_planner_plan_get_task')
        g.custom_command('list-bucket', 'planner_user_planner_plan_list_bucket')
        g.custom_command('list-task', 'planner_user_planner_plan_list_task')

    from azext_planner.generated._client_factory import cf_user_planner_plan_bucket
    planner_user_planner_plan_bucket = CliCommandType(
        operations_tmpl='azext_planner.vendored_sdks.planner.operations._user_planner_plan_bucket_operations#UserPlanne'
        'rPlanBucketOperations.{}',
        client_factory=cf_user_planner_plan_bucket)
    with self.command_group('planner user-planner-plan-bucket', planner_user_planner_plan_bucket,
                            client_factory=cf_user_planner_plan_bucket, is_experimental=True) as g:
        g.custom_command('update', 'planner_user_planner_plan_bucket_update')
        g.custom_command('create-task', 'planner_user_planner_plan_bucket_create_task')
        g.custom_command('get-task', 'planner_user_planner_plan_bucket_get_task')
        g.custom_command('list-task', 'planner_user_planner_plan_bucket_list_task')

    from azext_planner.generated._client_factory import cf_user_planner_plan_bucket_task
    planner_user_planner_plan_bucket_task = CliCommandType(
        operations_tmpl='azext_planner.vendored_sdks.planner.operations._user_planner_plan_bucket_task_operations#UserP'
        'lannerPlanBucketTaskOperations.{}',
        client_factory=cf_user_planner_plan_bucket_task)
    with self.command_group('planner user-planner-plan-bucket-task', planner_user_planner_plan_bucket_task,
                            client_factory=cf_user_planner_plan_bucket_task, is_experimental=True) as g:
        g.custom_command('update', 'planner_user_planner_plan_bucket_task_update')
        g.custom_command('get-assigned-to-task-board-format', 'planner_user_planner_plan_bucket_task_get_assigned_to_ta'
                         'sk_board_format')
        g.custom_command('get-bucket-task-board-format', 'planner_user_planner_plan_bucket_task_get_bucket_task_board_f'
                         'ormat')
        g.custom_command('get-detail', 'planner_user_planner_plan_bucket_task_get_detail')
        g.custom_command('get-progress-task-board-format', 'planner_user_planner_plan_bucket_task_get_progress_task_boa'
                         'rd_format')

    from azext_planner.generated._client_factory import cf_user_planner_plan_task
    planner_user_planner_plan_task = CliCommandType(
        operations_tmpl='azext_planner.vendored_sdks.planner.operations._user_planner_plan_task_operations#UserPlannerP'
        'lanTaskOperations.{}',
        client_factory=cf_user_planner_plan_task)
    with self.command_group('planner user-planner-plan-task', planner_user_planner_plan_task,
                            client_factory=cf_user_planner_plan_task, is_experimental=True) as g:
        g.custom_command('update', 'planner_user_planner_plan_task_update')
        g.custom_command('get-assigned-to-task-board-format', 'planner_user_planner_plan_task_get_assigned_to_task_boar'
                         'd_format')
        g.custom_command('get-bucket-task-board-format',
                         'planner_user_planner_plan_task_get_bucket_task_board_format')
        g.custom_command('get-detail', 'planner_user_planner_plan_task_get_detail')
        g.custom_command('get-progress-task-board-format', 'planner_user_planner_plan_task_get_progress_task_board_form'
                         'at')

    from azext_planner.generated._client_factory import cf_user_planner_task
    planner_user_planner_task = CliCommandType(
        operations_tmpl='azext_planner.vendored_sdks.planner.operations._user_planner_task_operations#UserPlannerTaskOp'
        'erations.{}',
        client_factory=cf_user_planner_task)
    with self.command_group('planner user-planner-task', planner_user_planner_task,
                            client_factory=cf_user_planner_task, is_experimental=True) as g:
        g.custom_command('update', 'planner_user_planner_task_update')
        g.custom_command('get-assigned-to-task-board-format', 'planner_user_planner_task_get_assigned_to_task_board_for'
                         'mat')
        g.custom_command('get-bucket-task-board-format', 'planner_user_planner_task_get_bucket_task_board_format')
        g.custom_command('get-detail', 'planner_user_planner_task_get_detail')
        g.custom_command('get-progress-task-board-format', 'planner_user_planner_task_get_progress_task_board_format')
