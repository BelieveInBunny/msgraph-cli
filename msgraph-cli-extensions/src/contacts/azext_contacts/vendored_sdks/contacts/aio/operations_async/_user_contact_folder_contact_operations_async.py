# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class UserContactFolderContactOperations:
    """UserContactFolderContactOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~users_contacts.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_extension(
        self,
        user_id: str,
        contact_folder_id: str,
        contact_id: str,
        orderby: Optional[List[Union[str, "models.Enum20"]]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfExtension"]:
        """Get extensions from users.

        Get extensions from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param contact_folder_id: key: contactFolder-id of contactFolder.
        :type contact_folder_id: str
        :param contact_id: key: contact-id of contact.
        :type contact_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~users_contacts.models.Enum20]
        :param select: Select properties to be returned.
        :type select: list[str]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfExtension or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~users_contacts.models.CollectionOfExtension]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfExtension"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_extension.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                    'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
                    'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfExtension', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_extension.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}/contacts/{contact-id}/extensions'}  # type: ignore

    async def create_extension(
        self,
        user_id: str,
        contact_folder_id: str,
        contact_id: str,
        id: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEntity":
        """Create new navigation property to extensions for users.

        Create new navigation property to extensions for users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param contact_folder_id: key: contactFolder-id of contactFolder.
        :type contact_folder_id: str
        :param contact_id: key: contact-id of contact.
        :type contact_id: str
        :param id: Read-only.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEntity, or the result of cls(response)
        :rtype: ~users_contacts.models.MicrosoftGraphEntity
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEntity"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEntity(id=id)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_extension.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
            'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEntity')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEntity', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_extension.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}/contacts/{contact-id}/extensions'}  # type: ignore

    async def get_extension(
        self,
        user_id: str,
        contact_folder_id: str,
        contact_id: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphEntity":
        """Get extensions from users.

        Get extensions from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param contact_folder_id: key: contactFolder-id of contactFolder.
        :type contact_folder_id: str
        :param contact_id: key: contact-id of contact.
        :type contact_id: str
        :param extension_id: key: extension-id of extension.
        :type extension_id: str
        :param select: Select properties to be returned.
        :type select: list[str]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphEntity, or the result of cls(response)
        :rtype: ~users_contacts.models.MicrosoftGraphEntity
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphEntity"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_extension.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
            'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
            'extension-id': self._serialize.url("extension_id", extension_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphEntity', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_extension.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}/contacts/{contact-id}/extensions/{extension-id}'}  # type: ignore

    async def update_extension(
        self,
        user_id: str,
        contact_folder_id: str,
        contact_id: str,
        extension_id: str,
        id: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property extensions in users.

        Update the navigation property extensions in users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param contact_folder_id: key: contactFolder-id of contactFolder.
        :type contact_folder_id: str
        :param contact_id: key: contact-id of contact.
        :type contact_id: str
        :param extension_id: key: extension-id of extension.
        :type extension_id: str
        :param id: Read-only.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphEntity(id=id)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_extension.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
            'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
            'extension-id': self._serialize.url("extension_id", extension_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphEntity')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_extension.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}/contacts/{contact-id}/extensions/{extension-id}'}  # type: ignore

    def list_multi_value_extended_property(
        self,
        user_id: str,
        contact_folder_id: str,
        contact_id: str,
        orderby: Optional[List[Union[str, "models.Enum21"]]] = None,
        select: Optional[List[Union[str, "models.Enum22"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfMultiValueLegacyExtendedProperty"]:
        """Get multiValueExtendedProperties from users.

        Get multiValueExtendedProperties from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param contact_folder_id: key: contactFolder-id of contactFolder.
        :type contact_folder_id: str
        :param contact_id: key: contact-id of contact.
        :type contact_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~users_contacts.models.Enum21]
        :param select: Select properties to be returned.
        :type select: list[str or ~users_contacts.models.Enum22]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfMultiValueLegacyExtendedProperty or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~users_contacts.models.CollectionOfMultiValueLegacyExtendedProperty]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfMultiValueLegacyExtendedProperty"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_multi_value_extended_property.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                    'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
                    'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfMultiValueLegacyExtendedProperty', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_multi_value_extended_property.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}/contacts/{contact-id}/multiValueExtendedProperties'}  # type: ignore

    async def create_multi_value_extended_property(
        self,
        user_id: str,
        contact_folder_id: str,
        contact_id: str,
        id: Optional[str] = None,
        value: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMultiValueLegacyExtendedProperty":
        """Create new navigation property to multiValueExtendedProperties for users.

        Create new navigation property to multiValueExtendedProperties for users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param contact_folder_id: key: contactFolder-id of contactFolder.
        :type contact_folder_id: str
        :param contact_id: key: contact-id of contact.
        :type contact_id: str
        :param id: Read-only.
        :type id: str
        :param value: A collection of property values.
        :type value: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMultiValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~users_contacts.models.MicrosoftGraphMultiValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMultiValueLegacyExtendedProperty(id=id, value=value)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_multi_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
            'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMultiValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMultiValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_multi_value_extended_property.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}/contacts/{contact-id}/multiValueExtendedProperties'}  # type: ignore

    async def get_multi_value_extended_property(
        self,
        user_id: str,
        contact_folder_id: str,
        contact_id: str,
        multi_value_legacy_extended_property_id: str,
        select: Optional[List[Union[str, "models.Enum23"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMultiValueLegacyExtendedProperty":
        """Get multiValueExtendedProperties from users.

        Get multiValueExtendedProperties from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param contact_folder_id: key: contactFolder-id of contactFolder.
        :type contact_folder_id: str
        :param contact_id: key: contact-id of contact.
        :type contact_id: str
        :param multi_value_legacy_extended_property_id: key: multiValueLegacyExtendedProperty-id of
         multiValueLegacyExtendedProperty.
        :type multi_value_legacy_extended_property_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~users_contacts.models.Enum23]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMultiValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~users_contacts.models.MicrosoftGraphMultiValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_multi_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
            'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
            'multiValueLegacyExtendedProperty-id': self._serialize.url("multi_value_legacy_extended_property_id", multi_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMultiValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_multi_value_extended_property.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}/contacts/{contact-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}'}  # type: ignore

    async def update_multi_value_extended_property(
        self,
        user_id: str,
        contact_folder_id: str,
        contact_id: str,
        multi_value_legacy_extended_property_id: str,
        id: Optional[str] = None,
        value: Optional[List[str]] = None,
        **kwargs
    ) -> None:
        """Update the navigation property multiValueExtendedProperties in users.

        Update the navigation property multiValueExtendedProperties in users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param contact_folder_id: key: contactFolder-id of contactFolder.
        :type contact_folder_id: str
        :param contact_id: key: contact-id of contact.
        :type contact_id: str
        :param multi_value_legacy_extended_property_id: key: multiValueLegacyExtendedProperty-id of
         multiValueLegacyExtendedProperty.
        :type multi_value_legacy_extended_property_id: str
        :param id: Read-only.
        :type id: str
        :param value: A collection of property values.
        :type value: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphMultiValueLegacyExtendedProperty(id=id, value=value)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_multi_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
            'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
            'multiValueLegacyExtendedProperty-id': self._serialize.url("multi_value_legacy_extended_property_id", multi_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphMultiValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_multi_value_extended_property.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}/contacts/{contact-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}'}  # type: ignore

    async def get_photo(
        self,
        user_id: str,
        contact_folder_id: str,
        contact_id: str,
        select: Optional[List[Union[str, "models.Enum24"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphProfilePhoto":
        """Get photo from users.

        Get photo from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param contact_folder_id: key: contactFolder-id of contactFolder.
        :type contact_folder_id: str
        :param contact_id: key: contact-id of contact.
        :type contact_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~users_contacts.models.Enum24]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphProfilePhoto, or the result of cls(response)
        :rtype: ~users_contacts.models.MicrosoftGraphProfilePhoto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphProfilePhoto"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_photo.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
            'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphProfilePhoto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_photo.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}/contacts/{contact-id}/photo'}  # type: ignore

    async def update_photo(
        self,
        user_id: str,
        contact_folder_id: str,
        contact_id: str,
        id: Optional[str] = None,
        height: Optional[int] = None,
        width: Optional[int] = None,
        **kwargs
    ) -> None:
        """Update the navigation property photo in users.

        Update the navigation property photo in users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param contact_folder_id: key: contactFolder-id of contactFolder.
        :type contact_folder_id: str
        :param contact_id: key: contact-id of contact.
        :type contact_id: str
        :param id: Read-only.
        :type id: str
        :param height: The height of the photo. Read-only.
        :type height: int
        :param width: The width of the photo. Read-only.
        :type width: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphProfilePhoto(id=id, height=height, width=width)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_photo.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
            'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphProfilePhoto')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_photo.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}/contacts/{contact-id}/photo'}  # type: ignore

    def list_single_value_extended_property(
        self,
        user_id: str,
        contact_folder_id: str,
        contact_id: str,
        orderby: Optional[List[Union[str, "models.Enum25"]]] = None,
        select: Optional[List[Union[str, "models.Enum26"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfSingleValueLegacyExtendedProperty"]:
        """Get singleValueExtendedProperties from users.

        Get singleValueExtendedProperties from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param contact_folder_id: key: contactFolder-id of contactFolder.
        :type contact_folder_id: str
        :param contact_id: key: contact-id of contact.
        :type contact_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~users_contacts.models.Enum25]
        :param select: Select properties to be returned.
        :type select: list[str or ~users_contacts.models.Enum26]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSingleValueLegacyExtendedProperty or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~users_contacts.models.CollectionOfSingleValueLegacyExtendedProperty]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSingleValueLegacyExtendedProperty"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_single_value_extended_property.metadata['url']  # type: ignore
                path_format_arguments = {
                    'user-id': self._serialize.url("user_id", user_id, 'str'),
                    'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
                    'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSingleValueLegacyExtendedProperty', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_single_value_extended_property.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}/contacts/{contact-id}/singleValueExtendedProperties'}  # type: ignore

    async def create_single_value_extended_property(
        self,
        user_id: str,
        contact_folder_id: str,
        contact_id: str,
        id: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSingleValueLegacyExtendedProperty":
        """Create new navigation property to singleValueExtendedProperties for users.

        Create new navigation property to singleValueExtendedProperties for users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param contact_folder_id: key: contactFolder-id of contactFolder.
        :type contact_folder_id: str
        :param contact_id: key: contact-id of contact.
        :type contact_id: str
        :param id: Read-only.
        :type id: str
        :param value: A property value.
        :type value: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSingleValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~users_contacts.models.MicrosoftGraphSingleValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSingleValueLegacyExtendedProperty(id=id, value=value)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_single_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
            'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSingleValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSingleValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_single_value_extended_property.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}/contacts/{contact-id}/singleValueExtendedProperties'}  # type: ignore

    async def get_single_value_extended_property(
        self,
        user_id: str,
        contact_folder_id: str,
        contact_id: str,
        single_value_legacy_extended_property_id: str,
        select: Optional[List[Union[str, "models.Enum27"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSingleValueLegacyExtendedProperty":
        """Get singleValueExtendedProperties from users.

        Get singleValueExtendedProperties from users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param contact_folder_id: key: contactFolder-id of contactFolder.
        :type contact_folder_id: str
        :param contact_id: key: contact-id of contact.
        :type contact_id: str
        :param single_value_legacy_extended_property_id: key: singleValueLegacyExtendedProperty-id of
         singleValueLegacyExtendedProperty.
        :type single_value_legacy_extended_property_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~users_contacts.models.Enum27]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSingleValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~users_contacts.models.MicrosoftGraphSingleValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.get_single_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
            'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
            'singleValueLegacyExtendedProperty-id': self._serialize.url("single_value_legacy_extended_property_id", single_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSingleValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_single_value_extended_property.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}/contacts/{contact-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}'}  # type: ignore

    async def update_single_value_extended_property(
        self,
        user_id: str,
        contact_folder_id: str,
        contact_id: str,
        single_value_legacy_extended_property_id: str,
        id: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property singleValueExtendedProperties in users.

        Update the navigation property singleValueExtendedProperties in users.

        :param user_id: key: user-id of user.
        :type user_id: str
        :param contact_folder_id: key: contactFolder-id of contactFolder.
        :type contact_folder_id: str
        :param contact_id: key: contact-id of contact.
        :type contact_id: str
        :param single_value_legacy_extended_property_id: key: singleValueLegacyExtendedProperty-id of
         singleValueLegacyExtendedProperty.
        :type single_value_legacy_extended_property_id: str
        :param id: Read-only.
        :type id: str
        :param value: A property value.
        :type value: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphSingleValueLegacyExtendedProperty(id=id, value=value)
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.update_single_value_extended_property.metadata['url']  # type: ignore
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str'),
            'contactFolder-id': self._serialize.url("contact_folder_id", contact_folder_id, 'str'),
            'contact-id': self._serialize.url("contact_id", contact_id, 'str'),
            'singleValueLegacyExtendedProperty-id': self._serialize.url("single_value_legacy_extended_property_id", single_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphSingleValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_single_value_extended_property.metadata = {'url': '/users/{user-id}/contactFolders/{contactFolder-id}/contacts/{contact-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}'}  # type: ignore
