# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration_async import GroupsPlannerConfiguration
from .operations_async import GroupOperations
from .operations_async import GroupPlannerOperations
from .operations_async import GroupPlannerPlanOperations
from .operations_async import GroupPlannerPlanBucketOperations
from .operations_async import GroupPlannerPlanBucketTaskOperations
from .operations_async import GroupPlannerPlanTaskOperations
from .. import models


class GroupsPlanner(object):
    """GroupsPlanner.

    :ivar group: GroupOperations operations
    :vartype group: groups_planner.aio.operations_async.GroupOperations
    :ivar group_planner: GroupPlannerOperations operations
    :vartype group_planner: groups_planner.aio.operations_async.GroupPlannerOperations
    :ivar group_planner_plan: GroupPlannerPlanOperations operations
    :vartype group_planner_plan: groups_planner.aio.operations_async.GroupPlannerPlanOperations
    :ivar group_planner_plan_bucket: GroupPlannerPlanBucketOperations operations
    :vartype group_planner_plan_bucket: groups_planner.aio.operations_async.GroupPlannerPlanBucketOperations
    :ivar group_planner_plan_bucket_task: GroupPlannerPlanBucketTaskOperations operations
    :vartype group_planner_plan_bucket_task: groups_planner.aio.operations_async.GroupPlannerPlanBucketTaskOperations
    :ivar group_planner_plan_task: GroupPlannerPlanTaskOperations operations
    :vartype group_planner_plan_task: groups_planner.aio.operations_async.GroupPlannerPlanTaskOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param top: Show only the first n items.
    :type top: int
    :param skip: Skip the first n items.
    :type skip: int
    :param search: Search items by search phrases.
    :type search: str
    :param filter: Filter items by property values.
    :type filter: str
    :param count: Include count of items.
    :type count: bool
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://graph.microsoft.com/beta'
        self._config = GroupsPlannerConfiguration(credential, top, skip, search, filter, count, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.group = GroupOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.group_planner = GroupPlannerOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.group_planner_plan = GroupPlannerPlanOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.group_planner_plan_bucket = GroupPlannerPlanBucketOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.group_planner_plan_bucket_task = GroupPlannerPlanBucketTaskOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.group_planner_plan_task = GroupPlannerPlanTaskOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "GroupsPlanner":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
