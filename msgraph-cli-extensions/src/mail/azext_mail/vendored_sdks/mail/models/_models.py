# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CollectionOfAttachment(msrest.serialization.Model):
    """Collection of attachment.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphAttachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAttachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfAttachment, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfAttachment0(msrest.serialization.Model):
    """Collection of attachment.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphAttachment]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphAttachment]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfAttachment0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfExtension(msrest.serialization.Model):
    """Collection of extension.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphEntity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphEntity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfExtension, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfExtension0(msrest.serialization.Model):
    """Collection of extension.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphEntity]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphEntity]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfExtension0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfInferenceClassificationOverride(msrest.serialization.Model):
    """Collection of inferenceClassificationOverride.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphInferenceClassificationOverride]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphInferenceClassificationOverride]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfInferenceClassificationOverride, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMailFolder(msrest.serialization.Model):
    """Collection of mailFolder.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphMailFolder]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMailFolder]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMailFolder, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMailFolder0(msrest.serialization.Model):
    """Collection of mailFolder.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphMailFolder]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMailFolder]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMailFolder0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMention(msrest.serialization.Model):
    """Collection of mention.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphMention]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMention]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMention, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMention0(msrest.serialization.Model):
    """Collection of mention.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphMention]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMention]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMention0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMessage(msrest.serialization.Model):
    """Collection of message.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphMessage]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMessage]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMessage, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMessage0(msrest.serialization.Model):
    """Collection of message.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphMessage]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMessage]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMessage0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMessageRule(msrest.serialization.Model):
    """Collection of messageRule.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphMessageRule]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMessageRule]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMessageRule, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMultiValueLegacyExtendedProperty(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMultiValueLegacyExtendedProperty, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMultiValueLegacyExtendedProperty0(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMultiValueLegacyExtendedProperty0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfMultiValueLegacyExtendedProperty1(msrest.serialization.Model):
    """Collection of multiValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfMultiValueLegacyExtendedProperty1, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSingleValueLegacyExtendedProperty(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSingleValueLegacyExtendedProperty, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSingleValueLegacyExtendedProperty0(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSingleValueLegacyExtendedProperty0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSingleValueLegacyExtendedProperty1(msrest.serialization.Model):
    """Collection of singleValueLegacyExtendedProperty.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSingleValueLegacyExtendedProperty1, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfUserConfiguration(msrest.serialization.Model):
    """Collection of userConfiguration.

    :param value:
    :type value: list[~users_mail.models.MicrosoftGraphUserConfiguration]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphUserConfiguration]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfUserConfiguration, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class MicrosoftGraphAttachment(MicrosoftGraphEntity):
    """attachment.

    :param id: Read-only.
    :type id: str
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param name: The attachment's file name.
    :type name: str
    :param content_type: The MIME type.
    :type content_type: str
    :param size: The length of the attachment in bytes.
    :type size: int
    :param is_inline: true if the attachment is an inline attachment; otherwise, false.
    :type is_inline: bool
    """

    _validation = {
        'size': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'size': {'key': 'size', 'type': 'int'},
        'is_inline': {'key': 'isInline', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAttachment, self).__init__(**kwargs)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.name = kwargs.get('name', None)
        self.content_type = kwargs.get('content_type', None)
        self.size = kwargs.get('size', None)
        self.is_inline = kwargs.get('is_inline', None)


class MicrosoftGraphDateTimeZone(msrest.serialization.Model):
    """dateTimeTimeZone.

    :param date_time: A single point of time in a combined date and time representation
     ({date}T{time}; for example, 2017-08-29T04:00:00.0000000).
    :type date_time: str
    :param time_zone: Represents a time zone, for example, 'Pacific Standard Time'. See below for
     more possible values.
    :type time_zone: str
    """

    _attribute_map = {
        'date_time': {'key': 'dateTime', 'type': 'str'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDateTimeZone, self).__init__(**kwargs)
        self.date_time = kwargs.get('date_time', None)
        self.time_zone = kwargs.get('time_zone', None)


class MicrosoftGraphEmailAddress(msrest.serialization.Model):
    """emailAddress.

    :param name: The display name of the person or entity.
    :type name: str
    :param address: The email address of the person or entity.
    :type address: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'address': {'key': 'address', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEmailAddress, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.address = kwargs.get('address', None)


class MicrosoftGraphExtension(MicrosoftGraphEntity):
    """extension.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphExtension, self).__init__(**kwargs)


class MicrosoftGraphFollowupFlag(msrest.serialization.Model):
    """followupFlag.

    :param completed_date_time: dateTimeTimeZone.
    :type completed_date_time: ~users_mail.models.MicrosoftGraphDateTimeZone
    :param due_date_time: dateTimeTimeZone.
    :type due_date_time: ~users_mail.models.MicrosoftGraphDateTimeZone
    :param start_date_time: dateTimeTimeZone.
    :type start_date_time: ~users_mail.models.MicrosoftGraphDateTimeZone
    :param flag_status: followupFlagStatus. Possible values include: "notFlagged", "complete",
     "flagged".
    :type flag_status: str or ~users_mail.models.MicrosoftGraphFollowupFlagStatus
    """

    _attribute_map = {
        'completed_date_time': {'key': 'completedDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'due_date_time': {'key': 'dueDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'start_date_time': {'key': 'startDateTime', 'type': 'MicrosoftGraphDateTimeZone'},
        'flag_status': {'key': 'flagStatus', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphFollowupFlag, self).__init__(**kwargs)
        self.completed_date_time = kwargs.get('completed_date_time', None)
        self.due_date_time = kwargs.get('due_date_time', None)
        self.start_date_time = kwargs.get('start_date_time', None)
        self.flag_status = kwargs.get('flag_status', None)


class MicrosoftGraphInferenceClassification(MicrosoftGraphEntity):
    """inferenceClassification.

    :param id: Read-only.
    :type id: str
    :param overrides: A set of overrides for a user to always classify messages from specific
     senders in certain ways: focused, or other. Read-only. Nullable.
    :type overrides: list[~users_mail.models.MicrosoftGraphInferenceClassificationOverride]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'overrides': {'key': 'overrides', 'type': '[MicrosoftGraphInferenceClassificationOverride]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphInferenceClassification, self).__init__(**kwargs)
        self.overrides = kwargs.get('overrides', None)


class MicrosoftGraphInferenceClassificationOverride(MicrosoftGraphEntity):
    """inferenceClassificationOverride.

    :param id: Read-only.
    :type id: str
    :param classify_as: inferenceClassificationType. Possible values include: "focused", "other".
    :type classify_as: str or ~users_mail.models.MicrosoftGraphInferenceClassificationType
    :param name: The display name of the person or entity.
    :type name: str
    :param address: The email address of the person or entity.
    :type address: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'classify_as': {'key': 'classifyAs', 'type': 'str'},
        'name': {'key': 'senderEmailAddress.name', 'type': 'str'},
        'address': {'key': 'senderEmailAddress.address', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphInferenceClassificationOverride, self).__init__(**kwargs)
        self.classify_as = kwargs.get('classify_as', None)
        self.name = kwargs.get('name', None)
        self.address = kwargs.get('address', None)


class MicrosoftGraphInternetMessageHeader(msrest.serialization.Model):
    """internetMessageHeader.

    :param name: Represents the key in a key-value pair.
    :type name: str
    :param value: The value in a key-value pair.
    :type value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphInternetMessageHeader, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class MicrosoftGraphItemBody(msrest.serialization.Model):
    """itemBody.

    :param content_type: bodyType. Possible values include: "text", "html".
    :type content_type: str or ~users_mail.models.MicrosoftGraphBodyType
    :param content: The content of the item.
    :type content: str
    """

    _attribute_map = {
        'content_type': {'key': 'contentType', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphItemBody, self).__init__(**kwargs)
        self.content_type = kwargs.get('content_type', None)
        self.content = kwargs.get('content', None)


class MicrosoftGraphMailFolder(MicrosoftGraphEntity):
    """mailFolder.

    :param id: Read-only.
    :type id: str
    :param display_name: The mailFolder's display name.
    :type display_name: str
    :param parent_folder_id: The unique identifier for the mailFolder's parent mailFolder.
    :type parent_folder_id: str
    :param child_folder_count: The number of immediate child mailFolders in the current mailFolder.
    :type child_folder_count: int
    :param unread_item_count: The number of items in the mailFolder marked as unread.
    :type unread_item_count: int
    :param total_item_count: The number of items in the mailFolder.
    :type total_item_count: int
    :param well_known_name:
    :type well_known_name: str
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the mailFolder. Read-only. Nullable.
    :type single_value_extended_properties:
     list[~users_mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the mailFolder. Read-only. Nullable.
    :type multi_value_extended_properties:
     list[~users_mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param messages: The collection of messages in the mailFolder.
    :type messages: list[~users_mail.models.MicrosoftGraphMessage]
    :param message_rules: The collection of rules that apply to the user's Inbox folder.
    :type message_rules: list[~users_mail.models.MicrosoftGraphMessageRule]
    :param child_folders: The collection of child folders in the mailFolder.
    :type child_folders: list[~users_mail.models.MicrosoftGraphMailFolder]
    :param user_configurations:
    :type user_configurations: list[~users_mail.models.MicrosoftGraphUserConfiguration]
    """

    _validation = {
        'child_folder_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'unread_item_count': {'maximum': 2147483647, 'minimum': -2147483648},
        'total_item_count': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'child_folder_count': {'key': 'childFolderCount', 'type': 'int'},
        'unread_item_count': {'key': 'unreadItemCount', 'type': 'int'},
        'total_item_count': {'key': 'totalItemCount', 'type': 'int'},
        'well_known_name': {'key': 'wellKnownName', 'type': 'str'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'messages': {'key': 'messages', 'type': '[MicrosoftGraphMessage]'},
        'message_rules': {'key': 'messageRules', 'type': '[MicrosoftGraphMessageRule]'},
        'child_folders': {'key': 'childFolders', 'type': '[MicrosoftGraphMailFolder]'},
        'user_configurations': {'key': 'userConfigurations', 'type': '[MicrosoftGraphUserConfiguration]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMailFolder, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.parent_folder_id = kwargs.get('parent_folder_id', None)
        self.child_folder_count = kwargs.get('child_folder_count', None)
        self.unread_item_count = kwargs.get('unread_item_count', None)
        self.total_item_count = kwargs.get('total_item_count', None)
        self.well_known_name = kwargs.get('well_known_name', None)
        self.single_value_extended_properties = kwargs.get('single_value_extended_properties', None)
        self.multi_value_extended_properties = kwargs.get('multi_value_extended_properties', None)
        self.messages = kwargs.get('messages', None)
        self.message_rules = kwargs.get('message_rules', None)
        self.child_folders = kwargs.get('child_folders', None)
        self.user_configurations = kwargs.get('user_configurations', None)


class MicrosoftGraphMention(MicrosoftGraphEntity):
    """mention.

    :param id: Read-only.
    :type id: str
    :param mentioned: emailAddress.
    :type mentioned: ~users_mail.models.MicrosoftGraphEmailAddress
    :param mention_text:
    :type mention_text: str
    :param client_reference:
    :type client_reference: str
    :param created_by: emailAddress.
    :type created_by: ~users_mail.models.MicrosoftGraphEmailAddress
    :param created_date_time:
    :type created_date_time: ~datetime.datetime
    :param server_created_date_time:
    :type server_created_date_time: ~datetime.datetime
    :param deep_link:
    :type deep_link: str
    :param application:
    :type application: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'mentioned': {'key': 'mentioned', 'type': 'MicrosoftGraphEmailAddress'},
        'mention_text': {'key': 'mentionText', 'type': 'str'},
        'client_reference': {'key': 'clientReference', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'MicrosoftGraphEmailAddress'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'server_created_date_time': {'key': 'serverCreatedDateTime', 'type': 'iso-8601'},
        'deep_link': {'key': 'deepLink', 'type': 'str'},
        'application': {'key': 'application', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMention, self).__init__(**kwargs)
        self.mentioned = kwargs.get('mentioned', None)
        self.mention_text = kwargs.get('mention_text', None)
        self.client_reference = kwargs.get('client_reference', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.server_created_date_time = kwargs.get('server_created_date_time', None)
        self.deep_link = kwargs.get('deep_link', None)
        self.application = kwargs.get('application', None)


class MicrosoftGraphMentionsPreview(msrest.serialization.Model):
    """mentionsPreview.

    :param is_mentioned:
    :type is_mentioned: bool
    """

    _attribute_map = {
        'is_mentioned': {'key': 'isMentioned', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMentionsPreview, self).__init__(**kwargs)
        self.is_mentioned = kwargs.get('is_mentioned', None)


class MicrosoftGraphOutlookItem(MicrosoftGraphEntity):
    """outlookItem.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOutlookItem, self).__init__(**kwargs)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.change_key = kwargs.get('change_key', None)
        self.categories = kwargs.get('categories', None)


class MicrosoftGraphMessage(MicrosoftGraphOutlookItem):
    """message.

    :param id: Read-only.
    :type id: str
    :param created_date_time: The Timestamp type represents date and time information using ISO
     8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: The Timestamp type represents date and time information using
     ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look
     like this: '2014-01-01T00:00:00Z'.
    :type last_modified_date_time: ~datetime.datetime
    :param change_key: Identifies the version of the item. Every time the item is changed,
     changeKey changes as well. This allows Exchange to apply changes to the correct version of the
     object. Read-only.
    :type change_key: str
    :param categories: The categories associated with the item.
    :type categories: list[str]
    :param received_date_time: The date and time the message was received.
    :type received_date_time: ~datetime.datetime
    :param sent_date_time: The date and time the message was sent.
    :type sent_date_time: ~datetime.datetime
    :param has_attachments: Indicates whether the message has attachments. This property doesn't
     include inline attachments, so if a message contains only inline attachments, this property is
     false. To verify the existence of inline attachments, parse the body property to look for a src
     attribute, such as :code:`<IMG src='cid:image001.jpg@01D26CD8.6C05F070'>`.
    :type has_attachments: bool
    :param internet_message_id: The message ID in the format specified by RFC2822.
    :type internet_message_id: str
    :param internet_message_headers: A collection of message headers defined by RFC5322. The set
     includes message headers indicating the network path taken by a message from the sender to the
     recipient. It can also contain custom message headers that hold app data for the message.
     Returned only on applying a $select query option. Read-only.
    :type internet_message_headers: list[~users_mail.models.MicrosoftGraphInternetMessageHeader]
    :param subject: The subject of the message.
    :type subject: str
    :param body: itemBody.
    :type body: ~users_mail.models.MicrosoftGraphItemBody
    :param body_preview: The first 255 characters of the message body. It is in text format.
    :type body_preview: str
    :param importance: importance. Possible values include: "low", "normal", "high".
    :type importance: str or ~users_mail.models.MicrosoftGraphImportance
    :param parent_folder_id: The unique identifier for the message's parent mailFolder.
    :type parent_folder_id: str
    :param sender: recipient.
    :type sender: ~users_mail.models.MicrosoftGraphRecipient
    :param from_property: recipient.
    :type from_property: ~users_mail.models.MicrosoftGraphRecipient
    :param to_recipients: The To: recipients for the message.
    :type to_recipients: list[~users_mail.models.MicrosoftGraphRecipient]
    :param cc_recipients: The Cc: recipients for the message.
    :type cc_recipients: list[~users_mail.models.MicrosoftGraphRecipient]
    :param bcc_recipients: The Bcc: recipients for the message.
    :type bcc_recipients: list[~users_mail.models.MicrosoftGraphRecipient]
    :param reply_to: The email addresses to use when replying.
    :type reply_to: list[~users_mail.models.MicrosoftGraphRecipient]
    :param conversation_id: The ID of the conversation the email belongs to.
    :type conversation_id: str
    :param conversation_index: Indicates the position of the message within the conversation.
    :type conversation_index: bytes
    :param unique_body: itemBody.
    :type unique_body: ~users_mail.models.MicrosoftGraphItemBody
    :param is_delivery_receipt_requested: Indicates whether a read receipt is requested for the
     message.
    :type is_delivery_receipt_requested: bool
    :param is_read_receipt_requested: Indicates whether a read receipt is requested for the
     message.
    :type is_read_receipt_requested: bool
    :param is_read: Indicates whether the message has been read.
    :type is_read: bool
    :param is_draft: Indicates whether the message is a draft. A message is a draft if it hasn't
     been sent yet.
    :type is_draft: bool
    :param web_link: The URL to open the message in Outlook Web App.You can append an ispopout
     argument to the end of the URL to change how the message is displayed. If ispopout is not
     present or if it is set to 1, then the message is shown in a popout window. If ispopout is set
     to 0, then the browser will show the message in the Outlook Web App review pane.The message
     will open in the browser if you are logged in to your mailbox via Outlook Web App. You will be
     prompted to login if you are not already logged in with the browser.This URL can be accessed
     from within an iFrame.
    :type web_link: str
    :param mentions_preview: mentionsPreview.
    :type mentions_preview: ~users_mail.models.MicrosoftGraphMentionsPreview
    :param inference_classification: inferenceClassificationType. Possible values include:
     "focused", "other".
    :type inference_classification: str or
     ~users_mail.models.MicrosoftGraphInferenceClassificationType
    :param unsubscribe_data:
    :type unsubscribe_data: list[str]
    :param unsubscribe_enabled:
    :type unsubscribe_enabled: bool
    :param flag: followupFlag.
    :type flag: ~users_mail.models.MicrosoftGraphFollowupFlag
    :param single_value_extended_properties: The collection of single-value extended properties
     defined for the message. Nullable.
    :type single_value_extended_properties:
     list[~users_mail.models.MicrosoftGraphSingleValueLegacyExtendedProperty]
    :param multi_value_extended_properties: The collection of multi-value extended properties
     defined for the message. Nullable.
    :type multi_value_extended_properties:
     list[~users_mail.models.MicrosoftGraphMultiValueLegacyExtendedProperty]
    :param attachments: The fileAttachment and itemAttachment attachments for the message.
    :type attachments: list[~users_mail.models.MicrosoftGraphAttachment]
    :param extensions: The collection of open extensions defined for the message. Nullable.
    :type extensions: list[~users_mail.models.MicrosoftGraphEntity]
    :param mentions:
    :type mentions: list[~users_mail.models.MicrosoftGraphMention]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'change_key': {'key': 'changeKey', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'received_date_time': {'key': 'receivedDateTime', 'type': 'iso-8601'},
        'sent_date_time': {'key': 'sentDateTime', 'type': 'iso-8601'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'internet_message_id': {'key': 'internetMessageId', 'type': 'str'},
        'internet_message_headers': {'key': 'internetMessageHeaders', 'type': '[MicrosoftGraphInternetMessageHeader]'},
        'subject': {'key': 'subject', 'type': 'str'},
        'body': {'key': 'body', 'type': 'MicrosoftGraphItemBody'},
        'body_preview': {'key': 'bodyPreview', 'type': 'str'},
        'importance': {'key': 'importance', 'type': 'str'},
        'parent_folder_id': {'key': 'parentFolderId', 'type': 'str'},
        'sender': {'key': 'sender', 'type': 'MicrosoftGraphRecipient'},
        'from_property': {'key': 'from', 'type': 'MicrosoftGraphRecipient'},
        'to_recipients': {'key': 'toRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'cc_recipients': {'key': 'ccRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'bcc_recipients': {'key': 'bccRecipients', 'type': '[MicrosoftGraphRecipient]'},
        'reply_to': {'key': 'replyTo', 'type': '[MicrosoftGraphRecipient]'},
        'conversation_id': {'key': 'conversationId', 'type': 'str'},
        'conversation_index': {'key': 'conversationIndex', 'type': 'base64'},
        'unique_body': {'key': 'uniqueBody', 'type': 'MicrosoftGraphItemBody'},
        'is_delivery_receipt_requested': {'key': 'isDeliveryReceiptRequested', 'type': 'bool'},
        'is_read_receipt_requested': {'key': 'isReadReceiptRequested', 'type': 'bool'},
        'is_read': {'key': 'isRead', 'type': 'bool'},
        'is_draft': {'key': 'isDraft', 'type': 'bool'},
        'web_link': {'key': 'webLink', 'type': 'str'},
        'mentions_preview': {'key': 'mentionsPreview', 'type': 'MicrosoftGraphMentionsPreview'},
        'inference_classification': {'key': 'inferenceClassification', 'type': 'str'},
        'unsubscribe_data': {'key': 'unsubscribeData', 'type': '[str]'},
        'unsubscribe_enabled': {'key': 'unsubscribeEnabled', 'type': 'bool'},
        'flag': {'key': 'flag', 'type': 'MicrosoftGraphFollowupFlag'},
        'single_value_extended_properties': {'key': 'singleValueExtendedProperties', 'type': '[MicrosoftGraphSingleValueLegacyExtendedProperty]'},
        'multi_value_extended_properties': {'key': 'multiValueExtendedProperties', 'type': '[MicrosoftGraphMultiValueLegacyExtendedProperty]'},
        'attachments': {'key': 'attachments', 'type': '[MicrosoftGraphAttachment]'},
        'extensions': {'key': 'extensions', 'type': '[MicrosoftGraphEntity]'},
        'mentions': {'key': 'mentions', 'type': '[MicrosoftGraphMention]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMessage, self).__init__(**kwargs)
        self.received_date_time = kwargs.get('received_date_time', None)
        self.sent_date_time = kwargs.get('sent_date_time', None)
        self.has_attachments = kwargs.get('has_attachments', None)
        self.internet_message_id = kwargs.get('internet_message_id', None)
        self.internet_message_headers = kwargs.get('internet_message_headers', None)
        self.subject = kwargs.get('subject', None)
        self.body = kwargs.get('body', None)
        self.body_preview = kwargs.get('body_preview', None)
        self.importance = kwargs.get('importance', None)
        self.parent_folder_id = kwargs.get('parent_folder_id', None)
        self.sender = kwargs.get('sender', None)
        self.from_property = kwargs.get('from_property', None)
        self.to_recipients = kwargs.get('to_recipients', None)
        self.cc_recipients = kwargs.get('cc_recipients', None)
        self.bcc_recipients = kwargs.get('bcc_recipients', None)
        self.reply_to = kwargs.get('reply_to', None)
        self.conversation_id = kwargs.get('conversation_id', None)
        self.conversation_index = kwargs.get('conversation_index', None)
        self.unique_body = kwargs.get('unique_body', None)
        self.is_delivery_receipt_requested = kwargs.get('is_delivery_receipt_requested', None)
        self.is_read_receipt_requested = kwargs.get('is_read_receipt_requested', None)
        self.is_read = kwargs.get('is_read', None)
        self.is_draft = kwargs.get('is_draft', None)
        self.web_link = kwargs.get('web_link', None)
        self.mentions_preview = kwargs.get('mentions_preview', None)
        self.inference_classification = kwargs.get('inference_classification', None)
        self.unsubscribe_data = kwargs.get('unsubscribe_data', None)
        self.unsubscribe_enabled = kwargs.get('unsubscribe_enabled', None)
        self.flag = kwargs.get('flag', None)
        self.single_value_extended_properties = kwargs.get('single_value_extended_properties', None)
        self.multi_value_extended_properties = kwargs.get('multi_value_extended_properties', None)
        self.attachments = kwargs.get('attachments', None)
        self.extensions = kwargs.get('extensions', None)
        self.mentions = kwargs.get('mentions', None)


class MicrosoftGraphMessageRule(MicrosoftGraphEntity):
    """messageRule.

    :param id: Read-only.
    :type id: str
    :param display_name: The display name of the rule.
    :type display_name: str
    :param sequence: Indicates the order in which the rule is executed, among other rules.
    :type sequence: int
    :param conditions: messageRulePredicates.
    :type conditions: ~users_mail.models.MicrosoftGraphMessageRulePredicates
    :param actions: messageRuleActions.
    :type actions: ~users_mail.models.MicrosoftGraphMessageRuleActions
    :param exceptions: messageRulePredicates.
    :type exceptions: ~users_mail.models.MicrosoftGraphMessageRulePredicates
    :param is_enabled: Indicates whether the rule is enabled to be applied to messages.
    :type is_enabled: bool
    :param has_error: Indicates whether the rule is in an error condition. Read-only.
    :type has_error: bool
    :param is_read_only: Indicates if the rule is read-only and cannot be modified or deleted by
     the rules REST API.
    :type is_read_only: bool
    """

    _validation = {
        'sequence': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'sequence': {'key': 'sequence', 'type': 'int'},
        'conditions': {'key': 'conditions', 'type': 'MicrosoftGraphMessageRulePredicates'},
        'actions': {'key': 'actions', 'type': 'MicrosoftGraphMessageRuleActions'},
        'exceptions': {'key': 'exceptions', 'type': 'MicrosoftGraphMessageRulePredicates'},
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'has_error': {'key': 'hasError', 'type': 'bool'},
        'is_read_only': {'key': 'isReadOnly', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMessageRule, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.sequence = kwargs.get('sequence', None)
        self.conditions = kwargs.get('conditions', None)
        self.actions = kwargs.get('actions', None)
        self.exceptions = kwargs.get('exceptions', None)
        self.is_enabled = kwargs.get('is_enabled', None)
        self.has_error = kwargs.get('has_error', None)
        self.is_read_only = kwargs.get('is_read_only', None)


class MicrosoftGraphMessageRuleActions(msrest.serialization.Model):
    """messageRuleActions.

    :param move_to_folder: The ID of the folder that a message will be moved to.
    :type move_to_folder: str
    :param copy_to_folder: The ID of a folder that a message is to be copied to.
    :type copy_to_folder: str
    :param delete: Indicates whether a message should be moved to the Deleted Items folder.
    :type delete: bool
    :param permanent_delete: Indicates whether a message should be permanently deleted and not
     saved to the Deleted Items folder.
    :type permanent_delete: bool
    :param mark_as_read: Indicates whether a message should be marked as read.
    :type mark_as_read: bool
    :param mark_importance: importance. Possible values include: "low", "normal", "high".
    :type mark_importance: str or ~users_mail.models.MicrosoftGraphImportance
    :param forward_to: The email addresses of the recipients to which a message should be
     forwarded.
    :type forward_to: list[~users_mail.models.MicrosoftGraphRecipient]
    :param forward_as_attachment_to: The email addresses of the recipients to which a message
     should be forwarded as an attachment.
    :type forward_as_attachment_to: list[~users_mail.models.MicrosoftGraphRecipient]
    :param redirect_to: The email addresses to which a message should be redirected.
    :type redirect_to: list[~users_mail.models.MicrosoftGraphRecipient]
    :param assign_categories: A list of categories to be assigned to a message.
    :type assign_categories: list[str]
    :param stop_processing_rules: Indicates whether subsequent rules should be evaluated.
    :type stop_processing_rules: bool
    """

    _attribute_map = {
        'move_to_folder': {'key': 'moveToFolder', 'type': 'str'},
        'copy_to_folder': {'key': 'copyToFolder', 'type': 'str'},
        'delete': {'key': 'delete', 'type': 'bool'},
        'permanent_delete': {'key': 'permanentDelete', 'type': 'bool'},
        'mark_as_read': {'key': 'markAsRead', 'type': 'bool'},
        'mark_importance': {'key': 'markImportance', 'type': 'str'},
        'forward_to': {'key': 'forwardTo', 'type': '[MicrosoftGraphRecipient]'},
        'forward_as_attachment_to': {'key': 'forwardAsAttachmentTo', 'type': '[MicrosoftGraphRecipient]'},
        'redirect_to': {'key': 'redirectTo', 'type': '[MicrosoftGraphRecipient]'},
        'assign_categories': {'key': 'assignCategories', 'type': '[str]'},
        'stop_processing_rules': {'key': 'stopProcessingRules', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMessageRuleActions, self).__init__(**kwargs)
        self.move_to_folder = kwargs.get('move_to_folder', None)
        self.copy_to_folder = kwargs.get('copy_to_folder', None)
        self.delete = kwargs.get('delete', None)
        self.permanent_delete = kwargs.get('permanent_delete', None)
        self.mark_as_read = kwargs.get('mark_as_read', None)
        self.mark_importance = kwargs.get('mark_importance', None)
        self.forward_to = kwargs.get('forward_to', None)
        self.forward_as_attachment_to = kwargs.get('forward_as_attachment_to', None)
        self.redirect_to = kwargs.get('redirect_to', None)
        self.assign_categories = kwargs.get('assign_categories', None)
        self.stop_processing_rules = kwargs.get('stop_processing_rules', None)


class MicrosoftGraphMessageRulePredicates(msrest.serialization.Model):
    """messageRulePredicates.

    :param categories: Represents the categories that an incoming message should be labeled with in
     order for the condition or exception to apply.
    :type categories: list[str]
    :param subject_contains: Represents the strings that appear in the subject of an incoming
     message in order for the condition or exception to apply.
    :type subject_contains: list[str]
    :param body_contains: Represents the strings that should appear in the body of an incoming
     message in order for the condition or exception to apply.
    :type body_contains: list[str]
    :param body_or_subject_contains: Represents the strings that should appear in the body or
     subject of an incoming message in order for the condition or exception to apply.
    :type body_or_subject_contains: list[str]
    :param sender_contains: Represents the strings that appear in the from property of an incoming
     message in order for the condition or exception to apply.
    :type sender_contains: list[str]
    :param recipient_contains: Represents the strings that appear in either the toRecipients or
     ccRecipients properties of an incoming message in order for the condition or exception to
     apply.
    :type recipient_contains: list[str]
    :param header_contains: Represents the strings that appear in the headers of an incoming
     message in order for the condition or exception to apply.
    :type header_contains: list[str]
    :param message_action_flag: messageActionFlag. Possible values include: "any", "call",
     "doNotForward", "followUp", "fyi", "forward", "noResponseNecessary", "read", "reply",
     "replyToAll", "review".
    :type message_action_flag: str or ~users_mail.models.MicrosoftGraphMessageActionFlag
    :param importance: importance. Possible values include: "low", "normal", "high".
    :type importance: str or ~users_mail.models.MicrosoftGraphImportance
    :param sensitivity: sensitivity. Possible values include: "normal", "personal", "private",
     "confidential".
    :type sensitivity: str or ~users_mail.models.MicrosoftGraphSensitivity
    :param from_addresses: Represents the specific sender email addresses of an incoming message in
     order for the condition or exception to apply.
    :type from_addresses: list[~users_mail.models.MicrosoftGraphRecipient]
    :param sent_to_addresses: Represents the email addresses that an incoming message must have
     been sent to in order for the condition or exception to apply.
    :type sent_to_addresses: list[~users_mail.models.MicrosoftGraphRecipient]
    :param sent_to_me: Indicates whether the owner of the mailbox must be in the toRecipients
     property of an incoming message in order for the condition or exception to apply.
    :type sent_to_me: bool
    :param sent_only_to_me: Indicates whether the owner of the mailbox must be the only recipient
     in an incoming message in order for the condition or exception to apply.
    :type sent_only_to_me: bool
    :param sent_cc_me: Indicates whether the owner of the mailbox must be in the ccRecipients
     property of an incoming message in order for the condition or exception to apply.
    :type sent_cc_me: bool
    :param sent_to_or_cc_me: Indicates whether the owner of the mailbox must be in either a
     toRecipients or ccRecipients property of an incoming message in order for the condition or
     exception to apply.
    :type sent_to_or_cc_me: bool
    :param not_sent_to_me: Indicates whether the owner of the mailbox must not be a recipient of an
     incoming message in order for the condition or exception to apply.
    :type not_sent_to_me: bool
    :param has_attachments: Indicates whether an incoming message must have attachments in order
     for the condition or exception to apply.
    :type has_attachments: bool
    :param is_approval_request: Indicates whether an incoming message must be an approval request
     in order for the condition or exception to apply.
    :type is_approval_request: bool
    :param is_automatic_forward: Indicates whether an incoming message must be automatically
     forwarded in order for the condition or exception to apply.
    :type is_automatic_forward: bool
    :param is_automatic_reply: Indicates whether an incoming message must be an auto reply in order
     for the condition or exception to apply.
    :type is_automatic_reply: bool
    :param is_encrypted: Indicates whether an incoming message must be encrypted in order for the
     condition or exception to apply.
    :type is_encrypted: bool
    :param is_meeting_request: Indicates whether an incoming message must be a meeting request in
     order for the condition or exception to apply.
    :type is_meeting_request: bool
    :param is_meeting_response: Indicates whether an incoming message must be a meeting response in
     order for the condition or exception to apply.
    :type is_meeting_response: bool
    :param is_non_delivery_report: Indicates whether an incoming message must be a non-delivery
     report in order for the condition or exception to apply.
    :type is_non_delivery_report: bool
    :param is_permission_controlled: Indicates whether an incoming message must be permission
     controlled (RMS-protected) in order for the condition or exception to apply.
    :type is_permission_controlled: bool
    :param is_read_receipt: Indicates whether an incoming message must be a read receipt in order
     for the condition or exception to apply.
    :type is_read_receipt: bool
    :param is_signed: Indicates whether an incoming message must be S/MIME-signed in order for the
     condition or exception to apply.
    :type is_signed: bool
    :param is_voicemail: Indicates whether an incoming message must be a voice mail in order for
     the condition or exception to apply.
    :type is_voicemail: bool
    :param within_size_range: sizeRange.
    :type within_size_range: ~users_mail.models.MicrosoftGraphSizeRange
    """

    _attribute_map = {
        'categories': {'key': 'categories', 'type': '[str]'},
        'subject_contains': {'key': 'subjectContains', 'type': '[str]'},
        'body_contains': {'key': 'bodyContains', 'type': '[str]'},
        'body_or_subject_contains': {'key': 'bodyOrSubjectContains', 'type': '[str]'},
        'sender_contains': {'key': 'senderContains', 'type': '[str]'},
        'recipient_contains': {'key': 'recipientContains', 'type': '[str]'},
        'header_contains': {'key': 'headerContains', 'type': '[str]'},
        'message_action_flag': {'key': 'messageActionFlag', 'type': 'str'},
        'importance': {'key': 'importance', 'type': 'str'},
        'sensitivity': {'key': 'sensitivity', 'type': 'str'},
        'from_addresses': {'key': 'fromAddresses', 'type': '[MicrosoftGraphRecipient]'},
        'sent_to_addresses': {'key': 'sentToAddresses', 'type': '[MicrosoftGraphRecipient]'},
        'sent_to_me': {'key': 'sentToMe', 'type': 'bool'},
        'sent_only_to_me': {'key': 'sentOnlyToMe', 'type': 'bool'},
        'sent_cc_me': {'key': 'sentCcMe', 'type': 'bool'},
        'sent_to_or_cc_me': {'key': 'sentToOrCcMe', 'type': 'bool'},
        'not_sent_to_me': {'key': 'notSentToMe', 'type': 'bool'},
        'has_attachments': {'key': 'hasAttachments', 'type': 'bool'},
        'is_approval_request': {'key': 'isApprovalRequest', 'type': 'bool'},
        'is_automatic_forward': {'key': 'isAutomaticForward', 'type': 'bool'},
        'is_automatic_reply': {'key': 'isAutomaticReply', 'type': 'bool'},
        'is_encrypted': {'key': 'isEncrypted', 'type': 'bool'},
        'is_meeting_request': {'key': 'isMeetingRequest', 'type': 'bool'},
        'is_meeting_response': {'key': 'isMeetingResponse', 'type': 'bool'},
        'is_non_delivery_report': {'key': 'isNonDeliveryReport', 'type': 'bool'},
        'is_permission_controlled': {'key': 'isPermissionControlled', 'type': 'bool'},
        'is_read_receipt': {'key': 'isReadReceipt', 'type': 'bool'},
        'is_signed': {'key': 'isSigned', 'type': 'bool'},
        'is_voicemail': {'key': 'isVoicemail', 'type': 'bool'},
        'within_size_range': {'key': 'withinSizeRange', 'type': 'MicrosoftGraphSizeRange'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMessageRulePredicates, self).__init__(**kwargs)
        self.categories = kwargs.get('categories', None)
        self.subject_contains = kwargs.get('subject_contains', None)
        self.body_contains = kwargs.get('body_contains', None)
        self.body_or_subject_contains = kwargs.get('body_or_subject_contains', None)
        self.sender_contains = kwargs.get('sender_contains', None)
        self.recipient_contains = kwargs.get('recipient_contains', None)
        self.header_contains = kwargs.get('header_contains', None)
        self.message_action_flag = kwargs.get('message_action_flag', None)
        self.importance = kwargs.get('importance', None)
        self.sensitivity = kwargs.get('sensitivity', None)
        self.from_addresses = kwargs.get('from_addresses', None)
        self.sent_to_addresses = kwargs.get('sent_to_addresses', None)
        self.sent_to_me = kwargs.get('sent_to_me', None)
        self.sent_only_to_me = kwargs.get('sent_only_to_me', None)
        self.sent_cc_me = kwargs.get('sent_cc_me', None)
        self.sent_to_or_cc_me = kwargs.get('sent_to_or_cc_me', None)
        self.not_sent_to_me = kwargs.get('not_sent_to_me', None)
        self.has_attachments = kwargs.get('has_attachments', None)
        self.is_approval_request = kwargs.get('is_approval_request', None)
        self.is_automatic_forward = kwargs.get('is_automatic_forward', None)
        self.is_automatic_reply = kwargs.get('is_automatic_reply', None)
        self.is_encrypted = kwargs.get('is_encrypted', None)
        self.is_meeting_request = kwargs.get('is_meeting_request', None)
        self.is_meeting_response = kwargs.get('is_meeting_response', None)
        self.is_non_delivery_report = kwargs.get('is_non_delivery_report', None)
        self.is_permission_controlled = kwargs.get('is_permission_controlled', None)
        self.is_read_receipt = kwargs.get('is_read_receipt', None)
        self.is_signed = kwargs.get('is_signed', None)
        self.is_voicemail = kwargs.get('is_voicemail', None)
        self.within_size_range = kwargs.get('within_size_range', None)


class MicrosoftGraphMultiValueLegacyExtendedProperty(MicrosoftGraphEntity):
    """multiValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param value: A collection of property values.
    :type value: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'value': {'key': 'value', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMultiValueLegacyExtendedProperty, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class MicrosoftGraphRecipient(msrest.serialization.Model):
    """recipient.

    :param email_address: emailAddress.
    :type email_address: ~users_mail.models.MicrosoftGraphEmailAddress
    """

    _attribute_map = {
        'email_address': {'key': 'emailAddress', 'type': 'MicrosoftGraphEmailAddress'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphRecipient, self).__init__(**kwargs)
        self.email_address = kwargs.get('email_address', None)


class MicrosoftGraphSingleValueLegacyExtendedProperty(MicrosoftGraphEntity):
    """singleValueLegacyExtendedProperty.

    :param id: Read-only.
    :type id: str
    :param value: A property value.
    :type value: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSingleValueLegacyExtendedProperty, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class MicrosoftGraphSizeRange(msrest.serialization.Model):
    """sizeRange.

    :param minimum_size: The minimum size (in kilobytes) that an incoming message must have in
     order for a condition or exception to apply.
    :type minimum_size: int
    :param maximum_size: The maximum size (in kilobytes) that an incoming message must have in
     order for a condition or exception to apply.
    :type maximum_size: int
    """

    _validation = {
        'minimum_size': {'maximum': 2147483647, 'minimum': -2147483648},
        'maximum_size': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'minimum_size': {'key': 'minimumSize', 'type': 'int'},
        'maximum_size': {'key': 'maximumSize', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSizeRange, self).__init__(**kwargs)
        self.minimum_size = kwargs.get('minimum_size', None)
        self.maximum_size = kwargs.get('maximum_size', None)


class MicrosoftGraphUserConfiguration(MicrosoftGraphEntity):
    """userConfiguration.

    :param id: Read-only.
    :type id: str
    :param binary_data:
    :type binary_data: bytes
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'binary_data': {'key': 'binaryData', 'type': 'base64'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUserConfiguration, self).__init__(**kwargs)
        self.binary_data = kwargs.get('binary_data', None)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~users_mail.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = kwargs['error']


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~users_mail.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)
