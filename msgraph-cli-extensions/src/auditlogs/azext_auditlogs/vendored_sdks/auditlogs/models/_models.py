# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CollectionOfDirectoryAudit(msrest.serialization.Model):
    """Collection of directoryAudit.

    :param value:
    :type value: list[~identity_audit_logs.models.MicrosoftGraphDirectoryAudit]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphDirectoryAudit]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfDirectoryAudit, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfProvisioningObjectSummary(msrest.serialization.Model):
    """Collection of provisioningObjectSummary.

    :param value:
    :type value: list[~identity_audit_logs.models.MicrosoftGraphProvisioningObjectSummary]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphProvisioningObjectSummary]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfProvisioningObjectSummary, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfProvisioningObjectSummary0(msrest.serialization.Model):
    """Collection of provisioningObjectSummary.

    :param value:
    :type value: list[~identity_audit_logs.models.MicrosoftGraphProvisioningObjectSummary]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphProvisioningObjectSummary]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfProvisioningObjectSummary0, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfRestrictedSignIn(msrest.serialization.Model):
    """Collection of restrictedSignIn.

    :param value:
    :type value: list[~identity_audit_logs.models.MicrosoftGraphRestrictedSignIn]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphRestrictedSignIn]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfRestrictedSignIn, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSignIn(msrest.serialization.Model):
    """Collection of signIn.

    :param value:
    :type value: list[~identity_audit_logs.models.MicrosoftGraphSignIn]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MicrosoftGraphSignIn]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSignIn, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class MicrosoftGraphAppIdentity(msrest.serialization.Model):
    """appIdentity.

    :param app_id: Refers to the Unique GUID representing Application Id in the Azure Active
     Directory.
    :type app_id: str
    :param display_name: Refers to the Application Name displayed in the Azure Portal.
    :type display_name: str
    :param service_principal_id: Refers to the Unique GUID indicating Service Principal Id in Azure
     Active Directory for the corresponding App.
    :type service_principal_id: str
    :param service_principal_name: Refers to the Service Principal Name is the Application name in
     the tenant.
    :type service_principal_name: str
    """

    _attribute_map = {
        'app_id': {'key': 'appId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'service_principal_id': {'key': 'servicePrincipalId', 'type': 'str'},
        'service_principal_name': {'key': 'servicePrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAppIdentity, self).__init__(**kwargs)
        self.app_id = kwargs.get('app_id', None)
        self.display_name = kwargs.get('display_name', None)
        self.service_principal_id = kwargs.get('service_principal_id', None)
        self.service_principal_name = kwargs.get('service_principal_name', None)


class MicrosoftGraphAppliedConditionalAccessPolicy(msrest.serialization.Model):
    """appliedConditionalAccessPolicy.

    :param id: Unique GUID of the conditional access polic.y.
    :type id: str
    :param display_name: Refers to the Name of the conditional access policy (example: 'Require MFA
     for Salesforce').
    :type display_name: str
    :param enforced_grant_controls: Refers to the grant controls enforced by the conditional access
     policy (example: 'Require multi-factor authentication').
    :type enforced_grant_controls: list[str]
    :param enforced_session_controls: Refers to the session controls enforced by the conditional
     access policy (example: 'Require app enforced controls').
    :type enforced_session_controls: list[str]
    :param conditions_satisfied: conditionalAccessConditions. Possible values include: "none",
     "application", "users", "devicePlatform", "location", "clientType", "signInRisk", "userRisk",
     "time", "deviceState", "client".
    :type conditions_satisfied: str or
     ~identity_audit_logs.models.MicrosoftGraphConditionalAccessConditions
    :param conditions_not_satisfied: conditionalAccessConditions. Possible values include: "none",
     "application", "users", "devicePlatform", "location", "clientType", "signInRisk", "userRisk",
     "time", "deviceState", "client".
    :type conditions_not_satisfied: str or
     ~identity_audit_logs.models.MicrosoftGraphConditionalAccessConditions
    :param result: appliedConditionalAccessPolicyResult. Possible values include: "success",
     "failure", "notApplied", "notEnabled", "unknown", "unknownFutureValue", "reportOnlySuccess",
     "reportOnlyFailure", "reportOnlyNotApplied", "reportOnlyInterrupted".
    :type result: str or
     ~identity_audit_logs.models.MicrosoftGraphAppliedConditionalAccessPolicyResult
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'enforced_grant_controls': {'key': 'enforcedGrantControls', 'type': '[str]'},
        'enforced_session_controls': {'key': 'enforcedSessionControls', 'type': '[str]'},
        'conditions_satisfied': {'key': 'conditionsSatisfied', 'type': 'str'},
        'conditions_not_satisfied': {'key': 'conditionsNotSatisfied', 'type': 'str'},
        'result': {'key': 'result', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAppliedConditionalAccessPolicy, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.display_name = kwargs.get('display_name', None)
        self.enforced_grant_controls = kwargs.get('enforced_grant_controls', None)
        self.enforced_session_controls = kwargs.get('enforced_session_controls', None)
        self.conditions_satisfied = kwargs.get('conditions_satisfied', None)
        self.conditions_not_satisfied = kwargs.get('conditions_not_satisfied', None)
        self.result = kwargs.get('result', None)


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class MicrosoftGraphAuditLogRoot(MicrosoftGraphEntity):
    """auditLogRoot.

    :param id: Read-only.
    :type id: str
    :param sign_ins: Read-only. Nullable.
    :type sign_ins: list[~identity_audit_logs.models.MicrosoftGraphSignIn]
    :param directory_audits: Read-only. Nullable.
    :type directory_audits: list[~identity_audit_logs.models.MicrosoftGraphDirectoryAudit]
    :param restricted_sign_ins:
    :type restricted_sign_ins: list[~identity_audit_logs.models.MicrosoftGraphRestrictedSignIn]
    :param directory_provisioning:
    :type directory_provisioning:
     list[~identity_audit_logs.models.MicrosoftGraphProvisioningObjectSummary]
    :param provisioning:
    :type provisioning: list[~identity_audit_logs.models.MicrosoftGraphProvisioningObjectSummary]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'sign_ins': {'key': 'signIns', 'type': '[MicrosoftGraphSignIn]'},
        'directory_audits': {'key': 'directoryAudits', 'type': '[MicrosoftGraphDirectoryAudit]'},
        'restricted_sign_ins': {'key': 'restrictedSignIns', 'type': '[MicrosoftGraphRestrictedSignIn]'},
        'directory_provisioning': {'key': 'directoryProvisioning', 'type': '[MicrosoftGraphProvisioningObjectSummary]'},
        'provisioning': {'key': 'provisioning', 'type': '[MicrosoftGraphProvisioningObjectSummary]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAuditLogRoot, self).__init__(**kwargs)
        self.sign_ins = kwargs.get('sign_ins', None)
        self.directory_audits = kwargs.get('directory_audits', None)
        self.restricted_sign_ins = kwargs.get('restricted_sign_ins', None)
        self.directory_provisioning = kwargs.get('directory_provisioning', None)
        self.provisioning = kwargs.get('provisioning', None)


class MicrosoftGraphAuthenticationDetail(msrest.serialization.Model):
    """authenticationDetail.

    :param authentication_step_date_time:
    :type authentication_step_date_time: ~datetime.datetime
    :param authentication_method:
    :type authentication_method: str
    :param authentication_method_detail:
    :type authentication_method_detail: str
    :param succeeded:
    :type succeeded: bool
    :param authentication_step_result_detail:
    :type authentication_step_result_detail: str
    :param authentication_step_requirement:
    :type authentication_step_requirement: str
    """

    _attribute_map = {
        'authentication_step_date_time': {'key': 'authenticationStepDateTime', 'type': 'iso-8601'},
        'authentication_method': {'key': 'authenticationMethod', 'type': 'str'},
        'authentication_method_detail': {'key': 'authenticationMethodDetail', 'type': 'str'},
        'succeeded': {'key': 'succeeded', 'type': 'bool'},
        'authentication_step_result_detail': {'key': 'authenticationStepResultDetail', 'type': 'str'},
        'authentication_step_requirement': {'key': 'authenticationStepRequirement', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAuthenticationDetail, self).__init__(**kwargs)
        self.authentication_step_date_time = kwargs.get('authentication_step_date_time', None)
        self.authentication_method = kwargs.get('authentication_method', None)
        self.authentication_method_detail = kwargs.get('authentication_method_detail', None)
        self.succeeded = kwargs.get('succeeded', None)
        self.authentication_step_result_detail = kwargs.get('authentication_step_result_detail', None)
        self.authentication_step_requirement = kwargs.get('authentication_step_requirement', None)


class MicrosoftGraphAuthenticationRequirementPolicy(msrest.serialization.Model):
    """authenticationRequirementPolicy.

    :param requirement_provider: requirementProvider. Possible values include: "MFA", "CA",
     "unknownFutureValue".
    :type requirement_provider: str or
     ~identity_audit_logs.models.MicrosoftGraphRequirementProvider
    :param detail:
    :type detail: str
    """

    _attribute_map = {
        'requirement_provider': {'key': 'requirementProvider', 'type': 'str'},
        'detail': {'key': 'detail', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphAuthenticationRequirementPolicy, self).__init__(**kwargs)
        self.requirement_provider = kwargs.get('requirement_provider', None)
        self.detail = kwargs.get('detail', None)


class MicrosoftGraphDeviceDetail(msrest.serialization.Model):
    """deviceDetail.

    :param device_id: Refers to the UniqueID of the device used for signing in.
    :type device_id: str
    :param display_name: Refers to the name of the device used for signing in.
    :type display_name: str
    :param operating_system: Indicates the operating system name and version used for signing in.
    :type operating_system: str
    :param browser: Indicates the browser information of the used for signing in.
    :type browser: str
    :param browser_id:
    :type browser_id: str
    :param is_compliant: Indicates whether the device is compliant.
    :type is_compliant: bool
    :param is_managed: Indicates whether the device is managed.
    :type is_managed: bool
    :param trust_type: Provides information about whether the signed-in device is Workplace Joined,
     AzureAD Joined, Domain Joined.
    :type trust_type: str
    """

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'operating_system': {'key': 'operatingSystem', 'type': 'str'},
        'browser': {'key': 'browser', 'type': 'str'},
        'browser_id': {'key': 'browserId', 'type': 'str'},
        'is_compliant': {'key': 'isCompliant', 'type': 'bool'},
        'is_managed': {'key': 'isManaged', 'type': 'bool'},
        'trust_type': {'key': 'trustType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDeviceDetail, self).__init__(**kwargs)
        self.device_id = kwargs.get('device_id', None)
        self.display_name = kwargs.get('display_name', None)
        self.operating_system = kwargs.get('operating_system', None)
        self.browser = kwargs.get('browser', None)
        self.browser_id = kwargs.get('browser_id', None)
        self.is_compliant = kwargs.get('is_compliant', None)
        self.is_managed = kwargs.get('is_managed', None)
        self.trust_type = kwargs.get('trust_type', None)


class MicrosoftGraphDirectoryAudit(MicrosoftGraphEntity):
    """directoryAudit.

    :param id: Read-only.
    :type id: str
    :param category: Indicates which resource category that's targeted by the activity. (For
     example: User Management, Group Management etc..).
    :type category: str
    :param correlation_id: Indicates a unique ID that helps correlate activities that span across
     various services. Can be used to trace logs across services.
    :type correlation_id: str
    :param result: operationResult. Possible values include: "success", "failure", "timeout",
     "unknownFutureValue".
    :type result: str or ~identity_audit_logs.models.MicrosoftGraphOperationResult
    :param result_reason: Describes cause of 'failure' or 'timeout' results.
    :type result_reason: str
    :param activity_display_name: Indicates the activity name or the operation name (examples:
     'Create User' and 'Add member to group'). For full list, see Azure AD activity list.
    :type activity_display_name: str
    :param activity_date_time: Indicates the date and time the activity was performed. The
     Timestamp type is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like
     this: '2014-01-01T00:00:00Z'.
    :type activity_date_time: ~datetime.datetime
    :param logged_by_service: Indicates information on which service initiated the activity (For
     example: Self-service Password Management, Core Directory, B2C, Invited Users, Microsoft
     Identity Manager, Privileged Identity Management.
    :type logged_by_service: str
    :param operation_type:
    :type operation_type: str
    :param target_resources: Indicates information on which resource was changed due to the
     activity. Target Resource Type can be User, Device, Directory, App, Role, Group, Policy or
     Other.
    :type target_resources: list[~identity_audit_logs.models.MicrosoftGraphTargetResource]
    :param additional_details: Indicates additional details on the activity.
    :type additional_details: list[~identity_audit_logs.models.MicrosoftGraphKeyValue]
    :param user: userIdentity.
    :type user: ~identity_audit_logs.models.MicrosoftGraphUserIdentity
    :param app: appIdentity.
    :type app: ~identity_audit_logs.models.MicrosoftGraphAppIdentity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'category': {'key': 'category', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'result': {'key': 'result', 'type': 'str'},
        'result_reason': {'key': 'resultReason', 'type': 'str'},
        'activity_display_name': {'key': 'activityDisplayName', 'type': 'str'},
        'activity_date_time': {'key': 'activityDateTime', 'type': 'iso-8601'},
        'logged_by_service': {'key': 'loggedByService', 'type': 'str'},
        'operation_type': {'key': 'operationType', 'type': 'str'},
        'target_resources': {'key': 'targetResources', 'type': '[MicrosoftGraphTargetResource]'},
        'additional_details': {'key': 'additionalDetails', 'type': '[MicrosoftGraphKeyValue]'},
        'user': {'key': 'initiatedBy.user', 'type': 'MicrosoftGraphUserIdentity'},
        'app': {'key': 'initiatedBy.app', 'type': 'MicrosoftGraphAppIdentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphDirectoryAudit, self).__init__(**kwargs)
        self.category = kwargs.get('category', None)
        self.correlation_id = kwargs.get('correlation_id', None)
        self.result = kwargs.get('result', None)
        self.result_reason = kwargs.get('result_reason', None)
        self.activity_display_name = kwargs.get('activity_display_name', None)
        self.activity_date_time = kwargs.get('activity_date_time', None)
        self.logged_by_service = kwargs.get('logged_by_service', None)
        self.operation_type = kwargs.get('operation_type', None)
        self.target_resources = kwargs.get('target_resources', None)
        self.additional_details = kwargs.get('additional_details', None)
        self.user = kwargs.get('user', None)
        self.app = kwargs.get('app', None)


class MicrosoftGraphGeoCoordinates(msrest.serialization.Model):
    """geoCoordinates.

    :param altitude: Optional. The altitude (height), in feet,  above sea level for the item. Read-
     only.
    :type altitude: float
    :param latitude: Optional. The latitude, in decimal, for the item. Read-only.
    :type latitude: float
    :param longitude: Optional. The longitude, in decimal, for the item. Read-only.
    :type longitude: float
    """

    _attribute_map = {
        'altitude': {'key': 'altitude', 'type': 'float'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphGeoCoordinates, self).__init__(**kwargs)
        self.altitude = kwargs.get('altitude', None)
        self.latitude = kwargs.get('latitude', None)
        self.longitude = kwargs.get('longitude', None)


class MicrosoftGraphIdentity(msrest.serialization.Model):
    """identity.

    :param id: Unique identifier for the identity.
    :type id: str
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphIdentity, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.display_name = kwargs.get('display_name', None)


class MicrosoftGraphInitiator(msrest.serialization.Model):
    """initiator.

    :param id:
    :type id: str
    :param display_name:
    :type display_name: str
    :param initiator_type: initiatorType. Possible values include: "user", "app", "system",
     "unknownFutureValue".
    :type initiator_type: str or ~identity_audit_logs.models.MicrosoftGraphInitiatorType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'initiator_type': {'key': 'initiatorType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphInitiator, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.display_name = kwargs.get('display_name', None)
        self.initiator_type = kwargs.get('initiator_type', None)


class MicrosoftGraphKeyValue(msrest.serialization.Model):
    """keyValue.

    :param key: Key for the key-value pair.
    :type key: str
    :param value: Value for the key-value pair.
    :type value: str
    """

    _attribute_map = {
        'key': {'key': 'key', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphKeyValue, self).__init__(**kwargs)
        self.key = kwargs.get('key', None)
        self.value = kwargs.get('value', None)


class MicrosoftGraphMfaDetail(msrest.serialization.Model):
    """mfaDetail.

    :param auth_method:
    :type auth_method: str
    :param auth_detail:
    :type auth_detail: str
    """

    _attribute_map = {
        'auth_method': {'key': 'authMethod', 'type': 'str'},
        'auth_detail': {'key': 'authDetail', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphMfaDetail, self).__init__(**kwargs)
        self.auth_method = kwargs.get('auth_method', None)
        self.auth_detail = kwargs.get('auth_detail', None)


class MicrosoftGraphModifiedProperty(msrest.serialization.Model):
    """modifiedProperty.

    :param display_name: Indicates the property name of the target attribute that was changed.
    :type display_name: str
    :param old_value: Indicates the previous value (before the update) for the property.
    :type old_value: str
    :param new_value: Indicates the updated value for the propery.
    :type new_value: str
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'old_value': {'key': 'oldValue', 'type': 'str'},
        'new_value': {'key': 'newValue', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphModifiedProperty, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.old_value = kwargs.get('old_value', None)
        self.new_value = kwargs.get('new_value', None)


class MicrosoftGraphNetworkLocationDetail(msrest.serialization.Model):
    """networkLocationDetail.

    :param network_type: networkType. Possible values include: "intranet", "extranet",
     "namedNetwork", "trusted", "unknownFutureValue".
    :type network_type: str or ~identity_audit_logs.models.MicrosoftGraphNetworkType
    :param network_names:
    :type network_names: list[str]
    """

    _attribute_map = {
        'network_type': {'key': 'networkType', 'type': 'str'},
        'network_names': {'key': 'networkNames', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphNetworkLocationDetail, self).__init__(**kwargs)
        self.network_type = kwargs.get('network_type', None)
        self.network_names = kwargs.get('network_names', None)


class MicrosoftGraphProvisioningObjectSummary(MicrosoftGraphEntity):
    """provisioningObjectSummary.

    :param id: Read-only.
    :type id: str
    :param activity_date_time:
    :type activity_date_time: ~datetime.datetime
    :param tenant_id:
    :type tenant_id: str
    :param job_id:
    :type job_id: str
    :param cycle_id:
    :type cycle_id: str
    :param change_id:
    :type change_id: str
    :param action:
    :type action: str
    :param duration_in_milliseconds:
    :type duration_in_milliseconds: int
    :param service_principal: identity.
    :type service_principal: ~identity_audit_logs.models.MicrosoftGraphIdentity
    :param initiated_by: initiator.
    :type initiated_by: ~identity_audit_logs.models.MicrosoftGraphInitiator
    :param provisioning_steps:
    :type provisioning_steps: list[~identity_audit_logs.models.MicrosoftGraphProvisioningStep]
    :param modified_properties:
    :type modified_properties: list[~identity_audit_logs.models.MicrosoftGraphModifiedProperty]
    :param status: provisioningResult. Possible values include: "success", "failure", "skipped",
     "unknownFutureValue".
    :type status: str or ~identity_audit_logs.models.MicrosoftGraphProvisioningResult
    :param id_target_identity_id:
    :type id_target_identity_id: str
    :param display_name_target_identity_display_name:
    :type display_name_target_identity_display_name: str
    :param identity_type_target_identity_type:
    :type identity_type_target_identity_type: str
    :param details_target_identity_details: Any object.
    :type details_target_identity_details: object
    :param id_source_identity_id:
    :type id_source_identity_id: str
    :param display_name_source_identity_display_name:
    :type display_name_source_identity_display_name: str
    :param identity_type_source_identity_type:
    :type identity_type_source_identity_type: str
    :param details_source_identity_details: Any object.
    :type details_source_identity_details: object
    :param id_target_system_id:
    :type id_target_system_id: str
    :param display_name_target_system_display_name:
    :type display_name_target_system_display_name: str
    :param details_target_system_details: Any object.
    :type details_target_system_details: object
    :param id_source_system_id:
    :type id_source_system_id: str
    :param display_name_source_system_display_name:
    :type display_name_source_system_display_name: str
    :param details_source_system_details: Any object.
    :type details_source_system_details: object
    """

    _validation = {
        'duration_in_milliseconds': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'activity_date_time': {'key': 'activityDateTime', 'type': 'iso-8601'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'cycle_id': {'key': 'cycleId', 'type': 'str'},
        'change_id': {'key': 'changeId', 'type': 'str'},
        'action': {'key': 'action', 'type': 'str'},
        'duration_in_milliseconds': {'key': 'durationInMilliseconds', 'type': 'int'},
        'service_principal': {'key': 'servicePrincipal', 'type': 'MicrosoftGraphIdentity'},
        'initiated_by': {'key': 'initiatedBy', 'type': 'MicrosoftGraphInitiator'},
        'provisioning_steps': {'key': 'provisioningSteps', 'type': '[MicrosoftGraphProvisioningStep]'},
        'modified_properties': {'key': 'modifiedProperties', 'type': '[MicrosoftGraphModifiedProperty]'},
        'status': {'key': 'statusInfo.status', 'type': 'str'},
        'id_target_identity_id': {'key': 'targetIdentity.id', 'type': 'str'},
        'display_name_target_identity_display_name': {'key': 'targetIdentity.displayName', 'type': 'str'},
        'identity_type_target_identity_type': {'key': 'targetIdentity.identityType', 'type': 'str'},
        'details_target_identity_details': {'key': 'targetIdentity.details', 'type': 'object'},
        'id_source_identity_id': {'key': 'sourceIdentity.id', 'type': 'str'},
        'display_name_source_identity_display_name': {'key': 'sourceIdentity.displayName', 'type': 'str'},
        'identity_type_source_identity_type': {'key': 'sourceIdentity.identityType', 'type': 'str'},
        'details_source_identity_details': {'key': 'sourceIdentity.details', 'type': 'object'},
        'id_target_system_id': {'key': 'targetSystem.id', 'type': 'str'},
        'display_name_target_system_display_name': {'key': 'targetSystem.displayName', 'type': 'str'},
        'details_target_system_details': {'key': 'targetSystem.details', 'type': 'object'},
        'id_source_system_id': {'key': 'sourceSystem.id', 'type': 'str'},
        'display_name_source_system_display_name': {'key': 'sourceSystem.displayName', 'type': 'str'},
        'details_source_system_details': {'key': 'sourceSystem.details', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphProvisioningObjectSummary, self).__init__(**kwargs)
        self.activity_date_time = kwargs.get('activity_date_time', None)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.job_id = kwargs.get('job_id', None)
        self.cycle_id = kwargs.get('cycle_id', None)
        self.change_id = kwargs.get('change_id', None)
        self.action = kwargs.get('action', None)
        self.duration_in_milliseconds = kwargs.get('duration_in_milliseconds', None)
        self.service_principal = kwargs.get('service_principal', None)
        self.initiated_by = kwargs.get('initiated_by', None)
        self.provisioning_steps = kwargs.get('provisioning_steps', None)
        self.modified_properties = kwargs.get('modified_properties', None)
        self.status = kwargs.get('status', None)
        self.id_target_identity_id = kwargs.get('id_target_identity_id', None)
        self.display_name_target_identity_display_name = kwargs.get('display_name_target_identity_display_name', None)
        self.identity_type_target_identity_type = kwargs.get('identity_type_target_identity_type', None)
        self.details_target_identity_details = kwargs.get('details_target_identity_details', None)
        self.id_source_identity_id = kwargs.get('id_source_identity_id', None)
        self.display_name_source_identity_display_name = kwargs.get('display_name_source_identity_display_name', None)
        self.identity_type_source_identity_type = kwargs.get('identity_type_source_identity_type', None)
        self.details_source_identity_details = kwargs.get('details_source_identity_details', None)
        self.id_target_system_id = kwargs.get('id_target_system_id', None)
        self.display_name_target_system_display_name = kwargs.get('display_name_target_system_display_name', None)
        self.details_target_system_details = kwargs.get('details_target_system_details', None)
        self.id_source_system_id = kwargs.get('id_source_system_id', None)
        self.display_name_source_system_display_name = kwargs.get('display_name_source_system_display_name', None)
        self.details_source_system_details = kwargs.get('details_source_system_details', None)


class MicrosoftGraphProvisioningServicePrincipal(MicrosoftGraphIdentity):
    """provisioningServicePrincipal.

    :param id: Unique identifier for the identity.
    :type id: str
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphProvisioningServicePrincipal, self).__init__(**kwargs)


class MicrosoftGraphProvisioningStep(msrest.serialization.Model):
    """provisioningStep.

    :param name:
    :type name: str
    :param status: provisioningResult. Possible values include: "success", "failure", "skipped",
     "unknownFutureValue".
    :type status: str or ~identity_audit_logs.models.MicrosoftGraphProvisioningResult
    :param description:
    :type description: str
    :param details: Any object.
    :type details: object
    :param provisioning_step_type: provisioningStepType. Possible values include: "import",
     "scoping", "matching", "processing", "referenceResolution", "export", "unknownFutureValue".
    :type provisioning_step_type: str or
     ~identity_audit_logs.models.MicrosoftGraphProvisioningStepType
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'details': {'key': 'details', 'type': 'object'},
        'provisioning_step_type': {'key': 'provisioningStepType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphProvisioningStep, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.status = kwargs.get('status', None)
        self.description = kwargs.get('description', None)
        self.details = kwargs.get('details', None)
        self.provisioning_step_type = kwargs.get('provisioning_step_type', None)


class MicrosoftGraphSignIn(MicrosoftGraphEntity):
    """signIn.

    :param id: Read-only.
    :type id: str
    :param alternate_sign_in_name:
    :type alternate_sign_in_name: str
    :param app_display_name: App name displayed in the Azure Portal.
    :type app_display_name: str
    :param app_id: Unique GUID representing the app ID in the Azure Active Directory.
    :type app_id: str
    :param applied_conditional_access_policies:
    :type applied_conditional_access_policies:
     list[~identity_audit_logs.models.MicrosoftGraphAppliedConditionalAccessPolicy]
    :param authentication_details:
    :type authentication_details:
     list[~identity_audit_logs.models.MicrosoftGraphAuthenticationDetail]
    :param authentication_methods_used:
    :type authentication_methods_used: list[str]
    :param authentication_processing_details:
    :type authentication_processing_details:
     list[~identity_audit_logs.models.MicrosoftGraphKeyValue]
    :param authentication_requirement:
    :type authentication_requirement: str
    :param authentication_requirement_policies:
    :type authentication_requirement_policies:
     list[~identity_audit_logs.models.MicrosoftGraphAuthenticationRequirementPolicy]
    :param client_app_used: Identifies the legacy client used for sign-in activity.  Includes
     Browser, Exchange Active Sync, modern clients, IMAP, MAPI, SMTP, and POP.
    :type client_app_used: str
    :param conditional_access_status: conditionalAccessStatus. Possible values include: "success",
     "failure", "notApplied", "unknownFutureValue".
    :type conditional_access_status: str or
     ~identity_audit_logs.models.MicrosoftGraphConditionalAccessStatus
    :param correlation_id: The request ID sent from the client when the sign-in is initiated; used
     to troubleshoot sign-in activity.
    :type correlation_id: str
    :param created_date_time: Date and time (UTC) the sign-in was initiated. Example: midnight on
     Jan 1, 2014 is reported as '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param device_detail: deviceDetail.
    :type device_detail: ~identity_audit_logs.models.MicrosoftGraphDeviceDetail
    :param is_interactive: Indicates if a sign-in is interactive or not.
    :type is_interactive: bool
    :param ip_address: IP address of the client used to sign in.
    :type ip_address: str
    :param mfa_detail: mfaDetail.
    :type mfa_detail: ~identity_audit_logs.models.MicrosoftGraphMfaDetail
    :param network_location_details:
    :type network_location_details:
     list[~identity_audit_logs.models.MicrosoftGraphNetworkLocationDetail]
    :param original_request_id:
    :type original_request_id: str
    :param processing_time_in_milliseconds:
    :type processing_time_in_milliseconds: int
    :param risk_detail: riskDetail. Possible values include: "none",
     "adminGeneratedTemporaryPassword", "userPerformedSecuredPasswordChange",
     "userPerformedSecuredPasswordReset", "adminConfirmedSigninSafe", "aiConfirmedSigninSafe",
     "userPassedMFADrivenByRiskBasedPolicy", "adminDismissedAllRiskForUser",
     "adminConfirmedSigninCompromised", "hidden", "adminConfirmedUserCompromised",
     "unknownFutureValue".
    :type risk_detail: str or ~identity_audit_logs.models.MicrosoftGraphRiskDetail
    :param risk_event_types: Risk event types associated with the sign-in. The possible values are:
     unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
     malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
     investigationsThreatIntelligence,  generic, and unknownFutureValue.
    :type risk_event_types: list[str or ~identity_audit_logs.models.MicrosoftGraphRiskEventType]
    :param risk_event_types_v2: The list of risk event types associated with the sign-in. Possible
     values: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
     malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
     investigationsThreatIntelligence,  generic, or unknownFutureValue.
    :type risk_event_types_v2: list[str]
    :param risk_level_aggregated: riskLevel. Possible values include: "low", "medium", "high",
     "hidden", "none", "unknownFutureValue".
    :type risk_level_aggregated: str or ~identity_audit_logs.models.MicrosoftGraphRiskLevel
    :param risk_level_during_sign_in: riskLevel. Possible values include: "low", "medium", "high",
     "hidden", "none", "unknownFutureValue".
    :type risk_level_during_sign_in: str or ~identity_audit_logs.models.MicrosoftGraphRiskLevel
    :param risk_state: riskState. Possible values include: "none", "confirmedSafe", "remediated",
     "dismissed", "atRisk", "confirmedCompromised", "unknownFutureValue".
    :type risk_state: str or ~identity_audit_logs.models.MicrosoftGraphRiskState
    :param resource_display_name: Name of the resource the user signed into.
    :type resource_display_name: str
    :param resource_id: ID of the resource that the user signed into.
    :type resource_id: str
    :param service_principal_id:
    :type service_principal_id: str
    :param service_principal_name:
    :type service_principal_name: str
    :param status: signInStatus.
    :type status: ~identity_audit_logs.models.MicrosoftGraphSignInStatus
    :param token_issuer_name:
    :type token_issuer_name: str
    :param token_issuer_type: tokenIssuerType. Possible values include: "AzureAD",
     "ADFederationServices", "UnknownFutureValue".
    :type token_issuer_type: str or ~identity_audit_logs.models.MicrosoftGraphTokenIssuerType
    :param user_agent:
    :type user_agent: str
    :param user_display_name: Display name of the user that initiated the sign-in.
    :type user_display_name: str
    :param user_id: ID of the user that initiated the sign-in.
    :type user_id: str
    :param user_principal_name: User principal name of the user that initiated the sign-in.
    :type user_principal_name: str
    :param city: Provides the city where the sign-in originated. This is calculated using
     latitude/longitude information from the sign-in activity.
    :type city: str
    :param state: Provides the State where the sign-in originated. This is calculated using
     latitude/longitude information from the sign-in activity.
    :type state: str
    :param country_or_region: Provides the country code info (2 letter code) where the sign-in
     originated.  This is calculated using latitude/longitude information from the sign-in activity.
    :type country_or_region: str
    :param geo_coordinates: geoCoordinates.
    :type geo_coordinates: ~identity_audit_logs.models.MicrosoftGraphGeoCoordinates
    """

    _validation = {
        'processing_time_in_milliseconds': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'alternate_sign_in_name': {'key': 'alternateSignInName', 'type': 'str'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'applied_conditional_access_policies': {'key': 'appliedConditionalAccessPolicies', 'type': '[MicrosoftGraphAppliedConditionalAccessPolicy]'},
        'authentication_details': {'key': 'authenticationDetails', 'type': '[MicrosoftGraphAuthenticationDetail]'},
        'authentication_methods_used': {'key': 'authenticationMethodsUsed', 'type': '[str]'},
        'authentication_processing_details': {'key': 'authenticationProcessingDetails', 'type': '[MicrosoftGraphKeyValue]'},
        'authentication_requirement': {'key': 'authenticationRequirement', 'type': 'str'},
        'authentication_requirement_policies': {'key': 'authenticationRequirementPolicies', 'type': '[MicrosoftGraphAuthenticationRequirementPolicy]'},
        'client_app_used': {'key': 'clientAppUsed', 'type': 'str'},
        'conditional_access_status': {'key': 'conditionalAccessStatus', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'device_detail': {'key': 'deviceDetail', 'type': 'MicrosoftGraphDeviceDetail'},
        'is_interactive': {'key': 'isInteractive', 'type': 'bool'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'mfa_detail': {'key': 'mfaDetail', 'type': 'MicrosoftGraphMfaDetail'},
        'network_location_details': {'key': 'networkLocationDetails', 'type': '[MicrosoftGraphNetworkLocationDetail]'},
        'original_request_id': {'key': 'originalRequestId', 'type': 'str'},
        'processing_time_in_milliseconds': {'key': 'processingTimeInMilliseconds', 'type': 'int'},
        'risk_detail': {'key': 'riskDetail', 'type': 'str'},
        'risk_event_types': {'key': 'riskEventTypes', 'type': '[str]'},
        'risk_event_types_v2': {'key': 'riskEventTypes_v2', 'type': '[str]'},
        'risk_level_aggregated': {'key': 'riskLevelAggregated', 'type': 'str'},
        'risk_level_during_sign_in': {'key': 'riskLevelDuringSignIn', 'type': 'str'},
        'risk_state': {'key': 'riskState', 'type': 'str'},
        'resource_display_name': {'key': 'resourceDisplayName', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'service_principal_id': {'key': 'servicePrincipalId', 'type': 'str'},
        'service_principal_name': {'key': 'servicePrincipalName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'MicrosoftGraphSignInStatus'},
        'token_issuer_name': {'key': 'tokenIssuerName', 'type': 'str'},
        'token_issuer_type': {'key': 'tokenIssuerType', 'type': 'str'},
        'user_agent': {'key': 'userAgent', 'type': 'str'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'city': {'key': 'location.city', 'type': 'str'},
        'state': {'key': 'location.state', 'type': 'str'},
        'country_or_region': {'key': 'location.countryOrRegion', 'type': 'str'},
        'geo_coordinates': {'key': 'location.geoCoordinates', 'type': 'MicrosoftGraphGeoCoordinates'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSignIn, self).__init__(**kwargs)
        self.alternate_sign_in_name = kwargs.get('alternate_sign_in_name', None)
        self.app_display_name = kwargs.get('app_display_name', None)
        self.app_id = kwargs.get('app_id', None)
        self.applied_conditional_access_policies = kwargs.get('applied_conditional_access_policies', None)
        self.authentication_details = kwargs.get('authentication_details', None)
        self.authentication_methods_used = kwargs.get('authentication_methods_used', None)
        self.authentication_processing_details = kwargs.get('authentication_processing_details', None)
        self.authentication_requirement = kwargs.get('authentication_requirement', None)
        self.authentication_requirement_policies = kwargs.get('authentication_requirement_policies', None)
        self.client_app_used = kwargs.get('client_app_used', None)
        self.conditional_access_status = kwargs.get('conditional_access_status', None)
        self.correlation_id = kwargs.get('correlation_id', None)
        self.created_date_time = kwargs.get('created_date_time', None)
        self.device_detail = kwargs.get('device_detail', None)
        self.is_interactive = kwargs.get('is_interactive', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.mfa_detail = kwargs.get('mfa_detail', None)
        self.network_location_details = kwargs.get('network_location_details', None)
        self.original_request_id = kwargs.get('original_request_id', None)
        self.processing_time_in_milliseconds = kwargs.get('processing_time_in_milliseconds', None)
        self.risk_detail = kwargs.get('risk_detail', None)
        self.risk_event_types = kwargs.get('risk_event_types', None)
        self.risk_event_types_v2 = kwargs.get('risk_event_types_v2', None)
        self.risk_level_aggregated = kwargs.get('risk_level_aggregated', None)
        self.risk_level_during_sign_in = kwargs.get('risk_level_during_sign_in', None)
        self.risk_state = kwargs.get('risk_state', None)
        self.resource_display_name = kwargs.get('resource_display_name', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.service_principal_id = kwargs.get('service_principal_id', None)
        self.service_principal_name = kwargs.get('service_principal_name', None)
        self.status = kwargs.get('status', None)
        self.token_issuer_name = kwargs.get('token_issuer_name', None)
        self.token_issuer_type = kwargs.get('token_issuer_type', None)
        self.user_agent = kwargs.get('user_agent', None)
        self.user_display_name = kwargs.get('user_display_name', None)
        self.user_id = kwargs.get('user_id', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)
        self.city = kwargs.get('city', None)
        self.state = kwargs.get('state', None)
        self.country_or_region = kwargs.get('country_or_region', None)
        self.geo_coordinates = kwargs.get('geo_coordinates', None)


class MicrosoftGraphRestrictedSignIn(MicrosoftGraphSignIn):
    """restrictedSignIn.

    :param id: Read-only.
    :type id: str
    :param alternate_sign_in_name:
    :type alternate_sign_in_name: str
    :param app_display_name: App name displayed in the Azure Portal.
    :type app_display_name: str
    :param app_id: Unique GUID representing the app ID in the Azure Active Directory.
    :type app_id: str
    :param applied_conditional_access_policies:
    :type applied_conditional_access_policies:
     list[~identity_audit_logs.models.MicrosoftGraphAppliedConditionalAccessPolicy]
    :param authentication_details:
    :type authentication_details:
     list[~identity_audit_logs.models.MicrosoftGraphAuthenticationDetail]
    :param authentication_methods_used:
    :type authentication_methods_used: list[str]
    :param authentication_processing_details:
    :type authentication_processing_details:
     list[~identity_audit_logs.models.MicrosoftGraphKeyValue]
    :param authentication_requirement:
    :type authentication_requirement: str
    :param authentication_requirement_policies:
    :type authentication_requirement_policies:
     list[~identity_audit_logs.models.MicrosoftGraphAuthenticationRequirementPolicy]
    :param client_app_used: Identifies the legacy client used for sign-in activity.  Includes
     Browser, Exchange Active Sync, modern clients, IMAP, MAPI, SMTP, and POP.
    :type client_app_used: str
    :param conditional_access_status: conditionalAccessStatus. Possible values include: "success",
     "failure", "notApplied", "unknownFutureValue".
    :type conditional_access_status: str or
     ~identity_audit_logs.models.MicrosoftGraphConditionalAccessStatus
    :param correlation_id: The request ID sent from the client when the sign-in is initiated; used
     to troubleshoot sign-in activity.
    :type correlation_id: str
    :param created_date_time: Date and time (UTC) the sign-in was initiated. Example: midnight on
     Jan 1, 2014 is reported as '2014-01-01T00:00:00Z'.
    :type created_date_time: ~datetime.datetime
    :param device_detail: deviceDetail.
    :type device_detail: ~identity_audit_logs.models.MicrosoftGraphDeviceDetail
    :param is_interactive: Indicates if a sign-in is interactive or not.
    :type is_interactive: bool
    :param ip_address: IP address of the client used to sign in.
    :type ip_address: str
    :param mfa_detail: mfaDetail.
    :type mfa_detail: ~identity_audit_logs.models.MicrosoftGraphMfaDetail
    :param network_location_details:
    :type network_location_details:
     list[~identity_audit_logs.models.MicrosoftGraphNetworkLocationDetail]
    :param original_request_id:
    :type original_request_id: str
    :param processing_time_in_milliseconds:
    :type processing_time_in_milliseconds: int
    :param risk_detail: riskDetail. Possible values include: "none",
     "adminGeneratedTemporaryPassword", "userPerformedSecuredPasswordChange",
     "userPerformedSecuredPasswordReset", "adminConfirmedSigninSafe", "aiConfirmedSigninSafe",
     "userPassedMFADrivenByRiskBasedPolicy", "adminDismissedAllRiskForUser",
     "adminConfirmedSigninCompromised", "hidden", "adminConfirmedUserCompromised",
     "unknownFutureValue".
    :type risk_detail: str or ~identity_audit_logs.models.MicrosoftGraphRiskDetail
    :param risk_event_types: Risk event types associated with the sign-in. The possible values are:
     unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
     malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
     investigationsThreatIntelligence,  generic, and unknownFutureValue.
    :type risk_event_types: list[str or ~identity_audit_logs.models.MicrosoftGraphRiskEventType]
    :param risk_event_types_v2: The list of risk event types associated with the sign-in. Possible
     values: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures,
     malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials,
     investigationsThreatIntelligence,  generic, or unknownFutureValue.
    :type risk_event_types_v2: list[str]
    :param risk_level_aggregated: riskLevel. Possible values include: "low", "medium", "high",
     "hidden", "none", "unknownFutureValue".
    :type risk_level_aggregated: str or ~identity_audit_logs.models.MicrosoftGraphRiskLevel
    :param risk_level_during_sign_in: riskLevel. Possible values include: "low", "medium", "high",
     "hidden", "none", "unknownFutureValue".
    :type risk_level_during_sign_in: str or ~identity_audit_logs.models.MicrosoftGraphRiskLevel
    :param risk_state: riskState. Possible values include: "none", "confirmedSafe", "remediated",
     "dismissed", "atRisk", "confirmedCompromised", "unknownFutureValue".
    :type risk_state: str or ~identity_audit_logs.models.MicrosoftGraphRiskState
    :param resource_display_name: Name of the resource the user signed into.
    :type resource_display_name: str
    :param resource_id: ID of the resource that the user signed into.
    :type resource_id: str
    :param service_principal_id:
    :type service_principal_id: str
    :param service_principal_name:
    :type service_principal_name: str
    :param status: signInStatus.
    :type status: ~identity_audit_logs.models.MicrosoftGraphSignInStatus
    :param token_issuer_name:
    :type token_issuer_name: str
    :param token_issuer_type: tokenIssuerType. Possible values include: "AzureAD",
     "ADFederationServices", "UnknownFutureValue".
    :type token_issuer_type: str or ~identity_audit_logs.models.MicrosoftGraphTokenIssuerType
    :param user_agent:
    :type user_agent: str
    :param user_display_name: Display name of the user that initiated the sign-in.
    :type user_display_name: str
    :param user_id: ID of the user that initiated the sign-in.
    :type user_id: str
    :param user_principal_name: User principal name of the user that initiated the sign-in.
    :type user_principal_name: str
    :param city: Provides the city where the sign-in originated. This is calculated using
     latitude/longitude information from the sign-in activity.
    :type city: str
    :param state: Provides the State where the sign-in originated. This is calculated using
     latitude/longitude information from the sign-in activity.
    :type state: str
    :param country_or_region: Provides the country code info (2 letter code) where the sign-in
     originated.  This is calculated using latitude/longitude information from the sign-in activity.
    :type country_or_region: str
    :param geo_coordinates: geoCoordinates.
    :type geo_coordinates: ~identity_audit_logs.models.MicrosoftGraphGeoCoordinates
    :param target_tenant_id:
    :type target_tenant_id: str
    """

    _validation = {
        'processing_time_in_milliseconds': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'alternate_sign_in_name': {'key': 'alternateSignInName', 'type': 'str'},
        'app_display_name': {'key': 'appDisplayName', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'applied_conditional_access_policies': {'key': 'appliedConditionalAccessPolicies', 'type': '[MicrosoftGraphAppliedConditionalAccessPolicy]'},
        'authentication_details': {'key': 'authenticationDetails', 'type': '[MicrosoftGraphAuthenticationDetail]'},
        'authentication_methods_used': {'key': 'authenticationMethodsUsed', 'type': '[str]'},
        'authentication_processing_details': {'key': 'authenticationProcessingDetails', 'type': '[MicrosoftGraphKeyValue]'},
        'authentication_requirement': {'key': 'authenticationRequirement', 'type': 'str'},
        'authentication_requirement_policies': {'key': 'authenticationRequirementPolicies', 'type': '[MicrosoftGraphAuthenticationRequirementPolicy]'},
        'client_app_used': {'key': 'clientAppUsed', 'type': 'str'},
        'conditional_access_status': {'key': 'conditionalAccessStatus', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'device_detail': {'key': 'deviceDetail', 'type': 'MicrosoftGraphDeviceDetail'},
        'is_interactive': {'key': 'isInteractive', 'type': 'bool'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'mfa_detail': {'key': 'mfaDetail', 'type': 'MicrosoftGraphMfaDetail'},
        'network_location_details': {'key': 'networkLocationDetails', 'type': '[MicrosoftGraphNetworkLocationDetail]'},
        'original_request_id': {'key': 'originalRequestId', 'type': 'str'},
        'processing_time_in_milliseconds': {'key': 'processingTimeInMilliseconds', 'type': 'int'},
        'risk_detail': {'key': 'riskDetail', 'type': 'str'},
        'risk_event_types': {'key': 'riskEventTypes', 'type': '[str]'},
        'risk_event_types_v2': {'key': 'riskEventTypes_v2', 'type': '[str]'},
        'risk_level_aggregated': {'key': 'riskLevelAggregated', 'type': 'str'},
        'risk_level_during_sign_in': {'key': 'riskLevelDuringSignIn', 'type': 'str'},
        'risk_state': {'key': 'riskState', 'type': 'str'},
        'resource_display_name': {'key': 'resourceDisplayName', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'service_principal_id': {'key': 'servicePrincipalId', 'type': 'str'},
        'service_principal_name': {'key': 'servicePrincipalName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'MicrosoftGraphSignInStatus'},
        'token_issuer_name': {'key': 'tokenIssuerName', 'type': 'str'},
        'token_issuer_type': {'key': 'tokenIssuerType', 'type': 'str'},
        'user_agent': {'key': 'userAgent', 'type': 'str'},
        'user_display_name': {'key': 'userDisplayName', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'city': {'key': 'location.city', 'type': 'str'},
        'state': {'key': 'location.state', 'type': 'str'},
        'country_or_region': {'key': 'location.countryOrRegion', 'type': 'str'},
        'geo_coordinates': {'key': 'location.geoCoordinates', 'type': 'MicrosoftGraphGeoCoordinates'},
        'target_tenant_id': {'key': 'targetTenantId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphRestrictedSignIn, self).__init__(**kwargs)
        self.target_tenant_id = kwargs.get('target_tenant_id', None)


class MicrosoftGraphSignInStatus(msrest.serialization.Model):
    """signInStatus.

    :param error_code: Provides the 5-6digit error code that's generated during a sign-in failure.
     Check out the list of error codes and messages.
    :type error_code: int
    :param failure_reason: Provides the error message or the reason for failure for the
     corresponding sign-in activity. Check out the list of error codes and messages.
    :type failure_reason: str
    :param additional_details: Provides additional details on the sign-in activity.
    :type additional_details: str
    """

    _validation = {
        'error_code': {'maximum': 2147483647, 'minimum': -2147483648},
    }

    _attribute_map = {
        'error_code': {'key': 'errorCode', 'type': 'int'},
        'failure_reason': {'key': 'failureReason', 'type': 'str'},
        'additional_details': {'key': 'additionalDetails', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSignInStatus, self).__init__(**kwargs)
        self.error_code = kwargs.get('error_code', None)
        self.failure_reason = kwargs.get('failure_reason', None)
        self.additional_details = kwargs.get('additional_details', None)


class MicrosoftGraphTargetResource(msrest.serialization.Model):
    """targetResource.

    :param id: Indicates the unique ID of the resource.
    :type id: str
    :param display_name: Indicates the visible name defined for the resource. Typically specified
     when the resource is created.
    :type display_name: str
    :param type: Describes the resource type.  Example values include Application, Group,
     ServicePrincipal, and User.
    :type type: str
    :param user_principal_name: When type is set to User, this includes the user name that
     initiated the action; null for other types.
    :type user_principal_name: str
    :param group_type: groupType. Possible values include: "unifiedGroups", "azureAD",
     "unknownFutureValue".
    :type group_type: str or ~identity_audit_logs.models.MicrosoftGraphGroupType
    :param modified_properties: Indicates name, old value and new value of each attribute that
     changed. Property values depend on the operation type.
    :type modified_properties: list[~identity_audit_logs.models.MicrosoftGraphModifiedProperty]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'group_type': {'key': 'groupType', 'type': 'str'},
        'modified_properties': {'key': 'modifiedProperties', 'type': '[MicrosoftGraphModifiedProperty]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTargetResource, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.display_name = kwargs.get('display_name', None)
        self.type = kwargs.get('type', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)
        self.group_type = kwargs.get('group_type', None)
        self.modified_properties = kwargs.get('modified_properties', None)


class MicrosoftGraphUserIdentity(MicrosoftGraphIdentity):
    """userIdentity.

    :param id: Unique identifier for the identity.
    :type id: str
    :param display_name: The identity's display name. Note that this may not always be available or
     up to date. For example, if a user changes their display name, the API may show the new value
     in a future response, but the items associated with the user won't show up as having changed
     when using delta.
    :type display_name: str
    :param ip_address: Indicates the client IP address used by user performing the activity (audit
     log only).
    :type ip_address: str
    :param user_principal_name: The userPrincipalName attribute of the user.
    :type user_principal_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUserIdentity, self).__init__(**kwargs)
        self.ip_address = kwargs.get('ip_address', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param error: Required.
    :type error: ~identity_audit_logs.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.error = kwargs['error']


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~identity_audit_logs.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)
