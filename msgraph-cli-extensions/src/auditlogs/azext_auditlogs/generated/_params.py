# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from msgraph.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from msgraph.cli.core.commands.validators import validate_file_or_dict
from azext_auditlogs.action import (
    AddRestrictedSignIns,
    AddTargetResources,
    AddAdditionalDetails,
    AddInitiatedByUser,
    AddInitiatedByApp,
    AddServicePrincipal,
    AddInitiatedBy,
    AddModifiedProperties,
    AddAppliedConditionalAccessPolicies,
    AddAuthenticationDetails,
    AddAuthenticationProcessingDetails,
    AddAuthenticationRequirementPolicies,
    AddDeviceDetail,
    AddMfaDetail,
    AddNetworkLocationDetails,
    AddStatus,
    AddLocationGeoCoordinates
)


def load_arguments(self, _):

    with self.argument_context('auditlogs audit-log-audit-log-root update') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('sign_ins', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('directory_audits', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('restricted_sign_ins', action=AddRestrictedSignIns, nargs='*', help='')
        c.argument('directory_provisioning', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')
        c.argument('provisioning', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')

    with self.argument_context('auditlogs audit-log-audit-log-root get-audit-log-root') as c:
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('auditlogs audit-log update') as c:
        c.argument('directory_audit_id', help='key: directoryAudit-id of directoryAudit')
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('category', help='Indicates which resource category that\'s targeted by the activity. (For example: '
                   'User Management, Group Management etc..)')
        c.argument('correlation_id', help='Indicates a unique ID that helps correlate activities that span across '
                   'various services. Can be used to trace logs across services.')
        c.argument('result', arg_type=get_enum_type(['success', 'failure', 'timeout', 'unknownFutureValue']), help=''
                   'operationResult')
        c.argument('result_reason', help='Describes cause of \'failure\' or \'timeout\' results.')
        c.argument('activity_display_name', help='Indicates the activity name or the operation name (examples: '
                   '\'Create User\' and \'Add member to group\'). For full list, see Azure AD activity list.')
        c.argument('activity_date_time', help='Indicates the date and time the activity was performed. The Timestamp '
                   'type is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('logged_by_service', help='Indicates information on which service initiated the activity (For '
                   'example: Self-service Password Management, Core Directory, B2C, Invited Users, Microsoft Identity '
                   'Manager, Privileged Identity Management.')
        c.argument('operation_type', help='')
        c.argument('target_resources', action=AddTargetResources, nargs='*', help='Indicates information on which '
                   'resource was changed due to the activity. Target Resource Type can be User, Device, Directory, '
                   'App, Role, Group, Policy or Other.')
        c.argument('additional_details', action=AddAdditionalDetails, nargs='*', help='Indicates additional details on '
                   'the activity.')
        c.argument('initiated_by_user', action=AddInitiatedByUser, nargs='*', help='userIdentity')
        c.argument('initiated_by_app', action=AddInitiatedByApp, nargs='*', help='appIdentity')
        c.argument('provisioning_object_summary_id', help='key: provisioningObjectSummary-id of '
                   'provisioningObjectSummary')
        c.argument('tenant_id', help='')
        c.argument('job_id', help='')
        c.argument('cycle_id', help='')
        c.argument('change_id', help='')
        c.argument('action', help='')
        c.argument('duration_in_milliseconds', help='')
        c.argument('service_principal', action=AddServicePrincipal, nargs='*', help='identity')
        c.argument('initiated_by', action=AddInitiatedBy, nargs='*', help='initiator')
        c.argument('provisioning_steps', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('modified_properties', action=AddModifiedProperties, nargs='*', help='')
        c.argument('status_info_status', arg_type=get_enum_type(['success', 'failure', 'skipped',
                   'unknownFutureValue']), help='provisioningResult')
        c.argument('target_identity_id', help='')
        c.argument('target_identity_display_name', help='')
        c.argument('target_identity_identity_type', help='')
        c.argument('target_identity_details', type=validate_file_or_dict, help='Any object Expected value: '
                   'json-string/@json-file.')
        c.argument('source_identity_id', help='')
        c.argument('source_identity_display_name', help='')
        c.argument('source_identity_identity_type', help='')
        c.argument('source_identity_details', type=validate_file_or_dict, help='Any object Expected value: '
                   'json-string/@json-file.')
        c.argument('target_system_id', help='')
        c.argument('target_system_display_name', help='')
        c.argument('target_system_details', type=validate_file_or_dict, help='Any object Expected value: '
                   'json-string/@json-file.')
        c.argument('source_system_id', help='')
        c.argument('source_system_display_name', help='')
        c.argument('source_system_details', type=validate_file_or_dict, help='Any object Expected value: '
                   'json-string/@json-file.')
        c.argument('restricted_sign_in_id', help='key: restrictedSignIn-id of restrictedSignIn')
        c.argument('alternate_sign_in_name', help='')
        c.argument('app_display_name', help='App name displayed in the Azure Portal.')
        c.argument('app_id', help='Unique GUID representing the app ID in the Azure Active Directory.')
        c.argument('applied_conditional_access_policies', action=AddAppliedConditionalAccessPolicies, nargs='*', help=
                   '')
        c.argument('authentication_details', action=AddAuthenticationDetails, nargs='*', help='')
        c.argument('authentication_methods_used', nargs='*', help='')
        c.argument('authentication_processing_details', action=AddAuthenticationProcessingDetails, nargs='*', help='')
        c.argument('authentication_requirement', help='')
        c.argument('authentication_requirement_policies', action=AddAuthenticationRequirementPolicies, nargs='*',
                   help='')
        c.argument('client_app_used', help='Identifies the legacy client used for sign-in activity.  Includes Browser, '
                   'Exchange Active Sync, modern clients, IMAP, MAPI, SMTP, and POP.')
        c.argument('conditional_access_status', arg_type=get_enum_type(['success', 'failure', 'notApplied', ''
                   'unknownFutureValue']), help='conditionalAccessStatus')
        c.argument('created_date_time', help='Date and time (UTC) the sign-in was initiated. Example: midnight on Jan '
                   '1, 2014 is reported as \'2014-01-01T00:00:00Z\'.')
        c.argument('device_detail', action=AddDeviceDetail, nargs='*', help='deviceDetail')
        c.argument('is_interactive', arg_type=get_three_state_flag(), help='Indicates if a sign-in is interactive or '
                   'not.')
        c.argument('ip_address', help='IP address of the client used to sign in.')
        c.argument('mfa_detail', action=AddMfaDetail, nargs='*', help='mfaDetail')
        c.argument('network_location_details', action=AddNetworkLocationDetails, nargs='*', help='')
        c.argument('original_request_id', help='')
        c.argument('processing_time_in_milliseconds', help='')
        c.argument('risk_detail', arg_type=get_enum_type(['none', 'adminGeneratedTemporaryPassword', ''
                   'userPerformedSecuredPasswordChange', 'userPerformedSecuredPasswordReset', ''
                   'adminConfirmedSigninSafe', 'aiConfirmedSigninSafe', 'userPassedMFADrivenByRiskBasedPolicy', ''
                   'adminDismissedAllRiskForUser', 'adminConfirmedSigninCompromised', 'hidden', ''
                   'adminConfirmedUserCompromised', 'unknownFutureValue']), help='riskDetail')
        c.argument('risk_event_types', nargs='*', help='Risk event types associated with the sign-in. The possible '
                   'values are: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures, '
                   'malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials, investigationsThreatIntelligence,'
                   '  generic, and unknownFutureValue.')
        c.argument('risk_event_types_v2', nargs='*', help='The list of risk event types associated with the sign-in. '
                   'Possible values: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures, '
                   'malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials, investigationsThreatIntelligence,'
                   '  generic, or unknownFutureValue.')
        c.argument('risk_level_aggregated', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_level_during_sign_in', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_state', arg_type=get_enum_type(['none', 'confirmedSafe', 'remediated', 'dismissed', 'atRisk',
                   'confirmedCompromised', 'unknownFutureValue']), help='riskState')
        c.argument('resource_display_name', help='Name of the resource the user signed into.')
        c.argument('resource_id', help='ID of the resource that the user signed into.')
        c.argument('service_principal_id', help='')
        c.argument('service_principal_name', help='')
        c.argument('status', action=AddStatus, nargs='*', help='signInStatus')
        c.argument('token_issuer_name', help='')
        c.argument('token_issuer_type', arg_type=get_enum_type(['AzureAD', 'ADFederationServices',
                   'UnknownFutureValue']), help='tokenIssuerType')
        c.argument('user_agent', help='')
        c.argument('user_display_name', help='Display name of the user that initiated the sign-in.')
        c.argument('user_id', help='ID of the user that initiated the sign-in.')
        c.argument('user_principal_name', help='User principal name of the user that initiated the sign-in.')
        c.argument('location_city', help='Provides the city where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_state', help='Provides the State where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_country_or_region', help='Provides the country code info (2 letter code) where the '
                   'sign-in originated.  This is calculated using latitude/longitude information from the sign-in '
                   'activity.')
        c.argument('location_geo_coordinates', action=AddLocationGeoCoordinates, nargs='*', help='geoCoordinates')
        c.argument('target_tenant_id', help='')
        c.argument('sign_in_id', help='key: signIn-id of signIn')
        c.argument('body', type=validate_file_or_dict, help='New navigation property values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('auditlogs audit-log create-directory-audit') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('category', help='Indicates which resource category that\'s targeted by the activity. (For example: '
                   'User Management, Group Management etc..)')
        c.argument('correlation_id', help='Indicates a unique ID that helps correlate activities that span across '
                   'various services. Can be used to trace logs across services.')
        c.argument('result', arg_type=get_enum_type(['success', 'failure', 'timeout', 'unknownFutureValue']), help=''
                   'operationResult')
        c.argument('result_reason', help='Describes cause of \'failure\' or \'timeout\' results.')
        c.argument('activity_display_name', help='Indicates the activity name or the operation name (examples: '
                   '\'Create User\' and \'Add member to group\'). For full list, see Azure AD activity list.')
        c.argument('activity_date_time', help='Indicates the date and time the activity was performed. The Timestamp '
                   'type is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('logged_by_service', help='Indicates information on which service initiated the activity (For '
                   'example: Self-service Password Management, Core Directory, B2C, Invited Users, Microsoft Identity '
                   'Manager, Privileged Identity Management.')
        c.argument('operation_type', help='')
        c.argument('target_resources', action=AddTargetResources, nargs='*', help='Indicates information on which '
                   'resource was changed due to the activity. Target Resource Type can be User, Device, Directory, '
                   'App, Role, Group, Policy or Other.')
        c.argument('additional_details', action=AddAdditionalDetails, nargs='*', help='Indicates additional details on '
                   'the activity.')
        c.argument('initiated_by_user', action=AddInitiatedByUser, nargs='*', help='userIdentity')
        c.argument('initiated_by_app', action=AddInitiatedByApp, nargs='*', help='appIdentity')

    with self.argument_context('auditlogs audit-log create-directory-provisioning') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('activity_date_time', help='')
        c.argument('tenant_id', help='')
        c.argument('job_id', help='')
        c.argument('cycle_id', help='')
        c.argument('change_id', help='')
        c.argument('action', help='')
        c.argument('duration_in_milliseconds', help='')
        c.argument('service_principal', action=AddServicePrincipal, nargs='*', help='identity')
        c.argument('initiated_by', action=AddInitiatedBy, nargs='*', help='initiator')
        c.argument('provisioning_steps', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('modified_properties', action=AddModifiedProperties, nargs='*', help='')
        c.argument('status_info_status', arg_type=get_enum_type(['success', 'failure', 'skipped',
                   'unknownFutureValue']), help='provisioningResult')
        c.argument('target_identity_id', help='')
        c.argument('target_identity_display_name', help='')
        c.argument('target_identity_identity_type', help='')
        c.argument('target_identity_details', type=validate_file_or_dict, help='Any object Expected value: '
                   'json-string/@json-file.')
        c.argument('source_identity_id', help='')
        c.argument('source_identity_display_name', help='')
        c.argument('source_identity_identity_type', help='')
        c.argument('source_identity_details', type=validate_file_or_dict, help='Any object Expected value: '
                   'json-string/@json-file.')
        c.argument('target_system_id', help='')
        c.argument('target_system_display_name', help='')
        c.argument('target_system_details', type=validate_file_or_dict, help='Any object Expected value: '
                   'json-string/@json-file.')
        c.argument('source_system_id', help='')
        c.argument('source_system_display_name', help='')
        c.argument('source_system_details', type=validate_file_or_dict, help='Any object Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('auditlogs audit-log create-provisioning') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('activity_date_time', help='')
        c.argument('tenant_id', help='')
        c.argument('job_id', help='')
        c.argument('cycle_id', help='')
        c.argument('change_id', help='')
        c.argument('action', help='')
        c.argument('duration_in_milliseconds', help='')
        c.argument('service_principal', action=AddServicePrincipal, nargs='*', help='identity')
        c.argument('initiated_by', action=AddInitiatedBy, nargs='*', help='initiator')
        c.argument('provisioning_steps', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('modified_properties', action=AddModifiedProperties, nargs='*', help='')
        c.argument('status_info_status', arg_type=get_enum_type(['success', 'failure', 'skipped',
                   'unknownFutureValue']), help='provisioningResult')
        c.argument('target_identity_id', help='')
        c.argument('target_identity_display_name', help='')
        c.argument('target_identity_identity_type', help='')
        c.argument('target_identity_details', type=validate_file_or_dict, help='Any object Expected value: '
                   'json-string/@json-file.')
        c.argument('source_identity_id', help='')
        c.argument('source_identity_display_name', help='')
        c.argument('source_identity_identity_type', help='')
        c.argument('source_identity_details', type=validate_file_or_dict, help='Any object Expected value: '
                   'json-string/@json-file.')
        c.argument('target_system_id', help='')
        c.argument('target_system_display_name', help='')
        c.argument('target_system_details', type=validate_file_or_dict, help='Any object Expected value: '
                   'json-string/@json-file.')
        c.argument('source_system_id', help='')
        c.argument('source_system_display_name', help='')
        c.argument('source_system_details', type=validate_file_or_dict, help='Any object Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('auditlogs audit-log create-restricted-sign-in') as c:
        c.argument('id_', options_list=['--id'], help='Read-only.')
        c.argument('alternate_sign_in_name', help='')
        c.argument('app_display_name', help='App name displayed in the Azure Portal.')
        c.argument('app_id', help='Unique GUID representing the app ID in the Azure Active Directory.')
        c.argument('applied_conditional_access_policies', action=AddAppliedConditionalAccessPolicies, nargs='*', help=
                   '')
        c.argument('authentication_details', action=AddAuthenticationDetails, nargs='*', help='')
        c.argument('authentication_methods_used', nargs='*', help='')
        c.argument('authentication_processing_details', action=AddAuthenticationProcessingDetails, nargs='*', help='')
        c.argument('authentication_requirement', help='')
        c.argument('authentication_requirement_policies', action=AddAuthenticationRequirementPolicies, nargs='*',
                   help='')
        c.argument('client_app_used', help='Identifies the legacy client used for sign-in activity.  Includes Browser, '
                   'Exchange Active Sync, modern clients, IMAP, MAPI, SMTP, and POP.')
        c.argument('conditional_access_status', arg_type=get_enum_type(['success', 'failure', 'notApplied', ''
                   'unknownFutureValue']), help='conditionalAccessStatus')
        c.argument('correlation_id', help='The request ID sent from the client when the sign-in is initiated; used to '
                   'troubleshoot sign-in activity.')
        c.argument('created_date_time', help='Date and time (UTC) the sign-in was initiated. Example: midnight on Jan '
                   '1, 2014 is reported as \'2014-01-01T00:00:00Z\'.')
        c.argument('device_detail', action=AddDeviceDetail, nargs='*', help='deviceDetail')
        c.argument('is_interactive', arg_type=get_three_state_flag(), help='Indicates if a sign-in is interactive or '
                   'not.')
        c.argument('ip_address', help='IP address of the client used to sign in.')
        c.argument('mfa_detail', action=AddMfaDetail, nargs='*', help='mfaDetail')
        c.argument('network_location_details', action=AddNetworkLocationDetails, nargs='*', help='')
        c.argument('original_request_id', help='')
        c.argument('processing_time_in_milliseconds', help='')
        c.argument('risk_detail', arg_type=get_enum_type(['none', 'adminGeneratedTemporaryPassword', ''
                   'userPerformedSecuredPasswordChange', 'userPerformedSecuredPasswordReset', ''
                   'adminConfirmedSigninSafe', 'aiConfirmedSigninSafe', 'userPassedMFADrivenByRiskBasedPolicy', ''
                   'adminDismissedAllRiskForUser', 'adminConfirmedSigninCompromised', 'hidden', ''
                   'adminConfirmedUserCompromised', 'unknownFutureValue']), help='riskDetail')
        c.argument('risk_event_types', nargs='*', help='Risk event types associated with the sign-in. The possible '
                   'values are: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures, '
                   'malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials, investigationsThreatIntelligence,'
                   '  generic, and unknownFutureValue.')
        c.argument('risk_event_types_v2', nargs='*', help='The list of risk event types associated with the sign-in. '
                   'Possible values: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures, '
                   'malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials, investigationsThreatIntelligence,'
                   '  generic, or unknownFutureValue.')
        c.argument('risk_level_aggregated', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_level_during_sign_in', arg_type=get_enum_type(['low', 'medium', 'high', 'hidden', 'none', ''
                   'unknownFutureValue']), help='riskLevel')
        c.argument('risk_state', arg_type=get_enum_type(['none', 'confirmedSafe', 'remediated', 'dismissed', 'atRisk',
                   'confirmedCompromised', 'unknownFutureValue']), help='riskState')
        c.argument('resource_display_name', help='Name of the resource the user signed into.')
        c.argument('resource_id', help='ID of the resource that the user signed into.')
        c.argument('service_principal_id', help='')
        c.argument('service_principal_name', help='')
        c.argument('status', action=AddStatus, nargs='*', help='signInStatus')
        c.argument('token_issuer_name', help='')
        c.argument('token_issuer_type', arg_type=get_enum_type(['AzureAD', 'ADFederationServices',
                   'UnknownFutureValue']), help='tokenIssuerType')
        c.argument('user_agent', help='')
        c.argument('user_display_name', help='Display name of the user that initiated the sign-in.')
        c.argument('user_id', help='ID of the user that initiated the sign-in.')
        c.argument('user_principal_name', help='User principal name of the user that initiated the sign-in.')
        c.argument('location_city', help='Provides the city where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_state', help='Provides the State where the sign-in originated. This is calculated using '
                   'latitude/longitude information from the sign-in activity.')
        c.argument('location_country_or_region', help='Provides the country code info (2 letter code) where the '
                   'sign-in originated.  This is calculated using latitude/longitude information from the sign-in '
                   'activity.')
        c.argument('location_geo_coordinates', action=AddLocationGeoCoordinates, nargs='*', help='geoCoordinates')
        c.argument('target_tenant_id', help='')

    with self.argument_context('auditlogs audit-log create-sign-in') as c:
        c.argument('body', type=validate_file_or_dict, help='New navigation property Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('auditlogs audit-log get-directory-audit') as c:
        c.argument('directory_audit_id', help='key: directoryAudit-id of directoryAudit')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('auditlogs audit-log get-directory-provisioning') as c:
        c.argument('provisioning_object_summary_id', help='key: provisioningObjectSummary-id of '
                   'provisioningObjectSummary')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('auditlogs audit-log get-provisioning') as c:
        c.argument('provisioning_object_summary_id', help='key: provisioningObjectSummary-id of '
                   'provisioningObjectSummary')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('auditlogs audit-log get-restricted-sign-in') as c:
        c.argument('restricted_sign_in_id', help='key: restrictedSignIn-id of restrictedSignIn')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('auditlogs audit-log get-sign-in') as c:
        c.argument('sign_in_id', help='key: signIn-id of signIn')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('auditlogs audit-log list-directory-audit') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('auditlogs audit-log list-directory-provisioning') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('auditlogs audit-log list-provisioning') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('auditlogs audit-log list-restricted-sign-in') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')

    with self.argument_context('auditlogs audit-log list-sign-in') as c:
        c.argument('orderby', nargs='*', help='Order items by property values')
        c.argument('select', nargs='*', help='Select properties to be returned')
        c.argument('expand', nargs='*', help='Expand related entities')
