# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class CommunicationCallRecordOperations:
    """CommunicationCallRecordOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~cloud_communications.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_session(
        self,
        call_record_id: str,
        orderby: Optional[List[Union[str, "models.Enum26"]]] = None,
        select: Optional[List[Union[str, "models.Enum27"]]] = None,
        expand: Optional[List[Union[str, "models.Get8ItemsItem"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfSession"]:
        """Get sessions from communications.

        Get sessions from communications.

        :param call_record_id: key: id of callRecord.
        :type call_record_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~cloud_communications.models.Enum26]
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum27]
        :param expand: Expand related entities.
        :type expand: list[str or ~cloud_communications.models.Get8ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSession or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~cloud_communications.models.CollectionOfSession]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSession"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_session.metadata['url']  # type: ignore
                path_format_arguments = {
                    'callRecord-id': self._serialize.url("call_record_id", call_record_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSession', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_session.metadata = {'url': '/communications/callRecords/{callRecord-id}/sessions'}  # type: ignore

    async def create_session(
        self,
        call_record_id: str,
        id: Optional[str] = None,
        end_date_time: Optional[datetime.datetime] = None,
        failure_info: Optional["models.MicrosoftGraphCallRecordsFailureInfo"] = None,
        modalities: Optional[List[Union[str, "models.MicrosoftGraphCallRecordsModality"]]] = None,
        start_date_time: Optional[datetime.datetime] = None,
        segments: Optional[List["models.MicrosoftGraphCallRecordsSegment"]] = None,
        user_agent_parameter: Optional["models.MicrosoftGraphCallRecordsUserAgent"] = None,
        microsoft_graph_call_records_user_agent: Optional["models.MicrosoftGraphCallRecordsUserAgent"] = None,
        **kwargs
    ) -> "models.MicrosoftGraphCallRecordsSession":
        """Create new navigation property to sessions for communications.

        Create new navigation property to sessions for communications.

        :param call_record_id: key: id of callRecord.
        :type call_record_id: str
        :param id: Read-only.
        :type id: str
        :param end_date_time: UTC time when the last user left the session. The DateTimeOffset type
         represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type end_date_time: ~datetime.datetime
        :param failure_info: failureInfo.
        :type failure_info: ~cloud_communications.models.MicrosoftGraphCallRecordsFailureInfo
        :param modalities: List of modalities present in the session. Possible values are: unknown,
         audio, video, videoBasedScreenSharing, data, screenSharing, unknownFutureValue.
        :type modalities: list[str or ~cloud_communications.models.MicrosoftGraphCallRecordsModality]
        :param start_date_time: UTC fime when the first user joined the session. The DateTimeOffset
         type represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type start_date_time: ~datetime.datetime
        :param segments: The list of segments involved in the session. Read-only. Nullable.
        :type segments: list[~cloud_communications.models.MicrosoftGraphCallRecordsSegment]
        :param user_agent_parameter: userAgent.
        :type user_agent_parameter: ~cloud_communications.models.MicrosoftGraphCallRecordsUserAgent
        :param microsoft_graph_call_records_user_agent: userAgent.
        :type microsoft_graph_call_records_user_agent: ~cloud_communications.models.MicrosoftGraphCallRecordsUserAgent
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCallRecordsSession, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCallRecordsSession
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCallRecordsSession"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCallRecordsSession(id=id, end_date_time=end_date_time, failure_info=failure_info, modalities=modalities, start_date_time=start_date_time, segments=segments, user_agent_caller_user_agent=user_agent_parameter, user_agent_callee_user_agent=microsoft_graph_call_records_user_agent)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_session.metadata['url']  # type: ignore
        path_format_arguments = {
            'callRecord-id': self._serialize.url("call_record_id", call_record_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCallRecordsSession')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCallRecordsSession', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_session.metadata = {'url': '/communications/callRecords/{callRecord-id}/sessions'}  # type: ignore

    async def get_session(
        self,
        call_record_id: str,
        session_id: str,
        select: Optional[List[Union[str, "models.Enum29"]]] = None,
        expand: Optional[List[Union[str, "models.Get3ItemsItem"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphCallRecordsSession":
        """Get sessions from communications.

        Get sessions from communications.

        :param call_record_id: key: id of callRecord.
        :type call_record_id: str
        :param session_id: key: id of session.
        :type session_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum29]
        :param expand: Expand related entities.
        :type expand: list[str or ~cloud_communications.models.Get3ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCallRecordsSession, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCallRecordsSession
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCallRecordsSession"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_session.metadata['url']  # type: ignore
        path_format_arguments = {
            'callRecord-id': self._serialize.url("call_record_id", call_record_id, 'str'),
            'session-id': self._serialize.url("session_id", session_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCallRecordsSession', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_session.metadata = {'url': '/communications/callRecords/{callRecord-id}/sessions/{session-id}'}  # type: ignore

    async def update_session(
        self,
        call_record_id: str,
        session_id: str,
        id: Optional[str] = None,
        end_date_time: Optional[datetime.datetime] = None,
        failure_info: Optional["models.MicrosoftGraphCallRecordsFailureInfo"] = None,
        modalities: Optional[List[Union[str, "models.MicrosoftGraphCallRecordsModality"]]] = None,
        start_date_time: Optional[datetime.datetime] = None,
        segments: Optional[List["models.MicrosoftGraphCallRecordsSegment"]] = None,
        user_agent_parameter: Optional["models.MicrosoftGraphCallRecordsUserAgent"] = None,
        microsoft_graph_call_records_user_agent: Optional["models.MicrosoftGraphCallRecordsUserAgent"] = None,
        **kwargs
    ) -> None:
        """Update the navigation property sessions in communications.

        Update the navigation property sessions in communications.

        :param call_record_id: key: id of callRecord.
        :type call_record_id: str
        :param session_id: key: id of session.
        :type session_id: str
        :param id: Read-only.
        :type id: str
        :param end_date_time: UTC time when the last user left the session. The DateTimeOffset type
         represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type end_date_time: ~datetime.datetime
        :param failure_info: failureInfo.
        :type failure_info: ~cloud_communications.models.MicrosoftGraphCallRecordsFailureInfo
        :param modalities: List of modalities present in the session. Possible values are: unknown,
         audio, video, videoBasedScreenSharing, data, screenSharing, unknownFutureValue.
        :type modalities: list[str or ~cloud_communications.models.MicrosoftGraphCallRecordsModality]
        :param start_date_time: UTC fime when the first user joined the session. The DateTimeOffset
         type represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type start_date_time: ~datetime.datetime
        :param segments: The list of segments involved in the session. Read-only. Nullable.
        :type segments: list[~cloud_communications.models.MicrosoftGraphCallRecordsSegment]
        :param user_agent_parameter: userAgent.
        :type user_agent_parameter: ~cloud_communications.models.MicrosoftGraphCallRecordsUserAgent
        :param microsoft_graph_call_records_user_agent: userAgent.
        :type microsoft_graph_call_records_user_agent: ~cloud_communications.models.MicrosoftGraphCallRecordsUserAgent
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCallRecordsSession(id=id, end_date_time=end_date_time, failure_info=failure_info, modalities=modalities, start_date_time=start_date_time, segments=segments, user_agent_caller_user_agent=user_agent_parameter, user_agent_callee_user_agent=microsoft_graph_call_records_user_agent)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_session.metadata['url']  # type: ignore
        path_format_arguments = {
            'callRecord-id': self._serialize.url("call_record_id", call_record_id, 'str'),
            'session-id': self._serialize.url("session_id", session_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCallRecordsSession')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_session.metadata = {'url': '/communications/callRecords/{callRecord-id}/sessions/{session-id}'}  # type: ignore

    async def delete_session(
        self,
        call_record_id: str,
        session_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property sessions for communications.

        Delete navigation property sessions for communications.

        :param call_record_id: key: id of callRecord.
        :type call_record_id: str
        :param session_id: key: id of session.
        :type session_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_session.metadata['url']  # type: ignore
        path_format_arguments = {
            'callRecord-id': self._serialize.url("call_record_id", call_record_id, 'str'),
            'session-id': self._serialize.url("session_id", session_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_session.metadata = {'url': '/communications/callRecords/{callRecord-id}/sessions/{session-id}'}  # type: ignore
