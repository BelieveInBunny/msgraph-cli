# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class CommunicationCallOperations:
    """CommunicationCallOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~cloud_communications.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def answer(
        self,
        call_id: str,
        callback_uri: Optional[str] = None,
        media_config: Optional[Dict[str, object]] = None,
        accepted_modalities: Optional[List[Union[str, "models.MicrosoftGraphModality"]]] = None,
        **kwargs
    ) -> None:
        """Invoke action answer.

        Invoke action answer.

        :param call_id: key: id of call.
        :type call_id: str
        :param callback_uri:
        :type callback_uri: str
        :param media_config: mediaConfig.
        :type media_config: dict[str, object]
        :param accepted_modalities:
        :type accepted_modalities: list[str or ~cloud_communications.models.MicrosoftGraphModality]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsQvpqn4CommunicationsCallsCallIdMicrosoftGraphAnswerPostRequestbodyContentApplicationJsonSchema(callback_uri=callback_uri, media_config=media_config, accepted_modalities=accepted_modalities)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.answer.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsQvpqn4CommunicationsCallsCallIdMicrosoftGraphAnswerPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    answer.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.answer'}  # type: ignore

    async def cancel_media_processing(
        self,
        call_id: str,
        client_context: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphCancelMediaProcessingOperation":
        """Invoke action cancelMediaProcessing.

        Invoke action cancelMediaProcessing.

        :param call_id: key: id of call.
        :type call_id: str
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCancelMediaProcessingOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCancelMediaProcessingOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCancelMediaProcessingOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsYp37FjCommunicationsCallsCallIdMicrosoftGraphCancelmediaprocessingPostRequestbodyContentApplicationJsonSchema(client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.cancel_media_processing.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsYp37FjCommunicationsCallsCallIdMicrosoftGraphCancelmediaprocessingPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCancelMediaProcessingOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    cancel_media_processing.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.cancelMediaProcessing'}  # type: ignore

    async def change_screen_sharing_role(
        self,
        call_id: str,
        role: Optional[Union[str, "models.MicrosoftGraphScreenSharingRole"]] = None,
        **kwargs
    ) -> None:
        """Invoke action changeScreenSharingRole.

        Invoke action changeScreenSharingRole.

        :param call_id: key: id of call.
        :type call_id: str
        :param role:
        :type role: str or ~cloud_communications.models.MicrosoftGraphScreenSharingRole
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsOj95ZpCommunicationsCallsCallIdMicrosoftGraphChangescreensharingrolePostRequestbodyContentApplicationJsonSchema(role=role)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.change_screen_sharing_role.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsOj95ZpCommunicationsCallsCallIdMicrosoftGraphChangescreensharingrolePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    change_screen_sharing_role.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.changeScreenSharingRole'}  # type: ignore

    async def keep_alive(
        self,
        call_id: str,
        **kwargs
    ) -> None:
        """Invoke action keepAlive.

        Invoke action keepAlive.

        :param call_id: key: id of call.
        :type call_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.keep_alive.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    keep_alive.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.keepAlive'}  # type: ignore

    async def mute(
        self,
        call_id: str,
        client_context: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMuteParticipantOperation":
        """Invoke action mute.

        Invoke action mute.

        :param call_id: key: id of call.
        :type call_id: str
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMuteParticipantOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphMuteParticipantOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMuteParticipantOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths13Zt223CommunicationsCallsCallIdMicrosoftGraphMutePostRequestbodyContentApplicationJsonSchema(client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.mute.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths13Zt223CommunicationsCallsCallIdMicrosoftGraphMutePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMuteParticipantOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    mute.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.mute'}  # type: ignore

    async def play_prompt(
        self,
        call_id: str,
        prompts: Optional[List[Dict[str, object]]] = None,
        client_context: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphPlayPromptOperation":
        """Invoke action playPrompt.

        Invoke action playPrompt.

        :param call_id: key: id of call.
        :type call_id: str
        :param prompts:
        :type prompts: list[dict[str, object]]
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPlayPromptOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphPlayPromptOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPlayPromptOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths1Gzqcv2CommunicationsCallsCallIdMicrosoftGraphPlaypromptPostRequestbodyContentApplicationJsonSchema(prompts=prompts, client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.play_prompt.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths1Gzqcv2CommunicationsCallsCallIdMicrosoftGraphPlaypromptPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPlayPromptOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    play_prompt.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.playPrompt'}  # type: ignore

    async def record_response(
        self,
        call_id: str,
        prompts: Optional[List[Dict[str, object]]] = None,
        barge_in_allowed: Optional[bool] = False,
        initial_silence_timeout_in_seconds: Optional[int] = None,
        max_silence_timeout_in_seconds: Optional[int] = None,
        max_record_duration_in_seconds: Optional[int] = None,
        play_beep: Optional[bool] = False,
        stop_tones: Optional[List[str]] = None,
        client_context: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphRecordOperation":
        """Invoke action recordResponse.

        Invoke action recordResponse.

        :param call_id: key: id of call.
        :type call_id: str
        :param prompts:
        :type prompts: list[dict[str, object]]
        :param barge_in_allowed:
        :type barge_in_allowed: bool
        :param initial_silence_timeout_in_seconds:
        :type initial_silence_timeout_in_seconds: int
        :param max_silence_timeout_in_seconds:
        :type max_silence_timeout_in_seconds: int
        :param max_record_duration_in_seconds:
        :type max_record_duration_in_seconds: int
        :param play_beep:
        :type play_beep: bool
        :param stop_tones:
        :type stop_tones: list[str]
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphRecordOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphRecordOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphRecordOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths14Wb7KqCommunicationsCallsCallIdMicrosoftGraphRecordresponsePostRequestbodyContentApplicationJsonSchema(prompts=prompts, barge_in_allowed=barge_in_allowed, initial_silence_timeout_in_seconds=initial_silence_timeout_in_seconds, max_silence_timeout_in_seconds=max_silence_timeout_in_seconds, max_record_duration_in_seconds=max_record_duration_in_seconds, play_beep=play_beep, stop_tones=stop_tones, client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.record_response.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths14Wb7KqCommunicationsCallsCallIdMicrosoftGraphRecordresponsePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphRecordOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    record_response.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.recordResponse'}  # type: ignore

    async def redirect(
        self,
        call_id: str,
        targets: Optional[List["models.MicrosoftGraphInvitationParticipantInfo"]] = None,
        timeout: Optional[int] = None,
        callback_uri: Optional[str] = None,
        **kwargs
    ) -> None:
        """Invoke action redirect.

        Invoke action redirect.

        :param call_id: key: id of call.
        :type call_id: str
        :param targets:
        :type targets: list[~cloud_communications.models.MicrosoftGraphInvitationParticipantInfo]
        :param timeout:
        :type timeout: int
        :param callback_uri:
        :type callback_uri: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths183Gi8UCommunicationsCallsCallIdMicrosoftGraphRedirectPostRequestbodyContentApplicationJsonSchema(targets=targets, timeout=timeout, callback_uri=callback_uri)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.redirect.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths183Gi8UCommunicationsCallsCallIdMicrosoftGraphRedirectPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    redirect.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.redirect'}  # type: ignore

    async def reject(
        self,
        call_id: str,
        reason: Optional[Union[str, "models.MicrosoftGraphRejectReason"]] = None,
        callback_uri: Optional[str] = None,
        **kwargs
    ) -> None:
        """Invoke action reject.

        Invoke action reject.

        :param call_id: key: id of call.
        :type call_id: str
        :param reason:
        :type reason: str or ~cloud_communications.models.MicrosoftGraphRejectReason
        :param callback_uri:
        :type callback_uri: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths4QrghdCommunicationsCallsCallIdMicrosoftGraphRejectPostRequestbodyContentApplicationJsonSchema(reason=reason, callback_uri=callback_uri)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.reject.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths4QrghdCommunicationsCallsCallIdMicrosoftGraphRejectPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    reject.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.reject'}  # type: ignore

    async def subscribe_to_tone(
        self,
        call_id: str,
        client_context: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphSubscribeToToneOperation":
        """Invoke action subscribeToTone.

        Invoke action subscribeToTone.

        :param call_id: key: id of call.
        :type call_id: str
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSubscribeToToneOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphSubscribeToToneOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSubscribeToToneOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsXyl6WiCommunicationsCallsCallIdMicrosoftGraphSubscribetotonePostRequestbodyContentApplicationJsonSchema(client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.subscribe_to_tone.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsXyl6WiCommunicationsCallsCallIdMicrosoftGraphSubscribetotonePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSubscribeToToneOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    subscribe_to_tone.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.subscribeToTone'}  # type: ignore

    async def transfer(
        self,
        call_id: str,
        replaces_call_id: Optional[str] = None,
        display_name: Optional[str] = None,
        id: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        display_name1: Optional[str] = None,
        id1: Optional[str] = None,
        **kwargs
    ) -> None:
        """Invoke action transfer.

        Invoke action transfer.

        :param call_id: key: id of call.
        :type call_id: str
        :param replaces_call_id: Optional. The call which the target identity is currently a part of.
         This call will be dropped once the participant is added.
        :type replaces_call_id: str
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param id: Unique identifier for the identity.
        :type id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths4Zbm7LCommunicationsCallsCallIdMicrosoftGraphTransferPostRequestbodyContentApplicationJsonSchema(replaces_call_id=replaces_call_id, display_name_transfer_target_identity_user_display_name=display_name, id_transfer_target_identity_user_id=id, display_name_transfer_target_identity_device_display_name=microsoft_graph_identity_display_name, id_transfer_target_identity_device_id=microsoft_graph_identity_id, display_name_transfer_target_identity_application_display_name=display_name1, id_transfer_target_identity_application_id=id1)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.transfer.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths4Zbm7LCommunicationsCallsCallIdMicrosoftGraphTransferPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    transfer.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.transfer'}  # type: ignore

    async def unmute(
        self,
        call_id: str,
        client_context: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphUnmuteParticipantOperation":
        """Invoke action unmute.

        Invoke action unmute.

        :param call_id: key: id of call.
        :type call_id: str
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUnmuteParticipantOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphUnmuteParticipantOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUnmuteParticipantOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths1X7BvttCommunicationsCallsCallIdMicrosoftGraphUnmutePostRequestbodyContentApplicationJsonSchema(client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.unmute.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths1X7BvttCommunicationsCallsCallIdMicrosoftGraphUnmutePostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUnmuteParticipantOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    unmute.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.unmute'}  # type: ignore

    async def update_recording_status(
        self,
        call_id: str,
        status: Optional[Union[str, "models.MicrosoftGraphRecordingStatus"]] = None,
        client_context: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphUpdateRecordingStatusOperation":
        """Invoke action updateRecordingStatus.

        Invoke action updateRecordingStatus.

        :param call_id: key: id of call.
        :type call_id: str
        :param status:
        :type status: str or ~cloud_communications.models.MicrosoftGraphRecordingStatus
        :param client_context:
        :type client_context: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphUpdateRecordingStatusOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphUpdateRecordingStatusOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphUpdateRecordingStatusOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.PathsEipedyCommunicationsCallsCallIdMicrosoftGraphUpdaterecordingstatusPostRequestbodyContentApplicationJsonSchema(status=status, client_context=client_context)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_recording_status.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'PathsEipedyCommunicationsCallsCallIdMicrosoftGraphUpdaterecordingstatusPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphUpdateRecordingStatusOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    update_recording_status.metadata = {'url': '/communications/calls/{call-id}/microsoft.graph.updateRecordingStatus'}  # type: ignore

    def list_operation(
        self,
        call_id: str,
        orderby: Optional[List[Union[str, "models.Enum41"]]] = None,
        select: Optional[List[Union[str, "models.Enum42"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfCommsOperation"]:
        """Get operations from communications.

        Get operations from communications.

        :param call_id: key: id of call.
        :type call_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~cloud_communications.models.Enum41]
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum42]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfCommsOperation or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~cloud_communications.models.CollectionOfCommsOperation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfCommsOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_operation.metadata['url']  # type: ignore
                path_format_arguments = {
                    'call-id': self._serialize.url("call_id", call_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfCommsOperation', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_operation.metadata = {'url': '/communications/calls/{call-id}/operations'}  # type: ignore

    async def create_operation(
        self,
        call_id: str,
        id: Optional[str] = None,
        client_context: Optional[str] = None,
        status: Optional[Union[str, "models.MicrosoftGraphOperationStatus"]] = None,
        code: Optional[int] = None,
        message: Optional[str] = None,
        subcode: Optional[int] = None,
        **kwargs
    ) -> "models.MicrosoftGraphCommsOperation":
        """Create new navigation property to operations for communications.

        Create new navigation property to operations for communications.

        :param call_id: key: id of call.
        :type call_id: str
        :param id: Read-only.
        :type id: str
        :param client_context: Unique Client Context string. Max limit is 256 chars.
        :type client_context: str
        :param status:
        :type status: str or ~cloud_communications.models.MicrosoftGraphOperationStatus
        :param code: The result code.
        :type code: int
        :param message: The message.
        :type message: str
        :param subcode: The result sub-code.
        :type subcode: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCommsOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCommsOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCommsOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCommsOperation(id=id, client_context=client_context, status=status, code=code, message=message, subcode=subcode)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCommsOperation')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCommsOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_operation.metadata = {'url': '/communications/calls/{call-id}/operations'}  # type: ignore

    async def get_operation(
        self,
        call_id: str,
        comms_operation_id: str,
        select: Optional[List[Union[str, "models.Enum43"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphCommsOperation":
        """Get operations from communications.

        Get operations from communications.

        :param call_id: key: id of call.
        :type call_id: str
        :param comms_operation_id: key: id of commsOperation.
        :type comms_operation_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum43]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCommsOperation, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCommsOperation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCommsOperation"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
            'commsOperation-id': self._serialize.url("comms_operation_id", comms_operation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCommsOperation', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_operation.metadata = {'url': '/communications/calls/{call-id}/operations/{commsOperation-id}'}  # type: ignore

    async def update_operation(
        self,
        call_id: str,
        comms_operation_id: str,
        id: Optional[str] = None,
        client_context: Optional[str] = None,
        status: Optional[Union[str, "models.MicrosoftGraphOperationStatus"]] = None,
        code: Optional[int] = None,
        message: Optional[str] = None,
        subcode: Optional[int] = None,
        **kwargs
    ) -> None:
        """Update the navigation property operations in communications.

        Update the navigation property operations in communications.

        :param call_id: key: id of call.
        :type call_id: str
        :param comms_operation_id: key: id of commsOperation.
        :type comms_operation_id: str
        :param id: Read-only.
        :type id: str
        :param client_context: Unique Client Context string. Max limit is 256 chars.
        :type client_context: str
        :param status:
        :type status: str or ~cloud_communications.models.MicrosoftGraphOperationStatus
        :param code: The result code.
        :type code: int
        :param message: The message.
        :type message: str
        :param subcode: The result sub-code.
        :type subcode: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCommsOperation(id=id, client_context=client_context, status=status, code=code, message=message, subcode=subcode)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
            'commsOperation-id': self._serialize.url("comms_operation_id", comms_operation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCommsOperation')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_operation.metadata = {'url': '/communications/calls/{call-id}/operations/{commsOperation-id}'}  # type: ignore

    async def delete_operation(
        self,
        call_id: str,
        comms_operation_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property operations for communications.

        Delete navigation property operations for communications.

        :param call_id: key: id of call.
        :type call_id: str
        :param comms_operation_id: key: id of commsOperation.
        :type comms_operation_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_operation.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
            'commsOperation-id': self._serialize.url("comms_operation_id", comms_operation_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_operation.metadata = {'url': '/communications/calls/{call-id}/operations/{commsOperation-id}'}  # type: ignore

    def list_participant(
        self,
        call_id: str,
        orderby: Optional[List[Union[str, "models.Enum44"]]] = None,
        select: Optional[List[Union[str, "models.Enum45"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfParticipant"]:
        """Get participants from communications.

        Get participants from communications.

        :param call_id: key: id of call.
        :type call_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~cloud_communications.models.Enum44]
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum45]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfParticipant or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~cloud_communications.models.CollectionOfParticipant]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfParticipant"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_participant.metadata['url']  # type: ignore
                path_format_arguments = {
                    'call-id': self._serialize.url("call_id", call_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfParticipant', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_participant.metadata = {'url': '/communications/calls/{call-id}/participants'}  # type: ignore

    async def create_participant(
        self,
        call_id: str,
        id: Optional[str] = None,
        is_in_lobby: Optional[bool] = None,
        is_muted: Optional[bool] = None,
        media_streams: Optional[List["models.MicrosoftGraphMediaStream"]] = None,
        recording_status: Optional[Union[str, "models.MicrosoftGraphRecordingStatus"]] = None,
        display_name: Optional[str] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        id1: Optional[str] = None,
        display_name1: Optional[str] = None,
        id2: Optional[str] = None,
        country_code: Optional[str] = None,
        endpoint_type: Optional[Union[str, "models.MicrosoftGraphEndpointType"]] = None,
        language_id: Optional[str] = None,
        region: Optional[str] = None,
        display_name2: Optional[str] = None,
        id3: Optional[str] = None,
        display_name3: Optional[str] = None,
        id4: Optional[str] = None,
        display_name4: Optional[str] = None,
        id5: Optional[str] = None,
        **kwargs
    ) -> "models.MicrosoftGraphParticipant":
        """Create new navigation property to participants for communications.

        Create new navigation property to participants for communications.

        :param call_id: key: id of call.
        :type call_id: str
        :param id: Read-only.
        :type id: str
        :param is_in_lobby: true if the participant is in lobby.
        :type is_in_lobby: bool
        :param is_muted: true if the participant is muted (client or server muted).
        :type is_muted: bool
        :param media_streams: The list of media streams.
        :type media_streams: list[~cloud_communications.models.MicrosoftGraphMediaStream]
        :param recording_status:
        :type recording_status: str or ~cloud_communications.models.MicrosoftGraphRecordingStatus
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param country_code: The ISO 3166-1 Alpha-2 country code of the participant's best estimated
         physical location at the start of the call. Read-only.
        :type country_code: str
        :param endpoint_type:
        :type endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
        :param language_id: The language culture string. Read-only.
        :type language_id: str
        :param region: The home region of the participant. This can be a country, a continent, or a
         larger geographic region. This does not change based on the participant's current physical
         location. Read-only.
        :type region: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphParticipant, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphParticipant
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphParticipant"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphParticipant(id=id, is_in_lobby=is_in_lobby, is_muted=is_muted, media_streams=media_streams, recording_status=recording_status, display_name_recording_info_initiator_user_display_name=display_name, id_recording_info_initiator_user_id=microsoft_graph_identity_id, display_name_recording_info_initiator_device_display_name=microsoft_graph_identity_display_name, id_recording_info_initiator_device_id=id1, display_name_recording_info_initiator_application_display_name=display_name1, id_recording_info_initiator_application_id=id2, country_code=country_code, endpoint_type=endpoint_type, language_id=language_id, region=region, display_name_info_identity_user_display_name=display_name2, id_info_identity_user_id=id3, display_name_info_identity_device_display_name=display_name3, id_info_identity_device_id=id4, display_name_info_identity_application_display_name=display_name4, id_info_identity_application_id=id5)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_participant.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphParticipant')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphParticipant', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_participant.metadata = {'url': '/communications/calls/{call-id}/participants'}  # type: ignore

    async def get_participant(
        self,
        call_id: str,
        participant_id: str,
        select: Optional[List[Union[str, "models.Enum46"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphParticipant":
        """Get participants from communications.

        Get participants from communications.

        :param call_id: key: id of call.
        :type call_id: str
        :param participant_id: key: id of participant.
        :type participant_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum46]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphParticipant, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphParticipant
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphParticipant"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_participant.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
            'participant-id': self._serialize.url("participant_id", participant_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphParticipant', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_participant.metadata = {'url': '/communications/calls/{call-id}/participants/{participant-id}'}  # type: ignore

    async def update_participant(
        self,
        call_id: str,
        participant_id: str,
        id: Optional[str] = None,
        is_in_lobby: Optional[bool] = None,
        is_muted: Optional[bool] = None,
        media_streams: Optional[List["models.MicrosoftGraphMediaStream"]] = None,
        recording_status: Optional[Union[str, "models.MicrosoftGraphRecordingStatus"]] = None,
        display_name: Optional[str] = None,
        microsoft_graph_identity_id: Optional[str] = None,
        microsoft_graph_identity_display_name: Optional[str] = None,
        id1: Optional[str] = None,
        display_name1: Optional[str] = None,
        id2: Optional[str] = None,
        country_code: Optional[str] = None,
        endpoint_type: Optional[Union[str, "models.MicrosoftGraphEndpointType"]] = None,
        language_id: Optional[str] = None,
        region: Optional[str] = None,
        display_name2: Optional[str] = None,
        id3: Optional[str] = None,
        display_name3: Optional[str] = None,
        id4: Optional[str] = None,
        display_name4: Optional[str] = None,
        id5: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update the navigation property participants in communications.

        Update the navigation property participants in communications.

        :param call_id: key: id of call.
        :type call_id: str
        :param participant_id: key: id of participant.
        :type participant_id: str
        :param id: Read-only.
        :type id: str
        :param is_in_lobby: true if the participant is in lobby.
        :type is_in_lobby: bool
        :param is_muted: true if the participant is muted (client or server muted).
        :type is_muted: bool
        :param media_streams: The list of media streams.
        :type media_streams: list[~cloud_communications.models.MicrosoftGraphMediaStream]
        :param recording_status:
        :type recording_status: str or ~cloud_communications.models.MicrosoftGraphRecordingStatus
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param country_code: The ISO 3166-1 Alpha-2 country code of the participant's best estimated
         physical location at the start of the call. Read-only.
        :type country_code: str
        :param endpoint_type:
        :type endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
        :param language_id: The language culture string. Read-only.
        :type language_id: str
        :param region: The home region of the participant. This can be a country, a continent, or a
         larger geographic region. This does not change based on the participant's current physical
         location. Read-only.
        :type region: str
        :param display_name2: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name2: str
        :param id3: Unique identifier for the identity.
        :type id3: str
        :param display_name3: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name3: str
        :param id4: Unique identifier for the identity.
        :type id4: str
        :param display_name4: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name4: str
        :param id5: Unique identifier for the identity.
        :type id5: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphParticipant(id=id, is_in_lobby=is_in_lobby, is_muted=is_muted, media_streams=media_streams, recording_status=recording_status, display_name_recording_info_initiator_user_display_name=display_name, id_recording_info_initiator_user_id=microsoft_graph_identity_id, display_name_recording_info_initiator_device_display_name=microsoft_graph_identity_display_name, id_recording_info_initiator_device_id=id1, display_name_recording_info_initiator_application_display_name=display_name1, id_recording_info_initiator_application_id=id2, country_code=country_code, endpoint_type=endpoint_type, language_id=language_id, region=region, display_name_info_identity_user_display_name=display_name2, id_info_identity_user_id=id3, display_name_info_identity_device_display_name=display_name3, id_info_identity_device_id=id4, display_name_info_identity_application_display_name=display_name4, id_info_identity_application_id=id5)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_participant.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
            'participant-id': self._serialize.url("participant_id", participant_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphParticipant')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_participant.metadata = {'url': '/communications/calls/{call-id}/participants/{participant-id}'}  # type: ignore

    async def delete_participant(
        self,
        call_id: str,
        participant_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property participants for communications.

        Delete navigation property participants for communications.

        :param call_id: key: id of call.
        :type call_id: str
        :param participant_id: key: id of participant.
        :type participant_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_participant.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
            'participant-id': self._serialize.url("participant_id", participant_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_participant.metadata = {'url': '/communications/calls/{call-id}/participants/{participant-id}'}  # type: ignore

    async def log_teleconference_device_quality(
        self,
        call_chain_id: Optional[str] = None,
        cloud_service_deployment_environment: Optional[str] = None,
        cloud_service_deployment_id: Optional[str] = None,
        cloud_service_instance_name: Optional[str] = None,
        cloud_service_name: Optional[str] = None,
        device_description: Optional[str] = None,
        device_name: Optional[str] = None,
        media_leg_id: Optional[str] = None,
        media_quality_list: Optional[List["models.MicrosoftGraphTeleconferenceDeviceMediaQuality"]] = None,
        participant_id: Optional[str] = None,
        **kwargs
    ) -> None:
        """Invoke action logTeleconferenceDeviceQuality.

        Invoke action logTeleconferenceDeviceQuality.

        :param call_chain_id: A unique identifier for all  the participant calls in a conference or a
         unique identifier for two participant calls in P2P call. This needs to be copied over from
         Microsoft.Graph.Call.CallChainId.
        :type call_chain_id: str
        :param cloud_service_deployment_environment: A geo-region where the service is deployed, such
         as ProdNoam.
        :type cloud_service_deployment_environment: str
        :param cloud_service_deployment_id: A unique deployment identifier assigned by Azure.
        :type cloud_service_deployment_id: str
        :param cloud_service_instance_name: The Azure deployed cloud service instance name, such as
         FrontEnd_IN_3.
        :type cloud_service_instance_name: str
        :param cloud_service_name: The Azure deployed cloud service name, such as contoso.cloudapp.net.
        :type cloud_service_name: str
        :param device_description: Any additional description, such as VTC Bldg 30/21.
        :type device_description: str
        :param device_name: The user media agent name, such as Cisco SX80.
        :type device_name: str
        :param media_leg_id: A unique identifier for a specific media leg of a participant in a
         conference.  One participant can have multiple media leg identifiers if retargeting happens.
         CVI partner assigns this value.
        :type media_leg_id: str
        :param media_quality_list: The list of media qualities in a media session (call), such as audio
         quality, video quality, and/or screen sharing quality.
        :type media_quality_list: list[~cloud_communications.models.MicrosoftGraphTeleconferenceDeviceMediaQuality]
        :param participant_id: A unique identifier for a specific participant in a conference. The CVI
         partner needs to copy over Call.MyParticipantId to this property.
        :type participant_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.Paths1JbdsmaCommunicationsCallsMicrosoftGraphLogteleconferencedevicequalityPostRequestbodyContentApplicationJsonSchema(call_chain_id=call_chain_id, cloud_service_deployment_environment=cloud_service_deployment_environment, cloud_service_deployment_id=cloud_service_deployment_id, cloud_service_instance_name=cloud_service_instance_name, cloud_service_name=cloud_service_name, device_description=device_description, device_name=device_name, media_leg_id=media_leg_id, media_quality_list=media_quality_list, participant_id=participant_id)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.log_teleconference_device_quality.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'Paths1JbdsmaCommunicationsCallsMicrosoftGraphLogteleconferencedevicequalityPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    log_teleconference_device_quality.metadata = {'url': '/communications/calls/microsoft.graph.logTeleconferenceDeviceQuality'}  # type: ignore
