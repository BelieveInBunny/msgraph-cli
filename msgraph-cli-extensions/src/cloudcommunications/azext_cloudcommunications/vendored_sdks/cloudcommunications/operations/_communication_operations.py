# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class CommunicationOperations(object):
    """CommunicationOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~cloud_communications.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_call_record(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Get5ItemsItem"]]]
        select=None,  # type: Optional[List[Union[str, "models.Get6ItemsItem"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get7ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfCallRecord"]
        """Get callRecords from communications.

        Get callRecords from communications.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~cloud_communications.models.Get5ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Get6ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~cloud_communications.models.Get7ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfCallRecord or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~cloud_communications.models.CollectionOfCallRecord]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfCallRecord"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_call_record.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfCallRecord', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_call_record.metadata = {'url': '/communications/callRecords'}  # type: ignore

    def create_call_record(
        self,
        id=None,  # type: Optional[str]
        end_date_time=None,  # type: Optional[datetime.datetime]
        join_web_url=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        modalities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphCallRecordsModality"]]]
        participants=None,  # type: Optional[List["models.MicrosoftGraphIdentitySet"]]
        start_date_time=None,  # type: Optional[datetime.datetime]
        type=None,  # type: Optional[Union[str, "models.MicrosoftGraphCallRecordsCallType"]]
        version=None,  # type: Optional[int]
        sessions=None,  # type: Optional[List["models.MicrosoftGraphCallRecordsSession"]]
        display_name=None,  # type: Optional[str]
        microsoft_graph_identity_id=None,  # type: Optional[str]
        microsoft_graph_identity_display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        display_name1=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCallRecordsCallRecord"
        """Create new navigation property to callRecords for communications.

        Create new navigation property to callRecords for communications.

        :param id: Read-only.
        :type id: str
        :param end_date_time: UTC time when the last user left the call. The DateTimeOffset type
         represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type end_date_time: ~datetime.datetime
        :param join_web_url: Meeting URL associated to the call. May not be available for a peerToPeer
         call record type.
        :type join_web_url: str
        :param last_modified_date_time: UTC time when the call record was created. The DatetimeOffset
         type represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param modalities: List of all the modalities used in the call. Possible values are: unknown,
         audio, video, videoBasedScreenSharing, data, screenSharing, unknownFutureValue.
        :type modalities: list[str or ~cloud_communications.models.MicrosoftGraphCallRecordsModality]
        :param participants: List of distinct identities involved in the call.
        :type participants: list[~cloud_communications.models.MicrosoftGraphIdentitySet]
        :param start_date_time: UTC time when the first user joined the call. The DatetimeOffset type
         represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type start_date_time: ~datetime.datetime
        :param type:
        :type type: str or ~cloud_communications.models.MicrosoftGraphCallRecordsCallType
        :param version: Monotonically increasing version of the call record. Higher version call
         records with the same id includes additional data compared to the lower version.
        :type version: long
        :param sessions: List of sessions involved in the call. Peer-to-peer calls typically only have
         one session, whereas group calls typically have at least one session per participant. Read-
         only. Nullable.
        :type sessions: list[~cloud_communications.models.MicrosoftGraphCallRecordsSession]
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCallRecordsCallRecord, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCallRecordsCallRecord
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCallRecordsCallRecord"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCallRecordsCallRecord(id=id, end_date_time=end_date_time, join_web_url=join_web_url, last_modified_date_time=last_modified_date_time, modalities=modalities, participants=participants, start_date_time=start_date_time, type=type, version=version, sessions=sessions, display_name_organizer_user_display_name=display_name, id_organizer_user_id=microsoft_graph_identity_id, display_name_organizer_device_display_name=microsoft_graph_identity_display_name, id_organizer_device_id=id1, display_name_organizer_application_display_name=display_name1, id_organizer_application_id=id2)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_call_record.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCallRecordsCallRecord')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCallRecordsCallRecord', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_call_record.metadata = {'url': '/communications/callRecords'}  # type: ignore

    def get_call_record(
        self,
        call_record_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum24"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Get2ItemsItem"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCallRecordsCallRecord"
        """Get callRecords from communications.

        Get callRecords from communications.

        :param call_record_id: key: id of callRecord.
        :type call_record_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum24]
        :param expand: Expand related entities.
        :type expand: list[str or ~cloud_communications.models.Get2ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCallRecordsCallRecord, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCallRecordsCallRecord
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCallRecordsCallRecord"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_call_record.metadata['url']  # type: ignore
        path_format_arguments = {
            'callRecord-id': self._serialize.url("call_record_id", call_record_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCallRecordsCallRecord', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_call_record.metadata = {'url': '/communications/callRecords/{callRecord-id}'}  # type: ignore

    def update_call_record(
        self,
        call_record_id,  # type: str
        id=None,  # type: Optional[str]
        end_date_time=None,  # type: Optional[datetime.datetime]
        join_web_url=None,  # type: Optional[str]
        last_modified_date_time=None,  # type: Optional[datetime.datetime]
        modalities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphCallRecordsModality"]]]
        participants=None,  # type: Optional[List["models.MicrosoftGraphIdentitySet"]]
        start_date_time=None,  # type: Optional[datetime.datetime]
        type=None,  # type: Optional[Union[str, "models.MicrosoftGraphCallRecordsCallType"]]
        version=None,  # type: Optional[int]
        sessions=None,  # type: Optional[List["models.MicrosoftGraphCallRecordsSession"]]
        display_name=None,  # type: Optional[str]
        microsoft_graph_identity_id=None,  # type: Optional[str]
        microsoft_graph_identity_display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        display_name1=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property callRecords in communications.

        Update the navigation property callRecords in communications.

        :param call_record_id: key: id of callRecord.
        :type call_record_id: str
        :param id: Read-only.
        :type id: str
        :param end_date_time: UTC time when the last user left the call. The DateTimeOffset type
         represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type end_date_time: ~datetime.datetime
        :param join_web_url: Meeting URL associated to the call. May not be available for a peerToPeer
         call record type.
        :type join_web_url: str
        :param last_modified_date_time: UTC time when the call record was created. The DatetimeOffset
         type represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type last_modified_date_time: ~datetime.datetime
        :param modalities: List of all the modalities used in the call. Possible values are: unknown,
         audio, video, videoBasedScreenSharing, data, screenSharing, unknownFutureValue.
        :type modalities: list[str or ~cloud_communications.models.MicrosoftGraphCallRecordsModality]
        :param participants: List of distinct identities involved in the call.
        :type participants: list[~cloud_communications.models.MicrosoftGraphIdentitySet]
        :param start_date_time: UTC time when the first user joined the call. The DatetimeOffset type
         represents date and time information using ISO 8601 format and is always in UTC time. For
         example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z'.
        :type start_date_time: ~datetime.datetime
        :param type:
        :type type: str or ~cloud_communications.models.MicrosoftGraphCallRecordsCallType
        :param version: Monotonically increasing version of the call record. Higher version call
         records with the same id includes additional data compared to the lower version.
        :type version: long
        :param sessions: List of sessions involved in the call. Peer-to-peer calls typically only have
         one session, whereas group calls typically have at least one session per participant. Read-
         only. Nullable.
        :type sessions: list[~cloud_communications.models.MicrosoftGraphCallRecordsSession]
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCallRecordsCallRecord(id=id, end_date_time=end_date_time, join_web_url=join_web_url, last_modified_date_time=last_modified_date_time, modalities=modalities, participants=participants, start_date_time=start_date_time, type=type, version=version, sessions=sessions, display_name_organizer_user_display_name=display_name, id_organizer_user_id=microsoft_graph_identity_id, display_name_organizer_device_display_name=microsoft_graph_identity_display_name, id_organizer_device_id=id1, display_name_organizer_application_display_name=display_name1, id_organizer_application_id=id2)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_call_record.metadata['url']  # type: ignore
        path_format_arguments = {
            'callRecord-id': self._serialize.url("call_record_id", call_record_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCallRecordsCallRecord')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_call_record.metadata = {'url': '/communications/callRecords/{callRecord-id}'}  # type: ignore

    def delete_call_record(
        self,
        call_record_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property callRecords for communications.

        Delete navigation property callRecords for communications.

        :param call_record_id: key: id of callRecord.
        :type call_record_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_call_record.metadata['url']  # type: ignore
        path_format_arguments = {
            'callRecord-id': self._serialize.url("call_record_id", call_record_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_call_record.metadata = {'url': '/communications/callRecords/{callRecord-id}'}  # type: ignore

    def list_call(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum34"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum35"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum36"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfCall"]
        """Get calls from communications.

        Get calls from communications.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~cloud_communications.models.Enum34]
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum35]
        :param expand: Expand related entities.
        :type expand: list[str or ~cloud_communications.models.Enum36]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfCall or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~cloud_communications.models.CollectionOfCall]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfCall"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_call.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfCall', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_call.metadata = {'url': '/communications/calls'}  # type: ignore

    def create_call(
        self,
        id=None,  # type: Optional[str]
        callback_uri=None,  # type: Optional[str]
        call_chain_id=None,  # type: Optional[str]
        call_options=None,  # type: Optional[Dict[str, object]]
        call_routes=None,  # type: Optional[List["models.MicrosoftGraphCallRoute"]]
        chat_info=None,  # type: Optional["models.MicrosoftGraphChatInfo"]
        direction=None,  # type: Optional[Union[str, "models.MicrosoftGraphCallDirection"]]
        media_config=None,  # type: Optional[Dict[str, object]]
        meeting_info=None,  # type: Optional[Dict[str, object]]
        my_participant_id=None,  # type: Optional[str]
        requested_modalities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphModality"]]]
        result_info=None,  # type: Optional["models.MicrosoftGraphResultInfo"]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphCallState"]]
        subject=None,  # type: Optional[str]
        targets=None,  # type: Optional[List["models.MicrosoftGraphInvitationParticipantInfo"]]
        tenant_id=None,  # type: Optional[str]
        tone_info=None,  # type: Optional["models.MicrosoftGraphToneInfo"]
        transcription=None,  # type: Optional["models.MicrosoftGraphCallTranscriptionInfo"]
        operations=None,  # type: Optional[List["models.MicrosoftGraphCommsOperation"]]
        participants=None,  # type: Optional[List["models.MicrosoftGraphParticipant"]]
        country_code=None,  # type: Optional[str]
        endpoint_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphEndpointType"]]
        language_id=None,  # type: Optional[str]
        region=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        microsoft_graph_identity_id=None,  # type: Optional[str]
        microsoft_graph_identity_display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        display_name1=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        audio=None,  # type: Optional[Union[str, "models.MicrosoftGraphMediaState"]]
        observed_participant_id=None,  # type: Optional[str]
        on_behalf_of=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        source_participant_id=None,  # type: Optional[str]
        transferor=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCall"
        """Create new navigation property to calls for communications.

        Create new navigation property to calls for communications.

        :param id: Read-only.
        :type id: str
        :param callback_uri: The callback URL on which callbacks will be delivered. Must be https.
        :type callback_uri: str
        :param call_chain_id: A unique identifier for all the participant calls in a conference or a
         unique identifier for two participant calls in a P2P call.  This needs to be copied over from
         Microsoft.Graph.Call.CallChainId.
        :type call_chain_id: str
        :param call_options: callOptions.
        :type call_options: dict[str, object]
        :param call_routes: The routing information on how the call was retargeted. Read-only.
        :type call_routes: list[~cloud_communications.models.MicrosoftGraphCallRoute]
        :param chat_info: chatInfo.
        :type chat_info: ~cloud_communications.models.MicrosoftGraphChatInfo
        :param direction:
        :type direction: str or ~cloud_communications.models.MicrosoftGraphCallDirection
        :param media_config: mediaConfig.
        :type media_config: dict[str, object]
        :param meeting_info: meetingInfo.
        :type meeting_info: dict[str, object]
        :param my_participant_id:
        :type my_participant_id: str
        :param requested_modalities:
        :type requested_modalities: list[str or ~cloud_communications.models.MicrosoftGraphModality]
        :param result_info: resultInfo.
        :type result_info: ~cloud_communications.models.MicrosoftGraphResultInfo
        :param state:
        :type state: str or ~cloud_communications.models.MicrosoftGraphCallState
        :param subject:
        :type subject: str
        :param targets:
        :type targets: list[~cloud_communications.models.MicrosoftGraphInvitationParticipantInfo]
        :param tenant_id:
        :type tenant_id: str
        :param tone_info: toneInfo.
        :type tone_info: ~cloud_communications.models.MicrosoftGraphToneInfo
        :param transcription: callTranscriptionInfo.
        :type transcription: ~cloud_communications.models.MicrosoftGraphCallTranscriptionInfo
        :param operations: Read-only. Nullable.
        :type operations: list[~cloud_communications.models.MicrosoftGraphCommsOperation]
        :param participants: Read-only. Nullable.
        :type participants: list[~cloud_communications.models.MicrosoftGraphParticipant]
        :param country_code: The ISO 3166-1 Alpha-2 country code of the participant's best estimated
         physical location at the start of the call. Read-only.
        :type country_code: str
        :param endpoint_type:
        :type endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
        :param language_id: The language culture string. Read-only.
        :type language_id: str
        :param region: The home region of the participant. This can be a country, a continent, or a
         larger geographic region. This does not change based on the participant's current physical
         location. Read-only.
        :type region: str
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param audio:
        :type audio: str or ~cloud_communications.models.MicrosoftGraphMediaState
        :param observed_participant_id: The ID of the participant that is under observation. Read-only.
        :type observed_participant_id: str
        :param on_behalf_of: identitySet.
        :type on_behalf_of: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :param source_participant_id: The ID of the participant that triggered the incoming call. Read-
         only.
        :type source_participant_id: str
        :param transferor: identitySet.
        :type transferor: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCall, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCall
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCall"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCall(id=id, callback_uri=callback_uri, call_chain_id=call_chain_id, call_options=call_options, call_routes=call_routes, chat_info=chat_info, direction=direction, media_config=media_config, meeting_info=meeting_info, my_participant_id=my_participant_id, requested_modalities=requested_modalities, result_info=result_info, state=state, subject=subject, targets=targets, tenant_id=tenant_id, tone_info=tone_info, transcription=transcription, operations=operations, participants=participants, country_code=country_code, endpoint_type=endpoint_type, language_id=language_id, region=region, display_name_source_identity_user_display_name=display_name, id_source_identity_user_id=microsoft_graph_identity_id, display_name_source_identity_device_display_name=microsoft_graph_identity_display_name, id_source_identity_device_id=id1, display_name_source_identity_application_display_name=display_name1, id_source_identity_application_id=id2, audio=audio, observed_participant_id=observed_participant_id, on_behalf_of=on_behalf_of, source_participant_id=source_participant_id, transferor=transferor)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_call.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCall')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCall', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_call.metadata = {'url': '/communications/calls'}  # type: ignore

    def get_call(
        self,
        call_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum37"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum38"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphCall"
        """Get calls from communications.

        Get calls from communications.

        :param call_id: key: id of call.
        :type call_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum37]
        :param expand: Expand related entities.
        :type expand: list[str or ~cloud_communications.models.Enum38]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphCall, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphCall
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphCall"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_call.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphCall', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_call.metadata = {'url': '/communications/calls/{call-id}'}  # type: ignore

    def update_call(
        self,
        call_id,  # type: str
        id=None,  # type: Optional[str]
        callback_uri=None,  # type: Optional[str]
        call_chain_id=None,  # type: Optional[str]
        call_options=None,  # type: Optional[Dict[str, object]]
        call_routes=None,  # type: Optional[List["models.MicrosoftGraphCallRoute"]]
        chat_info=None,  # type: Optional["models.MicrosoftGraphChatInfo"]
        direction=None,  # type: Optional[Union[str, "models.MicrosoftGraphCallDirection"]]
        media_config=None,  # type: Optional[Dict[str, object]]
        meeting_info=None,  # type: Optional[Dict[str, object]]
        my_participant_id=None,  # type: Optional[str]
        requested_modalities=None,  # type: Optional[List[Union[str, "models.MicrosoftGraphModality"]]]
        result_info=None,  # type: Optional["models.MicrosoftGraphResultInfo"]
        state=None,  # type: Optional[Union[str, "models.MicrosoftGraphCallState"]]
        subject=None,  # type: Optional[str]
        targets=None,  # type: Optional[List["models.MicrosoftGraphInvitationParticipantInfo"]]
        tenant_id=None,  # type: Optional[str]
        tone_info=None,  # type: Optional["models.MicrosoftGraphToneInfo"]
        transcription=None,  # type: Optional["models.MicrosoftGraphCallTranscriptionInfo"]
        operations=None,  # type: Optional[List["models.MicrosoftGraphCommsOperation"]]
        participants=None,  # type: Optional[List["models.MicrosoftGraphParticipant"]]
        country_code=None,  # type: Optional[str]
        endpoint_type=None,  # type: Optional[Union[str, "models.MicrosoftGraphEndpointType"]]
        language_id=None,  # type: Optional[str]
        region=None,  # type: Optional[str]
        display_name=None,  # type: Optional[str]
        microsoft_graph_identity_id=None,  # type: Optional[str]
        microsoft_graph_identity_display_name=None,  # type: Optional[str]
        id1=None,  # type: Optional[str]
        display_name1=None,  # type: Optional[str]
        id2=None,  # type: Optional[str]
        audio=None,  # type: Optional[Union[str, "models.MicrosoftGraphMediaState"]]
        observed_participant_id=None,  # type: Optional[str]
        on_behalf_of=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        source_participant_id=None,  # type: Optional[str]
        transferor=None,  # type: Optional["models.MicrosoftGraphIdentitySet"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property calls in communications.

        Update the navigation property calls in communications.

        :param call_id: key: id of call.
        :type call_id: str
        :param id: Read-only.
        :type id: str
        :param callback_uri: The callback URL on which callbacks will be delivered. Must be https.
        :type callback_uri: str
        :param call_chain_id: A unique identifier for all the participant calls in a conference or a
         unique identifier for two participant calls in a P2P call.  This needs to be copied over from
         Microsoft.Graph.Call.CallChainId.
        :type call_chain_id: str
        :param call_options: callOptions.
        :type call_options: dict[str, object]
        :param call_routes: The routing information on how the call was retargeted. Read-only.
        :type call_routes: list[~cloud_communications.models.MicrosoftGraphCallRoute]
        :param chat_info: chatInfo.
        :type chat_info: ~cloud_communications.models.MicrosoftGraphChatInfo
        :param direction:
        :type direction: str or ~cloud_communications.models.MicrosoftGraphCallDirection
        :param media_config: mediaConfig.
        :type media_config: dict[str, object]
        :param meeting_info: meetingInfo.
        :type meeting_info: dict[str, object]
        :param my_participant_id:
        :type my_participant_id: str
        :param requested_modalities:
        :type requested_modalities: list[str or ~cloud_communications.models.MicrosoftGraphModality]
        :param result_info: resultInfo.
        :type result_info: ~cloud_communications.models.MicrosoftGraphResultInfo
        :param state:
        :type state: str or ~cloud_communications.models.MicrosoftGraphCallState
        :param subject:
        :type subject: str
        :param targets:
        :type targets: list[~cloud_communications.models.MicrosoftGraphInvitationParticipantInfo]
        :param tenant_id:
        :type tenant_id: str
        :param tone_info: toneInfo.
        :type tone_info: ~cloud_communications.models.MicrosoftGraphToneInfo
        :param transcription: callTranscriptionInfo.
        :type transcription: ~cloud_communications.models.MicrosoftGraphCallTranscriptionInfo
        :param operations: Read-only. Nullable.
        :type operations: list[~cloud_communications.models.MicrosoftGraphCommsOperation]
        :param participants: Read-only. Nullable.
        :type participants: list[~cloud_communications.models.MicrosoftGraphParticipant]
        :param country_code: The ISO 3166-1 Alpha-2 country code of the participant's best estimated
         physical location at the start of the call. Read-only.
        :type country_code: str
        :param endpoint_type:
        :type endpoint_type: str or ~cloud_communications.models.MicrosoftGraphEndpointType
        :param language_id: The language culture string. Read-only.
        :type language_id: str
        :param region: The home region of the participant. This can be a country, a continent, or a
         larger geographic region. This does not change based on the participant's current physical
         location. Read-only.
        :type region: str
        :param display_name: The identity's display name. Note that this may not always be available or
         up to date. For example, if a user changes their display name, the API may show the new value
         in a future response, but the items associated with the user won't show up as having changed
         when using delta.
        :type display_name: str
        :param microsoft_graph_identity_id: Unique identifier for the identity.
        :type microsoft_graph_identity_id: str
        :param microsoft_graph_identity_display_name: The identity's display name. Note that this may
         not always be available or up to date. For example, if a user changes their display name, the
         API may show the new value in a future response, but the items associated with the user won't
         show up as having changed when using delta.
        :type microsoft_graph_identity_display_name: str
        :param id1: Unique identifier for the identity.
        :type id1: str
        :param display_name1: The identity's display name. Note that this may not always be available
         or up to date. For example, if a user changes their display name, the API may show the new
         value in a future response, but the items associated with the user won't show up as having
         changed when using delta.
        :type display_name1: str
        :param id2: Unique identifier for the identity.
        :type id2: str
        :param audio:
        :type audio: str or ~cloud_communications.models.MicrosoftGraphMediaState
        :param observed_participant_id: The ID of the participant that is under observation. Read-only.
        :type observed_participant_id: str
        :param on_behalf_of: identitySet.
        :type on_behalf_of: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :param source_participant_id: The ID of the participant that triggered the incoming call. Read-
         only.
        :type source_participant_id: str
        :param transferor: identitySet.
        :type transferor: ~cloud_communications.models.MicrosoftGraphIdentitySet
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphCall(id=id, callback_uri=callback_uri, call_chain_id=call_chain_id, call_options=call_options, call_routes=call_routes, chat_info=chat_info, direction=direction, media_config=media_config, meeting_info=meeting_info, my_participant_id=my_participant_id, requested_modalities=requested_modalities, result_info=result_info, state=state, subject=subject, targets=targets, tenant_id=tenant_id, tone_info=tone_info, transcription=transcription, operations=operations, participants=participants, country_code=country_code, endpoint_type=endpoint_type, language_id=language_id, region=region, display_name_source_identity_user_display_name=display_name, id_source_identity_user_id=microsoft_graph_identity_id, display_name_source_identity_device_display_name=microsoft_graph_identity_display_name, id_source_identity_device_id=id1, display_name_source_identity_application_display_name=display_name1, id_source_identity_application_id=id2, audio=audio, observed_participant_id=observed_participant_id, on_behalf_of=on_behalf_of, source_participant_id=source_participant_id, transferor=transferor)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_call.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphCall')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_call.metadata = {'url': '/communications/calls/{call-id}'}  # type: ignore

    def delete_call(
        self,
        call_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property calls for communications.

        Delete navigation property calls for communications.

        :param call_id: key: id of call.
        :type call_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_call.metadata['url']  # type: ignore
        path_format_arguments = {
            'call-id': self._serialize.url("call_id", call_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_call.metadata = {'url': '/communications/calls/{call-id}'}  # type: ignore

    def list_online_meeting(
        self,
        orderby=None,  # type: Optional[List[Union[str, "models.Enum47"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum48"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfOnlineMeeting"]
        """Get onlineMeetings from communications.

        Get onlineMeetings from communications.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~cloud_communications.models.Enum47]
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum48]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfOnlineMeeting or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~cloud_communications.models.CollectionOfOnlineMeeting]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfOnlineMeeting"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_online_meeting.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfOnlineMeeting', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_online_meeting.metadata = {'url': '/communications/onlineMeetings'}  # type: ignore

    def create_online_meeting(
        self,
        id=None,  # type: Optional[str]
        audio_conferencing=None,  # type: Optional["models.MicrosoftGraphAudioConferencing"]
        chat_info=None,  # type: Optional["models.MicrosoftGraphChatInfo"]
        creation_date_time=None,  # type: Optional[datetime.datetime]
        end_date_time=None,  # type: Optional[datetime.datetime]
        external_id=None,  # type: Optional[str]
        join_information=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        join_web_url=None,  # type: Optional[str]
        start_date_time=None,  # type: Optional[datetime.datetime]
        subject=None,  # type: Optional[str]
        video_teleconference_id=None,  # type: Optional[str]
        attendees=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        organizer=None,  # type: Optional["models.MicrosoftGraphMeetingParticipantInfo"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphOnlineMeeting"
        """Create new navigation property to onlineMeetings for communications.

        Create new navigation property to onlineMeetings for communications.

        :param id: Read-only.
        :type id: str
        :param audio_conferencing: audioConferencing.
        :type audio_conferencing: ~cloud_communications.models.MicrosoftGraphAudioConferencing
        :param chat_info: chatInfo.
        :type chat_info: ~cloud_communications.models.MicrosoftGraphChatInfo
        :param creation_date_time: The meeting creation time in UTC. Read-only.
        :type creation_date_time: ~datetime.datetime
        :param end_date_time: The meeting end time in UTC.
        :type end_date_time: ~datetime.datetime
        :param external_id:
        :type external_id: str
        :param join_information: itemBody.
        :type join_information: ~cloud_communications.models.MicrosoftGraphItemBody
        :param join_web_url: The join URL of the online meeting. Read-only.
        :type join_web_url: str
        :param start_date_time: The meeting start time in UTC.
        :type start_date_time: ~datetime.datetime
        :param subject: The subject of the online meeting.
        :type subject: str
        :param video_teleconference_id: The video teleconferencing ID. Read-only.
        :type video_teleconference_id: str
        :param attendees:
        :type attendees: list[~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo]
        :param organizer: meetingParticipantInfo.
        :type organizer: ~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOnlineMeeting, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphOnlineMeeting
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOnlineMeeting"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphOnlineMeeting(id=id, audio_conferencing=audio_conferencing, chat_info=chat_info, creation_date_time=creation_date_time, end_date_time=end_date_time, external_id=external_id, join_information=join_information, join_web_url=join_web_url, start_date_time=start_date_time, subject=subject, video_teleconference_id=video_teleconference_id, attendees=attendees, organizer=organizer)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_online_meeting.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphOnlineMeeting')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOnlineMeeting', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_online_meeting.metadata = {'url': '/communications/onlineMeetings'}  # type: ignore

    def get_online_meeting(
        self,
        online_meeting_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum49"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphOnlineMeeting"
        """Get onlineMeetings from communications.

        Get onlineMeetings from communications.

        :param online_meeting_id: key: id of onlineMeeting.
        :type online_meeting_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~cloud_communications.models.Enum49]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphOnlineMeeting, or the result of cls(response)
        :rtype: ~cloud_communications.models.MicrosoftGraphOnlineMeeting
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphOnlineMeeting"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_online_meeting.metadata['url']  # type: ignore
        path_format_arguments = {
            'onlineMeeting-id': self._serialize.url("online_meeting_id", online_meeting_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphOnlineMeeting', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_online_meeting.metadata = {'url': '/communications/onlineMeetings/{onlineMeeting-id}'}  # type: ignore

    def update_online_meeting(
        self,
        online_meeting_id,  # type: str
        id=None,  # type: Optional[str]
        audio_conferencing=None,  # type: Optional["models.MicrosoftGraphAudioConferencing"]
        chat_info=None,  # type: Optional["models.MicrosoftGraphChatInfo"]
        creation_date_time=None,  # type: Optional[datetime.datetime]
        end_date_time=None,  # type: Optional[datetime.datetime]
        external_id=None,  # type: Optional[str]
        join_information=None,  # type: Optional["models.MicrosoftGraphItemBody"]
        join_web_url=None,  # type: Optional[str]
        start_date_time=None,  # type: Optional[datetime.datetime]
        subject=None,  # type: Optional[str]
        video_teleconference_id=None,  # type: Optional[str]
        attendees=None,  # type: Optional[List["models.MicrosoftGraphMeetingParticipantInfo"]]
        organizer=None,  # type: Optional["models.MicrosoftGraphMeetingParticipantInfo"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property onlineMeetings in communications.

        Update the navigation property onlineMeetings in communications.

        :param online_meeting_id: key: id of onlineMeeting.
        :type online_meeting_id: str
        :param id: Read-only.
        :type id: str
        :param audio_conferencing: audioConferencing.
        :type audio_conferencing: ~cloud_communications.models.MicrosoftGraphAudioConferencing
        :param chat_info: chatInfo.
        :type chat_info: ~cloud_communications.models.MicrosoftGraphChatInfo
        :param creation_date_time: The meeting creation time in UTC. Read-only.
        :type creation_date_time: ~datetime.datetime
        :param end_date_time: The meeting end time in UTC.
        :type end_date_time: ~datetime.datetime
        :param external_id:
        :type external_id: str
        :param join_information: itemBody.
        :type join_information: ~cloud_communications.models.MicrosoftGraphItemBody
        :param join_web_url: The join URL of the online meeting. Read-only.
        :type join_web_url: str
        :param start_date_time: The meeting start time in UTC.
        :type start_date_time: ~datetime.datetime
        :param subject: The subject of the online meeting.
        :type subject: str
        :param video_teleconference_id: The video teleconferencing ID. Read-only.
        :type video_teleconference_id: str
        :param attendees:
        :type attendees: list[~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo]
        :param organizer: meetingParticipantInfo.
        :type organizer: ~cloud_communications.models.MicrosoftGraphMeetingParticipantInfo
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.MicrosoftGraphOnlineMeeting(id=id, audio_conferencing=audio_conferencing, chat_info=chat_info, creation_date_time=creation_date_time, end_date_time=end_date_time, external_id=external_id, join_information=join_information, join_web_url=join_web_url, start_date_time=start_date_time, subject=subject, video_teleconference_id=video_teleconference_id, attendees=attendees, organizer=organizer)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_online_meeting.metadata['url']  # type: ignore
        path_format_arguments = {
            'onlineMeeting-id': self._serialize.url("online_meeting_id", online_meeting_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MicrosoftGraphOnlineMeeting')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_online_meeting.metadata = {'url': '/communications/onlineMeetings/{onlineMeeting-id}'}  # type: ignore

    def delete_online_meeting(
        self,
        online_meeting_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property onlineMeetings for communications.

        Delete navigation property onlineMeetings for communications.

        :param online_meeting_id: key: id of onlineMeeting.
        :type online_meeting_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_online_meeting.metadata['url']  # type: ignore
        path_format_arguments = {
            'onlineMeeting-id': self._serialize.url("online_meeting_id", online_meeting_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_online_meeting.metadata = {'url': '/communications/onlineMeetings/{onlineMeeting-id}'}  # type: ignore
