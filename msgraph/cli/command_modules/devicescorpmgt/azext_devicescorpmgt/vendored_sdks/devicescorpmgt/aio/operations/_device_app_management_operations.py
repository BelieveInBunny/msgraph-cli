# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class DeviceAppManagementOperations:
    """DeviceAppManagementOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~devices_corporate_management.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_android_managed_app_protections(
        self,
        orderby: Optional[List[Union[str, "models.Get5ItemsItem"]]] = None,
        select: Optional[List[Union[str, "models.Get6ItemsItem"]]] = None,
        expand: Optional[List[Union[str, "models.Get7ItemsItem"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfAndroidManagedAppProtection"]:
        """Get androidManagedAppProtections from deviceAppManagement.

        Get androidManagedAppProtections from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Get5ItemsItem]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Get6ItemsItem]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Get7ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAndroidManagedAppProtection or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfAndroidManagedAppProtection]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAndroidManagedAppProtection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_android_managed_app_protections.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAndroidManagedAppProtection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_android_managed_app_protections.metadata = {'url': '/deviceAppManagement/androidManagedAppProtections'}  # type: ignore

    async def create_android_managed_app_protections(
        self,
        body: "models.MicrosoftGraphAndroidManagedAppProtection",
        **kwargs
    ) -> "models.MicrosoftGraphAndroidManagedAppProtection":
        """Create new navigation property to androidManagedAppProtections for deviceAppManagement.

        Create new navigation property to androidManagedAppProtections for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.MicrosoftGraphAndroidManagedAppProtection
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAndroidManagedAppProtection, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphAndroidManagedAppProtection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAndroidManagedAppProtection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_android_managed_app_protections.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAndroidManagedAppProtection')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAndroidManagedAppProtection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_android_managed_app_protections.metadata = {'url': '/deviceAppManagement/androidManagedAppProtections'}  # type: ignore

    async def get_android_managed_app_protections(
        self,
        android_managed_app_protection_id: str,
        select: Optional[List[Union[str, "models.Enum21"]]] = None,
        expand: Optional[List[Union[str, "models.Get2ItemsItem"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphAndroidManagedAppProtection":
        """Get androidManagedAppProtections from deviceAppManagement.

        Get androidManagedAppProtections from deviceAppManagement.

        :param android_managed_app_protection_id: key: id of androidManagedAppProtection.
        :type android_managed_app_protection_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum21]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Get2ItemsItem]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAndroidManagedAppProtection, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphAndroidManagedAppProtection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAndroidManagedAppProtection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_android_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'androidManagedAppProtection-id': self._serialize.url("android_managed_app_protection_id", android_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAndroidManagedAppProtection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_android_managed_app_protections.metadata = {'url': '/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}'}  # type: ignore

    async def update_android_managed_app_protections(
        self,
        android_managed_app_protection_id: str,
        body: "models.MicrosoftGraphAndroidManagedAppProtection",
        **kwargs
    ) -> None:
        """Update the navigation property androidManagedAppProtections in deviceAppManagement.

        Update the navigation property androidManagedAppProtections in deviceAppManagement.

        :param android_managed_app_protection_id: key: id of androidManagedAppProtection.
        :type android_managed_app_protection_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.MicrosoftGraphAndroidManagedAppProtection
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_android_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'androidManagedAppProtection-id': self._serialize.url("android_managed_app_protection_id", android_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAndroidManagedAppProtection')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_android_managed_app_protections.metadata = {'url': '/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}'}  # type: ignore

    async def delete_android_managed_app_protections(
        self,
        android_managed_app_protection_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property androidManagedAppProtections for deviceAppManagement.

        Delete navigation property androidManagedAppProtections for deviceAppManagement.

        :param android_managed_app_protection_id: key: id of androidManagedAppProtection.
        :type android_managed_app_protection_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_android_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'androidManagedAppProtection-id': self._serialize.url("android_managed_app_protection_id", android_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_android_managed_app_protections.metadata = {'url': '/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}'}  # type: ignore

    def list_default_managed_app_protections(
        self,
        orderby: Optional[List[Union[str, "models.Enum27"]]] = None,
        select: Optional[List[Union[str, "models.Enum28"]]] = None,
        expand: Optional[List[Union[str, "models.Enum29"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfDefaultManagedAppProtection"]:
        """Get defaultManagedAppProtections from deviceAppManagement.

        Get defaultManagedAppProtections from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum27]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum28]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum29]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfDefaultManagedAppProtection or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfDefaultManagedAppProtection]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfDefaultManagedAppProtection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_default_managed_app_protections.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfDefaultManagedAppProtection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_default_managed_app_protections.metadata = {'url': '/deviceAppManagement/defaultManagedAppProtections'}  # type: ignore

    async def create_default_managed_app_protections(
        self,
        body: "models.MicrosoftGraphDefaultManagedAppProtection",
        **kwargs
    ) -> "models.MicrosoftGraphDefaultManagedAppProtection":
        """Create new navigation property to defaultManagedAppProtections for deviceAppManagement.

        Create new navigation property to defaultManagedAppProtections for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.MicrosoftGraphDefaultManagedAppProtection
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDefaultManagedAppProtection, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphDefaultManagedAppProtection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDefaultManagedAppProtection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_default_managed_app_protections.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphDefaultManagedAppProtection')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDefaultManagedAppProtection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_default_managed_app_protections.metadata = {'url': '/deviceAppManagement/defaultManagedAppProtections'}  # type: ignore

    async def get_default_managed_app_protections(
        self,
        default_managed_app_protection_id: str,
        select: Optional[List[Union[str, "models.Enum30"]]] = None,
        expand: Optional[List[Union[str, "models.Enum31"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphDefaultManagedAppProtection":
        """Get defaultManagedAppProtections from deviceAppManagement.

        Get defaultManagedAppProtections from deviceAppManagement.

        :param default_managed_app_protection_id: key: id of defaultManagedAppProtection.
        :type default_managed_app_protection_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum30]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum31]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphDefaultManagedAppProtection, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphDefaultManagedAppProtection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphDefaultManagedAppProtection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_default_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'defaultManagedAppProtection-id': self._serialize.url("default_managed_app_protection_id", default_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphDefaultManagedAppProtection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_default_managed_app_protections.metadata = {'url': '/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}'}  # type: ignore

    async def update_default_managed_app_protections(
        self,
        default_managed_app_protection_id: str,
        body: "models.MicrosoftGraphDefaultManagedAppProtection",
        **kwargs
    ) -> None:
        """Update the navigation property defaultManagedAppProtections in deviceAppManagement.

        Update the navigation property defaultManagedAppProtections in deviceAppManagement.

        :param default_managed_app_protection_id: key: id of defaultManagedAppProtection.
        :type default_managed_app_protection_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.MicrosoftGraphDefaultManagedAppProtection
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_default_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'defaultManagedAppProtection-id': self._serialize.url("default_managed_app_protection_id", default_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphDefaultManagedAppProtection')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_default_managed_app_protections.metadata = {'url': '/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}'}  # type: ignore

    async def delete_default_managed_app_protections(
        self,
        default_managed_app_protection_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property defaultManagedAppProtections for deviceAppManagement.

        Delete navigation property defaultManagedAppProtections for deviceAppManagement.

        :param default_managed_app_protection_id: key: id of defaultManagedAppProtection.
        :type default_managed_app_protection_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_default_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'defaultManagedAppProtection-id': self._serialize.url("default_managed_app_protection_id", default_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_default_managed_app_protections.metadata = {'url': '/deviceAppManagement/defaultManagedAppProtections/{defaultManagedAppProtection-id}'}  # type: ignore

    def list_ios_managed_app_protections(
        self,
        orderby: Optional[List[Union[str, "models.Enum36"]]] = None,
        select: Optional[List[Union[str, "models.Enum37"]]] = None,
        expand: Optional[List[Union[str, "models.Enum38"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfIosManagedAppProtection"]:
        """Get iosManagedAppProtections from deviceAppManagement.

        Get iosManagedAppProtections from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum36]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum37]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum38]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfIosManagedAppProtection or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfIosManagedAppProtection]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfIosManagedAppProtection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_ios_managed_app_protections.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfIosManagedAppProtection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_ios_managed_app_protections.metadata = {'url': '/deviceAppManagement/iosManagedAppProtections'}  # type: ignore

    async def create_ios_managed_app_protections(
        self,
        body: "models.MicrosoftGraphIosManagedAppProtection",
        **kwargs
    ) -> "models.MicrosoftGraphIosManagedAppProtection":
        """Create new navigation property to iosManagedAppProtections for deviceAppManagement.

        Create new navigation property to iosManagedAppProtections for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.MicrosoftGraphIosManagedAppProtection
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphIosManagedAppProtection, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphIosManagedAppProtection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphIosManagedAppProtection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_ios_managed_app_protections.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphIosManagedAppProtection')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphIosManagedAppProtection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ios_managed_app_protections.metadata = {'url': '/deviceAppManagement/iosManagedAppProtections'}  # type: ignore

    async def get_ios_managed_app_protections(
        self,
        ios_managed_app_protection_id: str,
        select: Optional[List[Union[str, "models.Enum39"]]] = None,
        expand: Optional[List[Union[str, "models.Enum40"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphIosManagedAppProtection":
        """Get iosManagedAppProtections from deviceAppManagement.

        Get iosManagedAppProtections from deviceAppManagement.

        :param ios_managed_app_protection_id: key: id of iosManagedAppProtection.
        :type ios_managed_app_protection_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum39]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum40]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphIosManagedAppProtection, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphIosManagedAppProtection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphIosManagedAppProtection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_ios_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'iosManagedAppProtection-id': self._serialize.url("ios_managed_app_protection_id", ios_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphIosManagedAppProtection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_ios_managed_app_protections.metadata = {'url': '/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}'}  # type: ignore

    async def update_ios_managed_app_protections(
        self,
        ios_managed_app_protection_id: str,
        body: "models.MicrosoftGraphIosManagedAppProtection",
        **kwargs
    ) -> None:
        """Update the navigation property iosManagedAppProtections in deviceAppManagement.

        Update the navigation property iosManagedAppProtections in deviceAppManagement.

        :param ios_managed_app_protection_id: key: id of iosManagedAppProtection.
        :type ios_managed_app_protection_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.MicrosoftGraphIosManagedAppProtection
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_ios_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'iosManagedAppProtection-id': self._serialize.url("ios_managed_app_protection_id", ios_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphIosManagedAppProtection')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_ios_managed_app_protections.metadata = {'url': '/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}'}  # type: ignore

    async def delete_ios_managed_app_protections(
        self,
        ios_managed_app_protection_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property iosManagedAppProtections for deviceAppManagement.

        Delete navigation property iosManagedAppProtections for deviceAppManagement.

        :param ios_managed_app_protection_id: key: id of iosManagedAppProtection.
        :type ios_managed_app_protection_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_ios_managed_app_protections.metadata['url']  # type: ignore
        path_format_arguments = {
            'iosManagedAppProtection-id': self._serialize.url("ios_managed_app_protection_id", ios_managed_app_protection_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_ios_managed_app_protections.metadata = {'url': '/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}'}  # type: ignore

    def list_managed_app_policies(
        self,
        orderby: Optional[List[Union[str, "models.Enum45"]]] = None,
        select: Optional[List[Union[str, "models.Enum46"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfManagedAppPolicy"]:
        """Get managedAppPolicies from deviceAppManagement.

        Get managedAppPolicies from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum45]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum46]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfManagedAppPolicy or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfManagedAppPolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfManagedAppPolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_managed_app_policies.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfManagedAppPolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_managed_app_policies.metadata = {'url': '/deviceAppManagement/managedAppPolicies'}  # type: ignore

    async def create_managed_app_policies(
        self,
        body: "models.MicrosoftGraphManagedAppPolicy",
        **kwargs
    ) -> "models.MicrosoftGraphManagedAppPolicy":
        """Create new navigation property to managedAppPolicies for deviceAppManagement.

        Create new navigation property to managedAppPolicies for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.MicrosoftGraphManagedAppPolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedAppPolicy, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedAppPolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedAppPolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_managed_app_policies.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphManagedAppPolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedAppPolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_managed_app_policies.metadata = {'url': '/deviceAppManagement/managedAppPolicies'}  # type: ignore

    async def get_managed_app_policies(
        self,
        managed_app_policy_id: str,
        select: Optional[List[Union[str, "models.Enum47"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedAppPolicy":
        """Get managedAppPolicies from deviceAppManagement.

        Get managedAppPolicies from deviceAppManagement.

        :param managed_app_policy_id: key: id of managedAppPolicy.
        :type managed_app_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum47]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedAppPolicy, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedAppPolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedAppPolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_managed_app_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppPolicy-id': self._serialize.url("managed_app_policy_id", managed_app_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedAppPolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_managed_app_policies.metadata = {'url': '/deviceAppManagement/managedAppPolicies/{managedAppPolicy-id}'}  # type: ignore

    async def update_managed_app_policies(
        self,
        managed_app_policy_id: str,
        body: "models.MicrosoftGraphManagedAppPolicy",
        **kwargs
    ) -> None:
        """Update the navigation property managedAppPolicies in deviceAppManagement.

        Update the navigation property managedAppPolicies in deviceAppManagement.

        :param managed_app_policy_id: key: id of managedAppPolicy.
        :type managed_app_policy_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.MicrosoftGraphManagedAppPolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_managed_app_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppPolicy-id': self._serialize.url("managed_app_policy_id", managed_app_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphManagedAppPolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_managed_app_policies.metadata = {'url': '/deviceAppManagement/managedAppPolicies/{managedAppPolicy-id}'}  # type: ignore

    async def delete_managed_app_policies(
        self,
        managed_app_policy_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property managedAppPolicies for deviceAppManagement.

        Delete navigation property managedAppPolicies for deviceAppManagement.

        :param managed_app_policy_id: key: id of managedAppPolicy.
        :type managed_app_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_managed_app_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppPolicy-id': self._serialize.url("managed_app_policy_id", managed_app_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_managed_app_policies.metadata = {'url': '/deviceAppManagement/managedAppPolicies/{managedAppPolicy-id}'}  # type: ignore

    def list_managed_app_registrations(
        self,
        orderby: Optional[List[Union[str, "models.Enum48"]]] = None,
        select: Optional[List[Union[str, "models.Enum49"]]] = None,
        expand: Optional[List[Union[str, "models.Enum50"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfManagedAppRegistration"]:
        """Get managedAppRegistrations from deviceAppManagement.

        Get managedAppRegistrations from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum48]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum49]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum50]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfManagedAppRegistration or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfManagedAppRegistration]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfManagedAppRegistration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_managed_app_registrations.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfManagedAppRegistration', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_managed_app_registrations.metadata = {'url': '/deviceAppManagement/managedAppRegistrations'}  # type: ignore

    async def create_managed_app_registrations(
        self,
        body: "models.MicrosoftGraphManagedAppRegistration",
        **kwargs
    ) -> "models.MicrosoftGraphManagedAppRegistration":
        """Create new navigation property to managedAppRegistrations for deviceAppManagement.

        Create new navigation property to managedAppRegistrations for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.MicrosoftGraphManagedAppRegistration
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedAppRegistration, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedAppRegistration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedAppRegistration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_managed_app_registrations.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphManagedAppRegistration')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedAppRegistration', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_managed_app_registrations.metadata = {'url': '/deviceAppManagement/managedAppRegistrations'}  # type: ignore

    async def get_managed_app_registrations(
        self,
        managed_app_registration_id: str,
        select: Optional[List[Union[str, "models.Enum51"]]] = None,
        expand: Optional[List[Union[str, "models.Enum52"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedAppRegistration":
        """Get managedAppRegistrations from deviceAppManagement.

        Get managedAppRegistrations from deviceAppManagement.

        :param managed_app_registration_id: key: id of managedAppRegistration.
        :type managed_app_registration_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum51]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum52]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedAppRegistration, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedAppRegistration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedAppRegistration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_managed_app_registrations.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppRegistration-id': self._serialize.url("managed_app_registration_id", managed_app_registration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedAppRegistration', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_managed_app_registrations.metadata = {'url': '/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}'}  # type: ignore

    async def update_managed_app_registrations(
        self,
        managed_app_registration_id: str,
        body: "models.MicrosoftGraphManagedAppRegistration",
        **kwargs
    ) -> None:
        """Update the navigation property managedAppRegistrations in deviceAppManagement.

        Update the navigation property managedAppRegistrations in deviceAppManagement.

        :param managed_app_registration_id: key: id of managedAppRegistration.
        :type managed_app_registration_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.MicrosoftGraphManagedAppRegistration
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_managed_app_registrations.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppRegistration-id': self._serialize.url("managed_app_registration_id", managed_app_registration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphManagedAppRegistration')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_managed_app_registrations.metadata = {'url': '/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}'}  # type: ignore

    async def delete_managed_app_registrations(
        self,
        managed_app_registration_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property managedAppRegistrations for deviceAppManagement.

        Delete navigation property managedAppRegistrations for deviceAppManagement.

        :param managed_app_registration_id: key: id of managedAppRegistration.
        :type managed_app_registration_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_managed_app_registrations.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppRegistration-id': self._serialize.url("managed_app_registration_id", managed_app_registration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_managed_app_registrations.metadata = {'url': '/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}'}  # type: ignore

    def list_managed_app_statuses(
        self,
        orderby: Optional[List[Union[str, "models.Enum62"]]] = None,
        select: Optional[List[Union[str, "models.Enum63"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfManagedAppStatus"]:
        """Get managedAppStatuses from deviceAppManagement.

        Get managedAppStatuses from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum62]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum63]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfManagedAppStatus or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfManagedAppStatus]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfManagedAppStatus"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_managed_app_statuses.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfManagedAppStatus', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_managed_app_statuses.metadata = {'url': '/deviceAppManagement/managedAppStatuses'}  # type: ignore

    async def create_managed_app_statuses(
        self,
        body: "models.MicrosoftGraphManagedAppStatus",
        **kwargs
    ) -> "models.MicrosoftGraphManagedAppStatus":
        """Create new navigation property to managedAppStatuses for deviceAppManagement.

        Create new navigation property to managedAppStatuses for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.MicrosoftGraphManagedAppStatus
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedAppStatus, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedAppStatus
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedAppStatus"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_managed_app_statuses.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphManagedAppStatus')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedAppStatus', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_managed_app_statuses.metadata = {'url': '/deviceAppManagement/managedAppStatuses'}  # type: ignore

    async def get_managed_app_statuses(
        self,
        managed_app_status_id: str,
        select: Optional[List[Union[str, "models.Enum64"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedAppStatus":
        """Get managedAppStatuses from deviceAppManagement.

        Get managedAppStatuses from deviceAppManagement.

        :param managed_app_status_id: key: id of managedAppStatus.
        :type managed_app_status_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum64]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedAppStatus, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedAppStatus
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedAppStatus"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_managed_app_statuses.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppStatus-id': self._serialize.url("managed_app_status_id", managed_app_status_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedAppStatus', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_managed_app_statuses.metadata = {'url': '/deviceAppManagement/managedAppStatuses/{managedAppStatus-id}'}  # type: ignore

    async def update_managed_app_statuses(
        self,
        managed_app_status_id: str,
        body: "models.MicrosoftGraphManagedAppStatus",
        **kwargs
    ) -> None:
        """Update the navigation property managedAppStatuses in deviceAppManagement.

        Update the navigation property managedAppStatuses in deviceAppManagement.

        :param managed_app_status_id: key: id of managedAppStatus.
        :type managed_app_status_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.MicrosoftGraphManagedAppStatus
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_managed_app_statuses.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppStatus-id': self._serialize.url("managed_app_status_id", managed_app_status_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphManagedAppStatus')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_managed_app_statuses.metadata = {'url': '/deviceAppManagement/managedAppStatuses/{managedAppStatus-id}'}  # type: ignore

    async def delete_managed_app_statuses(
        self,
        managed_app_status_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property managedAppStatuses for deviceAppManagement.

        Delete navigation property managedAppStatuses for deviceAppManagement.

        :param managed_app_status_id: key: id of managedAppStatus.
        :type managed_app_status_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_managed_app_statuses.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedAppStatus-id': self._serialize.url("managed_app_status_id", managed_app_status_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_managed_app_statuses.metadata = {'url': '/deviceAppManagement/managedAppStatuses/{managedAppStatus-id}'}  # type: ignore

    def list_managed_e_books(
        self,
        orderby: Optional[List[Union[str, "models.Enum65"]]] = None,
        select: Optional[List[Union[str, "models.Enum66"]]] = None,
        expand: Optional[List[Union[str, "models.Enum67"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfManagedEBook"]:
        """Get managedEBooks from deviceAppManagement.

        Get managedEBooks from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum65]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum66]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum67]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfManagedEBook or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfManagedEBook]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfManagedEBook"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_managed_e_books.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfManagedEBook', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_managed_e_books.metadata = {'url': '/deviceAppManagement/managedEBooks'}  # type: ignore

    async def create_managed_e_books(
        self,
        body: "models.MicrosoftGraphManagedEBook",
        **kwargs
    ) -> "models.MicrosoftGraphManagedEBook":
        """Create new navigation property to managedEBooks for deviceAppManagement.

        Create new navigation property to managedEBooks for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.MicrosoftGraphManagedEBook
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedEBook, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedEBook
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedEBook"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_managed_e_books.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphManagedEBook')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedEBook', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_managed_e_books.metadata = {'url': '/deviceAppManagement/managedEBooks'}  # type: ignore

    async def get_managed_e_books(
        self,
        managed_e_book_id: str,
        select: Optional[List[Union[str, "models.Enum68"]]] = None,
        expand: Optional[List[Union[str, "models.Enum69"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedEBook":
        """Get managedEBooks from deviceAppManagement.

        Get managedEBooks from deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum68]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum69]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedEBook, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedEBook
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedEBook"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_managed_e_books.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedEBook', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_managed_e_books.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}'}  # type: ignore

    async def update_managed_e_books(
        self,
        managed_e_book_id: str,
        body: "models.MicrosoftGraphManagedEBook",
        **kwargs
    ) -> None:
        """Update the navigation property managedEBooks in deviceAppManagement.

        Update the navigation property managedEBooks in deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.MicrosoftGraphManagedEBook
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_managed_e_books.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphManagedEBook')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_managed_e_books.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}'}  # type: ignore

    async def delete_managed_e_books(
        self,
        managed_e_book_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property managedEBooks for deviceAppManagement.

        Delete navigation property managedEBooks for deviceAppManagement.

        :param managed_e_book_id: key: id of managedEBook.
        :type managed_e_book_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_managed_e_books.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedEBook-id': self._serialize.url("managed_e_book_id", managed_e_book_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_managed_e_books.metadata = {'url': '/deviceAppManagement/managedEBooks/{managedEBook-id}'}  # type: ignore

    def list_mdm_windows_information_protection_policies(
        self,
        orderby: Optional[List[Union[str, "models.Enum85"]]] = None,
        select: Optional[List[Union[str, "models.Enum86"]]] = None,
        expand: Optional[List[Union[str, "models.Enum87"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfMdmWindowsInformationProtectionPolicy"]:
        """Get mdmWindowsInformationProtectionPolicies from deviceAppManagement.

        Get mdmWindowsInformationProtectionPolicies from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum85]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum86]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum87]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfMdmWindowsInformationProtectionPolicy or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfMdmWindowsInformationProtectionPolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfMdmWindowsInformationProtectionPolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_mdm_windows_information_protection_policies.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfMdmWindowsInformationProtectionPolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_mdm_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/mdmWindowsInformationProtectionPolicies'}  # type: ignore

    async def create_mdm_windows_information_protection_policies(
        self,
        body: "models.MicrosoftGraphMdmWindowsInformationProtectionPolicy",
        **kwargs
    ) -> "models.MicrosoftGraphMdmWindowsInformationProtectionPolicy":
        """Create new navigation property to mdmWindowsInformationProtectionPolicies for deviceAppManagement.

        Create new navigation property to mdmWindowsInformationProtectionPolicies for
        deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.MicrosoftGraphMdmWindowsInformationProtectionPolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMdmWindowsInformationProtectionPolicy, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphMdmWindowsInformationProtectionPolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMdmWindowsInformationProtectionPolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_mdm_windows_information_protection_policies.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphMdmWindowsInformationProtectionPolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMdmWindowsInformationProtectionPolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_mdm_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/mdmWindowsInformationProtectionPolicies'}  # type: ignore

    async def get_mdm_windows_information_protection_policies(
        self,
        mdm_windows_information_protection_policy_id: str,
        select: Optional[List[Union[str, "models.Enum88"]]] = None,
        expand: Optional[List[Union[str, "models.Enum89"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMdmWindowsInformationProtectionPolicy":
        """Get mdmWindowsInformationProtectionPolicies from deviceAppManagement.

        Get mdmWindowsInformationProtectionPolicies from deviceAppManagement.

        :param mdm_windows_information_protection_policy_id: key: id of
         mdmWindowsInformationProtectionPolicy.
        :type mdm_windows_information_protection_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum88]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum89]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMdmWindowsInformationProtectionPolicy, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphMdmWindowsInformationProtectionPolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMdmWindowsInformationProtectionPolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_mdm_windows_information_protection_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'mdmWindowsInformationProtectionPolicy-id': self._serialize.url("mdm_windows_information_protection_policy_id", mdm_windows_information_protection_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMdmWindowsInformationProtectionPolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mdm_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/mdmWindowsInformationProtectionPolicies/{mdmWindowsInformationProtectionPolicy-id}'}  # type: ignore

    async def update_mdm_windows_information_protection_policies(
        self,
        mdm_windows_information_protection_policy_id: str,
        body: "models.MicrosoftGraphMdmWindowsInformationProtectionPolicy",
        **kwargs
    ) -> None:
        """Update the navigation property mdmWindowsInformationProtectionPolicies in deviceAppManagement.

        Update the navigation property mdmWindowsInformationProtectionPolicies in deviceAppManagement.

        :param mdm_windows_information_protection_policy_id: key: id of
         mdmWindowsInformationProtectionPolicy.
        :type mdm_windows_information_protection_policy_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.MicrosoftGraphMdmWindowsInformationProtectionPolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_mdm_windows_information_protection_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'mdmWindowsInformationProtectionPolicy-id': self._serialize.url("mdm_windows_information_protection_policy_id", mdm_windows_information_protection_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphMdmWindowsInformationProtectionPolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_mdm_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/mdmWindowsInformationProtectionPolicies/{mdmWindowsInformationProtectionPolicy-id}'}  # type: ignore

    async def delete_mdm_windows_information_protection_policies(
        self,
        mdm_windows_information_protection_policy_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property mdmWindowsInformationProtectionPolicies for deviceAppManagement.

        Delete navigation property mdmWindowsInformationProtectionPolicies for deviceAppManagement.

        :param mdm_windows_information_protection_policy_id: key: id of
         mdmWindowsInformationProtectionPolicy.
        :type mdm_windows_information_protection_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_mdm_windows_information_protection_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'mdmWindowsInformationProtectionPolicy-id': self._serialize.url("mdm_windows_information_protection_policy_id", mdm_windows_information_protection_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_mdm_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/mdmWindowsInformationProtectionPolicies/{mdmWindowsInformationProtectionPolicy-id}'}  # type: ignore

    async def sync_microsoft_store_for_business_apps(
        self,
        **kwargs
    ) -> None:
        """Invoke action syncMicrosoftStoreForBusinessApps.

        Invoke action syncMicrosoftStoreForBusinessApps.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.sync_microsoft_store_for_business_apps.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    sync_microsoft_store_for_business_apps.metadata = {'url': '/deviceAppManagement/microsoft.graph.syncMicrosoftStoreForBusinessApps'}  # type: ignore

    def list_mobile_app_categories(
        self,
        orderby: Optional[List[Union[str, "models.Enum90"]]] = None,
        select: Optional[List[Union[str, "models.Enum91"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfMobileAppCategory"]:
        """Get mobileAppCategories from deviceAppManagement.

        Get mobileAppCategories from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum90]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum91]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfMobileAppCategory or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfMobileAppCategory]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfMobileAppCategory"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_mobile_app_categories.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfMobileAppCategory', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_mobile_app_categories.metadata = {'url': '/deviceAppManagement/mobileAppCategories'}  # type: ignore

    async def create_mobile_app_categories(
        self,
        body: "models.MicrosoftGraphMobileAppCategory",
        **kwargs
    ) -> "models.MicrosoftGraphMobileAppCategory":
        """Create new navigation property to mobileAppCategories for deviceAppManagement.

        Create new navigation property to mobileAppCategories for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.MicrosoftGraphMobileAppCategory
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMobileAppCategory, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphMobileAppCategory
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMobileAppCategory"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_mobile_app_categories.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphMobileAppCategory')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMobileAppCategory', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_mobile_app_categories.metadata = {'url': '/deviceAppManagement/mobileAppCategories'}  # type: ignore

    async def get_mobile_app_categories(
        self,
        mobile_app_category_id: str,
        select: Optional[List[Union[str, "models.Enum92"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMobileAppCategory":
        """Get mobileAppCategories from deviceAppManagement.

        Get mobileAppCategories from deviceAppManagement.

        :param mobile_app_category_id: key: id of mobileAppCategory.
        :type mobile_app_category_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum92]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMobileAppCategory, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphMobileAppCategory
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMobileAppCategory"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_mobile_app_categories.metadata['url']  # type: ignore
        path_format_arguments = {
            'mobileAppCategory-id': self._serialize.url("mobile_app_category_id", mobile_app_category_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMobileAppCategory', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mobile_app_categories.metadata = {'url': '/deviceAppManagement/mobileAppCategories/{mobileAppCategory-id}'}  # type: ignore

    async def update_mobile_app_categories(
        self,
        mobile_app_category_id: str,
        body: "models.MicrosoftGraphMobileAppCategory",
        **kwargs
    ) -> None:
        """Update the navigation property mobileAppCategories in deviceAppManagement.

        Update the navigation property mobileAppCategories in deviceAppManagement.

        :param mobile_app_category_id: key: id of mobileAppCategory.
        :type mobile_app_category_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.MicrosoftGraphMobileAppCategory
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_mobile_app_categories.metadata['url']  # type: ignore
        path_format_arguments = {
            'mobileAppCategory-id': self._serialize.url("mobile_app_category_id", mobile_app_category_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphMobileAppCategory')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_mobile_app_categories.metadata = {'url': '/deviceAppManagement/mobileAppCategories/{mobileAppCategory-id}'}  # type: ignore

    async def delete_mobile_app_categories(
        self,
        mobile_app_category_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property mobileAppCategories for deviceAppManagement.

        Delete navigation property mobileAppCategories for deviceAppManagement.

        :param mobile_app_category_id: key: id of mobileAppCategory.
        :type mobile_app_category_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_mobile_app_categories.metadata['url']  # type: ignore
        path_format_arguments = {
            'mobileAppCategory-id': self._serialize.url("mobile_app_category_id", mobile_app_category_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_mobile_app_categories.metadata = {'url': '/deviceAppManagement/mobileAppCategories/{mobileAppCategory-id}'}  # type: ignore

    def list_mobile_app_configurations(
        self,
        orderby: Optional[List[Union[str, "models.Enum93"]]] = None,
        select: Optional[List[Union[str, "models.Enum94"]]] = None,
        expand: Optional[List[Union[str, "models.Enum95"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfManagedDeviceMobileAppConfiguration"]:
        """Get mobileAppConfigurations from deviceAppManagement.

        Get mobileAppConfigurations from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum93]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum94]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum95]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfManagedDeviceMobileAppConfiguration or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfManagedDeviceMobileAppConfiguration]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfManagedDeviceMobileAppConfiguration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_mobile_app_configurations.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfManagedDeviceMobileAppConfiguration', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_mobile_app_configurations.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations'}  # type: ignore

    async def create_mobile_app_configurations(
        self,
        body: "models.MicrosoftGraphManagedDeviceMobileAppConfiguration",
        **kwargs
    ) -> "models.MicrosoftGraphManagedDeviceMobileAppConfiguration":
        """Create new navigation property to mobileAppConfigurations for deviceAppManagement.

        Create new navigation property to mobileAppConfigurations for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfiguration
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedDeviceMobileAppConfiguration, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfiguration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedDeviceMobileAppConfiguration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_mobile_app_configurations.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphManagedDeviceMobileAppConfiguration')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedDeviceMobileAppConfiguration', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_mobile_app_configurations.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations'}  # type: ignore

    async def get_mobile_app_configurations(
        self,
        managed_device_mobile_app_configuration_id: str,
        select: Optional[List[Union[str, "models.Enum96"]]] = None,
        expand: Optional[List[Union[str, "models.Enum97"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphManagedDeviceMobileAppConfiguration":
        """Get mobileAppConfigurations from deviceAppManagement.

        Get mobileAppConfigurations from deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum96]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum97]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphManagedDeviceMobileAppConfiguration, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfiguration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphManagedDeviceMobileAppConfiguration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_mobile_app_configurations.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphManagedDeviceMobileAppConfiguration', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mobile_app_configurations.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}'}  # type: ignore

    async def update_mobile_app_configurations(
        self,
        managed_device_mobile_app_configuration_id: str,
        body: "models.MicrosoftGraphManagedDeviceMobileAppConfiguration",
        **kwargs
    ) -> None:
        """Update the navigation property mobileAppConfigurations in deviceAppManagement.

        Update the navigation property mobileAppConfigurations in deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.MicrosoftGraphManagedDeviceMobileAppConfiguration
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_mobile_app_configurations.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphManagedDeviceMobileAppConfiguration')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_mobile_app_configurations.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}'}  # type: ignore

    async def delete_mobile_app_configurations(
        self,
        managed_device_mobile_app_configuration_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property mobileAppConfigurations for deviceAppManagement.

        Delete navigation property mobileAppConfigurations for deviceAppManagement.

        :param managed_device_mobile_app_configuration_id: key: id of
         managedDeviceMobileAppConfiguration.
        :type managed_device_mobile_app_configuration_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_mobile_app_configurations.metadata['url']  # type: ignore
        path_format_arguments = {
            'managedDeviceMobileAppConfiguration-id': self._serialize.url("managed_device_mobile_app_configuration_id", managed_device_mobile_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_mobile_app_configurations.metadata = {'url': '/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}'}  # type: ignore

    def list_mobile_apps(
        self,
        orderby: Optional[List[Union[str, "models.Enum109"]]] = None,
        select: Optional[List[Union[str, "models.Enum110"]]] = None,
        expand: Optional[List[Union[str, "models.Enum111"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfMobileApp"]:
        """Get mobileApps from deviceAppManagement.

        Get mobileApps from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum109]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum110]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum111]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfMobileApp or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfMobileApp]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfMobileApp"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_mobile_apps.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfMobileApp', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_mobile_apps.metadata = {'url': '/deviceAppManagement/mobileApps'}  # type: ignore

    async def create_mobile_apps(
        self,
        body: "models.MicrosoftGraphMobileApp",
        **kwargs
    ) -> "models.MicrosoftGraphMobileApp":
        """Create new navigation property to mobileApps for deviceAppManagement.

        Create new navigation property to mobileApps for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.MicrosoftGraphMobileApp
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMobileApp, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphMobileApp
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMobileApp"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_mobile_apps.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphMobileApp')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMobileApp', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_mobile_apps.metadata = {'url': '/deviceAppManagement/mobileApps'}  # type: ignore

    async def get_mobile_apps(
        self,
        mobile_app_id: str,
        select: Optional[List[Union[str, "models.Enum112"]]] = None,
        expand: Optional[List[Union[str, "models.Enum113"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphMobileApp":
        """Get mobileApps from deviceAppManagement.

        Get mobileApps from deviceAppManagement.

        :param mobile_app_id: key: id of mobileApp.
        :type mobile_app_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum112]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum113]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMobileApp, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphMobileApp
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMobileApp"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_mobile_apps.metadata['url']  # type: ignore
        path_format_arguments = {
            'mobileApp-id': self._serialize.url("mobile_app_id", mobile_app_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMobileApp', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_mobile_apps.metadata = {'url': '/deviceAppManagement/mobileApps/{mobileApp-id}'}  # type: ignore

    async def update_mobile_apps(
        self,
        mobile_app_id: str,
        body: "models.MicrosoftGraphMobileApp",
        **kwargs
    ) -> None:
        """Update the navigation property mobileApps in deviceAppManagement.

        Update the navigation property mobileApps in deviceAppManagement.

        :param mobile_app_id: key: id of mobileApp.
        :type mobile_app_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.MicrosoftGraphMobileApp
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_mobile_apps.metadata['url']  # type: ignore
        path_format_arguments = {
            'mobileApp-id': self._serialize.url("mobile_app_id", mobile_app_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphMobileApp')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_mobile_apps.metadata = {'url': '/deviceAppManagement/mobileApps/{mobileApp-id}'}  # type: ignore

    async def delete_mobile_apps(
        self,
        mobile_app_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property mobileApps for deviceAppManagement.

        Delete navigation property mobileApps for deviceAppManagement.

        :param mobile_app_id: key: id of mobileApp.
        :type mobile_app_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_mobile_apps.metadata['url']  # type: ignore
        path_format_arguments = {
            'mobileApp-id': self._serialize.url("mobile_app_id", mobile_app_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_mobile_apps.metadata = {'url': '/deviceAppManagement/mobileApps/{mobileApp-id}'}  # type: ignore

    def list_targeted_managed_app_configurations(
        self,
        orderby: Optional[List[Union[str, "models.Enum120"]]] = None,
        select: Optional[List[Union[str, "models.Enum121"]]] = None,
        expand: Optional[List[Union[str, "models.Enum122"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfTargetedManagedAppConfiguration"]:
        """Get targetedManagedAppConfigurations from deviceAppManagement.

        Get targetedManagedAppConfigurations from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum120]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum121]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum122]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfTargetedManagedAppConfiguration or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfTargetedManagedAppConfiguration]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfTargetedManagedAppConfiguration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_targeted_managed_app_configurations.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfTargetedManagedAppConfiguration', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_targeted_managed_app_configurations.metadata = {'url': '/deviceAppManagement/targetedManagedAppConfigurations'}  # type: ignore

    async def create_targeted_managed_app_configurations(
        self,
        body: "models.MicrosoftGraphTargetedManagedAppConfiguration",
        **kwargs
    ) -> "models.MicrosoftGraphTargetedManagedAppConfiguration":
        """Create new navigation property to targetedManagedAppConfigurations for deviceAppManagement.

        Create new navigation property to targetedManagedAppConfigurations for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppConfiguration
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTargetedManagedAppConfiguration, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppConfiguration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTargetedManagedAppConfiguration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_targeted_managed_app_configurations.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTargetedManagedAppConfiguration')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTargetedManagedAppConfiguration', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_targeted_managed_app_configurations.metadata = {'url': '/deviceAppManagement/targetedManagedAppConfigurations'}  # type: ignore

    async def get_targeted_managed_app_configurations(
        self,
        targeted_managed_app_configuration_id: str,
        select: Optional[List[Union[str, "models.Enum123"]]] = None,
        expand: Optional[List[Union[str, "models.Enum124"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphTargetedManagedAppConfiguration":
        """Get targetedManagedAppConfigurations from deviceAppManagement.

        Get targetedManagedAppConfigurations from deviceAppManagement.

        :param targeted_managed_app_configuration_id: key: id of targetedManagedAppConfiguration.
        :type targeted_managed_app_configuration_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum123]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum124]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphTargetedManagedAppConfiguration, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppConfiguration
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphTargetedManagedAppConfiguration"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_targeted_managed_app_configurations.metadata['url']  # type: ignore
        path_format_arguments = {
            'targetedManagedAppConfiguration-id': self._serialize.url("targeted_managed_app_configuration_id", targeted_managed_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphTargetedManagedAppConfiguration', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_targeted_managed_app_configurations.metadata = {'url': '/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}'}  # type: ignore

    async def update_targeted_managed_app_configurations(
        self,
        targeted_managed_app_configuration_id: str,
        body: "models.MicrosoftGraphTargetedManagedAppConfiguration",
        **kwargs
    ) -> None:
        """Update the navigation property targetedManagedAppConfigurations in deviceAppManagement.

        Update the navigation property targetedManagedAppConfigurations in deviceAppManagement.

        :param targeted_managed_app_configuration_id: key: id of targetedManagedAppConfiguration.
        :type targeted_managed_app_configuration_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.MicrosoftGraphTargetedManagedAppConfiguration
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_targeted_managed_app_configurations.metadata['url']  # type: ignore
        path_format_arguments = {
            'targetedManagedAppConfiguration-id': self._serialize.url("targeted_managed_app_configuration_id", targeted_managed_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphTargetedManagedAppConfiguration')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_targeted_managed_app_configurations.metadata = {'url': '/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}'}  # type: ignore

    async def delete_targeted_managed_app_configurations(
        self,
        targeted_managed_app_configuration_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property targetedManagedAppConfigurations for deviceAppManagement.

        Delete navigation property targetedManagedAppConfigurations for deviceAppManagement.

        :param targeted_managed_app_configuration_id: key: id of targetedManagedAppConfiguration.
        :type targeted_managed_app_configuration_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_targeted_managed_app_configurations.metadata['url']  # type: ignore
        path_format_arguments = {
            'targetedManagedAppConfiguration-id': self._serialize.url("targeted_managed_app_configuration_id", targeted_managed_app_configuration_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_targeted_managed_app_configurations.metadata = {'url': '/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}'}  # type: ignore

    def list_vpp_tokens(
        self,
        orderby: Optional[List[Union[str, "models.Enum132"]]] = None,
        select: Optional[List[Union[str, "models.Enum133"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfVppToken"]:
        """Get vppTokens from deviceAppManagement.

        Get vppTokens from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum132]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum133]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfVppToken or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfVppToken]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfVppToken"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_vpp_tokens.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfVppToken', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_vpp_tokens.metadata = {'url': '/deviceAppManagement/vppTokens'}  # type: ignore

    async def create_vpp_tokens(
        self,
        body: "models.MicrosoftGraphVppToken",
        **kwargs
    ) -> "models.MicrosoftGraphVppToken":
        """Create new navigation property to vppTokens for deviceAppManagement.

        Create new navigation property to vppTokens for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.MicrosoftGraphVppToken
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphVppToken, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphVppToken
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphVppToken"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_vpp_tokens.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphVppToken')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphVppToken', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_vpp_tokens.metadata = {'url': '/deviceAppManagement/vppTokens'}  # type: ignore

    async def get_vpp_tokens(
        self,
        vpp_token_id: str,
        select: Optional[List[Union[str, "models.Enum134"]]] = None,
        expand: Optional[List[str]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphVppToken":
        """Get vppTokens from deviceAppManagement.

        Get vppTokens from deviceAppManagement.

        :param vpp_token_id: key: id of vppToken.
        :type vpp_token_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum134]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphVppToken, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphVppToken
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphVppToken"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_vpp_tokens.metadata['url']  # type: ignore
        path_format_arguments = {
            'vppToken-id': self._serialize.url("vpp_token_id", vpp_token_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphVppToken', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_vpp_tokens.metadata = {'url': '/deviceAppManagement/vppTokens/{vppToken-id}'}  # type: ignore

    async def update_vpp_tokens(
        self,
        vpp_token_id: str,
        body: "models.MicrosoftGraphVppToken",
        **kwargs
    ) -> None:
        """Update the navigation property vppTokens in deviceAppManagement.

        Update the navigation property vppTokens in deviceAppManagement.

        :param vpp_token_id: key: id of vppToken.
        :type vpp_token_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.MicrosoftGraphVppToken
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_vpp_tokens.metadata['url']  # type: ignore
        path_format_arguments = {
            'vppToken-id': self._serialize.url("vpp_token_id", vpp_token_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphVppToken')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_vpp_tokens.metadata = {'url': '/deviceAppManagement/vppTokens/{vppToken-id}'}  # type: ignore

    async def delete_vpp_tokens(
        self,
        vpp_token_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property vppTokens for deviceAppManagement.

        Delete navigation property vppTokens for deviceAppManagement.

        :param vpp_token_id: key: id of vppToken.
        :type vpp_token_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_vpp_tokens.metadata['url']  # type: ignore
        path_format_arguments = {
            'vppToken-id': self._serialize.url("vpp_token_id", vpp_token_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_vpp_tokens.metadata = {'url': '/deviceAppManagement/vppTokens/{vppToken-id}'}  # type: ignore

    def list_windows_information_protection_policies(
        self,
        orderby: Optional[List[Union[str, "models.Enum135"]]] = None,
        select: Optional[List[Union[str, "models.Enum136"]]] = None,
        expand: Optional[List[Union[str, "models.Enum137"]]] = None,
        **kwargs
    ) -> AsyncIterable["models.CollectionOfWindowsInformationProtectionPolicy"]:
        """Get windowsInformationProtectionPolicies from deviceAppManagement.

        Get windowsInformationProtectionPolicies from deviceAppManagement.

        :param orderby: Order items by property values.
        :type orderby: list[str or ~devices_corporate_management.models.Enum135]
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum136]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum137]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfWindowsInformationProtectionPolicy or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~devices_corporate_management.models.CollectionOfWindowsInformationProtectionPolicy]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfWindowsInformationProtectionPolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_windows_information_protection_policies.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfWindowsInformationProtectionPolicy', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/windowsInformationProtectionPolicies'}  # type: ignore

    async def create_windows_information_protection_policies(
        self,
        body: "models.MicrosoftGraphWindowsInformationProtectionPolicy",
        **kwargs
    ) -> "models.MicrosoftGraphWindowsInformationProtectionPolicy":
        """Create new navigation property to windowsInformationProtectionPolicies for deviceAppManagement.

        Create new navigation property to windowsInformationProtectionPolicies for deviceAppManagement.

        :param body: New navigation property.
        :type body: ~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionPolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphWindowsInformationProtectionPolicy, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionPolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphWindowsInformationProtectionPolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_windows_information_protection_policies.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphWindowsInformationProtectionPolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphWindowsInformationProtectionPolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/windowsInformationProtectionPolicies'}  # type: ignore

    async def get_windows_information_protection_policies(
        self,
        windows_information_protection_policy_id: str,
        select: Optional[List[Union[str, "models.Enum138"]]] = None,
        expand: Optional[List[Union[str, "models.Enum139"]]] = None,
        **kwargs
    ) -> "models.MicrosoftGraphWindowsInformationProtectionPolicy":
        """Get windowsInformationProtectionPolicies from deviceAppManagement.

        Get windowsInformationProtectionPolicies from deviceAppManagement.

        :param windows_information_protection_policy_id: key: id of windowsInformationProtectionPolicy.
        :type windows_information_protection_policy_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~devices_corporate_management.models.Enum138]
        :param expand: Expand related entities.
        :type expand: list[str or ~devices_corporate_management.models.Enum139]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphWindowsInformationProtectionPolicy, or the result of cls(response)
        :rtype: ~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionPolicy
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphWindowsInformationProtectionPolicy"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_windows_information_protection_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'windowsInformationProtectionPolicy-id': self._serialize.url("windows_information_protection_policy_id", windows_information_protection_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphWindowsInformationProtectionPolicy', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/windowsInformationProtectionPolicies/{windowsInformationProtectionPolicy-id}'}  # type: ignore

    async def update_windows_information_protection_policies(
        self,
        windows_information_protection_policy_id: str,
        body: "models.MicrosoftGraphWindowsInformationProtectionPolicy",
        **kwargs
    ) -> None:
        """Update the navigation property windowsInformationProtectionPolicies in deviceAppManagement.

        Update the navigation property windowsInformationProtectionPolicies in deviceAppManagement.

        :param windows_information_protection_policy_id: key: id of windowsInformationProtectionPolicy.
        :type windows_information_protection_policy_id: str
        :param body: New navigation property values.
        :type body: ~devices_corporate_management.models.MicrosoftGraphWindowsInformationProtectionPolicy
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_windows_information_protection_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'windowsInformationProtectionPolicy-id': self._serialize.url("windows_information_protection_policy_id", windows_information_protection_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphWindowsInformationProtectionPolicy')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/windowsInformationProtectionPolicies/{windowsInformationProtectionPolicy-id}'}  # type: ignore

    async def delete_windows_information_protection_policies(
        self,
        windows_information_protection_policy_id: str,
        if_match: Optional[str] = None,
        **kwargs
    ) -> None:
        """Delete navigation property windowsInformationProtectionPolicies for deviceAppManagement.

        Delete navigation property windowsInformationProtectionPolicies for deviceAppManagement.

        :param windows_information_protection_policy_id: key: id of windowsInformationProtectionPolicy.
        :type windows_information_protection_policy_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_windows_information_protection_policies.metadata['url']  # type: ignore
        path_format_arguments = {
            'windowsInformationProtectionPolicy-id': self._serialize.url("windows_information_protection_policy_id", windows_information_protection_policy_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_windows_information_protection_policies.metadata = {'url': '/deviceAppManagement/windowsInformationProtectionPolicies/{windowsInformationProtectionPolicy-id}'}  # type: ignore
