# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines


def groups_group_lifecycle_policy_group_lifecycle_policy_create_group_lifecycle_policy(client,
                                                                                       id_=None,
                                                                                       alternate_notification_emails=None,
                                                                                       group_lifetime_in_days=None,
                                                                                       managed_group_types=None):
    body = {}
    body['id'] = id_
    body['alternate_notification_emails'] = alternate_notification_emails
    body['group_lifetime_in_days'] = group_lifetime_in_days
    body['managed_group_types'] = managed_group_types
    return client.create_group_lifecycle_policy(body=body)


def groups_group_lifecycle_policy_group_lifecycle_policy_delete_group_lifecycle_policy(client,
                                                                                       group_lifecycle_policy_id,
                                                                                       if_match=None):
    return client.delete_group_lifecycle_policy(group_lifecycle_policy_id=group_lifecycle_policy_id,
                                                if_match=if_match)


def groups_group_lifecycle_policy_group_lifecycle_policy_list_group_lifecycle_policy(client,
                                                                                     orderby=None,
                                                                                     select=None,
                                                                                     expand=None):
    return client.list_group_lifecycle_policy(orderby=orderby,
                                              select=select,
                                              expand=expand)


def groups_group_lifecycle_policy_group_lifecycle_policy_show_group_lifecycle_policy(client,
                                                                                     group_lifecycle_policy_id,
                                                                                     select=None,
                                                                                     expand=None):
    return client.get_group_lifecycle_policy(group_lifecycle_policy_id=group_lifecycle_policy_id,
                                             select=select,
                                             expand=expand)


def groups_group_lifecycle_policy_group_lifecycle_policy_update_group_lifecycle_policy(client,
                                                                                       group_lifecycle_policy_id,
                                                                                       id_=None,
                                                                                       alternate_notification_emails=None,
                                                                                       group_lifetime_in_days=None,
                                                                                       managed_group_types=None):
    body = {}
    body['id'] = id_
    body['alternate_notification_emails'] = alternate_notification_emails
    body['group_lifetime_in_days'] = group_lifetime_in_days
    body['managed_group_types'] = managed_group_types
    return client.update_group_lifecycle_policy(group_lifecycle_policy_id=group_lifecycle_policy_id,
                                                body=body)


def groups_group_lifecycle_policy_add_group(client,
                                            group_lifecycle_policy_id,
                                            group_id=None):
    body = {}
    body['group_id'] = group_id
    return client.add_group(group_lifecycle_policy_id=group_lifecycle_policy_id,
                            body=body)


def groups_group_lifecycle_policy_remove_group(client,
                                               group_lifecycle_policy_id,
                                               group_id=None):
    body = {}
    body['group_id'] = group_id
    return client.remove_group(group_lifecycle_policy_id=group_lifecycle_policy_id,
                               body=body)


def groups_group_group_create_group(client,
                                    id_=None,
                                    deleted_date_time=None,
                                    assigned_labels=None,
                                    assigned_licenses=None,
                                    classification=None,
                                    created_date_time=None,
                                    description=None,
                                    display_name=None,
                                    expiration_date_time=None,
                                    group_types=None,
                                    has_members_with_license_errors=None,
                                    is_assignable_to_role=None,
                                    mail=None,
                                    mail_enabled=None,
                                    mail_nickname=None,
                                    membership_rule=None,
                                    membership_rule_processing_state=None,
                                    on_premises_domain_name=None,
                                    on_premises_last_sync_date_time=None,
                                    on_premises_net_bios_name=None,
                                    on_premises_provisioning_errors=None,
                                    on_premises_sam_account_name=None,
                                    on_premises_security_identifier=None,
                                    on_premises_sync_enabled=None,
                                    preferred_data_location=None,
                                    preferred_language=None,
                                    proxy_addresses=None,
                                    renewed_date_time=None,
                                    security_enabled=None,
                                    security_identifier=None,
                                    theme=None,
                                    visibility=None,
                                    allow_external_senders=None,
                                    auto_subscribe_new_members=None,
                                    hide_from_address_lists=None,
                                    hide_from_outlook_clients=None,
                                    is_subscribed_by_mail=None,
                                    unseen_count=None,
                                    is_archived=None,
                                    app_role_assignments=None,
                                    created_on_behalf_of=None,
                                    member_of=None,
                                    members=None,
                                    members_with_license_errors=None,
                                    owners=None,
                                    permission_grants=None,
                                    settings=None,
                                    transitive_member_of=None,
                                    transitive_members=None,
                                    accepted_senders=None,
                                    calendar=None,
                                    calendar_view=None,
                                    conversations=None,
                                    events=None,
                                    photo=None,
                                    photos=None,
                                    rejected_senders=None,
                                    threads=None,
                                    drive=None,
                                    drives=None,
                                    sites=None,
                                    extensions=None,
                                    group_lifecycle_policies=None,
                                    team=None,
                                    microsoft_graph_entity_id=None,
                                    notebooks=None,
                                    operations=None,
                                    pages=None,
                                    resources=None,
                                    section_groups=None,
                                    sections=None,
                                    id1=None,
                                    plans=None,
                                    state=None):
    body = {}
    body['id'] = id_
    body['deleted_date_time'] = deleted_date_time
    body['assigned_labels'] = assigned_labels
    body['assigned_licenses'] = assigned_licenses
    body['classification'] = classification
    body['created_date_time'] = created_date_time
    body['description'] = description
    body['display_name'] = display_name
    body['expiration_date_time'] = expiration_date_time
    body['group_types'] = group_types
    body['has_members_with_license_errors'] = has_members_with_license_errors
    body['is_assignable_to_role'] = is_assignable_to_role
    body['mail'] = mail
    body['mail_enabled'] = mail_enabled
    body['mail_nickname'] = mail_nickname
    body['membership_rule'] = membership_rule
    body['membership_rule_processing_state'] = membership_rule_processing_state
    body['on_premises_domain_name'] = on_premises_domain_name
    body['on_premises_last_sync_date_time'] = on_premises_last_sync_date_time
    body['on_premises_net_bios_name'] = on_premises_net_bios_name
    body['on_premises_provisioning_errors'] = on_premises_provisioning_errors
    body['on_premises_sam_account_name'] = on_premises_sam_account_name
    body['on_premises_security_identifier'] = on_premises_security_identifier
    body['on_premises_sync_enabled'] = on_premises_sync_enabled
    body['preferred_data_location'] = preferred_data_location
    body['preferred_language'] = preferred_language
    body['proxy_addresses'] = proxy_addresses
    body['renewed_date_time'] = renewed_date_time
    body['security_enabled'] = security_enabled
    body['security_identifier'] = security_identifier
    body['theme'] = theme
    body['visibility'] = visibility
    body['allow_external_senders'] = allow_external_senders
    body['auto_subscribe_new_members'] = auto_subscribe_new_members
    body['hide_from_address_lists'] = hide_from_address_lists
    body['hide_from_outlook_clients'] = hide_from_outlook_clients
    body['is_subscribed_by_mail'] = is_subscribed_by_mail
    body['unseen_count'] = unseen_count
    body['is_archived'] = is_archived
    body['app_role_assignments'] = app_role_assignments
    body['created_on_behalf_of'] = created_on_behalf_of
    body['member_of'] = member_of
    body['members'] = members
    body['members_with_license_errors'] = members_with_license_errors
    body['owners'] = owners
    body['permission_grants'] = permission_grants
    body['settings'] = settings
    body['transitive_member_of'] = transitive_member_of
    body['transitive_members'] = transitive_members
    body['accepted_senders'] = accepted_senders
    body['calendar'] = calendar
    body['calendar_view'] = calendar_view
    body['conversations'] = conversations
    body['events'] = events
    body['photo'] = photo
    body['photos'] = photos
    body['rejected_senders'] = rejected_senders
    body['threads'] = threads
    body['drive'] = drive
    body['drives'] = drives
    body['sites'] = sites
    body['extensions'] = extensions
    body['group_lifecycle_policies'] = group_lifecycle_policies
    body['team'] = team
    body['onenote'] = {}
    body['onenote']['id'] = microsoft_graph_entity_id
    body['onenote']['notebooks'] = notebooks
    body['onenote']['operations'] = operations
    body['onenote']['pages'] = pages
    body['onenote']['resources'] = resources
    body['onenote']['section_groups'] = section_groups
    body['onenote']['sections'] = sections
    body['planner'] = {}
    body['planner']['id'] = id1
    body['planner']['plans'] = plans
    body['license_processing_state'] = {}
    body['license_processing_state']['state'] = state
    return client.create_group(body=body)


def groups_group_group_delete_group(client,
                                    group_id,
                                    if_match=None):
    return client.delete_group(group_id=group_id,
                               if_match=if_match)


def groups_group_group_list_group(client,
                                  consistency_level=None,
                                  orderby=None,
                                  select=None,
                                  expand=None):
    return client.list_group(consistency_level=consistency_level,
                             orderby=orderby,
                             select=select,
                             expand=expand)


def groups_group_group_show_group(client,
                                  group_id,
                                  consistency_level=None,
                                  select=None,
                                  expand=None):
    return client.get_group(group_id=group_id,
                            consistency_level=consistency_level,
                            select=select,
                            expand=expand)


def groups_group_group_update_group(client,
                                    group_id,
                                    id_=None,
                                    deleted_date_time=None,
                                    assigned_labels=None,
                                    assigned_licenses=None,
                                    classification=None,
                                    created_date_time=None,
                                    description=None,
                                    display_name=None,
                                    expiration_date_time=None,
                                    group_types=None,
                                    has_members_with_license_errors=None,
                                    is_assignable_to_role=None,
                                    mail=None,
                                    mail_enabled=None,
                                    mail_nickname=None,
                                    membership_rule=None,
                                    membership_rule_processing_state=None,
                                    on_premises_domain_name=None,
                                    on_premises_last_sync_date_time=None,
                                    on_premises_net_bios_name=None,
                                    on_premises_provisioning_errors=None,
                                    on_premises_sam_account_name=None,
                                    on_premises_security_identifier=None,
                                    on_premises_sync_enabled=None,
                                    preferred_data_location=None,
                                    preferred_language=None,
                                    proxy_addresses=None,
                                    renewed_date_time=None,
                                    security_enabled=None,
                                    security_identifier=None,
                                    theme=None,
                                    visibility=None,
                                    allow_external_senders=None,
                                    auto_subscribe_new_members=None,
                                    hide_from_address_lists=None,
                                    hide_from_outlook_clients=None,
                                    is_subscribed_by_mail=None,
                                    unseen_count=None,
                                    is_archived=None,
                                    app_role_assignments=None,
                                    created_on_behalf_of=None,
                                    member_of=None,
                                    members=None,
                                    members_with_license_errors=None,
                                    owners=None,
                                    permission_grants=None,
                                    settings=None,
                                    transitive_member_of=None,
                                    transitive_members=None,
                                    accepted_senders=None,
                                    calendar=None,
                                    calendar_view=None,
                                    conversations=None,
                                    events=None,
                                    photo=None,
                                    photos=None,
                                    rejected_senders=None,
                                    threads=None,
                                    drive=None,
                                    drives=None,
                                    sites=None,
                                    extensions=None,
                                    group_lifecycle_policies=None,
                                    team=None,
                                    microsoft_graph_entity_id=None,
                                    notebooks=None,
                                    operations=None,
                                    pages=None,
                                    resources=None,
                                    section_groups=None,
                                    sections=None,
                                    id1=None,
                                    plans=None,
                                    state=None):
    body = {}
    body['id'] = id_
    body['deleted_date_time'] = deleted_date_time
    body['assigned_labels'] = assigned_labels
    body['assigned_licenses'] = assigned_licenses
    body['classification'] = classification
    body['created_date_time'] = created_date_time
    body['description'] = description
    body['display_name'] = display_name
    body['expiration_date_time'] = expiration_date_time
    body['group_types'] = group_types
    body['has_members_with_license_errors'] = has_members_with_license_errors
    body['is_assignable_to_role'] = is_assignable_to_role
    body['mail'] = mail
    body['mail_enabled'] = mail_enabled
    body['mail_nickname'] = mail_nickname
    body['membership_rule'] = membership_rule
    body['membership_rule_processing_state'] = membership_rule_processing_state
    body['on_premises_domain_name'] = on_premises_domain_name
    body['on_premises_last_sync_date_time'] = on_premises_last_sync_date_time
    body['on_premises_net_bios_name'] = on_premises_net_bios_name
    body['on_premises_provisioning_errors'] = on_premises_provisioning_errors
    body['on_premises_sam_account_name'] = on_premises_sam_account_name
    body['on_premises_security_identifier'] = on_premises_security_identifier
    body['on_premises_sync_enabled'] = on_premises_sync_enabled
    body['preferred_data_location'] = preferred_data_location
    body['preferred_language'] = preferred_language
    body['proxy_addresses'] = proxy_addresses
    body['renewed_date_time'] = renewed_date_time
    body['security_enabled'] = security_enabled
    body['security_identifier'] = security_identifier
    body['theme'] = theme
    body['visibility'] = visibility
    body['allow_external_senders'] = allow_external_senders
    body['auto_subscribe_new_members'] = auto_subscribe_new_members
    body['hide_from_address_lists'] = hide_from_address_lists
    body['hide_from_outlook_clients'] = hide_from_outlook_clients
    body['is_subscribed_by_mail'] = is_subscribed_by_mail
    body['unseen_count'] = unseen_count
    body['is_archived'] = is_archived
    body['app_role_assignments'] = app_role_assignments
    body['created_on_behalf_of'] = created_on_behalf_of
    body['member_of'] = member_of
    body['members'] = members
    body['members_with_license_errors'] = members_with_license_errors
    body['owners'] = owners
    body['permission_grants'] = permission_grants
    body['settings'] = settings
    body['transitive_member_of'] = transitive_member_of
    body['transitive_members'] = transitive_members
    body['accepted_senders'] = accepted_senders
    body['calendar'] = calendar
    body['calendar_view'] = calendar_view
    body['conversations'] = conversations
    body['events'] = events
    body['photo'] = photo
    body['photos'] = photos
    body['rejected_senders'] = rejected_senders
    body['threads'] = threads
    body['drive'] = drive
    body['drives'] = drives
    body['sites'] = sites
    body['extensions'] = extensions
    body['group_lifecycle_policies'] = group_lifecycle_policies
    body['team'] = team
    body['onenote'] = {}
    body['onenote']['id'] = microsoft_graph_entity_id
    body['onenote']['notebooks'] = notebooks
    body['onenote']['operations'] = operations
    body['onenote']['pages'] = pages
    body['onenote']['resources'] = resources
    body['onenote']['section_groups'] = section_groups
    body['onenote']['sections'] = sections
    body['planner'] = {}
    body['planner']['id'] = id1
    body['planner']['plans'] = plans
    body['license_processing_state'] = {}
    body['license_processing_state']['state'] = state
    return client.update_group(group_id=group_id,
                               body=body)


def groups_group_add_favorite(client,
                              group_id):
    return client.add_favorite(group_id=group_id)


def groups_group_assign_license(client,
                                group_id,
                                add_licenses=None,
                                remove_licenses=None):
    body = {}
    body['add_licenses'] = add_licenses
    body['remove_licenses'] = remove_licenses
    return client.assign_license(group_id=group_id,
                                 body=body)


def groups_group_check_granted_permission_for_app(client,
                                                  group_id):
    return client.check_granted_permissions_for_app(group_id=group_id)


def groups_group_check_member_group(client,
                                    group_id,
                                    group_ids=None):
    body = {}
    body['group_ids'] = group_ids
    return client.check_member_groups(group_id=group_id,
                                      body=body)


def groups_group_check_member_object(client,
                                     group_id,
                                     ids=None):
    body = {}
    body['ids'] = ids
    return client.check_member_objects(group_id=group_id,
                                       body=body)


def groups_group_create_conversation(client,
                                     group_id,
                                     id_=None,
                                     has_attachments=None,
                                     last_delivered_date_time=None,
                                     preview=None,
                                     topic=None,
                                     unique_senders=None,
                                     threads=None):
    body = {}
    body['id'] = id_
    body['has_attachments'] = has_attachments
    body['last_delivered_date_time'] = last_delivered_date_time
    body['preview'] = preview
    body['topic'] = topic
    body['unique_senders'] = unique_senders
    body['threads'] = threads
    return client.create_conversations(group_id=group_id,
                                       body=body)


def groups_group_create_extension(client,
                                  group_id,
                                  id_=None):
    body = {}
    body['id'] = id_
    return client.create_extensions(group_id=group_id,
                                    body=body)


def groups_group_create_permission_grant(client,
                                         group_id,
                                         id_=None,
                                         deleted_date_time=None,
                                         client_app_id=None,
                                         client_id=None,
                                         permission=None,
                                         permission_type=None,
                                         resource_app_id=None):
    body = {}
    body['id'] = id_
    body['deleted_date_time'] = deleted_date_time
    body['client_app_id'] = client_app_id
    body['client_id'] = client_id
    body['permission'] = permission
    body['permission_type'] = permission_type
    body['resource_app_id'] = resource_app_id
    return client.create_permission_grants(group_id=group_id,
                                           body=body)


def groups_group_create_photo(client,
                              group_id,
                              id_=None,
                              height=None,
                              width=None):
    body = {}
    body['id'] = id_
    body['height'] = height
    body['width'] = width
    return client.create_photos(group_id=group_id,
                                body=body)


def groups_group_create_ref_accepted_sender(client,
                                            group_id,
                                            body):
    return client.create_ref_accepted_senders(group_id=group_id,
                                              body=body)


def groups_group_create_ref_member(client,
                                   group_id,
                                   body):
    return client.create_ref_members(group_id=group_id,
                                     body=body)


def groups_group_create_ref_member_of(client,
                                      group_id,
                                      body):
    return client.create_ref_member_of(group_id=group_id,
                                       body=body)


def groups_group_create_ref_member_with_license_error(client,
                                                      group_id,
                                                      body):
    return client.create_ref_members_with_license_errors(group_id=group_id,
                                                         body=body)


def groups_group_create_ref_owner(client,
                                  group_id,
                                  body):
    return client.create_ref_owners(group_id=group_id,
                                    body=body)


def groups_group_create_ref_rejected_sender(client,
                                            group_id,
                                            body):
    return client.create_ref_rejected_senders(group_id=group_id,
                                              body=body)


def groups_group_create_ref_transitive_member(client,
                                              group_id,
                                              body):
    return client.create_ref_transitive_members(group_id=group_id,
                                                body=body)


def groups_group_create_ref_transitive_member_of(client,
                                                 group_id,
                                                 body):
    return client.create_ref_transitive_member_of(group_id=group_id,
                                                  body=body)


def groups_group_create_thread(client,
                               group_id,
                               id_=None,
                               cc_recipients=None,
                               has_attachments=None,
                               is_locked=None,
                               last_delivered_date_time=None,
                               preview=None,
                               topic=None,
                               to_recipients=None,
                               unique_senders=None,
                               posts=None):
    body = {}
    body['id'] = id_
    body['cc_recipients'] = cc_recipients
    body['has_attachments'] = has_attachments
    body['is_locked'] = is_locked
    body['last_delivered_date_time'] = last_delivered_date_time
    body['preview'] = preview
    body['topic'] = topic
    body['to_recipients'] = to_recipients
    body['unique_senders'] = unique_senders
    body['posts'] = posts
    return client.create_threads(group_id=group_id,
                                 body=body)


def groups_group_delete_conversation(client,
                                     group_id,
                                     conversation_id,
                                     if_match=None):
    return client.delete_conversations(group_id=group_id,
                                       conversation_id=conversation_id,
                                       if_match=if_match)


def groups_group_delete_extension(client,
                                  group_id,
                                  extension_id,
                                  if_match=None):
    return client.delete_extensions(group_id=group_id,
                                    extension_id=extension_id,
                                    if_match=if_match)


def groups_group_delete_permission_grant(client,
                                         group_id,
                                         resource_specific_permission_grant_id,
                                         if_match=None):
    return client.delete_permission_grants(group_id=group_id,
                                           resource_specific_permission_grant_id=resource_specific_permission_grant_id,
                                           if_match=if_match)


def groups_group_delete_photo(client,
                              group_id,
                              profile_photo_id=None,
                              if_match=None):
    if group_id is not None and profile_photo_id is not None:
        return client.delete_photos(group_id=group_id,
                                    profile_photo_id=profile_photo_id,
                                    if_match=if_match)
    return client.delete_photo(group_id=group_id,
                               if_match=if_match)


def groups_group_delete_ref_created_on_behalf_of(client,
                                                 group_id,
                                                 if_match=None):
    return client.delete_ref_created_on_behalf_of(group_id=group_id,
                                                  if_match=if_match)


def groups_group_delete_thread(client,
                               group_id,
                               conversation_thread_id,
                               if_match=None):
    return client.delete_threads(group_id=group_id,
                                 conversation_thread_id=conversation_thread_id,
                                 if_match=if_match)


def groups_group_delta(client):
    return client.delta()


def groups_group_get_available_extension_property(client,
                                                  is_synced_from_on_premises=None):
    if is_synced_from_on_premises is None:
        is_synced_from_on_premises = False
    body = {}
    body['is_synced_from_on_premises'] = False if is_synced_from_on_premises is None else is_synced_from_on_premises
    return client.get_available_extension_properties(body=body)


def groups_group_get_by_id(client,
                           ids=None,
                           types=None):
    body = {}
    body['ids'] = ids
    body['types'] = types
    return client.get_by_ids(body=body)


def groups_group_get_member_group(client,
                                  group_id,
                                  security_enabled_only=None):
    if security_enabled_only is None:
        security_enabled_only = False
    body = {}
    body['security_enabled_only'] = False if security_enabled_only is None else security_enabled_only
    return client.get_member_groups(group_id=group_id,
                                    body=body)


def groups_group_get_member_object(client,
                                   group_id,
                                   security_enabled_only=None):
    if security_enabled_only is None:
        security_enabled_only = False
    body = {}
    body['security_enabled_only'] = False if security_enabled_only is None else security_enabled_only
    return client.get_member_objects(group_id=group_id,
                                     body=body)


def groups_group_list_accepted_sender(client,
                                      group_id,
                                      orderby=None,
                                      select=None,
                                      expand=None):
    return client.list_accepted_senders(group_id=group_id,
                                        orderby=orderby,
                                        select=select,
                                        expand=expand)


def groups_group_list_conversation(client,
                                   group_id,
                                   orderby=None,
                                   select=None,
                                   expand=None):
    return client.list_conversations(group_id=group_id,
                                     orderby=orderby,
                                     select=select,
                                     expand=expand)


def groups_group_list_extension(client,
                                group_id,
                                orderby=None,
                                select=None,
                                expand=None):
    return client.list_extensions(group_id=group_id,
                                  orderby=orderby,
                                  select=select,
                                  expand=expand)


def groups_group_list_member(client,
                             group_id,
                             orderby=None,
                             select=None,
                             expand=None):
    return client.list_members(group_id=group_id,
                               orderby=orderby,
                               select=select,
                               expand=expand)


def groups_group_list_member_of(client,
                                group_id,
                                orderby=None,
                                select=None,
                                expand=None):
    return client.list_member_of(group_id=group_id,
                                 orderby=orderby,
                                 select=select,
                                 expand=expand)


def groups_group_list_member_with_license_error(client,
                                                group_id,
                                                orderby=None,
                                                select=None,
                                                expand=None):
    return client.list_members_with_license_errors(group_id=group_id,
                                                   orderby=orderby,
                                                   select=select,
                                                   expand=expand)


def groups_group_list_owner(client,
                            group_id,
                            orderby=None,
                            select=None,
                            expand=None):
    return client.list_owners(group_id=group_id,
                              orderby=orderby,
                              select=select,
                              expand=expand)


def groups_group_list_permission_grant(client,
                                       group_id,
                                       orderby=None,
                                       select=None,
                                       expand=None):
    return client.list_permission_grants(group_id=group_id,
                                         orderby=orderby,
                                         select=select,
                                         expand=expand)


def groups_group_list_photo(client,
                            group_id,
                            orderby=None,
                            select=None,
                            expand=None):
    return client.list_photos(group_id=group_id,
                              orderby=orderby,
                              select=select,
                              expand=expand)


def groups_group_list_ref_accepted_sender(client,
                                          group_id,
                                          orderby=None):
    return client.list_ref_accepted_senders(group_id=group_id,
                                            orderby=orderby)


def groups_group_list_ref_member(client,
                                 group_id,
                                 orderby=None):
    return client.list_ref_members(group_id=group_id,
                                   orderby=orderby)


def groups_group_list_ref_member_of(client,
                                    group_id,
                                    orderby=None):
    return client.list_ref_member_of(group_id=group_id,
                                     orderby=orderby)


def groups_group_list_ref_member_with_license_error(client,
                                                    group_id,
                                                    orderby=None):
    return client.list_ref_members_with_license_errors(group_id=group_id,
                                                       orderby=orderby)


def groups_group_list_ref_owner(client,
                                group_id,
                                orderby=None):
    return client.list_ref_owners(group_id=group_id,
                                  orderby=orderby)


def groups_group_list_ref_rejected_sender(client,
                                          group_id,
                                          orderby=None):
    return client.list_ref_rejected_senders(group_id=group_id,
                                            orderby=orderby)


def groups_group_list_ref_transitive_member(client,
                                            group_id,
                                            orderby=None):
    return client.list_ref_transitive_members(group_id=group_id,
                                              orderby=orderby)


def groups_group_list_ref_transitive_member_of(client,
                                               group_id,
                                               orderby=None):
    return client.list_ref_transitive_member_of(group_id=group_id,
                                                orderby=orderby)


def groups_group_list_rejected_sender(client,
                                      group_id,
                                      orderby=None,
                                      select=None,
                                      expand=None):
    return client.list_rejected_senders(group_id=group_id,
                                        orderby=orderby,
                                        select=select,
                                        expand=expand)


def groups_group_list_thread(client,
                             group_id,
                             orderby=None,
                             select=None,
                             expand=None):
    return client.list_threads(group_id=group_id,
                               orderby=orderby,
                               select=select,
                               expand=expand)


def groups_group_list_transitive_member(client,
                                        group_id,
                                        orderby=None,
                                        select=None,
                                        expand=None):
    return client.list_transitive_members(group_id=group_id,
                                          orderby=orderby,
                                          select=select,
                                          expand=expand)


def groups_group_list_transitive_member_of(client,
                                           group_id,
                                           orderby=None,
                                           select=None,
                                           expand=None):
    return client.list_transitive_member_of(group_id=group_id,
                                            orderby=orderby,
                                            select=select,
                                            expand=expand)


def groups_group_remove_favorite(client,
                                 group_id):
    return client.remove_favorite(group_id=group_id)


def groups_group_renew(client,
                       group_id):
    return client.renew(group_id=group_id)


def groups_group_reset_unseen_count(client,
                                    group_id):
    return client.reset_unseen_count(group_id=group_id)


def groups_group_restore(client,
                         group_id):
    return client.restore(group_id=group_id)


def groups_group_set_photo_content(client,
                                   group_id,
                                   data,
                                   profile_photo_id=None):
    if group_id is not None and profile_photo_id is not None and data is not None:
        return client.set_photos_content(group_id=group_id,
                                         profile_photo_id=profile_photo_id,
                                         data=data)
    return client.set_photo_content(group_id=group_id,
                                    data=data)


def groups_group_set_ref_created_on_behalf_of(client,
                                              group_id,
                                              body):
    return client.set_ref_created_on_behalf_of(group_id=group_id,
                                               body=body)


def groups_group_show_conversation(client,
                                   group_id,
                                   conversation_id,
                                   select=None,
                                   expand=None):
    return client.get_conversations(group_id=group_id,
                                    conversation_id=conversation_id,
                                    select=select,
                                    expand=expand)


def groups_group_show_created_on_behalf_of(client,
                                           group_id,
                                           select=None,
                                           expand=None):
    return client.get_created_on_behalf_of(group_id=group_id,
                                           select=select,
                                           expand=expand)


def groups_group_show_extension(client,
                                group_id,
                                extension_id,
                                select=None,
                                expand=None):
    return client.get_extensions(group_id=group_id,
                                 extension_id=extension_id,
                                 select=select,
                                 expand=expand)


def groups_group_show_permission_grant(client,
                                       group_id,
                                       resource_specific_permission_grant_id,
                                       select=None,
                                       expand=None):
    return client.get_permission_grants(group_id=group_id,
                                        resource_specific_permission_grant_id=resource_specific_permission_grant_id,
                                        select=select,
                                        expand=expand)


def groups_group_show_photo(client,
                            group_id,
                            profile_photo_id=None,
                            select=None,
                            expand=None):
    if group_id is not None and profile_photo_id is not None:
        return client.get_photos(group_id=group_id,
                                 profile_photo_id=profile_photo_id,
                                 select=select,
                                 expand=expand)
    return client.get_photo(group_id=group_id,
                            select=select,
                            expand=expand)


def groups_group_show_photo_content(client,
                                    group_id,
                                    profile_photo_id=None):
    if group_id is not None and profile_photo_id is not None:
        return client.get_photos_content(group_id=group_id,
                                         profile_photo_id=profile_photo_id)
    return client.get_photo_content(group_id=group_id)


def groups_group_show_ref_created_on_behalf_of(client,
                                               group_id):
    return client.get_ref_created_on_behalf_of(group_id=group_id)


def groups_group_show_thread(client,
                             group_id,
                             conversation_thread_id,
                             select=None,
                             expand=None):
    return client.get_threads(group_id=group_id,
                              conversation_thread_id=conversation_thread_id,
                              select=select,
                              expand=expand)


def groups_group_subscribe_by_mail(client,
                                   group_id):
    return client.subscribe_by_mail(group_id=group_id)


def groups_group_unsubscribe_by_mail(client,
                                     group_id):
    return client.unsubscribe_by_mail(group_id=group_id)


def groups_group_update_conversation(client,
                                     group_id,
                                     conversation_id,
                                     id_=None,
                                     has_attachments=None,
                                     last_delivered_date_time=None,
                                     preview=None,
                                     topic=None,
                                     unique_senders=None,
                                     threads=None):
    body = {}
    body['id'] = id_
    body['has_attachments'] = has_attachments
    body['last_delivered_date_time'] = last_delivered_date_time
    body['preview'] = preview
    body['topic'] = topic
    body['unique_senders'] = unique_senders
    body['threads'] = threads
    return client.update_conversations(group_id=group_id,
                                       conversation_id=conversation_id,
                                       body=body)


def groups_group_update_extension(client,
                                  group_id,
                                  extension_id,
                                  id_=None):
    body = {}
    body['id'] = id_
    return client.update_extensions(group_id=group_id,
                                    extension_id=extension_id,
                                    body=body)


def groups_group_update_permission_grant(client,
                                         group_id,
                                         resource_specific_permission_grant_id,
                                         id_=None,
                                         deleted_date_time=None,
                                         client_app_id=None,
                                         client_id=None,
                                         permission=None,
                                         permission_type=None,
                                         resource_app_id=None):
    body = {}
    body['id'] = id_
    body['deleted_date_time'] = deleted_date_time
    body['client_app_id'] = client_app_id
    body['client_id'] = client_id
    body['permission'] = permission
    body['permission_type'] = permission_type
    body['resource_app_id'] = resource_app_id
    return client.update_permission_grants(group_id=group_id,
                                           resource_specific_permission_grant_id=resource_specific_permission_grant_id,
                                           body=body)


def groups_group_update_photo(client,
                              group_id,
                              profile_photo_id=None,
                              id_=None,
                              height=None,
                              width=None):
    body = {}
    body['id'] = id_
    body['height'] = height
    body['width'] = width
    if group_id is not None and profile_photo_id is not None:
        return client.update_photos(group_id=group_id,
                                    profile_photo_id=profile_photo_id,
                                    body=body)
    return client.update_photo(group_id=group_id,
                               body=body)


def groups_group_update_thread(client,
                               group_id,
                               conversation_thread_id,
                               id_=None,
                               cc_recipients=None,
                               has_attachments=None,
                               is_locked=None,
                               last_delivered_date_time=None,
                               preview=None,
                               topic=None,
                               to_recipients=None,
                               unique_senders=None,
                               posts=None):
    body = {}
    body['id'] = id_
    body['cc_recipients'] = cc_recipients
    body['has_attachments'] = has_attachments
    body['is_locked'] = is_locked
    body['last_delivered_date_time'] = last_delivered_date_time
    body['preview'] = preview
    body['topic'] = topic
    body['to_recipients'] = to_recipients
    body['unique_senders'] = unique_senders
    body['posts'] = posts
    return client.update_threads(group_id=group_id,
                                 conversation_thread_id=conversation_thread_id,
                                 body=body)


def groups_group_validate_property(client,
                                   group_id,
                                   display_name=None,
                                   mail_nickname=None,
                                   on_behalf_of_user_id=None):
    body = {}
    body['display_name'] = display_name
    body['mail_nickname'] = mail_nickname
    body['on_behalf_of_user_id'] = on_behalf_of_user_id
    return client.validate_properties(group_id=group_id,
                                      body=body)


def groups_group_calendar_calendar_view_attachment_create_upload_session(client,
                                                                         group_id,
                                                                         event_id,
                                                                         attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(group_id=group_id,
                                        event_id=event_id,
                                        body=body)


def groups_group_calendar_calendar_view_calendar_allowed_calendar_sharing_role(client,
                                                                               group_id,
                                                                               event_id,
                                                                               user):
    return client.allowed_calendar_sharing_roles(group_id=group_id,
                                                 event_id=event_id,
                                                 user=user)


def groups_group_calendar_calendar_view_calendar_get_schedule(client,
                                                              group_id,
                                                              event_id,
                                                              schedules=None,
                                                              end_time=None,
                                                              start_time=None,
                                                              availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(group_id=group_id,
                               event_id=event_id,
                               body=body)


def groups_group_calendar_calendar_view_instance_accept(client,
                                                        group_id,
                                                        event_id,
                                                        event_id1,
                                                        comment=None,
                                                        send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_calendar_calendar_view_instance_cancel(client,
                                                        group_id,
                                                        event_id,
                                                        event_id1,
                                                        comment=None):
    body = {}
    body['comment'] = comment
    return client.cancel(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_calendar_calendar_view_instance_decline(client,
                                                         group_id,
                                                         event_id,
                                                         event_id1,
                                                         comment=None,
                                                         send_response=None,
                                                         end=None,
                                                         start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.decline(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_calendar_calendar_view_instance_delta(client,
                                                       group_id,
                                                       event_id):
    return client.delta(group_id=group_id,
                        event_id=event_id)


def groups_group_calendar_calendar_view_instance_dismiss_reminder(client,
                                                                  group_id,
                                                                  event_id,
                                                                  event_id1):
    return client.dismiss_reminder(group_id=group_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def groups_group_calendar_calendar_view_instance_forward(client,
                                                         group_id,
                                                         event_id,
                                                         event_id1,
                                                         to_recipients=None,
                                                         comment=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    return client.forward(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_calendar_calendar_view_instance_snooze_reminder(client,
                                                                 group_id,
                                                                 event_id,
                                                                 event_id1,
                                                                 new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(group_id=group_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def groups_group_calendar_calendar_view_instance_tentatively_accept(client,
                                                                    group_id,
                                                                    event_id,
                                                                    event_id1,
                                                                    comment=None,
                                                                    send_response=None,
                                                                    end=None,
                                                                    start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.tentatively_accept(group_id=group_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def groups_group_calendar_calendar_view_accept(client,
                                               group_id,
                                               event_id,
                                               comment=None,
                                               send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(group_id=group_id,
                         event_id=event_id,
                         body=body)


def groups_group_calendar_calendar_view_cancel(client,
                                               group_id,
                                               event_id,
                                               comment=None):
    body = {}
    body['comment'] = comment
    return client.cancel(group_id=group_id,
                         event_id=event_id,
                         body=body)


def groups_group_calendar_calendar_view_decline(client,
                                                group_id,
                                                event_id,
                                                comment=None,
                                                send_response=None,
                                                end=None,
                                                start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.decline(group_id=group_id,
                          event_id=event_id,
                          body=body)


def groups_group_calendar_calendar_view_delta(client,
                                              group_id):
    return client.delta(group_id=group_id)


def groups_group_calendar_calendar_view_dismiss_reminder(client,
                                                         group_id,
                                                         event_id):
    return client.dismiss_reminder(group_id=group_id,
                                   event_id=event_id)


def groups_group_calendar_calendar_view_forward(client,
                                                group_id,
                                                event_id,
                                                to_recipients=None,
                                                comment=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    return client.forward(group_id=group_id,
                          event_id=event_id,
                          body=body)


def groups_group_calendar_calendar_view_snooze_reminder(client,
                                                        group_id,
                                                        event_id,
                                                        new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(group_id=group_id,
                                  event_id=event_id,
                                  body=body)


def groups_group_calendar_calendar_view_tentatively_accept(client,
                                                           group_id,
                                                           event_id,
                                                           comment=None,
                                                           send_response=None,
                                                           end=None,
                                                           start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.tentatively_accept(group_id=group_id,
                                     event_id=event_id,
                                     body=body)


def groups_group_calendar_event_attachment_create_upload_session(client,
                                                                 group_id,
                                                                 event_id,
                                                                 attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(group_id=group_id,
                                        event_id=event_id,
                                        body=body)


def groups_group_calendar_event_calendar_allowed_calendar_sharing_role(client,
                                                                       group_id,
                                                                       event_id,
                                                                       user):
    return client.allowed_calendar_sharing_roles(group_id=group_id,
                                                 event_id=event_id,
                                                 user=user)


def groups_group_calendar_event_calendar_get_schedule(client,
                                                      group_id,
                                                      event_id,
                                                      schedules=None,
                                                      end_time=None,
                                                      start_time=None,
                                                      availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(group_id=group_id,
                               event_id=event_id,
                               body=body)


def groups_group_calendar_event_instance_accept(client,
                                                group_id,
                                                event_id,
                                                event_id1,
                                                comment=None,
                                                send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_calendar_event_instance_cancel(client,
                                                group_id,
                                                event_id,
                                                event_id1,
                                                comment=None):
    body = {}
    body['comment'] = comment
    return client.cancel(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_calendar_event_instance_decline(client,
                                                 group_id,
                                                 event_id,
                                                 event_id1,
                                                 comment=None,
                                                 send_response=None,
                                                 end=None,
                                                 start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.decline(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_calendar_event_instance_delta(client,
                                               group_id,
                                               event_id):
    return client.delta(group_id=group_id,
                        event_id=event_id)


def groups_group_calendar_event_instance_dismiss_reminder(client,
                                                          group_id,
                                                          event_id,
                                                          event_id1):
    return client.dismiss_reminder(group_id=group_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def groups_group_calendar_event_instance_forward(client,
                                                 group_id,
                                                 event_id,
                                                 event_id1,
                                                 to_recipients=None,
                                                 comment=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    return client.forward(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_calendar_event_instance_snooze_reminder(client,
                                                         group_id,
                                                         event_id,
                                                         event_id1,
                                                         new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(group_id=group_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def groups_group_calendar_event_instance_tentatively_accept(client,
                                                            group_id,
                                                            event_id,
                                                            event_id1,
                                                            comment=None,
                                                            send_response=None,
                                                            end=None,
                                                            start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.tentatively_accept(group_id=group_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def groups_group_calendar_event_accept(client,
                                       group_id,
                                       event_id,
                                       comment=None,
                                       send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(group_id=group_id,
                         event_id=event_id,
                         body=body)


def groups_group_calendar_event_cancel(client,
                                       group_id,
                                       event_id,
                                       comment=None):
    body = {}
    body['comment'] = comment
    return client.cancel(group_id=group_id,
                         event_id=event_id,
                         body=body)


def groups_group_calendar_event_decline(client,
                                        group_id,
                                        event_id,
                                        comment=None,
                                        send_response=None,
                                        end=None,
                                        start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.decline(group_id=group_id,
                          event_id=event_id,
                          body=body)


def groups_group_calendar_event_delta(client,
                                      group_id):
    return client.delta(group_id=group_id)


def groups_group_calendar_event_dismiss_reminder(client,
                                                 group_id,
                                                 event_id):
    return client.dismiss_reminder(group_id=group_id,
                                   event_id=event_id)


def groups_group_calendar_event_forward(client,
                                        group_id,
                                        event_id,
                                        to_recipients=None,
                                        comment=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    return client.forward(group_id=group_id,
                          event_id=event_id,
                          body=body)


def groups_group_calendar_event_snooze_reminder(client,
                                                group_id,
                                                event_id,
                                                new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(group_id=group_id,
                                  event_id=event_id,
                                  body=body)


def groups_group_calendar_event_tentatively_accept(client,
                                                   group_id,
                                                   event_id,
                                                   comment=None,
                                                   send_response=None,
                                                   end=None,
                                                   start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.tentatively_accept(group_id=group_id,
                                     event_id=event_id,
                                     body=body)


def groups_group_calendar_allowed_calendar_sharing_role(client,
                                                        group_id,
                                                        user):
    return client.allowed_calendar_sharing_roles(group_id=group_id,
                                                 user=user)


def groups_group_calendar_get_schedule(client,
                                       group_id,
                                       schedules=None,
                                       end_time=None,
                                       start_time=None,
                                       availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(group_id=group_id,
                               body=body)


def groups_group_calendar_view_attachment_create_upload_session(client,
                                                                group_id,
                                                                event_id,
                                                                attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(group_id=group_id,
                                        event_id=event_id,
                                        body=body)


def groups_group_calendar_view_calendar_calendar_view_accept(client,
                                                             group_id,
                                                             event_id,
                                                             event_id1,
                                                             comment=None,
                                                             send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_calendar_view_calendar_calendar_view_cancel(client,
                                                             group_id,
                                                             event_id,
                                                             event_id1,
                                                             comment=None):
    body = {}
    body['comment'] = comment
    return client.cancel(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_calendar_view_calendar_calendar_view_decline(client,
                                                              group_id,
                                                              event_id,
                                                              event_id1,
                                                              comment=None,
                                                              send_response=None,
                                                              end=None,
                                                              start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.decline(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_calendar_view_calendar_calendar_view_delta(client,
                                                            group_id,
                                                            event_id):
    return client.delta(group_id=group_id,
                        event_id=event_id)


def groups_group_calendar_view_calendar_calendar_view_dismiss_reminder(client,
                                                                       group_id,
                                                                       event_id,
                                                                       event_id1):
    return client.dismiss_reminder(group_id=group_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def groups_group_calendar_view_calendar_calendar_view_forward(client,
                                                              group_id,
                                                              event_id,
                                                              event_id1,
                                                              to_recipients=None,
                                                              comment=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    return client.forward(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_calendar_view_calendar_calendar_view_snooze_reminder(client,
                                                                      group_id,
                                                                      event_id,
                                                                      event_id1,
                                                                      new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(group_id=group_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def groups_group_calendar_view_calendar_calendar_view_tentatively_accept(client,
                                                                         group_id,
                                                                         event_id,
                                                                         event_id1,
                                                                         comment=None,
                                                                         send_response=None,
                                                                         end=None,
                                                                         start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.tentatively_accept(group_id=group_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def groups_group_calendar_view_calendar_event_accept(client,
                                                     group_id,
                                                     event_id,
                                                     event_id1,
                                                     comment=None,
                                                     send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_calendar_view_calendar_event_cancel(client,
                                                     group_id,
                                                     event_id,
                                                     event_id1,
                                                     comment=None):
    body = {}
    body['comment'] = comment
    return client.cancel(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_calendar_view_calendar_event_decline(client,
                                                      group_id,
                                                      event_id,
                                                      event_id1,
                                                      comment=None,
                                                      send_response=None,
                                                      end=None,
                                                      start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.decline(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_calendar_view_calendar_event_delta(client,
                                                    group_id,
                                                    event_id):
    return client.delta(group_id=group_id,
                        event_id=event_id)


def groups_group_calendar_view_calendar_event_dismiss_reminder(client,
                                                               group_id,
                                                               event_id,
                                                               event_id1):
    return client.dismiss_reminder(group_id=group_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def groups_group_calendar_view_calendar_event_forward(client,
                                                      group_id,
                                                      event_id,
                                                      event_id1,
                                                      to_recipients=None,
                                                      comment=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    return client.forward(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_calendar_view_calendar_event_snooze_reminder(client,
                                                              group_id,
                                                              event_id,
                                                              event_id1,
                                                              new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(group_id=group_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def groups_group_calendar_view_calendar_event_tentatively_accept(client,
                                                                 group_id,
                                                                 event_id,
                                                                 event_id1,
                                                                 comment=None,
                                                                 send_response=None,
                                                                 end=None,
                                                                 start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.tentatively_accept(group_id=group_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def groups_group_calendar_view_calendar_allowed_calendar_sharing_role(client,
                                                                      group_id,
                                                                      event_id,
                                                                      user):
    return client.allowed_calendar_sharing_roles(group_id=group_id,
                                                 event_id=event_id,
                                                 user=user)


def groups_group_calendar_view_calendar_get_schedule(client,
                                                     group_id,
                                                     event_id,
                                                     schedules=None,
                                                     end_time=None,
                                                     start_time=None,
                                                     availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(group_id=group_id,
                               event_id=event_id,
                               body=body)


def groups_group_calendar_view_instance_accept(client,
                                               group_id,
                                               event_id,
                                               event_id1,
                                               comment=None,
                                               send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_calendar_view_instance_cancel(client,
                                               group_id,
                                               event_id,
                                               event_id1,
                                               comment=None):
    body = {}
    body['comment'] = comment
    return client.cancel(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_calendar_view_instance_decline(client,
                                                group_id,
                                                event_id,
                                                event_id1,
                                                comment=None,
                                                send_response=None,
                                                end=None,
                                                start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.decline(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_calendar_view_instance_delta(client,
                                              group_id,
                                              event_id):
    return client.delta(group_id=group_id,
                        event_id=event_id)


def groups_group_calendar_view_instance_dismiss_reminder(client,
                                                         group_id,
                                                         event_id,
                                                         event_id1):
    return client.dismiss_reminder(group_id=group_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def groups_group_calendar_view_instance_forward(client,
                                                group_id,
                                                event_id,
                                                event_id1,
                                                to_recipients=None,
                                                comment=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    return client.forward(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_calendar_view_instance_snooze_reminder(client,
                                                        group_id,
                                                        event_id,
                                                        event_id1,
                                                        new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(group_id=group_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def groups_group_calendar_view_instance_tentatively_accept(client,
                                                           group_id,
                                                           event_id,
                                                           event_id1,
                                                           comment=None,
                                                           send_response=None,
                                                           end=None,
                                                           start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.tentatively_accept(group_id=group_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def groups_group_calendar_view_accept(client,
                                      group_id,
                                      event_id,
                                      comment=None,
                                      send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(group_id=group_id,
                         event_id=event_id,
                         body=body)


def groups_group_calendar_view_cancel(client,
                                      group_id,
                                      event_id,
                                      comment=None):
    body = {}
    body['comment'] = comment
    return client.cancel(group_id=group_id,
                         event_id=event_id,
                         body=body)


def groups_group_calendar_view_decline(client,
                                       group_id,
                                       event_id,
                                       comment=None,
                                       send_response=None,
                                       end=None,
                                       start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.decline(group_id=group_id,
                          event_id=event_id,
                          body=body)


def groups_group_calendar_view_delta(client,
                                     group_id):
    return client.delta(group_id=group_id)


def groups_group_calendar_view_dismiss_reminder(client,
                                                group_id,
                                                event_id):
    return client.dismiss_reminder(group_id=group_id,
                                   event_id=event_id)


def groups_group_calendar_view_forward(client,
                                       group_id,
                                       event_id,
                                       to_recipients=None,
                                       comment=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    return client.forward(group_id=group_id,
                          event_id=event_id,
                          body=body)


def groups_group_calendar_view_snooze_reminder(client,
                                               group_id,
                                               event_id,
                                               new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(group_id=group_id,
                                  event_id=event_id,
                                  body=body)


def groups_group_calendar_view_tentatively_accept(client,
                                                  group_id,
                                                  event_id,
                                                  comment=None,
                                                  send_response=None,
                                                  end=None,
                                                  start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.tentatively_accept(group_id=group_id,
                                     event_id=event_id,
                                     body=body)


def groups_group_conversation_create_thread(client,
                                            group_id,
                                            conversation_id,
                                            id_=None,
                                            cc_recipients=None,
                                            has_attachments=None,
                                            is_locked=None,
                                            last_delivered_date_time=None,
                                            preview=None,
                                            topic=None,
                                            to_recipients=None,
                                            unique_senders=None,
                                            posts=None):
    body = {}
    body['id'] = id_
    body['cc_recipients'] = cc_recipients
    body['has_attachments'] = has_attachments
    body['is_locked'] = is_locked
    body['last_delivered_date_time'] = last_delivered_date_time
    body['preview'] = preview
    body['topic'] = topic
    body['to_recipients'] = to_recipients
    body['unique_senders'] = unique_senders
    body['posts'] = posts
    return client.create_threads(group_id=group_id,
                                 conversation_id=conversation_id,
                                 body=body)


def groups_group_conversation_delete_thread(client,
                                            group_id,
                                            conversation_id,
                                            conversation_thread_id,
                                            if_match=None):
    return client.delete_threads(group_id=group_id,
                                 conversation_id=conversation_id,
                                 conversation_thread_id=conversation_thread_id,
                                 if_match=if_match)


def groups_group_conversation_list_thread(client,
                                          group_id,
                                          conversation_id,
                                          orderby=None,
                                          select=None,
                                          expand=None):
    return client.list_threads(group_id=group_id,
                               conversation_id=conversation_id,
                               orderby=orderby,
                               select=select,
                               expand=expand)


def groups_group_conversation_show_thread(client,
                                          group_id,
                                          conversation_id,
                                          conversation_thread_id,
                                          select=None,
                                          expand=None):
    return client.get_threads(group_id=group_id,
                              conversation_id=conversation_id,
                              conversation_thread_id=conversation_thread_id,
                              select=select,
                              expand=expand)


def groups_group_conversation_update_thread(client,
                                            group_id,
                                            conversation_id,
                                            conversation_thread_id,
                                            id_=None,
                                            cc_recipients=None,
                                            has_attachments=None,
                                            is_locked=None,
                                            last_delivered_date_time=None,
                                            preview=None,
                                            topic=None,
                                            to_recipients=None,
                                            unique_senders=None,
                                            posts=None):
    body = {}
    body['id'] = id_
    body['cc_recipients'] = cc_recipients
    body['has_attachments'] = has_attachments
    body['is_locked'] = is_locked
    body['last_delivered_date_time'] = last_delivered_date_time
    body['preview'] = preview
    body['topic'] = topic
    body['to_recipients'] = to_recipients
    body['unique_senders'] = unique_senders
    body['posts'] = posts
    return client.update_threads(group_id=group_id,
                                 conversation_id=conversation_id,
                                 conversation_thread_id=conversation_thread_id,
                                 body=body)


def groups_group_conversation_thread_create_post(client,
                                                 group_id,
                                                 conversation_id,
                                                 conversation_thread_id,
                                                 body,
                                                 id_=None,
                                                 categories=None,
                                                 change_key=None,
                                                 created_date_time=None,
                                                 last_modified_date_time=None,
                                                 microsoft_graph_post_conversation_id=None,
                                                 microsoft_graph_post_conversation_thread_id_conversation_thread_id=None,
                                                 has_attachments=None,
                                                 new_participants=None,
                                                 received_date_time=None,
                                                 attachments=None,
                                                 extensions=None,
                                                 in_reply_to=None,
                                                 multi_value_extended_properties=None,
                                                 single_value_extended_properties=None,
                                                 email_address=None,
                                                 microsoft_graph_email_address=None):
    body = {}
    body['id'] = id_
    body['categories'] = categories
    body['change_key'] = change_key
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['body'] = body
    body['conversation_id'] = microsoft_graph_post_conversation_id
    body['conversation_thread_id'] = microsoft_graph_post_conversation_thread_id_conversation_thread_id
    body['has_attachments'] = has_attachments
    body['new_participants'] = new_participants
    body['received_date_time'] = received_date_time
    body['attachments'] = attachments
    body['extensions'] = extensions
    body['in_reply_to'] = in_reply_to
    body['multi_value_extended_properties'] = multi_value_extended_properties
    body['single_value_extended_properties'] = single_value_extended_properties
    body['sender'] = {}
    body['sender']['email_address'] = email_address
    body['from_property'] = {}
    body['from_property']['email_address'] = microsoft_graph_email_address
    return client.create_posts(group_id=group_id,
                               conversation_id=conversation_id,
                               conversation_thread_id=conversation_thread_id,
                               body=body)


def groups_group_conversation_thread_delete_post(client,
                                                 group_id,
                                                 conversation_id,
                                                 conversation_thread_id,
                                                 post_id,
                                                 if_match=None):
    return client.delete_posts(group_id=group_id,
                               conversation_id=conversation_id,
                               conversation_thread_id=conversation_thread_id,
                               post_id=post_id,
                               if_match=if_match)


def groups_group_conversation_thread_list_post(client,
                                               group_id,
                                               conversation_id,
                                               conversation_thread_id,
                                               orderby=None,
                                               select=None,
                                               expand=None):
    return client.list_posts(group_id=group_id,
                             conversation_id=conversation_id,
                             conversation_thread_id=conversation_thread_id,
                             orderby=orderby,
                             select=select,
                             expand=expand)


def groups_group_conversation_thread_reply(client,
                                           group_id,
                                           conversation_id,
                                           conversation_thread_id,
                                           post=None):
    body = {}
    body['post'] = post
    return client.reply(group_id=group_id,
                        conversation_id=conversation_id,
                        conversation_thread_id=conversation_thread_id,
                        body=body)


def groups_group_conversation_thread_show_post(client,
                                               group_id,
                                               conversation_id,
                                               conversation_thread_id,
                                               post_id,
                                               select=None,
                                               expand=None):
    return client.get_posts(group_id=group_id,
                            conversation_id=conversation_id,
                            conversation_thread_id=conversation_thread_id,
                            post_id=post_id,
                            select=select,
                            expand=expand)


def groups_group_conversation_thread_update_post(client,
                                                 group_id,
                                                 conversation_id,
                                                 conversation_thread_id,
                                                 post_id,
                                                 body,
                                                 id_=None,
                                                 categories=None,
                                                 change_key=None,
                                                 created_date_time=None,
                                                 last_modified_date_time=None,
                                                 microsoft_graph_post_conversation_id=None,
                                                 microsoft_graph_post_conversation_thread_id_conversation_thread_id=None,
                                                 has_attachments=None,
                                                 new_participants=None,
                                                 received_date_time=None,
                                                 attachments=None,
                                                 extensions=None,
                                                 in_reply_to=None,
                                                 multi_value_extended_properties=None,
                                                 single_value_extended_properties=None,
                                                 email_address=None,
                                                 microsoft_graph_email_address=None):
    body = {}
    body['id'] = id_
    body['categories'] = categories
    body['change_key'] = change_key
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['body'] = body
    body['conversation_id'] = microsoft_graph_post_conversation_id
    body['conversation_thread_id'] = microsoft_graph_post_conversation_thread_id_conversation_thread_id
    body['has_attachments'] = has_attachments
    body['new_participants'] = new_participants
    body['received_date_time'] = received_date_time
    body['attachments'] = attachments
    body['extensions'] = extensions
    body['in_reply_to'] = in_reply_to
    body['multi_value_extended_properties'] = multi_value_extended_properties
    body['single_value_extended_properties'] = single_value_extended_properties
    body['sender'] = {}
    body['sender']['email_address'] = email_address
    body['from_property'] = {}
    body['from_property']['email_address'] = microsoft_graph_email_address
    return client.update_posts(group_id=group_id,
                               conversation_id=conversation_id,
                               conversation_thread_id=conversation_thread_id,
                               post_id=post_id,
                               body=body)


def groups_group_conversation_thread_post_create_attachment(client,
                                                            group_id,
                                                            conversation_id,
                                                            conversation_thread_id,
                                                            post_id,
                                                            id_=None,
                                                            content_type_=None,
                                                            is_inline=None,
                                                            last_modified_date_time=None,
                                                            name=None,
                                                            size=None):
    body = {}
    body['id'] = id_
    body['content_type'] = content_type_
    body['is_inline'] = is_inline
    body['last_modified_date_time'] = last_modified_date_time
    body['name'] = name
    body['size'] = size
    return client.create_attachments(group_id=group_id,
                                     conversation_id=conversation_id,
                                     conversation_thread_id=conversation_thread_id,
                                     post_id=post_id,
                                     body=body)


def groups_group_conversation_thread_post_create_extension(client,
                                                           group_id,
                                                           conversation_id,
                                                           conversation_thread_id,
                                                           post_id,
                                                           id_=None):
    body = {}
    body['id'] = id_
    return client.create_extensions(group_id=group_id,
                                    conversation_id=conversation_id,
                                    conversation_thread_id=conversation_thread_id,
                                    post_id=post_id,
                                    body=body)


def groups_group_conversation_thread_post_create_multi_value_extended_property(client,
                                                                               group_id,
                                                                               conversation_id,
                                                                               conversation_thread_id,
                                                                               post_id,
                                                                               id_=None,
                                                                               value=None):
    body = {}
    body['id'] = id_
    body['value'] = value
    return client.create_multi_value_extended_properties(group_id=group_id,
                                                         conversation_id=conversation_id,
                                                         conversation_thread_id=conversation_thread_id,
                                                         post_id=post_id,
                                                         body=body)


def groups_group_conversation_thread_post_create_single_value_extended_property(client,
                                                                                group_id,
                                                                                conversation_id,
                                                                                conversation_thread_id,
                                                                                post_id,
                                                                                id_=None,
                                                                                value=None):
    body = {}
    body['id'] = id_
    body['value'] = value
    return client.create_single_value_extended_properties(group_id=group_id,
                                                          conversation_id=conversation_id,
                                                          conversation_thread_id=conversation_thread_id,
                                                          post_id=post_id,
                                                          body=body)


def groups_group_conversation_thread_post_delete_attachment(client,
                                                            group_id,
                                                            conversation_id,
                                                            conversation_thread_id,
                                                            post_id,
                                                            attachment_id,
                                                            if_match=None):
    return client.delete_attachments(group_id=group_id,
                                     conversation_id=conversation_id,
                                     conversation_thread_id=conversation_thread_id,
                                     post_id=post_id,
                                     attachment_id=attachment_id,
                                     if_match=if_match)


def groups_group_conversation_thread_post_delete_extension(client,
                                                           group_id,
                                                           conversation_id,
                                                           conversation_thread_id,
                                                           post_id,
                                                           extension_id,
                                                           if_match=None):
    return client.delete_extensions(group_id=group_id,
                                    conversation_id=conversation_id,
                                    conversation_thread_id=conversation_thread_id,
                                    post_id=post_id,
                                    extension_id=extension_id,
                                    if_match=if_match)


def groups_group_conversation_thread_post_delete_in_reply_to(client,
                                                             group_id,
                                                             conversation_id,
                                                             conversation_thread_id,
                                                             post_id,
                                                             if_match=None):
    return client.delete_in_reply_to(group_id=group_id,
                                     conversation_id=conversation_id,
                                     conversation_thread_id=conversation_thread_id,
                                     post_id=post_id,
                                     if_match=if_match)


def groups_group_conversation_thread_post_delete_multi_value_extended_property(client,
                                                                               group_id,
                                                                               conversation_id,
                                                                               conversation_thread_id,
                                                                               post_id,
                                                                               multi_value_legacy_extended_property_id,
                                                                               if_match=None):
    return client.delete_multi_value_extended_properties(group_id=group_id,
                                                         conversation_id=conversation_id,
                                                         conversation_thread_id=conversation_thread_id,
                                                         post_id=post_id,
                                                         multi_value_legacy_extended_property_id=multi_value_legacy_extended_property_id,
                                                         if_match=if_match)


def groups_group_conversation_thread_post_delete_single_value_extended_property(client,
                                                                                group_id,
                                                                                conversation_id,
                                                                                conversation_thread_id,
                                                                                post_id,
                                                                                single_value_legacy_extended_property_id,
                                                                                if_match=None):
    return client.delete_single_value_extended_properties(group_id=group_id,
                                                          conversation_id=conversation_id,
                                                          conversation_thread_id=conversation_thread_id,
                                                          post_id=post_id,
                                                          single_value_legacy_extended_property_id=single_value_legacy_extended_property_id,
                                                          if_match=if_match)


def groups_group_conversation_thread_post_forward(client,
                                                  group_id,
                                                  conversation_id,
                                                  conversation_thread_id,
                                                  post_id,
                                                  comment=None,
                                                  to_recipients=None):
    body = {}
    body['comment'] = comment
    body['to_recipients'] = to_recipients
    return client.forward(group_id=group_id,
                          conversation_id=conversation_id,
                          conversation_thread_id=conversation_thread_id,
                          post_id=post_id,
                          body=body)


def groups_group_conversation_thread_post_list_attachment(client,
                                                          group_id,
                                                          conversation_id,
                                                          conversation_thread_id,
                                                          post_id,
                                                          orderby=None,
                                                          select=None,
                                                          expand=None):
    return client.list_attachments(group_id=group_id,
                                   conversation_id=conversation_id,
                                   conversation_thread_id=conversation_thread_id,
                                   post_id=post_id,
                                   orderby=orderby,
                                   select=select,
                                   expand=expand)


def groups_group_conversation_thread_post_list_extension(client,
                                                         group_id,
                                                         conversation_id,
                                                         conversation_thread_id,
                                                         post_id,
                                                         orderby=None,
                                                         select=None,
                                                         expand=None):
    return client.list_extensions(group_id=group_id,
                                  conversation_id=conversation_id,
                                  conversation_thread_id=conversation_thread_id,
                                  post_id=post_id,
                                  orderby=orderby,
                                  select=select,
                                  expand=expand)


def groups_group_conversation_thread_post_list_multi_value_extended_property(client,
                                                                             group_id,
                                                                             conversation_id,
                                                                             conversation_thread_id,
                                                                             post_id,
                                                                             orderby=None,
                                                                             select=None,
                                                                             expand=None):
    return client.list_multi_value_extended_properties(group_id=group_id,
                                                       conversation_id=conversation_id,
                                                       conversation_thread_id=conversation_thread_id,
                                                       post_id=post_id,
                                                       orderby=orderby,
                                                       select=select,
                                                       expand=expand)


def groups_group_conversation_thread_post_list_single_value_extended_property(client,
                                                                              group_id,
                                                                              conversation_id,
                                                                              conversation_thread_id,
                                                                              post_id,
                                                                              orderby=None,
                                                                              select=None,
                                                                              expand=None):
    return client.list_single_value_extended_properties(group_id=group_id,
                                                        conversation_id=conversation_id,
                                                        conversation_thread_id=conversation_thread_id,
                                                        post_id=post_id,
                                                        orderby=orderby,
                                                        select=select,
                                                        expand=expand)


def groups_group_conversation_thread_post_reply(client,
                                                group_id,
                                                conversation_id,
                                                conversation_thread_id,
                                                post_id,
                                                post=None):
    body = {}
    body['post'] = post
    return client.reply(group_id=group_id,
                        conversation_id=conversation_id,
                        conversation_thread_id=conversation_thread_id,
                        post_id=post_id,
                        body=body)


def groups_group_conversation_thread_post_show_attachment(client,
                                                          group_id,
                                                          conversation_id,
                                                          conversation_thread_id,
                                                          post_id,
                                                          attachment_id,
                                                          select=None,
                                                          expand=None):
    return client.get_attachments(group_id=group_id,
                                  conversation_id=conversation_id,
                                  conversation_thread_id=conversation_thread_id,
                                  post_id=post_id,
                                  attachment_id=attachment_id,
                                  select=select,
                                  expand=expand)


def groups_group_conversation_thread_post_show_extension(client,
                                                         group_id,
                                                         conversation_id,
                                                         conversation_thread_id,
                                                         post_id,
                                                         extension_id,
                                                         select=None,
                                                         expand=None):
    return client.get_extensions(group_id=group_id,
                                 conversation_id=conversation_id,
                                 conversation_thread_id=conversation_thread_id,
                                 post_id=post_id,
                                 extension_id=extension_id,
                                 select=select,
                                 expand=expand)


def groups_group_conversation_thread_post_show_in_reply_to(client,
                                                           group_id,
                                                           conversation_id,
                                                           conversation_thread_id,
                                                           post_id,
                                                           select=None,
                                                           expand=None):
    return client.get_in_reply_to(group_id=group_id,
                                  conversation_id=conversation_id,
                                  conversation_thread_id=conversation_thread_id,
                                  post_id=post_id,
                                  select=select,
                                  expand=expand)


def groups_group_conversation_thread_post_show_multi_value_extended_property(client,
                                                                             group_id,
                                                                             conversation_id,
                                                                             conversation_thread_id,
                                                                             post_id,
                                                                             multi_value_legacy_extended_property_id,
                                                                             select=None,
                                                                             expand=None):
    return client.get_multi_value_extended_properties(group_id=group_id,
                                                      conversation_id=conversation_id,
                                                      conversation_thread_id=conversation_thread_id,
                                                      post_id=post_id,
                                                      multi_value_legacy_extended_property_id=multi_value_legacy_extended_property_id,
                                                      select=select,
                                                      expand=expand)


def groups_group_conversation_thread_post_show_single_value_extended_property(client,
                                                                              group_id,
                                                                              conversation_id,
                                                                              conversation_thread_id,
                                                                              post_id,
                                                                              single_value_legacy_extended_property_id,
                                                                              select=None,
                                                                              expand=None):
    return client.get_single_value_extended_properties(group_id=group_id,
                                                       conversation_id=conversation_id,
                                                       conversation_thread_id=conversation_thread_id,
                                                       post_id=post_id,
                                                       single_value_legacy_extended_property_id=single_value_legacy_extended_property_id,
                                                       select=select,
                                                       expand=expand)


def groups_group_conversation_thread_post_update_attachment(client,
                                                            group_id,
                                                            conversation_id,
                                                            conversation_thread_id,
                                                            post_id,
                                                            attachment_id,
                                                            id_=None,
                                                            content_type_=None,
                                                            is_inline=None,
                                                            last_modified_date_time=None,
                                                            name=None,
                                                            size=None):
    body = {}
    body['id'] = id_
    body['content_type'] = content_type_
    body['is_inline'] = is_inline
    body['last_modified_date_time'] = last_modified_date_time
    body['name'] = name
    body['size'] = size
    return client.update_attachments(group_id=group_id,
                                     conversation_id=conversation_id,
                                     conversation_thread_id=conversation_thread_id,
                                     post_id=post_id,
                                     attachment_id=attachment_id,
                                     body=body)


def groups_group_conversation_thread_post_update_extension(client,
                                                           group_id,
                                                           conversation_id,
                                                           conversation_thread_id,
                                                           post_id,
                                                           extension_id,
                                                           id_=None):
    body = {}
    body['id'] = id_
    return client.update_extensions(group_id=group_id,
                                    conversation_id=conversation_id,
                                    conversation_thread_id=conversation_thread_id,
                                    post_id=post_id,
                                    extension_id=extension_id,
                                    body=body)


def groups_group_conversation_thread_post_update_in_reply_to(client,
                                                             group_id,
                                                             conversation_id,
                                                             conversation_thread_id,
                                                             post_id,
                                                             body,
                                                             id_=None,
                                                             categories=None,
                                                             change_key=None,
                                                             created_date_time=None,
                                                             last_modified_date_time=None,
                                                             microsoft_graph_post_conversation_id=None,
                                                             microsoft_graph_post_conversation_thread_id_conversation_thread_id=None,
                                                             has_attachments=None,
                                                             new_participants=None,
                                                             received_date_time=None,
                                                             attachments=None,
                                                             extensions=None,
                                                             in_reply_to=None,
                                                             multi_value_extended_properties=None,
                                                             single_value_extended_properties=None,
                                                             email_address=None,
                                                             microsoft_graph_email_address=None):
    body = {}
    body['id'] = id_
    body['categories'] = categories
    body['change_key'] = change_key
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['body'] = body
    body['conversation_id'] = microsoft_graph_post_conversation_id
    body['conversation_thread_id'] = microsoft_graph_post_conversation_thread_id_conversation_thread_id
    body['has_attachments'] = has_attachments
    body['new_participants'] = new_participants
    body['received_date_time'] = received_date_time
    body['attachments'] = attachments
    body['extensions'] = extensions
    body['in_reply_to'] = in_reply_to
    body['multi_value_extended_properties'] = multi_value_extended_properties
    body['single_value_extended_properties'] = single_value_extended_properties
    body['sender'] = {}
    body['sender']['email_address'] = email_address
    body['from_property'] = {}
    body['from_property']['email_address'] = microsoft_graph_email_address
    return client.update_in_reply_to(group_id=group_id,
                                     conversation_id=conversation_id,
                                     conversation_thread_id=conversation_thread_id,
                                     post_id=post_id,
                                     body=body)


def groups_group_conversation_thread_post_update_multi_value_extended_property(client,
                                                                               group_id,
                                                                               conversation_id,
                                                                               conversation_thread_id,
                                                                               post_id,
                                                                               multi_value_legacy_extended_property_id,
                                                                               id_=None,
                                                                               value=None):
    body = {}
    body['id'] = id_
    body['value'] = value
    return client.update_multi_value_extended_properties(group_id=group_id,
                                                         conversation_id=conversation_id,
                                                         conversation_thread_id=conversation_thread_id,
                                                         post_id=post_id,
                                                         multi_value_legacy_extended_property_id=multi_value_legacy_extended_property_id,
                                                         body=body)


def groups_group_conversation_thread_post_update_single_value_extended_property(client,
                                                                                group_id,
                                                                                conversation_id,
                                                                                conversation_thread_id,
                                                                                post_id,
                                                                                single_value_legacy_extended_property_id,
                                                                                id_=None,
                                                                                value=None):
    body = {}
    body['id'] = id_
    body['value'] = value
    return client.update_single_value_extended_properties(group_id=group_id,
                                                          conversation_id=conversation_id,
                                                          conversation_thread_id=conversation_thread_id,
                                                          post_id=post_id,
                                                          single_value_legacy_extended_property_id=single_value_legacy_extended_property_id,
                                                          body=body)


def groups_group_conversation_thread_post_attachment_create_upload_session(client,
                                                                           group_id,
                                                                           conversation_id,
                                                                           conversation_thread_id,
                                                                           post_id,
                                                                           attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(group_id=group_id,
                                        conversation_id=conversation_id,
                                        conversation_thread_id=conversation_thread_id,
                                        post_id=post_id,
                                        body=body)


def groups_group_conversation_thread_post_in_reply_to_forward(client,
                                                              group_id,
                                                              conversation_id,
                                                              conversation_thread_id,
                                                              post_id,
                                                              comment=None,
                                                              to_recipients=None):
    body = {}
    body['comment'] = comment
    body['to_recipients'] = to_recipients
    return client.forward(group_id=group_id,
                          conversation_id=conversation_id,
                          conversation_thread_id=conversation_thread_id,
                          post_id=post_id,
                          body=body)


def groups_group_conversation_thread_post_in_reply_to_reply(client,
                                                            group_id,
                                                            conversation_id,
                                                            conversation_thread_id,
                                                            post_id,
                                                            post=None):
    body = {}
    body['post'] = post
    return client.reply(group_id=group_id,
                        conversation_id=conversation_id,
                        conversation_thread_id=conversation_thread_id,
                        post_id=post_id,
                        body=body)


def groups_group_event_attachment_create_upload_session(client,
                                                        group_id,
                                                        event_id,
                                                        attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(group_id=group_id,
                                        event_id=event_id,
                                        body=body)


def groups_group_event_calendar_calendar_view_accept(client,
                                                     group_id,
                                                     event_id,
                                                     event_id1,
                                                     comment=None,
                                                     send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_event_calendar_calendar_view_cancel(client,
                                                     group_id,
                                                     event_id,
                                                     event_id1,
                                                     comment=None):
    body = {}
    body['comment'] = comment
    return client.cancel(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_event_calendar_calendar_view_decline(client,
                                                      group_id,
                                                      event_id,
                                                      event_id1,
                                                      comment=None,
                                                      send_response=None,
                                                      end=None,
                                                      start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.decline(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_event_calendar_calendar_view_delta(client,
                                                    group_id,
                                                    event_id):
    return client.delta(group_id=group_id,
                        event_id=event_id)


def groups_group_event_calendar_calendar_view_dismiss_reminder(client,
                                                               group_id,
                                                               event_id,
                                                               event_id1):
    return client.dismiss_reminder(group_id=group_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def groups_group_event_calendar_calendar_view_forward(client,
                                                      group_id,
                                                      event_id,
                                                      event_id1,
                                                      to_recipients=None,
                                                      comment=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    return client.forward(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_event_calendar_calendar_view_snooze_reminder(client,
                                                              group_id,
                                                              event_id,
                                                              event_id1,
                                                              new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(group_id=group_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def groups_group_event_calendar_calendar_view_tentatively_accept(client,
                                                                 group_id,
                                                                 event_id,
                                                                 event_id1,
                                                                 comment=None,
                                                                 send_response=None,
                                                                 end=None,
                                                                 start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.tentatively_accept(group_id=group_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def groups_group_event_calendar_event_accept(client,
                                             group_id,
                                             event_id,
                                             event_id1,
                                             comment=None,
                                             send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_event_calendar_event_cancel(client,
                                             group_id,
                                             event_id,
                                             event_id1,
                                             comment=None):
    body = {}
    body['comment'] = comment
    return client.cancel(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_event_calendar_event_decline(client,
                                              group_id,
                                              event_id,
                                              event_id1,
                                              comment=None,
                                              send_response=None,
                                              end=None,
                                              start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.decline(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_event_calendar_event_delta(client,
                                            group_id,
                                            event_id):
    return client.delta(group_id=group_id,
                        event_id=event_id)


def groups_group_event_calendar_event_dismiss_reminder(client,
                                                       group_id,
                                                       event_id,
                                                       event_id1):
    return client.dismiss_reminder(group_id=group_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def groups_group_event_calendar_event_forward(client,
                                              group_id,
                                              event_id,
                                              event_id1,
                                              to_recipients=None,
                                              comment=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    return client.forward(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_event_calendar_event_snooze_reminder(client,
                                                      group_id,
                                                      event_id,
                                                      event_id1,
                                                      new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(group_id=group_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def groups_group_event_calendar_event_tentatively_accept(client,
                                                         group_id,
                                                         event_id,
                                                         event_id1,
                                                         comment=None,
                                                         send_response=None,
                                                         end=None,
                                                         start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.tentatively_accept(group_id=group_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def groups_group_event_calendar_allowed_calendar_sharing_role(client,
                                                              group_id,
                                                              event_id,
                                                              user):
    return client.allowed_calendar_sharing_roles(group_id=group_id,
                                                 event_id=event_id,
                                                 user=user)


def groups_group_event_calendar_get_schedule(client,
                                             group_id,
                                             event_id,
                                             schedules=None,
                                             end_time=None,
                                             start_time=None,
                                             availability_view_interval=None):
    body = {}
    body['schedules'] = schedules
    body['end_time'] = end_time
    body['start_time'] = start_time
    body['availability_view_interval'] = availability_view_interval
    return client.get_schedule(group_id=group_id,
                               event_id=event_id,
                               body=body)


def groups_group_event_instance_accept(client,
                                       group_id,
                                       event_id,
                                       event_id1,
                                       comment=None,
                                       send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_event_instance_cancel(client,
                                       group_id,
                                       event_id,
                                       event_id1,
                                       comment=None):
    body = {}
    body['comment'] = comment
    return client.cancel(group_id=group_id,
                         event_id=event_id,
                         event_id1=event_id1,
                         body=body)


def groups_group_event_instance_decline(client,
                                        group_id,
                                        event_id,
                                        event_id1,
                                        comment=None,
                                        send_response=None,
                                        end=None,
                                        start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.decline(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_event_instance_delta(client,
                                      group_id,
                                      event_id):
    return client.delta(group_id=group_id,
                        event_id=event_id)


def groups_group_event_instance_dismiss_reminder(client,
                                                 group_id,
                                                 event_id,
                                                 event_id1):
    return client.dismiss_reminder(group_id=group_id,
                                   event_id=event_id,
                                   event_id1=event_id1)


def groups_group_event_instance_forward(client,
                                        group_id,
                                        event_id,
                                        event_id1,
                                        to_recipients=None,
                                        comment=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    return client.forward(group_id=group_id,
                          event_id=event_id,
                          event_id1=event_id1,
                          body=body)


def groups_group_event_instance_snooze_reminder(client,
                                                group_id,
                                                event_id,
                                                event_id1,
                                                new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(group_id=group_id,
                                  event_id=event_id,
                                  event_id1=event_id1,
                                  body=body)


def groups_group_event_instance_tentatively_accept(client,
                                                   group_id,
                                                   event_id,
                                                   event_id1,
                                                   comment=None,
                                                   send_response=None,
                                                   end=None,
                                                   start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.tentatively_accept(group_id=group_id,
                                     event_id=event_id,
                                     event_id1=event_id1,
                                     body=body)


def groups_group_event_accept(client,
                              group_id,
                              event_id,
                              comment=None,
                              send_response=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    return client.accept(group_id=group_id,
                         event_id=event_id,
                         body=body)


def groups_group_event_cancel(client,
                              group_id,
                              event_id,
                              comment=None):
    body = {}
    body['comment'] = comment
    return client.cancel(group_id=group_id,
                         event_id=event_id,
                         body=body)


def groups_group_event_decline(client,
                               group_id,
                               event_id,
                               comment=None,
                               send_response=None,
                               end=None,
                               start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.decline(group_id=group_id,
                          event_id=event_id,
                          body=body)


def groups_group_event_delta(client,
                             group_id):
    return client.delta(group_id=group_id)


def groups_group_event_dismiss_reminder(client,
                                        group_id,
                                        event_id):
    return client.dismiss_reminder(group_id=group_id,
                                   event_id=event_id)


def groups_group_event_forward(client,
                               group_id,
                               event_id,
                               to_recipients=None,
                               comment=None):
    body = {}
    body['to_recipients'] = to_recipients
    body['comment'] = comment
    return client.forward(group_id=group_id,
                          event_id=event_id,
                          body=body)


def groups_group_event_snooze_reminder(client,
                                       group_id,
                                       event_id,
                                       new_reminder_time=None):
    body = {}
    body['new_reminder_time'] = new_reminder_time
    return client.snooze_reminder(group_id=group_id,
                                  event_id=event_id,
                                  body=body)


def groups_group_event_tentatively_accept(client,
                                          group_id,
                                          event_id,
                                          comment=None,
                                          send_response=None,
                                          end=None,
                                          start=None):
    if send_response is None:
        send_response = False
    body = {}
    body['comment'] = comment
    body['send_response'] = False if send_response is None else send_response
    body['proposed_new_time'] = {}
    body['proposed_new_time']['end'] = end
    body['proposed_new_time']['start'] = start
    return client.tentatively_accept(group_id=group_id,
                                     event_id=event_id,
                                     body=body)


def groups_group_onenote_notebook_copy_notebook(client,
                                                group_id,
                                                notebook_id,
                                                string_group_id=None,
                                                rename_as=None,
                                                notebook_folder=None,
                                                site_collection_id=None,
                                                site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                notebook_id=notebook_id,
                                body=body)


def groups_group_onenote_notebook_get_notebook_from_web_url(client,
                                                            group_id,
                                                            web_url=None):
    body = {}
    body['web_url'] = web_url
    return client.get_notebook_from_web_url(group_id=group_id,
                                            body=body)


def groups_group_onenote_notebook_show_recent_notebook(client,
                                                       group_id,
                                                       include_personal_notebooks):
    if include_personal_notebooks is None:
        include_personal_notebooks = False
    return client.get_recent_notebooks(group_id=group_id,
                                       include_personal_notebooks=include_personal_notebooks)


def groups_group_onenote_notebook_section_group_parent_notebook_copy_notebook(client,
                                                                              group_id,
                                                                              notebook_id,
                                                                              section_group_id,
                                                                              string_group_id=None,
                                                                              rename_as=None,
                                                                              notebook_folder=None,
                                                                              site_collection_id=None,
                                                                              site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                notebook_id=notebook_id,
                                section_group_id=section_group_id,
                                body=body)


def groups_group_onenote_notebook_section_group_section_copy_to_notebook(client,
                                                                         group_id,
                                                                         notebook_id,
                                                                         section_group_id,
                                                                         onenote_section_id,
                                                                         id_=None,
                                                                         string_group_id=None,
                                                                         rename_as=None,
                                                                         site_collection_id=None,
                                                                         site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   notebook_id=notebook_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def groups_group_onenote_notebook_section_group_section_copy_to_section_group(client,
                                                                              group_id,
                                                                              notebook_id,
                                                                              section_group_id,
                                                                              onenote_section_id,
                                                                              id_=None,
                                                                              string_group_id=None,
                                                                              rename_as=None,
                                                                              site_collection_id=None,
                                                                              site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        notebook_id=notebook_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def groups_group_onenote_notebook_section_group_section_page_copy_to_section(client,
                                                                             group_id,
                                                                             notebook_id,
                                                                             section_group_id,
                                                                             onenote_section_id,
                                                                             onenote_page_id,
                                                                             id_=None,
                                                                             string_group_id=None,
                                                                             site_collection_id=None,
                                                                             site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(group_id=group_id,
                                  notebook_id=notebook_id,
                                  section_group_id=section_group_id,
                                  onenote_section_id=onenote_section_id,
                                  onenote_page_id=onenote_page_id,
                                  body=body)


def groups_group_onenote_notebook_section_group_section_page_onenote_patch_content(client,
                                                                                   group_id,
                                                                                   notebook_id,
                                                                                   section_group_id,
                                                                                   onenote_section_id,
                                                                                   onenote_page_id,
                                                                                   commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(group_id=group_id,
                                        notebook_id=notebook_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def groups_group_onenote_notebook_section_group_section_page_preview(client,
                                                                     group_id,
                                                                     notebook_id,
                                                                     section_group_id,
                                                                     onenote_section_id,
                                                                     onenote_page_id):
    return client.preview(group_id=group_id,
                          notebook_id=notebook_id,
                          section_group_id=section_group_id,
                          onenote_section_id=onenote_section_id,
                          onenote_page_id=onenote_page_id)


def groups_group_onenote_notebook_section_group_section_page_parent_notebook_copy_notebook(client,
                                                                                           group_id,
                                                                                           notebook_id,
                                                                                           section_group_id,
                                                                                           onenote_section_id,
                                                                                           onenote_page_id,
                                                                                           string_group_id=None,
                                                                                           rename_as=None,
                                                                                           notebook_folder=None,
                                                                                           site_collection_id=None,
                                                                                           site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                notebook_id=notebook_id,
                                section_group_id=section_group_id,
                                onenote_section_id=onenote_section_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def groups_group_onenote_notebook_section_group_section_page_parent_section_copy_to_notebook(client,
                                                                                             group_id,
                                                                                             notebook_id,
                                                                                             section_group_id,
                                                                                             onenote_section_id,
                                                                                             onenote_page_id,
                                                                                             id_=None,
                                                                                             string_group_id=None,
                                                                                             rename_as=None,
                                                                                             site_collection_id=None,
                                                                                             site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   notebook_id=notebook_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   body=body)


def groups_group_onenote_notebook_section_group_section_page_parent_section_copy_to_section_group(client,
                                                                                                  group_id,
                                                                                                  notebook_id,
                                                                                                  section_group_id,
                                                                                                  onenote_section_id,
                                                                                                  onenote_page_id,
                                                                                                  id_=None,
                                                                                                  string_group_id=None,
                                                                                                  rename_as=None,
                                                                                                  site_collection_id=None,
                                                                                                  site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        notebook_id=notebook_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def groups_group_onenote_notebook_section_group_section_parent_notebook_copy_notebook(client,
                                                                                      group_id,
                                                                                      notebook_id,
                                                                                      section_group_id,
                                                                                      onenote_section_id,
                                                                                      string_group_id=None,
                                                                                      rename_as=None,
                                                                                      notebook_folder=None,
                                                                                      site_collection_id=None,
                                                                                      site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                notebook_id=notebook_id,
                                section_group_id=section_group_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def groups_group_onenote_notebook_section_copy_to_notebook(client,
                                                           group_id,
                                                           notebook_id,
                                                           onenote_section_id,
                                                           id_=None,
                                                           string_group_id=None,
                                                           rename_as=None,
                                                           site_collection_id=None,
                                                           site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   notebook_id=notebook_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def groups_group_onenote_notebook_section_copy_to_section_group(client,
                                                                group_id,
                                                                notebook_id,
                                                                onenote_section_id,
                                                                id_=None,
                                                                string_group_id=None,
                                                                rename_as=None,
                                                                site_collection_id=None,
                                                                site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        notebook_id=notebook_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def groups_group_onenote_notebook_section_page_copy_to_section(client,
                                                               group_id,
                                                               notebook_id,
                                                               onenote_section_id,
                                                               onenote_page_id,
                                                               id_=None,
                                                               string_group_id=None,
                                                               site_collection_id=None,
                                                               site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(group_id=group_id,
                                  notebook_id=notebook_id,
                                  onenote_section_id=onenote_section_id,
                                  onenote_page_id=onenote_page_id,
                                  body=body)


def groups_group_onenote_notebook_section_page_onenote_patch_content(client,
                                                                     group_id,
                                                                     notebook_id,
                                                                     onenote_section_id,
                                                                     onenote_page_id,
                                                                     commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(group_id=group_id,
                                        notebook_id=notebook_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def groups_group_onenote_notebook_section_page_preview(client,
                                                       group_id,
                                                       notebook_id,
                                                       onenote_section_id,
                                                       onenote_page_id):
    return client.preview(group_id=group_id,
                          notebook_id=notebook_id,
                          onenote_section_id=onenote_section_id,
                          onenote_page_id=onenote_page_id)


def groups_group_onenote_notebook_section_page_parent_notebook_copy_notebook(client,
                                                                             group_id,
                                                                             notebook_id,
                                                                             onenote_section_id,
                                                                             onenote_page_id,
                                                                             string_group_id=None,
                                                                             rename_as=None,
                                                                             notebook_folder=None,
                                                                             site_collection_id=None,
                                                                             site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                notebook_id=notebook_id,
                                onenote_section_id=onenote_section_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def groups_group_onenote_notebook_section_page_parent_section_copy_to_notebook(client,
                                                                               group_id,
                                                                               notebook_id,
                                                                               onenote_section_id,
                                                                               onenote_page_id,
                                                                               id_=None,
                                                                               string_group_id=None,
                                                                               rename_as=None,
                                                                               site_collection_id=None,
                                                                               site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   notebook_id=notebook_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   body=body)


def groups_group_onenote_notebook_section_page_parent_section_copy_to_section_group(client,
                                                                                    group_id,
                                                                                    notebook_id,
                                                                                    onenote_section_id,
                                                                                    onenote_page_id,
                                                                                    id_=None,
                                                                                    string_group_id=None,
                                                                                    rename_as=None,
                                                                                    site_collection_id=None,
                                                                                    site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        notebook_id=notebook_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def groups_group_onenote_notebook_section_parent_notebook_copy_notebook(client,
                                                                        group_id,
                                                                        notebook_id,
                                                                        onenote_section_id,
                                                                        string_group_id=None,
                                                                        rename_as=None,
                                                                        notebook_folder=None,
                                                                        site_collection_id=None,
                                                                        site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                notebook_id=notebook_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def groups_group_onenote_notebook_section_parent_section_group_parent_notebook_copy_notebook(client,
                                                                                             group_id,
                                                                                             notebook_id,
                                                                                             onenote_section_id,
                                                                                             string_group_id=None,
                                                                                             rename_as=None,
                                                                                             notebook_folder=None,
                                                                                             site_collection_id=None,
                                                                                             site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                notebook_id=notebook_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def groups_group_onenote_notebook_section_parent_section_group_section_copy_to_notebook(client,
                                                                                        group_id,
                                                                                        notebook_id,
                                                                                        onenote_section_id,
                                                                                        onenote_section_id1,
                                                                                        id_=None,
                                                                                        string_group_id=None,
                                                                                        rename_as=None,
                                                                                        site_collection_id=None,
                                                                                        site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   notebook_id=notebook_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def groups_group_onenote_notebook_section_parent_section_group_section_copy_to_section_group(client,
                                                                                             group_id,
                                                                                             notebook_id,
                                                                                             onenote_section_id,
                                                                                             onenote_section_id1,
                                                                                             id_=None,
                                                                                             string_group_id=None,
                                                                                             rename_as=None,
                                                                                             site_collection_id=None,
                                                                                             site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        notebook_id=notebook_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def groups_group_onenote_page_copy_to_section(client,
                                              group_id,
                                              onenote_page_id,
                                              id_=None,
                                              string_group_id=None,
                                              site_collection_id=None,
                                              site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(group_id=group_id,
                                  onenote_page_id=onenote_page_id,
                                  body=body)


def groups_group_onenote_page_onenote_patch_content(client,
                                                    group_id,
                                                    onenote_page_id,
                                                    commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(group_id=group_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def groups_group_onenote_page_preview(client,
                                      group_id,
                                      onenote_page_id):
    return client.preview(group_id=group_id,
                          onenote_page_id=onenote_page_id)


def groups_group_onenote_page_parent_notebook_copy_notebook(client,
                                                            group_id,
                                                            onenote_page_id,
                                                            string_group_id=None,
                                                            rename_as=None,
                                                            notebook_folder=None,
                                                            site_collection_id=None,
                                                            site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def groups_group_onenote_page_parent_notebook_section_group_parent_notebook_copy_notebook(client,
                                                                                          group_id,
                                                                                          onenote_page_id,
                                                                                          section_group_id,
                                                                                          string_group_id=None,
                                                                                          rename_as=None,
                                                                                          notebook_folder=None,
                                                                                          site_collection_id=None,
                                                                                          site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                onenote_page_id=onenote_page_id,
                                section_group_id=section_group_id,
                                body=body)


def groups_group_onenote_page_parent_notebook_section_group_section_copy_to_notebook(client,
                                                                                     group_id,
                                                                                     onenote_page_id,
                                                                                     section_group_id,
                                                                                     onenote_section_id,
                                                                                     id_=None,
                                                                                     string_group_id=None,
                                                                                     rename_as=None,
                                                                                     site_collection_id=None,
                                                                                     site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_page_id=onenote_page_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def groups_group_onenote_page_parent_notebook_section_group_section_copy_to_section_group(client,
                                                                                          group_id,
                                                                                          onenote_page_id,
                                                                                          section_group_id,
                                                                                          onenote_section_id,
                                                                                          id_=None,
                                                                                          string_group_id=None,
                                                                                          rename_as=None,
                                                                                          site_collection_id=None,
                                                                                          site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_page_id=onenote_page_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def groups_group_onenote_page_parent_notebook_section_group_section_page_copy_to_section(client,
                                                                                         group_id,
                                                                                         onenote_page_id,
                                                                                         section_group_id,
                                                                                         onenote_section_id,
                                                                                         onenote_page_id1,
                                                                                         id_=None,
                                                                                         string_group_id=None,
                                                                                         site_collection_id=None,
                                                                                         site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(group_id=group_id,
                                  onenote_page_id=onenote_page_id,
                                  section_group_id=section_group_id,
                                  onenote_section_id=onenote_section_id,
                                  onenote_page_id1=onenote_page_id1,
                                  body=body)


def groups_group_onenote_page_parent_notebook_section_group_section_page_onenote_patch_content(client,
                                                                                               group_id,
                                                                                               onenote_page_id,
                                                                                               section_group_id,
                                                                                               onenote_section_id,
                                                                                               onenote_page_id1,
                                                                                               commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(group_id=group_id,
                                        onenote_page_id=onenote_page_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id1=onenote_page_id1,
                                        body=body)


def groups_group_onenote_page_parent_notebook_section_group_section_page_preview(client,
                                                                                 group_id,
                                                                                 onenote_page_id,
                                                                                 section_group_id,
                                                                                 onenote_section_id,
                                                                                 onenote_page_id1):
    return client.preview(group_id=group_id,
                          onenote_page_id=onenote_page_id,
                          section_group_id=section_group_id,
                          onenote_section_id=onenote_section_id,
                          onenote_page_id1=onenote_page_id1)


def groups_group_onenote_page_parent_notebook_section_group_section_parent_notebook_copy_notebook(client,
                                                                                                  group_id,
                                                                                                  onenote_page_id,
                                                                                                  section_group_id,
                                                                                                  onenote_section_id,
                                                                                                  string_group_id=None,
                                                                                                  rename_as=None,
                                                                                                  notebook_folder=None,
                                                                                                  site_collection_id=None,
                                                                                                  site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                onenote_page_id=onenote_page_id,
                                section_group_id=section_group_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def groups_group_onenote_page_parent_notebook_section_copy_to_notebook(client,
                                                                       group_id,
                                                                       onenote_page_id,
                                                                       onenote_section_id,
                                                                       id_=None,
                                                                       string_group_id=None,
                                                                       rename_as=None,
                                                                       site_collection_id=None,
                                                                       site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_page_id=onenote_page_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def groups_group_onenote_page_parent_notebook_section_copy_to_section_group(client,
                                                                            group_id,
                                                                            onenote_page_id,
                                                                            onenote_section_id,
                                                                            id_=None,
                                                                            string_group_id=None,
                                                                            rename_as=None,
                                                                            site_collection_id=None,
                                                                            site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def groups_group_onenote_page_parent_notebook_section_page_copy_to_section(client,
                                                                           group_id,
                                                                           onenote_page_id,
                                                                           onenote_section_id,
                                                                           onenote_page_id1,
                                                                           id_=None,
                                                                           string_group_id=None,
                                                                           site_collection_id=None,
                                                                           site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(group_id=group_id,
                                  onenote_page_id=onenote_page_id,
                                  onenote_section_id=onenote_section_id,
                                  onenote_page_id1=onenote_page_id1,
                                  body=body)


def groups_group_onenote_page_parent_notebook_section_page_onenote_patch_content(client,
                                                                                 group_id,
                                                                                 onenote_page_id,
                                                                                 onenote_section_id,
                                                                                 onenote_page_id1,
                                                                                 commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(group_id=group_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id1=onenote_page_id1,
                                        body=body)


def groups_group_onenote_page_parent_notebook_section_page_preview(client,
                                                                   group_id,
                                                                   onenote_page_id,
                                                                   onenote_section_id,
                                                                   onenote_page_id1):
    return client.preview(group_id=group_id,
                          onenote_page_id=onenote_page_id,
                          onenote_section_id=onenote_section_id,
                          onenote_page_id1=onenote_page_id1)


def groups_group_onenote_page_parent_notebook_section_parent_notebook_copy_notebook(client,
                                                                                    group_id,
                                                                                    onenote_page_id,
                                                                                    onenote_section_id,
                                                                                    string_group_id=None,
                                                                                    rename_as=None,
                                                                                    notebook_folder=None,
                                                                                    site_collection_id=None,
                                                                                    site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                onenote_page_id=onenote_page_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def groups_group_onenote_page_parent_notebook_section_parent_section_group_parent_notebook_copy_notebook(client,
                                                                                                         group_id,
                                                                                                         onenote_page_id,
                                                                                                         onenote_section_id,
                                                                                                         string_group_id=None,
                                                                                                         rename_as=None,
                                                                                                         notebook_folder=None,
                                                                                                         site_collection_id=None,
                                                                                                         site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                onenote_page_id=onenote_page_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def groups_group_onenote_page_parent_notebook_section_parent_section_group_section_copy_to_notebook(client,
                                                                                                    group_id,
                                                                                                    onenote_page_id,
                                                                                                    onenote_section_id,
                                                                                                    onenote_section_id1,
                                                                                                    id_=None,
                                                                                                    string_group_id=None,
                                                                                                    rename_as=None,
                                                                                                    site_collection_id=None,
                                                                                                    site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_page_id=onenote_page_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def groups_group_onenote_page_parent_notebook_section_parent_section_group_section_copy_to_section_group(client,
                                                                                                         group_id,
                                                                                                         onenote_page_id,
                                                                                                         onenote_section_id,
                                                                                                         onenote_section_id1,
                                                                                                         id_=None,
                                                                                                         string_group_id=None,
                                                                                                         rename_as=None,
                                                                                                         site_collection_id=None,
                                                                                                         site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def groups_group_onenote_page_parent_section_copy_to_notebook(client,
                                                              group_id,
                                                              onenote_page_id,
                                                              id_=None,
                                                              string_group_id=None,
                                                              rename_as=None,
                                                              site_collection_id=None,
                                                              site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_page_id=onenote_page_id,
                                   body=body)


def groups_group_onenote_page_parent_section_copy_to_section_group(client,
                                                                   group_id,
                                                                   onenote_page_id,
                                                                   id_=None,
                                                                   string_group_id=None,
                                                                   rename_as=None,
                                                                   site_collection_id=None,
                                                                   site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def groups_group_onenote_page_parent_section_page_copy_to_section(client,
                                                                  group_id,
                                                                  onenote_page_id,
                                                                  onenote_page_id1,
                                                                  id_=None,
                                                                  string_group_id=None,
                                                                  site_collection_id=None,
                                                                  site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(group_id=group_id,
                                  onenote_page_id=onenote_page_id,
                                  onenote_page_id1=onenote_page_id1,
                                  body=body)


def groups_group_onenote_page_parent_section_page_onenote_patch_content(client,
                                                                        group_id,
                                                                        onenote_page_id,
                                                                        onenote_page_id1,
                                                                        commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(group_id=group_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_page_id1=onenote_page_id1,
                                        body=body)


def groups_group_onenote_page_parent_section_page_preview(client,
                                                          group_id,
                                                          onenote_page_id,
                                                          onenote_page_id1):
    return client.preview(group_id=group_id,
                          onenote_page_id=onenote_page_id,
                          onenote_page_id1=onenote_page_id1)


def groups_group_onenote_page_parent_section_parent_notebook_copy_notebook(client,
                                                                           group_id,
                                                                           onenote_page_id,
                                                                           string_group_id=None,
                                                                           rename_as=None,
                                                                           notebook_folder=None,
                                                                           site_collection_id=None,
                                                                           site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def groups_group_onenote_page_parent_section_parent_notebook_section_group_parent_notebook_copy_notebook(client,
                                                                                                         group_id,
                                                                                                         onenote_page_id,
                                                                                                         section_group_id,
                                                                                                         string_group_id=None,
                                                                                                         rename_as=None,
                                                                                                         notebook_folder=None,
                                                                                                         site_collection_id=None,
                                                                                                         site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                onenote_page_id=onenote_page_id,
                                section_group_id=section_group_id,
                                body=body)


def groups_group_onenote_page_parent_section_parent_notebook_section_group_section_copy_to_notebook(client,
                                                                                                    group_id,
                                                                                                    onenote_page_id,
                                                                                                    section_group_id,
                                                                                                    onenote_section_id,
                                                                                                    id_=None,
                                                                                                    string_group_id=None,
                                                                                                    rename_as=None,
                                                                                                    site_collection_id=None,
                                                                                                    site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_page_id=onenote_page_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def groups_group_onenote_page_parent_section_parent_notebook_section_group_section_copy_to_section_group(client,
                                                                                                         group_id,
                                                                                                         onenote_page_id,
                                                                                                         section_group_id,
                                                                                                         onenote_section_id,
                                                                                                         id_=None,
                                                                                                         string_group_id=None,
                                                                                                         rename_as=None,
                                                                                                         site_collection_id=None,
                                                                                                         site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_page_id=onenote_page_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def groups_group_onenote_page_parent_section_parent_notebook_section_copy_to_notebook(client,
                                                                                      group_id,
                                                                                      onenote_page_id,
                                                                                      onenote_section_id,
                                                                                      id_=None,
                                                                                      string_group_id=None,
                                                                                      rename_as=None,
                                                                                      site_collection_id=None,
                                                                                      site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_page_id=onenote_page_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def groups_group_onenote_page_parent_section_parent_notebook_section_copy_to_section_group(client,
                                                                                           group_id,
                                                                                           onenote_page_id,
                                                                                           onenote_section_id,
                                                                                           id_=None,
                                                                                           string_group_id=None,
                                                                                           rename_as=None,
                                                                                           site_collection_id=None,
                                                                                           site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def groups_group_onenote_page_parent_section_parent_section_group_parent_notebook_copy_notebook(client,
                                                                                                group_id,
                                                                                                onenote_page_id,
                                                                                                string_group_id=None,
                                                                                                rename_as=None,
                                                                                                notebook_folder=None,
                                                                                                site_collection_id=None,
                                                                                                site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def groups_group_onenote_page_parent_section_parent_section_group_parent_notebook_section_copy_to_notebook(client,
                                                                                                           group_id,
                                                                                                           onenote_page_id,
                                                                                                           onenote_section_id,
                                                                                                           id_=None,
                                                                                                           string_group_id=None,
                                                                                                           rename_as=None,
                                                                                                           site_collection_id=None,
                                                                                                           site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_page_id=onenote_page_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def groups_group_onenote_page_parent_section_parent_section_group_parent_notebook_section_copy_to_section_group(client,
                                                                                                                group_id,
                                                                                                                onenote_page_id,
                                                                                                                onenote_section_id,
                                                                                                                id_=None,
                                                                                                                string_group_id=None,
                                                                                                                rename_as=None,
                                                                                                                site_collection_id=None,
                                                                                                                site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def groups_group_onenote_page_parent_section_parent_section_group_section_copy_to_notebook(client,
                                                                                           group_id,
                                                                                           onenote_page_id,
                                                                                           onenote_section_id,
                                                                                           id_=None,
                                                                                           string_group_id=None,
                                                                                           rename_as=None,
                                                                                           site_collection_id=None,
                                                                                           site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_page_id=onenote_page_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def groups_group_onenote_page_parent_section_parent_section_group_section_copy_to_section_group(client,
                                                                                                group_id,
                                                                                                onenote_page_id,
                                                                                                onenote_section_id,
                                                                                                id_=None,
                                                                                                string_group_id=None,
                                                                                                rename_as=None,
                                                                                                site_collection_id=None,
                                                                                                site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def groups_group_onenote_section_group_parent_notebook_copy_notebook(client,
                                                                     group_id,
                                                                     section_group_id,
                                                                     string_group_id=None,
                                                                     rename_as=None,
                                                                     notebook_folder=None,
                                                                     site_collection_id=None,
                                                                     site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                section_group_id=section_group_id,
                                body=body)


def groups_group_onenote_section_group_parent_notebook_section_copy_to_notebook(client,
                                                                                group_id,
                                                                                section_group_id,
                                                                                onenote_section_id,
                                                                                id_=None,
                                                                                string_group_id=None,
                                                                                rename_as=None,
                                                                                site_collection_id=None,
                                                                                site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def groups_group_onenote_section_group_parent_notebook_section_copy_to_section_group(client,
                                                                                     group_id,
                                                                                     section_group_id,
                                                                                     onenote_section_id,
                                                                                     id_=None,
                                                                                     string_group_id=None,
                                                                                     rename_as=None,
                                                                                     site_collection_id=None,
                                                                                     site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def groups_group_onenote_section_group_parent_notebook_section_page_copy_to_section(client,
                                                                                    group_id,
                                                                                    section_group_id,
                                                                                    onenote_section_id,
                                                                                    onenote_page_id,
                                                                                    id_=None,
                                                                                    string_group_id=None,
                                                                                    site_collection_id=None,
                                                                                    site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(group_id=group_id,
                                  section_group_id=section_group_id,
                                  onenote_section_id=onenote_section_id,
                                  onenote_page_id=onenote_page_id,
                                  body=body)


def groups_group_onenote_section_group_parent_notebook_section_page_onenote_patch_content(client,
                                                                                          group_id,
                                                                                          section_group_id,
                                                                                          onenote_section_id,
                                                                                          onenote_page_id,
                                                                                          commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(group_id=group_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def groups_group_onenote_section_group_parent_notebook_section_page_preview(client,
                                                                            group_id,
                                                                            section_group_id,
                                                                            onenote_section_id,
                                                                            onenote_page_id):
    return client.preview(group_id=group_id,
                          section_group_id=section_group_id,
                          onenote_section_id=onenote_section_id,
                          onenote_page_id=onenote_page_id)


def groups_group_onenote_section_group_parent_notebook_section_page_parent_notebook_copy_notebook(client,
                                                                                                  group_id,
                                                                                                  section_group_id,
                                                                                                  onenote_section_id,
                                                                                                  onenote_page_id,
                                                                                                  string_group_id=None,
                                                                                                  rename_as=None,
                                                                                                  notebook_folder=None,
                                                                                                  site_collection_id=None,
                                                                                                  site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                section_group_id=section_group_id,
                                onenote_section_id=onenote_section_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def groups_group_onenote_section_group_parent_notebook_section_page_parent_section_copy_to_notebook(client,
                                                                                                    group_id,
                                                                                                    section_group_id,
                                                                                                    onenote_section_id,
                                                                                                    onenote_page_id,
                                                                                                    id_=None,
                                                                                                    string_group_id=None,
                                                                                                    rename_as=None,
                                                                                                    site_collection_id=None,
                                                                                                    site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   body=body)


def groups_group_onenote_section_group_parent_notebook_section_page_parent_section_copy_to_section_group(client,
                                                                                                         group_id,
                                                                                                         section_group_id,
                                                                                                         onenote_section_id,
                                                                                                         onenote_page_id,
                                                                                                         id_=None,
                                                                                                         string_group_id=None,
                                                                                                         rename_as=None,
                                                                                                         site_collection_id=None,
                                                                                                         site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def groups_group_onenote_section_group_parent_notebook_section_parent_notebook_copy_notebook(client,
                                                                                             group_id,
                                                                                             section_group_id,
                                                                                             onenote_section_id,
                                                                                             string_group_id=None,
                                                                                             rename_as=None,
                                                                                             notebook_folder=None,
                                                                                             site_collection_id=None,
                                                                                             site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                section_group_id=section_group_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def groups_group_onenote_section_group_section_copy_to_notebook(client,
                                                                group_id,
                                                                section_group_id,
                                                                onenote_section_id,
                                                                id_=None,
                                                                string_group_id=None,
                                                                rename_as=None,
                                                                site_collection_id=None,
                                                                site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def groups_group_onenote_section_group_section_copy_to_section_group(client,
                                                                     group_id,
                                                                     section_group_id,
                                                                     onenote_section_id,
                                                                     id_=None,
                                                                     string_group_id=None,
                                                                     rename_as=None,
                                                                     site_collection_id=None,
                                                                     site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def groups_group_onenote_section_group_section_page_copy_to_section(client,
                                                                    group_id,
                                                                    section_group_id,
                                                                    onenote_section_id,
                                                                    onenote_page_id,
                                                                    id_=None,
                                                                    string_group_id=None,
                                                                    site_collection_id=None,
                                                                    site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(group_id=group_id,
                                  section_group_id=section_group_id,
                                  onenote_section_id=onenote_section_id,
                                  onenote_page_id=onenote_page_id,
                                  body=body)


def groups_group_onenote_section_group_section_page_onenote_patch_content(client,
                                                                          group_id,
                                                                          section_group_id,
                                                                          onenote_section_id,
                                                                          onenote_page_id,
                                                                          commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(group_id=group_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def groups_group_onenote_section_group_section_page_preview(client,
                                                            group_id,
                                                            section_group_id,
                                                            onenote_section_id,
                                                            onenote_page_id):
    return client.preview(group_id=group_id,
                          section_group_id=section_group_id,
                          onenote_section_id=onenote_section_id,
                          onenote_page_id=onenote_page_id)


def groups_group_onenote_section_group_section_page_parent_notebook_copy_notebook(client,
                                                                                  group_id,
                                                                                  section_group_id,
                                                                                  onenote_section_id,
                                                                                  onenote_page_id,
                                                                                  string_group_id=None,
                                                                                  rename_as=None,
                                                                                  notebook_folder=None,
                                                                                  site_collection_id=None,
                                                                                  site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                section_group_id=section_group_id,
                                onenote_section_id=onenote_section_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def groups_group_onenote_section_group_section_page_parent_notebook_section_copy_to_notebook(client,
                                                                                             group_id,
                                                                                             section_group_id,
                                                                                             onenote_section_id,
                                                                                             onenote_page_id,
                                                                                             onenote_section_id1,
                                                                                             id_=None,
                                                                                             string_group_id=None,
                                                                                             rename_as=None,
                                                                                             site_collection_id=None,
                                                                                             site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def groups_group_onenote_section_group_section_page_parent_notebook_section_copy_to_section_group(client,
                                                                                                  group_id,
                                                                                                  section_group_id,
                                                                                                  onenote_section_id,
                                                                                                  onenote_page_id,
                                                                                                  onenote_section_id1,
                                                                                                  id_=None,
                                                                                                  string_group_id=None,
                                                                                                  rename_as=None,
                                                                                                  site_collection_id=None,
                                                                                                  site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def groups_group_onenote_section_group_section_page_parent_section_copy_to_notebook(client,
                                                                                    group_id,
                                                                                    section_group_id,
                                                                                    onenote_section_id,
                                                                                    onenote_page_id,
                                                                                    id_=None,
                                                                                    string_group_id=None,
                                                                                    rename_as=None,
                                                                                    site_collection_id=None,
                                                                                    site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   body=body)


def groups_group_onenote_section_group_section_page_parent_section_copy_to_section_group(client,
                                                                                         group_id,
                                                                                         section_group_id,
                                                                                         onenote_section_id,
                                                                                         onenote_page_id,
                                                                                         id_=None,
                                                                                         string_group_id=None,
                                                                                         rename_as=None,
                                                                                         site_collection_id=None,
                                                                                         site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def groups_group_onenote_section_group_section_parent_notebook_copy_notebook(client,
                                                                             group_id,
                                                                             section_group_id,
                                                                             onenote_section_id,
                                                                             string_group_id=None,
                                                                             rename_as=None,
                                                                             notebook_folder=None,
                                                                             site_collection_id=None,
                                                                             site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                section_group_id=section_group_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def groups_group_onenote_section_group_section_parent_notebook_section_copy_to_notebook(client,
                                                                                        group_id,
                                                                                        section_group_id,
                                                                                        onenote_section_id,
                                                                                        onenote_section_id1,
                                                                                        id_=None,
                                                                                        string_group_id=None,
                                                                                        rename_as=None,
                                                                                        site_collection_id=None,
                                                                                        site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def groups_group_onenote_section_group_section_parent_notebook_section_copy_to_section_group(client,
                                                                                             group_id,
                                                                                             section_group_id,
                                                                                             onenote_section_id,
                                                                                             onenote_section_id1,
                                                                                             id_=None,
                                                                                             string_group_id=None,
                                                                                             rename_as=None,
                                                                                             site_collection_id=None,
                                                                                             site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def groups_group_onenote_section_copy_to_notebook(client,
                                                  group_id,
                                                  onenote_section_id,
                                                  id_=None,
                                                  string_group_id=None,
                                                  rename_as=None,
                                                  site_collection_id=None,
                                                  site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_section_id=onenote_section_id,
                                   body=body)


def groups_group_onenote_section_copy_to_section_group(client,
                                                       group_id,
                                                       onenote_section_id,
                                                       id_=None,
                                                       string_group_id=None,
                                                       rename_as=None,
                                                       site_collection_id=None,
                                                       site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_section_id=onenote_section_id,
                                        body=body)


def groups_group_onenote_section_page_copy_to_section(client,
                                                      group_id,
                                                      onenote_section_id,
                                                      onenote_page_id,
                                                      id_=None,
                                                      string_group_id=None,
                                                      site_collection_id=None,
                                                      site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section(group_id=group_id,
                                  onenote_section_id=onenote_section_id,
                                  onenote_page_id=onenote_page_id,
                                  body=body)


def groups_group_onenote_section_page_onenote_patch_content(client,
                                                            group_id,
                                                            onenote_section_id,
                                                            onenote_page_id,
                                                            commands=None):
    body = {}
    body['commands'] = commands
    return client.onenote_patch_content(group_id=group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def groups_group_onenote_section_page_preview(client,
                                              group_id,
                                              onenote_section_id,
                                              onenote_page_id):
    return client.preview(group_id=group_id,
                          onenote_section_id=onenote_section_id,
                          onenote_page_id=onenote_page_id)


def groups_group_onenote_section_page_parent_notebook_copy_notebook(client,
                                                                    group_id,
                                                                    onenote_section_id,
                                                                    onenote_page_id,
                                                                    string_group_id=None,
                                                                    rename_as=None,
                                                                    notebook_folder=None,
                                                                    site_collection_id=None,
                                                                    site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                onenote_section_id=onenote_section_id,
                                onenote_page_id=onenote_page_id,
                                body=body)


def groups_group_onenote_section_page_parent_notebook_section_group_parent_notebook_copy_notebook(client,
                                                                                                  group_id,
                                                                                                  onenote_section_id,
                                                                                                  onenote_page_id,
                                                                                                  section_group_id,
                                                                                                  string_group_id=None,
                                                                                                  rename_as=None,
                                                                                                  notebook_folder=None,
                                                                                                  site_collection_id=None,
                                                                                                  site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                onenote_section_id=onenote_section_id,
                                onenote_page_id=onenote_page_id,
                                section_group_id=section_group_id,
                                body=body)


def groups_group_onenote_section_page_parent_notebook_section_group_section_copy_to_notebook(client,
                                                                                             group_id,
                                                                                             onenote_section_id,
                                                                                             onenote_page_id,
                                                                                             section_group_id,
                                                                                             onenote_section_id1,
                                                                                             id_=None,
                                                                                             string_group_id=None,
                                                                                             rename_as=None,
                                                                                             site_collection_id=None,
                                                                                             site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def groups_group_onenote_section_page_parent_notebook_section_group_section_copy_to_section_group(client,
                                                                                                  group_id,
                                                                                                  onenote_section_id,
                                                                                                  onenote_page_id,
                                                                                                  section_group_id,
                                                                                                  onenote_section_id1,
                                                                                                  id_=None,
                                                                                                  string_group_id=None,
                                                                                                  rename_as=None,
                                                                                                  site_collection_id=None,
                                                                                                  site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def groups_group_onenote_section_page_parent_notebook_section_copy_to_notebook(client,
                                                                               group_id,
                                                                               onenote_section_id,
                                                                               onenote_page_id,
                                                                               onenote_section_id1,
                                                                               id_=None,
                                                                               string_group_id=None,
                                                                               rename_as=None,
                                                                               site_collection_id=None,
                                                                               site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def groups_group_onenote_section_page_parent_notebook_section_copy_to_section_group(client,
                                                                                    group_id,
                                                                                    onenote_section_id,
                                                                                    onenote_page_id,
                                                                                    onenote_section_id1,
                                                                                    id_=None,
                                                                                    string_group_id=None,
                                                                                    rename_as=None,
                                                                                    site_collection_id=None,
                                                                                    site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def groups_group_onenote_section_page_parent_section_copy_to_notebook(client,
                                                                      group_id,
                                                                      onenote_section_id,
                                                                      onenote_page_id,
                                                                      id_=None,
                                                                      string_group_id=None,
                                                                      rename_as=None,
                                                                      site_collection_id=None,
                                                                      site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_page_id=onenote_page_id,
                                   body=body)


def groups_group_onenote_section_page_parent_section_copy_to_section_group(client,
                                                                           group_id,
                                                                           onenote_section_id,
                                                                           onenote_page_id,
                                                                           id_=None,
                                                                           string_group_id=None,
                                                                           rename_as=None,
                                                                           site_collection_id=None,
                                                                           site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_page_id=onenote_page_id,
                                        body=body)


def groups_group_onenote_section_parent_notebook_copy_notebook(client,
                                                               group_id,
                                                               onenote_section_id,
                                                               string_group_id=None,
                                                               rename_as=None,
                                                               notebook_folder=None,
                                                               site_collection_id=None,
                                                               site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def groups_group_onenote_section_parent_notebook_section_group_parent_notebook_copy_notebook(client,
                                                                                             group_id,
                                                                                             onenote_section_id,
                                                                                             section_group_id,
                                                                                             string_group_id=None,
                                                                                             rename_as=None,
                                                                                             notebook_folder=None,
                                                                                             site_collection_id=None,
                                                                                             site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                onenote_section_id=onenote_section_id,
                                section_group_id=section_group_id,
                                body=body)


def groups_group_onenote_section_parent_notebook_section_group_section_copy_to_notebook(client,
                                                                                        group_id,
                                                                                        onenote_section_id,
                                                                                        section_group_id,
                                                                                        onenote_section_id1,
                                                                                        id_=None,
                                                                                        string_group_id=None,
                                                                                        rename_as=None,
                                                                                        site_collection_id=None,
                                                                                        site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_section_id=onenote_section_id,
                                   section_group_id=section_group_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def groups_group_onenote_section_parent_notebook_section_group_section_copy_to_section_group(client,
                                                                                             group_id,
                                                                                             onenote_section_id,
                                                                                             section_group_id,
                                                                                             onenote_section_id1,
                                                                                             id_=None,
                                                                                             string_group_id=None,
                                                                                             rename_as=None,
                                                                                             site_collection_id=None,
                                                                                             site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_section_id=onenote_section_id,
                                        section_group_id=section_group_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def groups_group_onenote_section_parent_notebook_section_copy_to_notebook(client,
                                                                          group_id,
                                                                          onenote_section_id,
                                                                          onenote_section_id1,
                                                                          id_=None,
                                                                          string_group_id=None,
                                                                          rename_as=None,
                                                                          site_collection_id=None,
                                                                          site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def groups_group_onenote_section_parent_notebook_section_copy_to_section_group(client,
                                                                               group_id,
                                                                               onenote_section_id,
                                                                               onenote_section_id1,
                                                                               id_=None,
                                                                               string_group_id=None,
                                                                               rename_as=None,
                                                                               site_collection_id=None,
                                                                               site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def groups_group_onenote_section_parent_section_group_parent_notebook_copy_notebook(client,
                                                                                    group_id,
                                                                                    onenote_section_id,
                                                                                    string_group_id=None,
                                                                                    rename_as=None,
                                                                                    notebook_folder=None,
                                                                                    site_collection_id=None,
                                                                                    site_id=None):
    body = {}
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['notebook_folder'] = notebook_folder
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_notebook(group_id=group_id,
                                onenote_section_id=onenote_section_id,
                                body=body)


def groups_group_onenote_section_parent_section_group_parent_notebook_section_copy_to_notebook(client,
                                                                                               group_id,
                                                                                               onenote_section_id,
                                                                                               onenote_section_id1,
                                                                                               id_=None,
                                                                                               string_group_id=None,
                                                                                               rename_as=None,
                                                                                               site_collection_id=None,
                                                                                               site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def groups_group_onenote_section_parent_section_group_parent_notebook_section_copy_to_section_group(client,
                                                                                                    group_id,
                                                                                                    onenote_section_id,
                                                                                                    onenote_section_id1,
                                                                                                    id_=None,
                                                                                                    string_group_id=None,
                                                                                                    rename_as=None,
                                                                                                    site_collection_id=None,
                                                                                                    site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def groups_group_onenote_section_parent_section_group_section_copy_to_notebook(client,
                                                                               group_id,
                                                                               onenote_section_id,
                                                                               onenote_section_id1,
                                                                               id_=None,
                                                                               string_group_id=None,
                                                                               rename_as=None,
                                                                               site_collection_id=None,
                                                                               site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_notebook(group_id=group_id,
                                   onenote_section_id=onenote_section_id,
                                   onenote_section_id1=onenote_section_id1,
                                   body=body)


def groups_group_onenote_section_parent_section_group_section_copy_to_section_group(client,
                                                                                    group_id,
                                                                                    onenote_section_id,
                                                                                    onenote_section_id1,
                                                                                    id_=None,
                                                                                    string_group_id=None,
                                                                                    rename_as=None,
                                                                                    site_collection_id=None,
                                                                                    site_id=None):
    body = {}
    body['id'] = id_
    body['group_id'] = string_group_id
    body['rename_as'] = rename_as
    body['site_collection_id'] = site_collection_id
    body['site_id'] = site_id
    return client.copy_to_section_group(group_id=group_id,
                                        onenote_section_id=onenote_section_id,
                                        onenote_section_id1=onenote_section_id1,
                                        body=body)


def groups_group_thread_create_post(client,
                                    group_id,
                                    conversation_thread_id,
                                    body,
                                    id_=None,
                                    categories=None,
                                    change_key=None,
                                    created_date_time=None,
                                    last_modified_date_time=None,
                                    conversation_id=None,
                                    microsoft_graph_post_conversation_thread_id_conversation_thread_id=None,
                                    has_attachments=None,
                                    new_participants=None,
                                    received_date_time=None,
                                    attachments=None,
                                    extensions=None,
                                    in_reply_to=None,
                                    multi_value_extended_properties=None,
                                    single_value_extended_properties=None,
                                    email_address=None,
                                    microsoft_graph_email_address=None):
    body = {}
    body['id'] = id_
    body['categories'] = categories
    body['change_key'] = change_key
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['body'] = body
    body['conversation_id'] = conversation_id
    body['conversation_thread_id'] = microsoft_graph_post_conversation_thread_id_conversation_thread_id
    body['has_attachments'] = has_attachments
    body['new_participants'] = new_participants
    body['received_date_time'] = received_date_time
    body['attachments'] = attachments
    body['extensions'] = extensions
    body['in_reply_to'] = in_reply_to
    body['multi_value_extended_properties'] = multi_value_extended_properties
    body['single_value_extended_properties'] = single_value_extended_properties
    body['sender'] = {}
    body['sender']['email_address'] = email_address
    body['from_property'] = {}
    body['from_property']['email_address'] = microsoft_graph_email_address
    return client.create_posts(group_id=group_id,
                               conversation_thread_id=conversation_thread_id,
                               body=body)


def groups_group_thread_delete_post(client,
                                    group_id,
                                    conversation_thread_id,
                                    post_id,
                                    if_match=None):
    return client.delete_posts(group_id=group_id,
                               conversation_thread_id=conversation_thread_id,
                               post_id=post_id,
                               if_match=if_match)


def groups_group_thread_list_post(client,
                                  group_id,
                                  conversation_thread_id,
                                  orderby=None,
                                  select=None,
                                  expand=None):
    return client.list_posts(group_id=group_id,
                             conversation_thread_id=conversation_thread_id,
                             orderby=orderby,
                             select=select,
                             expand=expand)


def groups_group_thread_reply(client,
                              group_id,
                              conversation_thread_id,
                              post=None):
    body = {}
    body['post'] = post
    return client.reply(group_id=group_id,
                        conversation_thread_id=conversation_thread_id,
                        body=body)


def groups_group_thread_show_post(client,
                                  group_id,
                                  conversation_thread_id,
                                  post_id,
                                  select=None,
                                  expand=None):
    return client.get_posts(group_id=group_id,
                            conversation_thread_id=conversation_thread_id,
                            post_id=post_id,
                            select=select,
                            expand=expand)


def groups_group_thread_update_post(client,
                                    group_id,
                                    conversation_thread_id,
                                    post_id,
                                    body,
                                    id_=None,
                                    categories=None,
                                    change_key=None,
                                    created_date_time=None,
                                    last_modified_date_time=None,
                                    conversation_id=None,
                                    microsoft_graph_post_conversation_thread_id_conversation_thread_id=None,
                                    has_attachments=None,
                                    new_participants=None,
                                    received_date_time=None,
                                    attachments=None,
                                    extensions=None,
                                    in_reply_to=None,
                                    multi_value_extended_properties=None,
                                    single_value_extended_properties=None,
                                    email_address=None,
                                    microsoft_graph_email_address=None):
    body = {}
    body['id'] = id_
    body['categories'] = categories
    body['change_key'] = change_key
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['body'] = body
    body['conversation_id'] = conversation_id
    body['conversation_thread_id'] = microsoft_graph_post_conversation_thread_id_conversation_thread_id
    body['has_attachments'] = has_attachments
    body['new_participants'] = new_participants
    body['received_date_time'] = received_date_time
    body['attachments'] = attachments
    body['extensions'] = extensions
    body['in_reply_to'] = in_reply_to
    body['multi_value_extended_properties'] = multi_value_extended_properties
    body['single_value_extended_properties'] = single_value_extended_properties
    body['sender'] = {}
    body['sender']['email_address'] = email_address
    body['from_property'] = {}
    body['from_property']['email_address'] = microsoft_graph_email_address
    return client.update_posts(group_id=group_id,
                               conversation_thread_id=conversation_thread_id,
                               post_id=post_id,
                               body=body)


def groups_group_thread_post_create_attachment(client,
                                               group_id,
                                               conversation_thread_id,
                                               post_id,
                                               id_=None,
                                               content_type_=None,
                                               is_inline=None,
                                               last_modified_date_time=None,
                                               name=None,
                                               size=None):
    body = {}
    body['id'] = id_
    body['content_type'] = content_type_
    body['is_inline'] = is_inline
    body['last_modified_date_time'] = last_modified_date_time
    body['name'] = name
    body['size'] = size
    return client.create_attachments(group_id=group_id,
                                     conversation_thread_id=conversation_thread_id,
                                     post_id=post_id,
                                     body=body)


def groups_group_thread_post_create_extension(client,
                                              group_id,
                                              conversation_thread_id,
                                              post_id,
                                              id_=None):
    body = {}
    body['id'] = id_
    return client.create_extensions(group_id=group_id,
                                    conversation_thread_id=conversation_thread_id,
                                    post_id=post_id,
                                    body=body)


def groups_group_thread_post_create_multi_value_extended_property(client,
                                                                  group_id,
                                                                  conversation_thread_id,
                                                                  post_id,
                                                                  id_=None,
                                                                  value=None):
    body = {}
    body['id'] = id_
    body['value'] = value
    return client.create_multi_value_extended_properties(group_id=group_id,
                                                         conversation_thread_id=conversation_thread_id,
                                                         post_id=post_id,
                                                         body=body)


def groups_group_thread_post_create_single_value_extended_property(client,
                                                                   group_id,
                                                                   conversation_thread_id,
                                                                   post_id,
                                                                   id_=None,
                                                                   value=None):
    body = {}
    body['id'] = id_
    body['value'] = value
    return client.create_single_value_extended_properties(group_id=group_id,
                                                          conversation_thread_id=conversation_thread_id,
                                                          post_id=post_id,
                                                          body=body)


def groups_group_thread_post_delete_attachment(client,
                                               group_id,
                                               conversation_thread_id,
                                               post_id,
                                               attachment_id,
                                               if_match=None):
    return client.delete_attachments(group_id=group_id,
                                     conversation_thread_id=conversation_thread_id,
                                     post_id=post_id,
                                     attachment_id=attachment_id,
                                     if_match=if_match)


def groups_group_thread_post_delete_extension(client,
                                              group_id,
                                              conversation_thread_id,
                                              post_id,
                                              extension_id,
                                              if_match=None):
    return client.delete_extensions(group_id=group_id,
                                    conversation_thread_id=conversation_thread_id,
                                    post_id=post_id,
                                    extension_id=extension_id,
                                    if_match=if_match)


def groups_group_thread_post_delete_in_reply_to(client,
                                                group_id,
                                                conversation_thread_id,
                                                post_id,
                                                if_match=None):
    return client.delete_in_reply_to(group_id=group_id,
                                     conversation_thread_id=conversation_thread_id,
                                     post_id=post_id,
                                     if_match=if_match)


def groups_group_thread_post_delete_multi_value_extended_property(client,
                                                                  group_id,
                                                                  conversation_thread_id,
                                                                  post_id,
                                                                  multi_value_legacy_extended_property_id,
                                                                  if_match=None):
    return client.delete_multi_value_extended_properties(group_id=group_id,
                                                         conversation_thread_id=conversation_thread_id,
                                                         post_id=post_id,
                                                         multi_value_legacy_extended_property_id=multi_value_legacy_extended_property_id,
                                                         if_match=if_match)


def groups_group_thread_post_delete_single_value_extended_property(client,
                                                                   group_id,
                                                                   conversation_thread_id,
                                                                   post_id,
                                                                   single_value_legacy_extended_property_id,
                                                                   if_match=None):
    return client.delete_single_value_extended_properties(group_id=group_id,
                                                          conversation_thread_id=conversation_thread_id,
                                                          post_id=post_id,
                                                          single_value_legacy_extended_property_id=single_value_legacy_extended_property_id,
                                                          if_match=if_match)


def groups_group_thread_post_forward(client,
                                     group_id,
                                     conversation_thread_id,
                                     post_id,
                                     comment=None,
                                     to_recipients=None):
    body = {}
    body['comment'] = comment
    body['to_recipients'] = to_recipients
    return client.forward(group_id=group_id,
                          conversation_thread_id=conversation_thread_id,
                          post_id=post_id,
                          body=body)


def groups_group_thread_post_list_attachment(client,
                                             group_id,
                                             conversation_thread_id,
                                             post_id,
                                             orderby=None,
                                             select=None,
                                             expand=None):
    return client.list_attachments(group_id=group_id,
                                   conversation_thread_id=conversation_thread_id,
                                   post_id=post_id,
                                   orderby=orderby,
                                   select=select,
                                   expand=expand)


def groups_group_thread_post_list_extension(client,
                                            group_id,
                                            conversation_thread_id,
                                            post_id,
                                            orderby=None,
                                            select=None,
                                            expand=None):
    return client.list_extensions(group_id=group_id,
                                  conversation_thread_id=conversation_thread_id,
                                  post_id=post_id,
                                  orderby=orderby,
                                  select=select,
                                  expand=expand)


def groups_group_thread_post_list_multi_value_extended_property(client,
                                                                group_id,
                                                                conversation_thread_id,
                                                                post_id,
                                                                orderby=None,
                                                                select=None,
                                                                expand=None):
    return client.list_multi_value_extended_properties(group_id=group_id,
                                                       conversation_thread_id=conversation_thread_id,
                                                       post_id=post_id,
                                                       orderby=orderby,
                                                       select=select,
                                                       expand=expand)


def groups_group_thread_post_list_single_value_extended_property(client,
                                                                 group_id,
                                                                 conversation_thread_id,
                                                                 post_id,
                                                                 orderby=None,
                                                                 select=None,
                                                                 expand=None):
    return client.list_single_value_extended_properties(group_id=group_id,
                                                        conversation_thread_id=conversation_thread_id,
                                                        post_id=post_id,
                                                        orderby=orderby,
                                                        select=select,
                                                        expand=expand)


def groups_group_thread_post_reply(client,
                                   group_id,
                                   conversation_thread_id,
                                   post_id,
                                   post=None):
    body = {}
    body['post'] = post
    return client.reply(group_id=group_id,
                        conversation_thread_id=conversation_thread_id,
                        post_id=post_id,
                        body=body)


def groups_group_thread_post_show_attachment(client,
                                             group_id,
                                             conversation_thread_id,
                                             post_id,
                                             attachment_id,
                                             select=None,
                                             expand=None):
    return client.get_attachments(group_id=group_id,
                                  conversation_thread_id=conversation_thread_id,
                                  post_id=post_id,
                                  attachment_id=attachment_id,
                                  select=select,
                                  expand=expand)


def groups_group_thread_post_show_extension(client,
                                            group_id,
                                            conversation_thread_id,
                                            post_id,
                                            extension_id,
                                            select=None,
                                            expand=None):
    return client.get_extensions(group_id=group_id,
                                 conversation_thread_id=conversation_thread_id,
                                 post_id=post_id,
                                 extension_id=extension_id,
                                 select=select,
                                 expand=expand)


def groups_group_thread_post_show_in_reply_to(client,
                                              group_id,
                                              conversation_thread_id,
                                              post_id,
                                              select=None,
                                              expand=None):
    return client.get_in_reply_to(group_id=group_id,
                                  conversation_thread_id=conversation_thread_id,
                                  post_id=post_id,
                                  select=select,
                                  expand=expand)


def groups_group_thread_post_show_multi_value_extended_property(client,
                                                                group_id,
                                                                conversation_thread_id,
                                                                post_id,
                                                                multi_value_legacy_extended_property_id,
                                                                select=None,
                                                                expand=None):
    return client.get_multi_value_extended_properties(group_id=group_id,
                                                      conversation_thread_id=conversation_thread_id,
                                                      post_id=post_id,
                                                      multi_value_legacy_extended_property_id=multi_value_legacy_extended_property_id,
                                                      select=select,
                                                      expand=expand)


def groups_group_thread_post_show_single_value_extended_property(client,
                                                                 group_id,
                                                                 conversation_thread_id,
                                                                 post_id,
                                                                 single_value_legacy_extended_property_id,
                                                                 select=None,
                                                                 expand=None):
    return client.get_single_value_extended_properties(group_id=group_id,
                                                       conversation_thread_id=conversation_thread_id,
                                                       post_id=post_id,
                                                       single_value_legacy_extended_property_id=single_value_legacy_extended_property_id,
                                                       select=select,
                                                       expand=expand)


def groups_group_thread_post_update_attachment(client,
                                               group_id,
                                               conversation_thread_id,
                                               post_id,
                                               attachment_id,
                                               id_=None,
                                               content_type_=None,
                                               is_inline=None,
                                               last_modified_date_time=None,
                                               name=None,
                                               size=None):
    body = {}
    body['id'] = id_
    body['content_type'] = content_type_
    body['is_inline'] = is_inline
    body['last_modified_date_time'] = last_modified_date_time
    body['name'] = name
    body['size'] = size
    return client.update_attachments(group_id=group_id,
                                     conversation_thread_id=conversation_thread_id,
                                     post_id=post_id,
                                     attachment_id=attachment_id,
                                     body=body)


def groups_group_thread_post_update_extension(client,
                                              group_id,
                                              conversation_thread_id,
                                              post_id,
                                              extension_id,
                                              id_=None):
    body = {}
    body['id'] = id_
    return client.update_extensions(group_id=group_id,
                                    conversation_thread_id=conversation_thread_id,
                                    post_id=post_id,
                                    extension_id=extension_id,
                                    body=body)


def groups_group_thread_post_update_in_reply_to(client,
                                                group_id,
                                                conversation_thread_id,
                                                post_id,
                                                body,
                                                id_=None,
                                                categories=None,
                                                change_key=None,
                                                created_date_time=None,
                                                last_modified_date_time=None,
                                                conversation_id=None,
                                                microsoft_graph_post_conversation_thread_id_conversation_thread_id=None,
                                                has_attachments=None,
                                                new_participants=None,
                                                received_date_time=None,
                                                attachments=None,
                                                extensions=None,
                                                in_reply_to=None,
                                                multi_value_extended_properties=None,
                                                single_value_extended_properties=None,
                                                email_address=None,
                                                microsoft_graph_email_address=None):
    body = {}
    body['id'] = id_
    body['categories'] = categories
    body['change_key'] = change_key
    body['created_date_time'] = created_date_time
    body['last_modified_date_time'] = last_modified_date_time
    body['body'] = body
    body['conversation_id'] = conversation_id
    body['conversation_thread_id'] = microsoft_graph_post_conversation_thread_id_conversation_thread_id
    body['has_attachments'] = has_attachments
    body['new_participants'] = new_participants
    body['received_date_time'] = received_date_time
    body['attachments'] = attachments
    body['extensions'] = extensions
    body['in_reply_to'] = in_reply_to
    body['multi_value_extended_properties'] = multi_value_extended_properties
    body['single_value_extended_properties'] = single_value_extended_properties
    body['sender'] = {}
    body['sender']['email_address'] = email_address
    body['from_property'] = {}
    body['from_property']['email_address'] = microsoft_graph_email_address
    return client.update_in_reply_to(group_id=group_id,
                                     conversation_thread_id=conversation_thread_id,
                                     post_id=post_id,
                                     body=body)


def groups_group_thread_post_update_multi_value_extended_property(client,
                                                                  group_id,
                                                                  conversation_thread_id,
                                                                  post_id,
                                                                  multi_value_legacy_extended_property_id,
                                                                  id_=None,
                                                                  value=None):
    body = {}
    body['id'] = id_
    body['value'] = value
    return client.update_multi_value_extended_properties(group_id=group_id,
                                                         conversation_thread_id=conversation_thread_id,
                                                         post_id=post_id,
                                                         multi_value_legacy_extended_property_id=multi_value_legacy_extended_property_id,
                                                         body=body)


def groups_group_thread_post_update_single_value_extended_property(client,
                                                                   group_id,
                                                                   conversation_thread_id,
                                                                   post_id,
                                                                   single_value_legacy_extended_property_id,
                                                                   id_=None,
                                                                   value=None):
    body = {}
    body['id'] = id_
    body['value'] = value
    return client.update_single_value_extended_properties(group_id=group_id,
                                                          conversation_thread_id=conversation_thread_id,
                                                          post_id=post_id,
                                                          single_value_legacy_extended_property_id=single_value_legacy_extended_property_id,
                                                          body=body)


def groups_group_thread_post_attachment_create_upload_session(client,
                                                              group_id,
                                                              conversation_thread_id,
                                                              post_id,
                                                              attachment_item=None):
    body = {}
    body['attachment_item'] = attachment_item
    return client.create_upload_session(group_id=group_id,
                                        conversation_thread_id=conversation_thread_id,
                                        post_id=post_id,
                                        body=body)


def groups_group_thread_post_in_reply_to_forward(client,
                                                 group_id,
                                                 conversation_thread_id,
                                                 post_id,
                                                 comment=None,
                                                 to_recipients=None):
    body = {}
    body['comment'] = comment
    body['to_recipients'] = to_recipients
    return client.forward(group_id=group_id,
                          conversation_thread_id=conversation_thread_id,
                          post_id=post_id,
                          body=body)


def groups_group_thread_post_in_reply_to_reply(client,
                                               group_id,
                                               conversation_thread_id,
                                               post_id,
                                               post=None):
    body = {}
    body['post'] = post
    return client.reply(group_id=group_id,
                        conversation_thread_id=conversation_thread_id,
                        post_id=post_id,
                        body=body)
