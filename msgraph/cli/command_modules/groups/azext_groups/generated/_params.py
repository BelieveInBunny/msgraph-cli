# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import get_three_state_flag
from azure.cli.core.commands.validators import validate_file_or_dict
from azext_groups.action import (
    AddAssignedLabels,
    AddAssignedLicenses,
    AddOnPremisesProvisioningErrors,
    AddAppRoleAssignments,
    AddCreatedOnBehalfOf,
    AddMemberOf,
    AddMembers,
    AddMembersWithLicenseErrors,
    AddOwners,
    AddPermissionGrants,
    AddTransitiveMemberOf,
    AddTransitiveMembers,
    AddAcceptedSenders,
    AddPhoto,
    AddPhotos,
    AddRejectedSenders,
    AddGroupsGroupExtensions,
    AddGroupLifecyclePolicies,
    AddResources,
    AddAddLicenses,
    AddAttachmentItem,
    AddEndTime,
    AddBody,
    AddAttachments,
    AddGroupsConversationsThreadsExtensions,
    AddMultiValueExtendedProperties,
    AddSingleValueExtendedProperties,
    AddEmailAddress,
    AddGroupsOnenoteNotebooksSectiongroupsSectionsPagesCommands,
    AddGroupsOnenoteNotebooksSectionsPagesCommands,
    AddGroupsOnenotePagesCommands,
    AddGroupsOnenotePagesParentnotebookSectiongroupsSectionsPagesCommands,
    AddGroupsOnenotePagesParentnotebookSectionsPagesCommands,
    AddGroupsOnenotePagesParentsectionPagesCommands,
    AddGroupsOnenoteSectiongroupsParentnotebookSectionsPagesCommands,
    AddGroupsOnenoteSectiongroupsSectionsPagesCommands,
    AddCommands
)


def load_arguments(self, _):

    with self.argument_context('groups group-lifecycle-policy-group-lifecycle-policy create-group-lifecycle-policy') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('alternate_notification_emails', type=str, help='List of email address to send notifications for '
                   'groups without owners. Multiple email address can be defined by separating email address with a '
                   'semicolon.')
        c.argument('group_lifetime_in_days', type=int, help='Number of days before a group expires and needs to be '
                   'renewed. Once renewed, the group expiration is extended by the number of days defined.')
        c.argument('managed_group_types', type=str, help='The group type for which the expiration policy applies. '
                   'Possible values are All, Selected or None.')

    with self.argument_context('groups group-lifecycle-policy-group-lifecycle-policy delete-group-lifecycle-policy') as c:
        c.argument('group_lifecycle_policy_id', type=str, help='key: id of groupLifecyclePolicy')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-lifecycle-policy-group-lifecycle-policy list-group-lifecycle-policy') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-lifecycle-policy-group-lifecycle-policy show-group-lifecycle-policy') as c:
        c.argument('group_lifecycle_policy_id', type=str, help='key: id of groupLifecyclePolicy')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-lifecycle-policy-group-lifecycle-policy update-group-lifecycle-policy') as c:
        c.argument('group_lifecycle_policy_id', type=str, help='key: id of groupLifecyclePolicy')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('alternate_notification_emails', type=str, help='List of email address to send notifications for '
                   'groups without owners. Multiple email address can be defined by separating email address with a '
                   'semicolon.')
        c.argument('group_lifetime_in_days', type=int, help='Number of days before a group expires and needs to be '
                   'renewed. Once renewed, the group expiration is extended by the number of days defined.')
        c.argument('managed_group_types', type=str, help='The group type for which the expiration policy applies. '
                   'Possible values are All, Selected or None.')

    with self.argument_context('groups group-lifecycle-policy add-group') as c:
        c.argument('group_lifecycle_policy_id', type=str, help='key: id of groupLifecyclePolicy')
        c.argument('group_id', type=str, help='')

    with self.argument_context('groups group-lifecycle-policy remove-group') as c:
        c.argument('group_lifecycle_policy_id', type=str, help='key: id of groupLifecyclePolicy')
        c.argument('group_id', type=str, help='')

    with self.argument_context('groups group-group create-group') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('assigned_labels', action=AddAssignedLabels, nargs='+', help='The list of sensitivity label pairs '
                   '(label ID, label name) associated with a Microsoft 365 group. Returned only on $select.')
        c.argument('assigned_licenses', action=AddAssignedLicenses, nargs='+', help='The licenses that are assigned to '
                   'the group. Returned only on $select. Read-only.')
        c.argument('classification', type=str, help='Describes a classification for the group (such as low, medium or '
                   'high business impact). Valid values for this property are defined by creating a ClassificationList '
                   'setting value, based on the template definition.Returned by default.')
        c.argument('created_date_time', help='Timestamp of when the group was created. The value cannot be modified '
                   'and is automatically populated when the group is created. The Timestamp type represents date and '
                   'time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan '
                   '1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only.')
        c.argument('description', type=str, help='An optional description for the group. Returned by default.')
        c.argument('display_name', type=str, help='The display name for the group. This property is required when a '
                   'group is created and cannot be cleared during updates. Returned by default. Supports $filter and '
                   '$orderby.')
        c.argument('expiration_date_time', help='Timestamp of when the group is set to expire. The value cannot be '
                   'modified and is automatically populated when the group is created. The Timestamp type represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only.')
        c.argument('group_types', nargs='+', help='Specifies the group type and its membership.  If the collection '
                   'contains Unified, the group is a Microsoft 365 group; otherwise, it\'s either a security group or '
                   'distribution group. For details, see groups overview.If the collection includes DynamicMembership, '
                   'the group has dynamic membership; otherwise, membership is static.  Returned by default. Supports '
                   '$filter.')
        c.argument('has_members_with_license_errors', arg_type=get_three_state_flag(), help='Indicates whether there '
                   'are members in this group that have license errors from its group-based license assignment. This '
                   'property is never returned on a GET operation. You can use it as a $filter argument to get groups '
                   'that have members with license errors (that is, filter for this property being true).')
        c.argument('is_assignable_to_role', arg_type=get_three_state_flag(), help='Indicates whether this group can be '
                   'assigned to an Azure Active Directory role.This property can only be set while creating the group '
                   'and is immutable. If set to true, the securityEnabled property must also be set to true and the '
                   'group cannot be a dynamic group (that is, groupTypes cannot contain DynamicMembership).Only '
                   'callers in Global Administrator and Privileged Role Administrator roles can set this property. For '
                   'more, see Using a group to manage Azure AD role assignmentsReturned by default.')
        c.argument('mail', type=str, help='The SMTP address for the group, for example, \'serviceadmins@contoso.onmicro'
                   'soft.com\'. Returned by default. Read-only. Supports $filter.')
        c.argument('mail_enabled', arg_type=get_three_state_flag(), help='Specifies whether the group is mail-enabled. '
                   'Returned by default.')
        c.argument('mail_nickname', type=str, help='The mail alias for the group, unique in the organization. This '
                   'property must be specified when a group is created. These characters cannot be used in the '
                   'mailNickName: @()/[]\';:.<>,SPACE. Returned by default. Supports $filter.')
        c.argument('membership_rule', type=str, help='The rule that determines members for this group if the group is '
                   'a dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of '
                   'the membership rule, see Membership Rules syntax. Returned by default.')
        c.argument('membership_rule_processing_state', type=str, help='Indicates whether the dynamic membership '
                   'processing is on or paused. Possible values are On or Paused. Returned by default.')
        c.argument('on_premises_domain_name', type=str, help='Contains the on-premises domain FQDN, also called '
                   'dnsDomainName synchronized from the on-premises directory. The property is only populated for '
                   'customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD '
                   'Connect.Returned by default. Read-only.')
        c.argument('on_premises_last_sync_date_time', help='Indicates the last time at which the group was synced with '
                   'the on-premises directory.The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z. Returned by default. Read-only. Supports $filter.')
        c.argument('on_premises_net_bios_name', type=str, help='Contains the on-premises netBios name synchronized '
                   'from the on-premises directory. The property is only populated for customers who are synchronizing '
                   'their on-premises directory to Azure Active Directory via Azure AD Connect.Returned by default. '
                   'Read-only.')
        c.argument('on_premises_provisioning_errors', action=AddOnPremisesProvisioningErrors, nargs='+', help='Errors '
                   'when using Microsoft synchronization product during provisioning. Returned by default.')
        c.argument('on_premises_sam_account_name', type=str, help='Contains the on-premises SAM account name '
                   'synchronized from the on-premises directory. The property is only populated for customers who are '
                   'synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect.Returned '
                   'by default. Read-only.')
        c.argument('on_premises_security_identifier', type=str, help='Contains the on-premises security identifier '
                   '(SID) for the group that was synchronized from on-premises to the cloud. Returned by default. '
                   'Read-only.')
        c.argument('on_premises_sync_enabled', arg_type=get_three_state_flag(), help='true if this group is synced '
                   'from an on-premises directory; false if this group was originally synced from an on-premises '
                   'directory but is no longer synced; null if this object has never been synced from an on-premises '
                   'directory (default). Returned by default. Read-only. Supports $filter.')
        c.argument('preferred_data_location', type=str, help='The preferred data location for the group. For more '
                   'information, see  OneDrive Online Multi-Geo. Returned by default.')
        c.argument('preferred_language', type=str, help='The preferred language for a Microsoft 365 group. Should '
                   'follow ISO 639-1 Code; for example \'en-US\'. Returned by default.')
        c.argument('proxy_addresses', nargs='+', help='Email addresses for the group that direct to the same group '
                   'mailbox. For example: [\'SMTP: bob@contoso.com\', \'smtp: bob@sales.contoso.com\']. The any '
                   'operator is required for filter expressions on multi-valued properties. Returned by default. '
                   'Read-only. Not nullable. Supports $filter.')
        c.argument('renewed_date_time', help='Timestamp of when the group was last renewed. This cannot be modified '
                   'directly and is only updated via the renew service action. The Timestamp type represents date and '
                   'time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan '
                   '1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only.')
        c.argument('security_enabled', arg_type=get_three_state_flag(), help='Specifies whether the group is a '
                   'security group. Returned by default. Supports $filter.')
        c.argument('security_identifier', type=str, help='Security identifier of the group, used in Windows scenarios. '
                   'Returned by default.')
        c.argument('theme', type=str, help='Specifies a Microsoft 365 group\'s color theme. Possible values are Teal, '
                   'Purple, Green, Blue, Pink, Orange or Red. Returned by default.')
        c.argument('visibility', type=str, help='Specifies the group join policy and group content visibility for '
                   'groups. Possible values are: Private, Public, or Hiddenmembership. Hiddenmembership can be set '
                   'only for Microsoft 365 groups, when the groups are created. It can\'t be updated later. Other '
                   'values of visibility can be updated after group creation. If visibility value is not specified '
                   'during group creation on Microsoft Graph, a security group is created as Private by default and '
                   'Microsoft 365 group is Public. See group visibility options to learn more. Returned by default.')
        c.argument('allow_external_senders', arg_type=get_three_state_flag(), help='Indicates if people external to '
                   'the organization can send messages to the group. Default value is false. Returned only on $select. '
                   'Supported only on the Get group API (GET /groups/{ID}).')
        c.argument('auto_subscribe_new_members', arg_type=get_three_state_flag(), help='Indicates if new members added '
                   'to the group will be auto-subscribed to receive email notifications. You can set this property in '
                   'a PATCH request for the group; do not set it in the initial POST request that creates the group. '
                   'Default value is false. Returned only on $select. Supported only on the Get group API (GET '
                   '/groups/{ID}).')
        c.argument('hide_from_address_lists', arg_type=get_three_state_flag(), help='true if the group is not '
                   'displayed in certain parts of the Outlook user interface: in the Address Book, in address lists '
                   'for selecting message recipients, and in the Browse Groups dialog for searching groups; false '
                   'otherwise. Default value is false. Returned only on $select. Supported only on the Get group API '
                   '(GET /groups/{ID}).')
        c.argument('hide_from_outlook_clients', arg_type=get_three_state_flag(), help='true if the group is not '
                   'displayed in Outlook clients, such as Outlook for Windows and Outlook on the web, false otherwise. '
                   'Default value is false. Returned only on $select. Supported only on the Get group API (GET '
                   '/groups/{ID}).')
        c.argument('is_subscribed_by_mail', arg_type=get_three_state_flag(), help='Indicates whether the signed-in '
                   'user is subscribed to receive email conversations. Default value is true. Returned only on '
                   '$select. Supported only on the Get group API (GET /groups/{ID}).')
        c.argument('unseen_count', type=int, help='Count of conversations that have received new posts since the '
                   'signed-in user last visited the group. This property is the same as unseenConversationsCount.Return'
                   'ed only on $select. Supported only on the Get group API (GET /groups/{ID}).')
        c.argument('is_archived', arg_type=get_three_state_flag(), help='')
        c.argument('app_role_assignments', action=AddAppRoleAssignments, nargs='+', help='Represents the app roles a '
                   'group has been granted for an application.')
        c.argument('created_on_behalf_of', action=AddCreatedOnBehalfOf, nargs='+', help='Represents an Azure Active '
                   'Directory object. The directoryObject type is the base type for many other directory entity types.')
        c.argument('member_of', action=AddMemberOf, nargs='+', help='Groups and administrative units that this group '
                   'is a member of. HTTP Methods: GET (supported for all groups). Read-only. Nullable.')
        c.argument('members', action=AddMembers, nargs='+', help='Users, contacts, and groups that are members of this '
                   'group. HTTP Methods: GET (supported for all groups), POST (supported for security groups and '
                   'mail-enabled security groups), DELETE (supported only for security groups) Read-only. Nullable.')
        c.argument('members_with_license_errors', action=AddMembersWithLicenseErrors, nargs='+', help='A list of group '
                   'members with license errors from this group-based license assignment. Read-only.')
        c.argument('owners', action=AddOwners, nargs='+', help='The owners of the group. The owners are a set of '
                   'non-admin users who are allowed to modify this object. HTTP Methods: GET (supported for all '
                   'groups), POST (supported for security groups and mail-enabled security groups), DELETE (supported '
                   'only for security groups) Read-only. Nullable.')
        c.argument('permission_grants', action=AddPermissionGrants, nargs='+', help='The permissions that have been '
                   'granted for a group to a specific application.')
        c.argument('settings', type=validate_file_or_dict, help='Settings that can govern this group\'s behavior, like '
                   'whether members can invite guest users to the group. Nullable. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('transitive_member_of', action=AddTransitiveMemberOf, nargs='+', help='')
        c.argument('transitive_members', action=AddTransitiveMembers, nargs='+', help='')
        c.argument('accepted_senders', action=AddAcceptedSenders, nargs='+', help='The list of users or groups that '
                   'are allowed to create post\'s or calendar events in this group. If this list is non-empty then '
                   'only users or groups listed here are allowed to post.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Read-only. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('conversations', type=validate_file_or_dict, help='The group\'s conversations. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The group\'s events. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('photo', action=AddPhoto, nargs='+', help='profilePhoto')
        c.argument('photos', action=AddPhotos, nargs='+', help='The profile photos owned by the group. Read-only. '
                   'Nullable.')
        c.argument('rejected_senders', action=AddRejectedSenders, nargs='+', help='The list of users or groups that '
                   'are not allowed to create posts or calendar events in this group. Nullable')
        c.argument('threads', type=validate_file_or_dict, help='The group\'s conversation threads. Nullable. Expected '
                   'value: json-string/json-file/@json-file.')
        c.argument('drive', type=validate_file_or_dict,
                   help='drive Expected value: json-string/json-file/@json-file.')
        c.argument('drives', type=validate_file_or_dict, help='The group\'s drives. Read-only. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('sites', type=validate_file_or_dict, help='The list of SharePoint sites in this group. Access the '
                   'default site with /sites/root. Expected value: json-string/json-file/@json-file.')
        c.argument('extensions', action=AddGroupsGroupExtensions, nargs='+', help='The collection of open extensions '
                   'defined for the group. Read-only. Nullable.')
        c.argument('group_lifecycle_policies', action=AddGroupLifecyclePolicies, nargs='+', help='The collection of '
                   'lifecycle policies for this group. Read-only. Nullable.')
        c.argument('team', type=validate_file_or_dict, help='team Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Onenote')
        c.argument('notebooks', type=validate_file_or_dict, help='The collection of OneNote notebooks that are owned '
                   'by the user or group. Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('operations', type=validate_file_or_dict, help='The status of OneNote operations. Getting an '
                   'operations collection is not supported, but you can get the status of long-running operations if '
                   'the Operation-Location header is returned in the response. Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('pages', type=validate_file_or_dict, help='The pages in all OneNote notebooks that are owned by the '
                   'user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('resources', action=AddResources, nargs='+', help='The image and other file resources in OneNote '
                   'pages. Getting a resources collection is not supported, but you can get the binary content of a '
                   'specific resource. Read-only. Nullable.', arg_group='Onenote')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in all OneNote notebooks '
                   'that are owned by the user or group.  Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('sections', type=validate_file_or_dict, help='The sections in all OneNote notebooks that are owned '
                   'by the user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('id1', type=str, help='Read-only.', arg_group='Planner')
        c.argument('plans', type=validate_file_or_dict, help='Read-only. Nullable. Returns the plannerPlans owned by '
                   'the group. Expected value: json-string/json-file/@json-file.', arg_group='Planner')
        c.argument('state', type=str, help='', arg_group='License Processing State')

    with self.argument_context('groups group-group delete-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-group list-group') as c:
        c.argument('consistency_level', type=str, help='Indicates the requested consistency level. Documentation URL: '
                   'https://developer.microsoft.com/en-us/office/blogs/microsoft-graph-advanced-queries-for-directory-o'
                   'bjects-are-now-generally-available/')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-group show-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('consistency_level', type=str, help='Indicates the requested consistency level. Documentation URL: '
                   'https://developer.microsoft.com/en-us/office/blogs/microsoft-graph-advanced-queries-for-directory-o'
                   'bjects-are-now-generally-available/')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-group update-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('assigned_labels', action=AddAssignedLabels, nargs='+', help='The list of sensitivity label pairs '
                   '(label ID, label name) associated with a Microsoft 365 group. Returned only on $select.')
        c.argument('assigned_licenses', action=AddAssignedLicenses, nargs='+', help='The licenses that are assigned to '
                   'the group. Returned only on $select. Read-only.')
        c.argument('classification', type=str, help='Describes a classification for the group (such as low, medium or '
                   'high business impact). Valid values for this property are defined by creating a ClassificationList '
                   'setting value, based on the template definition.Returned by default.')
        c.argument('created_date_time', help='Timestamp of when the group was created. The value cannot be modified '
                   'and is automatically populated when the group is created. The Timestamp type represents date and '
                   'time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan '
                   '1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only.')
        c.argument('description', type=str, help='An optional description for the group. Returned by default.')
        c.argument('display_name', type=str, help='The display name for the group. This property is required when a '
                   'group is created and cannot be cleared during updates. Returned by default. Supports $filter and '
                   '$orderby.')
        c.argument('expiration_date_time', help='Timestamp of when the group is set to expire. The value cannot be '
                   'modified and is automatically populated when the group is created. The Timestamp type represents '
                   'date and time information using ISO 8601 format and is always in UTC time. For example, midnight '
                   'UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only.')
        c.argument('group_types', nargs='+', help='Specifies the group type and its membership.  If the collection '
                   'contains Unified, the group is a Microsoft 365 group; otherwise, it\'s either a security group or '
                   'distribution group. For details, see groups overview.If the collection includes DynamicMembership, '
                   'the group has dynamic membership; otherwise, membership is static.  Returned by default. Supports '
                   '$filter.')
        c.argument('has_members_with_license_errors', arg_type=get_three_state_flag(), help='Indicates whether there '
                   'are members in this group that have license errors from its group-based license assignment. This '
                   'property is never returned on a GET operation. You can use it as a $filter argument to get groups '
                   'that have members with license errors (that is, filter for this property being true).')
        c.argument('is_assignable_to_role', arg_type=get_three_state_flag(), help='Indicates whether this group can be '
                   'assigned to an Azure Active Directory role.This property can only be set while creating the group '
                   'and is immutable. If set to true, the securityEnabled property must also be set to true and the '
                   'group cannot be a dynamic group (that is, groupTypes cannot contain DynamicMembership).Only '
                   'callers in Global Administrator and Privileged Role Administrator roles can set this property. For '
                   'more, see Using a group to manage Azure AD role assignmentsReturned by default.')
        c.argument('mail', type=str, help='The SMTP address for the group, for example, \'serviceadmins@contoso.onmicro'
                   'soft.com\'. Returned by default. Read-only. Supports $filter.')
        c.argument('mail_enabled', arg_type=get_three_state_flag(), help='Specifies whether the group is mail-enabled. '
                   'Returned by default.')
        c.argument('mail_nickname', type=str, help='The mail alias for the group, unique in the organization. This '
                   'property must be specified when a group is created. These characters cannot be used in the '
                   'mailNickName: @()/[]\';:.<>,SPACE. Returned by default. Supports $filter.')
        c.argument('membership_rule', type=str, help='The rule that determines members for this group if the group is '
                   'a dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of '
                   'the membership rule, see Membership Rules syntax. Returned by default.')
        c.argument('membership_rule_processing_state', type=str, help='Indicates whether the dynamic membership '
                   'processing is on or paused. Possible values are On or Paused. Returned by default.')
        c.argument('on_premises_domain_name', type=str, help='Contains the on-premises domain FQDN, also called '
                   'dnsDomainName synchronized from the on-premises directory. The property is only populated for '
                   'customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD '
                   'Connect.Returned by default. Read-only.')
        c.argument('on_premises_last_sync_date_time', help='Indicates the last time at which the group was synced with '
                   'the on-premises directory.The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z. Returned by default. Read-only. Supports $filter.')
        c.argument('on_premises_net_bios_name', type=str, help='Contains the on-premises netBios name synchronized '
                   'from the on-premises directory. The property is only populated for customers who are synchronizing '
                   'their on-premises directory to Azure Active Directory via Azure AD Connect.Returned by default. '
                   'Read-only.')
        c.argument('on_premises_provisioning_errors', action=AddOnPremisesProvisioningErrors, nargs='+', help='Errors '
                   'when using Microsoft synchronization product during provisioning. Returned by default.')
        c.argument('on_premises_sam_account_name', type=str, help='Contains the on-premises SAM account name '
                   'synchronized from the on-premises directory. The property is only populated for customers who are '
                   'synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect.Returned '
                   'by default. Read-only.')
        c.argument('on_premises_security_identifier', type=str, help='Contains the on-premises security identifier '
                   '(SID) for the group that was synchronized from on-premises to the cloud. Returned by default. '
                   'Read-only.')
        c.argument('on_premises_sync_enabled', arg_type=get_three_state_flag(), help='true if this group is synced '
                   'from an on-premises directory; false if this group was originally synced from an on-premises '
                   'directory but is no longer synced; null if this object has never been synced from an on-premises '
                   'directory (default). Returned by default. Read-only. Supports $filter.')
        c.argument('preferred_data_location', type=str, help='The preferred data location for the group. For more '
                   'information, see  OneDrive Online Multi-Geo. Returned by default.')
        c.argument('preferred_language', type=str, help='The preferred language for a Microsoft 365 group. Should '
                   'follow ISO 639-1 Code; for example \'en-US\'. Returned by default.')
        c.argument('proxy_addresses', nargs='+', help='Email addresses for the group that direct to the same group '
                   'mailbox. For example: [\'SMTP: bob@contoso.com\', \'smtp: bob@sales.contoso.com\']. The any '
                   'operator is required for filter expressions on multi-valued properties. Returned by default. '
                   'Read-only. Not nullable. Supports $filter.')
        c.argument('renewed_date_time', help='Timestamp of when the group was last renewed. This cannot be modified '
                   'directly and is only updated via the renew service action. The Timestamp type represents date and '
                   'time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan '
                   '1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only.')
        c.argument('security_enabled', arg_type=get_three_state_flag(), help='Specifies whether the group is a '
                   'security group. Returned by default. Supports $filter.')
        c.argument('security_identifier', type=str, help='Security identifier of the group, used in Windows scenarios. '
                   'Returned by default.')
        c.argument('theme', type=str, help='Specifies a Microsoft 365 group\'s color theme. Possible values are Teal, '
                   'Purple, Green, Blue, Pink, Orange or Red. Returned by default.')
        c.argument('visibility', type=str, help='Specifies the group join policy and group content visibility for '
                   'groups. Possible values are: Private, Public, or Hiddenmembership. Hiddenmembership can be set '
                   'only for Microsoft 365 groups, when the groups are created. It can\'t be updated later. Other '
                   'values of visibility can be updated after group creation. If visibility value is not specified '
                   'during group creation on Microsoft Graph, a security group is created as Private by default and '
                   'Microsoft 365 group is Public. See group visibility options to learn more. Returned by default.')
        c.argument('allow_external_senders', arg_type=get_three_state_flag(), help='Indicates if people external to '
                   'the organization can send messages to the group. Default value is false. Returned only on $select. '
                   'Supported only on the Get group API (GET /groups/{ID}).')
        c.argument('auto_subscribe_new_members', arg_type=get_three_state_flag(), help='Indicates if new members added '
                   'to the group will be auto-subscribed to receive email notifications. You can set this property in '
                   'a PATCH request for the group; do not set it in the initial POST request that creates the group. '
                   'Default value is false. Returned only on $select. Supported only on the Get group API (GET '
                   '/groups/{ID}).')
        c.argument('hide_from_address_lists', arg_type=get_three_state_flag(), help='true if the group is not '
                   'displayed in certain parts of the Outlook user interface: in the Address Book, in address lists '
                   'for selecting message recipients, and in the Browse Groups dialog for searching groups; false '
                   'otherwise. Default value is false. Returned only on $select. Supported only on the Get group API '
                   '(GET /groups/{ID}).')
        c.argument('hide_from_outlook_clients', arg_type=get_three_state_flag(), help='true if the group is not '
                   'displayed in Outlook clients, such as Outlook for Windows and Outlook on the web, false otherwise. '
                   'Default value is false. Returned only on $select. Supported only on the Get group API (GET '
                   '/groups/{ID}).')
        c.argument('is_subscribed_by_mail', arg_type=get_three_state_flag(), help='Indicates whether the signed-in '
                   'user is subscribed to receive email conversations. Default value is true. Returned only on '
                   '$select. Supported only on the Get group API (GET /groups/{ID}).')
        c.argument('unseen_count', type=int, help='Count of conversations that have received new posts since the '
                   'signed-in user last visited the group. This property is the same as unseenConversationsCount.Return'
                   'ed only on $select. Supported only on the Get group API (GET /groups/{ID}).')
        c.argument('is_archived', arg_type=get_three_state_flag(), help='')
        c.argument('app_role_assignments', action=AddAppRoleAssignments, nargs='+', help='Represents the app roles a '
                   'group has been granted for an application.')
        c.argument('created_on_behalf_of', action=AddCreatedOnBehalfOf, nargs='+', help='Represents an Azure Active '
                   'Directory object. The directoryObject type is the base type for many other directory entity types.')
        c.argument('member_of', action=AddMemberOf, nargs='+', help='Groups and administrative units that this group '
                   'is a member of. HTTP Methods: GET (supported for all groups). Read-only. Nullable.')
        c.argument('members', action=AddMembers, nargs='+', help='Users, contacts, and groups that are members of this '
                   'group. HTTP Methods: GET (supported for all groups), POST (supported for security groups and '
                   'mail-enabled security groups), DELETE (supported only for security groups) Read-only. Nullable.')
        c.argument('members_with_license_errors', action=AddMembersWithLicenseErrors, nargs='+', help='A list of group '
                   'members with license errors from this group-based license assignment. Read-only.')
        c.argument('owners', action=AddOwners, nargs='+', help='The owners of the group. The owners are a set of '
                   'non-admin users who are allowed to modify this object. HTTP Methods: GET (supported for all '
                   'groups), POST (supported for security groups and mail-enabled security groups), DELETE (supported '
                   'only for security groups) Read-only. Nullable.')
        c.argument('permission_grants', action=AddPermissionGrants, nargs='+', help='The permissions that have been '
                   'granted for a group to a specific application.')
        c.argument('settings', type=validate_file_or_dict, help='Settings that can govern this group\'s behavior, like '
                   'whether members can invite guest users to the group. Nullable. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('transitive_member_of', action=AddTransitiveMemberOf, nargs='+', help='')
        c.argument('transitive_members', action=AddTransitiveMembers, nargs='+', help='')
        c.argument('accepted_senders', action=AddAcceptedSenders, nargs='+', help='The list of users or groups that '
                   'are allowed to create post\'s or calendar events in this group. If this list is non-empty then '
                   'only users or groups listed here are allowed to post.')
        c.argument('calendar', type=validate_file_or_dict, help='calendar Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('calendar_view', type=validate_file_or_dict, help='The calendar view for the calendar. Read-only. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('conversations', type=validate_file_or_dict, help='The group\'s conversations. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('events', type=validate_file_or_dict, help='The group\'s events. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('photo', action=AddPhoto, nargs='+', help='profilePhoto')
        c.argument('photos', action=AddPhotos, nargs='+', help='The profile photos owned by the group. Read-only. '
                   'Nullable.')
        c.argument('rejected_senders', action=AddRejectedSenders, nargs='+', help='The list of users or groups that '
                   'are not allowed to create posts or calendar events in this group. Nullable')
        c.argument('threads', type=validate_file_or_dict, help='The group\'s conversation threads. Nullable. Expected '
                   'value: json-string/json-file/@json-file.')
        c.argument('drive', type=validate_file_or_dict,
                   help='drive Expected value: json-string/json-file/@json-file.')
        c.argument('drives', type=validate_file_or_dict, help='The group\'s drives. Read-only. Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('sites', type=validate_file_or_dict, help='The list of SharePoint sites in this group. Access the '
                   'default site with /sites/root. Expected value: json-string/json-file/@json-file.')
        c.argument('extensions', action=AddGroupsGroupExtensions, nargs='+', help='The collection of open extensions '
                   'defined for the group. Read-only. Nullable.')
        c.argument('group_lifecycle_policies', action=AddGroupLifecyclePolicies, nargs='+', help='The collection of '
                   'lifecycle policies for this group. Read-only. Nullable.')
        c.argument('team', type=validate_file_or_dict, help='team Expected value: json-string/json-file/@json-file.')
        c.argument('microsoft_graph_entity_id', type=str, help='Read-only.', arg_group='Onenote')
        c.argument('notebooks', type=validate_file_or_dict, help='The collection of OneNote notebooks that are owned '
                   'by the user or group. Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('operations', type=validate_file_or_dict, help='The status of OneNote operations. Getting an '
                   'operations collection is not supported, but you can get the status of long-running operations if '
                   'the Operation-Location header is returned in the response. Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('pages', type=validate_file_or_dict, help='The pages in all OneNote notebooks that are owned by the '
                   'user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('resources', action=AddResources, nargs='+', help='The image and other file resources in OneNote '
                   'pages. Getting a resources collection is not supported, but you can get the binary content of a '
                   'specific resource. Read-only. Nullable.', arg_group='Onenote')
        c.argument('section_groups', type=validate_file_or_dict, help='The section groups in all OneNote notebooks '
                   'that are owned by the user or group.  Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Onenote')
        c.argument('sections', type=validate_file_or_dict, help='The sections in all OneNote notebooks that are owned '
                   'by the user or group.  Read-only. Nullable. Expected value: json-string/json-file/@json-file.',
                   arg_group='Onenote')
        c.argument('id1', type=str, help='Read-only.', arg_group='Planner')
        c.argument('plans', type=validate_file_or_dict, help='Read-only. Nullable. Returns the plannerPlans owned by '
                   'the group. Expected value: json-string/json-file/@json-file.', arg_group='Planner')
        c.argument('state', type=str, help='', arg_group='License Processing State')

    with self.argument_context('groups group add-favorite') as c:
        c.argument('group_id', type=str, help='key: id of group')

    with self.argument_context('groups group assign-license') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('add_licenses', action=AddAddLicenses, nargs='+', help='')
        c.argument('remove_licenses', nargs='+', help='')

    with self.argument_context('groups group check-granted-permission-for-app') as c:
        c.argument('group_id', type=str, help='key: id of group')

    with self.argument_context('groups group check-member-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('group_ids', nargs='+', help='')

    with self.argument_context('groups group check-member-object') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('ids', nargs='+', help='')

    with self.argument_context('groups group create-conversation') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether any of the posts within '
                   'this Conversation has at least one attachment.')
        c.argument('last_delivered_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('preview', type=str, help='A short summary from the body of the latest post in this converstaion.')
        c.argument('topic', type=str, help='The topic of the conversation. This property can be set when the '
                   'conversation is created, but it cannot be updated.')
        c.argument('unique_senders', nargs='+', help='All the users that sent a message to this Conversation.')
        c.argument('threads', type=validate_file_or_dict, help='A collection of all the conversation threads in the '
                   'conversation. A navigation property. Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('groups group create-permission-grant') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('client_app_id', type=str, help='ID of the service principal of the Azure AD app that has been '
                   'granted access. Read-only.')
        c.argument('client_id', type=str, help='ID of the Azure AD app that has been granted access. Read-only.')
        c.argument('permission', type=str, help='The name of the resource-specific permission. Read-only.')
        c.argument('permission_type', type=str, help='The type of permission. Possible values are: Application, '
                   'Delegated. Read-only.')
        c.argument('resource_app_id', type=str,
                   help='ID of the Azure AD app that is hosting the resource. Read-only.')

    with self.argument_context('groups group create-photo') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('height', type=int, help='The height of the photo. Read-only.')
        c.argument('width', type=int, help='The width of the photo. Read-only.')

    with self.argument_context('groups group create-ref-accepted-sender') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group create-ref-member') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group create-ref-member-of') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group create-ref-member-with-license-error') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group create-ref-owner') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group create-ref-rejected-sender') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group create-ref-transitive-member') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group create-ref-transitive-member-of') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group create-thread') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the thread. Expected '
                   'value: json-string/json-file/@json-file.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether any of the posts within '
                   'this thread has at least one attachment.')
        c.argument('is_locked', arg_type=get_three_state_flag(), help='Indicates if the thread is locked.')
        c.argument('last_delivered_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('preview', type=str, help='A short summary from the body of the latest post in this conversation.')
        c.argument('topic', type=str, help='The topic of the conversation. This property can be set when the '
                   'conversation is created, but it cannot be updated.')
        c.argument('to_recipients', type=validate_file_or_dict, help='The To: recipients for the thread. Expected '
                   'value: json-string/json-file/@json-file.')
        c.argument('unique_senders', nargs='+', help='All the users that sent a message to this thread.')
        c.argument('posts', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group delete-conversation') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group delete-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group delete-permission-grant') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('resource_specific_permission_grant_id', type=str,
                   help='key: id of resourceSpecificPermissionGrant')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group delete-photo') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('profile_photo_id', type=str, help='key: id of profilePhoto')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group delete-ref-created-on-behalf-of') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group delete-thread') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group get-available-extension-property') as c:
        c.argument('is_synced_from_on_premises', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group get-by-id') as c:
        c.argument('ids', nargs='+', help='')
        c.argument('types', nargs='+', help='')

    with self.argument_context('groups group get-member-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group get-member-object') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('security_enabled_only', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group list-accepted-sender') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group list-conversation') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group list-member') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group list-member-of') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group list-member-with-license-error') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group list-owner') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group list-permission-grant') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group list-photo') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group list-ref-accepted-sender') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('groups group list-ref-member') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('groups group list-ref-member-of') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('groups group list-ref-member-with-license-error') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('groups group list-ref-owner') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('groups group list-ref-rejected-sender') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('groups group list-ref-transitive-member') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('groups group list-ref-transitive-member-of') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('groups group list-rejected-sender') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group list-thread') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group list-transitive-member') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group list-transitive-member-of') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group remove-favorite') as c:
        c.argument('group_id', type=str, help='key: id of group')

    with self.argument_context('groups group renew') as c:
        c.argument('group_id', type=str, help='key: id of group')

    with self.argument_context('groups group reset-unseen-count') as c:
        c.argument('group_id', type=str, help='key: id of group')

    with self.argument_context('groups group restore') as c:
        c.argument('group_id', type=str, help='key: id of group')

    with self.argument_context('groups group set-photo-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('profile_photo_id', type=str, help='key: id of profilePhoto')
        c.argument('data', help='New media content.')

    with self.argument_context('groups group set-ref-created-on-behalf-of') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group show-conversation') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group show-created-on-behalf-of') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group show-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group show-permission-grant') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('resource_specific_permission_grant_id', type=str,
                   help='key: id of resourceSpecificPermissionGrant')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group show-photo') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('profile_photo_id', type=str, help='key: id of profilePhoto')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group show-photo-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('profile_photo_id', type=str, help='key: id of profilePhoto')

    with self.argument_context('groups group show-ref-created-on-behalf-of') as c:
        c.argument('group_id', type=str, help='key: id of group')

    with self.argument_context('groups group show-thread') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group subscribe-by-mail') as c:
        c.argument('group_id', type=str, help='key: id of group')

    with self.argument_context('groups group unsubscribe-by-mail') as c:
        c.argument('group_id', type=str, help='key: id of group')

    with self.argument_context('groups group update-conversation') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether any of the posts within '
                   'this Conversation has at least one attachment.')
        c.argument('last_delivered_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('preview', type=str, help='A short summary from the body of the latest post in this converstaion.')
        c.argument('topic', type=str, help='The topic of the conversation. This property can be set when the '
                   'conversation is created, but it cannot be updated.')
        c.argument('unique_senders', nargs='+', help='All the users that sent a message to this Conversation.')
        c.argument('threads', type=validate_file_or_dict, help='A collection of all the conversation threads in the '
                   'conversation. A navigation property. Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('groups group update-permission-grant') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('resource_specific_permission_grant_id', type=str,
                   help='key: id of resourceSpecificPermissionGrant')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('deleted_date_time', help='')
        c.argument('client_app_id', type=str, help='ID of the service principal of the Azure AD app that has been '
                   'granted access. Read-only.')
        c.argument('client_id', type=str, help='ID of the Azure AD app that has been granted access. Read-only.')
        c.argument('permission', type=str, help='The name of the resource-specific permission. Read-only.')
        c.argument('permission_type', type=str, help='The type of permission. Possible values are: Application, '
                   'Delegated. Read-only.')
        c.argument('resource_app_id', type=str,
                   help='ID of the Azure AD app that is hosting the resource. Read-only.')

    with self.argument_context('groups group update-photo') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('profile_photo_id', type=str, help='key: id of profilePhoto')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('height', type=int, help='The height of the photo. Read-only.')
        c.argument('width', type=int, help='The width of the photo. Read-only.')

    with self.argument_context('groups group update-thread') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the thread. Expected '
                   'value: json-string/json-file/@json-file.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether any of the posts within '
                   'this thread has at least one attachment.')
        c.argument('is_locked', arg_type=get_three_state_flag(), help='Indicates if the thread is locked.')
        c.argument('last_delivered_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('preview', type=str, help='A short summary from the body of the latest post in this conversation.')
        c.argument('topic', type=str, help='The topic of the conversation. This property can be set when the '
                   'conversation is created, but it cannot be updated.')
        c.argument('to_recipients', type=validate_file_or_dict, help='The To: recipients for the thread. Expected '
                   'value: json-string/json-file/@json-file.')
        c.argument('unique_senders', nargs='+', help='All the users that sent a message to this thread.')
        c.argument('posts', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group validate-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('display_name', type=str, help='')
        c.argument('mail_nickname', type=str, help='')
        c.argument('on_behalf_of_user_id', help='')

    with self.argument_context('groups group-calendar-calendar-view-attachment create-upload-session') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('groups group-calendar-calendar-view-calendar allowed-calendar-sharing-role') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('user', type=str, help='Usage: User={User}')

    with self.argument_context('groups group-calendar-calendar-view-calendar get-schedule') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('groups group-calendar-calendar-view-instance accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group-calendar-calendar-view-instance cancel') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-calendar-view-instance decline') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar-calendar-view-instance delta') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('groups group-calendar-calendar-view-instance dismiss-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('groups group-calendar-calendar-view-instance forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-calendar-view-instance snooze-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('groups group-calendar-calendar-view-instance tentatively-accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar-calendar-view accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group-calendar-calendar-view cancel') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-calendar-view decline') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar-calendar-view delta') as c:
        c.argument('group_id', type=str, help='key: id of group')

    with self.argument_context('groups group-calendar-calendar-view dismiss-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('groups group-calendar-calendar-view forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-calendar-view snooze-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('groups group-calendar-calendar-view tentatively-accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar-event-attachment create-upload-session') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('groups group-calendar-event-calendar allowed-calendar-sharing-role') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('user', type=str, help='Usage: User={User}')

    with self.argument_context('groups group-calendar-event-calendar get-schedule') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('groups group-calendar-event-instance accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group-calendar-event-instance cancel') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-event-instance decline') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar-event-instance delta') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('groups group-calendar-event-instance dismiss-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('groups group-calendar-event-instance forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-event-instance snooze-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('groups group-calendar-event-instance tentatively-accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar-event accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group-calendar-event cancel') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-event decline') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar-event delta') as c:
        c.argument('group_id', type=str, help='key: id of group')

    with self.argument_context('groups group-calendar-event dismiss-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('groups group-calendar-event forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-event snooze-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('groups group-calendar-event tentatively-accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar allowed-calendar-sharing-role') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('user', type=str, help='Usage: User={User}')

    with self.argument_context('groups group-calendar get-schedule') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('groups group-calendar-view-attachment create-upload-session') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('groups group-calendar-view-calendar-calendar-view accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group-calendar-view-calendar-calendar-view cancel') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-view-calendar-calendar-view decline') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar-view-calendar-calendar-view delta') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('groups group-calendar-view-calendar-calendar-view dismiss-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('groups group-calendar-view-calendar-calendar-view forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-view-calendar-calendar-view snooze-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('groups group-calendar-view-calendar-calendar-view tentatively-accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar-view-calendar-event accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group-calendar-view-calendar-event cancel') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-view-calendar-event decline') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar-view-calendar-event delta') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('groups group-calendar-view-calendar-event dismiss-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('groups group-calendar-view-calendar-event forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-view-calendar-event snooze-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('groups group-calendar-view-calendar-event tentatively-accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar-view-calendar allowed-calendar-sharing-role') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('user', type=str, help='Usage: User={User}')

    with self.argument_context('groups group-calendar-view-calendar get-schedule') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('groups group-calendar-view-instance accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group-calendar-view-instance cancel') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-view-instance decline') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar-view-instance delta') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('groups group-calendar-view-instance dismiss-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('groups group-calendar-view-instance forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-view-instance snooze-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('groups group-calendar-view-instance tentatively-accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar-view accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group-calendar-view cancel') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-view decline') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-calendar-view delta') as c:
        c.argument('group_id', type=str, help='key: id of group')

    with self.argument_context('groups group-calendar-view dismiss-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('groups group-calendar-view forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-calendar-view snooze-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('groups group-calendar-view tentatively-accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-conversation create-thread') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the thread. Expected '
                   'value: json-string/json-file/@json-file.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether any of the posts within '
                   'this thread has at least one attachment.')
        c.argument('is_locked', arg_type=get_three_state_flag(), help='Indicates if the thread is locked.')
        c.argument('last_delivered_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('preview', type=str, help='A short summary from the body of the latest post in this conversation.')
        c.argument('topic', type=str, help='The topic of the conversation. This property can be set when the '
                   'conversation is created, but it cannot be updated.')
        c.argument('to_recipients', type=validate_file_or_dict, help='The To: recipients for the thread. Expected '
                   'value: json-string/json-file/@json-file.')
        c.argument('unique_senders', nargs='+', help='All the users that sent a message to this thread.')
        c.argument('posts', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group-conversation delete-thread') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-conversation list-thread') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-conversation show-thread') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-conversation update-thread') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('cc_recipients', type=validate_file_or_dict, help='The Cc: recipients for the thread. Expected '
                   'value: json-string/json-file/@json-file.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether any of the posts within '
                   'this thread has at least one attachment.')
        c.argument('is_locked', arg_type=get_three_state_flag(), help='Indicates if the thread is locked.')
        c.argument('last_delivered_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('preview', type=str, help='A short summary from the body of the latest post in this conversation.')
        c.argument('topic', type=str, help='The topic of the conversation. This property can be set when the '
                   'conversation is created, but it cannot be updated.')
        c.argument('to_recipients', type=validate_file_or_dict, help='The To: recipients for the thread. Expected '
                   'value: json-string/json-file/@json-file.')
        c.argument('unique_senders', nargs='+', help='All the users that sent a message to this thread.')
        c.argument('posts', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('groups group-conversation-thread create-post') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='+', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('body', action=AddBody, nargs='+', help='itemBody')
        c.argument('microsoft_graph_post_conversation_id', type=str, help='Unique ID of the conversation. Read-only.')
        c.argument('microsoft_graph_post_conversation_thread_id_conversation_thread_id', type=str, help='Unique ID of '
                   'the conversation thread. Read-only.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the post has at least '
                   'one attachment. This is a default property.')
        c.argument('new_participants', type=validate_file_or_dict, help='Conversation participants that were added to '
                   'the thread as part of this post. Expected value: json-string/json-file/@json-file.')
        c.argument('received_date_time', help='Specifies when the post was received. The DateTimeOffset type '
                   'represents date and time information using ISO 8601 format and is always in UTC time. For example, '
                   'midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The collection of fileAttachment, '
                   'itemAttachment, and referenceAttachment attachments for the post. Read-only. Nullable.')
        c.argument('extensions', action=AddGroupsConversationsThreadsExtensions, nargs='+', help='The collection of '
                   'open extensions defined for the post. Read-only. Nullable.')
        c.argument('in_reply_to', type=validate_file_or_dict, help='post Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('email_address', action=AddEmailAddress, nargs='+', help='emailAddress', arg_group='Sender')
        c.argument('microsoft_graph_email_address', action=AddEmailAddress, nargs='+', help='emailAddress',
                   arg_group='From')

    with self.argument_context('groups group-conversation-thread delete-post') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-conversation-thread list-post') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-conversation-thread reply') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post', type=validate_file_or_dict, help='post Expected value: json-string/json-file/@json-file.')

    with self.argument_context('groups group-conversation-thread show-post') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-conversation-thread update-post') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='+', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('body', action=AddBody, nargs='+', help='itemBody')
        c.argument('microsoft_graph_post_conversation_id', type=str, help='Unique ID of the conversation. Read-only.')
        c.argument('microsoft_graph_post_conversation_thread_id_conversation_thread_id', type=str, help='Unique ID of '
                   'the conversation thread. Read-only.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the post has at least '
                   'one attachment. This is a default property.')
        c.argument('new_participants', type=validate_file_or_dict, help='Conversation participants that were added to '
                   'the thread as part of this post. Expected value: json-string/json-file/@json-file.')
        c.argument('received_date_time', help='Specifies when the post was received. The DateTimeOffset type '
                   'represents date and time information using ISO 8601 format and is always in UTC time. For example, '
                   'midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The collection of fileAttachment, '
                   'itemAttachment, and referenceAttachment attachments for the post. Read-only. Nullable.')
        c.argument('extensions', action=AddGroupsConversationsThreadsExtensions, nargs='+', help='The collection of '
                   'open extensions defined for the post. Read-only. Nullable.')
        c.argument('in_reply_to', type=validate_file_or_dict, help='post Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('email_address', action=AddEmailAddress, nargs='+', help='emailAddress', arg_group='Sender')
        c.argument('microsoft_graph_email_address', action=AddEmailAddress, nargs='+', help='emailAddress',
                   arg_group='From')

    with self.argument_context('groups group-conversation-thread-post create-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type_', options_list=['--content-type'], type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('name', type=str, help='The display name of the attachment. This does not need to be the actual '
                   'file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('groups group-conversation-thread-post create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('groups group-conversation-thread-post create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('groups group-conversation-thread-post create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('groups group-conversation-thread-post delete-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-conversation-thread-post delete-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-conversation-thread-post delete-in-reply-to') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-conversation-thread-post delete-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-conversation-thread-post delete-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-conversation-thread-post forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('comment', type=str, help='')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')

    with self.argument_context('groups group-conversation-thread-post list-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-conversation-thread-post list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-conversation-thread-post list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-conversation-thread-post list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-conversation-thread-post reply') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('post', type=validate_file_or_dict, help='post Expected value: json-string/json-file/@json-file.')

    with self.argument_context('groups group-conversation-thread-post show-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-conversation-thread-post show-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-conversation-thread-post show-in-reply-to') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-conversation-thread-post show-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-conversation-thread-post show-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-conversation-thread-post update-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type_', options_list=['--content-type'], type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('name', type=str, help='The display name of the attachment. This does not need to be the actual '
                   'file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('groups group-conversation-thread-post update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('groups group-conversation-thread-post update-in-reply-to') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='+', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('body', action=AddBody, nargs='+', help='itemBody')
        c.argument('microsoft_graph_post_conversation_id', type=str, help='Unique ID of the conversation. Read-only.')
        c.argument('microsoft_graph_post_conversation_thread_id_conversation_thread_id', type=str, help='Unique ID of '
                   'the conversation thread. Read-only.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the post has at least '
                   'one attachment. This is a default property.')
        c.argument('new_participants', type=validate_file_or_dict, help='Conversation participants that were added to '
                   'the thread as part of this post. Expected value: json-string/json-file/@json-file.')
        c.argument('received_date_time', help='Specifies when the post was received. The DateTimeOffset type '
                   'represents date and time information using ISO 8601 format and is always in UTC time. For example, '
                   'midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The collection of fileAttachment, '
                   'itemAttachment, and referenceAttachment attachments for the post. Read-only. Nullable.')
        c.argument('extensions', action=AddGroupsConversationsThreadsExtensions, nargs='+', help='The collection of '
                   'open extensions defined for the post. Read-only. Nullable.')
        c.argument('in_reply_to', type=validate_file_or_dict, help='post Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('email_address', action=AddEmailAddress, nargs='+', help='emailAddress', arg_group='Sender')
        c.argument('microsoft_graph_email_address', action=AddEmailAddress, nargs='+', help='emailAddress',
                   arg_group='From')

    with self.argument_context('groups group-conversation-thread-post update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('groups group-conversation-thread-post update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('groups group-conversation-thread-post-attachment create-upload-session') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('groups group-conversation-thread-post-in-reply-to forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('comment', type=str, help='')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')

    with self.argument_context('groups group-conversation-thread-post-in-reply-to reply') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_id', type=str, help='key: id of conversation')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('post', type=validate_file_or_dict, help='post Expected value: json-string/json-file/@json-file.')

    with self.argument_context('groups group-event-attachment create-upload-session') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('groups group-event-calendar-calendar-view accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group-event-calendar-calendar-view cancel') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-event-calendar-calendar-view decline') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-event-calendar-calendar-view delta') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('groups group-event-calendar-calendar-view dismiss-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('groups group-event-calendar-calendar-view forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-event-calendar-calendar-view snooze-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('groups group-event-calendar-calendar-view tentatively-accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-event-calendar-event accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group-event-calendar-event cancel') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-event-calendar-event decline') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-event-calendar-event delta') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('groups group-event-calendar-event dismiss-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('groups group-event-calendar-event forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-event-calendar-event snooze-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('groups group-event-calendar-event tentatively-accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-event-calendar allowed-calendar-sharing-role') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('user', type=str, help='Usage: User={User}')

    with self.argument_context('groups group-event-calendar get-schedule') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('schedules', nargs='+', help='')
        c.argument('end_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('start_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')
        c.argument('availability_view_interval', type=int, help='')

    with self.argument_context('groups group-event-instance accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group-event-instance cancel') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-event-instance decline') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-event-instance delta') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('groups group-event-instance dismiss-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')

    with self.argument_context('groups group-event-instance forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-event-instance snooze-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('groups group-event-instance tentatively-accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('event_id1', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-event accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')

    with self.argument_context('groups group-event cancel') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-event decline') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-event delta') as c:
        c.argument('group_id', type=str, help='key: id of group')

    with self.argument_context('groups group-event dismiss-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')

    with self.argument_context('groups group-event forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')
        c.argument('comment', type=str, help='')

    with self.argument_context('groups group-event snooze-reminder') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('new_reminder_time', action=AddEndTime, nargs='+', help='dateTimeTimeZone')

    with self.argument_context('groups group-event tentatively-accept') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('event_id', type=str, help='key: id of event')
        c.argument('comment', type=str, help='')
        c.argument('send_response', arg_type=get_three_state_flag(), help='')
        c.argument('end', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')
        c.argument('start', action=AddEndTime, nargs='+', help='dateTimeTimeZone', arg_group='Proposed New Time')

    with self.argument_context('groups group-onenote-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook get-notebook-from-web-url') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('web_url', type=str, help='')

    with self.argument_context('groups group-onenote-notebook show-recent-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('include_personal_notebooks', arg_type=get_three_state_flag(), help='Usage: '
                   'includePersonalNotebooks={includePersonalNotebooks}')

    with self.argument_context('groups group-onenote-notebook-section-group-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-group-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-group-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-group-section-page copy-to-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-group-section-page onenote-patch-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddGroupsOnenoteNotebooksSectiongroupsSectionsPagesCommands, nargs='+', help='')

    with self.argument_context('groups group-onenote-notebook-section-group-section-page preview') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('groups group-onenote-notebook-section-group-section-page-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-group-section-page-parent-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-group-section-page-parent-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-group-section-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-page copy-to-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-page onenote-patch-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddGroupsOnenoteNotebooksSectionsPagesCommands, nargs='+', help='')

    with self.argument_context('groups group-onenote-notebook-section-page preview') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('groups group-onenote-notebook-section-page-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-page-parent-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-page-parent-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-parent-section-group-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-parent-section-group-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-notebook-section-parent-section-group-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('notebook_id', type=str, help='key: id of notebook')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page copy-to-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page onenote-patch-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddGroupsOnenotePagesCommands, nargs='+', help='')

    with self.argument_context('groups group-onenote-page preview') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('groups group-onenote-page-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-notebook-section-group-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-notebook-section-group-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-notebook-section-group-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-notebook-section-group-section-page copy-to-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-notebook-section-group-section-page onenote-patch-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddGroupsOnenotePagesParentnotebookSectiongroupsSectionsPagesCommands, nargs='+',
                   help='')

    with self.argument_context('groups group-onenote-page-parent-notebook-section-group-section-page preview') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('groups group-onenote-page-parent-notebook-section-group-section-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-notebook-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-notebook-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-notebook-section-page copy-to-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-notebook-section-page onenote-patch-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddGroupsOnenotePagesParentnotebookSectionsPagesCommands, nargs='+', help='')

    with self.argument_context('groups group-onenote-page-parent-notebook-section-page preview') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('groups group-onenote-page-parent-notebook-section-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-notebook-section-parent-section-group-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-notebook-section-parent-section-group-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-notebook-section-parent-section-group-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-section-page copy-to-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-section-page onenote-patch-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddGroupsOnenotePagesParentsectionPagesCommands, nargs='+', help='')

    with self.argument_context('groups group-onenote-page-parent-section-page preview') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_page_id1', type=str, help='key: id of onenotePage')

    with self.argument_context('groups group-onenote-page-parent-section-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-section-parent-notebook-section-group-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-section-parent-notebook-section-group-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-section-parent-notebook-section-group-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-section-parent-notebook-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-section-parent-notebook-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-section-parent-section-group-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-section-parent-section-group-parent-notebook-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-section-parent-section-group-parent-notebook-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-section-parent-section-group-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-page-parent-section-parent-section-group-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-parent-notebook-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-parent-notebook-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-parent-notebook-section-page copy-to-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-parent-notebook-section-page onenote-patch-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddGroupsOnenoteSectiongroupsParentnotebookSectionsPagesCommands, nargs='+',
                   help='')

    with self.argument_context('groups group-onenote-section-group-parent-notebook-section-page preview') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('groups group-onenote-section-group-parent-notebook-section-page-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-parent-notebook-section-page-parent-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-parent-notebook-section-page-parent-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-parent-notebook-section-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-section-page copy-to-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-section-page onenote-patch-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddGroupsOnenoteSectiongroupsSectionsPagesCommands, nargs='+', help='')

    with self.argument_context('groups group-onenote-section-group-section-page preview') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('groups group-onenote-section-group-section-page-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-section-page-parent-notebook-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-section-page-parent-notebook-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-section-page-parent-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-section-page-parent-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-section-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-section-parent-notebook-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-group-section-parent-notebook-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-page copy-to-section') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-page onenote-patch-content') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('commands', action=AddCommands, nargs='+', help='')

    with self.argument_context('groups group-onenote-section-page preview') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')

    with self.argument_context('groups group-onenote-section-page-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-page-parent-notebook-section-group-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-page-parent-notebook-section-group-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-page-parent-notebook-section-group-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-page-parent-notebook-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-page-parent-notebook-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-page-parent-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-page-parent-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_page_id', type=str, help='key: id of onenotePage')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-parent-notebook-section-group-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-parent-notebook-section-group-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-parent-notebook-section-group-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('section_group_id', type=str, help='key: id of sectionGroup')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-parent-notebook-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-parent-notebook-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-parent-section-group-parent-notebook copy-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('notebook_folder', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-parent-section-group-parent-notebook-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-parent-section-group-parent-notebook-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-parent-section-group-section copy-to-notebook') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-onenote-section-parent-section-group-section copy-to-section-group') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('onenote_section_id', type=str, help='key: id of onenoteSection')
        c.argument('onenote_section_id1', type=str, help='key: id of onenoteSection')
        c.argument('id_', options_list=['--id'], type=str, help='')
        c.argument('string_group_id', type=str, help='')
        c.argument('rename_as', type=str, help='')
        c.argument('site_collection_id', type=str, help='')
        c.argument('site_id', type=str, help='')

    with self.argument_context('groups group-thread create-post') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='+', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('body', action=AddBody, nargs='+', help='itemBody')
        c.argument('conversation_id', type=str, help='Unique ID of the conversation. Read-only.')
        c.argument('microsoft_graph_post_conversation_thread_id_conversation_thread_id', type=str, help='Unique ID of '
                   'the conversation thread. Read-only.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the post has at least '
                   'one attachment. This is a default property.')
        c.argument('new_participants', type=validate_file_or_dict, help='Conversation participants that were added to '
                   'the thread as part of this post. Expected value: json-string/json-file/@json-file.')
        c.argument('received_date_time', help='Specifies when the post was received. The DateTimeOffset type '
                   'represents date and time information using ISO 8601 format and is always in UTC time. For example, '
                   'midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The collection of fileAttachment, '
                   'itemAttachment, and referenceAttachment attachments for the post. Read-only. Nullable.')
        c.argument('extensions', action=AddGroupsConversationsThreadsExtensions, nargs='+', help='The collection of '
                   'open extensions defined for the post. Read-only. Nullable.')
        c.argument('in_reply_to', type=validate_file_or_dict, help='post Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('email_address', action=AddEmailAddress, nargs='+', help='emailAddress', arg_group='Sender')
        c.argument('microsoft_graph_email_address', action=AddEmailAddress, nargs='+', help='emailAddress',
                   arg_group='From')

    with self.argument_context('groups group-thread delete-post') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-thread list-post') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-thread reply') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post', type=validate_file_or_dict, help='post Expected value: json-string/json-file/@json-file.')

    with self.argument_context('groups group-thread show-post') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-thread update-post') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='+', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('body', action=AddBody, nargs='+', help='itemBody')
        c.argument('conversation_id', type=str, help='Unique ID of the conversation. Read-only.')
        c.argument('microsoft_graph_post_conversation_thread_id_conversation_thread_id', type=str, help='Unique ID of '
                   'the conversation thread. Read-only.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the post has at least '
                   'one attachment. This is a default property.')
        c.argument('new_participants', type=validate_file_or_dict, help='Conversation participants that were added to '
                   'the thread as part of this post. Expected value: json-string/json-file/@json-file.')
        c.argument('received_date_time', help='Specifies when the post was received. The DateTimeOffset type '
                   'represents date and time information using ISO 8601 format and is always in UTC time. For example, '
                   'midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The collection of fileAttachment, '
                   'itemAttachment, and referenceAttachment attachments for the post. Read-only. Nullable.')
        c.argument('extensions', action=AddGroupsConversationsThreadsExtensions, nargs='+', help='The collection of '
                   'open extensions defined for the post. Read-only. Nullable.')
        c.argument('in_reply_to', type=validate_file_or_dict, help='post Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('email_address', action=AddEmailAddress, nargs='+', help='emailAddress', arg_group='Sender')
        c.argument('microsoft_graph_email_address', action=AddEmailAddress, nargs='+', help='emailAddress',
                   arg_group='From')

    with self.argument_context('groups group-thread-post create-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type_', options_list=['--content-type'], type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('name', type=str, help='The display name of the attachment. This does not need to be the actual '
                   'file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('groups group-thread-post create-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('groups group-thread-post create-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('groups group-thread-post create-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('groups group-thread-post delete-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-thread-post delete-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-thread-post delete-in-reply-to') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-thread-post delete-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-thread-post delete-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('groups group-thread-post forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('comment', type=str, help='')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')

    with self.argument_context('groups group-thread-post list-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-thread-post list-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-thread-post list-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-thread-post list-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-thread-post reply') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('post', type=validate_file_or_dict, help='post Expected value: json-string/json-file/@json-file.')

    with self.argument_context('groups group-thread-post show-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-thread-post show-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-thread-post show-in-reply-to') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-thread-post show-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-thread-post show-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('groups group-thread-post update-attachment') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('attachment_id', type=str, help='key: id of attachment')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('content_type_', options_list=['--content-type'], type=str, help='The MIME type.')
        c.argument('is_inline', arg_type=get_three_state_flag(), help='true if the attachment is an inline attachment; '
                   'otherwise, false.')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('name', type=str, help='The display name of the attachment. This does not need to be the actual '
                   'file name.')
        c.argument('size', type=int, help='The length of the attachment in bytes.')

    with self.argument_context('groups group-thread-post update-extension') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('groups group-thread-post update-in-reply-to') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='+', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is '
                   '2014-01-01T00:00:00Z')
        c.argument('body', action=AddBody, nargs='+', help='itemBody')
        c.argument('conversation_id', type=str, help='Unique ID of the conversation. Read-only.')
        c.argument('microsoft_graph_post_conversation_thread_id_conversation_thread_id', type=str, help='Unique ID of '
                   'the conversation thread. Read-only.')
        c.argument('has_attachments', arg_type=get_three_state_flag(), help='Indicates whether the post has at least '
                   'one attachment. This is a default property.')
        c.argument('new_participants', type=validate_file_or_dict, help='Conversation participants that were added to '
                   'the thread as part of this post. Expected value: json-string/json-file/@json-file.')
        c.argument('received_date_time', help='Specifies when the post was received. The DateTimeOffset type '
                   'represents date and time information using ISO 8601 format and is always in UTC time. For example, '
                   'midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z')
        c.argument('attachments', action=AddAttachments, nargs='+', help='The collection of fileAttachment, '
                   'itemAttachment, and referenceAttachment attachments for the post. Read-only. Nullable.')
        c.argument('extensions', action=AddGroupsConversationsThreadsExtensions, nargs='+', help='The collection of '
                   'open extensions defined for the post. Read-only. Nullable.')
        c.argument('in_reply_to', type=validate_file_or_dict, help='post Expected value: '
                   'json-string/json-file/@json-file.')
        c.argument('multi_value_extended_properties', action=AddMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('single_value_extended_properties', action=AddSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the post. Read-only. Nullable.')
        c.argument('email_address', action=AddEmailAddress, nargs='+', help='emailAddress', arg_group='Sender')
        c.argument('microsoft_graph_email_address', action=AddEmailAddress, nargs='+', help='emailAddress',
                   arg_group='From')

    with self.argument_context('groups group-thread-post update-multi-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('groups group-thread-post update-single-value-extended-property') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('groups group-thread-post-attachment create-upload-session') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('attachment_item', action=AddAttachmentItem, nargs='+', help='attachmentItem')

    with self.argument_context('groups group-thread-post-in-reply-to forward') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('comment', type=str, help='')
        c.argument('to_recipients', type=validate_file_or_dict, help=' Expected value: json-string/json-file/@json-file'
                   '.')

    with self.argument_context('groups group-thread-post-in-reply-to reply') as c:
        c.argument('group_id', type=str, help='key: id of group')
        c.argument('conversation_thread_id', type=str, help='key: id of conversationThread')
        c.argument('post_id', type=str, help='key: id of post')
        c.argument('post', type=validate_file_or_dict, help='post Expected value: json-string/json-file/@json-file.')
