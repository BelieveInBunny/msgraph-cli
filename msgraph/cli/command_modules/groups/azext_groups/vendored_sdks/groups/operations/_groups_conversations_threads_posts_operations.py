# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class GroupsConversationsThreadsPostsOperations(object):
    """GroupsConversationsThreadsPostsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~groups.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_attachments(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum97"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum98"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfAttachment"]
        """Get attachments from groups.

        The collection of fileAttachment, itemAttachment, and referenceAttachment attachments for the
        post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~groups.models.Enum97]
        :param select: Select properties to be returned.
        :type select: list[str or ~groups.models.Enum98]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfAttachment or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~groups.models.CollectionOfAttachment]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfAttachment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_attachments.metadata['url']  # type: ignore
                path_format_arguments = {
                    'group-id': self._serialize.url("group_id", group_id, 'str'),
                    'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
                    'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
                    'post-id': self._serialize.url("post_id", post_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfAttachment', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_attachments.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/attachments'}  # type: ignore

    def create_attachments(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        body,  # type: "models.MicrosoftGraphAttachment"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAttachment"
        """Create new navigation property to attachments for groups.

        The collection of fileAttachment, itemAttachment, and referenceAttachment attachments for the
        post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param body: New navigation property.
        :type body: ~groups.models.MicrosoftGraphAttachment
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAttachment, or the result of cls(response)
        :rtype: ~groups.models.MicrosoftGraphAttachment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAttachment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_attachments.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAttachment')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAttachment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_attachments.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/attachments'}  # type: ignore

    def get_attachments(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        attachment_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum99"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphAttachment"
        """Get attachments from groups.

        The collection of fileAttachment, itemAttachment, and referenceAttachment attachments for the
        post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param attachment_id: key: id of attachment.
        :type attachment_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~groups.models.Enum99]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphAttachment, or the result of cls(response)
        :rtype: ~groups.models.MicrosoftGraphAttachment
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphAttachment"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_attachments.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
            'attachment-id': self._serialize.url("attachment_id", attachment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphAttachment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_attachments.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/attachments/{attachment-id}'}  # type: ignore

    def update_attachments(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        attachment_id,  # type: str
        body,  # type: "models.MicrosoftGraphAttachment"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property attachments in groups.

        The collection of fileAttachment, itemAttachment, and referenceAttachment attachments for the
        post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param attachment_id: key: id of attachment.
        :type attachment_id: str
        :param body: New navigation property values.
        :type body: ~groups.models.MicrosoftGraphAttachment
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_attachments.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
            'attachment-id': self._serialize.url("attachment_id", attachment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphAttachment')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_attachments.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/attachments/{attachment-id}'}  # type: ignore

    def delete_attachments(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        attachment_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property attachments for groups.

        The collection of fileAttachment, itemAttachment, and referenceAttachment attachments for the
        post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param attachment_id: key: id of attachment.
        :type attachment_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_attachments.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
            'attachment-id': self._serialize.url("attachment_id", attachment_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_attachments.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/attachments/{attachment-id}'}  # type: ignore

    def list_extensions(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum100"]]]
        select=None,  # type: Optional[List[str]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfExtension"]
        """Get extensions from groups.

        The collection of open extensions defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~groups.models.Enum100]
        :param select: Select properties to be returned.
        :type select: list[str]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfExtension or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~groups.models.CollectionOfExtension]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfExtension"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_extensions.metadata['url']  # type: ignore
                path_format_arguments = {
                    'group-id': self._serialize.url("group_id", group_id, 'str'),
                    'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
                    'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
                    'post-id': self._serialize.url("post_id", post_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfExtension', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_extensions.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/extensions'}  # type: ignore

    def create_extensions(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        body,  # type: "models.MicrosoftGraphExtension"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphExtension"
        """Create new navigation property to extensions for groups.

        The collection of open extensions defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param body: New navigation property.
        :type body: ~groups.models.MicrosoftGraphExtension
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphExtension, or the result of cls(response)
        :rtype: ~groups.models.MicrosoftGraphExtension
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphExtension"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_extensions.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphExtension')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphExtension', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_extensions.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/extensions'}  # type: ignore

    def get_extensions(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        extension_id,  # type: str
        select=None,  # type: Optional[List[str]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphExtension"
        """Get extensions from groups.

        The collection of open extensions defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param extension_id: key: id of extension.
        :type extension_id: str
        :param select: Select properties to be returned.
        :type select: list[str]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphExtension, or the result of cls(response)
        :rtype: ~groups.models.MicrosoftGraphExtension
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphExtension"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_extensions.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
            'extension-id': self._serialize.url("extension_id", extension_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphExtension', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_extensions.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/extensions/{extension-id}'}  # type: ignore

    def update_extensions(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        extension_id,  # type: str
        body,  # type: "models.MicrosoftGraphExtension"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property extensions in groups.

        The collection of open extensions defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param extension_id: key: id of extension.
        :type extension_id: str
        :param body: New navigation property values.
        :type body: ~groups.models.MicrosoftGraphExtension
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_extensions.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
            'extension-id': self._serialize.url("extension_id", extension_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphExtension')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_extensions.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/extensions/{extension-id}'}  # type: ignore

    def delete_extensions(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        extension_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property extensions for groups.

        The collection of open extensions defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param extension_id: key: id of extension.
        :type extension_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_extensions.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
            'extension-id': self._serialize.url("extension_id", extension_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_extensions.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/extensions/{extension-id}'}  # type: ignore

    def get_in_reply_to(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum101"]]]
        expand=None,  # type: Optional[List[Union[str, "models.Enum102"]]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphPost"
        """Get inReplyTo from groups.

        The earlier post that this post is replying to in the conversationThread. Read-only.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~groups.models.Enum101]
        :param expand: Expand related entities.
        :type expand: list[str or ~groups.models.Enum102]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphPost, or the result of cls(response)
        :rtype: ~groups.models.MicrosoftGraphPost
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphPost"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_in_reply_to.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphPost', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_in_reply_to.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/inReplyTo'}  # type: ignore

    def update_in_reply_to(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        body,  # type: "models.MicrosoftGraphPost"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property inReplyTo in groups.

        The earlier post that this post is replying to in the conversationThread. Read-only.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param body: New navigation property values.
        :type body: ~groups.models.MicrosoftGraphPost
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_in_reply_to.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphPost')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_in_reply_to.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/inReplyTo'}  # type: ignore

    def delete_in_reply_to(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property inReplyTo for groups.

        The earlier post that this post is replying to in the conversationThread. Read-only.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_in_reply_to.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_in_reply_to.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/inReplyTo'}  # type: ignore

    def forward(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        body,  # type: "models.Paths1Trbs0NGroupsGroupIdConversationsConversationIdThreadsConversationthreadIdPostsPostIdMicrosoftGraphForwardPostRequestbodyContentApplicationJsonSchema"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action forward.

        Invoke action forward.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param body: Action parameters.
        :type body: ~groups.models.Paths1Trbs0NGroupsGroupIdConversationsConversationIdThreadsConversationthreadIdPostsPostIdMicrosoftGraphForwardPostRequestbodyContentApplicationJsonSchema
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.forward.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'Paths1Trbs0NGroupsGroupIdConversationsConversationIdThreadsConversationthreadIdPostsPostIdMicrosoftGraphForwardPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    forward.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/microsoft.graph.forward'}  # type: ignore

    def reply(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        body,  # type: "models.Paths23Qv37GroupsGroupIdConversationsConversationIdThreadsConversationthreadIdPostsPostIdMicrosoftGraphReplyPostRequestbodyContentApplicationJsonSchema"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Invoke action reply.

        Invoke action reply.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param body: Action parameters.
        :type body: ~groups.models.Paths23Qv37GroupsGroupIdConversationsConversationIdThreadsConversationthreadIdPostsPostIdMicrosoftGraphReplyPostRequestbodyContentApplicationJsonSchema
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.reply.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'Paths23Qv37GroupsGroupIdConversationsConversationIdThreadsConversationthreadIdPostsPostIdMicrosoftGraphReplyPostRequestbodyContentApplicationJsonSchema')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    reply.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/microsoft.graph.reply'}  # type: ignore

    def list_multi_value_extended_properties(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum103"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum104"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfMultiValueLegacyExtendedProperty"]
        """Get multiValueExtendedProperties from groups.

        The collection of multi-value extended properties defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~groups.models.Enum103]
        :param select: Select properties to be returned.
        :type select: list[str or ~groups.models.Enum104]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfMultiValueLegacyExtendedProperty or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~groups.models.CollectionOfMultiValueLegacyExtendedProperty]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfMultiValueLegacyExtendedProperty"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_multi_value_extended_properties.metadata['url']  # type: ignore
                path_format_arguments = {
                    'group-id': self._serialize.url("group_id", group_id, 'str'),
                    'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
                    'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
                    'post-id': self._serialize.url("post_id", post_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfMultiValueLegacyExtendedProperty', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_multi_value_extended_properties.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/multiValueExtendedProperties'}  # type: ignore

    def create_multi_value_extended_properties(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        body,  # type: "models.MicrosoftGraphMultiValueLegacyExtendedProperty"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMultiValueLegacyExtendedProperty"
        """Create new navigation property to multiValueExtendedProperties for groups.

        The collection of multi-value extended properties defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param body: New navigation property.
        :type body: ~groups.models.MicrosoftGraphMultiValueLegacyExtendedProperty
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMultiValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~groups.models.MicrosoftGraphMultiValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_multi_value_extended_properties.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphMultiValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMultiValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_multi_value_extended_properties.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/multiValueExtendedProperties'}  # type: ignore

    def get_multi_value_extended_properties(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        multi_value_legacy_extended_property_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum105"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphMultiValueLegacyExtendedProperty"
        """Get multiValueExtendedProperties from groups.

        The collection of multi-value extended properties defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param multi_value_legacy_extended_property_id: key: id of multiValueLegacyExtendedProperty.
        :type multi_value_legacy_extended_property_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~groups.models.Enum105]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphMultiValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~groups.models.MicrosoftGraphMultiValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphMultiValueLegacyExtendedProperty"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_multi_value_extended_properties.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
            'multiValueLegacyExtendedProperty-id': self._serialize.url("multi_value_legacy_extended_property_id", multi_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphMultiValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_multi_value_extended_properties.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}'}  # type: ignore

    def update_multi_value_extended_properties(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        multi_value_legacy_extended_property_id,  # type: str
        body,  # type: "models.MicrosoftGraphMultiValueLegacyExtendedProperty"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property multiValueExtendedProperties in groups.

        The collection of multi-value extended properties defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param multi_value_legacy_extended_property_id: key: id of multiValueLegacyExtendedProperty.
        :type multi_value_legacy_extended_property_id: str
        :param body: New navigation property values.
        :type body: ~groups.models.MicrosoftGraphMultiValueLegacyExtendedProperty
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_multi_value_extended_properties.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
            'multiValueLegacyExtendedProperty-id': self._serialize.url("multi_value_legacy_extended_property_id", multi_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphMultiValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_multi_value_extended_properties.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}'}  # type: ignore

    def delete_multi_value_extended_properties(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        multi_value_legacy_extended_property_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property multiValueExtendedProperties for groups.

        The collection of multi-value extended properties defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param multi_value_legacy_extended_property_id: key: id of multiValueLegacyExtendedProperty.
        :type multi_value_legacy_extended_property_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_multi_value_extended_properties.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
            'multiValueLegacyExtendedProperty-id': self._serialize.url("multi_value_legacy_extended_property_id", multi_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_multi_value_extended_properties.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}'}  # type: ignore

    def list_single_value_extended_properties(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        orderby=None,  # type: Optional[List[Union[str, "models.Enum106"]]]
        select=None,  # type: Optional[List[Union[str, "models.Enum107"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.CollectionOfSingleValueLegacyExtendedProperty"]
        """Get singleValueExtendedProperties from groups.

        The collection of single-value extended properties defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param orderby: Order items by property values.
        :type orderby: list[str or ~groups.models.Enum106]
        :param select: Select properties to be returned.
        :type select: list[str or ~groups.models.Enum107]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CollectionOfSingleValueLegacyExtendedProperty or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~groups.models.CollectionOfSingleValueLegacyExtendedProperty]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CollectionOfSingleValueLegacyExtendedProperty"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_single_value_extended_properties.metadata['url']  # type: ignore
                path_format_arguments = {
                    'group-id': self._serialize.url("group_id", group_id, 'str'),
                    'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
                    'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
                    'post-id': self._serialize.url("post_id", post_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if self._config.top is not None:
                    query_parameters['$top'] = self._serialize.query("self._config.top", self._config.top, 'int', minimum=0)
                if self._config.skip is not None:
                    query_parameters['$skip'] = self._serialize.query("self._config.skip", self._config.skip, 'int', minimum=0)
                if self._config.search is not None:
                    query_parameters['$search'] = self._serialize.query("self._config.search", self._config.search, 'str')
                if self._config.filter is not None:
                    query_parameters['$filter'] = self._serialize.query("self._config.filter", self._config.filter, 'str')
                if self._config.count is not None:
                    query_parameters['$count'] = self._serialize.query("self._config.count", self._config.count, 'bool')
                if orderby is not None:
                    query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',')
                if select is not None:
                    query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CollectionOfSingleValueLegacyExtendedProperty', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.OdataError, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_single_value_extended_properties.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/singleValueExtendedProperties'}  # type: ignore

    def create_single_value_extended_properties(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        body,  # type: "models.MicrosoftGraphSingleValueLegacyExtendedProperty"
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSingleValueLegacyExtendedProperty"
        """Create new navigation property to singleValueExtendedProperties for groups.

        The collection of single-value extended properties defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param body: New navigation property.
        :type body: ~groups.models.MicrosoftGraphSingleValueLegacyExtendedProperty
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSingleValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~groups.models.MicrosoftGraphSingleValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_single_value_extended_properties.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphSingleValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSingleValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_single_value_extended_properties.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/singleValueExtendedProperties'}  # type: ignore

    def get_single_value_extended_properties(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        single_value_legacy_extended_property_id,  # type: str
        select=None,  # type: Optional[List[Union[str, "models.Enum108"]]]
        expand=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MicrosoftGraphSingleValueLegacyExtendedProperty"
        """Get singleValueExtendedProperties from groups.

        The collection of single-value extended properties defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param single_value_legacy_extended_property_id: key: id of singleValueLegacyExtendedProperty.
        :type single_value_legacy_extended_property_id: str
        :param select: Select properties to be returned.
        :type select: list[str or ~groups.models.Enum108]
        :param expand: Expand related entities.
        :type expand: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MicrosoftGraphSingleValueLegacyExtendedProperty, or the result of cls(response)
        :rtype: ~groups.models.MicrosoftGraphSingleValueLegacyExtendedProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MicrosoftGraphSingleValueLegacyExtendedProperty"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_single_value_extended_properties.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
            'singleValueLegacyExtendedProperty-id': self._serialize.url("single_value_legacy_extended_property_id", single_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, '[str]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MicrosoftGraphSingleValueLegacyExtendedProperty', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_single_value_extended_properties.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}'}  # type: ignore

    def update_single_value_extended_properties(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        single_value_legacy_extended_property_id,  # type: str
        body,  # type: "models.MicrosoftGraphSingleValueLegacyExtendedProperty"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update the navigation property singleValueExtendedProperties in groups.

        The collection of single-value extended properties defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param single_value_legacy_extended_property_id: key: id of singleValueLegacyExtendedProperty.
        :type single_value_legacy_extended_property_id: str
        :param body: New navigation property values.
        :type body: ~groups.models.MicrosoftGraphSingleValueLegacyExtendedProperty
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_single_value_extended_properties.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
            'singleValueLegacyExtendedProperty-id': self._serialize.url("single_value_legacy_extended_property_id", single_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(body, 'MicrosoftGraphSingleValueLegacyExtendedProperty')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    update_single_value_extended_properties.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}'}  # type: ignore

    def delete_single_value_extended_properties(
        self,
        group_id,  # type: str
        conversation_id,  # type: str
        conversation_thread_id,  # type: str
        post_id,  # type: str
        single_value_legacy_extended_property_id,  # type: str
        if_match=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Delete navigation property singleValueExtendedProperties for groups.

        The collection of single-value extended properties defined for the post. Read-only. Nullable.

        :param group_id: key: id of group.
        :type group_id: str
        :param conversation_id: key: id of conversation.
        :type conversation_id: str
        :param conversation_thread_id: key: id of conversationThread.
        :type conversation_thread_id: str
        :param post_id: key: id of post.
        :type post_id: str
        :param single_value_legacy_extended_property_id: key: id of singleValueLegacyExtendedProperty.
        :type single_value_legacy_extended_property_id: str
        :param if_match: ETag.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_single_value_extended_properties.metadata['url']  # type: ignore
        path_format_arguments = {
            'group-id': self._serialize.url("group_id", group_id, 'str'),
            'conversation-id': self._serialize.url("conversation_id", conversation_id, 'str'),
            'conversationThread-id': self._serialize.url("conversation_thread_id", conversation_thread_id, 'str'),
            'post-id': self._serialize.url("post_id", post_id, 'str'),
            'singleValueLegacyExtendedProperty-id': self._serialize.url("single_value_legacy_extended_property_id", single_value_legacy_extended_property_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.OdataError, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_single_value_extended_properties.metadata = {'url': '/groups/{group-id}/conversations/{conversation-id}/threads/{conversationThread-id}/posts/{post-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}'}  # type: ignore
