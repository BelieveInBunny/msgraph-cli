# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from azure.cli.core.commands.validators import validate_file_or_dict
from azext_education.action import (
    AddTerm,
    AddApplication,
    AddMailingAddress,
    AddAssignedLicenses,
    AddAssignedPlans,
    AddPasswordProfile,
    AddProvisionedPlans,
    AddStudent,
    AddTeacher
)


def load_arguments(self, _):

    with self.argument_context('education education-root show-education-root') as c:
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-root update-education-root') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('classes', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('me', type=validate_file_or_dict, help='educationUser Expected value: json-string/@json-file.')
        c.argument('schools', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('users', type=validate_file_or_dict, help='Read-only. Nullable. Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education create-class') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('class_code', type=str, help='Class code used by the school to identify the class.')
        c.argument('description', type=str, help='Description of the class.')
        c.argument('display_name', type=str, help='Name of the class.')
        c.argument('external_id', type=str, help='ID of the class from the syncing system.')
        c.argument('external_name', type=str, help='Name of the class in the syncing system.')
        c.argument('external_source', arg_type=get_enum_type(['sis', 'manual', 'unknownFutureValue']), help='')
        c.argument('mail_nickname', type=str, help='Mail name for sending email to all members, if this is enabled.')
        c.argument('term', action=AddTerm, nargs='+', help='educationTerm')
        c.argument('group', type=validate_file_or_dict, help='Represents an Azure Active Directory object. The '
                   'directoryObject type is the base type for many other directory entity types. Expected value: '
                   'json-string/@json-file.')
        c.argument('members', type=validate_file_or_dict, help='All users in the class. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('schools', type=validate_file_or_dict, help='All schools that this class is associated with. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('teachers', type=validate_file_or_dict, help='All teachers in the class. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('education create-school') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('description', type=str, help='Organization description.')
        c.argument('display_name', type=str, help='Organization display name.')
        c.argument('external_source', arg_type=get_enum_type(['sis', 'manual', 'unknownFutureValue']), help='')
        c.argument('address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('external_id', type=str, help='ID of school in syncing system.')
        c.argument('external_principal_id', type=str, help='ID of principal in syncing system.')
        c.argument('fax', type=str, help='')
        c.argument('highest_grade', type=str, help='Highest grade taught.')
        c.argument('lowest_grade', type=str, help='Lowest grade taught.')
        c.argument('phone', type=str, help='Phone number of school.')
        c.argument('principal_email', type=str, help='Email address of the principal.')
        c.argument('principal_name', type=str, help='Name of the principal.')
        c.argument('school_number', type=str, help='School Number.')
        c.argument('classes', type=validate_file_or_dict, help='Classes taught at the school. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('users', type=validate_file_or_dict, help='Users in the school. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('education create-user') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_enabled', arg_type=get_three_state_flag(), help='True if the account is enabled; '
                   'otherwise, false. This property is required when a user is created. Supports $filter.')
        c.argument('assigned_licenses', action=AddAssignedLicenses, nargs='+', help='The licenses that are assigned to '
                   'the user. Not nullable.')
        c.argument('assigned_plans', action=AddAssignedPlans, nargs='+', help='The plans that are assigned to the '
                   'user. Read-only. Not nullable.')
        c.argument('business_phones', nargs='+', help='The telephone numbers for the user. Note: Although this is a '
                   'string collection, only one number can be set for this property.')
        c.argument('department', type=str, help='The name for the department in which the user works. Supports '
                   '$filter.')
        c.argument('display_name', type=str, help='The name displayed in the address book for the user. This is '
                   'usually the combination of the user\'s first name, middle initial, and last name. This property is '
                   'required when a user is created and it cannot be cleared during updates. Supports $filter and '
                   '$orderby.')
        c.argument('external_source', arg_type=get_enum_type(['sis', 'manual', 'unknownFutureValue']), help='')
        c.argument('given_name', type=str, help='The given name (first name) of the user. Supports $filter.')
        c.argument('mail', type=str, help='The SMTP address for the user; for example, \'jeff@contoso.onmicrosoft.com\''
                   '. Read-Only. Supports $filter.')
        c.argument('mailing_address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('mail_nickname', type=str, help='The mail alias for the user. This property must be specified when '
                   'a user is created. Supports $filter.')
        c.argument('middle_name', type=str, help='The middle name of user.')
        c.argument('mobile_phone', type=str, help='The primary cellular telephone number for the user.')
        c.argument('office_location', type=str, help='')
        c.argument('password_policies', type=str, help='Specifies password policies for the user. This value is an '
                   'enumeration with one possible value being \'DisableStrongPassword\', which allows weaker passwords '
                   'than the default policy to be specified. \'DisablePasswordExpiration\' can also be specified. The '
                   'two can be specified together; for example: \'DisablePasswordExpiration, DisableStrongPassword\'.')
        c.argument('password_profile', action=AddPasswordProfile, nargs='+', help='passwordProfile')
        c.argument('preferred_language', type=str, help='The preferred language for the user. Should follow ISO 639-1 '
                   'Code; for example, \'en-US\'.')
        c.argument('primary_role', arg_type=get_enum_type(['student', 'teacher', 'none', 'unknownFutureValue']),
                   help='')
        c.argument('provisioned_plans', action=AddProvisionedPlans, nargs='+', help='The plans that are provisioned '
                   'for the user. Read-only. Not nullable.')
        c.argument('refresh_tokens_valid_from_date_time', help='')
        c.argument('residence_address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('show_in_address_list', arg_type=get_three_state_flag(), help='')
        c.argument('student', action=AddStudent, nargs='+', help='educationStudent')
        c.argument('surname', type=str, help='The user\'s surname (family name or last name). Supports $filter.')
        c.argument('teacher', action=AddTeacher, nargs='+', help='educationTeacher')
        c.argument('usage_location', type=str, help='A two-letter country code (ISO standard 3166). Required for users '
                   'who will be assigned licenses due to a legal requirement to check for availability of services in '
                   'countries or regions. Examples include: \'US\', \'JP\', and \'GB\'. Not nullable. Supports '
                   '$filter.')
        c.argument('user_principal_name', type=str, help='The user principal name (UPN) of the user. The UPN is an '
                   'Internet-style login name for the user based on the Internet standard RFC 822. By convention, this '
                   'should map to the user\'s email name. The general format is alias@domain, where domain must be '
                   'present in the tenant\'s collection of verified domains. This property is required when a user is '
                   'created. The verified domains for the tenant can be accessed from the verifiedDomains property of '
                   'organization. Supports $filter and $orderby.')
        c.argument('user_type', type=str, help='A string value that can be used to classify user types in your '
                   'directory, such as \'Member\' and \'Guest\'. Supports $filter.')
        c.argument('classes', type=validate_file_or_dict, help='Classes to which the user belongs. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('schools', type=validate_file_or_dict, help='Schools to which the user belongs. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('user', type=validate_file_or_dict, help='Represents an Azure Active Directory user object. '
                   'Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')

    with self.argument_context('education delete-class') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education delete-me') as c:
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education delete-school') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education delete-user') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education list-class') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education list-school') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education list-user') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education show-class') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education show-me') as c:
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education show-school') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education show-user') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education update-class') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('class_code', type=str, help='Class code used by the school to identify the class.')
        c.argument('description', type=str, help='Description of the class.')
        c.argument('display_name', type=str, help='Name of the class.')
        c.argument('external_id', type=str, help='ID of the class from the syncing system.')
        c.argument('external_name', type=str, help='Name of the class in the syncing system.')
        c.argument('external_source', arg_type=get_enum_type(['sis', 'manual', 'unknownFutureValue']), help='')
        c.argument('mail_nickname', type=str, help='Mail name for sending email to all members, if this is enabled.')
        c.argument('term', action=AddTerm, nargs='+', help='educationTerm')
        c.argument('group', type=validate_file_or_dict, help='Represents an Azure Active Directory object. The '
                   'directoryObject type is the base type for many other directory entity types. Expected value: '
                   'json-string/@json-file.')
        c.argument('members', type=validate_file_or_dict, help='All users in the class. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('schools', type=validate_file_or_dict, help='All schools that this class is associated with. '
                   'Nullable. Expected value: json-string/@json-file.')
        c.argument('teachers', type=validate_file_or_dict, help='All teachers in the class. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('education update-me') as c:
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_enabled', arg_type=get_three_state_flag(), help='True if the account is enabled; '
                   'otherwise, false. This property is required when a user is created. Supports $filter.')
        c.argument('assigned_licenses', action=AddAssignedLicenses, nargs='+', help='The licenses that are assigned to '
                   'the user. Not nullable.')
        c.argument('assigned_plans', action=AddAssignedPlans, nargs='+', help='The plans that are assigned to the '
                   'user. Read-only. Not nullable.')
        c.argument('business_phones', nargs='+', help='The telephone numbers for the user. Note: Although this is a '
                   'string collection, only one number can be set for this property.')
        c.argument('department', type=str, help='The name for the department in which the user works. Supports '
                   '$filter.')
        c.argument('display_name', type=str, help='The name displayed in the address book for the user. This is '
                   'usually the combination of the user\'s first name, middle initial, and last name. This property is '
                   'required when a user is created and it cannot be cleared during updates. Supports $filter and '
                   '$orderby.')
        c.argument('external_source', arg_type=get_enum_type(['sis', 'manual', 'unknownFutureValue']), help='')
        c.argument('given_name', type=str, help='The given name (first name) of the user. Supports $filter.')
        c.argument('mail', type=str, help='The SMTP address for the user; for example, \'jeff@contoso.onmicrosoft.com\''
                   '. Read-Only. Supports $filter.')
        c.argument('mailing_address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('mail_nickname', type=str, help='The mail alias for the user. This property must be specified when '
                   'a user is created. Supports $filter.')
        c.argument('middle_name', type=str, help='The middle name of user.')
        c.argument('mobile_phone', type=str, help='The primary cellular telephone number for the user.')
        c.argument('office_location', type=str, help='')
        c.argument('password_policies', type=str, help='Specifies password policies for the user. This value is an '
                   'enumeration with one possible value being \'DisableStrongPassword\', which allows weaker passwords '
                   'than the default policy to be specified. \'DisablePasswordExpiration\' can also be specified. The '
                   'two can be specified together; for example: \'DisablePasswordExpiration, DisableStrongPassword\'.')
        c.argument('password_profile', action=AddPasswordProfile, nargs='+', help='passwordProfile')
        c.argument('preferred_language', type=str, help='The preferred language for the user. Should follow ISO 639-1 '
                   'Code; for example, \'en-US\'.')
        c.argument('primary_role', arg_type=get_enum_type(['student', 'teacher', 'none', 'unknownFutureValue']),
                   help='')
        c.argument('provisioned_plans', action=AddProvisionedPlans, nargs='+', help='The plans that are provisioned '
                   'for the user. Read-only. Not nullable.')
        c.argument('refresh_tokens_valid_from_date_time', help='')
        c.argument('residence_address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('show_in_address_list', arg_type=get_three_state_flag(), help='')
        c.argument('student', action=AddStudent, nargs='+', help='educationStudent')
        c.argument('surname', type=str, help='The user\'s surname (family name or last name). Supports $filter.')
        c.argument('teacher', action=AddTeacher, nargs='+', help='educationTeacher')
        c.argument('usage_location', type=str, help='A two-letter country code (ISO standard 3166). Required for users '
                   'who will be assigned licenses due to a legal requirement to check for availability of services in '
                   'countries or regions. Examples include: \'US\', \'JP\', and \'GB\'. Not nullable. Supports '
                   '$filter.')
        c.argument('user_principal_name', type=str, help='The user principal name (UPN) of the user. The UPN is an '
                   'Internet-style login name for the user based on the Internet standard RFC 822. By convention, this '
                   'should map to the user\'s email name. The general format is alias@domain, where domain must be '
                   'present in the tenant\'s collection of verified domains. This property is required when a user is '
                   'created. The verified domains for the tenant can be accessed from the verifiedDomains property of '
                   'organization. Supports $filter and $orderby.')
        c.argument('user_type', type=str, help='A string value that can be used to classify user types in your '
                   'directory, such as \'Member\' and \'Guest\'. Supports $filter.')
        c.argument('classes', type=validate_file_or_dict, help='Classes to which the user belongs. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('schools', type=validate_file_or_dict, help='Schools to which the user belongs. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('user', type=validate_file_or_dict, help='Represents an Azure Active Directory user object. '
                   'Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')

    with self.argument_context('education update-school') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('description', type=str, help='Organization description.')
        c.argument('display_name', type=str, help='Organization display name.')
        c.argument('external_source', arg_type=get_enum_type(['sis', 'manual', 'unknownFutureValue']), help='')
        c.argument('address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('external_id', type=str, help='ID of school in syncing system.')
        c.argument('external_principal_id', type=str, help='ID of principal in syncing system.')
        c.argument('fax', type=str, help='')
        c.argument('highest_grade', type=str, help='Highest grade taught.')
        c.argument('lowest_grade', type=str, help='Lowest grade taught.')
        c.argument('phone', type=str, help='Phone number of school.')
        c.argument('principal_email', type=str, help='Email address of the principal.')
        c.argument('principal_name', type=str, help='Name of the principal.')
        c.argument('school_number', type=str, help='School Number.')
        c.argument('classes', type=validate_file_or_dict, help='Classes taught at the school. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('users', type=validate_file_or_dict, help='Users in the school. Nullable. Expected value: '
                   'json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('user', action=AddApplication, nargs='+', help='identity', arg_group='Created By')

    with self.argument_context('education update-user') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('account_enabled', arg_type=get_three_state_flag(), help='True if the account is enabled; '
                   'otherwise, false. This property is required when a user is created. Supports $filter.')
        c.argument('assigned_licenses', action=AddAssignedLicenses, nargs='+', help='The licenses that are assigned to '
                   'the user. Not nullable.')
        c.argument('assigned_plans', action=AddAssignedPlans, nargs='+', help='The plans that are assigned to the '
                   'user. Read-only. Not nullable.')
        c.argument('business_phones', nargs='+', help='The telephone numbers for the user. Note: Although this is a '
                   'string collection, only one number can be set for this property.')
        c.argument('department', type=str, help='The name for the department in which the user works. Supports '
                   '$filter.')
        c.argument('display_name', type=str, help='The name displayed in the address book for the user. This is '
                   'usually the combination of the user\'s first name, middle initial, and last name. This property is '
                   'required when a user is created and it cannot be cleared during updates. Supports $filter and '
                   '$orderby.')
        c.argument('external_source', arg_type=get_enum_type(['sis', 'manual', 'unknownFutureValue']), help='')
        c.argument('given_name', type=str, help='The given name (first name) of the user. Supports $filter.')
        c.argument('mail', type=str, help='The SMTP address for the user; for example, \'jeff@contoso.onmicrosoft.com\''
                   '. Read-Only. Supports $filter.')
        c.argument('mailing_address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('mail_nickname', type=str, help='The mail alias for the user. This property must be specified when '
                   'a user is created. Supports $filter.')
        c.argument('middle_name', type=str, help='The middle name of user.')
        c.argument('mobile_phone', type=str, help='The primary cellular telephone number for the user.')
        c.argument('office_location', type=str, help='')
        c.argument('password_policies', type=str, help='Specifies password policies for the user. This value is an '
                   'enumeration with one possible value being \'DisableStrongPassword\', which allows weaker passwords '
                   'than the default policy to be specified. \'DisablePasswordExpiration\' can also be specified. The '
                   'two can be specified together; for example: \'DisablePasswordExpiration, DisableStrongPassword\'.')
        c.argument('password_profile', action=AddPasswordProfile, nargs='+', help='passwordProfile')
        c.argument('preferred_language', type=str, help='The preferred language for the user. Should follow ISO 639-1 '
                   'Code; for example, \'en-US\'.')
        c.argument('primary_role', arg_type=get_enum_type(['student', 'teacher', 'none', 'unknownFutureValue']),
                   help='')
        c.argument('provisioned_plans', action=AddProvisionedPlans, nargs='+', help='The plans that are provisioned '
                   'for the user. Read-only. Not nullable.')
        c.argument('refresh_tokens_valid_from_date_time', help='')
        c.argument('residence_address', action=AddMailingAddress, nargs='+', help='physicalAddress')
        c.argument('show_in_address_list', arg_type=get_three_state_flag(), help='')
        c.argument('student', action=AddStudent, nargs='+', help='educationStudent')
        c.argument('surname', type=str, help='The user\'s surname (family name or last name). Supports $filter.')
        c.argument('teacher', action=AddTeacher, nargs='+', help='educationTeacher')
        c.argument('usage_location', type=str, help='A two-letter country code (ISO standard 3166). Required for users '
                   'who will be assigned licenses due to a legal requirement to check for availability of services in '
                   'countries or regions. Examples include: \'US\', \'JP\', and \'GB\'. Not nullable. Supports '
                   '$filter.')
        c.argument('user_principal_name', type=str, help='The user principal name (UPN) of the user. The UPN is an '
                   'Internet-style login name for the user based on the Internet standard RFC 822. By convention, this '
                   'should map to the user\'s email name. The general format is alias@domain, where domain must be '
                   'present in the tenant\'s collection of verified domains. This property is required when a user is '
                   'created. The verified domains for the tenant can be accessed from the verifiedDomains property of '
                   'organization. Supports $filter and $orderby.')
        c.argument('user_type', type=str, help='A string value that can be used to classify user types in your '
                   'directory, such as \'Member\' and \'Guest\'. Supports $filter.')
        c.argument('classes', type=validate_file_or_dict, help='Classes to which the user belongs. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('schools', type=validate_file_or_dict, help='Schools to which the user belongs. Nullable. Expected '
                   'value: json-string/@json-file.')
        c.argument('user', type=validate_file_or_dict, help='Represents an Azure Active Directory user object. '
                   'Expected value: json-string/@json-file.')
        c.argument('application', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('device', action=AddApplication, nargs='+', help='identity', arg_group='Created By')
        c.argument('microsoft_graph_identity_user', action=AddApplication, nargs='+', help='identity',
                   arg_group='Created By')

    with self.argument_context('education education-class create-ref-member') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-class create-ref-school') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-class create-ref-teacher') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-class delete-ref-group') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-class list-member') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class list-ref-member') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-class list-ref-school') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-class list-ref-teacher') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-class list-school') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class list-teacher') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class set-ref-group') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-class show-group') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-class show-ref-group') as c:
        c.argument('education_class_id', type=str, help='key: id of educationClass')

    with self.argument_context('education education-me create-ref-class') as c:
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-me create-ref-school') as c:
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-me delete-ref-user') as c:
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-me list-class') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me list-ref-class') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-me list-ref-school') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-me list-school') as c:
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-me set-ref-user') as c:
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-me show-user') as c:
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-school create-ref-class') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-school create-ref-user') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-school list-class') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-school list-ref-class') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-school list-ref-user') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-school list-user') as c:
        c.argument('education_school_id', type=str, help='key: id of educationSchool')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user create-ref-class') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-user create-ref-school') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref value Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-user delete-ref-user') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('education education-user list-class') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user list-ref-class') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-user list-ref-school') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('orderby', nargs='+', help='Order items by property values')

    with self.argument_context('education education-user list-school') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('education education-user set-ref-user') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('body', type=validate_file_or_dict, help='New navigation property ref values Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('education education-user show-ref-user') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')

    with self.argument_context('education education-user show-user') as c:
        c.argument('education_user_id', type=str, help='key: id of educationUser')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')
