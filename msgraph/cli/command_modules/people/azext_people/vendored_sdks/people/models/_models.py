# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CollectionOfPerson(msrest.serialization.Model):
    """Collection of person.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.MicrosoftGraphPerson]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphPerson]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfPerson, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfSharedInsight(msrest.serialization.Model):
    """Collection of sharedInsight.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.MicrosoftGraphSharedInsight]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphSharedInsight]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfSharedInsight, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfTrending(msrest.serialization.Model):
    """Collection of trending.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.MicrosoftGraphTrending]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphTrending]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfTrending, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class CollectionOfUsedInsight(msrest.serialization.Model):
    """Collection of usedInsight.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param value:
    :type value: list[~people.models.MicrosoftGraphUsedInsight]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': '[MicrosoftGraphUsedInsight]'},
        'odata_next_link': {'key': '@odata\\.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CollectionOfUsedInsight, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)
        self.odata_next_link = kwargs.get('odata_next_link', None)


class MicrosoftGraphEntity(msrest.serialization.Model):
    """entity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: Read-only.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphEntity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)


class MicrosoftGraphInsightIdentity(msrest.serialization.Model):
    """insightIdentity.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: The email address of the user who shared the item.
    :type address: str
    :param display_name: The display name of the user who shared the item.
    :type display_name: str
    :param id: The id of the user who shared the item.
    :type id: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphInsightIdentity, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.display_name = kwargs.get('display_name', None)
        self.id = kwargs.get('id', None)


class MicrosoftGraphLocation(msrest.serialization.Model):
    """location.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: physicalAddress.
    :type address: ~people.models.MicrosoftGraphPhysicalAddress
    :param coordinates: outlookGeoCoordinates.
    :type coordinates: ~people.models.MicrosoftGraphOutlookGeoCoordinates
    :param display_name: The name associated with the location.
    :type display_name: str
    :param location_email_address: Optional email address of the location.
    :type location_email_address: str
    :param location_type:  Possible values include: "default", "conferenceRoom", "homeAddress",
     "businessAddress", "geoCoordinates", "streetAddress", "hotel", "restaurant", "localBusiness",
     "postalAddress".
    :type location_type: str or ~people.models.MicrosoftGraphLocationType
    :param location_uri: Optional URI representing the location.
    :type location_uri: str
    :param unique_id: For internal use only.
    :type unique_id: str
    :param unique_id_type:  Possible values include: "unknown", "locationStore", "directory",
     "private", "bing".
    :type unique_id_type: str or ~people.models.MicrosoftGraphLocationUniqueIdType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'MicrosoftGraphPhysicalAddress'},
        'coordinates': {'key': 'coordinates', 'type': 'MicrosoftGraphOutlookGeoCoordinates'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'location_email_address': {'key': 'locationEmailAddress', 'type': 'str'},
        'location_type': {'key': 'locationType', 'type': 'str'},
        'location_uri': {'key': 'locationUri', 'type': 'str'},
        'unique_id': {'key': 'uniqueId', 'type': 'str'},
        'unique_id_type': {'key': 'uniqueIdType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphLocation, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.coordinates = kwargs.get('coordinates', None)
        self.display_name = kwargs.get('display_name', None)
        self.location_email_address = kwargs.get('location_email_address', None)
        self.location_type = kwargs.get('location_type', None)
        self.location_uri = kwargs.get('location_uri', None)
        self.unique_id = kwargs.get('unique_id', None)
        self.unique_id_type = kwargs.get('unique_id_type', None)


class MicrosoftGraphOfficeGraphInsights(MicrosoftGraphEntity):
    """officeGraphInsights.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param shared: Calculated relationship identifying documents shared with or by the user. This
     includes URLs, file attachments, and reference attachments to OneDrive for Business and
     SharePoint files found in Outlook messages and meetings. This also includes URLs and reference
     attachments to Teams conversations. Ordered by recency of share.
    :type shared: list[~people.models.MicrosoftGraphSharedInsight]
    :param trending: Calculated relationship identifying documents trending around a user. Trending
     documents are calculated based on activity of the user's closest network of people and include
     files stored in OneDrive for Business and SharePoint. Trending insights help the user to
     discover potentially useful content that the user has access to, but has never viewed before.
    :type trending: list[~people.models.MicrosoftGraphTrending]
    :param used: Calculated relationship identifying the latest documents viewed or modified by a
     user, including OneDrive for Business and SharePoint documents, ranked by recency of use.
    :type used: list[~people.models.MicrosoftGraphUsedInsight]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'shared': {'key': 'shared', 'type': '[MicrosoftGraphSharedInsight]'},
        'trending': {'key': 'trending', 'type': '[MicrosoftGraphTrending]'},
        'used': {'key': 'used', 'type': '[MicrosoftGraphUsedInsight]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOfficeGraphInsights, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.shared = kwargs.get('shared', None)
        self.trending = kwargs.get('trending', None)
        self.used = kwargs.get('used', None)


class MicrosoftGraphOutlookGeoCoordinates(msrest.serialization.Model):
    """outlookGeoCoordinates.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param accuracy: The accuracy of the latitude and longitude. As an example, the accuracy can be
     measured in meters, such as the latitude and longitude are accurate to within 50 meters.
    :type accuracy: float
    :param altitude: The altitude of the location.
    :type altitude: float
    :param altitude_accuracy: The accuracy of the altitude.
    :type altitude_accuracy: float
    :param latitude: The latitude of the location.
    :type latitude: float
    :param longitude: The longitude of the location.
    :type longitude: float
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'accuracy': {'key': 'accuracy', 'type': 'float'},
        'altitude': {'key': 'altitude', 'type': 'float'},
        'altitude_accuracy': {'key': 'altitudeAccuracy', 'type': 'float'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphOutlookGeoCoordinates, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.accuracy = kwargs.get('accuracy', None)
        self.altitude = kwargs.get('altitude', None)
        self.altitude_accuracy = kwargs.get('altitude_accuracy', None)
        self.latitude = kwargs.get('latitude', None)
        self.longitude = kwargs.get('longitude', None)


class MicrosoftGraphPerson(MicrosoftGraphEntity):
    """person.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param birthday: The person's birthday.
    :type birthday: str
    :param company_name: The name of the person's company.
    :type company_name: str
    :param department: The person's department.
    :type department: str
    :param display_name: The person's display name.
    :type display_name: str
    :param given_name: The person's given name.
    :type given_name: str
    :param im_address: The instant message voice over IP (VOIP) session initiation protocol (SIP)
     address for the user. Read-only.
    :type im_address: str
    :param is_favorite: true if the user has flagged this person as a favorite.
    :type is_favorite: bool
    :param job_title: The person's job title.
    :type job_title: str
    :param office_location: The location of the person's office.
    :type office_location: str
    :param person_notes: Free-form notes that the user has taken about this person.
    :type person_notes: str
    :param person_type: personType.
    :type person_type: ~people.models.MicrosoftGraphPersonType
    :param phones: The person's phone numbers.
    :type phones: list[~people.models.MicrosoftGraphPhone]
    :param postal_addresses: The person's addresses.
    :type postal_addresses: list[~people.models.MicrosoftGraphLocation]
    :param profession: The person's profession.
    :type profession: str
    :param scored_email_addresses: The person's email addresses.
    :type scored_email_addresses: list[~people.models.MicrosoftGraphScoredEmailAddress]
    :param surname: The person's surname.
    :type surname: str
    :param user_principal_name: The user principal name (UPN) of the person. The UPN is an
     Internet-style login name for the person based on the Internet standard RFC 822. By convention,
     this should map to the person's email name. The general format is alias@domain.
    :type user_principal_name: str
    :param websites: The person's websites.
    :type websites: list[~people.models.MicrosoftGraphWebsite]
    :param yomi_company: The phonetic Japanese name of the person's company.
    :type yomi_company: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'birthday': {'key': 'birthday', 'type': 'str'},
        'company_name': {'key': 'companyName', 'type': 'str'},
        'department': {'key': 'department', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'im_address': {'key': 'imAddress', 'type': 'str'},
        'is_favorite': {'key': 'isFavorite', 'type': 'bool'},
        'job_title': {'key': 'jobTitle', 'type': 'str'},
        'office_location': {'key': 'officeLocation', 'type': 'str'},
        'person_notes': {'key': 'personNotes', 'type': 'str'},
        'person_type': {'key': 'personType', 'type': 'MicrosoftGraphPersonType'},
        'phones': {'key': 'phones', 'type': '[MicrosoftGraphPhone]'},
        'postal_addresses': {'key': 'postalAddresses', 'type': '[MicrosoftGraphLocation]'},
        'profession': {'key': 'profession', 'type': 'str'},
        'scored_email_addresses': {'key': 'scoredEmailAddresses', 'type': '[MicrosoftGraphScoredEmailAddress]'},
        'surname': {'key': 'surname', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'websites': {'key': 'websites', 'type': '[MicrosoftGraphWebsite]'},
        'yomi_company': {'key': 'yomiCompany', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPerson, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.birthday = kwargs.get('birthday', None)
        self.company_name = kwargs.get('company_name', None)
        self.department = kwargs.get('department', None)
        self.display_name = kwargs.get('display_name', None)
        self.given_name = kwargs.get('given_name', None)
        self.im_address = kwargs.get('im_address', None)
        self.is_favorite = kwargs.get('is_favorite', None)
        self.job_title = kwargs.get('job_title', None)
        self.office_location = kwargs.get('office_location', None)
        self.person_notes = kwargs.get('person_notes', None)
        self.person_type = kwargs.get('person_type', None)
        self.phones = kwargs.get('phones', None)
        self.postal_addresses = kwargs.get('postal_addresses', None)
        self.profession = kwargs.get('profession', None)
        self.scored_email_addresses = kwargs.get('scored_email_addresses', None)
        self.surname = kwargs.get('surname', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)
        self.websites = kwargs.get('websites', None)
        self.yomi_company = kwargs.get('yomi_company', None)


class MicrosoftGraphPersonType(msrest.serialization.Model):
    """personType.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param class_property: The type of data source, such as Person.
    :type class_property: str
    :param subclass: The secondary type of data source, such as OrganizationUser.
    :type subclass: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'class_property': {'key': 'class', 'type': 'str'},
        'subclass': {'key': 'subclass', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPersonType, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.class_property = kwargs.get('class_property', None)
        self.subclass = kwargs.get('subclass', None)


class MicrosoftGraphPhone(msrest.serialization.Model):
    """phone.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param language:
    :type language: str
    :param number: The phone number.
    :type number: str
    :param region:
    :type region: str
    :param type:  Possible values include: "home", "business", "mobile", "other", "assistant",
     "homeFax", "businessFax", "otherFax", "pager", "radio".
    :type type: str or ~people.models.MicrosoftGraphPhoneType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'language': {'key': 'language', 'type': 'str'},
        'number': {'key': 'number', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPhone, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.language = kwargs.get('language', None)
        self.number = kwargs.get('number', None)
        self.region = kwargs.get('region', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphPhysicalAddress(msrest.serialization.Model):
    """physicalAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param city: The city.
    :type city: str
    :param country_or_region: The country or region. It's a free-format string value, for example,
     'United States'.
    :type country_or_region: str
    :param postal_code: The postal code.
    :type postal_code: str
    :param state: The state.
    :type state: str
    :param street: The street.
    :type street: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'city': {'key': 'city', 'type': 'str'},
        'country_or_region': {'key': 'countryOrRegion', 'type': 'str'},
        'postal_code': {'key': 'postalCode', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'street': {'key': 'street', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphPhysicalAddress, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.city = kwargs.get('city', None)
        self.country_or_region = kwargs.get('country_or_region', None)
        self.postal_code = kwargs.get('postal_code', None)
        self.state = kwargs.get('state', None)
        self.street = kwargs.get('street', None)


class MicrosoftGraphResourceReference(msrest.serialization.Model):
    """resourceReference.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param id: The item's unique identifier.
    :type id: str
    :param type: A string value that can be used to classify the item, such as
     'microsoft.graph.driveItem'.
    :type type: str
    :param web_url: A URL leading to the referenced item.
    :type web_url: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'web_url': {'key': 'webUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphResourceReference, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)
        self.type = kwargs.get('type', None)
        self.web_url = kwargs.get('web_url', None)


class MicrosoftGraphResourceVisualization(msrest.serialization.Model):
    """resourceVisualization.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param container_display_name: A string describing where the item is stored. For example, the
     name of a SharePoint site or the user name identifying the owner of the OneDrive storing the
     item.
    :type container_display_name: str
    :param container_type: Can be used for filtering by the type of container in which the file is
     stored. Such as Site or OneDriveBusiness.
    :type container_type: str
    :param container_web_url: A path leading to the folder in which the item is stored.
    :type container_web_url: str
    :param media_type: The item's media type. Can be used for filtering for a specific type of file
     based on supported IANA Media Mime Types. Note that not all Media Mime Types are supported.
    :type media_type: str
    :param preview_image_url: A URL leading to the preview image for the item.
    :type preview_image_url: str
    :param preview_text: A preview text for the item.
    :type preview_text: str
    :param title: The item's title text.
    :type title: str
    :param type: The item's media type. Can be used for filtering for a specific file based on a
     specific type. See below for supported types.
    :type type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'container_display_name': {'key': 'containerDisplayName', 'type': 'str'},
        'container_type': {'key': 'containerType', 'type': 'str'},
        'container_web_url': {'key': 'containerWebUrl', 'type': 'str'},
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'preview_image_url': {'key': 'previewImageUrl', 'type': 'str'},
        'preview_text': {'key': 'previewText', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphResourceVisualization, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.container_display_name = kwargs.get('container_display_name', None)
        self.container_type = kwargs.get('container_type', None)
        self.container_web_url = kwargs.get('container_web_url', None)
        self.media_type = kwargs.get('media_type', None)
        self.preview_image_url = kwargs.get('preview_image_url', None)
        self.preview_text = kwargs.get('preview_text', None)
        self.title = kwargs.get('title', None)
        self.type = kwargs.get('type', None)


class MicrosoftGraphScoredEmailAddress(msrest.serialization.Model):
    """scoredEmailAddress.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: The email address.
    :type address: str
    :param item_id:
    :type item_id: str
    :param relevance_score: The relevance score of the email address. A relevance score is used as
     a sort key, in relation to the other returned results. A higher relevance score value
     corresponds to a more relevant result. Relevance is determined by the user’s communication and
     collaboration patterns and business relationships.
    :type relevance_score: float
    :param selection_likelihood:  Possible values include: "notSpecified", "high".
    :type selection_likelihood: str or ~people.models.MicrosoftGraphSelectionLikelihoodInfo
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'item_id': {'key': 'itemId', 'type': 'str'},
        'relevance_score': {'key': 'relevanceScore', 'type': 'float'},
        'selection_likelihood': {'key': 'selectionLikelihood', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphScoredEmailAddress, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.item_id = kwargs.get('item_id', None)
        self.relevance_score = kwargs.get('relevance_score', None)
        self.selection_likelihood = kwargs.get('selection_likelihood', None)


class MicrosoftGraphSharedInsight(MicrosoftGraphEntity):
    """sharedInsight.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_shared: sharingDetail.
    :type last_shared: ~people.models.MicrosoftGraphSharingDetail
    :param resource_reference: resourceReference.
    :type resource_reference: ~people.models.MicrosoftGraphResourceReference
    :param resource_visualization: resourceVisualization.
    :type resource_visualization: ~people.models.MicrosoftGraphResourceVisualization
    :param sharing_history:
    :type sharing_history: list[~people.models.MicrosoftGraphSharingDetail]
    :param last_shared_method: entity.
    :type last_shared_method: ~people.models.MicrosoftGraphEntity
    :param resource: entity.
    :type resource: ~people.models.MicrosoftGraphEntity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_shared': {'key': 'lastShared', 'type': 'MicrosoftGraphSharingDetail'},
        'resource_reference': {'key': 'resourceReference', 'type': 'MicrosoftGraphResourceReference'},
        'resource_visualization': {'key': 'resourceVisualization', 'type': 'MicrosoftGraphResourceVisualization'},
        'sharing_history': {'key': 'sharingHistory', 'type': '[MicrosoftGraphSharingDetail]'},
        'last_shared_method': {'key': 'lastSharedMethod', 'type': 'MicrosoftGraphEntity'},
        'resource': {'key': 'resource', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSharedInsight, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.last_shared = kwargs.get('last_shared', None)
        self.resource_reference = kwargs.get('resource_reference', None)
        self.resource_visualization = kwargs.get('resource_visualization', None)
        self.sharing_history = kwargs.get('sharing_history', None)
        self.last_shared_method = kwargs.get('last_shared_method', None)
        self.resource = kwargs.get('resource', None)


class MicrosoftGraphSharingDetail(msrest.serialization.Model):
    """sharingDetail.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param shared_by: insightIdentity.
    :type shared_by: ~people.models.MicrosoftGraphInsightIdentity
    :param shared_date_time: The date and time the file was last shared. The timestamp represents
     date and time information using ISO 8601 format and is always in UTC time. For example,
     midnight UTC on Jan 1, 2014 would look like this: 2014-01-01T00:00:00Z. Read-only.
    :type shared_date_time: ~datetime.datetime
    :param sharing_reference: resourceReference.
    :type sharing_reference: ~people.models.MicrosoftGraphResourceReference
    :param sharing_subject: The subject with which the document was shared.
    :type sharing_subject: str
    :param sharing_type: Determines the way the document was shared, can be by a 'Link',
     'Attachment', 'Group', 'Site'.
    :type sharing_type: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'shared_by': {'key': 'sharedBy', 'type': 'MicrosoftGraphInsightIdentity'},
        'shared_date_time': {'key': 'sharedDateTime', 'type': 'iso-8601'},
        'sharing_reference': {'key': 'sharingReference', 'type': 'MicrosoftGraphResourceReference'},
        'sharing_subject': {'key': 'sharingSubject', 'type': 'str'},
        'sharing_type': {'key': 'sharingType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphSharingDetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.shared_by = kwargs.get('shared_by', None)
        self.shared_date_time = kwargs.get('shared_date_time', None)
        self.sharing_reference = kwargs.get('sharing_reference', None)
        self.sharing_subject = kwargs.get('sharing_subject', None)
        self.sharing_type = kwargs.get('sharing_type', None)


class MicrosoftGraphTrending(MicrosoftGraphEntity):
    """trending.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_modified_date_time:
    :type last_modified_date_time: ~datetime.datetime
    :param resource_reference: resourceReference.
    :type resource_reference: ~people.models.MicrosoftGraphResourceReference
    :param resource_visualization: resourceVisualization.
    :type resource_visualization: ~people.models.MicrosoftGraphResourceVisualization
    :param weight: Value indicating how much the document is currently trending. The larger the
     number, the more the document is currently trending around the user (the more relevant it is).
     Returned documents are sorted by this value.
    :type weight: float
    :param resource: entity.
    :type resource: ~people.models.MicrosoftGraphEntity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'resource_reference': {'key': 'resourceReference', 'type': 'MicrosoftGraphResourceReference'},
        'resource_visualization': {'key': 'resourceVisualization', 'type': 'MicrosoftGraphResourceVisualization'},
        'weight': {'key': 'weight', 'type': 'float'},
        'resource': {'key': 'resource', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphTrending, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)
        self.resource_reference = kwargs.get('resource_reference', None)
        self.resource_visualization = kwargs.get('resource_visualization', None)
        self.weight = kwargs.get('weight', None)
        self.resource = kwargs.get('resource', None)


class MicrosoftGraphUsageDetails(msrest.serialization.Model):
    """usageDetails.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_accessed_date_time: The date and time the resource was last accessed by the user.
     The timestamp represents date and time information using ISO 8601 format and is always in UTC
     time. For example, midnight UTC on Jan 1, 2014 would look like this: 2014-01-01T00:00:00Z.
     Read-only.
    :type last_accessed_date_time: ~datetime.datetime
    :param last_modified_date_time: The date and time the resource was last modified by the user.
     The timestamp represents date and time information using ISO 8601 format and is always in UTC
     time. For example, midnight UTC on Jan 1, 2014 would look like this: 2014-01-01T00:00:00Z.
     Read-only.
    :type last_modified_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_accessed_date_time': {'key': 'lastAccessedDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUsageDetails, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.last_accessed_date_time = kwargs.get('last_accessed_date_time', None)
        self.last_modified_date_time = kwargs.get('last_modified_date_time', None)


class MicrosoftGraphUsedInsight(MicrosoftGraphEntity):
    """usedInsight.

    :param id: Read-only.
    :type id: str
    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param last_used: usageDetails.
    :type last_used: ~people.models.MicrosoftGraphUsageDetails
    :param resource_reference: resourceReference.
    :type resource_reference: ~people.models.MicrosoftGraphResourceReference
    :param resource_visualization: resourceVisualization.
    :type resource_visualization: ~people.models.MicrosoftGraphResourceVisualization
    :param resource: entity.
    :type resource: ~people.models.MicrosoftGraphEntity
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'last_used': {'key': 'lastUsed', 'type': 'MicrosoftGraphUsageDetails'},
        'resource_reference': {'key': 'resourceReference', 'type': 'MicrosoftGraphResourceReference'},
        'resource_visualization': {'key': 'resourceVisualization', 'type': 'MicrosoftGraphResourceVisualization'},
        'resource': {'key': 'resource', 'type': 'MicrosoftGraphEntity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphUsedInsight, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.last_used = kwargs.get('last_used', None)
        self.resource_reference = kwargs.get('resource_reference', None)
        self.resource_visualization = kwargs.get('resource_visualization', None)
        self.resource = kwargs.get('resource', None)


class MicrosoftGraphWebsite(msrest.serialization.Model):
    """website.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param address: The URL of the website.
    :type address: str
    :param display_name: The display name of the web site.
    :type display_name: str
    :param type:  Possible values include: "other", "home", "work", "blog", "profile".
    :type type: str or ~people.models.MicrosoftGraphWebsiteType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'address': {'key': 'address', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftGraphWebsite, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.address = kwargs.get('address', None)
        self.display_name = kwargs.get('display_name', None)
        self.type = kwargs.get('type', None)


class OdataError(msrest.serialization.Model):
    """OdataError.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param error: Required.
    :type error: ~people.models.OdataErrorMain
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'error': {'key': 'error', 'type': 'OdataErrorMain'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataError, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.error = kwargs['error']


class OdataErrorDetail(msrest.serialization.Model):
    """OdataErrorDetail.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorDetail, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)


class OdataErrorMain(msrest.serialization.Model):
    """OdataErrorMain.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Required.
    :type code: str
    :param message: Required.
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~people.models.OdataErrorDetail]
    :param innererror: The structure of this object is service-specific.
    :type innererror: dict[str, object]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OdataErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OdataErrorMain, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)
