# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.validators import validate_file_or_dict
from azext_personalcontacts.action import (
    AddBusinessAddress,
    AddEmailAddresses,
    AddExtensions,
    AddPersonalcontactsUserCreateContactMultiValueExtendedProperties,
    AddPhoto,
    AddPersonalcontactsUserCreateContactSingleValueExtendedProperties,
    AddPersonalcontactsUserCreateContactFolderMultiValueExtendedProperties,
    AddPersonalcontactsUserCreateContactFolderSingleValueExtendedProperties
)


def load_arguments(self, _):

    with self.argument_context('personalcontacts user create-contact') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='+', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('assistant_name', type=str, help='The name of the contact\'s assistant.')
        c.argument('birthday', help='The contact\'s birthday. The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('business_address', action=AddBusinessAddress, nargs='+', help='physicalAddress')
        c.argument('business_home_page', type=str, help='The business home page of the contact.')
        c.argument('business_phones', nargs='+', help='The contact\'s business phone numbers.')
        c.argument('children', nargs='+', help='The names of the contact\'s children.')
        c.argument('company_name', type=str, help='The name of the contact\'s company.')
        c.argument('department', type=str, help='The contact\'s department.')
        c.argument('display_name', type=str, help='The contact\'s display name. You can specify the display name in a '
                   'create or update operation. Note that later updates to other properties may cause an automatically '
                   'generated value to overwrite the displayName value you have specified. To preserve a pre-existing '
                   'value, always include it as displayName in an update operation.')
        c.argument('email_addresses', action=AddEmailAddresses, nargs='+', help='The contact\'s email addresses.')
        c.argument('file_as', type=str, help='The name the contact is filed under.')
        c.argument('generation', type=str, help='The contact\'s generation.')
        c.argument('given_name', type=str, help='The contact\'s given name.')
        c.argument('home_address', action=AddBusinessAddress, nargs='+', help='physicalAddress')
        c.argument('home_phones', nargs='+', help='The contact\'s home phone numbers.')
        c.argument('im_addresses', nargs='+', help='The contact\'s instant messaging (IM) addresses.')
        c.argument('initials', type=str, help='The contact\'s initials.')
        c.argument('job_title', type=str, help='The contactâ€™s job title.')
        c.argument('manager', type=str, help='The name of the contact\'s manager.')
        c.argument('middle_name', type=str, help='The contact\'s middle name.')
        c.argument('mobile_phone', type=str, help='The contact\'s mobile phone number.')
        c.argument('nick_name', type=str, help='The contact\'s nickname.')
        c.argument('office_location', type=str, help='The location of the contact\'s office.')
        c.argument('other_address', action=AddBusinessAddress, nargs='+', help='physicalAddress')
        c.argument('parent_folder_id', type=str, help='The ID of the contact\'s parent folder.')
        c.argument('personal_notes', type=str, help='The user\'s notes about the contact.')
        c.argument('profession', type=str, help='The contact\'s profession.')
        c.argument('spouse_name', type=str, help='The name of the contact\'s spouse/partner.')
        c.argument('surname', type=str, help='The contact\'s surname.')
        c.argument('title', type=str, help='The contact\'s title.')
        c.argument('yomi_company_name', type=str, help='The phonetic Japanese company name of the contact.')
        c.argument('yomi_given_name', type=str, help='The phonetic Japanese given name (first name) of the contact.')
        c.argument('yomi_surname', type=str, help='The phonetic Japanese surname (last name)  of the contact.')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the contact. Read-only. Nullable.')
        c.argument('multi_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the contact. Read-only. Nullable.')
        c.argument('photo', action=AddPhoto, nargs='+', help='profilePhoto')
        c.argument('single_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the contact. Read-only. Nullable.')

    with self.argument_context('personalcontacts user create-contact-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The folder\'s display name.')
        c.argument('parent_folder_id', type=str, help='The ID of the folder\'s parent folder.')
        c.argument('child_folders', type=validate_file_or_dict, help='The collection of child folders in the folder. '
                   'Navigation property. Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('contacts', type=validate_file_or_dict, help='The contacts in the folder. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactFolderMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable.')
        c.argument('single_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactFolderSingleValueExtendedProperties, nargs='+',
                   help='The collection of single-value extended properties defined for the contactFolder. Read-only. '
                   'Nullable.')

    with self.argument_context('personalcontacts user delete-contact') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('personalcontacts user delete-contact-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('personalcontacts user list-contact') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user list-contact-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user show-contact') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user show-contact-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user update-contact') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='+', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('assistant_name', type=str, help='The name of the contact\'s assistant.')
        c.argument('birthday', help='The contact\'s birthday. The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('business_address', action=AddBusinessAddress, nargs='+', help='physicalAddress')
        c.argument('business_home_page', type=str, help='The business home page of the contact.')
        c.argument('business_phones', nargs='+', help='The contact\'s business phone numbers.')
        c.argument('children', nargs='+', help='The names of the contact\'s children.')
        c.argument('company_name', type=str, help='The name of the contact\'s company.')
        c.argument('department', type=str, help='The contact\'s department.')
        c.argument('display_name', type=str, help='The contact\'s display name. You can specify the display name in a '
                   'create or update operation. Note that later updates to other properties may cause an automatically '
                   'generated value to overwrite the displayName value you have specified. To preserve a pre-existing '
                   'value, always include it as displayName in an update operation.')
        c.argument('email_addresses', action=AddEmailAddresses, nargs='+', help='The contact\'s email addresses.')
        c.argument('file_as', type=str, help='The name the contact is filed under.')
        c.argument('generation', type=str, help='The contact\'s generation.')
        c.argument('given_name', type=str, help='The contact\'s given name.')
        c.argument('home_address', action=AddBusinessAddress, nargs='+', help='physicalAddress')
        c.argument('home_phones', nargs='+', help='The contact\'s home phone numbers.')
        c.argument('im_addresses', nargs='+', help='The contact\'s instant messaging (IM) addresses.')
        c.argument('initials', type=str, help='The contact\'s initials.')
        c.argument('job_title', type=str, help='The contactâ€™s job title.')
        c.argument('manager', type=str, help='The name of the contact\'s manager.')
        c.argument('middle_name', type=str, help='The contact\'s middle name.')
        c.argument('mobile_phone', type=str, help='The contact\'s mobile phone number.')
        c.argument('nick_name', type=str, help='The contact\'s nickname.')
        c.argument('office_location', type=str, help='The location of the contact\'s office.')
        c.argument('other_address', action=AddBusinessAddress, nargs='+', help='physicalAddress')
        c.argument('parent_folder_id', type=str, help='The ID of the contact\'s parent folder.')
        c.argument('personal_notes', type=str, help='The user\'s notes about the contact.')
        c.argument('profession', type=str, help='The contact\'s profession.')
        c.argument('spouse_name', type=str, help='The name of the contact\'s spouse/partner.')
        c.argument('surname', type=str, help='The contact\'s surname.')
        c.argument('title', type=str, help='The contact\'s title.')
        c.argument('yomi_company_name', type=str, help='The phonetic Japanese company name of the contact.')
        c.argument('yomi_given_name', type=str, help='The phonetic Japanese given name (first name) of the contact.')
        c.argument('yomi_surname', type=str, help='The phonetic Japanese surname (last name)  of the contact.')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the contact. Read-only. Nullable.')
        c.argument('multi_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the contact. Read-only. Nullable.')
        c.argument('photo', action=AddPhoto, nargs='+', help='profilePhoto')
        c.argument('single_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the contact. Read-only. Nullable.')

    with self.argument_context('personalcontacts user update-contact-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The folder\'s display name.')
        c.argument('parent_folder_id', type=str, help='The ID of the folder\'s parent folder.')
        c.argument('child_folders', type=validate_file_or_dict, help='The collection of child folders in the folder. '
                   'Navigation property. Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('contacts', type=validate_file_or_dict, help='The contacts in the folder. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactFolderMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable.')
        c.argument('single_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactFolderSingleValueExtendedProperties, nargs='+',
                   help='The collection of single-value extended properties defined for the contactFolder. Read-only. '
                   'Nullable.')

    with self.argument_context('personalcontacts user-contact-folder create-child-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The folder\'s display name.')
        c.argument('parent_folder_id', type=str, help='The ID of the folder\'s parent folder.')
        c.argument('child_folders', type=validate_file_or_dict, help='The collection of child folders in the folder. '
                   'Navigation property. Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('contacts', type=validate_file_or_dict, help='The contacts in the folder. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactFolderMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable.')
        c.argument('single_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactFolderSingleValueExtendedProperties, nargs='+',
                   help='The collection of single-value extended properties defined for the contactFolder. Read-only. '
                   'Nullable.')

    with self.argument_context('personalcontacts user-contact-folder create-contact') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='+', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('assistant_name', type=str, help='The name of the contact\'s assistant.')
        c.argument('birthday', help='The contact\'s birthday. The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('business_address', action=AddBusinessAddress, nargs='+', help='physicalAddress')
        c.argument('business_home_page', type=str, help='The business home page of the contact.')
        c.argument('business_phones', nargs='+', help='The contact\'s business phone numbers.')
        c.argument('children', nargs='+', help='The names of the contact\'s children.')
        c.argument('company_name', type=str, help='The name of the contact\'s company.')
        c.argument('department', type=str, help='The contact\'s department.')
        c.argument('display_name', type=str, help='The contact\'s display name. You can specify the display name in a '
                   'create or update operation. Note that later updates to other properties may cause an automatically '
                   'generated value to overwrite the displayName value you have specified. To preserve a pre-existing '
                   'value, always include it as displayName in an update operation.')
        c.argument('email_addresses', action=AddEmailAddresses, nargs='+', help='The contact\'s email addresses.')
        c.argument('file_as', type=str, help='The name the contact is filed under.')
        c.argument('generation', type=str, help='The contact\'s generation.')
        c.argument('given_name', type=str, help='The contact\'s given name.')
        c.argument('home_address', action=AddBusinessAddress, nargs='+', help='physicalAddress')
        c.argument('home_phones', nargs='+', help='The contact\'s home phone numbers.')
        c.argument('im_addresses', nargs='+', help='The contact\'s instant messaging (IM) addresses.')
        c.argument('initials', type=str, help='The contact\'s initials.')
        c.argument('job_title', type=str, help='The contactâ€™s job title.')
        c.argument('manager', type=str, help='The name of the contact\'s manager.')
        c.argument('middle_name', type=str, help='The contact\'s middle name.')
        c.argument('mobile_phone', type=str, help='The contact\'s mobile phone number.')
        c.argument('nick_name', type=str, help='The contact\'s nickname.')
        c.argument('office_location', type=str, help='The location of the contact\'s office.')
        c.argument('other_address', action=AddBusinessAddress, nargs='+', help='physicalAddress')
        c.argument('parent_folder_id', type=str, help='The ID of the contact\'s parent folder.')
        c.argument('personal_notes', type=str, help='The user\'s notes about the contact.')
        c.argument('profession', type=str, help='The contact\'s profession.')
        c.argument('spouse_name', type=str, help='The name of the contact\'s spouse/partner.')
        c.argument('surname', type=str, help='The contact\'s surname.')
        c.argument('title', type=str, help='The contact\'s title.')
        c.argument('yomi_company_name', type=str, help='The phonetic Japanese company name of the contact.')
        c.argument('yomi_given_name', type=str, help='The phonetic Japanese given name (first name) of the contact.')
        c.argument('yomi_surname', type=str, help='The phonetic Japanese surname (last name)  of the contact.')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the contact. Read-only. Nullable.')
        c.argument('multi_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the contact. Read-only. Nullable.')
        c.argument('photo', action=AddPhoto, nargs='+', help='profilePhoto')
        c.argument('single_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the contact. Read-only. Nullable.')

    with self.argument_context('personalcontacts user-contact-folder create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('personalcontacts user-contact-folder create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('personalcontacts user-contact-folder delete-child-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_folder_id1', type=str, help='key: id of contactFolder')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('personalcontacts user-contact-folder delete-contact') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('personalcontacts user-contact-folder delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('personalcontacts user-contact-folder delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('personalcontacts user-contact-folder list-child-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder list-contact') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder show-child-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_folder_id1', type=str, help='key: id of contactFolder')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder show-contact') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder update-child-folder') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_folder_id1', type=str, help='key: id of contactFolder')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('display_name', type=str, help='The folder\'s display name.')
        c.argument('parent_folder_id', type=str, help='The ID of the folder\'s parent folder.')
        c.argument('child_folders', type=validate_file_or_dict, help='The collection of child folders in the folder. '
                   'Navigation property. Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('contacts', type=validate_file_or_dict, help='The contacts in the folder. Navigation property. '
                   'Read-only. Nullable. Expected value: json-string/@json-file.')
        c.argument('multi_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactFolderMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable.')
        c.argument('single_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactFolderSingleValueExtendedProperties, nargs='+',
                   help='The collection of single-value extended properties defined for the contactFolder. Read-only. '
                   'Nullable.')

    with self.argument_context('personalcontacts user-contact-folder update-contact') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('categories', nargs='+', help='The categories associated with the item')
        c.argument('change_key', type=str, help='Identifies the version of the item. Every time the item is changed, '
                   'changeKey changes as well. This allows Exchange to apply changes to the correct version of the '
                   'object. Read-only.')
        c.argument('created_date_time', help='The Timestamp type represents date and time information using ISO 8601 '
                   'format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '
                   '\'2014-01-01T00:00:00Z\'')
        c.argument('last_modified_date_time', help='The Timestamp type represents date and time information using ISO '
                   '8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like '
                   'this: \'2014-01-01T00:00:00Z\'')
        c.argument('assistant_name', type=str, help='The name of the contact\'s assistant.')
        c.argument('birthday', help='The contact\'s birthday. The Timestamp type represents date and time information '
                   'using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would '
                   'look like this: \'2014-01-01T00:00:00Z\'')
        c.argument('business_address', action=AddBusinessAddress, nargs='+', help='physicalAddress')
        c.argument('business_home_page', type=str, help='The business home page of the contact.')
        c.argument('business_phones', nargs='+', help='The contact\'s business phone numbers.')
        c.argument('children', nargs='+', help='The names of the contact\'s children.')
        c.argument('company_name', type=str, help='The name of the contact\'s company.')
        c.argument('department', type=str, help='The contact\'s department.')
        c.argument('display_name', type=str, help='The contact\'s display name. You can specify the display name in a '
                   'create or update operation. Note that later updates to other properties may cause an automatically '
                   'generated value to overwrite the displayName value you have specified. To preserve a pre-existing '
                   'value, always include it as displayName in an update operation.')
        c.argument('email_addresses', action=AddEmailAddresses, nargs='+', help='The contact\'s email addresses.')
        c.argument('file_as', type=str, help='The name the contact is filed under.')
        c.argument('generation', type=str, help='The contact\'s generation.')
        c.argument('given_name', type=str, help='The contact\'s given name.')
        c.argument('home_address', action=AddBusinessAddress, nargs='+', help='physicalAddress')
        c.argument('home_phones', nargs='+', help='The contact\'s home phone numbers.')
        c.argument('im_addresses', nargs='+', help='The contact\'s instant messaging (IM) addresses.')
        c.argument('initials', type=str, help='The contact\'s initials.')
        c.argument('job_title', type=str, help='The contactâ€™s job title.')
        c.argument('manager', type=str, help='The name of the contact\'s manager.')
        c.argument('middle_name', type=str, help='The contact\'s middle name.')
        c.argument('mobile_phone', type=str, help='The contact\'s mobile phone number.')
        c.argument('nick_name', type=str, help='The contact\'s nickname.')
        c.argument('office_location', type=str, help='The location of the contact\'s office.')
        c.argument('other_address', action=AddBusinessAddress, nargs='+', help='physicalAddress')
        c.argument('parent_folder_id', type=str, help='The ID of the contact\'s parent folder.')
        c.argument('personal_notes', type=str, help='The user\'s notes about the contact.')
        c.argument('profession', type=str, help='The contact\'s profession.')
        c.argument('spouse_name', type=str, help='The name of the contact\'s spouse/partner.')
        c.argument('surname', type=str, help='The contact\'s surname.')
        c.argument('title', type=str, help='The contact\'s title.')
        c.argument('yomi_company_name', type=str, help='The phonetic Japanese company name of the contact.')
        c.argument('yomi_given_name', type=str, help='The phonetic Japanese given name (first name) of the contact.')
        c.argument('yomi_surname', type=str, help='The phonetic Japanese surname (last name)  of the contact.')
        c.argument('extensions', action=AddExtensions, nargs='+', help='The collection of open extensions defined for '
                   'the contact. Read-only. Nullable.')
        c.argument('multi_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactMultiValueExtendedProperties, nargs='+', help='The '
                   'collection of multi-value extended properties defined for the contact. Read-only. Nullable.')
        c.argument('photo', action=AddPhoto, nargs='+', help='profilePhoto')
        c.argument('single_value_extended_properties',
                   action=AddPersonalcontactsUserCreateContactSingleValueExtendedProperties, nargs='+', help='The '
                   'collection of single-value extended properties defined for the contact. Read-only. Nullable.')

    with self.argument_context('personalcontacts user-contact-folder update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('personalcontacts user-contact-folder update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('personalcontacts user-contact-folder-contact create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('personalcontacts user-contact-folder-contact create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('personalcontacts user-contact-folder-contact create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('personalcontacts user-contact-folder-contact delete-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('personalcontacts user-contact-folder-contact delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('personalcontacts user-contact-folder-contact delete-photo') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('personalcontacts user-contact-folder-contact delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('personalcontacts user-contact-folder-contact list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder-contact list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder-contact list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder-contact show-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder-contact show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder-contact show-photo') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder-contact show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact-folder-contact update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('personalcontacts user-contact-folder-contact update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('personalcontacts user-contact-folder-contact update-photo') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('height', type=int, help='The height of the photo. Read-only.')
        c.argument('width', type=int, help='The width of the photo. Read-only.')

    with self.argument_context('personalcontacts user-contact-folder-contact update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_folder_id', type=str, help='key: id of contactFolder')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('personalcontacts user-contact create-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('personalcontacts user-contact create-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('personalcontacts user-contact create-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')

    with self.argument_context('personalcontacts user-contact delete-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('personalcontacts user-contact delete-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('personalcontacts user-contact delete-photo') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('personalcontacts user-contact delete-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('if_match', type=str, help='ETag')

    with self.argument_context('personalcontacts user-contact list-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact list-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact list-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('orderby', nargs='+', help='Order items by property values')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact show-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact show-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact show-photo') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact show-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('select', nargs='+', help='Select properties to be returned')
        c.argument('expand', nargs='+', help='Expand related entities')

    with self.argument_context('personalcontacts user-contact update-extension') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('extension_id', type=str, help='key: id of extension')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')

    with self.argument_context('personalcontacts user-contact update-multi-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('multi_value_legacy_extended_property_id', type=str, help='key: id of '
                   'multiValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', nargs='+', help='A collection of property values.')

    with self.argument_context('personalcontacts user-contact update-photo') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('height', type=int, help='The height of the photo. Read-only.')
        c.argument('width', type=int, help='The width of the photo. Read-only.')

    with self.argument_context('personalcontacts user-contact update-single-value-extended-property') as c:
        c.argument('user_id', type=str, help='key: id of user')
        c.argument('contact_id', type=str, help='key: id of contact')
        c.argument('single_value_legacy_extended_property_id', type=str, help='key: id of '
                   'singleValueLegacyExtendedProperty')
        c.argument('id_', options_list=['--id'], type=str, help='Read-only.')
        c.argument('value', type=str, help='A property value.')
